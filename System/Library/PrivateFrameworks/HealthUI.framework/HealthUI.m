void *sub_1E0B2A674@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1E0B2A68C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

void sub_1E0B2A6E4(uint64_t a1, SEL *a2, uint64_t *a3, void *a4)
{
  id v6 = [self *a2];
  uint64_t v7 = sub_1E0ECD1D0();
  uint64_t v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

uint64_t UITraitCollection.widthDesignation.getter()
{
  sub_1E0B2A804();
  sub_1E0B2A7C0((unint64_t *)&unk_1EAD698C0);
  sub_1E0ECD610();
  return v1;
}

uint64_t sub_1E0B2A7C0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HKWidthDesignation(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1E0B2A804()
{
  unint64_t result = qword_1EAD698B8;
  if (!qword_1EAD698B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD698B8);
  }
  return result;
}

id HKHealthUIFrameworkBundle()
{
  v0 = (void *)HKHealthUIFrameworkBundle___ClassBundle;
  if (!HKHealthUIFrameworkBundle___ClassBundle)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
    v2 = (void *)HKHealthUIFrameworkBundle___ClassBundle;
    HKHealthUIFrameworkBundle___ClassBundle = v1;

    v0 = (void *)HKHealthUIFrameworkBundle___ClassBundle;
  }
  return v0;
}

id HKMostRecentSampleEndDateText(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5)
  {
    if ([v6 isDateInToday:v5])
    {
      if (a3) {
        uint64_t v8 = 36;
      }
      else {
        uint64_t v8 = 27;
      }
    }
    else if ([v7 isDateInYesterday:v5])
    {
      uint64_t v8 = 36;
    }
    else
    {
      v10 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      v11 = [MEMORY[0x1E4F1C9C8] date];
      uint64_t v12 = [v10 component:4 fromDate:v11];

      v13 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      uint64_t v14 = [v13 component:4 fromDate:v5];

      if (v14 == v12) {
        uint64_t v8 = 12;
      }
      else {
        uint64_t v8 = 7;
      }
    }
    uint64_t v9 = HKLocalizedStringForDateAndTemplateWithFormattingContext(v5, v8, 2);
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

id HKLocalizedStringForDateAndTemplateWithFormattingContext(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = HKDateFormatterFromTemplate(a2);
  uint64_t v7 = [v6 formattingContext];
  if (v7 == a3)
  {
    uint64_t v8 = [v6 stringFromDate:v5];
  }
  else
  {
    uint64_t v9 = v7;
    [v6 setFormattingContext:a3];
    uint64_t v8 = [v6 stringFromDate:v5];
    [v6 setFormattingContext:v9];
  }

  return v8;
}

id HKDateFormatterFromTemplate(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      v2 = &__block_literal_global_692;
      goto LABEL_67;
    case 1:
      v2 = &__block_literal_global_697;
      goto LABEL_67;
    case 2:
      if (CUIKCurrentLocaleRequiresUnabbrevatedMonthNames()) {
        goto LABEL_8;
      }
      goto LABEL_9;
    case 3:
LABEL_9:
      _GenerateDateFormatterShortMonthHeader();
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_71;
    case 4:
      id v5 = (void *)_GenerateDateFormatterMonthUltraShort___formatter;
      if (!_GenerateDateFormatterMonthUltraShort___formatter)
      {
        id v6 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        uint64_t v7 = (void *)_GenerateDateFormatterMonthUltraShort___formatter;
        _GenerateDateFormatterMonthUltraShort___formatter = (uint64_t)v6;

        [(id)_GenerateDateFormatterMonthUltraShort___formatter setLocalizedDateFormatFromTemplate:@"LLLLL"];
        id v5 = (void *)_GenerateDateFormatterMonthUltraShort___formatter;
      }
      goto LABEL_70;
    case 5:
LABEL_8:
      _GenerateDateFormatterLongMonthHeader();
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_71;
    case 6:
      v2 = &__block_literal_global_708;
      goto LABEL_67;
    case 7:
      v2 = &__block_literal_global_710;
      goto LABEL_67;
    case 8:
      v2 = &__block_literal_global_712;
      goto LABEL_67;
    case 9:
      v2 = &__block_literal_global_714;
      goto LABEL_67;
    case 10:
      id v5 = (void *)_GenerateDateFormatterLongMonthDateYear___dateFormatter;
      if (!_GenerateDateFormatterLongMonthDateYear___dateFormatter)
      {
        id v8 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        uint64_t v9 = (void *)_GenerateDateFormatterLongMonthDateYear___dateFormatter;
        _GenerateDateFormatterLongMonthDateYear___dateFormatter = (uint64_t)v8;

        [(id)_GenerateDateFormatterLongMonthDateYear___dateFormatter setDateStyle:3];
        [(id)_GenerateDateFormatterLongMonthDateYear___dateFormatter setTimeStyle:0];
        id v5 = (void *)_GenerateDateFormatterLongMonthDateYear___dateFormatter;
      }
      goto LABEL_70;
    case 11:
      id v5 = (void *)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter;
      if (!_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter)
      {
        id v10 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v11 = (void *)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter;
        _GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter = (uint64_t)v10;

        [(id)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter setDateStyle:3];
        [(id)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter setTimeStyle:0];
        [(id)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter setFormattingContext:5];
        id v5 = (void *)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter;
      }
      goto LABEL_70;
    case 12:
      v2 = &__block_literal_global_716;
      goto LABEL_67;
    case 13:
      v2 = &__block_literal_global_718;
      goto LABEL_67;
    case 14:
      v2 = &__block_literal_global_720;
      goto LABEL_67;
    case 15:
      v2 = &__block_literal_global_722;
      goto LABEL_67;
    case 16:
      id v5 = (void *)_GenerateDateFormatterDate___formatter;
      if (!_GenerateDateFormatterDate___formatter)
      {
        id v12 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v13 = (void *)_GenerateDateFormatterDate___formatter;
        _GenerateDateFormatterDate___formatter = (uint64_t)v12;

        [(id)_GenerateDateFormatterDate___formatter setLocalizedDateFormatFromTemplate:@"d"];
        id v5 = (void *)_GenerateDateFormatterDate___formatter;
      }
      goto LABEL_70;
    case 17:
      id v5 = (void *)_GenerateDateFormatterDateDay___formatter;
      if (!_GenerateDateFormatterDateDay___formatter)
      {
        id v14 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v15 = (void *)_GenerateDateFormatterDateDay___formatter;
        _GenerateDateFormatterDateDay___formatter = (uint64_t)v14;

        [(id)_GenerateDateFormatterDateDay___formatter setLocalizedDateFormatFromTemplate:@"d ccc"];
        id v5 = (void *)_GenerateDateFormatterDateDay___formatter;
      }
      goto LABEL_70;
    case 18:
      id v5 = (void *)_GenerateDateFormatterDay___formatter;
      if (!_GenerateDateFormatterDay___formatter)
      {
        id v16 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v17 = (void *)_GenerateDateFormatterDay___formatter;
        _GenerateDateFormatterDay___formatter = (uint64_t)v16;

        [(id)_GenerateDateFormatterDay___formatter setLocalizedDateFormatFromTemplate:@"ccc"];
        id v5 = (void *)_GenerateDateFormatterDay___formatter;
      }
      goto LABEL_70;
    case 19:
      id v5 = (void *)_GenerateDateFormatterLongDay___formatter;
      if (!_GenerateDateFormatterLongDay___formatter)
      {
        id v18 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v19 = (void *)_GenerateDateFormatterLongDay___formatter;
        _GenerateDateFormatterLongDay___formatter = (uint64_t)v18;

        [(id)_GenerateDateFormatterLongDay___formatter setLocalizedDateFormatFromTemplate:@"cccc"];
        id v5 = (void *)_GenerateDateFormatterLongDay___formatter;
      }
      goto LABEL_70;
    case 20:
      id v5 = (void *)_GenerateDateFormatterDayUltraShort___formatter;
      if (!_GenerateDateFormatterDayUltraShort___formatter)
      {
        id v20 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v21 = (void *)_GenerateDateFormatterDayUltraShort___formatter;
        _GenerateDateFormatterDayUltraShort___formatter = (uint64_t)v20;

        [(id)_GenerateDateFormatterDayUltraShort___formatter setLocalizedDateFormatFromTemplate:@"ccccc"];
        id v5 = (void *)_GenerateDateFormatterDayUltraShort___formatter;
      }
      goto LABEL_70;
    case 21:
      id v5 = (void *)_GenerateDateFormatterLongDayDate___formatter;
      if (!_GenerateDateFormatterLongDayDate___formatter)
      {
        id v22 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v23 = (void *)_GenerateDateFormatterLongDayDate___formatter;
        _GenerateDateFormatterLongDayDate___formatter = (uint64_t)v22;

        v24 = (void *)_GenerateDateFormatterLongDayDate___formatter;
        v25 = CPDateFormatStringForFormatType();
        [v24 setLocalizedDateFormatFromTemplate:v25];

        id v5 = (void *)_GenerateDateFormatterLongDayDate___formatter;
      }
      goto LABEL_70;
    case 22:
      if (_CPTimeFormatIs24HourMode()) {
        goto LABEL_37;
      }
      v2 = &__block_literal_global_739;
      goto LABEL_67;
    case 23:
      if (_CPTimeFormatIs24HourMode()) {
        goto LABEL_41;
      }
      v2 = &__block_literal_global_749;
      goto LABEL_67;
    case 24:
      if (_CPTimeFormatIs24HourMode()) {
        goto LABEL_41;
      }
      id v5 = (void *)_GenerateDateFormatterHourShortAMPM___dateFormatter;
      if (!_GenerateDateFormatterHourShortAMPM___dateFormatter)
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v43 = (void *)_GenerateDateFormatterHourShortAMPM___dateFormatter;
        _GenerateDateFormatterHourShortAMPM___dateFormatter = (uint64_t)v42;

        [(id)_GenerateDateFormatterHourShortAMPM___dateFormatter setLocalizedDateFormatFromTemplate:@"j a"];
        id v5 = (void *)_GenerateDateFormatterHourShortAMPM___dateFormatter;
      }
      goto LABEL_70;
    case 25:
      id v5 = (void *)_GenerateDateFormatterHourWithoutAMPM___dateFormatter;
      if (!_GenerateDateFormatterHourWithoutAMPM___dateFormatter)
      {
        id v26 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v27 = (void *)_GenerateDateFormatterHourWithoutAMPM___dateFormatter;
        _GenerateDateFormatterHourWithoutAMPM___dateFormatter = (uint64_t)v26;

        [(id)_GenerateDateFormatterHourWithoutAMPM___dateFormatter setLocalizedDateFormatFromTemplate:@"j"];
        [(id)_GenerateDateFormatterHourWithoutAMPM___dateFormatter setAMSymbol:&stru_1F3B9CF20];
        [(id)_GenerateDateFormatterHourWithoutAMPM___dateFormatter setPMSymbol:&stru_1F3B9CF20];
        id v5 = (void *)_GenerateDateFormatterHourWithoutAMPM___dateFormatter;
      }
      goto LABEL_70;
    case 26:
LABEL_37:
      v2 = &__block_literal_global_744;
      goto LABEL_67;
    case 27:
LABEL_41:
      v2 = &__block_literal_global_754;
      goto LABEL_67;
    case 28:
      id v5 = (void *)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter;
      if (!_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter)
      {
        id v28 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v29 = (void *)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter;
        _GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter = (uint64_t)v28;

        [(id)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter setLocalizedDateFormatFromTemplate:@"j:mm a"];
        [(id)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter setAMSymbol:&stru_1F3B9CF20];
        [(id)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter setPMSymbol:&stru_1F3B9CF20];
        id v5 = (void *)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter;
      }
      goto LABEL_70;
    case 29:
      v2 = &__block_literal_global_759;
      goto LABEL_67;
    case 30:
      if (_CPTimeFormatIs24HourMode()) {
        goto LABEL_48;
      }
      _GenerateDateFormatterDayMonthDateHour();
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_71;
    case 31:
LABEL_48:
      _GenerateDateFormatterDayMonthDateHourMinute();
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_71;
    case 32:
      id v5 = (void *)_GenerateDateFormatterLongDateLongTime___dateFormatter;
      if (!_GenerateDateFormatterLongDateLongTime___dateFormatter)
      {
        id v30 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v31 = (void *)_GenerateDateFormatterLongDateLongTime___dateFormatter;
        _GenerateDateFormatterLongDateLongTime___dateFormatter = (uint64_t)v30;

        [(id)_GenerateDateFormatterLongDateLongTime___dateFormatter setDateStyle:2];
        [(id)_GenerateDateFormatterLongDateLongTime___dateFormatter setTimeStyle:2];
        id v5 = (void *)_GenerateDateFormatterLongDateLongTime___dateFormatter;
      }
      goto LABEL_70;
    case 33:
      id v5 = (void *)_GenerateDateFormatterLongDateShortTime___dateFormatter;
      if (!_GenerateDateFormatterLongDateShortTime___dateFormatter)
      {
        id v32 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v33 = (void *)_GenerateDateFormatterLongDateShortTime___dateFormatter;
        _GenerateDateFormatterLongDateShortTime___dateFormatter = (uint64_t)v32;

        [(id)_GenerateDateFormatterLongDateShortTime___dateFormatter setDateStyle:2];
        [(id)_GenerateDateFormatterLongDateShortTime___dateFormatter setTimeStyle:1];
        id v5 = (void *)_GenerateDateFormatterLongDateShortTime___dateFormatter;
      }
      goto LABEL_70;
    case 34:
      id v5 = (void *)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter;
      if (!_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter)
      {
        id v34 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v35 = (void *)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter;
        _GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter = (uint64_t)v34;

        [(id)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter setDateStyle:3];
        [(id)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter setTimeStyle:1];
        id v5 = (void *)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter;
      }
      goto LABEL_70;
    case 35:
      id v5 = (void *)_GenerateDateFormatterTodayHourMinute___dateFormatter;
      if (!_GenerateDateFormatterTodayHourMinute___dateFormatter)
      {
        id v36 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v37 = (void *)_GenerateDateFormatterTodayHourMinute___dateFormatter;
        _GenerateDateFormatterTodayHourMinute___dateFormatter = (uint64_t)v36;

        [(id)_GenerateDateFormatterTodayHourMinute___dateFormatter setDateStyle:2];
        [(id)_GenerateDateFormatterTodayHourMinute___dateFormatter setTimeStyle:1];
        [(id)_GenerateDateFormatterTodayHourMinute___dateFormatter setDoesRelativeDateFormatting:1];
        id v5 = (void *)_GenerateDateFormatterTodayHourMinute___dateFormatter;
      }
      goto LABEL_70;
    case 36:
      id v5 = (void *)_GenerateDateFormatterToday___dateFormatter;
      if (!_GenerateDateFormatterToday___dateFormatter)
      {
        id v38 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v39 = (void *)_GenerateDateFormatterToday___dateFormatter;
        _GenerateDateFormatterToday___dateFormatter = (uint64_t)v38;

        [(id)_GenerateDateFormatterToday___dateFormatter setDateStyle:2];
        [(id)_GenerateDateFormatterToday___dateFormatter setTimeStyle:0];
        [(id)_GenerateDateFormatterToday___dateFormatter setDoesRelativeDateFormatting:1];
        id v5 = (void *)_GenerateDateFormatterToday___dateFormatter;
      }
      goto LABEL_70;
    case 37:
      id v5 = (void *)_GenerateDateFormatterLongToday___dateFormatter;
      if (!_GenerateDateFormatterLongToday___dateFormatter)
      {
        id v40 = objc_alloc_init(MEMORY[0x1E4F28C10]);
        v41 = (void *)_GenerateDateFormatterLongToday___dateFormatter;
        _GenerateDateFormatterLongToday___dateFormatter = (uint64_t)v40;

        [(id)_GenerateDateFormatterLongToday___dateFormatter setDateStyle:4];
        [(id)_GenerateDateFormatterLongToday___dateFormatter setTimeStyle:0];
        [(id)_GenerateDateFormatterLongToday___dateFormatter setDoesRelativeDateFormatting:1];
        id v5 = (void *)_GenerateDateFormatterLongToday___dateFormatter;
      }
LABEL_70:
      id v3 = v5;
      goto LABEL_71;
    case 38:
      v2 = &__block_literal_global_764;
      goto LABEL_67;
    case 39:
      v2 = &__block_literal_global_769;
      goto LABEL_67;
    case 40:
      v2 = &__block_literal_global_774;
      goto LABEL_67;
    case 41:
      v2 = &__block_literal_global_779;
      goto LABEL_67;
    case 42:
      v2 = &__block_literal_global_784;
LABEL_67:
      _performNSDateFormatterInitializationBlock(v2);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_71:
      break;
    default:
      id v3 = 0;
      break;
  }
  return v3;
}

id _performNSDateFormatterInitializationBlock(void *a1)
{
  uint64_t v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_formatterLock);
  v2 = v1[2](v1);

  os_unfair_lock_unlock((os_unfair_lock_t)&_formatterLock);
  return v2;
}

BOOL HKUIObjectIsSmaller(void *a1, uint64_t a2)
{
  return [a1 compare:a2] == -1;
}

BOOL HKUIObjectIsLargerOrEqual(void *a1, uint64_t a2)
{
  return [a1 compare:a2] != -1;
}

id HKEndOfDayForDate(void *a1)
{
  uint64_t v1 = HKStartOfDayForDate(a1);
  v2 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  id v3 = [v2 dateByAddingUnit:16 value:1 toDate:v1 options:0];

  return v3;
}

id HKStartOfDayForDate(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  id v3 = [v1 currentCalendar];
  v4 = [v3 startOfDayForDate:v2];

  return v4;
}

HKDisplayType *HKDisplayTypeIdentifierAppleBalanceMetricsMake()
{
  v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:6];
  uint64_t v1 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B70 maxValue:&unk_1F3C22B40];
  id v2 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B70 maxValue:&unk_1F3C22B40];
  id v3 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v1 axisBoundsOverrides:0 noDataAxisBounds:v2];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v3];

  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  id v5 = [HKDisplayTypePresentation alloc];
  id v6 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v15) = 0;
  uint64_t v7 = MEMORY[0x1E4F1CC08];
  id v8 = [(HKDisplayTypePresentation *)v5 initWithDefaultConfiguration:v6 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v15 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v9 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"APPLE_BALANCE_METRICS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Balance" localizedKeySuffix:0 unitNameKeyOverrides:v7];
  id v10 = [HKDisplayType alloc];
  v11 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:305];
  id v12 = [(HKDisplayType *)v10 initWithDisplayTypeIdentifier:305 categoryIdentifier:1 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v11 behavior:v4 presentation:v8 localization:v9 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierAppleWalkingSteadinessMake()
{
  v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:4];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  id v2 = HKWalkingSteadinessAxisScalingRule();
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v2];

  BYTE2(v13) = 0;
  LOWORD(v13) = 256;
  id v3 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v13);
  v4 = [HKDisplayTypePresentation alloc];
  id v5 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v14) = 0;
  uint64_t v6 = MEMORY[0x1E4F1CC08];
  uint64_t v7 = [(HKDisplayTypePresentation *)v4 initWithDefaultConfiguration:v5 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v14 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v8 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WALKING_STEADINESS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-WalkingSteadiness" localizedKeySuffix:0 unitNameKeyOverrides:v6];
  uint64_t v9 = [HKDisplayType alloc];
  id v10 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:249];
  v11 = [(HKDisplayType *)v9 initWithDisplayTypeIdentifier:249 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v10 behavior:v3 presentation:v7 localization:v8 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v11;
}

id HKWalkingSteadinessAxisScalingRule()
{
  hk_minWalkingSteadinessValueForClassification();
  double v1 = v0;
  hk_maxWalkingSteadinessValueForClassification();
  double v3 = v2;
  v4 = [NSNumber numberWithDouble:v1 * 100.0];
  id v5 = [NSNumber numberWithDouble:v3 * 100.0];
  uint64_t v6 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v5];

  uint64_t v7 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v6 axisBoundsOverrides:0];
  [v7 setShouldExpandBoundsForOutliers:0];

  return v7;
}

HKDisplayType *HKDisplayTypeIdentifierAppleMoveTimeMake()
{
  v35[1] = *MEMORY[0x1E4F143B8];
  v31 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v31 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  double v1 = (void *)MEMORY[0x1E4F2B370];
  id v30 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  id v28 = [v1 quantityWithUnit:v30 doubleValue:0.0];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  v29 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  double v3 = [v2 quantityWithUnit:v29 doubleValue:25.0];
  v4 = +[HKValueRange valueRangeWithMinValue:v28 maxValue:v3];
  id v34 = &unk_1F3C22180;
  id v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v6 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  id v8 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v9 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  id v10 = [v8 quantityWithUnit:v9 doubleValue:8.0];
  v11 = +[HKValueRange valueRangeWithMinValue:v7 maxValue:v10];
  v35[0] = v11;
  id v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
  uint64_t v13 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v4 axisBoundsOverrides:v12 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v31 setAxisScalingRule:v13];

  BYTE2(v26) = 0;
  LOWORD(v26) = 256;
  uint64_t v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v26);
  uint64_t v15 = [HKDisplayTypePresentation alloc];
  id v16 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  id v32 = &unk_1F3C22180;
  v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v33 = v17;
  id v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v33 forKeys:&v32 count:1];
  LOBYTE(v27) = 0;
  v19 = [(HKDisplayTypePresentation *)v15 initWithDefaultConfiguration:v16 configurationOverrides:v18 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v27 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v20 = [HKDisplayTypeLocalization alloc];
  v21 = [(HKDisplayTypeLocalization *)v20 initWithDisplayNameKey:@"MOVE_MINUTE" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-tinker" localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  id v22 = [HKDisplayType alloc];
  v23 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:179];
  v24 = [(HKDisplayType *)v22 initWithDisplayTypeIdentifier:179 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v23 behavior:v14 presentation:v19 localization:v21 chartingRules:v31 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v24;
}

HKDisplayType *HKDisplayTypeIdentifierAppleSleepingWristTemperatureMake()
{
  id v42 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:4];
  [(HKDisplayTypeChartingRules *)v42 setLineChartUsesValueAxisAnnotation:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v42 setLineChartExtendLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v42 setLineChartFlatLastValue:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v42 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v42 setLineChartUsesPointMarkerImage:0 forTimeScope:6];
  double v0 = (void *)MEMORY[0x1E4F2B370];
  id v40 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  id v38 = [v0 quantityWithUnit:v40 doubleValue:-2.0];
  double v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  double v3 = [v1 quantityWithUnit:v2 doubleValue:2.0];
  v4 = +[HKValueRange valueRangeWithMinValue:v38 maxValue:v3];
  id v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v6 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:-2.0];
  id v8 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v9 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  id v10 = [v8 quantityWithUnit:v9 doubleValue:2.0];
  v11 = +[HKValueRange valueRangeWithMinValue:v7 maxValue:v10];
  id v12 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v4 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:v11];
  [(HKDisplayTypeChartingRules *)v42 setAxisScalingRule:v12];

  uint64_t v13 = (void *)MEMORY[0x1E4F2B370];
  v41 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  v37 = [v13 quantityWithUnit:v41 doubleValue:-1.0];
  uint64_t v14 = (void *)MEMORY[0x1E4F2B370];
  v39 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  uint64_t v15 = [v14 quantityWithUnit:v39 doubleValue:1.0];
  id v16 = +[HKValueRange valueRangeWithMinValue:v37 maxValue:v15];
  v17 = (void *)MEMORY[0x1E4F2B370];
  id v18 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  v19 = [v17 quantityWithUnit:v18 doubleValue:-1.0];
  id v20 = (void *)MEMORY[0x1E4F2B370];
  v21 = [MEMORY[0x1E4F2B618] unitFromString:@"deltaDegC"];
  id v22 = [v20 quantityWithUnit:v21 doubleValue:1.0];
  v23 = +[HKValueRange valueRangeWithMinValue:v19 maxValue:v22];
  v24 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v16 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:v23];
  [(HKDisplayTypeChartingRules *)v42 setCompactChartAxisScalingRule:v24];

  BYTE2(v35) = 0;
  LOWORD(v35) = 256;
  v25 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 1, 1, 0, 1, 1, v35);
  uint64_t v26 = [HKDisplayTypePresentation alloc];
  uint64_t v27 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:1];
  LOBYTE(v36) = 0;
  uint64_t v28 = MEMORY[0x1E4F1CC08];
  v29 = [(HKDisplayTypePresentation *)v26 initWithDefaultConfiguration:v27 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v36 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v30 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SLEEPING_WRIST_TEMPERATURE" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Kali" localizedKeySuffix:0 unitNameKeyOverrides:v28];
  v31 = [HKDisplayType alloc];
  id v32 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:256];
  v33 = [(HKDisplayType *)v31 initWithDisplayTypeIdentifier:256 categoryIdentifier:6 secondaryCategoryIdentifiers:&unk_1F3C1F9A8 objectType:v32 behavior:v25 presentation:v29 localization:v30 chartingRules:v42 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v33;
}

HKDisplayType *HKDisplayTypeIdentifierRespiratoryRateMake()
{
  v52[1] = *MEMORY[0x1E4F143B8];
  v48 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:2 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  [(HKDisplayTypeChartingRules *)v48 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  double v1 = (void *)MEMORY[0x1E4F2B370];
  v46 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  v44 = [v1 quantityWithUnit:v46 doubleValue:0.0];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  v45 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  v43 = [v2 quantityWithUnit:v45 doubleValue:20.0];
  double v3 = +[HKValueRange valueRangeWithMinValue:v44 maxValue:v43];
  v4 = (void *)MEMORY[0x1E4F2B370];
  id v5 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  id v8 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  v11 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  id v12 = [v10 quantityWithUnit:v11 doubleValue:40.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v3 axisBoundsOverrides:0 minimumValue:v6 maximumValue:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v48 setAxisScalingRule:v14];

  uint64_t v15 = (void *)MEMORY[0x1E4F2B370];
  v47 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  id v16 = [v15 quantityWithUnit:v47 doubleValue:10.0];
  v17 = (void *)MEMORY[0x1E4F2B370];
  id v18 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  v19 = [v17 quantityWithUnit:v18 doubleValue:0.0];
  id v20 = (void *)MEMORY[0x1E4F2B370];
  v21 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  id v22 = [v20 quantityWithUnit:v21 doubleValue:0.0];
  v23 = (void *)MEMORY[0x1E4F2B370];
  v24 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  v25 = [v23 quantityWithUnit:v24 doubleValue:40.0];
  uint64_t v26 = +[HKValueRange valueRangeWithMinValue:v22 maxValue:v25];
  uint64_t v27 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v16 minimumValue:v19 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v26];
  [(HKDisplayTypeChartingRules *)v48 setCompactChartAxisScalingRule:v27];

  BYTE2(v41) = 0;
  LOWORD(v41) = 256;
  uint64_t v28 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v41);
  v29 = [HKDisplayTypePresentation alloc];
  id v30 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v42) = 0;
  v31 = [(HKDisplayTypePresentation *)v29 initWithDefaultConfiguration:v30 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v42 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v32 = [HKDisplayTypeLocalization alloc];
  v33 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  v49[0] = &unk_1F3C22168;
  v49[1] = &unk_1F3C221B0;
  v50[0] = @"BREATHS_PER_MINUTE";
  v50[1] = @"BREATHS_PER_MINUTE_PREFERENCES";
  v51 = v33;
  id v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v50 forKeys:v49 count:2];
  v52[0] = v34;
  uint64_t v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v52 forKeys:&v51 count:1];
  uint64_t v36 = [(HKDisplayTypeLocalization *)v32 initWithDisplayNameKey:@"RESPIRATORY_RATE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v35];

  v37 = [HKDisplayType alloc];
  id v38 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:61];
  v39 = [(HKDisplayType *)v37 initWithDisplayTypeIdentifier:61 categoryIdentifier:13 secondaryCategoryIdentifiers:&unk_1F3C1F6A8 objectType:v38 behavior:v28 presentation:v31 localization:v36 chartingRules:v48 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v39;
}

id HKUIJoinStringsForAutomationIdentifier(void *a1)
{
  double v1 = [a1 componentsJoinedByString:@"."];
  if ([v1 containsString:@"UIA.Health"])
  {
    id v2 = v1;
  }
  else
  {
    id v2 = [NSString stringWithFormat:@"%@.%@", @"UIA.Health", v1];
  }
  double v3 = v2;

  return v3;
}

id HKUIJoinAttributedStringsWithFormatAndAttributes(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v19 = a3;
  id v20 = v6;
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:v6 attributes:v19];
  uint64_t v8 = [v5 count];
  if (v8 >= 1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      id v12 = objc_msgSend(NSString, "stringWithFormat:", @"%%%ld$@", v10 + 1);
      uint64_t v13 = [v7 string];
      uint64_t v14 = [v13 rangeOfString:v12];
      uint64_t v16 = v15;

      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v17 = [v5 objectAtIndexedSubscript:v10];
        objc_msgSend(v7, "replaceCharactersInRange:withAttributedString:", v14, v16, v17);
      }
      ++v10;
    }
    while (v9 != v11);
  }

  return v7;
}

id HKFormattedStringFromValueForContext(void *a1, void *a2, void *a3, int a4, void *a5, uint64_t a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a5;
  uint64_t v15 = [v13 unitForDisplayType:v12];
  if (v14)
  {
    id v16 = v14;
  }
  else
  {
    objc_msgSend(v12, "hk_numberFormatterForUnit:formattingContext:", v15, a6);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
  }
  v17 = v16;
  if (a4)
  {
    uint64_t v18 = [v13 displayRangeForDisplayType:v12];
    if (v18)
    {
      id v19 = (void *)v18;
      id v20 = (void *)MEMORY[0x1E4F2B370];
      [v11 doubleValue];
      v21 = objc_msgSend(v20, "quantityWithUnit:doubleValue:", v15);
      id v22 = [v19 maximum];
      uint64_t v23 = [v19 minimum];
      uint64_t v42 = (void *)v23;
      if ([v21 compare:v22] == 1)
      {
        id v40 = v22;
        uint64_t v41 = v21;
        v24 = NSNumber;
        [v22 doubleValueForUnit:v15];
        v25 = objc_msgSend(v24, "numberWithDouble:");
        uint64_t v26 = [v17 stringFromNumber:v25 displayType:v12 unitController:v13];

        id v38 = NSString;
        uint64_t v27 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        uint64_t v28 = v27;
        v29 = @"GREATER_THAN_%@";
      }
      else
      {
        if ([v21 compare:v23] != -1)
        {
          id v30 = 0;
          goto LABEL_12;
        }
        id v40 = v22;
        uint64_t v41 = v21;
        v31 = (void *)v23;
        id v32 = NSNumber;
        [v31 doubleValueForUnit:v15];
        v33 = objc_msgSend(v32, "numberWithDouble:");
        uint64_t v26 = [v17 stringFromNumber:v33 displayType:v12 unitController:v13];

        id v38 = NSString;
        uint64_t v27 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        uint64_t v28 = v27;
        v29 = @"LESS_THAN_%@";
      }
      id v34 = [v27 localizedStringForKey:v29 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
      v39 = (void *)v26;
      uint64_t v37 = v26;
      uint64_t v35 = v28;
      id v30 = objc_msgSend(v38, "stringWithFormat:", v34, v37);

      id v22 = v40;
      v21 = v41;
LABEL_12:

      if (v30) {
        goto LABEL_14;
      }
    }
  }
  id v30 = [v17 stringFromNumber:v11 displayType:v12 unitController:v13];
LABEL_14:

  return v30;
}

id HKFormattedStringFromValue(void *a1, void *a2, void *a3, int a4, void *a5)
{
  return HKFormattedStringFromValueForContext(a1, a2, a3, a4, a5, 0);
}

id HKNumberFormatterWithDecimalPrecisionAndStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  id v6 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
  if (!HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters)
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v8 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
    HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters = (uint64_t)v7;

    id v6 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
  }
  uint64_t v9 = [NSNumber numberWithUnsignedInteger:a3];
  id v10 = [v6 objectForKeyedSubscript:v9];

  if (!v10)
  {
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v11 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
    id v12 = [NSNumber numberWithUnsignedInteger:a3];
    [v11 setObject:v10 forKeyedSubscript:v12];
  }
  id v13 = [NSNumber numberWithInteger:a1];
  id v14 = [v10 objectForKeyedSubscript:v13];
  if (!v14)
  {
    uint64_t v15 = _formatterWithDecimalPrecisionAndStyle(a1, 0, a3);
    v19[0] = v15;
    id v16 = _formatterWithDecimalPrecisionAndStyle(a1, 1, a3);
    v19[1] = v16;
    id v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];

    [v10 setObject:v14 forKeyedSubscript:v13];
  }
  v17 = [v14 objectAtIndexedSubscript:a2];

  return v17;
}

id _formatterWithDecimalPrecisionAndStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  [v6 setNumberStyle:a3];
  [v6 setMaximumFractionDigits:a1];
  if (a3 == 3) {
    [v6 setMultiplier:&unk_1F3C20050];
  }
  if (a2)
  {
    if (a2 != 1) {
      goto LABEL_8;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 6;
  }
  [v6 setRoundingMode:v7];
LABEL_8:
  return v6;
}

id HKNumberFormatterWithDecimalPrecision(uint64_t a1, uint64_t a2)
{
  return HKNumberFormatterWithDecimalPrecisionAndStyle(a1, a2, 1);
}

id HKUIJoinAttributedStringsWithFormat(void *a1, void *a2)
{
  return HKUIJoinAttributedStringsWithFormatAndAttributes(a1, a2, MEMORY[0x1E4F1CC08]);
}

void UIViewController.hk_updateNavigationBarMargins(for:)(uint64_t a1)
{
  objc_msgSend(self, sel_edgeInsetsForWidthDesignation_, a1);
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  id v10 = objc_msgSend(v1, sel_navigationItem);
  objc_msgSend(v10, sel_largeTitleInsets);
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;

  if (v3 != v12 || v5 != v14 || v7 != v16 || v9 != v18)
  {
    id v22 = objc_msgSend(v1, sel_navigationItem);
    objc_msgSend(v22, sel_setLargeTitleInsets_, v3, v5, v7, v9);

    id v23 = objc_msgSend(v1, sel_navigationController);
    if (v23)
    {
      v24 = v23;
      id v25 = objc_msgSend(v23, sel_navigationBar);

      objc_msgSend(v25, sel_setNeedsLayout);
    }
  }
}

id InternalSettingsTapGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  double v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1E0B32F68(a1, (uint64_t)v17);
  uint64_t v7 = v18;
  if (v18)
  {
    double v8 = __swift_project_boxed_opaque_existential_0(v17, v18);
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v8, v8);
    double v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = sub_1E0ECD9D0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  }
  else
  {
    uint64_t v12 = 0;
  }
  v16.receiver = v3;
  v16.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v16, sel_initWithTarget_action_, v12, a2);
  swift_unknownObjectRelease();
  id v14 = v13;
  objc_msgSend(v14, sel_setNumberOfTapsRequired_, 3);
  objc_msgSend(v14, sel_setDelegate_, v14);

  sub_1E0B32EE4(a1);
  return v14;
}

uint64_t sub_1E0B32EE4(uint64_t a1)
{
  sub_1E0B32FF4(0, qword_1EB584EC0, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E0B32F68(uint64_t a1, uint64_t a2)
{
  sub_1E0B32FF4(0, qword_1EB584EC0, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1E0B32FF4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1E0B33040(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1E0ECD9C0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_1E0B33088(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1E0B330D4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void UICollectionViewController.hk_updateCollectionViewMargins(for:)(uint64_t a1)
{
  objc_msgSend(self, sel_edgeInsetsForWidthDesignation_, a1);
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  id v10 = objc_msgSend(v1, sel_collectionView);
  if (!v10)
  {
    __break(1u);
    goto LABEL_18;
  }
  double v11 = v10;
  objc_msgSend(v10, sel_directionalLayoutMargins);
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;

  if (v3 != v13 || v5 != v15 || v7 != v17 || v9 != v19)
  {
    id v23 = objc_msgSend(v1, sel_collectionView);
    if (v23)
    {
      id v24 = v23;
      objc_msgSend(v23, sel_setDirectionalLayoutMargins_, v3, v5, v7, v9);

      return;
    }
LABEL_18:
    __break(1u);
  }
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

double HKUIOnePixel()
{
  double result = *(double *)&HKUIOnePixel___onePixel;
  if (*(double *)&HKUIOnePixel___onePixel == 2.22507386e-308)
  {
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4FB1BA8], "mainScreen", *(double *)&HKUIOnePixel___onePixel);
    [v1 scale];
    *(double *)&HKUIOnePixel___onePixel = 1.0 / v2;

    return *(double *)&HKUIOnePixel___onePixel;
  }
  return result;
}

void sub_1E0B35068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

HKDisplayType *HKDisplayTypeIdentifierAudiogramMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  double v2 = [HKDisplayTypePresentation alloc];
  double v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:5 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v21) = 0;
  double v4 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  double v5 = [HKDisplayTypeLocalization alloc];
  double v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v22 = &unk_1F3C22168;
  id v23 = @"AUDIOGRAM_COUNT";
  id v24 = v6;
  double v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
  v25[0] = v7;
  double v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  double v9 = [(HKDisplayTypeLocalization *)v5 initWithDisplayNameKey:@"AUDIOGRAM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v8];

  id v10 = [HKDisplayType alloc];
  double v11 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:145];
  double v12 = [(HKDisplayType *)v10 initWithDisplayTypeIdentifier:145 categoryIdentifier:12 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v11 behavior:v1 presentation:v4 localization:v9 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  double v13 = [MEMORY[0x1E4F2B860] sharedBehavior];
  double v14 = [v13 features];
  int v15 = [v14 yodel];

  if (v15)
  {
    double v16 = [(HKDisplayType *)v12 localization];
    double v17 = (void *)[v16 copyWithLocalizationTableNameOverride:@"Localizable-Yodel"];

    uint64_t v18 = [(HKDisplayType *)v12 copyWithLocalization:v17];
    double v12 = (HKDisplayType *)v18;
  }

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierActiveEnergyMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  double v3 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  double v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  double v6 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  double v7 = [v5 quantityWithUnit:v6 doubleValue:50.0];
  double v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  double v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  double v11 = [HKDisplayTypePresentation alloc];
  double v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  id v24 = &unk_1F3C22180;
  double v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  double v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  int v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  double v16 = [HKDisplayTypeLocalization alloc];
  double v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"ACTIVE_ENERGY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  double v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:10];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:10 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierAppleExerciseTimeMake()
{
  v42[1] = *MEMORY[0x1E4F143B8];
  id v38 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v38 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v37 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  uint64_t v35 = [v1 quantityWithUnit:v37 doubleValue:0.0];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v36 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  id v34 = [v2 quantityWithUnit:v36 doubleValue:25.0];
  id v30 = +[HKValueRange valueRangeWithMinValue:v35 maxValue:v34];
  uint64_t v41 = &unk_1F3C22180;
  double v3 = (void *)MEMORY[0x1E4F2B370];
  v33 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  v31 = [v3 quantityWithUnit:v33 doubleValue:0.0];
  double v4 = (void *)MEMORY[0x1E4F2B370];
  id v32 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  double v5 = [v4 quantityWithUnit:v32 doubleValue:8.0];
  double v6 = +[HKValueRange valueRangeWithMinValue:v31 maxValue:v5];
  v42[0] = v6;
  double v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:&v41 count:1];
  double v8 = (void *)MEMORY[0x1E4F2B370];
  double v9 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  id v10 = [v8 quantityWithUnit:v9 doubleValue:0.0];
  double v11 = (void *)MEMORY[0x1E4F2B370];
  double v12 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  double v13 = [v11 quantityWithUnit:v12 doubleValue:30.0];
  double v14 = +[HKValueRange valueRangeWithMinValue:v10 maxValue:v13];
  int v15 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v30 axisBoundsOverrides:v7 minimumValue:0 maximumValue:0 noDataAxisBounds:v14];
  [(HKDisplayTypeChartingRules *)v38 setAxisScalingRule:v15];

  BYTE2(v28) = 0;
  LOWORD(v28) = 256;
  double v16 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v28);
  double v17 = [HKDisplayTypePresentation alloc];
  uint64_t v18 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  v39 = &unk_1F3C22180;
  double v19 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  id v40 = v19;
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v40 forKeys:&v39 count:1];
  LOBYTE(v29) = 0;
  uint64_t v21 = [(HKDisplayTypePresentation *)v17 initWithDefaultConfiguration:v18 configurationOverrides:v20 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v29 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v22 = [HKDisplayTypeLocalization alloc];
  uint64_t v23 = [(HKDisplayTypeLocalization *)v22 initWithDisplayNameKey:@"EXERCISE_MINUTE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  id v24 = [HKDisplayType alloc];
  id v25 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:75];
  uint64_t v26 = [(HKDisplayType *)v24 initWithDisplayTypeIdentifier:75 categoryIdentifier:2 secondaryCategoryIdentifiers:&unk_1F3C1F6F0 objectType:v25 behavior:v16 presentation:v21 localization:v23 chartingRules:v38 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v26;
}

HKDisplayType *HKDisplayTypeIdentifierAppleStandHourMake()
{
  v23[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  [(HKDisplayTypeChartingRules *)v0 setChartStyle:6 forTimeScope:6];
  double v2 = +[HKNumericMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:&unk_1F3C22B00 minimumValue:0 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:64800.0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v2];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  double v3 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  double v4 = [HKDisplayTypePresentation alloc];
  double v5 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:2 detailChart:7 singleDailyValue:0];
  uint64_t v22 = &unk_1F3C22180;
  double v6 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:0 detailChart:8 singleDailyValue:0];
  v23[0] = v6;
  double v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:&v22 count:1];
  LOBYTE(v19) = 0;
  double v8 = [(HKDisplayTypePresentation *)v4 initWithDefaultConfiguration:v5 configurationOverrides:v7 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  double v9 = [HKDisplayTypeLocalization alloc];
  id v10 = [(HKDisplayTypeLocalization *)v9 initWithDisplayNameKey:@"STAND_HOUR" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  double v11 = [HKDisplayType alloc];
  double v12 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:70];
  double v13 = [MEMORY[0x1E4F2B3C0] predicateForCategorySamplesWithOperatorType:4 value:0];
  uint64_t v20 = &unk_1F3C22180;
  double v14 = [MEMORY[0x1E4F1CA98] null];
  uint64_t v21 = v14;
  int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  double v16 = [(HKDisplayType *)v11 initWithDisplayTypeIdentifier:70 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v12 behavior:v3 presentation:v8 localization:v10 chartingRules:v0 defaultChartingPredicate:v13 chartingPredicatesByTimeScope:v15];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierTachycardiaEventMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  [(HKDisplayTypeChartingRules *)v0 setChartStyle:6 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:1 forTimeScope:6];
  double v2 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B00 maxValue:&unk_1F3C22B40];
  double v3 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v2 axisBoundsOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v3];

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  double v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  double v5 = [MEMORY[0x1E4F2B860] sharedBehavior];
  char v6 = [v5 isiPad];

  double v7 = 0;
  if ((v6 & 1) == 0)
  {
    double v8 = [HKDisplayTypeSummaryAttribution alloc];
    double v9 = HKHealthKitFrameworkBundle();
    id v10 = [v9 localizedStringForKey:@"HEART_EVENT_SUMMARY_ATTRIBUTION" value:&stru_1F3B9CF20 table:*MEMORY[0x1E4F29E40]];
    double v7 = [(HKDisplayTypeSummaryAttribution *)v8 initWithAttribution:v10 urlAttribute:@"bridge:root=NOTIFICATIONS_ID&path=com.apple.HeartRateSettings" primaryProfileOnly:0];
  }
  double v11 = [HKDisplayTypePresentation alloc];
  double v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:7 singleDailyValue:0];
  LOBYTE(v21) = 0;
  uint64_t v13 = MEMORY[0x1E4F1CC08];
  double v14 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v7];

  int v15 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"TACHYCARDIA" labelDisplayNameKey:@"TACHYCARDIA" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v13];
  double v16 = [HKDisplayType alloc];
  double v17 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:140];
  uint64_t v18 = [(HKDisplayType *)v16 initWithDisplayTypeIdentifier:140 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v17 behavior:v4 presentation:v14 localization:v15 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierRestingHeartRateMake()
{
  v27[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:1 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:1 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:0 forTimeScope:7];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  double v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v4 = [v2 quantityWithUnit:v3 doubleValue:20.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  char v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  double v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  double v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  id v10 = [HKDisplayTypePresentation alloc];
  double v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:1];
  LOBYTE(v23) = 0;
  double v12 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [HKDisplayTypeLocalization alloc];
  double v14 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  id v24 = &unk_1F3C22168;
  id v25 = @"BEATS_PER_MINUTE";
  uint64_t v26 = v14;
  int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  v27[0] = v15;
  double v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  double v17 = [(HKDisplayTypeLocalization *)v13 initWithDisplayNameKey:@"RESTING_HEART_RATE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];

  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:118];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:118 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v9 presentation:v12 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingHeartRateAverageMake()
{
  v27[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:1 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:1 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:7];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:0 forTimeScope:7];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  double v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v4 = [v2 quantityWithUnit:v3 doubleValue:20.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  char v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  double v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  double v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  id v10 = [HKDisplayTypePresentation alloc];
  double v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:1];
  LOBYTE(v23) = 0;
  double v12 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [HKDisplayTypeLocalization alloc];
  double v14 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  id v24 = &unk_1F3C22168;
  id v25 = @"BEATS_PER_MINUTE";
  uint64_t v26 = v14;
  int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  v27[0] = v15;
  double v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  double v17 = [(HKDisplayTypeLocalization *)v13 initWithDisplayNameKey:@"WALKING_HEART_RATE_AVERAGE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];

  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:137];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:137 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v9 presentation:v12 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierHeightMake()
{
  v24[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [MEMORY[0x1E4F2B618] unitFromString:@"ft"];
  uint64_t v23 = v1;
  double v2 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  v24[0] = v2;
  double v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:&v23 count:1];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:0 perUnitPrecisionRules:v3];

  double v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  char v6 = [v4 quantityWithUnit:v5 doubleValue:5.0];
  double v7 = (void *)MEMORY[0x1E4F2B370];
  double v8 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  double v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v6 minimumValue:v9 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v10];

  BYTE2(v21) = 0;
  LOWORD(v21) = 256;
  double v11 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v21);
  double v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v22) = 0;
  uint64_t v14 = MEMORY[0x1E4F1CC08];
  int v15 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v22 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  double v16 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"HEIGHT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v14];
  double v17 = [HKDisplayType alloc];
  uint64_t v18 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:2];
  uint64_t v19 = [(HKDisplayType *)v17 initWithDisplayTypeIdentifier:2 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v18 behavior:v11 presentation:v15 localization:v16 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v19;
}

HKDisplayType *HKDisplayTypeIdentifierHeartRateMake()
{
  v41[1] = *MEMORY[0x1E4F143B8];
  id v34 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:2 preferredTimeScope:6];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v34 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v35 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v2 = [v1 quantityWithUnit:v35 doubleValue:20.0];
  double v3 = (void *)MEMORY[0x1E4F2B370];
  double v4 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v5 = [v3 quantityWithUnit:v4 doubleValue:0.0];
  char v6 = (void *)MEMORY[0x1E4F2B370];
  double v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v8 = [v6 quantityWithUnit:v7 doubleValue:0.0];
  double v9 = (void *)MEMORY[0x1E4F2B370];
  id v10 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  double v11 = [v9 quantityWithUnit:v10 doubleValue:80.0];
  double v12 = +[HKValueRange valueRangeWithMinValue:v8 maxValue:v11];
  uint64_t v13 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v2 minimumValue:v5 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v12];
  [(HKDisplayTypeChartingRules *)v34 setAxisScalingRule:v13];

  uint64_t v14 = [HKRemoteChartConfiguration alloc];
  id v40 = &unk_1F3C22180;
  int v15 = objc_msgSend(MEMORY[0x1E4F1C9D8], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  v41[0] = v15;
  double v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:&v40 count:1];
  double v17 = [(HKRemoteChartConfiguration *)v14 initWithStatisticIntervalComponentsByTimeScope:v16];
  [(HKDisplayTypeChartingRules *)v34 setRemoteChartConfiguration:v17];

  BYTE2(v32) = 0;
  LOWORD(v32) = 256;
  uint64_t v18 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v32);
  uint64_t v19 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v20 = [HKDisplayTypePresentation alloc];
  uint64_t v21 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v33) = 0;
  uint64_t v22 = [(HKDisplayTypePresentation *)v20 initWithDefaultConfiguration:v21 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v33 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v19];

  uint64_t v23 = [HKDisplayTypeLocalization alloc];
  id v24 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v36 = &unk_1F3C22168;
  uint64_t v37 = @"BEATS_PER_MINUTE";
  id v38 = v24;
  id v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v37 forKeys:&v36 count:1];
  v39 = v25;
  uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v39 forKeys:&v38 count:1];
  uint64_t v27 = [(HKDisplayTypeLocalization *)v23 initWithDisplayNameKey:@"HEART_RATE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v26];

  uint64_t v28 = [HKDisplayType alloc];
  uint64_t v29 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:5];
  id v30 = [(HKDisplayType *)v28 initWithDisplayTypeIdentifier:5 categoryIdentifier:11 secondaryCategoryIdentifiers:&unk_1F3C1F648 objectType:v29 behavior:v18 presentation:v22 localization:v27 chartingRules:v34 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v30;
}

id HKGenerateAttributedStringsWithUnitValue(void *a1, void *a2, void *a3, void *a4, uint64_t a5, int a6)
{
  id v11 = a2;
  id v12 = a4;
  uint64_t v13 = (void *)MEMORY[0x1E4F1CA48];
  id v14 = a3;
  id v15 = a1;
  double v16 = [v13 array];
  if (a6)
  {
    double v17 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartLollipopValueColor");
  }
  else
  {
    double v17 = 0;
  }
  id v18 = objc_alloc(MEMORY[0x1E4F28B18]);
  uint64_t v19 = HKAttributedStringAttributesForFont(v14, v17);

  uint64_t v20 = (void *)[v18 initWithString:v15 attributes:v19];
  [v16 addObject:v20];
  if (v11 && a5 >= 1)
  {
    uint64_t v21 = objc_msgSend(MEMORY[0x1E4F28B18], "hk_attributedStringForSpacing:", a5);
LABEL_8:
    if (a6)
    {
      uint64_t v22 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartLollipopLabelColor");
    }
    else
    {
      uint64_t v22 = 0;
    }
    id v23 = objc_alloc(MEMORY[0x1E4F28B18]);
    id v24 = HKAttributedStringAttributesForFont(v12, v22);
    id v25 = (void *)[v23 initWithString:v11 attributes:v24];

    goto LABEL_13;
  }
  uint64_t v21 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1F3B9CF20];
  if (v11) {
    goto LABEL_8;
  }
  id v25 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1F3B9CF20];
LABEL_13:
  [v16 addObject:v21];
  [v16 addObject:v25];

  return v16;
}

id HKAttributedStringAttributesForFont(void *a1, void *a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (v3)
  {
    if (v4)
    {
      uint64_t v6 = *MEMORY[0x1E4FB0700];
      v15[0] = *MEMORY[0x1E4FB06F8];
      v15[1] = v6;
      v16[0] = v3;
      v16[1] = v4;
      double v7 = (void *)MEMORY[0x1E4F1C9E8];
      double v8 = (id *)v16;
      double v9 = v15;
      uint64_t v10 = 2;
    }
    else
    {
      uint64_t v13 = *MEMORY[0x1E4FB06F8];
      id v14 = v3;
      double v7 = (void *)MEMORY[0x1E4F1C9E8];
      double v8 = &v14;
      double v9 = &v13;
      uint64_t v10 = 1;
    }
    id v11 = [v7 dictionaryWithObjects:v8 forKeys:v9 count:v10];
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

HKDisplayType *HKDisplayTypeIdentifierGeneralizedBodyAcheMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_BODY_ACHE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  double v7 = [HKDisplayType alloc];
  double v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:240];
  double v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:240 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminKMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  double v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  double v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  double v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  uint64_t v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  id v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  id v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  double v16 = [HKDisplayTypeLocalization alloc];
  double v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"VITAMIN_K" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  id v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:37];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:37 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminCMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  double v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  double v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  double v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  uint64_t v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  id v25 = &unk_1F3C22180;
  id v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  id v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  double v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  double v17 = [HKDisplayTypeLocalization alloc];
  id v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"VITAMIN_C" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:34];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:34 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierBloodGlucoseMake()
{
  v35[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:0 preferredTimeScope:6];
  uint64_t v1 = [MEMORY[0x1E4F2B618] unitFromString:@"mg/dL"];
  id v34 = v1;
  double v2 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  v35[0] = v2;
  id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:0 perUnitPrecisionRules:v3];

  id v31 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v31 setMinute:30];
  [(HKDisplayTypeChartingRules *)v0 setIntervalComponents:v31 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setChartPointRadius:6 forTimeScope:2.0];
  [(HKDisplayTypeChartingRules *)v0 setChartPointLineWidth:6 forTimeScope:1.0];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:1 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:1 forTimeScope:6];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"mg/dL"];
  uint64_t v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  double v7 = (void *)MEMORY[0x1E4F2B370];
  double v8 = [MEMORY[0x1E4F2B618] unitFromString:@"mg/dL"];
  double v9 = [v7 quantityWithUnit:v8 doubleValue:200.0];
  uint64_t v10 = +[HKValueRange valueRangeWithMinValue:v6 maxValue:v9];
  uint64_t v11 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v12 = [MEMORY[0x1E4F2B618] unitFromString:@"mg/dL"];
  uint64_t v13 = [v11 quantityWithUnit:v12 doubleValue:0.0];
  id v14 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v10 axisBoundsOverrides:0 minimumValue:v13 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v14];

  id v15 = [HKRemoteChartConfiguration alloc];
  uint64_t v32 = &unk_1F3C22180;
  double v16 = objc_msgSend(MEMORY[0x1E4F1C9D8], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  uint64_t v33 = v16;
  double v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v33 forKeys:&v32 count:1];
  id v18 = [(HKRemoteChartConfiguration *)v15 initWithStatisticIntervalComponentsByTimeScope:v17];
  [(HKDisplayTypeChartingRules *)v0 setRemoteChartConfiguration:v18];

  BYTE2(v29) = 0;
  LOWORD(v29) = 256;
  uint64_t v19 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 1, 0, 1, v29);
  uint64_t v20 = [HKDisplayTypePresentation alloc];
  uint64_t v21 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v30) = 0;
  uint64_t v22 = MEMORY[0x1E4F1CC08];
  uint64_t v23 = [(HKDisplayTypePresentation *)v20 initWithDefaultConfiguration:v21 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:1 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v30 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v24 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BLOOD_GLUCOSE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v22];
  id v25 = [HKDisplayType alloc];
  uint64_t v26 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:15];
  uint64_t v27 = [(HKDisplayType *)v25 initWithDisplayTypeIdentifier:15 categoryIdentifier:1 secondaryCategoryIdentifiers:&unk_1F3C1F678 objectType:v26 behavior:v19 presentation:v23 localization:v24 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v27;
}

HKDisplayType *HKDisplayTypeIdentifierUnderwaterDepthMake()
{
  v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:3 chartingOptions:6 preferredTimeScope:6];
  double v0 = [MEMORY[0x1E4F2B618] unitFromString:@"ft"];
  v39[0] = v0;
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  v40[0] = v1;
  double v2 = objc_msgSend(MEMORY[0x1E4F2B618], "unitFromString:");
  v39[1] = v2;
  id v3 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  v40[1] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:v39 count:2];
  [(HKDisplayTypeChartingRules *)v35 setAllowedDecimalPrecisionRule:0 perUnitPrecisionRules:v4];

  double v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v36 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v33 = [v5 quantityWithUnit:v36 doubleValue:0.0];
  uint64_t v6 = (void *)MEMORY[0x1E4F2B370];
  id v34 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  double v7 = [v6 quantityWithUnit:v34 doubleValue:2.0];
  double v8 = +[HKValueRange valueRangeWithMinValue:v33 maxValue:v7];
  double v9 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v10 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v11 = [v9 quantityWithUnit:v10 doubleValue:0.0];
  uint64_t v12 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v13 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  id v14 = [v12 quantityWithUnit:v13 doubleValue:40.0];
  id v15 = +[HKValueRange valueRangeWithMinValue:v11 maxValue:v14];
  double v16 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:v15];
  [(HKDisplayTypeChartingRules *)v35 setAxisScalingRule:v16];

  double v17 = [HKRemoteChartConfiguration alloc];
  uint64_t v37 = &unk_1F3C22180;
  id v18 = objc_msgSend(MEMORY[0x1E4F1C9D8], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  id v38 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
  uint64_t v20 = [(HKRemoteChartConfiguration *)v17 initWithStatisticIntervalComponentsByTimeScope:v19];
  [(HKDisplayTypeChartingRules *)v35 setRemoteChartConfiguration:v20];

  BYTE2(v31) = 0;
  LOWORD(v31) = 256;
  uint64_t v21 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v31);
  uint64_t v22 = [HKDisplayTypePresentation alloc];
  uint64_t v23 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v32) = 0;
  uint64_t v24 = MEMORY[0x1E4F1CC08];
  id v25 = [(HKDisplayTypePresentation *)v22 initWithDefaultConfiguration:v23 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v32 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v26 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"UNDERWATER_DEPTH" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Charon" localizedKeySuffix:0 unitNameKeyOverrides:v24];
  uint64_t v27 = [HKDisplayType alloc];
  uint64_t v28 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:269];
  uint64_t v29 = [(HKDisplayType *)v27 initWithDisplayTypeIdentifier:269 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v28 behavior:v21 presentation:v25 localization:v26 chartingRules:v35 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v29;
}

HKDisplayType *HKDisplayTypeIdentifierLeanBodyMassMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:2];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  id v25 = v2;
  id v3 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  v26[0] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:v4];

  double v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v6 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  double v7 = [v5 quantityWithUnit:v6 doubleValue:8.0];
  double v8 = (void *)MEMORY[0x1E4F2B370];
  double v9 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  uint64_t v10 = [v8 quantityWithUnit:v9 doubleValue:0.0];
  uint64_t v11 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v7 minimumValue:v10 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v11];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  uint64_t v12 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v13 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  id v14 = [HKDisplayTypePresentation alloc];
  id v15 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v24) = 0;
  uint64_t v16 = MEMORY[0x1E4F1CC08];
  double v17 = [(HKDisplayTypePresentation *)v14 initWithDefaultConfiguration:v15 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v13];

  id v18 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"LEAN_BODY_MASS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:4];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:4 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v12 presentation:v17 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

id HKUIDynamicColorWithColors(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = (void *)MEMORY[0x1E4FB1618];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __HKUIDynamicColorWithColors_block_invoke;
  v10[3] = &unk_1E6D55278;
  id v11 = v4;
  id v12 = v3;
  id v6 = v3;
  id v7 = v4;
  double v8 = [v5 colorWithDynamicProvider:v10];

  return v8;
}

BOOL HKCodablePluginSharableModelDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 8;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

HKDisplayType *HKDisplayTypeIdentifierSleepAnalysisMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:6];
  BYTE2(v16) = 0;
  LOWORD(v16) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 1, 1, 0, 0, 1, v16);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v17) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:1 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v17 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SLEEP_ANALYSIS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:63];
  unsigned int v9 = (void *)MEMORY[0x1E4F2B3C0];
  id v10 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  uint64_t v11 = _HKCategoryValueSleepAnalysisAsleepValues();
  unint64_t v12 = (void *)[v10 initWithArray:v11];
  char v13 = [v9 predicateForCategorySamplesEqualToValues:v12];
  id v14 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:63 categoryIdentifier:5 secondaryCategoryIdentifiers:&unk_1F3C1F6D8 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:v13 chartingPredicatesByTimeScope:0];

  return v14;
}

HKDisplayType *HKDisplayTypeIdentifierWorkoutMake()
{
  v18[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  [(HKDisplayTypeChartingRules *)v0 setChartStyle:5 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:1 forTimeScope:6];
  uint64_t v1 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B00 maxValue:&unk_1F3C22B10];
  double v2 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v1 axisBoundsOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v2];

  BYTE2(v15) = 0;
  LOWORD(v15) = 257;
  id v3 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  uint64_t v4 = [HKDisplayTypePresentation alloc];
  double v5 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:2 detailChart:7 singleDailyValue:0];
  uint64_t v17 = &unk_1F3C22180;
  id v6 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:0 detailChart:6 singleDailyValue:0];
  v18[0] = v6;
  id v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:&v17 count:1];
  LOBYTE(v16) = 0;
  char v8 = [(HKDisplayTypePresentation *)v4 initWithDefaultConfiguration:v5 configurationOverrides:v7 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v16 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  unsigned int v9 = [HKDisplayTypeLocalization alloc];
  id v10 = [(HKDisplayTypeLocalization *)v9 initWithDisplayNameKey:@"WORKOUT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v11 = [HKDisplayType alloc];
  unint64_t v12 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:79];
  char v13 = [(HKDisplayType *)v11 initWithDisplayTypeIdentifier:79 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v12 behavior:v3 presentation:v8 localization:v10 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierWorkoutEffortScoreMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"appleEffortScore"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"appleEffortScore"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:20.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  unint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:1 singleDailyValue:0];
  LOBYTE(v21) = 0;
  uint64_t v13 = MEMORY[0x1E4F1CC08];
  id v14 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v15 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WORKOUT_EFFORT_SCORE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v13];
  uint64_t v16 = [HKDisplayType alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:304];
  uint64_t v18 = [(HKDisplayType *)v16 initWithDisplayTypeIdentifier:304 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v17 behavior:v10 presentation:v14 localization:v15 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierWheezingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_WHEEZING" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:223];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:223 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierWheelchairUseMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WHEELCHAIR_USE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:103];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:103 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierWheelchairDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:0.1];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"WHEELCHAIR_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:113];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:113 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierWaterTemperatureMake()
{
  v30[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:3 chartingOptions:0 preferredTimeScope:6];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"degC"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:5.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"degC"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = (void *)MEMORY[0x1E4F2B370];
  unsigned int v9 = [MEMORY[0x1E4F2B618] unitFromString:@"degC"];
  id v10 = [v8 quantityWithUnit:v9 doubleValue:30.0];
  uint64_t v11 = +[HKValueRange valueRangeWithMinValue:v7 maxValue:v10];
  uint64_t v12 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:0 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v11];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v12];

  uint64_t v13 = [HKRemoteChartConfiguration alloc];
  uint64_t v29 = &unk_1F3C22180;
  id v14 = objc_msgSend(MEMORY[0x1E4F1C9D8], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  v30[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:&v29 count:1];
  uint64_t v16 = [(HKRemoteChartConfiguration *)v13 initWithStatisticIntervalComponentsByTimeScope:v15];
  [(HKDisplayTypeChartingRules *)v0 setRemoteChartConfiguration:v16];

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  uint64_t v17 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v27);
  uint64_t v18 = [HKDisplayTypePresentation alloc];
  uint64_t v19 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v28) = 0;
  uint64_t v20 = MEMORY[0x1E4F1CC08];
  uint64_t v21 = [(HKDisplayTypePresentation *)v18 initWithDefaultConfiguration:v19 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v28 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v22 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WATER_TEMPERATURE" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Charon" localizedKeySuffix:0 unitNameKeyOverrides:v20];
  uint64_t v23 = [HKDisplayType alloc];
  uint64_t v24 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:277];
  id v25 = [(HKDisplayType *)v23 initWithDisplayTypeIdentifier:277 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v24 behavior:v17 presentation:v21 localization:v22 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingStepLengthMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:18 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.01];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WALKING_STEP_LENGTH" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:188];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:188 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingSpeedMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:18 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.1];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WALKING_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:187];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:187 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingDoubleSupportPercentageMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:3 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:1.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = (void *)MEMORY[0x1E4F2B370];
  unsigned int v9 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  id v10 = [v8 quantityWithUnit:v9 doubleValue:100.0];
  uint64_t v11 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:v10 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v11];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  uint64_t v12 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v13 = [HKDisplayTypePresentation alloc];
  id v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v23) = 0;
  uint64_t v15 = MEMORY[0x1E4F1CC08];
  uint64_t v16 = [(HKDisplayTypePresentation *)v13 initWithDefaultConfiguration:v14 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v17 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WALKING_DOUBLE_SUPPORT_PERCENTAGE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v15];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:182];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:182 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v12 presentation:v16 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingAsymmetryPercentageMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:1 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:100.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:3 singleDailyValue:0];
  LOBYTE(v21) = 0;
  uint64_t v13 = MEMORY[0x1E4F1CC08];
  id v14 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v15 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WALKING_ASYMMETRY_PERCENTAGE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v13];
  uint64_t v16 = [HKDisplayType alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:194];
  uint64_t v18 = [(HKDisplayType *)v16 initWithDisplayTypeIdentifier:194 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v17 behavior:v10 presentation:v14 localization:v15 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierWaistCircumferenceMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:5.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  id v7 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v7];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  char v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  id v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WAIST_CIRCUMFERENCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v11];
  id v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:114];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:114 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v8 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierVomitingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_VOMITING" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:220];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:220 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVitalSignRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_vitals" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"VITAL_SIGN_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:155];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:155 categoryIdentifier:17 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVisionPrescriptionMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"VISION_PRESCRIPTION" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-VRX" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:257];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:257 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVaginalDrynessMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_VAGINAL_DRYNESS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  id v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:229];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:229 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F900 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVO2MaxMake()
{
  v31[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:4];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"ml/(kg*min)"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:16.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"ml/(kg*min)"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v26) = 0;
  LOWORD(v26) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v26);
  id v10 = [HKDisplayTypeSummaryAttribution alloc];
  uint64_t v11 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v12 = [v11 localizedStringForKey:@"CARDIO_FITNESS_SUMMARY_ATTRIBUTION" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-CardioFitness"];
  uint64_t v13 = [(HKDisplayTypeSummaryAttribution *)v10 initWithAttribution:v12 urlAttribute:@"x-apple-health://HealthProfile/CurrentContext" primaryProfileOnly:1];

  id v14 = [HKDisplayTypePresentation alloc];
  uint64_t v15 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v27) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v14 initWithDefaultConfiguration:v15 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v27 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v13];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [MEMORY[0x1E4F2B618] unitFromString:@"ml/(kg*min)"];
  v28[0] = &unk_1F3C22168;
  v28[1] = &unk_1F3C221B0;
  v29[0] = @"CARDIO_FITNESS";
  v29[1] = @"CARDIO_FITNESS_PREFERENCES";
  v28[2] = &unk_1F3C221E0;
  v29[2] = @"CARDIO_FITNESS_SAMPLE_DETAILS";
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v29 forKeys:v28 count:3];
  v31[0] = v19;
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:&v30 count:1];
  uint64_t v21 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"CARDIO_FITNESS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-CardioFitness" localizedKeySuffix:0 unitNameKeyOverrides:v20];

  uint64_t v22 = [HKDisplayType alloc];
  uint64_t v23 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:124];
  uint64_t v24 = [(HKDisplayType *)v22 initWithDisplayTypeIdentifier:124 categoryIdentifier:11 secondaryCategoryIdentifiers:&unk_1F3C1F768 objectType:v23 behavior:v9 presentation:v16 localization:v21 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v24;
}

HKDisplayType *HKDisplayTypeIdentifierUVExposureMake()
{
  v28[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:3 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:15.0];
  id v7 = +[HKValueRange valueRangeWithMinValue:v3 maxValue:v6];
  char v8 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v7 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  id v10 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"NIH MedlinePlus" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v24) = 0;
  uint64_t v13 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v10];

  id v14 = [HKDisplayTypeLocalization alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v25 = &unk_1F3C22168;
  uint64_t v26 = &stru_1F3B9CF20;
  uint64_t v27 = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  v28[0] = v16;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:&v27 count:1];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v14 initWithDisplayNameKey:@"UV_EXPOSURE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v17];

  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:89];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:89 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v9 presentation:v13 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierToothbrushingEventMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:6.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v21) = 0;
  uint64_t v13 = MEMORY[0x1E4F1CC08];
  id v14 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:1 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v15 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"TOOTHBRUSHING_EVENT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v13];
  uint64_t v16 = [HKDisplayType alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:189];
  uint64_t v18 = [(HKDisplayType *)v16 initWithDisplayTypeIdentifier:189 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v17 behavior:v10 presentation:v14 localization:v15 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierTimeInDaylightMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:60.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"TIME_IN_DAYLIGHT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:279];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:279 categoryIdentifier:14 secondaryCategoryIdentifiers:&unk_1F3C1F9D8 objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierSwimmingStrokesMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:100.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = @"SWIMMING_STROKES_LOWER";
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"SWIMMING_STROKES" labelDisplayNameKey:@"SWIMMING_STROKES" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:111];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:111 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v10 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierSwimmingDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:100.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"SWIMMING_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:110];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:110 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierStepsMake()
{
  v33[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v7 = [v5 quantityWithUnit:v6 doubleValue:100.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v26) = 0;
  LOWORD(v26) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v26);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v32 = &unk_1F3C22180;
  id v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v33[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:&v32 count:1];
  LOBYTE(v27) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v27 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v28 = &unk_1F3C22168;
  uint64_t v29 = @"STEPS_LOWER";
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
  uint64_t v31 = v19;
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v31 forKeys:&v30 count:1];
  uint64_t v21 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"STEPS" labelDisplayNameKey:@"STEPS" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v20];

  uint64_t v22 = [HKDisplayType alloc];
  uint64_t v23 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:7];
  uint64_t v24 = [(HKDisplayType *)v22 initWithDisplayTypeIdentifier:7 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v23 behavior:v10 presentation:v16 localization:v21 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v24;
}

HKDisplayType *HKDisplayTypeIdentifierStateOfMindMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B50 maxValue:&unk_1F3C22B60];
  double v2 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B50 maxValue:&unk_1F3C22B60];
  id v3 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v1 axisBoundsOverrides:0 noDataAxisBounds:v2];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v3];

  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  uint64_t v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  double v5 = [HKDisplayTypePresentation alloc];
  id v6 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v15) = 0;
  uint64_t v7 = MEMORY[0x1E4F1CC08];
  char v8 = [(HKDisplayTypePresentation *)v5 initWithDefaultConfiguration:v6 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v15 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  unsigned int v9 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"STATE_OF_MIND" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Chamomile" localizedKeySuffix:0 unitNameKeyOverrides:v7];
  id v10 = [HKDisplayType alloc];
  uint64_t v11 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:284];
  uint64_t v12 = [(HKDisplayType *)v10 initWithDisplayTypeIdentifier:284 categoryIdentifier:10 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v11 behavior:v4 presentation:v8 localization:v9 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierStairDescentSpeedMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:18 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.01];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:1 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"STAIR_DESCENT_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:196];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:196 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierStairAscentSpeedMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:18 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.01];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:1 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"STAIR_ASCENT_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:195];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:195 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierSoreThroatMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_SORE_THROAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:224];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:224 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepScheduleMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SLEEP_SCHEDULE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:198];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:198 categoryIdentifier:5 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepDurationGoalMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SLEEP_DURATION_GOAL" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:197];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:197 categoryIdentifier:5 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepChangesMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_SLEEP_CHANGES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:169];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:169 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F8A0 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepApneaEventMake()
{
  v19[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v15) = 0;
  uint64_t v4 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v15 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  double v5 = [HKDisplayTypeLocalization alloc];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v16 = &unk_1F3C22168;
  uint64_t v17 = &stru_1F3B9CF20;
  uint64_t v18 = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  v19[0] = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  unsigned int v9 = [(HKDisplayTypeLocalization *)v5 initWithDisplayNameKey:@"SLEEP_APNEA_EVENT" labelDisplayNameKey:@"SLEEP_APNEA_EVENT" localizationTableNameOverride:@"Localizable-Nebula" localizedKeySuffix:0 unitNameKeyOverrides:v8];

  id v10 = [HKDisplayType alloc];
  uint64_t v11 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:276];
  uint64_t v12 = [(HKDisplayType *)v10 initWithDisplayTypeIdentifier:276 categoryIdentifier:13 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v11 behavior:v1 presentation:v4 localization:v9 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierSkippedHeartbeatMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_SKIPPED_HEARTBEAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:202];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:202 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSkatingSportsDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"SKATING_SPORTS_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:297];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:297 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierSixMinuteWalkTestDistanceMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:100.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:3 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SIX_MINUTE_WALK_TEST_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:183];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:183 categoryIdentifier:23 secondaryCategoryIdentifiers:&unk_1F3C1F8E8 objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierShortnessOfBreathMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_SHORTNESS_OF_BREATH" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:204];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:204 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSexualActivityMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B00 maxValue:&unk_1F3C22B20];
  id v3 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v2 axisBoundsOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v3];

  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  uint64_t v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  double v5 = [HKDisplayTypePresentation alloc];
  id v6 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:6 secondaryValue:3 detailChart:5 singleDailyValue:0];
  LOBYTE(v15) = 0;
  uint64_t v7 = MEMORY[0x1E4F1CC08];
  char v8 = [(HKDisplayTypePresentation *)v5 initWithDefaultConfiguration:v6 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v15 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  unsigned int v9 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SEXUAL_ACTIVITY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v7];
  id v10 = [HKDisplayType alloc];
  uint64_t v11 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:97];
  uint64_t v12 = [(HKDisplayType *)v10 initWithDisplayTypeIdentifier:97 categoryIdentifier:8 secondaryCategoryIdentifiers:&unk_1F3C1F750 objectType:v11 behavior:v4 presentation:v8 localization:v9 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierRunnyNoseMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_RUNNY_NOSE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:226];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:226 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierRunningVerticalOscillationMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:10.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:1.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:20.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"RUNNING_VERTICAL_OSCILLATION" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:259];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:259 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningStrideLengthMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:2.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.5];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:4.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"RUNNING_STRIDE_LENGTH" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:258];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:258 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningSpeedMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.1];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:7.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"RUNNING_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:274];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:274 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningPowerMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:100.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:300.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"RUNNING_POWER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:270];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:270 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningGroundContactTimeMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"ms"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:100.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"ms"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"ms"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:50.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"ms"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:400.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"RUNNING_GROUND_CONTACT_TIME" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:260];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:260 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRowingSpeedMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.1];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:4.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ROWING_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:301];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:301 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRowingDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"ROWING_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:295];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:295 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierRapidPoundingOrFlutteringHeartbeatMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_RAPID_POUNDING_OR_FLUTTERING_HEARTBEAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:201];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:201 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPushCountMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1000.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = @"PUSH_COUNT_LOWER";
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"PUSH_COUNT" labelDisplayNameKey:@"PUSH_COUNT" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:101];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:101 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v10 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierProlongedMenstrualPeriodsMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_PROLONGED" labelDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_PROLONGED" localizationTableNameOverride:@"Localizable-Selene" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:263];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:263 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierProgesteroneTestResultMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PROGESTERONE_TEST_RESULT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:244];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:244 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierProcedureRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_procedures" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PROCEDURE_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:154];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:154 categoryIdentifier:22 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPregnancyTestResultMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PREGNANCY_TEST_RESULT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:243];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:243 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPregnancyMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PREGNANCY" labelDisplayNameKey:@"PREGNANCY" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:191];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:191 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPhysicalEffortMake()
{
  v35[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:2 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  uint64_t v31 = v0;
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v30 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal/(kg*hr)"];
  uint64_t v29 = [v2 quantityWithUnit:v30 doubleValue:3.0];
  id v3 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v4 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal/(kg*hr)"];
  double v5 = [v3 quantityWithUnit:v4 doubleValue:0.0];
  id v6 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal/(kg*hr)"];
  char v8 = [v6 quantityWithUnit:v7 doubleValue:0.0];
  unsigned int v9 = (void *)MEMORY[0x1E4F2B370];
  id v10 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal/(kg*hr)"];
  uint64_t v11 = [v9 quantityWithUnit:v10 doubleValue:5.0];
  uint64_t v12 = +[HKValueRange valueRangeWithMinValue:v8 maxValue:v11];
  uint64_t v13 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v29 minimumValue:v5 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v12];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v13];

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  uint64_t v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v27);
  uint64_t v15 = [HKDisplayTypePresentation alloc];
  uint64_t v16 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v28) = 0;
  uint64_t v17 = [(HKDisplayTypePresentation *)v15 initWithDefaultConfiguration:v16 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v28 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v18 = [HKDisplayTypeLocalization alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal/(kg*hr)"];
  id v34 = v19;
  v32[0] = &unk_1F3C22168;
  v32[1] = &unk_1F3C221B0;
  v33[0] = @"PHYSICAL_EFFORT";
  v33[1] = @"PHYSICAL_EFFORT_PREFERENCES";
  void v32[2] = &unk_1F3C221E0;
  void v33[2] = @"PHYSICAL_EFFORT_SAMPLE_DETAILS";
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:v32 count:3];
  v35[0] = v20;
  uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
  uint64_t v22 = [(HKDisplayTypeLocalization *)v18 initWithDisplayNameKey:@"PHYSICAL_EFFORT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v21];

  uint64_t v23 = [HKDisplayType alloc];
  uint64_t v24 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:286];
  uint64_t v25 = [(HKDisplayType *)v23 initWithDisplayTypeIdentifier:286 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v24 behavior:v14 presentation:v17 localization:v22 chartingRules:v31 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierPersistentIntermenstrualBleedingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_SPOTTING" labelDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_SPOTTING" localizationTableNameOverride:@"Localizable-Selene" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:262];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:262 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPeripheralPerfusionIndexMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.2];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v7];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  char v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  id v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PERFUSION_INDEX" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v11];
  uint64_t v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:19];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:19 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v8 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierPelvicPainMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_PELVIC_PAIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:163];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:163 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F810 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPeakExpiratoryFlowRateMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"L/min"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:10.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"L/min"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v7];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  char v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  id v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SPIROMETRY_PEFR" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v11];
  uint64_t v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:73];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:73 categoryIdentifier:13 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v8 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierPaddleSportsSpeedMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.1];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  double v5 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:4.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PADDLE_SPORTS_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:303];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:303 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierPaddleSportsDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"PADDLE_SPORTS_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:294];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:294 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierPHQ9Make()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:3];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"PHQ9" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Chamomile" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:288];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:288 categoryIdentifier:10 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierOxygenSaturationMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:3 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:10.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = (void *)MEMORY[0x1E4F2B370];
  unsigned int v9 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  id v10 = [v8 quantityWithUnit:v9 doubleValue:100.0];
  uint64_t v11 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:v10 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v11];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  uint64_t v12 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v13 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v14 = [HKDisplayTypePresentation alloc];
  uint64_t v15 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v24) = 0;
  uint64_t v16 = MEMORY[0x1E4F1CC08];
  uint64_t v17 = [(HKDisplayTypePresentation *)v14 initWithDefaultConfiguration:v15 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v13];

  uint64_t v18 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"OXYGEN_SATURATION" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:14];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:14 categoryIdentifier:13 secondaryCategoryIdentifiers:&unk_1F3C1F660 objectType:v20 behavior:v12 presentation:v17 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierOvulationTestResultMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"OVULATION_TEST_RESULT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:92];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:92 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierNumberOfTimesFallenMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:3.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = &stru_1F3B9CF20;
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"NUMBER_OF_TIMES_FALLEN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:57];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:57 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v10 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierNumberOfAlcoholicBeveragesMake()
{
  v39[1] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  [(HKDisplayTypeChartingRules *)v33 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v32 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v31 = [v1 quantityWithUnit:v32 doubleValue:0.0];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:2.0];
  double v5 = +[HKValueRange valueRangeWithMinValue:v31 maxValue:v4];
  id v6 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  char v8 = [v6 quantityWithUnit:v7 doubleValue:0.0];
  unsigned int v9 = (void *)MEMORY[0x1E4F2B370];
  id v10 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v11 = [v9 quantityWithUnit:v10 doubleValue:2.0];
  uint64_t v12 = +[HKValueRange valueRangeWithMinValue:v8 maxValue:v11];
  uint64_t v13 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v5 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:v12];
  [(HKDisplayTypeChartingRules *)v33 setAxisScalingRule:v13];

  BYTE2(v29) = 0;
  LOWORD(v29) = 256;
  uint64_t v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v29);
  uint64_t v15 = [HKDisplayTypePresentation alloc];
  uint64_t v16 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  id v38 = &unk_1F3C22180;
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v39[0] = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:&v38 count:1];
  LOBYTE(v30) = 0;
  uint64_t v19 = [(HKDisplayTypePresentation *)v15 initWithDefaultConfiguration:v16 configurationOverrides:v18 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v30 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [HKDisplayTypeLocalization alloc];
  uint64_t v21 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  id v34 = &unk_1F3C22168;
  uint64_t v35 = @"NUMBER_OF_ALCOHOLIC_BEVERAGES";
  uint64_t v36 = v21;
  uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v35 forKeys:&v34 count:1];
  uint64_t v37 = v22;
  uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v37 forKeys:&v36 count:1];
  uint64_t v24 = [(HKDisplayTypeLocalization *)v20 initWithDisplayNameKey:@"NUMBER_OF_ALCOHOLIC_BEVERAGES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v23];

  uint64_t v25 = [HKDisplayType alloc];
  uint64_t v26 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:251];
  uint64_t v27 = [(HKDisplayType *)v25 initWithDisplayTypeIdentifier:251 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v26 behavior:v14 presentation:v19 localization:v24 chartingRules:v33 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v27;
}

HKDisplayType *HKDisplayTypeIdentifierNikeFuelMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  double v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:100.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:@"NikeFuel_Summary_Image" listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = &stru_1F3B9CF20;
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"NIKE_FUEL" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:13];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:13 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v10 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierNightSweatsMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_NIGHT_SWEATS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:230];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:230 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F918 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierNauseaMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_NAUSEA" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:168];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:168 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F888 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMoodChangesMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_MOOD_CHANGES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:164];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:164 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F828 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMindfulSessionMake()
{
  v20[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  [(HKDisplayTypeChartingRules *)v0 setChartStyle:5 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesValueAxisAnnotation:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartFlatLastValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartExtendFirstValue:0 forTimeScope:6];
  [(HKDisplayTypeChartingRules *)v0 setLineChartUsesPointMarkerImage:1 forTimeScope:6];
  double v2 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B00 maxValue:&unk_1F3C22B30];
  id v3 = +[HKValueRange valueRangeWithMinValue:&unk_1F3C22B00 maxValue:&unk_1F3C22B30];
  uint64_t v4 = +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:v2 axisBoundsOverrides:0 noDataAxisBounds:v3];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v4];

  BYTE2(v17) = 0;
  LOWORD(v17) = 256;
  double v5 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v17);
  id v6 = [HKDisplayTypePresentation alloc];
  uint64_t v7 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:2 detailChart:7 singleDailyValue:0];
  uint64_t v19 = &unk_1F3C22180;
  char v8 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:3 secondaryValue:0 detailChart:8 singleDailyValue:0];
  v20[0] = v8;
  unsigned int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  LOBYTE(v18) = 0;
  id v10 = [(HKDisplayTypePresentation *)v6 initWithDefaultConfiguration:v7 configurationOverrides:v9 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v18 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v11 = [HKDisplayTypeLocalization alloc];
  uint64_t v12 = [(HKDisplayTypeLocalization *)v11 initWithDisplayNameKey:@"MINDFUL_MINUTES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v13 = [HKDisplayType alloc];
  uint64_t v14 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:99];
  uint64_t v15 = [(HKDisplayType *)v13 initWithDisplayTypeIdentifier:99 categoryIdentifier:10 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v14 behavior:v5 presentation:v10 localization:v12 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v15;
}

HKDisplayType *HKDisplayTypeIdentifierMenstruationMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:6 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MENSTRUATION" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:95];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:95 categoryIdentifier:8 secondaryCategoryIdentifiers:&unk_1F3C1F738 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMemoryLapseMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_MEMORY_LAPSE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:235];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:235 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F990 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMedicationRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_medications" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MEDICATION_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:153];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:153 categoryIdentifier:21 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMedicationDoseEventMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MEDICATION_TRACKING" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Meds" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:273];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:273 categoryIdentifier:31 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLowerBackPainMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_LOWER_BACK_PAIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:162];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:162 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F7F8 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLowCardioFitnessEventMake()
{
  v20[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  double v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  id v3 = [HKDisplayTypePresentation alloc];
  uint64_t v4 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:7 singleDailyValue:0];
  LOBYTE(v16) = 0;
  double v5 = [(HKDisplayTypePresentation *)v3 initWithDefaultConfiguration:v4 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v16 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [HKDisplayTypeLocalization alloc];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v17 = &unk_1F3C22168;
  uint64_t v18 = &stru_1F3B9CF20;
  uint64_t v19 = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  v20[0] = v8;
  unsigned int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  id v10 = [(HKDisplayTypeLocalization *)v6 initWithDisplayNameKey:@"CARDIO_FITNESS_EVENT" labelDisplayNameKey:@"CARDIO_FITNESS_EVENT" localizationTableNameOverride:@"Localizable-CardioFitness" localizedKeySuffix:0 unitNameKeyOverrides:v9];

  uint64_t v11 = [HKDisplayType alloc];
  uint64_t v12 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:236];
  uint64_t v13 = [(HKDisplayType *)v11 initWithDisplayTypeIdentifier:236 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v12 behavior:v2 presentation:v5 localization:v10 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierLossOfTasteMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_LOSS_OF_TASTE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:242];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:242 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLossOfSmellMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_LOSS_OF_SMELL" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:241];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:241 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLactationMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"LACTATION" labelDisplayNameKey:@"LACTATION" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:192];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:192 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLabResultRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_lab_results" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"LAB_RESULT_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:152];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:152 categoryIdentifier:20 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierIrregularMenstrualCyclesMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  double v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_IRREGULAR" labelDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_IRREGULAR" localizationTableNameOverride:@"Localizable-Selene" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:264];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:264 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierIntermenstrualBleedingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:7 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v12) = 0;
  LOWORD(v12) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v12);
  double v2 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  id v3 = [HKDisplayTypePresentation alloc];
  uint64_t v4 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:6 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v13) = 0;
  uint64_t v5 = MEMORY[0x1E4F1CC08];
  id v6 = [(HKDisplayTypePresentation *)v3 initWithDefaultConfiguration:v4 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v13 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v2];

  uint64_t v7 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"INTERMENSTRUAL_BLEEDING" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v5];
  char v8 = [HKDisplayType alloc];
  unsigned int v9 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:96];
  id v10 = [(HKDisplayType *)v8 initWithDisplayTypeIdentifier:96 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v9 behavior:v1 presentation:v6 localization:v7 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v10;
}

HKDisplayType *HKDisplayTypeIdentifierInsuranceRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_insurance" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"INSURANCE_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:217];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:217 categoryIdentifier:27 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierInsulinDeliveryMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:3];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"IU"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"IU"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 1, 0, 1, 0, 0, 1, v25);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"IU"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = @"INSULIN";
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"INSULIN_DELIVERY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:125];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:125 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v10 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierInhalerUsageMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:3.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  id v10 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Heart, Lung, and Blood Institute" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v10];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = &stru_1F3B9CF20;
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"INHALER_USAGE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:60];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:60 categoryIdentifier:13 secondaryCategoryIdentifiers:&unk_1F3C1F690 objectType:v22 behavior:v9 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierInfrequentMenstrualCyclesMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_INFREQUENT" labelDisplayNameKey:@"MENSTRUAL_CYCLE_DEVIATION_INFREQUENT" localizationTableNameOverride:@"Localizable-Selene" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:265];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:265 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierImmunizationRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_immunizations" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"IMMUNIZATION_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:151];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:151 categoryIdentifier:19 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHotFlashesMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_HOT_FLASHES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:171];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:171 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F8D0 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHeartburnMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_HEARTBURN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:221];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:221 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHeartRateVariabilityMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"ms"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:150.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"ms"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"HEART_RATE_VARIABILITY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:139];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:139 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierHeartRateRecoveryMake()
{
  v27[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:20.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v23) = 0;
  uint64_t v12 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [HKDisplayTypeLocalization alloc];
  uint64_t v14 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v24 = &unk_1F3C22168;
  uint64_t v25 = @"BEATS_PER_MINUTE";
  uint64_t v26 = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  v27[0] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v13 initWithDisplayNameKey:@"HEART_RATE_RECOVERY" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Lyon" localizedKeySuffix:0 unitNameKeyOverrides:v16];

  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:266];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:266 categoryIdentifier:11 secondaryCategoryIdentifiers:&unk_1F3C1F9C0 objectType:v19 behavior:v9 presentation:v12 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierHeadphoneAudioExposureMake()
{
  v27[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:3 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:1.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v23) = 0;
  uint64_t v12 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [HKDisplayTypeLocalization alloc];
  uint64_t v14 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v24 = &unk_1F3C22168;
  uint64_t v25 = @"DECIBEL_A_WEIGHTED_SPL";
  uint64_t v26 = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  v27[0] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v13 initWithDisplayNameKey:@"HEADPHONE_AUDIO_EXPOSURE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];

  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:173];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:173 categoryIdentifier:12 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v9 presentation:v12 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierHeadphoneAudioExposureEventMake()
{
  v20[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  double v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  id v3 = [HKDisplayTypePresentation alloc];
  uint64_t v4 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v16) = 0;
  uint64_t v5 = [(HKDisplayTypePresentation *)v3 initWithDefaultConfiguration:v4 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v16 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [HKDisplayTypeLocalization alloc];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v17 = &unk_1F3C22168;
  uint64_t v18 = &stru_1F3B9CF20;
  uint64_t v19 = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  v20[0] = v8;
  unsigned int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  id v10 = [(HKDisplayTypeLocalization *)v6 initWithDisplayNameKey:@"HEADPHONE_AUDIO_EXPOSURE_EVENT" labelDisplayNameKey:@"HEADPHONE_AUDIO_EXPOSURE_EVENT" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v9];

  uint64_t v11 = [HKDisplayType alloc];
  uint64_t v12 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:199];
  uint64_t v13 = [(HKDisplayType *)v11 initWithDisplayTypeIdentifier:199 categoryIdentifier:12 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v12 behavior:v2 presentation:v5 localization:v10 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierHeadacheMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_HEADACHE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:160];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:160 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F7C8 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHandwashingEventMake()
{
  v28[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:17 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"s"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"s"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:25.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v24) = 0;
  uint64_t v13 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:1 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v14 = [HKDisplayTypeLocalization alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B618] unitFromString:@"s"];
  uint64_t v25 = &unk_1F3C22168;
  uint64_t v26 = @"SECONDS_MEDIUM";
  uint64_t v27 = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  v28[0] = v16;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:&v27 count:1];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v14 initWithDisplayNameKey:@"HANDWASHING_EVENT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v17];

  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:237];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:237 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v13 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierHairLossMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_HAIR_LOSS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:232];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:232 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F948 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierGAD7Make()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:3];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"GAD7" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Chamomile" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:287];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:287 categoryIdentifier:10 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierForcedVitalCapacityMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"L"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.2];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"L"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v7];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  char v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  id v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SPIROMETRY_FVC" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v11];
  uint64_t v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:71];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:71 categoryIdentifier:13 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v8 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierForcedExpiratoryVolume1Make()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"L"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.2];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"L"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v7];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  char v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  id v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SPIROMETRY_FEV1" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v11];
  uint64_t v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:72];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:72 categoryIdentifier:13 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v8 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierFlightsClimbedMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:3.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v31 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v32[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  LOBYTE(v26) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v27 = &unk_1F3C22168;
  uint64_t v28 = @"FLOORS_LOWER";
  uint64_t v29 = v17;
  uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v30 = v18;
  uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
  uint64_t v20 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"FLIGHTS_CLIMBED" labelDisplayNameKey:@"FLOORS" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v19];

  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:12];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:12 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v10 presentation:v15 localization:v20 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierFitzpatrickSkinTypeMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v12) = 0;
  LOWORD(v12) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v12);
  double v2 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  id v3 = [HKDisplayTypePresentation alloc];
  uint64_t v4 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v13) = 0;
  uint64_t v5 = MEMORY[0x1E4F1CC08];
  id v6 = [(HKDisplayTypePresentation *)v3 initWithDefaultConfiguration:v4 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v13 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v2];

  uint64_t v7 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"FITZPATRICK_SKIN_TYPE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v5];
  char v8 = [HKDisplayType alloc];
  unsigned int v9 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:88];
  id v10 = [(HKDisplayType *)v8 initWithDisplayTypeIdentifier:88 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v9 behavior:v1 presentation:v6 localization:v7 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v10;
}

HKDisplayType *HKDisplayTypeIdentifierFeverMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_FEVER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:203];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:203 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierFatigueMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_FATIGUE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:167];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:167 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F870 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierFaintingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_FAINTING" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:206];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:206 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierEstimatedWorkoutEffortScoreMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"appleEffortScore"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"appleEffortScore"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:20.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:1 singleDailyValue:0];
  LOBYTE(v21) = 0;
  uint64_t v13 = MEMORY[0x1E4F1CC08];
  uint64_t v14 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v15 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ESTIMATED_WORKOUT_EFFORT_SCORE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v13];
  uint64_t v16 = [HKDisplayType alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:298];
  uint64_t v18 = [(HKDisplayType *)v16 initWithDisplayTypeIdentifier:298 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v17 behavior:v10 presentation:v14 localization:v15 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierEnvironmentalSoundReductionMake()
{
  v27[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:3 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:1.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v23) = 0;
  uint64_t v12 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [HKDisplayTypeLocalization alloc];
  uint64_t v14 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v24 = &unk_1F3C22168;
  uint64_t v25 = @"DECIBEL_A_WEIGHTED_SPL";
  uint64_t v26 = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  v27[0] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v13 initWithDisplayNameKey:@"ENVIRONMENTAL_SOUND_REDUCTION" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];

  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:272];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:272 categoryIdentifier:12 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v9 presentation:v12 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierEnvironmentalAudioExposureMake()
{
  v27[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:9 chartingOptions:3 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:1.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  id v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v23) = 0;
  uint64_t v12 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [HKDisplayTypeLocalization alloc];
  uint64_t v14 = [MEMORY[0x1E4F2B618] unitFromString:@"dBASPL"];
  uint64_t v24 = &unk_1F3C22168;
  uint64_t v25 = @"DECIBEL_A_WEIGHTED_SPL";
  uint64_t v26 = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  v27[0] = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v13 initWithDisplayNameKey:@"ENVIRONMENTAL_AUDIO_EXPOSURE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v16];

  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:172];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:172 categoryIdentifier:12 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v9 presentation:v12 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierEnvironmentalAudioExposureEventMake()
{
  v20[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  double v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  id v3 = [HKDisplayTypePresentation alloc];
  uint64_t v4 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v16) = 0;
  uint64_t v5 = [(HKDisplayTypePresentation *)v3 initWithDefaultConfiguration:v4 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v16 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [HKDisplayTypeLocalization alloc];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v17 = &unk_1F3C22168;
  uint64_t v18 = &stru_1F3B9CF20;
  uint64_t v19 = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  v20[0] = v8;
  unsigned int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  id v10 = [(HKDisplayTypeLocalization *)v6 initWithDisplayNameKey:@"AUDIO_EXPOSURE_EVENT" labelDisplayNameKey:@"AUDIO_EXPOSURE_EVENT" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v9];

  uint64_t v11 = [HKDisplayType alloc];
  uint64_t v12 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:178];
  uint64_t v13 = [(HKDisplayType *)v11 initWithDisplayTypeIdentifier:178 categoryIdentifier:12 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v12 behavior:v2 presentation:v5 localization:v10 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierElectrodermalActivityMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"mcS"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.2];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"mcS"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v7];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  char v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  id v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ELECTRODERMAL_ACTIVITY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v11];
  uint64_t v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:58];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:58 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v8 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierElectrocardiogramMake()
{
  v19[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v15) = 0;
  uint64_t v4 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v15 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v5 = [HKDisplayTypeLocalization alloc];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v16 = &unk_1F3C22168;
  uint64_t v17 = &stru_1F3B9CF20;
  uint64_t v18 = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  v19[0] = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  unsigned int v9 = [(HKDisplayTypeLocalization *)v5 initWithDisplayNameKey:@"ELECTROCARDIOGRAM" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Cinnamon" localizedKeySuffix:0 unitNameKeyOverrides:v8];

  id v10 = [HKDisplayType alloc];
  uint64_t v11 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:144];
  uint64_t v12 = [(HKDisplayType *)v10 initWithDisplayTypeIdentifier:144 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v11 behavior:v1 presentation:v4 localization:v9 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierDrySkinMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_DRY_SKIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:233];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:233 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F960 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDownhillSnowSportsDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"DOWNHILL_SNOW_SPORTS_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:138];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:138 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDizzinessMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_DIZZINESS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:207];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:207 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDistanceWalkingRunningMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.1];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:8];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:8 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryZincMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"ZINC" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:49];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:49 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryWaterMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mL"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mL"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"WATER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:87];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:87 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminEMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.5];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"VITAMIN_E" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:36];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:36 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminDMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.5];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"NIH MedlinePlus" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"VITAMIN_D" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:35];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:35 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminB6Make()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.2];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"VITAMIN_B6" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:32];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:32 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminB12Make()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.2];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Institutes of Health, Office of Dietary Supplements" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"VITAMIN_B12" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:33];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:33 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminAMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:20.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"VITAMIN_A" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:31];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:31 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryThiaminMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.2];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"THIAMIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:40];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:40 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietarySugarMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"SUGAR" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:28];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:28 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietarySodiumMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"SODIUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:25];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:25 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietarySeleniumMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Institutes of Health, Office of Dietary Supplements" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"SELENIUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:50];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:50 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryRiboflavinMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.2];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"RIBOFLAVIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:41];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:41 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryProteinMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"PROTEIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:30];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:30 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryPotassiumMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"POTASSIUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:56];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:56 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryPhosphorusMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Institute of Diabetes and Digestive and Kidney Disorders" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"PHOSPHORUS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:46];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:46 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryPantothenicAcidMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.1];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"PANTOTHENIC_ACID" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:45];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:45 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryNiacinMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Cancer Institute" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"NIACIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:42];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:42 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryMolybdenumMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"MOLYBDENUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:54];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:54 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryManganeseMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.1];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"MANGANESE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:52];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:52 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryMagnesiumMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"MAGNESIUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:48];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:48 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryIronMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"IRON" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:39];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:39 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryIodineMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Institutes of Health, Office of Dietary Supplements" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"IODINE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:47];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:47 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFolateMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Institutes of Health, Office of Dietary Supplements" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"FOLATE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:43];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:43 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFiberMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"FIBER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:27];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:27 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatTotalMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"TOTAL_FAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:20];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:20 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatSaturatedMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"SATURATED_FAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:23];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:23 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatPolyunsaturatedMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"POLYUNSATURATED_FAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:21];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:21 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatMonounsaturatedMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"MONOUNSATURATED_FAT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:22];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:22 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryEnergyMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:50.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"DIETARY_ENERGY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:29];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:29 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCopperMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"COPPER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:51];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:51 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryChromiumMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CHROMIUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:53];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:53 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCholesterolMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CHOLESTEROL" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:24];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:24 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryChlorideMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:50.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CHLORIDE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:55];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:55 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCarbohydratesMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"g"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CARBOHYDRATES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:26];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:26 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCalciumMake()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:10.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Institutes of Health, Office of Dietary Supplements" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v25 = &unk_1F3C22180;
  uint64_t v14 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v26[0] = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:&v25 count:1];
  LOBYTE(v24) = 0;
  uint64_t v16 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:v15 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v17 = [HKDisplayTypeLocalization alloc];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v17 initWithDisplayNameKey:@"CALCIUM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:38];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:38 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v10 presentation:v16 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCaffeineMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:5.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CAFFEINE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:78];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:78 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryBiotinMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mcg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:2.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"BIOTIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:44];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:44 categoryIdentifier:4 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDiarrheaMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_DIARRHEA" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:166];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:166 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F858 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDateOfBirthMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"DATE_OF_BIRTH" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:65];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:65 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingSpeedMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.1];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:13.4];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CYCLING_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:281];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:281 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingPowerMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:100.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:300.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CYCLING_POWER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:280];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:280 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingFunctionalThresholdPowerMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:20.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:50.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"W"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:200.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CYCLING_FUNCTIONAL_THRESHOLD_POWER" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:283];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:283 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CYCLING_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:83];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:83 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingCadenceMake()
{
  v35[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  uint64_t v31 = v0;
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v30 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v29 = [v2 quantityWithUnit:v30 doubleValue:0.1];
  id v3 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v4 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v5 = [v3 quantityWithUnit:v4 doubleValue:0.0];
  id v6 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  char v8 = [v6 quantityWithUnit:v7 doubleValue:0.0];
  unsigned int v9 = (void *)MEMORY[0x1E4F2B370];
  id v10 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v11 = [v9 quantityWithUnit:v10 doubleValue:100.0];
  uint64_t v12 = +[HKValueRange valueRangeWithMinValue:v8 maxValue:v11];
  uint64_t v13 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v29 minimumValue:v5 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v12];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v13];

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  uint64_t v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v27);
  uint64_t v15 = [HKDisplayTypePresentation alloc];
  uint64_t v16 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v28) = 0;
  uint64_t v17 = [(HKDisplayTypePresentation *)v15 initWithDefaultConfiguration:v16 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v28 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v18 = [HKDisplayTypeLocalization alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B618] unitFromString:@"count/min"];
  uint64_t v32 = &unk_1F3C22168;
  uint64_t v33 = @"ROTATIONS_PER_MINUTE";
  id v34 = v19;
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v33 forKeys:&v32 count:1];
  v35[0] = v20;
  uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:&v34 count:1];
  uint64_t v22 = [(HKDisplayTypeLocalization *)v18 initWithDisplayNameKey:@"CYCLING_CADENCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v21];

  uint64_t v23 = [HKDisplayType alloc];
  uint64_t v24 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:282];
  uint64_t v25 = [(HKDisplayType *)v23 initWithDisplayTypeIdentifier:282 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v24 behavior:v14 presentation:v17 localization:v22 chartingRules:v31 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierCrossCountrySkiingSpeedMake()
{
  uint64_t v27 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:16 preferredTimeScope:5];
  double v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v27 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v3 = [v1 quantityWithUnit:v2 doubleValue:0.1];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:0.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  id v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:12.0];
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v12];
  uint64_t v14 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v3 minimumValue:v6 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v13];
  [(HKDisplayTypeChartingRules *)v27 setAxisScalingRule:v14];

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  uint64_t v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  uint64_t v16 = [HKDisplayTypePresentation alloc];
  uint64_t v17 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  LOBYTE(v26) = 0;
  uint64_t v18 = MEMORY[0x1E4F1CC08];
  uint64_t v19 = [(HKDisplayTypePresentation *)v16 initWithDefaultConfiguration:v17 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v26 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v20 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CROSS_COUNTRY_SKIING_SPEED" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v18];
  uint64_t v21 = [HKDisplayType alloc];
  uint64_t v22 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:302];
  uint64_t v23 = [(HKDisplayType *)v21 initWithDisplayTypeIdentifier:302 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v22 behavior:v15 presentation:v19 localization:v20 chartingRules:v27 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCrossCountrySkiingDistanceMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  id v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:1.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  id v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"CROSS_COUNTRY_SKIING_DISTANCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:296];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:296 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierCoughingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_COUGHING" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:222];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:222 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierContraceptiveMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CONTRACEPTIVE" labelDisplayNameKey:@"CONTRACEPTIVE" localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:193];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:193 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierConstipationMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_CONSTIPATION" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:165];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:165 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F840 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCongestionMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_CONGESTION" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:225];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:225 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierConditionRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_conditions" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CONDITION_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:150];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:150 categoryIdentifier:18 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierClinicalNoteRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_clinical_notes" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CLINICAL_NOTES_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Notes" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:268];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:268 categoryIdentifier:30 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierChillsMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_CHILLS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:231];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:231 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F930 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierChestTightnessOrPainMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_CHEST_TIGHTNESS_OR_PAIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:205];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:205 categoryIdentifier:26 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCervicalMucusQualityMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CERVICAL_MUCUS_QUALITY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:91];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:91 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCardioFitnessMedicationsUseMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CARDIO_FITNESS_MEDICATIONS_USE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:218];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:218 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCDADocumentMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 0;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"CLINICAL_DOCUMENTS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:107];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:107 categoryIdentifier:9 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBreastPainMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_BREAST_PAIN" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:158];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:158 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F798 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBradycardiaEventMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v17) = 0;
  LOWORD(v17) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v17);
  double v2 = [MEMORY[0x1E4F2B860] sharedBehavior];
  char v3 = [v2 isiPad];

  uint64_t v4 = 0;
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = [HKDisplayTypeSummaryAttribution alloc];
    id v6 = HKHealthKitFrameworkBundle();
    uint64_t v7 = [v6 localizedStringForKey:@"HEART_EVENT_SUMMARY_ATTRIBUTION" value:&stru_1F3B9CF20 table:*MEMORY[0x1E4F29E40]];
    uint64_t v4 = [(HKDisplayTypeSummaryAttribution *)v5 initWithAttribution:v7 urlAttribute:@"bridge:root=NOTIFICATIONS_ID&path=com.apple.HeartRateSettings" primaryProfileOnly:0];
  }
  char v8 = [HKDisplayTypePresentation alloc];
  unsigned int v9 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:7 singleDailyValue:0];
  LOBYTE(v18) = 0;
  uint64_t v10 = MEMORY[0x1E4F1CC08];
  uint64_t v11 = [(HKDisplayTypePresentation *)v8 initWithDefaultConfiguration:v9 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v18 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v4];

  uint64_t v12 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BRADYCARDIA" labelDisplayNameKey:@"BRADYCARDIA" localizationTableNameOverride:@"Localizable-Tortuga" localizedKeySuffix:0 unitNameKeyOverrides:v10];
  uint64_t v13 = [HKDisplayType alloc];
  uint64_t v14 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:147];
  uint64_t v15 = [(HKDisplayType *)v13 initWithDisplayTypeIdentifier:147 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v14 behavior:v1 presentation:v11 localization:v12 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v15;
}

HKDisplayType *HKDisplayTypeIdentifierBodyTemperatureMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"degF"];
  char v3 = [v1 quantityWithUnit:v2 doubleValue:97.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"degF"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:100.0];
  uint64_t v7 = +[HKValueRange valueRangeWithMinValue:v3 maxValue:v6];
  char v8 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v7 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  uint64_t v10 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v21) = 0;
  uint64_t v13 = MEMORY[0x1E4F1CC08];
  uint64_t v14 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v21 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v10];

  uint64_t v15 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BODY_TEMPERATURE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v13];
  uint64_t v16 = [HKDisplayType alloc];
  uint64_t v17 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:62];
  uint64_t v18 = [(HKDisplayType *)v16 initWithDisplayTypeIdentifier:62 categoryIdentifier:1 secondaryCategoryIdentifiers:&unk_1F3C1F6C0 objectType:v17 behavior:v9 presentation:v14 localization:v15 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierBodyMassMake()
{
  v32[1] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:2];
  uint64_t v1 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  uint64_t v31 = v1;
  double v2 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  v32[0] = v2;
  char v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:&v31 count:1];
  [(HKDisplayTypeChartingRules *)v30 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:v3];

  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:20.0];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  unsigned int v9 = [v7 quantityWithUnit:v8 doubleValue:0.0];
  uint64_t v10 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  uint64_t v12 = [v10 quantityWithUnit:v11 doubleValue:0.0];
  uint64_t v13 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v14 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
  uint64_t v15 = [v13 quantityWithUnit:v14 doubleValue:150.0];
  uint64_t v16 = +[HKValueRange valueRangeWithMinValue:v12 maxValue:v15];
  uint64_t v17 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v6 minimumValue:v9 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v16];
  [(HKDisplayTypeChartingRules *)v30 setAxisScalingRule:v17];

  BYTE2(v28) = 0;
  LOWORD(v28) = 256;
  uint64_t v18 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v28);
  uint64_t v19 = [HKDisplayTypePresentation alloc];
  uint64_t v20 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v29) = 0;
  uint64_t v21 = MEMORY[0x1E4F1CC08];
  uint64_t v22 = [(HKDisplayTypePresentation *)v19 initWithDefaultConfiguration:v20 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v29 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v23 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BODY_MASS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v21];
  uint64_t v24 = [HKDisplayType alloc];
  uint64_t v25 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:3];
  uint64_t v26 = [(HKDisplayType *)v24 initWithDisplayTypeIdentifier:3 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v25 behavior:v18 presentation:v22 localization:v23 chartingRules:v30 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v26;
}

HKDisplayType *HKDisplayTypeIdentifierBodyMassIndexMake()
{
  v28[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:2.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  uint64_t v10 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Heart, Lung, and Blood Institute" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v24) = 0;
  uint64_t v13 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v24 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v10];

  uint64_t v14 = [HKDisplayTypeLocalization alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v25 = &unk_1F3C22168;
  uint64_t v26 = @"BMI";
  uint64_t v27 = v15;
  uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  v28[0] = v16;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:&v27 count:1];
  uint64_t v18 = [(HKDisplayTypeLocalization *)v14 initWithDisplayNameKey:@"BODY_MASS_INDEX" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v17];

  uint64_t v19 = [HKDisplayType alloc];
  uint64_t v20 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:0];
  uint64_t v21 = [(HKDisplayType *)v19 initWithDisplayTypeIdentifier:0 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v20 behavior:v9 presentation:v13 localization:v18 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierBodyFatPercentageMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:1];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:4.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v4 minimumValue:v7 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  uint64_t v10 = [HKDisplayTypePresentation alloc];
  uint64_t v11 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v20) = 0;
  uint64_t v12 = MEMORY[0x1E4F1CC08];
  uint64_t v13 = [(HKDisplayTypePresentation *)v10 initWithDefaultConfiguration:v11 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v20 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v14 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BODY_FAT_PERCENTAGE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v12];
  uint64_t v15 = [HKDisplayType alloc];
  uint64_t v16 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:1];
  uint64_t v17 = [(HKDisplayType *)v15 initWithDisplayTypeIdentifier:1 categoryIdentifier:6 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v16 behavior:v9 presentation:v13 localization:v14 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierBloodTypeMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BLOOD_TYPE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:66];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:66 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBloodPressureMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:3 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"mmHg"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:60.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"mmHg"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:160.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v21) = 0;
  LOWORD(v21) = 256;
  uint64_t v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v21);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"National Heart, Lung, and Blood Institute" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:10 singleDailyValue:0];
  LOBYTE(v22) = 0;
  uint64_t v14 = MEMORY[0x1E4F1CC08];
  uint64_t v15 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v22 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v16 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BLOOD_PRESSURE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v14];
  uint64_t v17 = [HKDisplayType alloc];
  uint64_t v18 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:80];
  uint64_t v19 = [(HKDisplayType *)v17 initWithDisplayTypeIdentifier:80 categoryIdentifier:11 secondaryCategoryIdentifiers:&unk_1F3C1F708 objectType:v18 behavior:v10 presentation:v15 localization:v16 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v19;
}

HKDisplayType *HKDisplayTypeIdentifierBloodAlcoholContentMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:3 chartingOptions:16 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:3];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.1];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v21) = 0;
  LOWORD(v21) = 256;
  uint64_t v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v21);
  uint64_t v11 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"Mayo Clinic" urlAttribute:@"http://www.mayoclinic.org/" primaryProfileOnly:0];
  uint64_t v12 = [HKDisplayTypePresentation alloc];
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  LOBYTE(v22) = 0;
  uint64_t v14 = MEMORY[0x1E4F1CC08];
  uint64_t v15 = [(HKDisplayTypePresentation *)v12 initWithDefaultConfiguration:v13 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v22 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v11];

  uint64_t v16 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BLOOD_ALCOHOL_CONTENT" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v14];
  uint64_t v17 = [HKDisplayType alloc];
  uint64_t v18 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:18];
  uint64_t v19 = [(HKDisplayType *)v17 initWithDisplayTypeIdentifier:18 categoryIdentifier:14 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v18 behavior:v10 presentation:v15 localization:v16 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v19;
}

HKDisplayType *HKDisplayTypeIdentifierBloatingMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_BLOATING" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:159];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:159 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F7B0 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBleedingDuringPregnancyMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:6 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BLEEDING_DURING_PREGNANCY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:313];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:313 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBleedingAfterPregnancyMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:10 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:6 secondaryValue:3 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BLEEDING_AFTER_PREGNANCY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:314];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:314 categoryIdentifier:8 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBladderIncontinenceMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_BLADDER_INCONTINENCE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:234];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:234 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F978 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBiologicalSexMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"BIOLOGICAL_SEX" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:64];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:64 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBasalEnergyBurnedMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  uint64_t v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:50.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  uint64_t v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:2 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"BASAL_ENERGY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:9];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:9 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierBasalBodyTemperatureMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  [(HKDisplayTypeChartingRules *)v0 setChartStyle:3 forTimeScope:2];
  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  double v2 = [MEMORY[0x1E4F2B618] unitFromString:@"degF"];
  char v3 = [v1 quantityWithUnit:v2 doubleValue:97.0];
  uint64_t v4 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v5 = [MEMORY[0x1E4F2B618] unitFromString:@"degF"];
  id v6 = [v4 quantityWithUnit:v5 doubleValue:100.0];
  uint64_t v7 = +[HKValueRange valueRangeWithMinValue:v3 maxValue:v6];
  char v8 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v7 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v8];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  unsigned int v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v10 = [[HKDisplayTypeSummaryAttribution alloc] initWithAttribution:@"NIH MedlinePlus" urlAttribute:0 primaryProfileOnly:0];
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:3 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C221B0;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:1 detailChart:1 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v10];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"BASAL_BODY_TEMPERATURE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:90];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:90 categoryIdentifier:8 secondaryCategoryIdentifiers:&unk_1F3C1F720 objectType:v19 behavior:v9 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierAtrialFibrillationEventMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  double v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  char v3 = [MEMORY[0x1E4F2B860] sharedBehavior];
  char v4 = [v3 isiPad];

  uint64_t v5 = 0;
  if ((v4 & 1) == 0)
  {
    id v6 = [HKDisplayTypeSummaryAttribution alloc];
    uint64_t v7 = HKHealthKitFrameworkBundle();
    char v8 = [v7 localizedStringForKey:@"HEART_EVENT_SUMMARY_ATTRIBUTION" value:&stru_1F3B9CF20 table:*MEMORY[0x1E4F29E40]];
    uint64_t v5 = [(HKDisplayTypeSummaryAttribution *)v6 initWithAttribution:v8 urlAttribute:@"bridge:root=NOTIFICATIONS_ID&path=com.apple.HeartRateSettings" primaryProfileOnly:0];
  }
  unsigned int v9 = [HKDisplayTypePresentation alloc];
  uint64_t v10 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:7 singleDailyValue:0];
  LOBYTE(v19) = 0;
  uint64_t v11 = MEMORY[0x1E4F1CC08];
  uint64_t v12 = [(HKDisplayTypePresentation *)v9 initWithDefaultConfiguration:v10 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v19 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:v5];

  uint64_t v13 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ATRIAL_FIBRILLATION_EVENT" labelDisplayNameKey:@"ATRIAL_FIBRILLATION_EVENT" localizationTableNameOverride:@"Localizable-Antimony" localizedKeySuffix:0 unitNameKeyOverrides:v11];
  uint64_t v14 = [HKDisplayType alloc];
  uint64_t v15 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:156];
  uint64_t v16 = [(HKDisplayType *)v14 initWithDisplayTypeIdentifier:156 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v15 behavior:v2 presentation:v12 localization:v13 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierAtrialFibrillationBurdenMake()
{
  uint64_t v28 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:1 preferredTimeScope:5];
  double v0 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v28 setAllowedDecimalPrecisionRule:v0 perUnitPrecisionRules:0];

  uint64_t v1 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v27 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v26 = [v1 quantityWithUnit:v27 doubleValue:0.0];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  char v4 = [v2 quantityWithUnit:v3 doubleValue:100.0];
  uint64_t v5 = +[HKValueRange valueRangeWithMinValue:v26 maxValue:v4];
  id v6 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  char v8 = [v6 quantityWithUnit:v7 doubleValue:0.0];
  unsigned int v9 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v10 = [MEMORY[0x1E4F2B618] unitFromString:@"%"];
  uint64_t v11 = [v9 quantityWithUnit:v10 doubleValue:100.0];
  uint64_t v12 = +[HKValueRange valueRangeWithMinValue:v8 maxValue:v11];
  uint64_t v13 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v5 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:v12];
  [(HKDisplayTypeChartingRules *)v28 setAxisScalingRule:v13];

  BYTE2(v24) = 0;
  LOWORD(v24) = 256;
  uint64_t v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v24);
  uint64_t v15 = [HKDisplayTypePresentation alloc];
  uint64_t v16 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:3 singleDailyValue:0];
  LOBYTE(v25) = 0;
  uint64_t v17 = MEMORY[0x1E4F1CC08];
  uint64_t v18 = [(HKDisplayTypePresentation *)v15 initWithDefaultConfiguration:v16 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:100.0 isCriticalForAutoscale:v25 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v19 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ATRIAL_FIBRILLATION_BURDEN" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-AFibBurden" localizedKeySuffix:0 unitNameKeyOverrides:v17];
  uint64_t v20 = [HKDisplayType alloc];
  uint64_t v21 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:248];
  uint64_t v22 = [(HKDisplayType *)v20 initWithDisplayTypeIdentifier:248 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v21 behavior:v14 presentation:v18 localization:v19 chartingRules:v28 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v22;
}

HKDisplayType *HKDisplayTypeIdentifierAppleWalkingSteadinessEventMake()
{
  v20[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  double v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  char v3 = [HKDisplayTypePresentation alloc];
  char v4 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:4 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v16) = 0;
  uint64_t v5 = [(HKDisplayTypePresentation *)v3 initWithDefaultConfiguration:v4 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v16 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [HKDisplayTypeLocalization alloc];
  uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v17 = &unk_1F3C22168;
  uint64_t v18 = &stru_1F3B9CF20;
  uint64_t v19 = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  v20[0] = v8;
  unsigned int v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:&v19 count:1];
  uint64_t v10 = [(HKDisplayTypeLocalization *)v6 initWithDisplayNameKey:@"WALKING_STEADINESS_EVENT" labelDisplayNameKey:@"WALKING_STEADINESS_EVENT" localizationTableNameOverride:@"Localizable-WalkingSteadiness" localizedKeySuffix:0 unitNameKeyOverrides:v9];

  uint64_t v11 = [HKDisplayType alloc];
  uint64_t v12 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:250];
  uint64_t v13 = [(HKDisplayType *)v11 initWithDisplayTypeIdentifier:250 categoryIdentifier:23 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v12 behavior:v2 presentation:v5 localization:v10 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierAppleStandTimeMake()
{
  v25[1] = *MEMORY[0x1E4F143B8];
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:4 chartingOptions:0 preferredTimeScope:5];
  uint64_t v1 = [[HKStaticDecimalPrecisionRule alloc] initWithDecimalPrecision:0];
  [(HKDisplayTypeChartingRules *)v0 setAllowedDecimalPrecisionRule:v1 perUnitPrecisionRules:0];

  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  char v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"min"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:60.0];
  char v8 = +[HKValueRange valueRangeWithMinValue:v4 maxValue:v7];
  unsigned int v9 = +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:v8 axisBoundsOverrides:0 minimumValue:0 maximumValue:0 noDataAxisBounds:0];
  [(HKDisplayTypeChartingRules *)v0 setAxisScalingRule:v9];

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  uint64_t v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  uint64_t v11 = [HKDisplayTypePresentation alloc];
  uint64_t v12 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:1 detailChart:4 singleDailyValue:0];
  uint64_t v24 = &unk_1F3C22180;
  uint64_t v13 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:2 secondaryValue:0 detailChart:4 singleDailyValue:0];
  v25[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v25 forKeys:&v24 count:1];
  LOBYTE(v23) = 0;
  uint64_t v15 = [(HKDisplayTypePresentation *)v11 initWithDefaultConfiguration:v12 configurationOverrides:v14 scaleFactor:1 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v23 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v16 = [HKDisplayTypeLocalization alloc];
  uint64_t v17 = [(HKDisplayTypeLocalization *)v16 initWithDisplayNameKey:@"STAND_MINUTE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:MEMORY[0x1E4F1CC08]];
  uint64_t v18 = [HKDisplayType alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:186];
  uint64_t v20 = [(HKDisplayType *)v18 initWithDisplayTypeIdentifier:186 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v19 behavior:v10 presentation:v15 localization:v17 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierAppleSleepingBreathingDisturbancesMake()
{
  v34[1] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  double v0 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v29 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v1 = [v0 quantityWithUnit:v29 doubleValue:22.0];
  double v2 = (void *)MEMORY[0x1E4F2B370];
  char v3 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  char v4 = [v2 quantityWithUnit:v3 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  id v6 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v7 = [v5 quantityWithUnit:v6 doubleValue:0.0];
  char v8 = (void *)MEMORY[0x1E4F2B370];
  unsigned int v9 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v10 = [v8 quantityWithUnit:v9 doubleValue:22.0];
  uint64_t v11 = +[HKValueRange valueRangeWithMinValue:v7 maxValue:v10];
  uint64_t v12 = (void *)v1;
  uint64_t v13 = +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:v1 minimumValue:v4 maximumValue:0 axisRangeOverrides:0 noDataAxisBounds:v11];
  [(HKDisplayTypeChartingRules *)v30 setAxisScalingRule:v13];

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  uint64_t v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 1, 1, 0, 0, 1, v27);
  uint64_t v15 = [HKDisplayTypePresentation alloc];
  uint64_t v16 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:2 detailChart:3 singleDailyValue:0];
  LOBYTE(v28) = 0;
  uint64_t v17 = [(HKDisplayTypePresentation *)v15 initWithDefaultConfiguration:v16 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v28 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  uint64_t v18 = [HKDisplayTypeLocalization alloc];
  uint64_t v19 = [MEMORY[0x1E4F2B618] unitFromString:@"count"];
  uint64_t v31 = &unk_1F3C22168;
  uint64_t v32 = @"SLEEP_BREATHING_DISTURBANCES";
  uint64_t v33 = v19;
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
  v34[0] = v20;
  uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v34 forKeys:&v33 count:1];
  uint64_t v22 = [(HKDisplayTypeLocalization *)v18 initWithDisplayNameKey:@"SLEEP_BREATHING_DISTURBANCES" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Nebula" localizedKeySuffix:0 unitNameKeyOverrides:v21];

  uint64_t v23 = [HKDisplayType alloc];
  uint64_t v24 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:275];
  uint64_t v25 = [(HKDisplayType *)v23 initWithDisplayTypeIdentifier:275 categoryIdentifier:13 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v24 behavior:v14 presentation:v17 localization:v22 chartingRules:v30 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierAppetiteChangesMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_APPETITE_CHANGES" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:170];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:170 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F8B8 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierAllergyRecordMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:@"health_records_allergies" summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ALLERGY_RECORDS" labelDisplayNameKey:0 localizationTableNameOverride:@"Localizable-Clinical-Health-Records" localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:149];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:149 categoryIdentifier:16 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierActivitySummaryMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:7 chartingOptions:0 preferredTimeScope:6];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:11 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ACTIVITY_SUMMARY" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:100];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:100 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierActivityMoveModeMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"ACTIVITY_MOVE_MODE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:177];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:177 categoryIdentifier:7 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierAcneMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_ACNE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:161];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:161 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F7E0 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierAbdominalCrampsMake()
{
  double v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:8 chartingOptions:2 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  double v2 = [HKDisplayTypePresentation alloc];
  char v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:1 secondaryValue:0 detailChart:9 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"SYMPTOM_ABDOMINAL_CRAMPS" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  uint64_t v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:157];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:157 categoryIdentifier:26 secondaryCategoryIdentifiers:&unk_1F3C1F780 objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

void sub_1E0B5CDC0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1E0B5CE0C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBC840] + 8);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for HKWidthDesignation(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for HKTraitWidthDesignation()
{
  return &type metadata for HKTraitWidthDesignation;
}

uint64_t sub_1E0B5CE98(uint64_t a1, uint64_t a2)
{
  return sub_1E0B2A68C(a1, a2, &qword_1EAD69868, &qword_1EAD698A8);
}

uint64_t sub_1E0B5CEC0(uint64_t a1, uint64_t a2)
{
  return sub_1E0B2A68C(a1, a2, &qword_1EAD698A0, &qword_1EAD69890);
}

void sub_1E0B5CEE8(uint64_t a1)
{
}

void sub_1E0B5CF00(uint64_t a1)
{
}

uint64_t _ValidateQuantity(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11 = (void *)MEMORY[0x1E4F2B618];
  id v12 = a1;
  uint64_t v13 = [v11 unitFromString:a2];
  [v12 doubleValueForUnit:v13];
  double v15 = v14;

  BOOL v16 = v15 > a6 || v15 < a5;
  if (v15 > a4 || v15 < a3) {
    return 2;
  }
  else {
    return v16;
  }
}

void sub_1E0B5FB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  objc_destroyWeak(v24);
  _Block_object_dispose(&a24, 8);
  objc_destroyWeak((id *)(v25 - 72));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1E0B5FCC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_1()
{
  return objc_opt_class();
}

id OUTLINED_FUNCTION_2(id a1)
{
  return a1;
}

id HKUILogCharting()
{
  if (HKUILogCharting_onceToken != -1) {
    dispatch_once(&HKUILogCharting_onceToken, &__block_literal_global_0);
  }
  uint64_t v0 = (void *)HKUILogCharting_category;
  return v0;
}

uint64_t __HKUILogCharting_block_invoke()
{
  HKUILogCharting_category = (uint64_t)os_log_create("com.apple.HealthKit", "charting");
  return MEMORY[0x1F41817F8]();
}

uint64_t HKCodableHealthRecordsLocalizedEducationContentReadFrom(void *a1, uint64_t a2)
{
  char v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableHealthRecordsLocalizedEducationContentSection);
        [a1 addSections:v17];
        if (!PBReaderPlaceMark()
          || (HKCodableHealthRecordsLocalizedEducationContentSectionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _GenerateDateFormatterLongMonthHeader()
{
  uint64_t v0 = (void *)_GenerateDateFormatterLongMonthHeader___formatter;
  if (!_GenerateDateFormatterLongMonthHeader___formatter)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    double v2 = (void *)_GenerateDateFormatterLongMonthHeader___formatter;
    _GenerateDateFormatterLongMonthHeader___formatter = (uint64_t)v1;

    [(id)_GenerateDateFormatterLongMonthHeader___formatter setLocalizedDateFormatFromTemplate:@"LLLL"];
    uint64_t v0 = (void *)_GenerateDateFormatterLongMonthHeader___formatter;
  }
  return v0;
}

id _GenerateDateFormatterShortMonthHeader()
{
  uint64_t v0 = (void *)_GenerateDateFormatterShortMonthHeader___formatter;
  if (!_GenerateDateFormatterShortMonthHeader___formatter)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    double v2 = (void *)_GenerateDateFormatterShortMonthHeader___formatter;
    _GenerateDateFormatterShortMonthHeader___formatter = (uint64_t)v1;

    [(id)_GenerateDateFormatterShortMonthHeader___formatter setLocalizedDateFormatFromTemplate:@"LLL"];
    uint64_t v0 = (void *)_GenerateDateFormatterShortMonthHeader___formatter;
  }
  return v0;
}

id _GenerateDateFormatterDayMonthDateHourMinute()
{
  uint64_t v0 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
  if (!_GenerateDateFormatterDayMonthDateHourMinute___formatter)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    double v2 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
    _GenerateDateFormatterDayMonthDateHourMinute___formatter = (uint64_t)v1;

    char v3 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
    unint64_t v4 = CPDateFormatStringForFormatType();
    [v3 setLocalizedDateFormatFromTemplate:v4];

    uint64_t v0 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
  }
  return v0;
}

id _GenerateDateFormatterDayMonthDateHour()
{
  uint64_t v0 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
  if (!_GenerateDateFormatterDayMonthDateHour___formatter)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    double v2 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
    _GenerateDateFormatterDayMonthDateHour___formatter = (uint64_t)v1;

    char v3 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
    unint64_t v4 = CPDateFormatStringForFormatType();
    [v3 setLocalizedDateFormatFromTemplate:v4];

    uint64_t v0 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
  }
  return v0;
}

id HKLocalizedStringForDateAndTemplate(void *a1, uint64_t a2)
{
  id v3 = a1;
  unint64_t v4 = HKDateFormatterFromTemplate(a2);
  uint64_t v5 = [v4 stringFromDate:v3];

  return v5;
}

uint64_t HKTodayDayFormatterNeeded(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 isDateInToday:v3] & 1) != 0 || (objc_msgSend(v4, "isDateInYesterday:", v3)) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = [v4 isDateInTomorrow:v3];
  }

  return v5;
}

id HKLastUpdatedText(void *a1, void *a2)
{
  return HKLastUpdatedTextWithOptions(a1, a2, 1);
}

id HKLastUpdatedTextWithOptions(void *a1, void *a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (v5)
  {
    if (HKTodayDayFormatterNeeded(v5, a2))
    {
      if (a3) {
        uint64_t v7 = 35;
      }
      else {
        uint64_t v7 = 36;
      }
    }
    else
    {
      unsigned int v9 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      unint64_t v10 = [MEMORY[0x1E4F1C9C8] date];
      uint64_t v11 = [v9 component:4 fromDate:v10];

      unint64_t v12 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      uint64_t v13 = [v12 component:4 fromDate:v6];

      uint64_t v14 = 12;
      if (a3) {
        uint64_t v14 = 39;
      }
      uint64_t v15 = 9;
      if (a3) {
        uint64_t v15 = 38;
      }
      if (v13 == v11) {
        uint64_t v7 = v14;
      }
      else {
        uint64_t v7 = v15;
      }
    }
    BOOL v16 = HKDateFormatterFromTemplate(v7);
    char v8 = [v16 stringFromDate:v6];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

BOOL HKMinuteFormatterNeeded(uint64_t a1, void *a2)
{
  double v2 = [a2 components:96 fromDate:a1];
  BOOL v3 = [v2 minute] != 0;

  return v3;
}

id HKMinimalHourIntervalText(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 startDate];
  if (HKMinuteFormatterNeeded((uint64_t)v5, v4))
  {

LABEL_4:
    char v8 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_hourMinuteOnlyDateIntervalFormatter");
    goto LABEL_6;
  }
  uint64_t v6 = [v3 endDate];
  BOOL v7 = HKMinuteFormatterNeeded((uint64_t)v6, v4);

  if (v7) {
    goto LABEL_4;
  }
  char v8 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_hourOnlyDateIntervalFormatter");
LABEL_6:
  unsigned int v9 = v8;
  unint64_t v10 = [v8 stringFromDateInterval:v3];

  return v10;
}

id HKLastUpdatedIntervalText(void *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a3;
  unsigned int v9 = [v7 startDate];
  uint64_t v10 = [v7 endDate];
  uint64_t v11 = (void *)v10;
  unint64_t v12 = 0;
  if (!v9 || !v10) {
    goto LABEL_67;
  }
  char v62 = a4;
  v68 = v7;
  uint64_t v13 = +[HKValueRange valueRangeWithMinValue:v9 maxValue:v10];
  uint64_t v14 = v11;
  uint64_t v69 = HKUIMidDate(v9, v11);
  uint64_t v15 = +[HKValueRange valueRangeWithMinValue:v69 maxValue:v69];
  v66 = v8;
  BOOL v16 = [v8 calendar];
  v74 = (void *)v15;
  uint64_t v75 = a2;
  v73 = +[HKGraphZoomLevelConfiguration chartDataRangeForTimeScope:dataRange:firstWeekday:calendar:cadence:alignment:](HKGraphZoomLevelConfiguration, "chartDataRangeForTimeScope:dataRange:firstWeekday:calendar:cadence:alignment:", a2, v15, [v16 firstWeekday], v16, 1, 3);
  v67 = (void *)v13;
  int v64 = [v73 isEqual:v13];
  id v76 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  uint64_t v17 = [&unk_1F3C1F0A8 countByEnumeratingWithState:&v77 objects:v81 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v78;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v78 != v19) {
          objc_enumerationMutation(&unk_1F3C1F0A8);
        }
        uint64_t v21 = [*(id *)(*((void *)&v77 + 1) + 8 * i) unsignedIntegerValue];
        uint64_t v22 = v9;
        uint64_t v23 = [v16 component:v21 fromDate:v9];
        if (v23 == [v16 component:v21 fromDate:v14]) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        unsigned int v9 = v22;
        [v76 setValue:v24 forComponent:v21];
      }
      uint64_t v18 = [&unk_1F3C1F0A8 countByEnumeratingWithState:&v77 objects:v81 count:16];
    }
    while (v18);
  }
  uint64_t v25 = [v76 era];
  BOOL v27 = [v76 year] != 0x7FFFFFFFFFFFFFFFLL && v25 != 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v28 = [MEMORY[0x1E4F1C9C8] distantFuture];
  uint64_t v11 = v14;
  int v29 = objc_msgSend(v14, "hk_isAfterOrEqualToDate:", v28);

  uint64_t v30 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  uint64_t v31 = [v30 startOfDayForDate:v9];
  v72 = v30;
  if ([v9 isEqualToDate:v31])
  {
    [v30 startOfDayForDate:v14];
    v33 = uint64_t v32 = v9;
    int v34 = [v14 isEqualToDate:v33];

    unsigned int v9 = v32;
    uint64_t v35 = (void *)v69;
    if (v34)
    {
      uint64_t v36 = [MEMORY[0x1E4F1C9A8] currentCalendar];
      uint64_t v37 = [v36 dateByAddingUnit:128 value:-1 toDate:v11 options:0];

      id v38 = (id)v37;
      goto LABEL_24;
    }
  }
  else
  {

    uint64_t v35 = (void *)v69;
  }
  id v38 = v11;
LABEL_24:
  a2 = v75;
  switch(v75)
  {
    case 0:
    case 1:
      v39 = v67;
      id v7 = v68;
      if (v29)
      {
        id v40 = v9;
        uint64_t v41 = 1;
        goto LABEL_42;
      }
      objc_msgSend(MEMORY[0x1E4F28C20], "hk_yearIntervalFormatter");
      v52 = id v51 = v38;
      unint64_t v12 = [v52 stringFromDate:v9 toDate:v11];

      id v38 = v51;
      goto LABEL_51;
    case 2:
      v39 = v67;
      id v7 = v68;
      if (v29)
      {
        id v40 = v9;
        uint64_t v41 = 7;
LABEL_42:
        unint64_t v12 = _FormatOngoingRangeFrom(v40, v41);
LABEL_51:
        id v8 = v66;
        goto LABEL_66;
      }
      id v70 = v38;
      id v8 = v66;
      if (v64)
      {
        uint64_t v47 = 1;
        goto LABEL_61;
      }
      v58 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_monthIntervalFormatter");
      uint64_t v59 = [v58 stringFromDate:v9 toDate:v11];
      goto LABEL_63;
    case 3:
    case 4:
      char v42 = v64 ^ 1;
      if (v75 != 4) {
        char v42 = 1;
      }
      if (v42) {
        goto LABEL_31;
      }
      _performNSDateFormatterInitializationBlock(&__block_literal_global_710);
      v44 = id v43 = v38;
      uint64_t v45 = [v44 stringFromDate:v9];
      goto LABEL_35;
    case 5:
LABEL_31:
      if (v27 || !v29)
      {
        objc_msgSend(MEMORY[0x1E4F28C20], "hk_dayIntervalFormatter");
        v44 = id v43 = v38;
        uint64_t v45 = [v44 stringFromDate:v9 toDate:v43];
LABEL_35:
        unint64_t v12 = (void *)v45;

        id v38 = v43;
      }
      else
      {
        unint64_t v12 = _FormatOngoingRangeFrom(v9, 9);
      }
LABEL_37:
      id v7 = v68;
      goto LABEL_38;
    case 6:
      char v46 = v64 ^ 1;
      if ((v62 & 2) != 0) {
        char v46 = 0;
      }
      id v7 = v68;
      if (v46)
      {
        id v8 = v66;
        v39 = v67;
        if (v29) {
          _FormatOngoingRangeFrom(v9, 38);
        }
        else {
        unint64_t v12 = HKRelativeDateIntervalText(v68, v66);
        }
      }
      else
      {
        id v70 = v38;
        id v8 = v66;
        v39 = v67;
        if (HKTodayDayFormatterNeeded(v9, v66)) {
          uint64_t v47 = 36;
        }
        else {
          uint64_t v47 = 42;
        }
LABEL_61:
        v58 = HKDateFormatterFromTemplate(v47);
        uint64_t v59 = [v58 stringFromDate:v9];
LABEL_63:
        unint64_t v12 = (void *)v59;

        id v38 = v70;
      }
LABEL_66:

      break;
    case 7:
      char v48 = objc_msgSend(v16, "hk_isDate:withinNumberOfCalendarDays:ofDate:", v9, 0, v11);
      id v7 = v68;
      if ((~v62 & 3) != 0)
      {
        char v53 = v48 ^ 1;
        if ((v62 & 2) != 0) {
          char v53 = 0;
        }
        id v8 = v66;
        if (v53)
        {
          if (v29) {
            _FormatOngoingRangeFrom(v9, 38);
          }
          else {
          unint64_t v12 = HKRelativeDateIntervalText(v68, v66);
          }
        }
        else
        {
          v65 = HKRelativeMonthDateYearText(v9, v66, 0);
          HKMinimalHourIntervalText(v68, v16);
          v63 = id v71 = v38;
          v54 = NSString;
          v55 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
          [v55 localizedStringForKey:@"DATE_SELECTION_%@_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
          v57 = v56 = v9;
          unint64_t v12 = objc_msgSend(v54, "stringWithFormat:", v57, v65, v63);

          unsigned int v9 = v56;
          a2 = v75;

          id v38 = v71;
        }
      }
      else
      {
        HKDateFormatterFromTemplate(36);
        v50 = id v49 = v38;
        unint64_t v12 = [v50 stringFromDate:v9];

        id v38 = v49;
LABEL_38:
        id v8 = v66;
      }
      v39 = v67;
      goto LABEL_66;
    default:
      unint64_t v12 = 0;
      goto LABEL_37;
  }
LABEL_67:
  if (v7 && !v12)
  {
    if (a2 == 6) {
      objc_msgSend(MEMORY[0x1E4F28C20], "hk_hourDateIntervalFormatter");
    }
    else {
    v60 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_dayIntervalFormatter");
    }
    unint64_t v12 = [v60 stringFromDateInterval:v7];
  }
  return v12;
}

id _FormatOngoingRangeFrom(void *a1, uint64_t a2)
{
  double v2 = HKLocalizedStringForDateAndTemplate(a1, a2);
  id v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v4 = [v3 localizedStringForKey:@"ONGOING_DATE" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

  id v5 = NSString;
  uint64_t v6 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v7 = [v6 localizedStringForKey:@"DATE_RANGE %@ %@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  id v8 = objc_msgSend(v5, "stringWithFormat:", v7, v2, v4);

  return v8;
}

id HKRelativeDateIntervalText(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 startDate];
  int v6 = HKTodayDayFormatterNeeded(v5, v4);

  id v7 = [v3 startDate];
  id v8 = v7;
  if (v6)
  {
    uint64_t v9 = HKRelativeMonthDateYearText(v7, v4, 0);

    uint64_t v10 = [v3 endDate];
    uint64_t v11 = HKRelativeMonthDateYearText(v10, v4, 0);
  }
  else
  {
    if ([v4 isDateInThisCalendarYear:v7]) {
      uint64_t v12 = 12;
    }
    else {
      uint64_t v12 = 9;
    }

    uint64_t v13 = [v3 startDate];
    uint64_t v9 = HKLocalizedStringForDateAndTemplate(v13, v12);

    uint64_t v10 = [v3 endDate];
    uint64_t v11 = HKLocalizedStringForDateAndTemplate(v10, v12);
  }
  uint64_t v37 = (void *)v11;

  uint64_t v14 = [v4 calendar];
  uint64_t v15 = [v3 startDate];
  BOOL v16 = [v14 components:30 fromDate:v15];

  uint64_t v17 = [v4 calendar];
  uint64_t v18 = [v3 endDate];
  id v38 = [v17 components:30 fromDate:v18];

  uint64_t v19 = [v3 startDate];
  uint64_t v20 = [v4 calendar];
  if (HKMinuteFormatterNeeded((uint64_t)v19, v20))
  {
    uint64_t v21 = 27;
  }
  else
  {
    uint64_t v22 = [v3 endDate];
    uint64_t v23 = [v4 calendar];
    if (HKMinuteFormatterNeeded((uint64_t)v22, v23)) {
      uint64_t v21 = 27;
    }
    else {
      uint64_t v21 = 23;
    }
  }
  uint64_t v24 = [v3 startDate];
  uint64_t v25 = HKLocalizedStringForDateAndTemplate(v24, v21);

  uint64_t v26 = [v3 endDate];
  BOOL v27 = HKLocalizedStringForDateAndTemplate(v26, v21);

  uint64_t v28 = v16;
  LODWORD(v26) = [v16 isEqual:v38];
  int v29 = NSString;
  uint64_t v30 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v31 = v30;
  if (v26)
  {
    uint64_t v32 = [v30 localizedStringForKey:@"DATE_SELECTION_LONG_%@_%@_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    uint64_t v33 = objc_msgSend(v29, "stringWithFormat:", v32, v9, v25, v27);
    int v34 = (void *)v9;
    uint64_t v35 = v37;
  }
  else
  {
    uint64_t v32 = [v30 localizedStringForKey:@"DATE_SELECTION_LONG_DIFFERENT_DATE_%@_%@_%@_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    int v34 = (void *)v9;
    uint64_t v35 = v37;
    uint64_t v33 = objc_msgSend(v29, "stringWithFormat:", v32, v34, v25, v37, v27);
  }

  return v33;
}

id HKRelativeMonthDateYearText(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (v5)
  {
    if (HKTodayDayFormatterNeeded(v5, v6))
    {
      uint64_t v7 = 36;
    }
    else
    {
      if (a3) {
        int v9 = [v6 isDateWithinLastRollingYear:v5];
      }
      else {
        int v9 = [v6 isDateInThisCalendarYear:v5];
      }
      if (v9) {
        uint64_t v7 = 12;
      }
      else {
        uint64_t v7 = 9;
      }
    }
    id v8 = HKLocalizedStringForDateAndTemplate(v5, v7);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id HKUpperStringForAnnotationDateWithTimeScope(uint64_t a1, void *a2, unint64_t a3)
{
  if (a1)
  {
    id v4 = [a2 dateFromComponents:a1];
    id v5 = v4;
    if (a3 > 8)
    {
      id v6 = 0;
    }
    else
    {
      id v6 = HKLocalizedStringForDateAndTemplate(v4, qword_1E0F05318[a3]);
    }
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

id HKLowerStringForAnnotationDateWithTimeScope(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v7 = [v5 dateFromComponents:a1];
    id v8 = v7;
    switch(a3)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        uint64_t v9 = 1;
        goto LABEL_4;
      case 6:
        uint64_t v12 = [v6 dateByAddingUnit:32 value:1 toDate:v7 options:0];
        uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_hourDateIntervalFormatter");
        uint64_t v10 = [v13 stringFromDate:v8 toDate:v12];

        break;
      case 7:
        uint64_t v9 = 27;
LABEL_4:
        uint64_t v10 = HKLocalizedStringForDateAndTemplate(v7, v9);
        break;
      default:
        uint64_t v10 = 0;
        break;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id HKCombinedStringForAnnotationDateWithTimeScope(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1)
  {
    uint64_t v9 = [v7 dateFromComponents:a1];
    uint64_t v10 = v9;
    switch(a3)
    {
      case 0:
      case 1:
        uint64_t v11 = 1;
        goto LABEL_11;
      case 2:
        uint64_t v11 = 7;
        goto LABEL_11;
      case 3:
      case 4:
        goto LABEL_10;
      case 5:
        if (a4 == 2) {
          goto LABEL_10;
        }
        if (a4 == 1)
        {
          uint64_t v14 = objc_msgSend(v8, "hk_startOfHourForDate:moduloHours:addingModuloCount:", v9, 6, 0);
          uint64_t v15 = objc_msgSend(v8, "hk_startOfHourForDate:moduloHours:addingModuloCount:", v10, 6, 1);
          BOOL v16 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_hourDateIntervalWithDateFormatter");
          uint64_t v12 = [v16 stringFromDate:v14 toDate:v15];

LABEL_19:
        }
        else if (a4)
        {
LABEL_16:
          uint64_t v12 = 0;
        }
        else
        {
LABEL_10:
          uint64_t v11 = 9;
LABEL_11:
          uint64_t v12 = HKLocalizedStringForDateAndTemplate(v9, v11);
        }

        break;
      case 6:
        uint64_t v14 = [v8 dateByAddingUnit:32 value:1 toDate:v9 options:0];
        uint64_t v15 = objc_msgSend(MEMORY[0x1E4F28C20], "hk_hourDateIntervalWithDateFormatter");
        uint64_t v12 = [v15 stringFromDate:v10 toDate:v14];
        goto LABEL_19;
      case 7:
        uint64_t v11 = 33;
        goto LABEL_11;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

id HKRelativeMonthYearText(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a1;
    if ([a2 isDateInThisCalendarYear:v3]) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = 6;
    }
    id v5 = HKLocalizedStringForDateAndTemplate(v3, v4);
  }
  else
  {
    id v5 = 0;
  }
  return v5;
}

void ResetLocaleDependentFormatters()
{
}

void _performWithFormatterLock(void *a1)
{
  id v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_formatterLock);
  v1[2](v1);

  os_unfair_lock_unlock((os_unfair_lock_t)&_formatterLock);
}

void __ResetLocaleDependentFormatters_block_invoke()
{
  uint64_t v0 = (void *)__yearShortFormatter;
  __yearShortFormatter = 0;

  id v1 = (void *)__yearFormatter;
  __yearFormatter = 0;

  double v2 = (void *)__monthYearFormatter;
  __monthYearFormatter = 0;

  id v3 = (void *)__shortMonthYearFormatter;
  __shortMonthYearFormatter = 0;

  uint64_t v4 = (void *)__monthDateYearTimeFormatter;
  __monthDateYearTimeFormatter = 0;

  id v5 = (void *)__monthDateYearFormatter;
  __monthDateYearFormatter = 0;

  id v6 = (void *)__dayMonthDateYearFormatter;
  __dayMonthDateYearFormatter = 0;

  id v7 = (void *)__longDayMonthDateYearFormatter;
  __longDayMonthDateYearFormatter = 0;

  id v8 = (void *)__hourFormatter;
  __hourFormatter = 0;

  uint64_t v9 = (void *)__hourMinuteFormatter;
  __hourMinuteFormatter = 0;

  uint64_t v10 = (void *)__hourMinuteLongFormatter;
  __hourMinuteLongFormatter = 0;

  uint64_t v11 = (void *)__MMDDYYTimeFormatter;
  __MMDDYYTimeFormatter = 0;

  uint64_t v12 = (void *)__MMDDTimeFormatter;
  __MMDDTimeFormatter = 0;

  uint64_t v13 = (void *)__MMDDYYYYFormatter;
  __MMDDYYYYFormatter = 0;

  uint64_t v14 = (void *)__MDYYFormatter;
  __MDYYFormatter = 0;

  uint64_t v15 = (void *)__EMMMDYYYYFormatter;
  __EMMMDYYYYFormatter = 0;

  BOOL v16 = (void *)__dayHourFormatter;
  __dayHourFormatter = 0;

  uint64_t v17 = (void *)__dayHourMinuteFormatter;
  __dayHourMinuteFormatter = 0;

  uint64_t v18 = (void *)__hourDateIntervalFormatter;
  __hourDateIntervalFormatter = 0;

  uint64_t v19 = (void *)__hourDateIntervalWithDayFormatter;
  __hourDateIntervalWithDayFormatter = 0;

  uint64_t v20 = (void *)__hourOnlyDateIntervalFormatter;
  __hourOnlyDateIntervalFormatter = 0;

  uint64_t v21 = (void *)__hourMinuteOnlyDateIntervalFormatter;
  __hourMinuteOnlyDateIntervalFormatter = 0;

  uint64_t v22 = (void *)__dateTimeDateIntervalFormatter;
  __dateTimeDateIntervalFormatter = 0;

  uint64_t v23 = (void *)__dayDateIntervalFormatter;
  __dayDateIntervalFormatter = 0;

  uint64_t v24 = (void *)__monthDateIntervalFormatter;
  __monthDateIntervalFormatter = 0;

  uint64_t v25 = (void *)__yearDateIntervalFormatter;
  __yearDateIntervalFormatter = 0;

  uint64_t v26 = (void *)__monthDayYearDateIntervalFormatter;
  __monthDayYearDateIntervalFormatter = 0;

  BOOL v27 = (void *)__monthYearDateIntervalFormatter;
  __monthYearDateIntervalFormatter = 0;

  uint64_t v28 = (void *)__mediumMonthDayDateIntervalFormatter;
  __mediumMonthDayDateIntervalFormatter = 0;

  int v29 = (void *)__mediumDateStyleIntervalFormatter;
  __mediumDateStyleIntervalFormatter = 0;
}

id HKNumberFormatterFromTemplate(uint64_t a1)
{
  switch(a1)
  {
    case 2:
      id v1 = (void *)_HKNumberFormatterIntegerWithPadding__formatter;
      if (!_HKNumberFormatterIntegerWithPadding__formatter)
      {
        id v4 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
        id v5 = (void *)_HKNumberFormatterIntegerWithPadding__formatter;
        _HKNumberFormatterIntegerWithPadding__formatter = (uint64_t)v4;

        [(id)_HKNumberFormatterIntegerWithPadding__formatter setNumberStyle:0];
        [(id)_HKNumberFormatterIntegerWithPadding__formatter setMaximumFractionDigits:0];
        [(id)_HKNumberFormatterIntegerWithPadding__formatter setMinimumIntegerDigits:2];
        id v1 = (void *)_HKNumberFormatterIntegerWithPadding__formatter;
      }
      goto LABEL_10;
    case 1:
      id v1 = (void *)_HKNumberFormatterIntegerWithSeparators__formatter;
      if (!_HKNumberFormatterIntegerWithSeparators__formatter)
      {
        id v6 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
        id v7 = (void *)_HKNumberFormatterIntegerWithSeparators__formatter;
        _HKNumberFormatterIntegerWithSeparators__formatter = (uint64_t)v6;

        [(id)_HKNumberFormatterIntegerWithSeparators__formatter setNumberStyle:1];
        [(id)_HKNumberFormatterIntegerWithSeparators__formatter setUsesGroupingSeparator:1];
        [(id)_HKNumberFormatterIntegerWithSeparators__formatter setMaximumFractionDigits:0];
        id v1 = (void *)_HKNumberFormatterIntegerWithSeparators__formatter;
      }
      goto LABEL_10;
    case 0:
      id v1 = (void *)_HKNumberFormatterInteger__formatter;
      if (!_HKNumberFormatterInteger__formatter)
      {
        id v2 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
        id v3 = (void *)_HKNumberFormatterInteger__formatter;
        _HKNumberFormatterInteger__formatter = (uint64_t)v2;

        [(id)_HKNumberFormatterInteger__formatter setNumberStyle:0];
        [(id)_HKNumberFormatterInteger__formatter setMaximumFractionDigits:0];
        id v1 = (void *)_HKNumberFormatterInteger__formatter;
      }
LABEL_10:
      id v8 = v1;
      goto LABEL_12;
  }
  id v8 = 0;
LABEL_12:
  return v8;
}

double HKRoundWithPositiveZeroForDoubleValue(double a1)
{
  double v1 = round(a1);
  BOOL v2 = v1 == 0.0 && a1 < 0.0;
  double result = fabs(v1);
  if (!v2) {
    return v1;
  }
  return result;
}

id HKLocalizedStringForNumberWithTemplate(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = HKNumberFormatterFromTemplate(a2);
  id v5 = [v4 stringFromNumber:v3];

  return v5;
}

id HKLocalizedStringForNumberWithDecimalPrecision(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = HKNumberFormatterWithDecimalPrecisionAndStyle(a2, a3, 1);
  id v7 = [v6 stringFromNumber:v5];

  return v7;
}

id HKLocalizedNoDataString()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  double v1 = [v0 localizedStringForKey:@"NO_DATA" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

  return v1;
}

id HKDecimalFormatter(uint64_t a1)
{
  return HKNumberFormatterWithDecimalPrecisionAndStyle(2, a1, 1);
}

id HKIntegerFormatter()
{
  return HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
}

id HKThisYearDateFormatter()
{
  _RegisterForLocaleChangeNotificationIfNecessary();
  return _performNSDateFormatterInitializationBlock(&__block_literal_global_334);
}

void _RegisterForLocaleChangeNotificationIfNecessary()
{
  if ((_RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange & 1) == 0)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_LocaleDidChangeCallback, (CFStringRef)*MEMORY[0x1E4F1D200], 0, CFNotificationSuspensionBehaviorDrop);
    _RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange = 1;
  }
}

id __HKThisYearDateFormatter_block_invoke()
{
  uint64_t v0 = (void *)__thisYearDateFormatter;
  if (!__thisYearDateFormatter)
  {
    double v1 = _timeFormatString();
    BOOL v2 = [NSString stringWithFormat:@"MMM d, %@", v1];
    id v3 = (void *)MEMORY[0x1E4F28C10];
    id v4 = [MEMORY[0x1E4F1CA20] currentLocale];
    id v5 = [v3 dateFormatFromTemplate:v2 options:0 locale:v4];

    id v6 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    id v7 = (void *)__thisYearDateFormatter;
    __thisYearDateFormatter = (uint64_t)v6;

    [(id)__thisYearDateFormatter setDateFormat:v5];
    uint64_t v0 = (void *)__thisYearDateFormatter;
  }
  return v0;
}

id _timeFormatString()
{
  uint64_t v0 = CPDateFormatStringForFormatType();
  if (!_CPTimeFormatIs24HourMode())
  {
    uint64_t v1 = [v0 stringByAppendingString:@" a"];

    uint64_t v0 = (void *)v1;
  }
  return v0;
}

id HKPriorYearsDateFormatter()
{
  if (HKPriorYearsDateFormatter_onceToken != -1) {
    dispatch_once(&HKPriorYearsDateFormatter_onceToken, &__block_literal_global_341);
  }
  uint64_t v0 = (void *)HKPriorYearsDateFormatter___dateFormatter;
  return v0;
}

uint64_t __HKPriorYearsDateFormatter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  uint64_t v1 = (void *)HKPriorYearsDateFormatter___dateFormatter;
  HKPriorYearsDateFormatter___dateFormatter = (uint64_t)v0;

  BOOL v2 = [MEMORY[0x1E4F1CA20] currentLocale];
  [(id)HKPriorYearsDateFormatter___dateFormatter setLocale:v2];

  [(id)HKPriorYearsDateFormatter___dateFormatter setDateStyle:2];
  id v3 = (void *)HKPriorYearsDateFormatter___dateFormatter;
  return [v3 setTimeStyle:1];
}

id HKPriorYearsDateFormatterNoTime()
{
  if (HKPriorYearsDateFormatterNoTime_onceToken != -1) {
    dispatch_once(&HKPriorYearsDateFormatterNoTime_onceToken, &__block_literal_global_343);
  }
  id v0 = (void *)HKPriorYearsDateFormatterNoTime___dateFormatter;
  return v0;
}

uint64_t __HKPriorYearsDateFormatterNoTime_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  uint64_t v1 = (void *)HKPriorYearsDateFormatterNoTime___dateFormatter;
  HKPriorYearsDateFormatterNoTime___dateFormatter = (uint64_t)v0;

  BOOL v2 = [MEMORY[0x1E4F1CA20] currentLocale];
  [(id)HKPriorYearsDateFormatterNoTime___dateFormatter setLocale:v2];

  [(id)HKPriorYearsDateFormatterNoTime___dateFormatter setDateStyle:2];
  id v3 = (void *)HKPriorYearsDateFormatterNoTime___dateFormatter;
  return [v3 setTimeStyle:0];
}

id HKTimeFormatter()
{
  _RegisterForLocaleChangeNotificationIfNecessary();
  return _performNSDateFormatterInitializationBlock(&__block_literal_global_345);
}

id __HKTimeFormatter_block_invoke()
{
  id v0 = (void *)__timeFormatter;
  if (!__timeFormatter)
  {
    uint64_t v1 = _timeFormatString();
    BOOL v2 = (void *)MEMORY[0x1E4F28C10];
    id v3 = [MEMORY[0x1E4F1CA20] currentLocale];
    id v4 = [v2 dateFormatFromTemplate:v1 options:0 locale:v3];

    id v5 = objc_alloc_init(MEMORY[0x1E4F28C10]);
    id v6 = (void *)__timeFormatter;
    __timeFormatter = (uint64_t)v5;

    [(id)__timeFormatter setDateFormat:v4];
    id v0 = (void *)__timeFormatter;
  }
  return v0;
}

id _WDHourDateFormatterAMPM()
{
  if (_WDHourDateFormatterAMPM_onceToken != -1) {
    dispatch_once(&_WDHourDateFormatterAMPM_onceToken, &__block_literal_global_347);
  }
  id v0 = (void *)_WDHourDateFormatterAMPM___dateFormatter;
  return v0;
}

id _WDHourDateFormatter24Hour()
{
  if (_WDHourDateFormatter24Hour_onceToken != -1) {
    dispatch_once(&_WDHourDateFormatter24Hour_onceToken, &__block_literal_global_352);
  }
  id v0 = (void *)_WDHourDateFormatter24Hour___dateFormatter;
  return v0;
}

id HKHourDateFormatter()
{
  if (_CPTimeFormatIs24HourMode()) {
    _WDHourDateFormatter24Hour();
  }
  else {
  id v0 = _WDHourDateFormatterAMPM();
  }
  return v0;
}

id HKHourMinuteDateFormatterWithTimeZone(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x1E4F28C10];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  [v3 setTimeZone:v2];

  [v3 setLocalizedDateFormatFromTemplate:@"j:mm a zzz"];
  return v3;
}

id HKFormattedFeetAndInches(double a1)
{
  unsigned int v1 = vcvtmd_s64_f64(a1);
  double v2 = (a1 - floor(a1)) * 12.0;
  int v3 = llround(v2 * 100.0);
  if (v3 <= 1199) {
    int v4 = v3;
  }
  else {
    int v4 = v3 - 1200;
  }
  if (v3 <= 1199) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = v1 + 1;
  }
  id v6 = HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
  id v7 = [NSNumber numberWithInt:v5];
  id v8 = [v6 stringFromNumber:v7];
  if (v4 % 100)
  {
    *(float *)&double v9 = v2;
    uint64_t v10 = [NSNumber numberWithFloat:v9];
    uint64_t v11 = HKNumberFormatterWithDecimalPrecisionAndStyle(2, 0, 1);
    uint64_t v12 = [v11 stringFromNumber:v10];
  }
  else
  {
    uint64_t v10 = objc_msgSend(NSNumber, "numberWithInt:");
    uint64_t v12 = [v6 stringFromNumber:v10];
  }

  uint64_t v13 = NSString;
  uint64_t v14 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v15 = [v14 localizedStringForKey:@"FEET_INCH_FORMAT %@ %@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  BOOL v16 = objc_msgSend(v13, "stringWithFormat:", v15, v8, v12);

  return v16;
}

id HKDistanceFormatter()
{
  if (HKDistanceFormatter_onceToken != -1) {
    dispatch_once(&HKDistanceFormatter_onceToken, &__block_literal_global_363);
  }
  id v0 = (void *)HKDistanceFormatter___distanceFormatter;
  return v0;
}

void __HKDistanceFormatter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E30]);
  unsigned int v1 = (void *)HKDistanceFormatter___distanceFormatter;
  HKDistanceFormatter___distanceFormatter = (uint64_t)v0;

  [(id)HKDistanceFormatter___distanceFormatter setUnitOptions:3];
  HKNumberFormatterWithDecimalPrecisionAndStyle(2, 1, 1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [(id)HKDistanceFormatter___distanceFormatter setNumberFormatter:v2];
}

BOOL HKTimeFormatIsIn24HourMode()
{
  return _CPTimeFormatIs24HourMode() != 0;
}

id HKLastUpdatedSecondaryValueDateFormatter()
{
  if (HKLastUpdatedSecondaryValueDateFormatter_onceToken != -1) {
    dispatch_once(&HKLastUpdatedSecondaryValueDateFormatter_onceToken, &__block_literal_global_366);
  }
  id v0 = (void *)HKLastUpdatedSecondaryValueDateFormatter___dateFormatter;
  return v0;
}

uint64_t __HKLastUpdatedSecondaryValueDateFormatter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  unsigned int v1 = (void *)HKLastUpdatedSecondaryValueDateFormatter___dateFormatter;
  HKLastUpdatedSecondaryValueDateFormatter___dateFormatter = (uint64_t)v0;

  [(id)HKLastUpdatedSecondaryValueDateFormatter___dateFormatter setDateStyle:1];
  id v2 = (void *)HKLastUpdatedSecondaryValueDateFormatter___dateFormatter;
  return [v2 setTimeStyle:0];
}

id HKFormattedStringForDate(void *a1)
{
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  int v3 = [MEMORY[0x1E4F1C9C8] date];
  int v4 = [v2 components:4 fromDate:v1 toDate:v3 options:0];

  if ([v4 year] <= 0)
  {
    _RegisterForLocaleChangeNotificationIfNecessary();
    _performNSDateFormatterInitializationBlock(&__block_literal_global_334);
  }
  else
  {
    HKPriorYearsDateFormatter();
  uint64_t v5 = };
  id v6 = [v5 stringFromDate:v1];

  return v6;
}

uint64_t HKFormatterIncludesUnitForDisplayTypeInContext(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = [a3 unitForDisplayType:v5];
  id v7 = objc_msgSend(v5, "hk_numberFormatterForUnit:formattingContext:", v6, a2);

  uint64_t v8 = [v7 returnsUnitWithValueForDisplay];
  return v8;
}

id _WDLocalizedDisplayStringForActivityQuantity(void *a1, void *a2, void *a3, void *a4, char a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v13 = [MEMORY[0x1E4F1CA48] array];
  if (v9)
  {
    [v9 doubleValueForUnit:v11];
    double v15 = v14;
    BOOL v16 = HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
    uint64_t v17 = [NSNumber numberWithDouble:v15];
    uint64_t v18 = [v16 stringFromNumber:v17];
    [v13 addObject:v18];
  }
  else
  {
    BOOL v16 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    uint64_t v17 = [v16 localizedStringForKey:@"NO_DATA" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    [v13 addObject:v17];
  }

  if ((a5 & 1) == 0)
  {
    [v13 addObject:@"/"];
    if (v10)
    {
      [v10 doubleValueForUnit:v11];
      double v20 = v19;
      uint64_t v21 = HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
      uint64_t v22 = [NSNumber numberWithDouble:v20];
      uint64_t v23 = [v21 stringFromNumber:v22];
      [v13 addObject:v23];
    }
    else
    {
      uint64_t v21 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v22 = [v21 localizedStringForKey:@"NO_DATA" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
      [v13 addObject:v22];
    }
  }
  if (v12)
  {
    [v13 addObject:@" "];
    [v13 addObject:v12];
  }
  uint64_t v24 = [v13 componentsJoinedByString:&stru_1F3B9CF20];

  return v24;
}

id HKLocalizedDisplayStringForAppleMoveTime(void *a1, void *a2, char a3, int a4)
{
  id v7 = (void *)MEMORY[0x1E4F2B618];
  id v8 = a2;
  id v9 = a1;
  id v10 = [v7 minuteUnit];
  id v11 = NSString;
  id v12 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v13 = [v12 localizedStringForKey:@"MINUTES_MEDIUM" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  [v9 doubleValueForUnit:v10];
  double v15 = objc_msgSend(v11, "localizedStringWithFormat:", v13, v14);

  if (a4) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v15;
  }
  uint64_t v17 = _WDLocalizedDisplayStringForActivityQuantity(v9, v8, v10, v16, a3);

  return v17;
}

id HKLocalizedDisplayStringForAppleExerciseTime(void *a1, void *a2, char a3, int a4)
{
  id v7 = (void *)MEMORY[0x1E4F2B618];
  id v8 = a2;
  id v9 = a1;
  id v10 = [v7 minuteUnit];
  id v11 = NSString;
  id v12 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v13 = [v12 localizedStringForKey:@"MINUTES_MEDIUM" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  [v9 doubleValueForUnit:v10];
  double v15 = objc_msgSend(v11, "localizedStringWithFormat:", v13, v14);

  if (a4) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v15;
  }
  uint64_t v17 = _WDLocalizedDisplayStringForActivityQuantity(v9, v8, v10, v16, a3);

  return v17;
}

id HKLocalizedDisplayStringForAppleStandHours(void *a1, void *a2, char a3, int a4)
{
  id v7 = (void *)MEMORY[0x1E4F2B618];
  id v8 = a2;
  id v9 = a1;
  id v10 = [v7 countUnit];
  id v11 = NSString;
  id v12 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v13 = [v12 localizedStringForKey:@"HOURS_MEDIUM" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  [v9 doubleValueForUnit:v10];
  double v15 = objc_msgSend(v11, "localizedStringWithFormat:", v13, v14);

  if (a4) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v15;
  }
  uint64_t v17 = _WDLocalizedDisplayStringForActivityQuantity(v9, v8, v10, v16, a3);

  return v17;
}

id HKFormatValueAndUnit(void *a1, void *a2)
{
  return HKFormatValueAndUnitWithSpaceBetweenValueAndUnit(a1, a2, 1);
}

id HKFormatValueAndUnitWithSpaceBetweenValueAndUnit(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if ([v6 length])
  {
    id v7 = @"VALUE_UNIT_FORMAT %@%@";
    if (a3) {
      id v7 = @"VALUE_UNIT_FORMAT %@ %@";
    }
    id v8 = NSString;
    id v9 = (void *)MEMORY[0x1E4F28B50];
    id v10 = v7;
    id v11 = [v9 bundleWithIdentifier:@"com.apple.HealthUI"];
    id v12 = [v11 localizedStringForKey:v10 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

    objc_msgSend(v8, "localizedStringWithFormat:", v12, v5, v6);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v13 = v5;
  }

  return v13;
}

id HKFormatAttributedValueAndUnit(void *a1, void *a2, void *a3, void *a4, int a5)
{
  return HKFormatAttributedValueAndUnitWithSpaceBetweenValueAndUnit(a1, a2, a3, a4, a5);
}

id HKFormatAttributedValueAndUnitWithSpaceBetweenValueAndUnit(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v5 = HKGenerateAttributedStringsWithUnitValue(a1, a2, a3, a4, 2, a5);
  id v6 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1F3B9CF20];
  [v5 addObject:v6];
  id v7 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1F3B9CF20];
  [v5 addObject:v7];
  id v8 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v9 = [v8 localizedStringForKey:@"QUANTITY_VALUE_FORMAT_STRING" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  id v10 = HKUIJoinAttributedStringsWithFormat(v5, v9);

  return v10;
}

id HKFormatAttributedValueAndDetails(void *a1, void *a2, void *a3)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4FB0700];
  v16[0] = *MEMORY[0x1E4FB06F8];
  v16[1] = v5;
  v17[0] = a3;
  id v6 = (void *)MEMORY[0x1E4FB1618];
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  id v10 = objc_msgSend(v6, "hk_chartLollipopLabelColor");
  v17[1] = v10;
  id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:2];

  id v12 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithAttributedString:v9];
  id v13 = objc_alloc(MEMORY[0x1E4F28B18]);

  uint64_t v14 = (void *)[v13 initWithString:v8 attributes:v11];
  [v12 appendAttributedString:v14];

  return v12;
}

id HKActiveEnergyIntegerNumberFormatter()
{
  if (HKActiveEnergyIntegerNumberFormatter_onceToken != -1) {
    dispatch_once(&HKActiveEnergyIntegerNumberFormatter_onceToken, &__block_literal_global_402);
  }
  id v0 = (void *)HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter;
  return v0;
}

uint64_t __HKActiveEnergyIntegerNumberFormatter_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  id v1 = (void *)HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter;
  HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter = (uint64_t)v0;

  [(id)HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter setNumberStyle:1];
  [(id)HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter setRoundingMode:2];
  id v2 = (void *)HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter;
  return [v2 setMaximumFractionDigits:0];
}

id HKLocalizedStringWithEnergy()
{
  uint64_t v0 = _HKWorkoutFlooredValueForQuantity();
  id v1 = HKActiveEnergyIntegerNumberFormatter();
  id v2 = [NSNumber numberWithInt:v0];
  int v3 = [v1 stringFromNumber:v2];

  return v3;
}

__CFString *HKTimePeriodStringGenerator(void *a1, __int16 a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  [v3 doubleValue];
  if ((a2 & 0x100) != 0)
  {
    HKSeparateTimeIntervalComponentsWithWeeks();
    goto LABEL_7;
  }
  if ((a2 & 0x80) == 0)
  {
    HKSeparateTimeIntervalComponentsWithDays();
    if (a2) {
      goto LABEL_8;
    }
LABEL_7:
    int v4 = 1;
    goto LABEL_9;
  }
  HKSeparateTimeIntervalComponents();
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  int v4 = 0;
  uint64_t v70 = 0;
LABEL_9:
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ((v4 & 1) == 0)
  {
    id v6 = HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
    id v7 = [NSNumber numberWithInteger:v71];
    id v8 = [v6 stringFromNumber:v7];

    id v9 = NSString;
    id v10 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    id v11 = v10;
    if ((a2 & 2) != 0) {
      id v12 = @"HOURS_PAIR_MEDIUM_UPPERCASE";
    }
    else {
      id v12 = @"HOURS_PAIR_MEDIUM";
    }
    id v13 = [v10 localizedStringForKey:v12 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    uint64_t v14 = objc_msgSend(v9, "localizedStringWithFormat:", v13, v8);

    if (v14) {
      [v5 addObject:v14];
    }
  }
  if (v4 == 1)
  {
    double v15 = HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
    if ((a2 & 0x100) != 0)
    {
      id v51 = [NSNumber numberWithInteger:v72];
      uint64_t v17 = [v15 stringFromNumber:v51];

      v52 = NSString;
      char v53 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      v54 = v53;
      if ((a2 & 4) != 0)
      {
        if ((a2 & 2) != 0)
        {
          v61 = [v53 localizedStringForKey:@"DAYS_NUMBERED_UNIT_UPPERCASE" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
          uint64_t v56 = objc_msgSend(v52, "localizedStringWithFormat:", v61, v72);

          v57 = v17;
          v58 = (void *)v56;
          int v59 = 0;
        }
        else
        {
          v55 = [v53 localizedStringForKey:@"DAYS_NUMBERED_UNIT" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
          uint64_t v56 = objc_msgSend(v52, "localizedStringWithFormat:", v55, v72);

          v57 = v17;
          v58 = (void *)v56;
          int v59 = 1;
        }
        uint64_t v25 = HKFormatValueAndUnitWithSpaceBetweenValueAndUnit(v57, v58, v59);
        v54 = (void *)v56;
      }
      else
      {
        if ((a2 & 2) != 0) {
          v60 = @"DAYS_PAIR_SHORT_UPPERCASE";
        }
        else {
          v60 = @"DAYS_PAIR_SHORT";
        }
        uint64_t v26 = [v53 localizedStringForKey:v60 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
        uint64_t v25 = objc_msgSend(v52, "localizedStringWithFormat:", v26, v17);
      }
      if (!v25) {
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v16 = [NSNumber numberWithInteger:v70];
      uint64_t v17 = [v15 stringFromNumber:v16];

      uint64_t v18 = NSString;
      double v19 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      double v20 = v19;
      uint64_t v21 = @"MINUTES_PAIR_MEDIUM_PLURAL_UPPERCASE";
      if ((a2 & 2) == 0) {
        uint64_t v21 = @"MINUTES_PAIR_MEDIUM_PLURAL";
      }
      uint64_t v22 = @"MINUTES_PAIR_MEDIUM";
      if ((a2 & 2) != 0) {
        uint64_t v22 = @"MINUTES_PAIR_MEDIUM_UPPERCASE";
      }
      if ((a2 & 8) != 0) {
        uint64_t v23 = v21;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = [v19 localizedStringForKey:v23 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
      uint64_t v25 = objc_msgSend(v18, "localizedStringWithFormat:", v24, v17);

      if (!v25) {
        goto LABEL_30;
      }
    }
    [v5 addObject:v25];
LABEL_30:
  }
  if ((a2 & 0x40) != 0)
  {
    BOOL v27 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    id v34 = v5;
    uint64_t v35 = [v34 countByEnumeratingWithState:&v66 objects:v75 count:16];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = *(void *)v67;
      do
      {
        for (uint64_t i = 0; i != v36; ++i)
        {
          if (*(void *)v67 != v37) {
            objc_enumerationMutation(v34);
          }
          v39 = [*(id *)(*((void *)&v66 + 1) + 8 * i) stringByReplacingOccurrencesOfString:@" " withString:@"\uFFFC"];
          [v27 addObject:v39];
        }
        uint64_t v36 = [v34 countByEnumeratingWithState:&v66 objects:v75 count:16];
      }
      while (v36);
    }
  }
  else
  {
    if ((a2 & 0x20) == 0) {
      goto LABEL_49;
    }
    BOOL v27 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    id v28 = v5;
    uint64_t v29 = [v28 countByEnumeratingWithState:&v62 objects:v74 count:16];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = *(void *)v63;
      do
      {
        for (uint64_t j = 0; j != v30; ++j)
        {
          if (*(void *)v63 != v31) {
            objc_enumerationMutation(v28);
          }
          uint64_t v33 = [*(id *)(*((void *)&v62 + 1) + 8 * j) stringByReplacingOccurrencesOfString:@" " withString:@" "];
          [v27 addObject:v33];
        }
        uint64_t v30 = [v28 countByEnumeratingWithState:&v62 objects:v74 count:16];
      }
      while (v30);
    }
  }

  id v5 = v27;
LABEL_49:
  uint64_t v40 = [v5 count];
  switch(v40)
  {
    case 3:
      char v46 = NSString;
      char v42 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      id v43 = [v42 localizedStringForKey:@"TIME_DISPLAY_3" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
      v44 = [v5 objectAtIndexedSubscript:0];
      uint64_t v47 = [v5 objectAtIndexedSubscript:1];
      char v48 = [v5 objectAtIndexedSubscript:2];
      objc_msgSend(v46, "localizedStringWithFormat:", v43, v44, v47, v48);
      uint64_t v45 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_55:
      goto LABEL_56;
    case 2:
      id v49 = NSString;
      char v42 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      id v43 = [v42 localizedStringForKey:@"TIME_DISPLAY_2" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
      v44 = [v5 objectAtIndexedSubscript:0];
      uint64_t v47 = [v5 objectAtIndexedSubscript:1];
      objc_msgSend(v49, "localizedStringWithFormat:", v43, v44, v47);
      uint64_t v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 1:
      uint64_t v41 = NSString;
      char v42 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      id v43 = [v42 localizedStringForKey:@"TIME_DISPLAY_1" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
      v44 = [v5 objectAtIndexedSubscript:0];
      objc_msgSend(v41, "localizedStringWithFormat:", v43, v44);
      uint64_t v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_56:

      goto LABEL_58;
  }
  uint64_t v45 = @"<error>";
LABEL_58:

  return v45;
}

id HKTimePeriodString(void *a1, __int16 a2)
{
  char v2 = a2;
  id v3 = HKTimePeriodStringGenerator(a1, a2);
  int v4 = v3;
  if ((v2 & 2) != 0)
  {
    uint64_t v5 = [v3 localizedUppercaseString];

    int v4 = (void *)v5;
  }
  return v4;
}

id HKTimePeriodStringWithFonts(void *a1, void *a2, void *a3, unint64_t a4)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  if (a3)
  {
    id v9 = HKTimePeriodStringGenerator(a3, a4 | 0x40);
    id v10 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
    id v11 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:v9];
    uint64_t v12 = *MEMORY[0x1E4FB06F8];
    id v30 = v8;
    id v31 = v7;
    if ((a4 & 0x10) != 0)
    {
      uint64_t v18 = *MEMORY[0x1E4FB0700];
      v38[0] = *MEMORY[0x1E4FB06F8];
      v38[1] = v18;
      v39[0] = v7;
      double v19 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartLollipopValueColor");
      v39[1] = v19;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];

      v34[1] = v18;
      v35[0] = v8;
      v34[0] = v12;
      double v20 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartLollipopLabelColor");
      v35[1] = v20;
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:v34 count:2];
    }
    else
    {
      uint64_t v36 = *MEMORY[0x1E4FB06F8];
      id v37 = v7;
      id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      uint64_t v32 = v12;
      id v33 = v8;
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    }
    uint64_t v21 = objc_msgSend(MEMORY[0x1E4F28B18], "hk_attributedStringForSpacing:nonBreaking:", 1, (a4 >> 5) & 1);
    uint64_t v22 = [v9 length];
    if (v22 >= 1)
    {
      uint64_t v23 = v22;
      for (uint64_t i = 0; i != v23; ++i)
      {
        if (objc_msgSend(v10, "characterIsMember:", objc_msgSend(v9, "characterAtIndex:", i))) {
          uint64_t v25 = v13;
        }
        else {
          uint64_t v25 = v14;
        }
        objc_msgSend(v11, "addAttributes:range:", v25, i, 1);
      }
    }
    if ([v11 length])
    {
      unint64_t v26 = 0;
      do
      {
        BOOL v27 = [v11 string];
        int v28 = [v27 characterAtIndex:v26];

        if (v28 == 65532)
        {
          [v11 replaceCharactersInRange:v26, objc_msgSend(@"\uFFFC", "length"), v21 withAttributedString];
          v26 += [v21 length];
        }
        ++v26;
      }
      while (v26 < [v11 length]);
    }

    id v8 = v30;
    id v7 = v31;
  }
  else
  {
    id v15 = objc_alloc(MEMORY[0x1E4F28E48]);
    BOOL v16 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    uint64_t v17 = [v16 localizedStringForKey:@"NO_DATA" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    id v11 = (void *)[v15 initWithString:v17];

    objc_msgSend(v11, "addAttribute:value:range:", *MEMORY[0x1E4FB06F8], v7, 0, objc_msgSend(v11, "length"));
  }

  return v11;
}

id HKUIStringForInsulinDeliveryReason(uint64_t a1)
{
  return HKUIStringForInsulinDeliveryReasonEmbedded(a1, 0);
}

id HKUIStringForInsulinDeliveryReasonEmbedded(uint64_t a1, int a2)
{
  id v3 = objc_msgSend(NSString, "stringWithFormat:", @"INSULIN_DELIVERY_REASON_%zd", a1);
  int v4 = v3;
  if (a2)
  {
    uint64_t v5 = [v3 stringByAppendingString:@"_EMBEDDED"];

    int v4 = (void *)v5;
  }
  id v6 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v7 = [v6 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

  return v7;
}

void _LocaleDidChangeCallback()
{
}

uint64_t HKCodableSummaryOngoingFactorsValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      int v17 = v10 & 7;
      if (v16 || v17 == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v19 == 2)
      {
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v32);
          *(void *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v40 = 32;
LABEL_56:
        *(void *)(a1 + v40) = v30;
        goto LABEL_57;
      }
      if (v19 == 1)
      {
        if (v17 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            while (1)
            {
              uint64_t v24 = *v3;
              uint64_t v25 = *(void *)(a2 + v24);
              unint64_t v26 = v25 + 1;
              if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
                break;
              }
              char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                BOOL v15 = v22++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_33;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
            PBRepeatedInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            uint64_t v36 = *v3;
            uint64_t v37 = *(void *)(a2 + v36);
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)(a2 + *v4)) {
              break;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v38;
            v35 |= (unint64_t)(v39 & 0x7F) << v33;
            if (v39 < 0)
            {
              v33 += 7;
              BOOL v15 = v34++ >= 9;
              if (!v15) {
                continue;
              }
            }
            goto LABEL_51;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
          PBRepeatedInt64Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
LABEL_57:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 2u;
    uint64_t v28 = *v3;
    unint64_t v29 = *(void *)(a2 + v28);
    if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
      *(void *)(a2 + v28) = v29 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + *v5) = 1;
      uint64_t v30 = 0;
    }
    uint64_t v40 = 40;
    goto LABEL_56;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return v0;
}

unsigned char *OUTLINED_FUNCTION_3(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_5()
{
  return v0;
}

void sub_1E0B72864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0B74E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t HKCodableSleepingSampleBaselineAvailabilityReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_47:
        uint64_t v31 = 8;
LABEL_48:
        *(void *)(a1 + v31) = v21;
        goto LABEL_49;
      }
      if (v17 == 1)
      {
        uint64_t v18 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    *(unsigned char *)(a1 + 32) |= 2u;
    while (1)
    {
      uint64_t v22 = *v3;
      unint64_t v23 = *(void *)(a2 + v22);
      if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
      *(void *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0) {
        goto LABEL_41;
      }
      v19 += 7;
      BOOL v14 = v20++ >= 9;
      if (v14)
      {
        uint64_t v21 = 0;
        goto LABEL_43;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v21 = 0;
    }
LABEL_43:
    uint64_t v31 = 16;
    goto LABEL_48;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

SecKeyRef _createPrivateSecKeyRefFromP12(void *a1)
{
  id v1 = a1;
  char v2 = HKHealthUIFrameworkBundle();
  id v3 = [v2 pathForResource:@"donateLifePrivate" ofType:@"p12"];

  CFDataRef v4 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v3];
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  SecKeyRef privateKeyRef = 0;
  [v5 setObject:v1 forKey:*MEMORY[0x1E4F3B9E8]];

  CFArrayRef theArray = 0;
  uint64_t v6 = SecPKCS12Import(v4, (CFDictionaryRef)v5, &theArray);
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = theArray == 0;
  }
  if (v7 || CFArrayGetCount(theArray) < 1)
  {
    _HKInitializeLogging();
    char v19 = *MEMORY[0x1E4F29FB0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FB0], OS_LOG_TYPE_ERROR)) {
      _createPrivateSecKeyRefFromP12_cold_2(v6, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
    Value = (__SecIdentity *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F3B9F0]);
    uint64_t v10 = SecIdentityCopyPrivateKey(Value, &privateKeyRef);
    if (v10)
    {
      uint64_t v11 = v10;
      _HKInitializeLogging();
      unint64_t v12 = *MEMORY[0x1E4F29FB0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FB0], OS_LOG_TYPE_ERROR)) {
        _createPrivateSecKeyRefFromP12_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      SecKeyRef privateKeyRef = 0;
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  SecKeyRef v26 = privateKeyRef;

  return v26;
}

id _DecodedString(uint64_t a1)
{
  void v16[3] = *MEMORY[0x1E4F143B8];
  char v2 = [MEMORY[0x1E4F28E78] string];
  v16[0] = objc_opt_class();
  v16[1] = objc_opt_class();
  void v16[2] = objc_opt_class();
  [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:3];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = NSStringFromClass(*(Class *)(*((void *)&v11 + 1) + 8 * i));
        objc_msgSend(v2, "appendString:", v8, (void)v11);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = RevealObfuscatedStringWithSalt(a1, v2);

  return v9;
}

id _SignStringWithSHA256RSA(void *a1, __SecKey *a2)
{
  id v3 = a1;
  size_t sigLen = SecKeyGetBlockSize(a2);
  uint64_t v4 = malloc_type_malloc(sigLen, 0x28538A69uLL);
  bzero(v4, sigLen);
  uint64_t v5 = (uint8_t *)malloc_type_malloc(0x20uLL, 0x6C798A5CuLL);
  id v6 = v3;
  BOOL v7 = (const void *)[v6 bytes];
  CC_LONG v8 = [v6 length];

  if (CC_SHA256(v7, v8, v5))
  {
    SecKeyRawSign(a2, 0x8004u, v5, 0x20uLL, (uint8_t *)v4, &sigLen);
    unsigned int v9 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v4 length:sigLen];
    free(v5);
    free(v4);
  }
  else
  {
    free(v5);
    free(v4);
    unsigned int v9 = 0;
  }
  return v9;
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return v0;
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t HKCodableWheelchairSettingReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            uint64_t v26 = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_51:
        uint64_t v36 = 16;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 28) |= 4u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(unsigned char *)(a1 + 24) = v20 != 0;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            uint64_t v26 = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_55:
        uint64_t v36 = 8;
      }
      *(void *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0B82954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUCallProviderManagerClass_block_invoke(uint64_t a1)
{
  TelephonyUtilitiesLibrary();
  Class result = objc_getClass("TUCallProviderManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getTUCallProviderManagerClass_block_invoke_cold_1();
  }
  getTUCallProviderManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void TelephonyUtilitiesLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __TelephonyUtilitiesLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E6D51518;
    uint64_t v2 = 0;
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary) {
    TelephonyUtilitiesLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getTUDialRequestClass_block_invoke(uint64_t a1)
{
  TelephonyUtilitiesLibrary();
  Class result = objc_getClass("TUDialRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getTUDialRequestClass_block_invoke_cold_1();
  }
  getTUDialRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTUHandleClass_block_invoke(uint64_t a1)
{
  TelephonyUtilitiesLibrary();
  Class result = objc_getClass("TUHandle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getTUHandleClass_block_invoke_cold_1();
  }
  getTUHandleClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableSummaryTrendTileViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
        goto LABEL_52;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
        goto LABEL_52;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 120) |= 4u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_56:
        *(_DWORD *)(a1 + 64) = v23;
        goto LABEL_62;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 80;
        goto LABEL_52;
      case 5u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_52;
      case 6u:
        unint64_t v28 = objc_alloc_init(HKCodableSummaryTrendLineViewModel);
        uint64_t v29 = 24;
        goto LABEL_34;
      case 7u:
        unint64_t v28 = objc_alloc_init(HKCodableSummaryTrendLineViewModel);
        uint64_t v29 = 40;
LABEL_34:
        objc_storeStrong((id *)(a1 + v29), v28);
        if (!PBReaderPlaceMark()
          || (HKCodableSummaryTrendLineViewModelReadFrom((uint64_t)v28, a2) & 1) == 0)
        {
          goto LABEL_64;
        }
        goto LABEL_47;
      case 8u:
        unint64_t v28 = objc_alloc_init(HKCodableSummaryVisualizationPoint);
        [(id)a1 addVisualizationPoints:v28];
        if (!PBReaderPlaceMark()
          || (HKCodableSummaryVisualizationPointReadFrom((uint64_t)v28, a2) & 1) == 0)
        {
          goto LABEL_64;
        }
        goto LABEL_47;
      case 9u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
        goto LABEL_52;
      case 0xAu:
        *(unsigned char *)(a1 + 120) |= 1u;
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v32 = *(void *)(*(void *)(a2 + *v7) + v31);
          *(void *)(a2 + v30) = v31 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v32 = 0;
        }
        uint64_t v36 = 8;
        goto LABEL_61;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_52;
      case 0xCu:
        unint64_t v28 = objc_alloc_init(HKCodableCellHeaderViewModel);
        objc_storeStrong((id *)(a1 + 32), v28);
        if PBReaderPlaceMark() && (HKCodableCellHeaderViewModelReadFrom((uint64_t)v28, a2))
        {
LABEL_47:
          PBReaderRecallMark();

LABEL_62:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_64:

        return 0;
      case 0xDu:
        *(unsigned char *)(a1 + 120) |= 2u;
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v32 = *(void *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v32 = 0;
        }
        uint64_t v36 = 16;
LABEL_61:
        *(void *)(a1 + v36) = v32;
        goto LABEL_62;
      case 0xEu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 88;
LABEL_52:
        uint64_t v35 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_62;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_62;
    }
  }
}

uint64_t HKCodableSummaryElectrocardiogramValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            uint64_t v20 = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_44:
        uint64_t v36 = 8;
        goto LABEL_49;
      case 2u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v20 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v15 = v27++ >= 9;
              if (v15)
              {
                uint64_t v20 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_48:
        uint64_t v36 = 16;
LABEL_49:
        *(void *)(a1 + v36) = v20;
        goto LABEL_52;
      case 3u:
        uint64_t v32 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 32), v32);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v32, a2))
        {
          PBReaderRecallMark();

LABEL_52:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        *(unsigned char *)(a1 + 40) |= 4u;
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v35 = *(void *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v35 = 0;
        }
        *(void *)(a1 + 24) = v35;
        goto LABEL_52;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_52;
    }
  }
}

uint64_t HKCodableChartHorizontalTimePeriodDataSourceDataReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HKCodableHorizontalTimePeriodData);
        [a1 addDateIntervalsByValue:v17];
        if (!PBReaderPlaceMark()
          || (HKCodableHorizontalTimePeriodDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryCardioFitnessValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 32), v18);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v18, a2)) {
          goto LABEL_36;
        }
        goto LABEL_45;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              BOOL v15 = v21++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_40:
        *(void *)(a1 + 8) = v22;
        goto LABEL_43;
      case 3u:
        *(unsigned char *)(a1 + 40) |= 2u;
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        *(void *)(a1 + 16) = v29;
        goto LABEL_43;
      case 4u:
        char v18 = objc_alloc_init(HKCodableLevelViewDataConfiguration);
        objc_storeStrong((id *)(a1 + 24), v18);
        if PBReaderPlaceMark() && (HKCodableLevelViewDataConfigurationReadFrom(v18, a2))
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_45:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

uint64_t HKCodableChartQuantityDataSourceQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HKCodableStatisticsCollection);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || !HKCodableStatisticsCollectionReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKHealthPrivacyHostRemoteViewControllerInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1F3CA06F0];
}

id HKAFibBurdenClampedLowerBoundLocalizedString(void *a1)
{
  long long v1 = HKAFibBurdenRoundedValue(a1);
  uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v3 = [v2 localizedStringForKey:@"LESS_THAN_SOME_PERCENT_PLAIN" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-AFibBurden"];

  uint64_t v4 = objc_msgSend(NSString, "localizedStringWithFormat:", v3, (int)objc_msgSend(v1, "intValue"));

  return v4;
}

id HKAFibBurdenRoundedValue(void *a1)
{
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 0;
  if (a1) {
    [a1 decimalValue];
  }
  long long v5 = 0uLL;
  int v6 = 0;
  MEMORY[0x1E4E3FDB0](&v5, v7, 0, 0);
  long long v3 = v5;
  int v4 = v6;
  long long v1 = [MEMORY[0x1E4F28C28] decimalNumberWithDecimal:&v3];
  return v1;
}

id HKAFibBurdenClampedLowerBoundAttributedLocalizedString(void *a1, void *a2, void *a3)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  long long v5 = (void *)MEMORY[0x1E4F28B50];
  id v6 = a3;
  id v30 = a2;
  id v7 = a1;
  int v8 = [v5 bundleWithIdentifier:@"com.apple.HealthUI"];
  unsigned int v9 = [v8 localizedStringForKey:@"LESS_THAN_SOME_PERCENT" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-AFibBurden"];

  unint64_t v10 = NSString;
  uint64_t v11 = HKAFibBurdenRoundedValue(v7);

  unint64_t v12 = objc_msgSend(v10, "localizedStringWithFormat:", v9, objc_msgSend(v11, "longValue"));

  uint64_t v13 = *MEMORY[0x1E4FB06F8];
  v39[0] = v30;
  uint64_t v14 = *MEMORY[0x1E4FB0700];
  v38[0] = v13;
  v38[1] = v14;
  int v15 = [MEMORY[0x1E4FB1618] labelColor];
  v39[1] = v15;
  int v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];

  v36[1] = v14;
  v37[0] = v6;
  unint64_t v17 = v6;
  v36[0] = v13;
  char v18 = [MEMORY[0x1E4FB1618] secondaryLabelColor];
  v37[1] = v18;
  unsigned int v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2];

  id v20 = objc_alloc_init(MEMORY[0x1E4F28B20]);
  [v20 setAllowsExtendedAttributes:1];
  id v35 = 0;
  unsigned int v21 = (void *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithMarkdownString:v12 options:v20 baseURL:0 error:&v35];
  id v22 = v35;
  uint64_t v23 = [v21 length];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  void v31[2] = __HKAFibBurdenClampedLowerBoundAttributedLocalizedString_block_invoke;
  v31[3] = &unk_1E6D515C8;
  id v24 = v21;
  id v32 = v24;
  id v33 = v16;
  unint64_t v34 = v19;
  id v25 = v19;
  id v26 = v16;
  objc_msgSend(v24, "enumerateAttributesInRange:options:usingBlock:", 0, v23, 0, v31);
  uint64_t v27 = v34;
  id v28 = v24;

  return v28;
}

void __HKAFibBurdenClampedLowerBoundAttributedLocalizedString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v10 = a2;
  id v7 = [v10 objectForKeyedSubscript:@"com.apple.Health.valueText"];

  if (v7)
  {
    int v8 = (void *)(a1 + 40);
  }
  else
  {
    unsigned int v9 = [v10 objectForKeyedSubscript:@"com.apple.Health.unitText"];

    if (!v9) {
      goto LABEL_6;
    }
    int v8 = (void *)(a1 + 48);
  }
  objc_msgSend(*(id *)(a1 + 32), "setAttributes:range:", *v8, a3, a4);
LABEL_6:
}

uint64_t HKCodableStateOfMindValenceDistributionDataReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 36) |= 2u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v38 = 16;
          goto LABEL_53;
        case 2u:
          *(unsigned char *)(a1 + 36) |= 1u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v38 = 8;
LABEL_53:
          *(void *)(a1 + v38) = v20;
          continue;
        case 3u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  uint64_t v26 = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_44:
          *(void *)(a1 + 24) = v26;
          continue;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v34 = *v3;
        uint64_t v35 = *(void *)(a2 + v34);
        unint64_t v36 = v35 + 1;
        if (v35 == -1 || v36 > *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
        *(void *)(a2 + v34) = v36;
        v33 |= (unint64_t)(v37 & 0x7F) << v31;
        if ((v37 & 0x80) == 0) {
          goto LABEL_46;
        }
        v31 += 7;
        BOOL v15 = v32++ >= 9;
        if (v15)
        {
          LODWORD(v33) = 0;
          goto LABEL_48;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v33) = 0;
      }
LABEL_48:
      *(_DWORD *)(a1 + 32) = v33;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableHorizontalTimePeriodDataReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v23 = objc_alloc_init(HKCodableDateInterval);
        [(id)a1 addDateIntervals:v23];
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0B8E478(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

id HKStartOfHourForDate(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  long long v3 = [v1 currentCalendar];
  int v4 = [v3 components:62 fromDate:v2];

  long long v5 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  id v6 = [v5 dateFromComponents:v4];

  return v6;
}

id HKEndOfHourForDate(void *a1)
{
  uint64_t v1 = HKStartOfHourForDate(a1);
  id v2 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  long long v3 = [v2 dateByAddingUnit:32 value:1 toDate:v1 options:0];

  return v3;
}

id HKSleepStartDateForDate(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  long long v3 = [v1 currentCalendar];
  int v4 = [v3 startOfDayForDate:v2];
  long long v5 = [v3 dateBySettingUnit:32 value:18 ofDate:v4 options:0];
  uint64_t v6 = [v3 compareDate:v5 toDate:v2 toUnitGranularity:128];

  if (v6 == 1)
  {
    uint64_t v7 = [v3 dateByAddingUnit:16 value:-1 toDate:v5 options:0];

    long long v5 = (void *)v7;
  }

  return v5;
}

id HKStartOfRollingDayForDate(void *a1, void *a2)
{
  long long v3 = (void *)MEMORY[0x1E4F1C9A8];
  int v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 currentCalendar];
  uint64_t v7 = [v6 startOfDayForDate:v5];

  char v8 = v4[2](v4, v6, v7);

  return v8;
}

id HKEndOfRollingDayWithStart(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  long long v3 = [v1 currentCalendar];
  int v4 = [v3 dateByAddingUnit:16 value:1 toDate:v2 options:0];

  return v4;
}

id HKStartOfRollingWeekForDate(void *a1, void *a2)
{
  long long v3 = (void *)MEMORY[0x1E4F1C9A8];
  int v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 currentCalendar];
  uint64_t v7 = HKCalendarDateTransformNone();
  char v8 = HKStartOfRollingDayForDate(v5, v7);

  unsigned int v9 = objc_msgSend(v6, "hk_dateBySubtractingDays:fromDate:", 6, v8);
  unint64_t v10 = v4[2](v4, v6, v9);

  return v10;
}

id HKEndOfRollingWeekWithStart(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  long long v3 = [v1 currentCalendar];
  int v4 = [v3 dateByAddingUnit:16 value:7 toDate:v2 options:0];

  return v4;
}

id HKStartOfRollingMonthForDate(void *a1, void *a2)
{
  long long v3 = (void *)MEMORY[0x1E4F1C9A8];
  int v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 currentCalendar];
  uint64_t v7 = HKCalendarDateTransformNone();
  char v8 = HKStartOfRollingDayForDate(v5, v7);

  unsigned int v9 = objc_msgSend(v6, "hk_dateBySubtractingDays:fromDate:", 30, v8);
  unint64_t v10 = v4[2](v4, v6, v9);

  return v10;
}

id HKEndOfRollingMonthWithStart(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  long long v3 = [v1 currentCalendar];
  int v4 = [v3 dateByAddingUnit:16 value:31 toDate:v2 options:0];

  return v4;
}

id HKStartOfRollingYearForDate(void *a1, void *a2)
{
  long long v3 = (void *)MEMORY[0x1E4F1C9A8];
  int v4 = a2;
  id v5 = a1;
  uint64_t v6 = [v3 currentCalendar];
  uint64_t v7 = [v6 components:14 fromDate:v5];

  char v8 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  unsigned int v9 = [v8 dateFromComponents:v7];
  id v10 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v10 setYear:-1];
  [v10 setMonth:1];
  uint64_t v11 = [v8 dateByAddingComponents:v10 toDate:v9 options:0];
  unint64_t v12 = v4[2](v4, v8, v11);

  return v12;
}

id HKEndOfRollingYearWithStart(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  long long v3 = [v1 currentCalendar];
  int v4 = [v3 dateByAddingUnit:4 value:1 toDate:v2 options:0];

  return v4;
}

uint64_t HKDateMidpoint(void *a1, void *a2)
{
  id v3 = a2;
  [a1 timeIntervalSinceReferenceDate];
  double v5 = v4;
  [v3 timeIntervalSinceReferenceDate];
  double v7 = v6;

  char v8 = (void *)MEMORY[0x1E4F1C9C8];
  return [v8 dateWithTimeIntervalSinceReferenceDate:(v5 + v7) * 0.5];
}

void sub_1E0B9A17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0B9ACA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0B9B134(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1E0B9B57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _DefaultOverlayDeselectDelay()
{
  uint64_t v0 = [MEMORY[0x1E4F2B860] sharedBehavior];
  int v1 = [v0 isAppleInternalInstall];

  double v2 = 4.0;
  if (v1)
  {
    id v3 = objc_alloc(MEMORY[0x1E4F1CB18]);
    double v4 = (void *)[v3 initWithSuiteName:*MEMORY[0x1E4F2BD98]];
    if (objc_msgSend(v4, "hk_keyExists:", @"HKOverlayDeselectDelayInSec"))
    {
      [v4 doubleForKey:@"HKOverlayDeselectDelayInSec"];
      double v2 = v5;
    }
  }
  return v2;
}

uint64_t HKCodableSummaryCorrelatedTrendResultsReadFrom(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        a1[32] |= 1u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_47:
        uint64_t v31 = 8;
LABEL_48:
        *(void *)&a1[v31] = v21;
        goto LABEL_49;
      }
      if (v17 == 1)
      {
        unsigned int v18 = objc_alloc_init(HKCodableSummaryCorrelatedTrendValue);
        [a1 addTrendValues:v18];
        if (!PBReaderPlaceMark() || !HKCodableSummaryCorrelatedTrendValueReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    a1[32] |= 2u;
    while (1)
    {
      uint64_t v22 = *v3;
      unint64_t v23 = *(void *)(a2 + v22);
      if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
      *(void *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0) {
        goto LABEL_41;
      }
      v19 += 7;
      BOOL v14 = v20++ >= 9;
      if (v14)
      {
        uint64_t v21 = 0;
        goto LABEL_43;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v21 = 0;
    }
LABEL_43:
    uint64_t v31 = 16;
    goto LABEL_48;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1E0BA3D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0BA4460(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1E0BA6E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void DrawDiagonalSlashPatternLine(CGContext *a1, CGColor *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGContextSaveGState(a1);
  if (PatternColorSpace_onceToken != -1) {
    dispatch_once(&PatternColorSpace_onceToken, &__block_literal_global_10);
  }
  CGContextSetStrokeColorSpace(a1, (CGColorSpaceRef)PatternColorSpace_patternColorSpace);
  if (a3)
  {
    if (DiagonalPatternInvertedAndScaled_onceToken != -1) {
      dispatch_once(&DiagonalPatternInvertedAndScaled_onceToken, &__block_literal_global_409);
    }
    int v16 = &DiagonalPatternInvertedAndScaled_diagonalPattern;
  }
  else
  {
    if (DiagonalPattern_onceToken != -1) {
      dispatch_once(&DiagonalPattern_onceToken, &__block_literal_global_412);
    }
    int v16 = &DiagonalPattern_diagonalPattern;
  }
  unint64_t v17 = (CGPattern *)*v16;
  Components = CGColorGetComponents(a2);
  CGContextSetStrokePattern(a1, v17, Components);
  CGContextSetLineWidth(a1, a4);
  CGContextSetLineCap(a1, kCGLineCapButt);
  CGContextMoveToPoint(a1, a5, a6);
  CGContextAddLineToPoint(a1, a7, a8);
  CGContextStrokePath(a1);
  CGContextRestoreGState(a1);
}

CGColorSpaceRef __PatternColorSpace_block_invoke()
{
  uint64_t v0 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DB90]);
  CGColorSpaceRef result = CGColorSpaceCreatePattern(v0);
  PatternColorSpace_patternColorSpace = (uint64_t)result;
  return result;
}

CGPatternRef __DiagonalPatternInvertedAndScaled_block_invoke()
{
  long long v0 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v7.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v7.c = v0;
  *(_OWORD *)&v7.tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)&matrix.a = *(_OWORD *)&v7.a;
  *(_OWORD *)&matrix.c = v0;
  *(_OWORD *)&matrix.tx = *(_OWORD *)&v7.tx;
  CGAffineTransformTranslate(&v7, &matrix, 0.0, 4.0);
  CGAffineTransform v5 = v7;
  CGAffineTransformScale(&matrix, &v5, 1.0, -1.0);
  CGAffineTransform v7 = matrix;
  int v1 = [MEMORY[0x1E4FB1BA8] mainScreen];
  [v1 scale];
  CGFloat v3 = v2;

  CGAffineTransform v5 = v7;
  CGAffineTransformScale(&matrix, &v5, v3, v3);
  CGAffineTransform v7 = matrix;
  v8.origin.x = 0.0;
  v8.origin.y = 0.0;
  v8.size.width = 4.0;
  v8.size.height = 4.0;
  CGPatternRef result = CGPatternCreate(0, v8, &matrix, 4.0, 4.0, kCGPatternTilingConstantSpacing, 0, &DiagonalSlashPatternCallbacks);
  DiagonalPatternInvertedAndScaled_diagonalPattern = (uint64_t)result;
  return result;
}

void DiagonalSlashPattern(int a1, CGContextRef c)
{
  CGContextSetLineWidth(c, 1.0);
  CGContextSetLineCap(c, kCGLineCapSquare);
  CGContextMoveToPoint(c, 0.0, 2.0);
  CGContextAddLineToPoint(c, 2.0, 0.0);
  CGContextMoveToPoint(c, 2.0, 4.0);
  CGContextAddLineToPoint(c, 4.0, 2.0);
  CGContextStrokePath(c);
}

CGPatternRef __DiagonalPattern_block_invoke()
{
  long long v0 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v5.a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v5.c = v0;
  *(_OWORD *)&v5.tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  uint64_t v1 = 0;
  *(void *)&long long v0 = 0;
  double v2 = 4.0;
  double v3 = 4.0;
  CGPatternRef result = CGPatternCreate(0, *(CGRect *)((char *)&v0 - 8), &v5, 4.0, 4.0, kCGPatternTilingConstantSpacing, 0, &DiagonalSlashPatternCallbacks);
  DiagonalPattern_diagonalPattern = (uint64_t)result;
  return result;
}

void sub_1E0BAAFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

uint64_t HKCodableSummaryTrendLineViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CGAffineTransform v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              unsigned int v18 = objc_alloc_init(HKCodableDateInterval);
              objc_storeStrong((id *)(a1 + 16), v18);
              if (PBReaderPlaceMark() && HKCodableDateIntervalReadFrom((uint64_t)v18, a2))
              {
                PBReaderRecallMark();

                goto LABEL_32;
              }

              return 0;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 1u;
              uint64_t v20 = *v3;
              unint64_t v21 = *(void *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v20) = v21 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v22 = 0;
              }
              *(void *)(a1 + 8) = v22;
              goto LABEL_32;
            case 3u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 32;
              goto LABEL_29;
            case 4u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 24;
LABEL_29:
              char v25 = *(void **)(a1 + v24);
              *(void *)(a1 + v24) = v23;

              goto LABEL_32;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_32:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableLevelViewDataConfigurationReadFrom(void *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    CGAffineTransform v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v22 = objc_alloc_init(HKCodableLevelViewDataConfigurationBucket);
        [a1 addSortedNormalizedBuckets:v22];
        if (!PBReaderPlaceMark()
          || (HKCodableLevelViewDataConfigurationBucketReadFrom((uint64_t)v22, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          uint64_t v21 = 0;
        }
        a1[1] = v21;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BAF958(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1E0BB1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0BBA878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_1E0BBAF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0BBB6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_1E0BBB8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BBBF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BBC3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BBDC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BBE5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0BBEB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1E0BBF204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0BC39A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSOSUtilitiesClass()
{
  uint64_t v4 = 0;
  CGAffineTransform v5 = &v4;
  uint64_t v6 = 0x2050000000;
  long long v0 = (void *)getSOSUtilitiesClass_softClass;
  uint64_t v7 = getSOSUtilitiesClass_softClass;
  if (!getSOSUtilitiesClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSOSUtilitiesClass_block_invoke;
    v3[3] = &unk_1E6D514F8;
    v3[4] = &v4;
    __getSOSUtilitiesClass_block_invoke((uint64_t)v3);
    long long v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1E0BC3A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSOSUtilitiesClass_block_invoke(uint64_t a1)
{
  SOSLibrary();
  Class result = objc_getClass("SOSUtilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSOSUtilitiesClass_block_invoke_cold_1();
  }
  getSOSUtilitiesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void SOSLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!SOSLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __SOSLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E6D51F80;
    uint64_t v2 = 0;
    SOSLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary) {
    SOSLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __SOSLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SOSLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getSOSContactsManagerClass_block_invoke(uint64_t a1)
{
  SOSLibrary();
  Class result = objc_getClass("SOSContactsManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSOSContactsManagerClass_block_invoke_cold_1();
  }
  getSOSContactsManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL HKCodableSummaryCorrelatedTrendValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(HKCodableSummaryTrendValue **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(HKCodableSummaryTrendValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !HKCodableSummaryTrendValueReadFrom((char *)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

double HKRangeMax(double result, double a2)
{
  double v2 = result + a2;
  if (result < v2) {
    return v2;
  }
  return result;
}

double HKRangeMin(double result, double a2)
{
  double v2 = result + a2;
  if (result >= v2) {
    return v2;
  }
  return result;
}

double HKRangeMid(double a1, double a2)
{
  return a1 + a2 * 0.5;
}

uint64_t HKCodableMetadataDictionaryReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableMetadataKeyValuePair);
        [a1 addKeyValuePairs:v17];
        if (!PBReaderPlaceMark() || (HKCodableMetadataKeyValuePairReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BCA0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void _drawSeriesGroup(CGContext *a1, int a2, CGColor *a3, CGColor *a4, uint64_t a5, CGFloat a6, CGFloat a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  if (vabdd_f64(a9, a10) >= HKUIOnePixel())
  {
    if (a2)
    {
      uint64_t v22 = a4;
      CGFloat v23 = a7;
    }
    else
    {
      uint64_t v22 = a3;
      CGFloat v23 = a6;
    }
    _drawSeriesLine(a1, v22, v23, a9, a10, a11);
  }
  else
  {
    +[HKGraphSeries drawFilledMarkerInContext:a1 color:a5 x:a9 y:a11 radius:a8];
  }
}

void _drawSeriesLine(CGContext *a1, CGColor *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContextSetLineWidth(a1, a3);
  CGContextSetLineCap(a1, kCGLineCapRound);
  CGContextSetStrokeColorWithColor(a1, a2);
  CGContextMoveToPoint(a1, a4, a6);
  CGContextAddLineToPoint(a1, a5, a6);
  CGContextStrokePath(a1);
}

void sub_1E0BCB818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BCBA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1E0BCC470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose((const void *)(v62 - 232), 8);
  _Block_object_dispose((const void *)(v62 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_1E0BCCE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose((const void *)(v58 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BCDAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1E0BCE28C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1E0BD01AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1E0BD1D4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

double HKChartSeriesPointMarkerBaseRect(void *a1)
{
  [a1 size];
  return v1 * -0.5;
}

void _drawSolidCircleInContext(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11 = a2;
  CGContextSaveGState(a1);
  id v12 = v11;
  char v13 = (CGColor *)[v12 CGColor];

  CGContextSetFillColorWithColor(a1, v13);
  v15.origin.x = a3;
  v15.origin.y = a4;
  v15.size.width = a5;
  v15.size.height = a6;
  CGContextFillEllipseInRect(a1, v15);
  CGContextRestoreGState(a1);
}

void _drawHollowCircleInContext(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  _drawSolidCircleInContext(a1, a2, a3, a4, a5, a6);
  v17.origin.CGFloat x = a3;
  v17.origin.CGFloat y = a4;
  v17.size.CGFloat width = a5;
  v17.size.CGFloat height = a6;
  CGRect v18 = CGRectInset(v17, 2.0, 2.0);
  CGFloat x = v18.origin.x;
  CGFloat y = v18.origin.y;
  CGFloat width = v18.size.width;
  CGFloat height = v18.size.height;
  id v15 = [MEMORY[0x1E4FB1618] systemBackgroundColor];
  _drawSolidCircleInContext(a1, v15, x, y, width, height);
}

BOOL HKCodableStateOfMindValenceDistributionSummaryReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        CGRect v17 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    CGRect v17 = objc_alloc_init(HKCodableStateOfMindValenceDistributionData);
    [a1 addValenceDistributionData:v17];
    if (!PBReaderPlaceMark()
      || (HKCodableStateOfMindValenceDistributionDataReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BD52C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0BD75A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t HKCodableSummarySupplementaryValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        CGRect v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HKStringForBloodType(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_not_set";
      goto LABEL_11;
    case 1:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_a+";
      goto LABEL_11;
    case 2:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_a-";
      goto LABEL_11;
    case 3:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_b+";
      goto LABEL_11;
    case 4:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_b-";
      goto LABEL_11;
    case 5:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_ab+";
      goto LABEL_11;
    case 6:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_ab-";
      goto LABEL_11;
    case 7:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_o+";
      goto LABEL_11;
    case 8:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"blood_type_o-";
LABEL_11:
      double v1 = [v2 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

      break;
    default:
      break;
  }
  return v1;
}

BOOL HKCodableDateIntervalReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        char v23 = &OBJC_IVAR___HKCodableDateInterval__startDate;
LABEL_32:
        *(void *)(a1 + *v23) = v20;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    *(unsigned char *)(a1 + 24) |= 1u;
    uint64_t v21 = *v3;
    unint64_t v22 = *(void *)(a2 + v21);
    if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v22);
      *(void *)(a2 + v21) = v22 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + *v5) = 1;
      uint64_t v20 = 0;
    }
    char v23 = &OBJC_IVAR___HKCodableDateInterval__endDate;
    goto LABEL_32;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL HKCodableStatisticsCollectionReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        CGRect v17 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (HKCodableDateComponentsReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    CGRect v17 = objc_alloc_init(HKCodableStatistics);
    [a1 addStatistics:v17];
    if (!PBReaderPlaceMark() || (HKCodableStatisticsReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BDC3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKCodableHealthRecordsProviderReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    uint64_t v19 = 8;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _BoldImageCache()
{
  long long v0 = (void *)_BoldImageCache___cache;
  if (!_BoldImageCache___cache)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F1C998]);
    uint64_t v2 = (void *)_BoldImageCache___cache;
    _BoldImageCache___cache = (uint64_t)v1;

    long long v0 = (void *)_BoldImageCache___cache;
  }
  return v0;
}

id _NormalImageCache()
{
  long long v0 = (void *)_NormalImageCache___cache;
  if (!_NormalImageCache___cache)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F1C998]);
    uint64_t v2 = (void *)_NormalImageCache___cache;
    _NormalImageCache___cache = (uint64_t)v1;

    long long v0 = (void *)_NormalImageCache___cache;
  }
  return v0;
}

BOOL HKCodableSleepSummaryEntryReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(HKCodableSleepPeriod);
    [a1 addPeriod:v17];
    if (!PBReaderPlaceMark() || !HKCodableSleepPeriodReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BE2400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_1E0BE2764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

id HKHealthPrivacyServiceRemoteAuthorizationViewControllerInterface()
{
  long long v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1F3D18D78];
  id v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_setRequestRecord_presentationRequests_, 1, 0);
  return v0;
}

uint64_t HKCodableSummaryBloodPressureValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)(a1 + 8) = v23;
      }
      else
      {
        if (v18 == 2)
        {
          uint64_t v19 = objc_alloc_init(HKCodableQuantity);
          uint64_t v20 = 16;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v19 = objc_alloc_init(HKCodableQuantity);
          uint64_t v20 = 24;
        }
        objc_storeStrong((id *)(a1 + v20), v19);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BEC8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_0_5(id a1)
{
  return a1;
}

id _HKMediumScaledPreferredBodyFontWithValue(double a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FB08E0];
  uint64_t v3 = [MEMORY[0x1E4FB08E0] preferredFontForTextStyle:*MEMORY[0x1E4FB28C8]];
  [v3 _scaledValueForValue:a1];
  uint64_t v4 = objc_msgSend(v2, "systemFontOfSize:weight:");

  return v4;
}

id _HKMediumScaledPreferredBodyFontWithButton(void *a1)
{
  uint64_t v1 = [a1 titleLabel];
  uint64_t v2 = [v1 font];
  [v2 pointSize];
  uint64_t v4 = _HKMediumScaledPreferredBodyFontWithValue(v3);

  return v4;
}

BOOL HKCodableChartInsulinDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(HKCodableChartInsulinValue);
        [a1 addTotalInsulinValues:v17];
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        unint64_t v17 = objc_alloc_init(HKCodableChartInsulinValue);
        [a1 addBasalInsulinValues:v17];
      }
      if (!PBReaderPlaceMark() || (HKCodableChartInsulinValueReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0BF06EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1E0BF1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableQueryAnchorReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  CGAffineTransform v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        unint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HKQuantityDistributionBucketSizeForQuantityType(void *a1)
{
  uint64_t v1 = HKQuantityDistributionBucketSizeForQuantityType_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&HKQuantityDistributionBucketSizeForQuantityType_onceToken, &__block_literal_global_21);
  }
  double v3 = (void *)HKQuantityDistributionBucketSizeForQuantityType_quantityTypeBucketSizes;
  uint64_t v4 = [v2 identifier];

  CGAffineTransform v5 = [v3 objectForKeyedSubscript:v4];
  uint64_t v6 = v5;
  if (!v5) {
    CGAffineTransform v5 = &unk_1F3C22990;
  }
  id v7 = v5;

  return v7;
}

void __HKQuantityDistributionBucketSizeForQuantityType_block_invoke()
{
  v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F2A898];
  v3[0] = *MEMORY[0x1E4F2A868];
  v3[1] = v0;
  v4[0] = &unk_1F3C22970;
  v4[1] = &unk_1F3C22980;
  uint64_t v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:v3 count:2];
  id v2 = (void *)HKQuantityDistributionBucketSizeForQuantityType_quantityTypeBucketSizes;
  HKQuantityDistributionBucketSizeForQuantityType_quantityTypeBucketSizes = v1;
}

double _doubleValueIfCompatibleForQuantity(void *a1, void *a2, objc_class *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = [v5 _unit];
  int v8 = [v7 _isCompatibleWithUnit:v6];

  if (v8)
  {
    [v5 doubleValueForUnit:v6];
    double v10 = v9;
  }
  else
  {
    if (!LogFirstIncompatibleUnitConversionSet)
    {
      id v11 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      unint64_t v12 = (void *)LogFirstIncompatibleUnitConversionSet;
      LogFirstIncompatibleUnitConversionSet = (uint64_t)v11;
    }
    char v13 = [v5 _unit];
    char v14 = [v13 unitString];

    int v15 = NSString;
    int v16 = [v6 unitString];
    uint64_t v17 = [v15 stringWithFormat:@"%@:%@", v14, v16];

    unint64_t v18 = NSStringFromClass(a3);
    if (([(id)LogFirstIncompatibleUnitConversionSet containsObject:v17] & 1) == 0)
    {
      _HKInitializeLogging();
      uint64_t v19 = (void *)*MEMORY[0x1E4F29F90];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F90], OS_LOG_TYPE_FAULT))
      {
        uint64_t v21 = v19;
        unint64_t v22 = [v6 unitString];
        *(_DWORD *)buf = 138412802;
        uint64_t v24 = v18;
        __int16 v25 = 2112;
        unsigned int v26 = v14;
        __int16 v27 = 2112;
        unint64_t v28 = v22;
        _os_log_fault_impl(&dword_1E0B26000, v21, OS_LOG_TYPE_FAULT, "[%@] Incompatible unit conversion for %@ to %@", buf, 0x20u);
      }
      [(id)LogFirstIncompatibleUnitConversionSet addObject:v17];
    }

    double v10 = 0.0;
  }

  return v10;
}

__CFString *_NSStringFromSelectedRangeStatisticsType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x1F) {
    return @"HKSelectedRangeStatisticsTypeNone";
  }
  else {
    return off_1E6D52960[a1 - 1];
  }
}

__CFString *_NSStringFromSelectedRangeDataType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x26) {
    return @"HKSelectedRangeDataTypeNone";
  }
  else {
    return off_1E6D52A60[a1 - 1];
  }
}

uint64_t HKCodableSampleChartDataReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_48;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            uint64_t v20 = 0;
            goto LABEL_50;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_50:
        uint64_t v38 = 8;
        goto LABEL_55;
      case 2u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 56) |= 4u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v20 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v15 = v27++ >= 9;
              if (v15)
              {
                uint64_t v20 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_54:
        uint64_t v38 = 24;
LABEL_55:
        *(void *)(a1 + v38) = v20;
        goto LABEL_61;
      case 3u:
        *(unsigned char *)(a1 + 56) |= 8u;
        uint64_t v32 = *v3;
        unint64_t v33 = *(void *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v34 = *(void *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v34 = 0;
        }
        uint64_t v39 = 32;
        goto LABEL_60;
      case 4u:
        *(unsigned char *)(a1 + 56) |= 2u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v34 = *(void *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v34 = 0;
        }
        uint64_t v39 = 16;
LABEL_60:
        *(void *)(a1 + v39) = v34;
        goto LABEL_61;
      case 5u:
        char v37 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 40), v37);
        if (!PBReaderPlaceMark() || (HKCodableMetadataDictionaryReadFrom(v37, a2) & 1) == 0) {
          goto LABEL_63;
        }
        goto LABEL_46;
      case 6u:
        char v37 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 48), v37);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v37, a2))
        {
LABEL_46:
          PBReaderRecallMark();

LABEL_61:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_63:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_61;
    }
  }
}

id HKErrorTableViewCell(void *a1)
{
  id v1 = a1;
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4FB1D08]) initWithStyle:0 reuseIdentifier:0];
  if ([MEMORY[0x1E4F2B860] isAppleInternalInstall])
  {
    double v3 = [v2 textLabel];
    [v3 setText:v1];
    uint64_t v4 = [MEMORY[0x1E4FB1618] redColor];
    [v2 setBackgroundColor:v4];

    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    id v6 = [NSString stringWithUTF8String:"UITableViewCell *HKErrorTableViewCell(NSString *__strong)"];
    [v5 handleFailureInFunction:v6, @"HKTableViewController.m", 65, @"Unexpected error in creation of table view cell: %@", v1 file lineNumber description];
  }
  return v2;
}

void OUTLINED_FUNCTION_3_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1E0C0B9F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1E0C1159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_1E0C117A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __setCurrentlyEditingCell(void *a1)
{
  id v2 = a1;
  uint64_t v3 = __setCurrentlyEditingCell___currentCell;
  if ((id)__setCurrentlyEditingCell___currentCell != v2)
  {
    id v5 = v2;
    [(id)__setCurrentlyEditingCell___currentCell commitEditing];
    objc_storeStrong((id *)&__setCurrentlyEditingCell___currentCell, a1);
    id v2 = v5;
  }
  return MEMORY[0x1F41817F8](v3, v2);
}

uint64_t HKCodablePrescriptionTypeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 3)
      {
        uint64_t v23 = PBReaderReadString();
        char v24 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v23;
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_33:
        *(unsigned char *)(a1 + 16) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id ClampedWeightLoggingOutOfBoundsValues(void *a1)
{
  id v1 = a1;
  [v1 doubleValue];
  if (v2 < 0.0)
  {
    _HKInitializeLogging();
    uint64_t v3 = *MEMORY[0x1E4F29F28];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F28], OS_LOG_TYPE_FAULT)) {
      ClampedWeightLoggingOutOfBoundsValues_cold_1((uint64_t)v1, v3);
    }
    uint64_t v4 = NSNumber;
    double v5 = 0.0;
LABEL_9:
    id v8 = [v4 numberWithDouble:v5];
    goto LABEL_11;
  }
  [v1 doubleValue];
  if (v6 > 658.0)
  {
    _HKInitializeLogging();
    id v7 = *MEMORY[0x1E4F29F28];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F28], OS_LOG_TYPE_FAULT)) {
      ClampedWeightLoggingOutOfBoundsValues_cold_2((uint64_t)v1, v7);
    }
    uint64_t v4 = NSNumber;
    double v5 = 658.0;
    goto LABEL_9;
  }
  id v8 = v1;
LABEL_11:
  unsigned int v9 = v8;

  return v9;
}

BOOL HKCodableDismissibleCellHeaderViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableCellHeaderViewModel);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (HKCodableCellHeaderViewModelReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(HKCodableColorRepresentation);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (HKCodableColorRepresentationReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C16F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableChartHandwashingEventDataSourceDataReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableHandwashingEvent);
        [a1 addEvents:v17];
        if (!PBReaderPlaceMark() || (HKCodableHandwashingEventReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C19ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0C1C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __HKPopulationNormsSortedAgeRangesFromTable_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = [a2 rangeValue];
  unint64_t v6 = [v4 rangeValue];

  if (v5 >= v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = -1;
  }
  if (v5 > v6) {
    return 1;
  }
  else {
    return v7;
  }
}

double hk_rectRoundToViewScale(void *a1)
{
  id v1 = a1;
  UIPointRoundToViewScale();
  double v3 = v2;
  UISizeRoundToViewScale();

  return v3;
}

id HKUnitPreferenceControllerAvailableUnitsForDisplayType(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F1CA80];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  uint64_t v4 = [v2 displayTypeIdentifier];

  switch(v4)
  {
    case 0:
    case 7:
    case 12:
    case 13:
    case 57:
    case 60:
    case 89:
    case 101:
    case 111:
    case 140:
    case 145:
    case 147:
    case 156:
    case 178:
LABEL_5:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"count";
      goto LABEL_40;
    case 1:
    case 14:
    case 18:
    case 19:
    case 182:
    case 194:
LABEL_9:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"%";
      goto LABEL_40;
    case 2:
      uint64_t v19 = [MEMORY[0x1E4F2B618] unitFromString:@"ft"];
      [v3 addObject:v19];

      uint64_t v20 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v21 = @"cm";
LABEL_35:
      unint64_t v36 = [v20 unitFromString:v21];
      [v3 addObject:v36];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      goto LABEL_36;
    case 3:
    case 4:
      BOOL v14 = [MEMORY[0x1E4F2B618] unitFromString:@"lb"];
      [v3 addObject:v14];

      int v15 = [MEMORY[0x1E4F2B618] unitFromString:@"kg"];
      [v3 addObject:v15];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"st";
      goto LABEL_40;
    case 5:
    case 61:
    case 118:
    case 137:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"count/min";
      goto LABEL_40;
    case 6:
    case 11:
    case 16:
    case 17:
    case 59:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 76:
    case 77:
    case 79:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 112:
    case 115:
    case 116:
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 141:
    case 142:
    case 143:
    case 144:
    case 146:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 174:
    case 175:
    case 176:
    case 177:
    case 180:
    case 181:
    case 184:
    case 185:
    case 186:
    case 190:
    case 191:
    case 192:
    case 193:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
      break;
    case 8:
    case 83:
    case 113:
    case 138:
LABEL_8:
      unint64_t v10 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
      [v3 addObject:v10];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"km";
      goto LABEL_40;
    case 9:
    case 10:
    case 29:
      unint64_t v12 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
      [v3 addObject:v12];

      char v13 = [MEMORY[0x1E4F2B618] unitFromString:@"Cal"];
      [v3 addObject:v13];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"kJ";
      goto LABEL_40;
    case 15:
      char v22 = [MEMORY[0x1E4F2B618] unitFromString:@"mg/dL"];
      [v3 addObject:v22];

      uint64_t v23 = _HKBloodGlucoseMillimolesPerLiterUnit();
      goto LABEL_41;
    case 20:
    case 21:
    case 22:
    case 23:
    case 26:
    case 27:
    case 28:
    case 30:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"g";
      goto LABEL_40;
    case 24:
    case 25:
    case 32:
    case 34:
    case 36:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 45:
    case 46:
    case 48:
    case 49:
    case 51:
    case 52:
    case 55:
    case 56:
    case 78:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"mg";
      goto LABEL_40;
    case 31:
    case 33:
    case 35:
    case 37:
    case 43:
    case 44:
    case 47:
    case 50:
    case 53:
    case 54:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"mcg";
      goto LABEL_40;
    case 58:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"mcS";
      goto LABEL_40;
    case 62:
    case 90:
LABEL_11:
      uint64_t v11 = [MEMORY[0x1E4F2B618] unitFromString:@"degC"];
      [v3 addObject:v11];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"degF";
      goto LABEL_40;
    case 71:
    case 72:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"L";
      goto LABEL_40;
    case 73:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"L/min";
      goto LABEL_40;
    case 75:
    case 179:
    case 189:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"min";
      goto LABEL_40;
    case 80:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"mmHg";
      goto LABEL_40;
    case 87:
      char v24 = [MEMORY[0x1E4F2B618] unitFromString:@"mL"];
      [v3 addObject:v24];

      __int16 v25 = [MEMORY[0x1E4F2B618] unitFromString:@"L"];
      [v3 addObject:v25];

      char v26 = [MEMORY[0x1E4F2B618] unitFromString:@"fl_oz_us"];
      [v3 addObject:v26];

      unsigned int v27 = [MEMORY[0x1E4F2B618] unitFromString:@"pt_us"];
      [v3 addObject:v27];

      uint64_t v28 = [MEMORY[0x1E4F2B618] unitFromString:@"fl_oz_imp"];
      [v3 addObject:v28];

      uint64_t v29 = [MEMORY[0x1E4F2B618] unitFromString:@"pt_imp"];
      [v3 addObject:v29];

      unint64_t v30 = [MEMORY[0x1E4F2B618] unitFromString:@"cup_us"];
      [v3 addObject:v30];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"cup_imp";
      goto LABEL_40;
    case 110:
      char v31 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
      [v3 addObject:v31];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"yd";
      goto LABEL_40;
    case 114:
      uint64_t v32 = [MEMORY[0x1E4F2B618] unitFromString:@"in"];
      [v3 addObject:v32];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"cm";
      goto LABEL_40;
    case 124:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"ml/(kg*min)";
      goto LABEL_40;
    case 125:
      uint64_t v23 = [MEMORY[0x1E4F2B618] internationalUnit];
      goto LABEL_41;
    case 139:
LABEL_19:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"ms";
      goto LABEL_40;
    case 172:
    case 173:
LABEL_14:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"dBASPL";
      goto LABEL_40;
    case 183:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
LABEL_36:
      unint64_t v6 = @"m";
      goto LABEL_40;
    case 187:
LABEL_4:
      uint64_t v7 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
      [v3 addObject:v7];

      char v8 = [MEMORY[0x1E4F2B618] unitFromString:@"ft/s"];
      [v3 addObject:v8];

      unsigned int v9 = [MEMORY[0x1E4F2B618] unitFromString:@"mi/hr"];
      [v3 addObject:v9];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"km/hr";
      goto LABEL_40;
    case 188:
LABEL_18:
      char v17 = (void *)MEMORY[0x1E4F2B618];
      unsigned int v18 = @"cm";
LABEL_33:
      uint64_t v35 = [v17 unitFromString:v18];
      [v3 addObject:v35];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"in";
      goto LABEL_40;
    case 195:
    case 196:
      int v16 = [MEMORY[0x1E4F2B618] unitFromString:@"m/s"];
      [v3 addObject:v16];

      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"ft/s";
      goto LABEL_40;
    case 237:
      unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
      unint64_t v6 = @"s";
LABEL_40:
      uint64_t v23 = [v5 unitFromString:v6];
LABEL_41:
      char v37 = (void *)v23;
      [v3 addObject:v23];

      break;
    default:
      switch(v4)
      {
        case 248:
          goto LABEL_9;
        case 251:
        case 275:
        case 276:
          goto LABEL_5;
        case 256:
        case 277:
          goto LABEL_11;
        case 258:
          unint64_t v33 = [MEMORY[0x1E4F2B618] unitFromString:@"m"];
          [v3 addObject:v33];

          uint64_t v34 = [MEMORY[0x1E4F2B618] unitFromString:@"cm"];
          [v3 addObject:v34];

          char v17 = (void *)MEMORY[0x1E4F2B618];
          unsigned int v18 = @"ft";
          goto LABEL_33;
        case 259:
          goto LABEL_18;
        case 260:
          goto LABEL_19;
        case 269:
          uint64_t v20 = (void *)MEMORY[0x1E4F2B618];
          unint64_t v21 = @"ft";
          goto LABEL_35;
        case 270:
          unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
          unint64_t v6 = @"W";
          goto LABEL_40;
        case 272:
          goto LABEL_14;
        case 274:
        case 281:
        case 301:
        case 302:
        case 303:
          goto LABEL_4;
        case 279:
          unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
          unint64_t v6 = @"lx";
          goto LABEL_40;
        case 286:
          unint64_t v5 = (void *)MEMORY[0x1E4F2B618];
          unint64_t v6 = @"kcal/(kg*hr)";
          goto LABEL_40;
        case 294:
        case 295:
        case 296:
        case 297:
          goto LABEL_8;
        default:
          goto LABEL_42;
      }
  }
LABEL_42:
  return v3;
}

id _DaySummariesForMappingData(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = [v1 chartPoints];
  }
  else
  {
    id v2 = v1;
  }
  id v3 = v2;

  return v3;
}

BOOL HKCodableHealthRecordsCodeReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_25;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_25;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_25:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSleepSummaryCollectionReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableSleepSummaryEntry);
        [a1 addSleepSummaryEntry:v17];
        if (!PBReaderPlaceMark() || !HKCodableSleepSummaryEntryReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C2FBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableTimePeriodDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryBalanceMetricsValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = objc_alloc_init(HKCodableSleepingSampleBaselineComparison);
        [(id)a1 addBaselineComparison:v24];
        if (!PBReaderPlaceMark()
          || (HKCodableSleepingSampleBaselineComparisonReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_37;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_39;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_39:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v24 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v24, a2)) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C33E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0C34344(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryMostRecentRangeValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)(a1 + 8) = v23;
      }
      else
      {
        if (v18 == 2)
        {
          unsigned int v19 = objc_alloc_init(HKCodableQuantity);
          uint64_t v20 = 16;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          unsigned int v19 = objc_alloc_init(HKCodableQuantity);
          uint64_t v20 = 24;
        }
        objc_storeStrong((id *)(a1 + v20), v19);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C38D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_1E0C3A264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t HKCodableHealthRecordsIndividualRecordReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v18 = objc_alloc_init(HKCodableHealthRecordsCode);
        [(id)a1 addCode:v18];
        if (PBReaderPlaceMark() && HKCodableHealthRecordsCodeReadFrom((uint64_t)v18, a2)) {
          goto LABEL_30;
        }
        goto LABEL_41;
      case 2u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 32;
        goto LABEL_35;
      case 3u:
        *(unsigned char *)(a1 + 72) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + 8) = v24;
        goto LABEL_36;
      case 4u:
        unint64_t v18 = objc_alloc_init(HKCodableQuantityValueWithRange);
        [(id)a1 addValueWithRange:v18];
        if (PBReaderPlaceMark() && HKCodableQuantityValueWithRangeReadFrom((char *)v18, a2))
        {
LABEL_30:
          PBReaderRecallMark();

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      case 5u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 48;
        goto LABEL_35;
      case 6u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 56;
        goto LABEL_35;
      case 7u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 24;
        goto LABEL_35;
      case 8u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 40;
LABEL_35:
        __int16 v25 = *(void **)(a1 + v21);
        *(void *)(a1 + v21) = v20;

        goto LABEL_36;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_36;
    }
  }
}

void sub_1E0C3E844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0C420F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

id getSOSUtilitiesClass_0()
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getSOSUtilitiesClass_softClass_0;
  uint64_t v7 = getSOSUtilitiesClass_softClass_0;
  if (!getSOSUtilitiesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getSOSUtilitiesClass_block_invoke_0;
    v3[3] = &unk_1E6D514F8;
    v3[4] = &v4;
    __getSOSUtilitiesClass_block_invoke_0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1E0C47700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0C478D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSOSUtilitiesClass_block_invoke_0(uint64_t a1)
{
  SOSLibrary_0();
  Class result = objc_getClass("SOSUtilities");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSOSUtilitiesClass_block_invoke_cold_1_0();
  }
  getSOSUtilitiesClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void SOSLibrary_0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!SOSLibraryCore_frameworkLibrary_0)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __SOSLibraryCore_block_invoke_0;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E6D53610;
    uint64_t v2 = 0;
    SOSLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary_0) {
    SOSLibrary_cold_1_0(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __SOSLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  SOSLibraryCore_frameworkLibrary_0 = result;
  return result;
}

Class __getSOSManagerClass_block_invoke(uint64_t a1)
{
  SOSLibrary_0();
  Class result = objc_getClass("SOSManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSOSManagerClass_block_invoke_cold_1();
  }
  getSOSManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableSummaryVisualizationDataPresencePointReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_35:
        *(unsigned char *)(a1 + 16) = v20 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C48D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

BOOL HKCodableDayIndexRangeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            uint64_t v24 = &OBJC_IVAR___HKCodableDayIndexRange__dayIndex;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            uint64_t v19 = 0;
            uint64_t v24 = &OBJC_IVAR___HKCodableDayIndexRange__dayIndex;
            goto LABEL_41;
          }
        }
        uint64_t v24 = &OBJC_IVAR___HKCodableDayIndexRange__dayIndex;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_41:
        *(void *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 24) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        uint64_t v24 = &OBJC_IVAR___HKCodableDayIndexRange__duration;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        uint64_t v19 = 0;
        uint64_t v24 = &OBJC_IVAR___HKCodableDayIndexRange__duration;
        goto LABEL_41;
      }
    }
    uint64_t v24 = &OBJC_IVAR___HKCodableDayIndexRange__duration;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HKUILocalizedStringForStateOfMind(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 valenceClassification];
  uint64_t v3 = [v1 reflectiveInterval];

  return HKUILocalizedStringForValenceClassificationAndReflectiveInterval(v2, v3);
}

id HKUILocalizedStringForValenceClassificationAndReflectiveInterval(uint64_t a1, uint64_t a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"VERY_UNPLEASANT_DAY";
      uint64_t v6 = @"VERY_UNPLEASANT_MOMENT";
      goto LABEL_10;
    case 2:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"UNPLEASANT_DAY";
      uint64_t v6 = @"UNPLEASANT_MOMENT";
      goto LABEL_10;
    case 3:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"SLIGHTLY_UNPLEASANT_DAY";
      uint64_t v6 = @"SLIGHTLY_UNPLEASANT_MOMENT";
      goto LABEL_10;
    case 4:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"NEUTRAL_DAY";
      uint64_t v6 = @"NEUTRAL_MOMENT";
      goto LABEL_10;
    case 5:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"SLIGHTLY_PLEASANT_DAY";
      uint64_t v6 = @"SLIGHTLY_PLEASANT_MOMENT";
      goto LABEL_10;
    case 6:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"PLEASANT_DAY";
      uint64_t v6 = @"PLEASANT_MOMENT";
      goto LABEL_10;
    case 7:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      unint64_t v5 = @"VERY_PLEASANT_DAY";
      uint64_t v6 = @"VERY_PLEASANT_MOMENT";
LABEL_10:
      if (a2 == 1) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v5;
      }
      break;
    default:
      uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v4 = v3;
      uint64_t v7 = @"UNKNOWN_VALENCE_CLASSIFICATION";
      break;
  }
  char v8 = [v3 localizedStringForKey:v7 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

  return v8;
}

id HKUILocalizedStringForValenceClassification(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_VERY_UNPLEASANT";
      break;
    case 2:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_UNPLEASANT";
      break;
    case 3:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_SLIGHTLY_UNPLEASANT";
      break;
    case 4:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_NEUTRAL";
      break;
    case 5:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_SLIGHTLY_PLEASANT";
      break;
    case 6:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_PLEASANT";
      break;
    case 7:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_VERY_PLEASANT";
      break;
    default:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"UNKNOWN_VALENCE_CLASSIFICATION";
      break;
  }
  uint64_t v4 = [v1 localizedStringForKey:v3 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

  return v4;
}

id HKUILocalizedStringForValenceClassificationRangeBound(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_VERY_UNPLEASANT";
      break;
    case 2:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_UNPLEASANT";
      break;
    case 3:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_SLIGHTLY_UNPLEASANT";
      break;
    case 4:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_NEUTRAL";
      break;
    case 5:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_SLIGHTLY_PLEASANT";
      break;
    case 6:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_PLEASANT";
      break;
    case 7:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"VALENCE_CLASSIFICATION_RANGE_BOUND_VERY_PLEASANT";
      break;
    default:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"UNKNOWN_VALENCE_CLASSIFICATION_RANGE_BOUND";
      break;
  }
  uint64_t v4 = [v1 localizedStringForKey:v3 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

  return v4;
}

id HKUILocalizedStringForValenceRange(double a1, double a2)
{
  uint64_t v4 = HKStateOfMindValenceClassificationForValence();
  uint64_t v5 = HKStateOfMindValenceClassificationForValence();
  uint64_t v6 = (void *)v5;
  uint64_t v7 = 0;
  if (v4 && v5)
  {
    char v8 = HKUILocalizedStringForValenceClassificationRangeBound([v4 integerValue]);
    unsigned int v9 = HKUILocalizedStringForValenceClassificationRangeBound([v6 integerValue]);
    if ([v4 isEqualToNumber:v6])
    {
      uint64_t v7 = HKUILocalizedStringForValenceClassification([v4 integerValue]);
    }
    else
    {
      unint64_t v10 = NSString;
      uint64_t v11 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      unint64_t v12 = [v11 localizedStringForKey:@"VALENCE_CLASSIFICATION_RANGE" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];
      if (a1 <= a2) {
        objc_msgSend(v10, "stringWithFormat:", v12, v9, v8);
      }
      else {
      uint64_t v7 = objc_msgSend(v10, "stringWithFormat:", v12, v8, v9);
      }
    }
  }

  return v7;
}

id HKUILocalizedStringForStateOfMindLabel(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"AMAZED_LABEL";
      break;
    case 2:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"AMUSED_LABEL";
      break;
    case 3:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"ANGRY_LABEL";
      break;
    case 4:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"ANXIOUS_LABEL";
      break;
    case 5:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"ASHAMED_LABEL";
      break;
    case 6:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"BRAVE_LABEL";
      break;
    case 7:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"CALM_LABEL";
      break;
    case 8:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"CONTENT_LABEL";
      break;
    case 9:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"DISAPPOINTED_LABEL";
      break;
    case 10:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"DISCOURAGED_LABEL";
      break;
    case 11:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"DISGUSTED_LABEL";
      break;
    case 12:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"EMBARRASSED_LABEL";
      break;
    case 13:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"EXCITED_LABEL";
      break;
    case 14:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"FRUSTRATED_LABEL";
      break;
    case 15:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"GRATEFUL_LABEL";
      break;
    case 16:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"GUILTY_LABEL";
      break;
    case 17:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"HAPPY_LABEL";
      break;
    case 18:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"HOPELESS_LABEL";
      break;
    case 19:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"IRRITATED_LABEL";
      break;
    case 20:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"JEALOUS_LABEL";
      break;
    case 21:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"JOYFUL_LABEL";
      break;
    case 22:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"LONELY_LABEL";
      break;
    case 23:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"PASSIONATE_LABEL";
      break;
    case 24:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"PEACEFUL_LABEL";
      break;
    case 25:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"PROUD_LABEL";
      break;
    case 26:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"RELIEVED_LABEL";
      break;
    case 27:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"SAD_LABEL";
      break;
    case 28:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"SCARED_LABEL";
      break;
    case 29:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"STRESSED_LABEL";
      break;
    case 30:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"SURPRISED_LABEL";
      break;
    case 31:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"WORRIED_LABEL";
      break;
    case 32:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"ANNOYED_LABEL";
      break;
    case 33:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"CONFIDENT_LABEL";
      break;
    case 34:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"DRAINED_LABEL";
      break;
    case 35:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"HOPEFUL_LABEL";
      break;
    case 36:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"INDIFFERENT_LABEL";
      break;
    case 37:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"OVERWHELMED_LABEL";
      break;
    case 38:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"SATISFIED_LABEL";
      break;
    default:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"UNKNOWN_LABEL";
      break;
  }
  uint64_t v4 = [v1 localizedStringForKey:v3 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

  return v4;
}

id HKUILocalizedStringForStateOfMindDomain(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"COMMUNITY_DOMAIN";
      break;
    case 2:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"CURRENT_EVENTS_DOMAIN";
      break;
    case 3:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"DATING_DOMAIN";
      break;
    case 4:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"EDUCATION_DOMAIN";
      break;
    case 5:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"FAMILY_DOMAIN";
      break;
    case 6:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"FITNESS_DOMAIN";
      break;
    case 7:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"FRIENDS_DOMAIN";
      break;
    case 8:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"HEALTH_DOMAIN";
      break;
    case 9:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"HOBBIES_DOMAIN";
      break;
    case 10:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"IDENTITY_DOMAIN";
      break;
    case 11:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"MONEY_DOMAIN";
      break;
    case 12:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"PARTNER_DOMAIN";
      break;
    case 13:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"SELF_CARE_DOMAIN";
      break;
    case 14:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"SPIRITUALITY_DOMAIN";
      break;
    case 15:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"TASKS_DOMAIN";
      break;
    case 16:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"TRAVEL_DOMAIN";
      break;
    case 17:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"WORK_DOMAIN";
      break;
    case 18:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"WEATHER_DOMAIN";
      break;
    default:
      id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v2 = v1;
      uint64_t v3 = @"UNKNOWN_DOMAIN";
      break;
  }
  uint64_t v4 = [v1 localizedStringForKey:v3 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

  return v4;
}

id HKUILocalizedStringForGAD7Risk(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_RISK_NONE_TO_MINIMAL";
      goto LABEL_6;
    case 2:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_RISK_MILD";
      goto LABEL_6;
    case 3:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_RISK_MODERATE";
      goto LABEL_6;
    case 4:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_RISK_SEVERE";
LABEL_6:
      id v1 = [v2 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

      break;
    default:
      break;
  }
  return v1;
}

id HKUILocalizedStringForGAD7Answer(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_ANSWER_NOT_AT_ALL";
      goto LABEL_6;
    case 1:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_ANSWER_SEVERAL_DAYS";
      goto LABEL_6;
    case 2:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_ANSWER_MORE_THAN_HALF_THE_DAYS";
      goto LABEL_6;
    case 3:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"GAD7_ANSWER_NEARLY_EVERY_DAY";
LABEL_6:
      id v1 = [v2 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

      break;
    default:
      break;
  }
  return v1;
}

id HKUILocalizedStringForPHQ9Risk(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_RISK_NONE_TO_MINIMAL";
      goto LABEL_7;
    case 2:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_RISK_MILD";
      goto LABEL_7;
    case 3:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_RISK_MODERATE";
      goto LABEL_7;
    case 4:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_RISK_MODERATELY_SEVERE";
      goto LABEL_7;
    case 5:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_RISK_SEVERE";
LABEL_7:
      id v1 = [v2 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

      break;
    default:
      break;
  }
  return v1;
}

id HKUILocalizedStringForPHQ9Answer(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_ANSWER_NOT_AT_ALL";
      goto LABEL_7;
    case 1:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_ANSWER_SEVERAL_DAYS";
      goto LABEL_7;
    case 2:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_ANSWER_MORE_THAN_HALF_THE_DAYS";
      goto LABEL_7;
    case 3:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_ANSWER_NEARLY_EVERY_DAY";
      goto LABEL_7;
    case 4:
      uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v3 = v2;
      uint64_t v4 = @"PHQ9_ANSWER_PREFER_NOT_TO_ANSWER";
LABEL_7:
      id v1 = [v2 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Chamomile"];

      break;
    default:
      break;
  }
  return v1;
}

BOOL HKCodableClosedRangeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          uint64_t v16 = *v5;
          int v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      uint64_t v16 = *v5;
      int v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(unsigned char *)(a2 + v16)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v17 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v16) = 1;
          uint64_t v21 = 0;
        }
        uint64_t v24 = &OBJC_IVAR___HKCodableClosedRange__lowerBound;
LABEL_32:
        *(void *)(a1 + *v24) = v21;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v22 = *v3;
    unint64_t v23 = *(void *)(a2 + v22);
    if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v23);
      *(void *)(a2 + v22) = v23 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + v16) = 1;
      uint64_t v21 = 0;
    }
    uint64_t v24 = &OBJC_IVAR___HKCodableClosedRange__upperBound;
    goto LABEL_32;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _IndentString(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = [&stru_1F3B9CF20 stringByPaddingToLength:a2 withString:@" " startingAtIndex:0];
  uint64_t v5 = [v3 componentsSeparatedByString:@"\n"];
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = objc_msgSend(v4, "stringByAppendingString:", *(void *)(*((void *)&v15 + 1) + 8 * i), (void)v15);
        [v6 addObject:v12];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v9);
  }

  unint64_t v13 = [v6 componentsJoinedByString:@"\n"];

  return v13;
}

BOOL HKCodableSleepingSampleBaselineReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        long long v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 8;
      }
      else if (v17 == 2)
      {
        long long v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 16;
      }
      else
      {
        if (v17 != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        long long v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 24;
      }
      objc_storeStrong((id *)(a1 + v19), v18);
      if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HKLogAFibBurden()
{
  if (HKLogAFibBurden_onceToken != -1) {
    dispatch_once(&HKLogAFibBurden_onceToken, &__block_literal_global_33);
  }
  uint64_t v0 = (void *)HKLogAFibBurden_aFibBurdenCategory;
  return v0;
}

uint64_t __HKLogAFibBurden_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.Health.AFibBurden", "charting");
  uint64_t v1 = HKLogAFibBurden_aFibBurdenCategory;
  HKLogAFibBurden_aFibBurdenCategorCGFloat y = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t __HKPopulationNormsSortedAgeRangesFromTable_block_invoke_0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = [a2 rangeValue];
  unint64_t v6 = [v4 rangeValue];

  if (v5 >= v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = -1;
  }
  if (v5 > v6) {
    return 1;
  }
  else {
    return v7;
  }
}

__CFString *HKVisionLeftRightLongLocalizedString(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = _HKVisionSphereDiopterStringFromNumber(a1);
  unint64_t v5 = _HKVisionSphereDiopterStringFromNumber(v3);

  if (v4 && v5)
  {
    unint64_t v6 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    char v8 = [v7 localizedStringForKey:@"VISION_LEFT_RIGHT_LONG_%@%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
    unint64_t v12 = v5;
LABEL_10:
    objc_msgSend(v6, "localizedStringWithFormat:", v8, v4, v12);
    goto LABEL_11;
  }
  if (!v4 && v5)
  {
    unsigned int v9 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    char v8 = [v7 localizedStringForKey:@"VISION_RIGHT_LONG_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
    objc_msgSend(v9, "localizedStringWithFormat:", v8, v5, v12);
LABEL_11:
    unint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

    goto LABEL_12;
  }
  unint64_t v10 = &stru_1F3B9CF20;
  if (v4 && !v5)
  {
    unint64_t v6 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    char v8 = [v7 localizedStringForKey:@"VISION_LEFT_LONG_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
    goto LABEL_10;
  }
LABEL_12:

  return v10;
}

__CFString *_HKVisionSphereDiopterStringFromNumber(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    [v1 doubleValue];
    BOOL v2 = HKCompareDoubles() != 0;
    id v3 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
    [v3 setMinimumFractionDigits:v2];
    [v3 setMaximumFractionDigits:2];
    id v4 = [v3 plusSign];
    [v3 setPositivePrefix:v4];

    unint64_t v5 = [v3 stringFromNumber:v1];

    unint64_t v6 = &stru_1F3B9CF20;
    if (v5) {
      unint64_t v6 = v5;
    }
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

__CFString *HKVisionLeftRightShortLocalizedString(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = _HKVisionSphereDiopterStringFromNumber(a1);
  unint64_t v5 = _HKVisionSphereDiopterStringFromNumber(v3);

  if (v4 && v5)
  {
    unint64_t v6 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    char v8 = [v7 localizedStringForKey:@"VISION_LEFT_RIGHT_SHORT_%@%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
    unint64_t v12 = v5;
LABEL_10:
    objc_msgSend(v6, "localizedStringWithFormat:", v8, v4, v12);
    goto LABEL_11;
  }
  if (!v4 && v5)
  {
    unsigned int v9 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    char v8 = [v7 localizedStringForKey:@"VISION_RIGHT_SHORT_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
    objc_msgSend(v9, "localizedStringWithFormat:", v8, v5, v12);
LABEL_11:
    unint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

    goto LABEL_12;
  }
  unint64_t v10 = &stru_1F3B9CF20;
  if (v4 && !v5)
  {
    unint64_t v6 = NSString;
    uint64_t v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    char v8 = [v7 localizedStringForKey:@"VISION_LEFT_SHORT_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
    goto LABEL_10;
  }
LABEL_12:

  return v10;
}

id HKVisionPrescriptionTypeLongLocalizedString(uint64_t a1)
{
  if (a1 == 2)
  {
    id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    BOOL v2 = v1;
    id v3 = @"VISION_PRESCRIPTION_TYPE_CONTACTS_LONG";
  }
  else
  {
    id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    BOOL v2 = v1;
    id v3 = @"VISION_PRESCRIPTION_TYPE_GLASSES_LONG";
  }
  id v4 = [v1 localizedStringForKey:v3 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];

  return v4;
}

id HKVisionPrescriptionTypeShortLocalizedString(uint64_t a1)
{
  if (a1 == 2)
  {
    id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    BOOL v2 = v1;
    id v3 = @"VISION_PRESCRIPTION_TYPE_CONTACTS_SHORT";
  }
  else
  {
    id v1 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    BOOL v2 = v1;
    id v3 = @"VISION_PRESCRIPTION_TYPE_GLASSES_SHORT";
  }
  id v4 = [v1 localizedStringForKey:v3 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];

  return v4;
}

__CFString *HKVisionPrescriptionTypeDetailedLongLocalizedString(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    BOOL v2 = [v1 brand];
    if ([v2 length])
    {
      id v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      id v4 = [v3 localizedStringForKey:@"VISION_PRESCRIPTION_CONTACTS_AND_BRAND_FORMAT_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];

      uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", v4, v2);
LABEL_13:
      unsigned int v9 = (__CFString *)v5;

      goto LABEL_14;
    }
  }
  uint64_t v6 = [v1 prescriptionType];
  if (v6 != 2)
  {
    if (v6 != 1)
    {
      unsigned int v9 = &stru_1F3B9CF20;
      goto LABEL_15;
    }
    uint64_t v7 = [v1 metadata];
    BOOL v2 = [v7 objectForKeyedSubscript:*MEMORY[0x1E4F2A130]];

    char v8 = [v1 metadata];
    id v4 = [v8 objectForKeyedSubscript:*MEMORY[0x1E4F2BC00]];

    if (v4) {
      HKVisionPrescriptionFormattedVisionProOpticalInsertsDescription(v2);
    }
    else {
    uint64_t v5 = HKVisionPrescriptionFormattedGlassesDescription(v2);
    }
    goto LABEL_13;
  }
  BOOL v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  unsigned int v9 = [v2 localizedStringForKey:@"VISION_PRESCRIPTION_TYPE_CONTACTS_LONG" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
LABEL_14:

LABEL_15:
  return v9;
}

id HKVisionPrescriptionFormattedVisionProOpticalInsertsDescription(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  id v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v4 = v3;
  if (v2)
  {
    uint64_t v5 = [v3 localizedStringForKey:@"VISION_PRESCRIPTION_VISION_PRO_OPTICAL_INSERTS_AND_DESCRIPTION_FORMAT_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];

    uint64_t v6 = objc_msgSend(NSString, "localizedStringWithFormat:", v5, v1);
    id v4 = (void *)v5;
  }
  else
  {
    uint64_t v6 = [v3 localizedStringForKey:@"VISION_PRESCRIPTION_TYPE_VISION_PRO_OPTICAL_INSERTS_LONG" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
  }

  return v6;
}

id HKVisionPrescriptionFormattedGlassesDescription(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  id v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v4 = v3;
  if (v2)
  {
    uint64_t v5 = [v3 localizedStringForKey:@"VISION_PRESCRIPTION_GLASSES_AND_DESCRIPTION_FORMAT_%@" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];

    uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", v5, v1);
    id v4 = (void *)v5;
  }
  else
  {
    uint64_t v6 = [v3 localizedStringForKey:@"VISION_PRESCRIPTION_TYPE_GLASSES_LONG" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];
  }

  return v6;
}

__CFString *HKVisionPrescriptionRawDescription(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 prescriptionType];
  if (v2 == 2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = [v1 brand];
      goto LABEL_7;
    }
  }
  else if (v2 == 1)
  {
    id v3 = [v1 metadata];
    id v4 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F2A130]];

    goto LABEL_7;
  }
  id v4 = &stru_1F3B9CF20;
LABEL_7:

  return v4;
}

id HKVisionPrescriptionImageOnlyLocalizedString()
{
  os_log_t v0 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  id v1 = [v0 localizedStringForKey:@"VISION_PRESCRIPTION_IMAGE_ONLY" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-VRX"];

  return v1;
}

id HKVisionPrescriptionGenerateGlassesPrescriptionSample()
{
  v10[1] = *MEMORY[0x1E4F143B8];
  os_log_t v0 = _HKVisionRandomGlassesLensSpecifications();
  uint64_t v9 = *MEMORY[0x1E4F2A130];
  id v1 = HKVisionPrescriptionTypeLongLocalizedString(1);
  v10[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:&v9 count:1];

  id v3 = (void *)MEMORY[0x1E4F2B088];
  id v4 = [v0 objectAtIndexedSubscript:1];
  uint64_t v5 = [v0 objectAtIndexedSubscript:0];
  uint64_t v6 = [MEMORY[0x1E4F1C9C8] now];
  uint64_t v7 = [v3 prescriptionWithRightEyeSpecification:v4 leftEyeSpecification:v5 dateIssued:v6 expirationDate:0 device:0 metadata:v2];

  return v7;
}

id _HKVisionRandomGlassesLensSpecifications()
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  os_log_t v0 = [MEMORY[0x1E4F2B618] diopterUnit];
  id v1 = _HKVisionRandomLeftRightQuantities(4, v0, -10.5, 6.5, 0.25);

  uint64_t v2 = [MEMORY[0x1E4F2B618] diopterUnit];
  id v3 = _HKVisionRandomLeftRightQuantities(4, v2, -3.0, 3.0, 0.25);

  id v4 = [MEMORY[0x1E4F2B618] degreeAngleUnit];
  uint64_t v5 = _HKVisionRandomLeftRightQuantities(4, v4, 0.0, 180.0, 5.0);

  uint64_t v6 = [MEMORY[0x1E4F2B618] diopterUnit];
  uint64_t v7 = _HKVisionRandomLeftRightQuantities(2, v6, 0.25, 2.5, 0.25);

  id v8 = objc_alloc(MEMORY[0x1E4F2B080]);
  unint64_t v23 = v1;
  uint64_t v24 = [v1 objectAtIndexedSubscript:0];
  uint64_t v21 = v3;
  uint64_t v22 = [v3 objectAtIndexedSubscript:0];
  uint64_t v20 = v5;
  uint64_t v9 = [v5 objectAtIndexedSubscript:0];
  unint64_t v10 = [v7 objectAtIndexedSubscript:0];
  uint64_t v11 = (void *)[v8 initWithSphere:v24 cylinder:v22 axis:v9 addPower:v10 vertexDistance:0 prism:0 farPupillaryDistance:0 nearPupillaryDistance:0];
  v25[0] = v11;
  id v12 = objc_alloc(MEMORY[0x1E4F2B080]);
  char v13 = [v1 objectAtIndexedSubscript:1];
  char v14 = [v3 objectAtIndexedSubscript:1];
  int v15 = [v5 objectAtIndexedSubscript:1];
  long long v16 = [v7 objectAtIndexedSubscript:1];
  unint64_t v17 = (void *)[v12 initWithSphere:v13 cylinder:v14 axis:v15 addPower:v16 vertexDistance:0 prism:0 farPupillaryDistance:0 nearPupillaryDistance:0];
  v25[1] = v17;
  long long v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v25 count:2];

  return v18;
}

id _HKVisionRandomLeftRightQuantities(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t)((a4 - a3) / a5);
  id v10 = a2;
  double v11 = a3 + a5 * (double)(arc4random() % (v9 + 1));
  if (arc4random()) {
    int v12 = 1;
  }
  else {
    int v12 = -1;
  }
  double v13 = v11 + ((double)(arc4random() % a1) + 1.0) * a5 * (double)v12;
  if (v13 >= a4) {
    double v13 = a4;
  }
  if (v13 >= a3) {
    double v14 = v13;
  }
  else {
    double v14 = a3;
  }
  int v15 = [MEMORY[0x1E4F2B370] quantityWithUnit:v10 doubleValue:v11];
  v19[0] = v15;
  long long v16 = [MEMORY[0x1E4F2B370] quantityWithUnit:v10 doubleValue:v14];

  v19[1] = v16;
  unint64_t v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];

  return v17;
}

id HKVisionPrescriptionSupportedImageUTTypeIdentifiers()
{
  v5[6] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F44410];
  v5[0] = *MEMORY[0x1E4F443E0];
  v5[1] = v0;
  uint64_t v1 = *MEMORY[0x1E4F44450];
  v5[2] = *MEMORY[0x1E4F44420];
  v5[3] = v1;
  uint64_t v2 = *MEMORY[0x1E4F444E0];
  v5[4] = *MEMORY[0x1E4F44460];
  v5[5] = v2;
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:6];
  return v3;
}

uint64_t HKCodableSummaryUnderwaterDepthValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + 8) = v22;
      }
      else if (v18 == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          uint64_t v27 = *(void *)(a2 + v26);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v28;
          v25 |= (unint64_t)(v29 & 0x7F) << v23;
          if ((v29 & 0x80) == 0) {
            goto LABEL_37;
          }
          v23 += 7;
          BOOL v15 = v24++ >= 9;
          if (v15)
          {
            uint64_t v25 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 24) = v25 != 0;
      }
      else if (v18 == 1)
      {
        uint64_t v19 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL HKCodableChartBloodPressureDataSourceQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        unint64_t v17 = objc_alloc_init(HKCodableStatisticsCollection);
        uint64_t v18 = 8;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        unint64_t v17 = objc_alloc_init(HKCodableStatisticsCollection);
        uint64_t v18 = 16;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || !HKCodableStatisticsCollectionReadFrom((id *)&v17->super.super.isa, a2))
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C5F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0C5F594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreTelephonyLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __CoreTelephonyLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E6D53890;
    uint64_t v4 = 0;
    CoreTelephonyLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = CoreTelephonyLibraryCore_frameworkLibrary;
  if (!CoreTelephonyLibraryCore_frameworkLibrary) {
    CoreTelephonyLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __CoreTelephonyLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreTelephonyLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void sub_1E0C6023C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E0C60458(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _RunBlockForPointsInPath(const void *a1, uint64_t a2)
{
  long long v3 = _Block_copy(a1);
  uint64_t v6 = *(unint64_t **)(a2 + 8);
  id v7 = v3;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v4.n128_u64[0] = *v6;
      v5.n128_u64[0] = v6[1];
      (*((void (**)(void *, void, __n128, __n128))v3 + 2))(v3, 0, v4, v5);
      goto LABEL_8;
    case 1:
      v4.n128_u64[0] = *v6;
      v5.n128_u64[0] = v6[1];
      (*((void (**)(void *, uint64_t, __n128, __n128))v3 + 2))(v3, 1, v4, v5);
      goto LABEL_8;
    case 2:
      v4.n128_u64[0] = v6[2];
      v5.n128_u64[0] = v6[3];
      (*((void (**)(void *, uint64_t, __n128, __n128))v3 + 2))(v3, 2, v4, v5);
      goto LABEL_8;
    case 3:
      v4.n128_u64[0] = v6[4];
      v5.n128_u64[0] = v6[5];
      (*((void (**)(void *, uint64_t, __n128, __n128))v3 + 2))(v3, 3, v4, v5);
      goto LABEL_8;
    case 4:
      (*((void (**)(void *, uint64_t, double, double))v3 + 2))(v3, 4, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
LABEL_8:
      long long v3 = v7;
      break;
    default:
      break;
  }
}

void _FindFirstPoint(void *a1, uint64_t a2)
{
  id v4 = a1;
  if (![v4 count] && *(_DWORD *)a2 <= 3u)
  {
    long long v3 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", **(double **)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 8));
    [v4 addObject:v3];
  }
}

uint64_t HKCodableNotificationSampleReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = &OBJC_IVAR___HKDisplayTypeContextItem__analyticsIdentifier;
  char v8 = &OBJC_IVAR___HKDisplayTypeContextItem__analyticsIdentifier;
  unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
  unint64_t v10 = &OBJC_IVAR___HKDisplayTypeContextItem__analyticsIdentifier;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + v7[136]) |= 0x20u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v59 = v8[137];
        goto LABEL_80;
      case 2u:
        *(unsigned char *)(a1 + v7[136]) |= 4u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v59 = v10[138];
LABEL_80:
        *(void *)(a1 + v59) = v23;
        goto LABEL_81;
      case 3u:
        uint64_t v27 = v7;
        unint64_t v28 = v10;
        char v29 = v8;
        unint64_t v30 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 56), v30);
        if PBReaderPlaceMark() && (HKCodableMetadataDictionaryReadFrom(v30, a2))
        {
          PBReaderRecallMark();

          char v8 = v29;
          unint64_t v10 = v28;
          id v7 = v27;
LABEL_81:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + v7[136]) |= 1u;
        while (2)
        {
          uint64_t v34 = *v3;
          uint64_t v35 = *(void *)(a2 + v34);
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v9) + v35);
            *(void *)(a2 + v34) = v36;
            v33 |= (unint64_t)(v37 & 0x7F) << v31;
            if (v37 < 0)
            {
              v31 += 7;
              BOOL v18 = v32++ >= 9;
              if (v18)
              {
                uint64_t v33 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_62:
        uint64_t v58 = 8;
        goto LABEL_75;
      case 5u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + v7[136]) |= 2u;
        while (2)
        {
          uint64_t v40 = *v3;
          uint64_t v41 = *(void *)(a2 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v41);
            *(void *)(a2 + v40) = v42;
            v33 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v18 = v39++ >= 9;
              if (v18)
              {
                uint64_t v33 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_66:
        uint64_t v58 = 16;
        goto LABEL_75;
      case 6u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + v7[136]) |= 8u;
        while (2)
        {
          uint64_t v46 = *v3;
          uint64_t v47 = *(void *)(a2 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
            *(void *)(a2 + v46) = v48;
            v33 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v18 = v45++ >= 9;
              if (v18)
              {
                uint64_t v33 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_70:
        uint64_t v58 = 32;
        goto LABEL_75;
      case 7u:
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + v7[136]) |= 0x10u;
        while (2)
        {
          uint64_t v52 = *v3;
          uint64_t v53 = *(void *)(a2 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + *v9) + v53);
            *(void *)(a2 + v52) = v54;
            v33 |= (unint64_t)(v55 & 0x7F) << v50;
            if (v55 < 0)
            {
              v50 += 7;
              BOOL v18 = v51++ >= 9;
              if (v18)
              {
                uint64_t v33 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_74:
        uint64_t v58 = 40;
LABEL_75:
        *(void *)(a1 + v58) = v33;
        goto LABEL_81;
      case 8u:
        uint64_t v56 = PBReaderReadString();
        v57 = *(void **)(a1 + 64);
        *(void *)(a1 + 64) = v56;

        goto LABEL_81;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_81;
    }
  }
}

uint64_t HKCodableSummaryAudiogramValueReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 2u:
        BOOL v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 16;
        goto LABEL_25;
      case 3u:
        BOOL v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 24;
        goto LABEL_25;
      case 4u:
        BOOL v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 40;
        goto LABEL_25;
      case 5u:
        BOOL v18 = objc_alloc_init(HKCodableQuantity);
        uint64_t v19 = 32;
LABEL_25:
        objc_storeStrong((id *)(a1 + v19), v18);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_33;
      case 6u:
        *(unsigned char *)(a1 + 56) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)(a1 + 8) = v23;
        goto LABEL_34;
      case 7u:
        BOOL v18 = objc_alloc_init(HKCodableAudiogramSensitivityPoint);
        [(id)a1 addSensitivityPoints:v18];
        if (PBReaderPlaceMark() && HKCodableAudiogramSensitivityPointReadFrom((char *)v18, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_39:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_34;
    }
  }
}

uint64_t HKCodableSummaryBreathingDisturbancesValueReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        BOOL v18 = objc_alloc_init(HKCodableLevelViewDataConfiguration);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (HKCodableLevelViewDataConfigurationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 == 2)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_37;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v21 = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v21 = 0;
          }
LABEL_39:
          *(void *)(a1 + 8) = v21;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        BOOL v18 = objc_alloc_init(HKCodableSummaryQuantityValue);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (HKCodableSummaryQuantityValueReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryStateOfMindValueReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        int v17 = v10 & 7;
        if (!v16 && v17 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 80) |= 1u;
              uint64_t v19 = *v3;
              unint64_t v20 = *(void *)(a2 + v19);
              if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
                *(void *)(a2 + v19) = v20 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v21 = 0;
              }
              uint64_t v59 = 56;
              goto LABEL_85;
            case 2u:
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              *(unsigned char *)(a1 + 80) |= 2u;
              while (2)
              {
                uint64_t v25 = *v3;
                uint64_t v26 = *(void *)(a2 + v25);
                unint64_t v27 = v26 + 1;
                if (v26 == -1 || v27 > *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
                  *(void *)(a2 + v25) = v27;
                  v24 |= (unint64_t)(v28 & 0x7F) << v22;
                  if (v28 < 0)
                  {
                    v22 += 7;
                    BOOL v15 = v23++ >= 9;
                    if (v15)
                    {
                      uint64_t v24 = 0;
                      goto LABEL_64;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                uint64_t v24 = 0;
              }
LABEL_64:
              *(void *)(a1 + 64) = v24;
              goto LABEL_86;
            case 3u:
              *(unsigned char *)(a1 + 80) |= 4u;
              uint64_t v29 = *v3;
              unint64_t v30 = *(void *)(a2 + v29);
              if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v30);
                *(void *)(a2 + v29) = v30 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v21 = 0;
              }
              uint64_t v59 = 72;
LABEL_85:
              *(void *)(a1 + v59) = v21;
              goto LABEL_86;
            case 4u:
              if (v17 != 2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v47 = 0;
                while (1)
                {
                  uint64_t v48 = *v3;
                  uint64_t v49 = *(void *)(a2 + v48);
                  unint64_t v50 = v49 + 1;
                  if (v49 == -1 || v50 > *(void *)(a2 + *v4)) {
                    goto LABEL_79;
                  }
                  char v51 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
                  *(void *)(a2 + v48) = v50;
                  v47 |= (unint64_t)(v51 & 0x7F) << v45;
                  if (v51 < 0)
                  {
                    v45 += 7;
                    BOOL v15 = v46++ >= 9;
                    if (!v15) {
                      continue;
                    }
                  }
                  goto LABEL_80;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v33 = 0;
                while (1)
                {
                  uint64_t v34 = *v3;
                  uint64_t v35 = *(void *)(a2 + v34);
                  unint64_t v36 = v35 + 1;
                  if (v35 == -1 || v36 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
                  *(void *)(a2 + v34) = v36;
                  v33 |= (unint64_t)(v37 & 0x7F) << v31;
                  if (v37 < 0)
                  {
                    v31 += 7;
                    BOOL v15 = v32++ >= 9;
                    if (!v15) {
                      continue;
                    }
                  }
                  goto LABEL_46;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
                PBRepeatedInt64Add();
              }
              goto LABEL_60;
            case 5u:
              if (v17 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v38 = 0;
                  unsigned int v39 = 0;
                  uint64_t v40 = 0;
                  while (1)
                  {
                    uint64_t v41 = *v3;
                    uint64_t v42 = *(void *)(a2 + v41);
                    unint64_t v43 = v42 + 1;
                    if (v42 == -1 || v43 > *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
                    *(void *)(a2 + v41) = v43;
                    v40 |= (unint64_t)(v44 & 0x7F) << v38;
                    if (v44 < 0)
                    {
                      v38 += 7;
                      BOOL v15 = v39++ >= 9;
                      if (!v15) {
                        continue;
                      }
                    }
                    goto LABEL_59;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_59:
                  PBRepeatedInt64Add();
                }
LABEL_60:
                PBReaderRecallMark();
              }
              else
              {
                char v52 = 0;
                unsigned int v53 = 0;
                uint64_t v54 = 0;
                while (1)
                {
                  uint64_t v55 = *v3;
                  uint64_t v56 = *(void *)(a2 + v55);
                  unint64_t v57 = v56 + 1;
                  if (v56 == -1 || v57 > *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
                  *(void *)(a2 + v55) = v57;
                  v54 |= (unint64_t)(v58 & 0x7F) << v52;
                  if (v58 < 0)
                  {
                    v52 += 7;
                    BOOL v15 = v53++ >= 9;
                    if (!v15) {
                      continue;
                    }
                  }
                  goto LABEL_80;
                }
LABEL_79:
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_80:
                PBRepeatedInt64Add();
              }
LABEL_86:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_86;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C67E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0C6A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v46 - 248), 8);
  _Block_object_dispose((const void *)(v46 - 200), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

uint64_t HKCodableChartCardioFitnessQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        uint64_t v35 = 24;
        goto LABEL_57;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_52:
        uint64_t v35 = 16;
        goto LABEL_57;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v19 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_56:
        uint64_t v35 = 8;
LABEL_57:
        *(void *)(a1 + v35) = v19;
        goto LABEL_58;
      case 4u:
        uint64_t v34 = objc_alloc_init(HKCodableChartQuantityDataSourceQueryData);
        objc_storeStrong((id *)(a1 + 32), v34);
        if (PBReaderPlaceMark()
          && (HKCodableChartQuantityDataSourceQueryDataReadFrom((uint64_t)v34, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

BOOL HKCodableSleepPeriodReadFrom(id *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(HKCodableSleepPeriodSegment);
    [a1 addSegment:v17];
    if (!PBReaderPlaceMark() || (HKCodableSleepPeriodSegmentReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableActivitySummaryEntryReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  __n128 v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong((id *)(a1 + 80), v17);
        if PBReaderPlaceMark() && (HKCodableDateComponentsReadFrom((uint64_t)v17, a2)) {
          goto LABEL_41;
        }
        goto LABEL_60;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 92) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_54:
        *(void *)(a1 + 8) = v21;
        goto LABEL_42;
      case 3u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 16;
        goto LABEL_39;
      case 4u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 48;
        goto LABEL_39;
      case 5u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 32;
        goto LABEL_39;
      case 6u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 64;
        goto LABEL_39;
      case 7u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 24;
        goto LABEL_39;
      case 8u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 56;
        goto LABEL_39;
      case 9u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 40;
        goto LABEL_39;
      case 0xAu:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v25 = 72;
LABEL_39:
        objc_storeStrong((id *)(a1 + v25), v17);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_60:

        return 0;
      case 0xBu:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 92) |= 2u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_58:
        *(unsigned char *)(a1 + 88) = v28 != 0;
        goto LABEL_42;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

void sub_1E0C76470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTStorageAppHeaderCellClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!StorageSettingsLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    v3[3] = __StorageSettingsLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6D53AD0;
    uint64_t v5 = 0;
    StorageSettingsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!StorageSettingsLibraryCore_frameworkLibrary) {
    __getSTStorageAppHeaderCellClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("STStorageAppHeaderCell");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSTStorageAppHeaderCellClass_block_invoke_cold_2();
  }
  getSTStorageAppHeaderCellClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StorageSettingsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  StorageSettingsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t HKCodableHandwashingEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 52) |= 8u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v46 = 32;
        goto LABEL_68;
      case 2u:
        *(unsigned char *)(a1 + 52) |= 4u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v46 = 24;
LABEL_68:
        *(void *)(a1 + v46) = v20;
        goto LABEL_69;
      case 3u:
        char v24 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 40), v24);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 52) |= 2u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              BOOL v15 = v26++ >= 9;
              if (v15)
              {
                uint64_t v27 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_54:
        uint64_t v45 = 16;
        goto LABEL_59;
      case 5u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 52) |= 1u;
        while (2)
        {
          uint64_t v34 = *v3;
          uint64_t v35 = *(void *)(a2 + v34);
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v36;
            v27 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v15 = v33++ >= 9;
              if (v15)
              {
                uint64_t v27 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_58:
        uint64_t v45 = 8;
LABEL_59:
        *(void *)(a1 + v45) = v27;
        goto LABEL_69;
      case 6u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        *(unsigned char *)(a1 + 52) |= 0x10u;
        while (2)
        {
          uint64_t v41 = *v3;
          uint64_t v42 = *(void *)(a2 + v41);
          unint64_t v43 = v42 + 1;
          if (v42 == -1 || v43 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v43;
            v40 |= (unint64_t)(v44 & 0x7F) << v38;
            if (v44 < 0)
            {
              v38 += 7;
              BOOL v15 = v39++ >= 9;
              if (v15)
              {
                uint64_t v40 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v40 = 0;
        }
LABEL_63:
        *(unsigned char *)(a1 + 48) = v40 != 0;
        goto LABEL_69;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_69;
    }
  }
}

uint64_t HKCodableHealthRecordsLocalizedEducationContentSectionReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 56) |= 1u;
              break;
            case 2u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 40;
              goto LABEL_30;
            case 3u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 32;
LABEL_30:
              unsigned int v26 = *(void **)(a1 + v25);
              *(void *)(a1 + v25) = v24;

              goto LABEL_42;
            case 4u:
              uint64_t v27 = PBReaderReadString();
              if (v27) {
                [(id)a1 addSectionValidRegionCodes:v27];
              }
              goto LABEL_37;
            case 5u:
              uint64_t v27 = PBReaderReadString();
              if (v27) {
                [(id)a1 addSectionAttributions:v27];
              }
              goto LABEL_37;
            case 6u:
              uint64_t v27 = PBReaderReadString();
              if (v27) {
                [(id)a1 addSectionCitations:v27];
              }
LABEL_37:

              goto LABEL_42;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_42:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_39;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_41:
          *(void *)(a1 + 8) = v19;
          goto LABEL_42;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableMenstrualCyclesProjectionReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = &OBJC_IVAR___HKDisplayTypeContextItem__analyticsIdentifier;
  char v8 = &OBJC_IVAR___HKDisplayTypeContextItem__analyticsIdentifier;
  unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
  unint64_t v10 = &OBJC_IVAR___HKDisplayTypeContextItem__analyticsIdentifier;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + v7[349]) |= 0x10u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v56 = v8[350];
        goto LABEL_78;
      case 2u:
        *(unsigned char *)(a1 + v7[349]) |= 0x20u;
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v25);
          *(void *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v56 = v10[351];
        goto LABEL_78;
      case 3u:
        *(unsigned char *)(a1 + v7[349]) |= 2u;
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v56 = 16;
        goto LABEL_78;
      case 4u:
        *(unsigned char *)(a1 + v7[349]) |= 4u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v29);
          *(void *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v56 = 24;
LABEL_78:
        *(void *)(a1 + v56) = v23;
        goto LABEL_79;
      case 5u:
        unint64_t v30 = v7;
        char v31 = v10;
        char v32 = v8;
        unsigned int v33 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong((id *)(a1 + 56), v33);
        if (PBReaderPlaceMark() && HKCodableDayIndexRangeReadFrom((uint64_t)v33, a2))
        {
          PBReaderRecallMark();

          char v8 = v32;
          unint64_t v10 = v31;
          id v7 = v30;
LABEL_79:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 6u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + v7[349]) |= 0x40u;
        while (2)
        {
          uint64_t v37 = *v3;
          uint64_t v38 = *(void *)(a2 + v37);
          unint64_t v39 = v38 + 1;
          if (v38 == -1 || v39 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v9) + v38);
            *(void *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              BOOL v18 = v35++ >= 9;
              if (v18)
              {
                uint64_t v36 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v36 = 0;
        }
LABEL_60:
        *(unsigned char *)(a1 + 64) = v36 != 0;
        goto LABEL_79;
      case 8u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(unsigned char *)(a1 + v7[349]) |= 1u;
        while (2)
        {
          uint64_t v45 = *v3;
          uint64_t v46 = *(void *)(a2 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v46);
            *(void *)(a2 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              BOOL v18 = v43++ >= 9;
              if (v18)
              {
                uint64_t v44 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_64:
        uint64_t v55 = 8;
        goto LABEL_69;
      case 0xAu:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v44 = 0;
        *(unsigned char *)(a1 + v7[349]) |= 8u;
        while (2)
        {
          uint64_t v51 = *v3;
          uint64_t v52 = *(void *)(a2 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
            *(void *)(a2 + v51) = v53;
            v44 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v18 = v50++ >= 9;
              if (v18)
              {
                uint64_t v44 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_68:
        uint64_t v55 = 32;
LABEL_69:
        *(void *)(a1 + v55) = v44;
        goto LABEL_79;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_79;
    }
  }
}

void sub_1E0C80260(_Unwind_Exception *exception_object)
{
}

void sub_1E0C80740(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1E0C8081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1E0C808B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1E0C80988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t HKCodableCellHeaderViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
        goto LABEL_37;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_37;
      case 3u:
        uint64_t v21 = objc_alloc_init(HKCodableColorRepresentation);
        objc_storeStrong((id *)(a1 + 32), v21);
        if PBReaderPlaceMark() && (HKCodableColorRepresentationReadFrom((uint64_t)v21, a2))
        {
          PBReaderRecallMark();

LABEL_55:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        *(unsigned char *)(a1 + 60) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + 8) = v24;
        goto LABEL_55;
      case 5u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              BOOL v15 = v26++ >= 9;
              if (v15)
              {
                uint64_t v27 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_48:
        *(unsigned char *)(a1 + 56) = v27 != 0;
        goto LABEL_55;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_37:
        char v32 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_55;
      case 7u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v36 = *v3;
          uint64_t v37 = *(void *)(a2 + v36);
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v38;
            v35 |= (unint64_t)(v39 & 0x7F) << v33;
            if (v39 < 0)
            {
              v33 += 7;
              BOOL v15 = v34++ >= 9;
              if (v15)
              {
                uint64_t v35 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_52:
        *(void *)(a1 + 16) = v35;
        goto LABEL_55;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_55;
    }
  }
}

uint64_t HKCodableColorRepresentationReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_30;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_37:
        *(void *)(a1 + 8) = v22;
        goto LABEL_38;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 32;
LABEL_30:
        unsigned int v26 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_38;
      case 4u:
        uint64_t v27 = objc_alloc_init(HKCodableRGBConfiguration);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (PBReaderPlaceMark() && HKCodableRGBConfigurationReadFrom((uint64_t)v27, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_38;
    }
  }
}

void sub_1E0C85724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNAvatarImageRendererClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  Class result = objc_getClass("CNAvatarImageRenderer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNAvatarImageRendererClass_block_invoke_cold_1();
  }
  getCNAvatarImageRendererClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ContactsUILibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!ContactsUILibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __ContactsUILibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E6D53B50;
    uint64_t v2 = 0;
    ContactsUILibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary) {
    ContactsUILibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __ContactsUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ContactsUILibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getCNAvatarImageRenderingScopeClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  Class result = objc_getClass("CNAvatarImageRenderingScope");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNAvatarImageRenderingScopeClass_block_invoke_cold_1();
  }
  getCNAvatarImageRenderingScopeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableSummaryCurrentValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 56;
        goto LABEL_27;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
        goto LABEL_27;
      case 3u:
        char v20 = objc_alloc_init(HKCodableSummarySupplementaryValue);
        objc_storeStrong((id *)(a1 + 48), v20);
        if (!PBReaderPlaceMark()
          || (HKCodableSummarySupplementaryValueReadFrom((uint64_t)v20, a2) & 1) == 0)
        {
          goto LABEL_56;
        }
        goto LABEL_30;
      case 4u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 40;
LABEL_27:
        unsigned int v21 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_54;
      case 5u:
        char v20 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 32), v20);
        if PBReaderPlaceMark() && (HKCodableMetadataDictionaryReadFrom(v20, a2))
        {
LABEL_30:
          PBReaderRecallMark();

LABEL_54:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_56:

        return 0;
      case 6u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_48:
        uint64_t v33 = 8;
        goto LABEL_53;
      case 7u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v24 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              BOOL v14 = v29++ >= 9;
              if (v14)
              {
                uint64_t v24 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_52:
        uint64_t v33 = 16;
LABEL_53:
        *(void *)(a1 + v33) = v24;
        goto LABEL_54;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_54;
    }
  }
}

id HKOTAFactorPackID()
{
  uint64_t v0 = [MEMORY[0x1E4FB0098] clientWithIdentifier:275];
  long long v1 = [v0 rolloutIdentifiersWithNamespaceName:*MEMORY[0x1E4F2A278]];
  uint64_t v2 = [v1 factorPackId];

  return v2;
}

uint64_t HKCodableSummaryCategoryValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v27 = 0;
        }
        *(void *)(a1 + 16) = v27;
      }
      else if ((v10 >> 3) == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            uint64_t v20 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSleepingSampleAggregateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        *(void *)(a1 + 8) = v28;
      }
      else if (v18 == 2)
      {
        unsigned int v29 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 24), v29);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v29, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v18 == 1)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v22 = *v3;
          uint64_t v23 = *(void *)(a2 + v22);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0) {
            goto LABEL_37;
          }
          v19 += 7;
          BOOL v15 = v20++ >= 9;
          if (v15)
          {
            uint64_t v21 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_39:
        *(void *)(a1 + 16) = v21;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C92C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

uint64_t HKCodableStateOfMindDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableStateOfMindValenceDistributionSummary);
        [a1 addValenceDistributionSummary:v17];
        if (!PBReaderPlaceMark()
          || !HKCodableStateOfMindValenceDistributionSummaryReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C96FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1E0C9947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_0_9()
{
  return NSRequestConcreteImplementation();
}

uint64_t HKCodableSummaryTrendResultsReadFrom(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        a1[32] |= 1u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_47:
        uint64_t v31 = 8;
LABEL_48:
        *(void *)&a1[v31] = v21;
        goto LABEL_49;
      }
      if (v17 == 1)
      {
        unint64_t v18 = objc_alloc_init(HKCodableSummaryTrendValue);
        [a1 addTrendValues:v18];
        if (!PBReaderPlaceMark() || !HKCodableSummaryTrendValueReadFrom((char *)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    a1[32] |= 2u;
    while (1)
    {
      uint64_t v22 = *v3;
      unint64_t v23 = *(void *)(a2 + v22);
      if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
      *(void *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0) {
        goto LABEL_41;
      }
      v19 += 7;
      BOOL v14 = v20++ >= 9;
      if (v14)
      {
        uint64_t v21 = 0;
        goto LABEL_43;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v21 = 0;
    }
LABEL_43:
    uint64_t v31 = 16;
    goto LABEL_48;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableMenstrualCyclesProjectionKindReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0C9CA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _WeekendDaysInCalendar(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v1 = objc_msgSend(a1, "hk_weekendDays");
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v1);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * i) unsignedIntegerValue];
        v4 |= HKSleepScheduleWeekdayFromWeekdayComponent();
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id _TimeStringForDateComponents(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = [MEMORY[0x1E4F1C9A8] currentCalendar];
    uint64_t v3 = [v2 dateFromComponents:v1];

    uint64_t v4 = HKTimeFormatter();
    uint64_t v5 = [v4 stringFromDate:v3];
  }
  else
  {
    uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    uint64_t v5 = [v3 localizedStringForKey:@"SLEEP_SCHEDULE_NO_TIMES_TEXT" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Eucalyptus"];
  }

  return v5;
}

id _OverrideStringForCalendar(void *a1, void *a2)
{
  id v3 = a1;
  if (a2)
  {
    uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1C9C8], "hk_dateOnDayIndex:atHour:calendar:", objc_msgSend(a2, "integerValue"), 12, v3);
    uint64_t v5 = HKLocalizedStringForDateAndTemplateWithFormattingContext(v4, 13, 1);
    switch([v3 component:512 fromDate:v4])
    {
      case 1:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_SUNDAY_ONLY_%@";
        goto LABEL_12;
      case 2:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_MONDAY_ONLY_%@";
        goto LABEL_12;
      case 3:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_TUESDAY_ONLY_%@";
        goto LABEL_12;
      case 4:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_WEDNESDAY_ONLY_%@";
        goto LABEL_12;
      case 5:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_THURSDAY_ONLY_%@";
        goto LABEL_12;
      case 6:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_FRIDAY_ONLY_%@";
        goto LABEL_12;
      case 7:
        uint64_t v6 = NSString;
        id v7 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        long long v8 = v7;
        long long v9 = @"SLEEP_SCHEDULE_SATURDAY_ONLY_%@";
LABEL_12:
        int v15 = [v7 localizedStringForKey:v9 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Eucalyptus"];
        unint64_t v12 = objc_msgSend(v6, "stringWithFormat:", v15, v5);

        break;
      default:
        uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
        BOOL v14 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString * _Nonnull _OverrideStringForCalendar(NSCalendar * _Nonnull __strong, NSNumber * _Nullable __strong)");
        [v13 handleFailureInFunction:v14 file:@"HKSleepSchedule+HealthUI.m" lineNumber:67 description:@"Incompatible weekday component for override schedule"];

        long long v8 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        unint64_t v12 = [v8 localizedStringForKey:@"SLEEP_SCHEDULE_NO_TIMES_TEXT" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Eucalyptus"];
        break;
    }
  }
  else
  {
    long long v10 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v11 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString * _Nonnull _OverrideStringForCalendar(NSCalendar * _Nonnull __strong, NSNumber * _Nullable __strong)");
    [v10 handleFailureInFunction:v11 file:@"HKSleepSchedule+HealthUI.m" lineNumber:44 description:@"Can't create an override string without a day index"];

    uint64_t v4 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    unint64_t v12 = [v4 localizedStringForKey:@"SLEEP_SCHEDULE_NO_TIMES_TEXT" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-Eucalyptus"];
  }

  return v12;
}

id _OrderedCalendarWeekdayComponents(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  unint64_t v3 = [v1 firstWeekday];
  uint64_t v4 = [v1 weekdaySymbols];
  unint64_t v5 = [v4 count];

  if (v3 <= v5)
  {
    do
    {
      uint64_t v6 = [NSNumber numberWithInteger:v3];
      [v2 addObject:v6];

      ++v3;
      id v7 = [v1 weekdaySymbols];
      unint64_t v8 = [v7 count];
    }
    while (v3 <= v8);
  }
  if ((unint64_t)[v1 firstWeekday] >= 2)
  {
    unint64_t v9 = 1;
    do
    {
      long long v10 = [NSNumber numberWithInteger:v9];
      [v2 addObject:v10];

      ++v9;
    }
    while (v9 < [v1 firstWeekday]);
  }

  return v2;
}

id __HKAdjustedAxisBoundsRuleBlockForRange_block_invoke(double a1, double a2)
{
  double v2 = a1 + (a2 - a1) * 0.122302158;
  if (a1 <= 0.0) {
    double v2 = a1;
  }
  v5[1] = 3221225472;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[2] = __HKAdjustedAxisBoundsRuleBlockForRange_block_invoke_2;
  v5[3] = &__block_descriptor_64_e19_B40__0d8d16_d24_d32l;
  *(double *)&v5[4] = v2;
  *(double *)&v5[5] = a1 + (a2 - a1) * 0.877697842;
  *(double *)&v5[6] = a1;
  *(double *)&void v5[7] = a2;
  unint64_t v3 = _Block_copy(v5);
  return v3;
}

uint64_t __HKAdjustedAxisBoundsRuleBlockForRange_block_invoke_2(uint64_t a1, void *a2, void *a3, double a4, double a5)
{
  if (*(double *)(a1 + 32) > a4 || *(double *)(a1 + 40) < a5) {
    return 0;
  }
  if (a2) {
    *a2 = *(void *)(a1 + 48);
  }
  if (a3) {
    *a3 = *(void *)(a1 + 56);
  }
  return 1;
}

id __HKIdentityAxisBoundsRuleBlockForRange_block_invoke(double a1, double a2)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __HKIdentityAxisBoundsRuleBlockForRange_block_invoke_2;
  void v4[3] = &__block_descriptor_48_e19_B40__0d8d16_d24_d32l;
  *(double *)&v4[4] = a1;
  *(double *)&v4[5] = a2;
  double v2 = _Block_copy(v4);
  return v2;
}

uint64_t __HKIdentityAxisBoundsRuleBlockForRange_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  if (a2) {
    *a2 = *(void *)(a1 + 32);
  }
  if (a3) {
    *a3 = *(void *)(a1 + 40);
  }
  return 1;
}

uint64_t NSStringFromHKGraphSeriesDataBlockPath(void *a1)
{
  return [NSString stringWithFormat:@"{zoom:%ld, index:%ld, resolution:%ld}", a1[1], *a1, a1[2]];
}

id NSStringFromHKGraphSeriesDataPointPath(void *a1)
{
  double v2 = NSString;
  unint64_t v3 = [NSString stringWithFormat:@"{zoom:%ld, index:%ld, resolution:%ld}", a1[1], *a1, a1[2]];
  uint64_t v4 = [v2 stringWithFormat:@"{%@, pointIndex:%ld}", v3, a1[3]];

  return v4;
}

BOOL HKGraphSeriesDataBlockPathEqualToPath(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL HKGraphSeriesDataPointPathEqualToPath(void *a1, void *a2)
{
  if (a1[3] == a2[3] && (*a1 == *a2 ? (BOOL v2 = a1[1] == a2[1]) : (BOOL v2 = 0), v2)) {
    return a1[2] == a2[2];
  }
  else {
    return 0;
  }
}

BOOL HKGraphSeriesDataPointPathRangeEqualToRange(void *a1, void *a2)
{
  if (a1[3] != a2[3]) {
    return 0;
  }
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  BOOL v3 = v2 && a1[2] == a2[2];
  if (!v3 || a1[7] != a2[7]) {
    return 0;
  }
  return a1[4] == a2[4] && a1[5] == a2[5] && a1[6] == a2[6];
}

uint64_t HKGraphSeriesDataPointPathInRange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1 <= *a2) {
    BOOL v3 = *a1 == *a2 && a1[3] > a2[3];
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = a2[4];
  if (v2 >= v4) {
    BOOL v5 = v2 == v4 && a1[3] < a2[7];
  }
  else {
    BOOL v5 = 1;
  }
  return v3 & v5;
}

uint64_t HKGraphSeriesDataPointPathInRangeInclusive(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[3];
  if (v4 == v7)
  {
    BOOL v8 = v2 == v6 && v3 == a2[1];
    if (v8 && v5 == a2[2]) {
      return 1;
    }
  }
  uint64_t v10 = a2[7];
  if (v4 == v10)
  {
    uint64_t v11 = a2[4];
    if (v2 != v11 || v3 != a2[5] || v5 != a2[6]) {
      goto LABEL_20;
    }
    return 1;
  }
  uint64_t v11 = a2[4];
LABEL_20:
  BOOL v16 = v2 == v6 && v4 > v7;
  int v17 = v2 > v6 || v16;
  BOOL v19 = v2 == v11 && v4 < v10;
  int v20 = v2 < v11 || v19;
  return v17 & v20;
}

uint64_t HKGraphSeriesDataBlockPathReferenceDate()
{
  return [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:0.0];
}

id HKGraphSeriesDataBlockPathMinimumX(uint64_t *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:0.0];
  uint64_t v3 = *a1;
  uint64_t v4 = +[HKGraphZoomLevelConfiguration configurationForZoomLevel:a1[1]];
  [v4 seriesBlockSize];
  double v6 = v5;

  uint64_t v7 = [v2 dateByAddingTimeInterval:v6 * (double)v3];

  return v7;
}

id HKGraphSeriesDataBlockPathMaximumX(uint64_t a1)
{
  uint64_t v3 = *(void *)a1 + 1;
  long long v4 = *(_OWORD *)(a1 + 8);
  id v1 = HKGraphSeriesDataBlockPathMinimumX(&v3);
  return v1;
}

void HKGraphSeriesDataBlockPathContainingDate(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = (void *)MEMORY[0x1E4F1C9C8];
  id v8 = a1;
  id v14 = [v7 dateWithTimeIntervalSinceReferenceDate:0.0];
  unint64_t v9 = +[HKGraphZoomLevelConfiguration configurationForZoomLevel:a2];
  [v9 seriesBlockSize];
  double v11 = v10;

  [v8 timeIntervalSinceDate:v14];
  double v13 = v12;

  *a4 = vcvtmd_s64_f64(v13 / v11);
  a4[1] = a2;
  a4[2] = a3;
}

uint64_t HKSleepChartPointFormatterOptionsForSleepAnalysis(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && (unsigned int v3 = [v1 intValue], v3 <= 5)) {
    uint64_t v4 = qword_1E0F05B00[v3];
  }
  else {
    uint64_t v4 = 3;
  }

  return v4;
}

void sub_1E0CB0B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0CB15B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0CB46B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKBGetDeviceLockStateSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MobileKeyBagLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    void v4[3] = __MobileKeyBagLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E6D541D8;
    uint64_t v6 = 0;
    MobileKeyBagLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
  if (!MobileKeyBagLibraryCore_frameworkLibrary) {
    __getMKBGetDeviceLockStateSymbolLoc_block_invoke_cold_1(v4);
  }
  if (v4[0]) {
    free(v4[0]);
  }
  uint64_t result = dlsym(v2, "MKBGetDeviceLockState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKBGetDeviceLockStateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MobileKeyBagLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MobileKeyBagLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getBKDeviceClass_block_invoke(uint64_t a1)
{
  BiometricKitLibrary();
  Class result = objc_getClass("BKDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBKDeviceClass_block_invoke_cold_1();
  }
  getBKDeviceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void BiometricKitLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!BiometricKitLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __BiometricKitLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E6D541F0;
    uint64_t v2 = 0;
    BiometricKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!BiometricKitLibraryCore_frameworkLibrary) {
    BiometricKitLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __BiometricKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiometricKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getBKDeviceManagerClass_block_invoke(uint64_t a1)
{
  BiometricKitLibrary();
  Class result = objc_getClass("BKDeviceManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBKDeviceManagerClass_block_invoke_cold_1();
  }
  getBKDeviceManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void _RenderImageInRect(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  id v13 = a2;
  v28.origin.CGFloat x = a3;
  v28.origin.CGFloat y = a4;
  v28.size.CGFloat width = a5;
  v28.size.CGFloat height = a6;
  if (!CGRectIsEmpty(v28))
  {
    [v13 size];
    if (v15 > 0.0 && v14 > 0.0)
    {
      CGContextSaveGState(a1);
      CGContextSetAlpha(a1, a7);
      v29.origin.CGFloat x = a3;
      v29.origin.CGFloat y = a4;
      v29.size.CGFloat width = a5;
      v29.size.CGFloat height = a6;
      CGFloat MinX = CGRectGetMinX(v29);
      v30.origin.CGFloat x = a3;
      v30.origin.CGFloat y = a4;
      v30.size.CGFloat width = a5;
      v30.size.CGFloat height = a6;
      CGFloat MaxY = CGRectGetMaxY(v30);
      CGContextTranslateCTM(a1, MinX, MaxY);
      CGContextScaleCTM(a1, 1.0, -1.0);
      uint64_t v18 = [v13 imageOrientation];
      if (a6 > 0.0 && a5 > 0.0 && v18)
      {
        long long v19 = xmmword_1E0F05B30;
        CGFloat v20 = -1.0;
        double v21 = 0.0;
        CGFloat v22 = a6;
        CGFloat v23 = a5;
        switch(v18)
        {
          case 1:
            break;
          case 2:
            double v21 = a6 / a5;
            *((void *)&v19 + 1) = 0;
            *(double *)&long long v19 = -a5 / a6;
            CGFloat v22 = 0.0;
            CGFloat v23 = a5;
            goto LABEL_16;
          case 3:
            double v21 = -a6 / a5;
            *((void *)&v19 + 1) = 0;
            *(double *)&long long v19 = a5 / a6;
            CGFloat v23 = 0.0;
            CGFloat v22 = a6;
            goto LABEL_16;
          case 4:
            long long v19 = xmmword_1E0F05B40;
            CGFloat v22 = 0.0;
            goto LABEL_14;
          case 5:
            CGFloat v20 = 1.0;
            CGFloat v23 = 0.0;
            CGFloat v22 = a6;
            break;
          case 6:
            double v21 = -a6 / a5;
            *((void *)&v19 + 1) = 0;
            *(double *)&long long v19 = -a5 / a6;
            CGFloat v20 = 0.0;
            CGFloat v22 = a6;
LABEL_14:
            CGFloat v23 = a5;
            break;
          case 7:
            double v21 = a6 / a5;
            *((void *)&v19 + 1) = 0;
            *(double *)&long long v19 = a5 / a6;
            CGFloat v22 = 0.0;
            CGFloat v23 = 0.0;
LABEL_16:
            CGFloat v20 = 0.0;
            break;
          default:
            CGFloat v20 = *MEMORY[0x1E4F1DAB8];
            double v21 = *(double *)(MEMORY[0x1E4F1DAB8] + 8);
            long long v19 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
            CGFloat v23 = *(double *)(MEMORY[0x1E4F1DAB8] + 32);
            CGFloat v22 = *(double *)(MEMORY[0x1E4F1DAB8] + 40);
            break;
        }
        v27.a = v20;
        v27.b = v21;
        *(_OWORD *)&v27.c = v19;
        v27.tCGFloat x = v23;
        v27.tCGFloat y = v22;
        CGContextConcatCTM(a1, &v27);
      }
      CGFloat v24 = *MEMORY[0x1E4F1DAD8];
      CGFloat v25 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      unsigned int v26 = (CGImage *)[v13 CGImage];
      v31.origin.CGFloat x = v24;
      v31.origin.CGFloat y = v25;
      v31.size.CGFloat width = a5;
      v31.size.CGFloat height = a6;
      CGContextDrawImage(a1, v31, v26);
      CGContextRestoreGState(a1);
    }
  }
}

void sub_1E0CBB8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

uint64_t HKCodableSleepingSampleBaselineComparisonReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_38;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_40:
        *(void *)(a1 + 8) = v19;
        goto LABEL_41;
      case 2u:
        CGFloat v24 = objc_alloc_init(HKCodableSleepingSampleBaseline);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || !HKCodableSleepingSampleBaselineReadFrom((uint64_t)v24, a2)) {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 3u:
        CGFloat v24 = objc_alloc_init(HKCodableSleepingSampleAggregate);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (HKCodableSleepingSampleAggregateReadFrom((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 4u:
        CGFloat v24 = objc_alloc_init(HKCodableSleepingSampleBaselineAvailability);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (PBReaderPlaceMark()
          && (HKCodableSleepingSampleBaselineAvailabilityReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

void sub_1E0CBDE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableActivitySummaryCollectionReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableActivitySummaryEntry);
        [a1 addActivitySummaryEntry:v17];
        if (!PBReaderPlaceMark() || (HKCodableActivitySummaryEntryReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HKInteractiveChartInfographicTitleAttributes()
{
  v5[2] = *MEMORY[0x1E4F143B8];
  v4[0] = *MEMORY[0x1E4FB06F8];
  uint64_t v0 = [MEMORY[0x1E4FB08E0] _preferredFontForTextStyle:*MEMORY[0x1E4FB2990] variant:1024];
  v5[0] = v0;
  v4[1] = *MEMORY[0x1E4FB0700];
  long long v1 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartLollipopValueColor");
  v5[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id HKInteractiveChartInfographicTableTitleAttributes()
{
  v5[2] = *MEMORY[0x1E4F143B8];
  v4[0] = *MEMORY[0x1E4FB06F8];
  uint64_t v0 = [MEMORY[0x1E4FB08E0] _preferredFontForTextStyle:*MEMORY[0x1E4FB28C8] variant:1024];
  v5[0] = v0;
  v4[1] = *MEMORY[0x1E4FB0700];
  long long v1 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartLollipopValueColor");
  v5[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

id HKInteractiveChartInfographicFootnoteAttributes()
{
  v5[2] = *MEMORY[0x1E4F143B8];
  v4[0] = *MEMORY[0x1E4FB06F8];
  uint64_t v0 = [MEMORY[0x1E4FB08E0] preferredFontForTextStyle:*MEMORY[0x1E4FB28F0]];
  v5[0] = v0;
  v4[1] = *MEMORY[0x1E4FB0700];
  long long v1 = [MEMORY[0x1E4FB1618] secondaryLabelColor];
  v5[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

void sub_1E0CC0EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0CC2048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1E0CC5644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0CC9558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0CCA4A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void sub_1E0CCB9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0CCD288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

__CFString *HKStringForChartDataSourceQueryRequestAudience(uint64_t a1)
{
  if (a1) {
    return @"sharing";
  }
  else {
    return @"primary";
  }
}

void sub_1E0CD4868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _DateForDescription(void *a1)
{
  uint64_t v1 = _DateForDescription_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&_DateForDescription_onceToken, &__block_literal_global_57);
  }
  uint64_t v3 = [(id)_DateForDescription_dateFormatter stringFromDate:v2];

  return v3;
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return objc_opt_class();
}

uint64_t HKCodableSleepPeriodSegmentReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_36;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_38;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_38:
        *(void *)(a1 + 8) = v21;
      }
      else
      {
        if (v17 == 2)
        {
          unsigned int v18 = objc_alloc_init(HKCodableDateInterval);
          [(id)a1 addSampleInterval:v18];
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          unsigned int v18 = objc_alloc_init(HKCodableDateInterval);
          objc_storeStrong((id *)(a1 + 16), v18);
        }
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0CD949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_11(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t HKCodableMetadataKeyValuePairReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_30;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_37:
        *(void *)(a1 + 8) = v22;
        goto LABEL_38;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 32;
LABEL_30:
        unsigned int v26 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_38;
      case 4u:
        CGAffineTransform v27 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 24), v27);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v27, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_38;
    }
  }
}

id HKUILocalizedWorkoutTypeName()
{
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v1 = _HKWorkoutActivityNameForActivityType();
  id v2 = [v0 localizedStringForKey:v1 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

  return v2;
}

void sub_1E0CE045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKCodableSummarySleepDurationValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 2u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v21 = 0;
        }
        unsigned int v26 = &OBJC_IVAR___HKCodableSummarySleepDurationValue__endOfSleepTimeIntervalSinceReferenceDate;
        goto LABEL_38;
      }
      if (v18 == 2) {
        break;
      }
      if (v18 == 1)
      {
        *(unsigned char *)(a1 + 32) |= 4u;
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v21 = 0;
        }
        unsigned int v26 = &OBJC_IVAR___HKCodableSummarySleepDurationValue__inBedDuration;
LABEL_38:
        *(void *)(a1 + *v26) = v21;
        goto LABEL_39;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_39:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    *(unsigned char *)(a1 + 32) |= 1u;
    uint64_t v24 = *v3;
    unint64_t v25 = *(void *)(a2 + v24);
    if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v25);
      *(void *)(a2 + v24) = v25 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + *v5) = 1;
      uint64_t v21 = 0;
    }
    unsigned int v26 = &OBJC_IVAR___HKCodableSummarySleepDurationValue__asleepDuration;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKHealthPrivacyServiceRemoteRecalibrateEstimatesViewControllerInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1F3D18DD8];
}

BOOL HKCodableChartFeedItemDataReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableChartSharableModel);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (HKCodableChartSharableModelReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(HKCodableSummaryTrendChartViewModel);
    [a1 addTrends:v17];
    if (!PBReaderPlaceMark() || (HKCodableSummaryTrendChartViewModelReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL HKCodableChartTimePeriodSeriesDataSourceDataReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        unint64_t v18 = objc_alloc_init(HKCodableTimePeriodData);
        [a1 addDateIntervalsToTotals:v18];
        goto LABEL_26;
      }
      if (v17 == 1)
      {
        unint64_t v18 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (HKCodableDateComponentsReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_33;
        }
LABEL_28:
        PBReaderRecallMark();

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v18 = objc_alloc_init(HKCodableTimePeriodData);
    [a1 addIntervalCounts:v18];
LABEL_26:
    if (!PBReaderPlaceMark() || (HKCodableTimePeriodDataReadFrom((uint64_t)v18, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
    goto LABEL_28;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryQuantityValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v21 = 0;
        }
        *(void *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        unint64_t v18 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id RevealObfuscatedStringWithSalt(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 dataUsingEncoding:4];
  CC_SHA1((const void *)[v4 bytes], objc_msgSend(v4, "length"), md);
  long long v5 = [MEMORY[0x1E4F28E78] stringWithCapacity:40];
  for (uint64_t i = 0; i != 20; ++i)
    objc_msgSend(v5, "appendFormat:", @"%02x", md[i]);
  uint64_t v7 = (void *)[v5 copy];

  id v8 = v7;
  unsigned int v9 = objc_msgSend([NSString alloc], "initWithFormat:", @"%s", a1);
  unint64_t v10 = [v9 dataUsingEncoding:4];

  id v11 = v10;
  uint64_t v12 = [v11 bytes];
  id v13 = [v8 dataUsingEncoding:4];
  uint64_t v14 = [v13 bytes];

  if ([v11 length])
  {
    unint64_t v15 = 0;
    int v16 = 0;
    unint64_t v17 = (char *)v14;
    do
    {
      char v18 = *v17++;
      *(unsigned char *)(v12 + v15) ^= v18;
      if ([v8 length] == v16 + 1)
      {
        unint64_t v17 = (char *)v14;
        int v16 = 0;
      }
      else
      {
        ++v16;
      }
      ++v15;
    }
    while ([v11 length] > v15);
  }
  uint64_t v19 = (void *)[[NSString alloc] initWithData:v11 encoding:4];

  return v19;
}

void sub_1E0CE9D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0CE9F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1E0CEA04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1E0CEB578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0CEBA7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t HKCodableQuantityDistributionDataReadFrom(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    uint64_t v16 = *v5;
    int v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(unsigned char *)(a2 + v16)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v18 = v10 & 7;
    if (v17 || v18 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        a1[96] |= 2u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v34 = 40;
        goto LABEL_55;
      case 2u:
        a1[96] |= 1u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v34 = 32;
LABEL_55:
        *(void *)&a1[v34] = v22;
        goto LABEL_56;
      case 3u:
        unint64_t v23 = objc_alloc_init(HKCodableQuantity);
        uint64_t v24 = 80;
        goto LABEL_32;
      case 4u:
        unint64_t v23 = objc_alloc_init(HKCodableQuantity);
        uint64_t v24 = 88;
        goto LABEL_32;
      case 5u:
        unint64_t v23 = objc_alloc_init(HKCodableQuantity);
        uint64_t v24 = 72;
        goto LABEL_32;
      case 6u:
        unint64_t v23 = objc_alloc_init(HKCodableQuantity);
        uint64_t v24 = 48;
        goto LABEL_32;
      case 7u:
        unint64_t v23 = objc_alloc_init(HKCodableQuantity);
        uint64_t v24 = 64;
LABEL_32:
        objc_storeStrong((id *)&a1[v24], v23);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v23, a2))
        {
          PBReaderRecallMark();
LABEL_35:

LABEL_56:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 8u:
        if (v18 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (1)
          {
            CGRect v28 = (unint64_t *)(a2 + *v3);
            unint64_t v29 = *v28;
            unint64_t v30 = *(void *)(a2 + *v4);
            if (*v28 >= v30) {
              break;
            }
            uint64_t v31 = *v5;
            if (*(unsigned char *)(a2 + v31)) {
              break;
            }
            if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > v30) {
              *(unsigned char *)(a2 + v31) = 1;
            }
            else {
              *CGRect v28 = v29 + 8;
            }
            PBRepeatedDoubleAdd();
          }
          PBReaderRecallMark();
        }
        else
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(void *)(a2 + *v4)) {
            *(void *)(a2 + v32) = v33 + 8;
          }
          else {
            *(unsigned char *)(a2 + v16) = 1;
          }
          PBRepeatedDoubleAdd();
        }
        goto LABEL_56;
      case 9u:
        PBReaderReadString();
        unint64_t v23 = (HKCodableQuantity *)objc_claimAutoreleasedReturnValue();
        if (v23) {
          [a1 addContextIdentifiers:v23];
        }
        goto LABEL_35;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_56;
    }
  }
}

void sub_1E0CF2AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0CF2FE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void sub_1E0CF31A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1E0CF3874(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL HKCodableSummaryTimePeriodValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  long long v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        unint64_t v23 = &OBJC_IVAR___HKCodableSummaryTimePeriodValue__timeInterval;
LABEL_32:
        *(void *)(a1 + *v23) = v20;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_33:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    *(unsigned char *)(a1 + 24) |= 1u;
    uint64_t v21 = *v3;
    unint64_t v22 = *(void *)(a2 + v21);
    if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v22);
      *(void *)(a2 + v21) = v22 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + *v5) = 1;
      uint64_t v20 = 0;
    }
    unint64_t v23 = &OBJC_IVAR___HKCodableSummaryTimePeriodValue__dateData;
    goto LABEL_32;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

HKSampleTypeCountDataSource *HKInteractiveChartDataSourceCount(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  long long v5 = [(HKHealthQueryChartCacheDataSource *)[HKSampleTypeCountDataSource alloc] initWithDisplayType:v4 healthStore:v3];

  [(HKSampleTypeCountDataSource *)v5 setUserInfoCreationBlock:&__block_literal_global_62];
  return v5;
}

HKInteractiveChartNumberData *__HKInteractiveChartDataSourceCount_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init(HKInteractiveChartNumberData);
  [(HKInteractiveChartNumberData *)v3 setValue:v2];

  id v4 = HKIntegerFormatter();
  [(HKInteractiveChartNumberData *)v3 setNumberFormatter:v4];

  return v3;
}

HKSingleDailyValueQuantityTypeDataSource *HKInteractiveChartDataSourceQuantityType(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id v15 = a2;
  int v16 = [v11 presentation];
  int v17 = [v16 configurationForTimeScope:a3];

  uint64_t v18 = [v15 aggregationStyle];
  if (!v18)
  {
    uint64_t v20 = 16;
    uint64_t v21 = v11;
    id v22 = v13;
    id v23 = v11;
    uint64_t v24 = 16;
LABEL_8:
    unint64_t v19 = [v21 _singleValueUserInfoBlockWithUnitController:v22 displayType:v23 statisticsOption:v24];
    goto LABEL_9;
  }
  if ([v17 detailChart] != 1)
  {
    if ([v17 detailChart] == 2)
    {
      uint64_t v20 = 4;
      uint64_t v21 = v11;
      id v22 = v13;
      id v23 = v11;
      uint64_t v24 = 4;
    }
    else
    {
      uint64_t v20 = 2;
      uint64_t v21 = v11;
      id v22 = v13;
      id v23 = v11;
      uint64_t v24 = 2;
    }
    goto LABEL_8;
  }
  uint64_t v29 = MEMORY[0x1E4F143A8];
  uint64_t v30 = 3221225472;
  uint64_t v31 = __HKInteractiveChartDataSourceQuantityType_block_invoke;
  uint64_t v32 = &unk_1E6D51B68;
  id v33 = v13;
  id v34 = v11;
  unint64_t v19 = _Block_copy(&v29);

  uint64_t v20 = 12;
LABEL_9:
  int v25 = objc_msgSend(v17, "singleDailyValue", v29, v30, v31, v32);
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 6 && v25)
  {
    unint64_t v26 = [(HKQuantityTypeDataSource *)[HKSingleDailyValueQuantityTypeDataSource alloc] initWithUnitController:v13 options:v20 displayType:v11 healthStore:v12];
  }
  else
  {
    CGAffineTransform v27 = [[HKQuantityTypeDataSource alloc] initWithUnitController:v13 options:v20 displayType:v11 healthStore:v12];
    unint64_t v26 = (HKSingleDailyValueQuantityTypeDataSource *)v27;
    if (v14) {
      [(HKQuantityTypeDataSource *)v27 setPreprocessingHandler:v14];
    }
  }
  [(HKQuantityTypeDataSource *)v26 setUserInfoCreationBlock:v19];

  return v26;
}

HKInteractiveChartSinglePointData *__HKInteractiveChartDataSourceQuantityType_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) unitForDisplayType:*(void *)(a1 + 40)];
  long long v5 = [v3 minQuantity];
  [v5 doubleValueForUnit:v4];
  double v7 = v6;

  char v8 = [v3 maxQuantity];
  [v8 doubleValueForUnit:v4];
  double v10 = v9;

  id v11 = objc_alloc_init(HKInteractiveChartSinglePointData);
  id v12 = v11;
  if (vabdd_f64(v10, v7) >= 0.00000011920929)
  {
    [(HKInteractiveChartSinglePointData *)v11 setMinValue:v7];
    [(HKInteractiveChartSinglePointData *)v12 setMaxValue:v10];
    [(HKInteractiveChartSinglePointData *)v12 setUnit:v4];
    -[HKInteractiveChartSinglePointData setRecordCount:](v12, "setRecordCount:", [v3 recordCount]);
    id v14 = [v3 statisticsInterval];
    [(HKInteractiveChartSinglePointData *)v12 setStatisticsInterval:v14];

    [(HKInteractiveChartSinglePointData *)v12 setRepresentsRange:1];
  }
  else
  {
    [(HKInteractiveChartSinglePointData *)v11 setValue:v7];
    [(HKInteractiveChartSinglePointData *)v12 setUnit:v4];
    -[HKInteractiveChartSinglePointData setRecordCount:](v12, "setRecordCount:", [v3 recordCount]);
    id v13 = [v3 statisticsInterval];
    [(HKInteractiveChartSinglePointData *)v12 setStatisticsInterval:v13];
  }
  id v15 = [v3 metadata];
  [(HKInteractiveChartSinglePointData *)v12 setMetadata:v15];

  return v12;
}

id HKInteractiveChartDataSourceChartStyle(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  double v10 = [v7 chartingRules];
  uint64_t v11 = [v10 chartStyleForTimeScope:a2];

  switch(v11)
  {
    case 1:
    case 2:
    case 3:
    case 9:
      _HKInitializeLogging();
      id v12 = (void *)*MEMORY[0x1E4F29FB0];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FB0], OS_LOG_TYPE_ERROR)) {
        HKInteractiveChartDataSourceChartStyle_cold_1(v12, v7, (uint64_t)a2);
      }
      a2 = 0;
      break;
    case 4:
      id v13 = [v7 objectType];
      uint64_t v15 = HKInteractiveChartDataSourceTimePeriod(v7, v13, (uint64_t)a2, v8);
      goto LABEL_9;
    case 5:
    case 6:
      id v13 = [v7 objectType];
      uint64_t v15 = HKInteractiveChartDataSourceStackedCategoryValue(v7, v13, v14, v8);
      goto LABEL_9;
    case 7:
      id v13 = [v7 objectType];
      uint64_t v15 = HKInteractiveChartDataSourceSingleCenteredLine(v7, v13, v16, v8);
      goto LABEL_9;
    case 8:
      id v13 = [v7 objectType];
      uint64_t v15 = HKInteractiveChartDataSourceLevelCategoryValue(v7, v13, v17, v8);
LABEL_9:
      a2 = (void *)v15;

      break;
    default:
      break;
  }

  return a2;
}

HKTimePeriodSeriesDataSource *HKInteractiveChartDataSourceTimePeriod(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  id v9 = a2;
  double v10 = [(HKHealthQueryChartCacheDataSource *)[HKTimePeriodSeriesDataSource alloc] initWithDisplayType:v7 healthStore:v8];

  [(HKTimePeriodSeriesDataSource *)v10 setSampleType:v9];
  uint64_t v11 = [v7 chartingPredicateForTimeScope:a3];
  [(HKTimePeriodSeriesDataSource *)v10 setQueryPredicate:v11];

  id v12 = v7;
  if ([v12 displayTypeIdentifier] == 63)
  {
    id v13 = objc_msgSend(v12, "hk_enumeratedValueLabels");
    uint64_t v14 = [NSNumber numberWithInteger:_HKCategoryValueSleepAnalysisDefaultAsleepValue()];
    uint64_t v15 = [v13 objectForKeyedSubscript:v14];
  }
  else
  {
    uint64_t v15 = 0;
  }

  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = __HKInteractiveChartDataSourceTimePeriod_block_invoke;
  v18[3] = &unk_1E6D54C08;
  id v19 = v15;
  id v16 = v15;
  [(HKTimePeriodSeriesDataSource *)v10 setUserInfoCreationBlock:v18];

  return v10;
}

HKHorizontalTimePeriodDataSource *HKInteractiveChartDataSourceStackedCategoryValue(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = a1;
  id v9 = [(HKHealthQueryChartCacheDataSource *)[HKHorizontalTimePeriodDataSource alloc] initWithDisplayType:v8 healthStore:v6];

  [(HKHorizontalTimePeriodDataSource *)v9 setSampleType:v7];
  double v10 = objc_msgSend(v8, "hk_valueOrderForStackedCharts");

  [(HKHorizontalTimePeriodDataSource *)v9 setValueOrder:v10];
  [(HKHorizontalTimePeriodDataSource *)v9 setUserInfoCreationBlock:&__block_literal_global_317_1];
  return v9;
}

HKHorizontalSingleLineDataSource *HKInteractiveChartDataSourceSingleCenteredLine(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = a1;
  id v9 = [(HKHealthQueryChartCacheDataSource *)[HKHorizontalSingleLineDataSource alloc] initWithDisplayType:v8 healthStore:v6];

  [(HKHorizontalSingleLineDataSource *)v9 setUserInfoCreationBlock:&__block_literal_global_313];
  [(HKHorizontalSingleLineDataSource *)v9 setSampleType:v7];

  return v9;
}

HKLevelCategoryDataSource *HKInteractiveChartDataSourceLevelCategoryValue(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = a1;
  id v9 = [(HKHealthQueryChartCacheDataSource *)[HKLevelCategoryDataSource alloc] initWithDisplayType:v8 healthStore:v6];

  double v10 = objc_msgSend(v8, "hk_valueOrderForStackedCharts");

  [(HKLevelCategoryDataSource *)v9 setValueOrder:v10];
  [(HKLevelCategoryDataSource *)v9 setSampleType:v7];

  [(HKLevelCategoryDataSource *)v9 setUserInfoCreationBlock:&__block_literal_global_308];
  return v9;
}

HKInteractiveChartCategoryValueData *__HKInteractiveChartDataSourceLevelCategoryValue_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = objc_alloc_init(HKInteractiveChartCategoryValueData);
  [(HKInteractiveChartCategoryValueData *)v8 setValue:a2];
  [(HKInteractiveChartCategoryValueData *)v8 setStartDate:v7];

  [(HKInteractiveChartCategoryValueData *)v8 setEndDate:v6];
  return v8;
}

HKInteractiveChartCategoryValueData *__HKInteractiveChartDataSourceSingleCenteredLine_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = objc_alloc_init(HKInteractiveChartCategoryValueData);
  [(HKInteractiveChartCategoryValueData *)v8 setValue:a2];
  [(HKInteractiveChartCategoryValueData *)v8 setStartDate:v7];

  [(HKInteractiveChartCategoryValueData *)v8 setEndDate:v6];
  return v8;
}

HKInteractiveChartTimePeriodData *__HKInteractiveChartDataSourceStackedCategoryValue_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a4;
  id v6 = a3;
  id v7 = objc_alloc_init(HKInteractiveChartTimePeriodData);
  [v5 timeIntervalSinceDate:v6];
  -[HKInteractiveChartTimePeriodData setTimePeriod:](v7, "setTimePeriod:");
  [(HKInteractiveChartTimePeriodData *)v7 setStartDate:v6];

  [(HKInteractiveChartTimePeriodData *)v7 setEndDate:v5];
  [(HKInteractiveChartTimePeriodData *)v7 setRecordCount:1];
  return v7;
}

HKInteractiveChartTimePeriodData *__HKInteractiveChartDataSourceTimePeriod_block_invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  id v9 = objc_alloc_init(HKInteractiveChartTimePeriodData);
  [v8 doubleValue];
  double v11 = v10;

  [(HKInteractiveChartTimePeriodData *)v9 setTimePeriod:v11];
  [(HKInteractiveChartTimePeriodData *)v9 setTimePeriodPrefix:*(void *)(a1 + 32)];
  [(HKInteractiveChartTimePeriodData *)v9 setRecordCount:a3];
  [(HKInteractiveChartTimePeriodData *)v9 setStatisticsInterval:v7];

  return v9;
}

HKJulianIndexedSevenDayQuantityDataSource *HKInteractiveChartDataSourceForAfibBurden(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  id v9 = a3;
  double v10 = [HKJulianIndexedSevenDayQuantityDataSource alloc];
  double v11 = [v7 objectType];
  if (a2 == 3)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __HKInteractiveChartDataSourceForAfibBurden_block_invoke;
    v14[3] = &unk_1E6D54C30;
    id v15 = v8;
    id v16 = v7;
    id v12 = [(HKJulianIndexedSevenDayQuantityDataSource *)v10 initWithDisplayType:v16 healthStore:v9 quantityType:v11 unitController:v15 singlePointUserInfoCreationBlock:v14];
  }
  else
  {
    id v12 = [(HKJulianIndexedSevenDayQuantityDataSource *)v10 initWithDisplayType:v7 healthStore:v9 quantityType:v11 unitController:v8 intervalUserInfoCreationBlock:&__block_literal_global_326_1];
  }
  return v12;
}

HKInteractiveChartAFibBurdenData *__HKInteractiveChartDataSourceForAfibBurden_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = a3;
  id v7 = a2;
  id v8 = [v4 unitForDisplayType:v5];
  id v9 = [v7 averageQuantity];
  [v9 doubleValueForUnit:v8];
  double v11 = v10;

  uint64_t v12 = [v7 recordCount];
  if (v11 < 0.02) {
    double v11 = 0.02;
  }
  id v13 = objc_alloc_init(HKInteractiveChartAFibBurdenData);
  [(HKInteractiveChartSinglePointData *)v13 setValue:v11];
  [(HKInteractiveChartSinglePointData *)v13 setUnit:v8];
  [(HKInteractiveChartSinglePointData *)v13 setRepresentsRange:1];
  [(HKInteractiveChartSinglePointData *)v13 setMinValue:v11];
  [(HKInteractiveChartSinglePointData *)v13 setMaxValue:v11];
  uint64_t v14 = [v6 objectForKeyedSubscript:*MEMORY[0x1E4F2A1B8]];

  -[HKInteractiveChartAFibBurdenData setClampsLowerData:](v13, "setClampsLowerData:", [v14 BOOLValue]);
  [(HKInteractiveChartSinglePointData *)v13 setRecordCount:v12];
  id v15 = [v7 statisticsInterval];

  [(HKInteractiveChartSinglePointData *)v13 setStatisticsInterval:v15];
  return v13;
}

HKInteractiveChartAFibBurdenData *__HKInteractiveChartDataSourceForAfibBurden_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init(HKInteractiveChartAFibBurdenData);
  id v7 = [v5 _unit];
  [(HKInteractiveChartSinglePointData *)v6 setUnit:v7];

  id v8 = [v5 _unit];
  [v5 doubleValueForUnit:v8];
  double v10 = v9;

  if (v10 < 0.02) {
    double v10 = 0.02;
  }
  [(HKInteractiveChartSinglePointData *)v6 setValue:v10];
  [(HKInteractiveChartSinglePointData *)v6 setMinValue:v10];
  [(HKInteractiveChartSinglePointData *)v6 setMaxValue:v10];
  [(HKInteractiveChartSinglePointData *)v6 setRepresentsRange:1];
  double v11 = [v4 objectForKeyedSubscript:*MEMORY[0x1E4F2A1B8]];

  -[HKInteractiveChartAFibBurdenData setClampsLowerData:](v6, "setClampsLowerData:", [v11 BOOLValue]);
  return v6;
}

id HKInteractiveChartDataSourceForAppleWalkingSteadiness(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a1;
  double v10 = [v9 objectType];
  double v11 = +[HKMobilityUtilities generateAppleWalkingSteadinessDataSourceForTimeScope:a2 displayType:v9 healthStore:v8 quantityType:v10 unitController:v7];

  return v11;
}

id HKInteractiveChartDataSourceForAudioLevel(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  id v8 = [v7 objectType];
  id v9 = [v8 identifier];
  double v10 = [v7 _audioLevelDataSourceForTypeIdentifier:v9 withHealthStore:v6 attenuatesExposureData:1 unitController:v5];

  return v10;
}

HKBalanceChartDataSource *HKInteractiveChartDataSourceForBalance(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [[HKBalanceChartDataSource alloc] initWithDisplayType:v4 healthStore:v3];

  return v5;
}

HKBloodPressureDataSource *HKInteractiveChartDataSourceForBloodPressure(void *a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E4F2B618];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 unitFromString:@"mmHg"];
  id v7 = [(HKHealthQueryChartCacheDataSource *)[HKBloodPressureDataSource alloc] initWithDisplayType:v5 healthStore:v4];

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = __HKInteractiveChartDataSourceForBloodPressure_block_invoke;
  v10[3] = &unk_1E6D54C78;
  id v11 = v6;
  id v8 = v6;
  [(HKBloodPressureDataSource *)v7 setUserInfoCreationBlock:v10];

  return v7;
}

HKInteractiveChartBloodPressureData *__HKInteractiveChartDataSourceForBloodPressure_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v8 = NSNumber;
    id v9 = [v5 minimumQuantity];
    [v9 doubleValueForUnit:*(void *)(a1 + 32)];
    double v10 = objc_msgSend(v8, "numberWithDouble:");

    id v11 = NSNumber;
    uint64_t v12 = [v5 maximumQuantity];
    [v12 doubleValueForUnit:*(void *)(a1 + 32)];
    id v13 = objc_msgSend(v11, "numberWithDouble:");

    uint64_t v14 = +[HKValueRange valueRangeWithMinValue:v10 maxValue:v13];

    if (v7)
    {
LABEL_3:
      id v15 = NSNumber;
      id v16 = [v7 minimumQuantity];
      [v16 doubleValueForUnit:*(void *)(a1 + 32)];
      uint64_t v17 = objc_msgSend(v15, "numberWithDouble:");

      uint64_t v18 = NSNumber;
      id v19 = [v7 maximumQuantity];
      [v19 doubleValueForUnit:*(void *)(a1 + 32)];
      uint64_t v20 = objc_msgSend(v18, "numberWithDouble:");

      uint64_t v21 = +[HKValueRange valueRangeWithMinValue:v17 maxValue:v20];

      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (v6) {
      goto LABEL_3;
    }
  }
  uint64_t v21 = 0;
LABEL_6:
  id v22 = objc_alloc_init(HKInteractiveChartBloodPressureData);
  [(HKInteractiveChartBloodPressureData *)v22 setSystolicRange:v14];
  [(HKInteractiveChartBloodPressureData *)v22 setDiastolicRange:v21];

  return v22;
}

HKHandwashingEventDataSource *HKInteractiveChartDataSourceForHandwashingEvent(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [[HKHandwashingEventDataSource alloc] initWithDisplayType:v4 healthStore:v3];

  return v5;
}

HKInsulinDataSource *HKInteractiveChartDataSourceForInsulinDelivery(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [(HKHealthQueryChartCacheDataSource *)[HKInsulinDataSource alloc] initWithDisplayType:v4 healthStore:v3];

  [(HKInsulinDataSource *)v5 setUserInfoCreationBlock:&__block_literal_global_342];
  return v5;
}

HKInteractiveChartInsulinData *__HKInteractiveChartDataSourceForInsulinDelivery_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init(HKInteractiveChartInsulinData);
  [v5 doubleValue];
  double v8 = v7;

  [(HKInteractiveChartInsulinData *)v6 setBasalValue:v8];
  [v4 doubleValue];
  double v10 = v9;

  [(HKInteractiveChartInsulinData *)v6 setTotalValue:v10];
  return v6;
}

HKLevelCategoryDataSource *HKInteractiveChartDataSourceForMenstruation(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  double v7 = [v5 chartingRules];
  uint64_t v8 = [v7 chartStyleForTimeScope:a2];

  if (v8 == 8)
  {
    double v9 = [(HKHealthQueryChartCacheDataSource *)[HKLevelCategoryDataSource alloc] initWithDisplayType:v5 healthStore:v6];
    id v11 = objc_msgSend(v5, "hk_valueOrderForStackedCharts");
    [(HKLevelCategoryDataSource *)v9 setValueOrder:v11];

    uint64_t v12 = [v5 objectType];
    [(HKLevelCategoryDataSource *)v9 setSampleType:v12];

    [(HKLevelCategoryDataSource *)v9 setPointStyleBlock:&__block_literal_global_350];
    [(HKLevelCategoryDataSource *)v9 setUserInfoCreationBlock:&__block_literal_global_352_0];
  }
  else if (v8 == 7)
  {
    double v9 = [(HKHealthQueryChartCacheDataSource *)[HKHorizontalSingleLineDataSourceMenstruation alloc] initWithDisplayType:v5 healthStore:v6];
    [(HKLevelCategoryDataSource *)v9 setUserInfoCreationBlock:&__block_literal_global_346];
    double v10 = [v5 objectType];
    [(HKLevelCategoryDataSource *)v9 setSampleType:v10];
  }
  else
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v14 = objc_msgSend(NSString, "stringWithUTF8String:", "HKHealthQueryChartCacheDataSource * _Nonnull HKInteractiveChartDataSourceForMenstruation(HKDisplayType * _Nonnull __strong, HKTimeScope, HKHealthStore * _Nonnull __strong, HKUnitPreferenceController * _Nonnull __strong)");
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"HKDisplayType+DataSources.m", 586, @"Unsupported chart sylte for menstruation; expected single centered line or level category value but got %ld",
      v8);

    double v9 = 0;
  }

  return v9;
}

HKInteractiveChartMenstruationData *__HKInteractiveChartDataSourceForMenstruation_block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  id v7 = a3;
  uint64_t v8 = objc_alloc_init(HKInteractiveChartMenstruationData);
  [(HKInteractiveChartMenstruationData *)v8 setValue:a2];
  [(HKInteractiveChartMenstruationData *)v8 setDate:v7];

  [(HKInteractiveChartMenstruationData *)v8 setStartOfCycle:a5 & 1];
  return v8;
}

uint64_t __HKInteractiveChartDataSourceForMenstruation_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 metadata];
  id v4 = [v3 valueForKey:*MEMORY[0x1E4F2A1A8]];
  char v5 = [v4 BOOLValue];

  if (v5) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 2 * ([v2 value] == 5);
  }

  return v6;
}

HKInteractiveChartMenstruationData *__HKInteractiveChartDataSourceForMenstruation_block_invoke_3(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  id v7 = a3;
  uint64_t v8 = objc_alloc_init(HKInteractiveChartMenstruationData);
  [(HKInteractiveChartMenstruationData *)v8 setValue:a2];
  [(HKInteractiveChartMenstruationData *)v8 setDate:v7];

  [(HKInteractiveChartMenstruationData *)v8 setStartOfCycle:a5 & 1];
  return v8;
}

HKScoredAssessmentDataSource *HKInteractiveChartDataSourceForScoredAssessment(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  char v5 = [(HKHealthQueryChartCacheDataSource *)[HKScoredAssessmentDataSource alloc] initWithDisplayType:v4 healthStore:v3];

  uint64_t v6 = [v4 objectType];
  [(HKLevelCategoryDataSource *)v5 setSampleType:v6];

  id v7 = objc_msgSend(v4, "hk_valueOrderForStackedCharts");

  [(HKLevelCategoryDataSource *)v5 setValueOrder:v7];
  [(HKLevelCategoryDataSource *)v5 setUserInfoCreationBlock:&__block_literal_global_359_0];
  return v5;
}

HKInteractiveChartCategoryValueData *__HKInteractiveChartDataSourceForScoredAssessment_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = objc_alloc_init(HKInteractiveChartCategoryValueData);
  [(HKInteractiveChartCategoryValueData *)v8 setValue:a2];
  [(HKInteractiveChartCategoryValueData *)v8 setStartDate:v7];

  [(HKInteractiveChartCategoryValueData *)v8 setEndDate:v6];
  return v8;
}

id HKInteractiveChartDataSourceForSleepingWristTemperature(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  id v9 = a3;
  uint64_t v10 = _HKStatisticsOptionBaselineRelativeQuantities();
  id v11 = off_1E6D4FF88;
  if (a2 != 6) {
    id v11 = off_1E6D4FE80;
  }
  uint64_t v12 = (void *)[objc_alloc(*v11) initWithUnitController:v8 options:v10 | 0xE displayType:v7 healthStore:v9];

  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __HKInteractiveChartDataSourceForSleepingWristTemperature_block_invoke;
  void v16[3] = &unk_1E6D51B68;
  id v17 = v8;
  id v18 = v7;
  id v13 = v7;
  id v14 = v8;
  [v12 setUserInfoCreationBlock:v16];

  return v12;
}

HKInteractiveChartBaselineRelativeData *__HKInteractiveChartDataSourceForSleepingWristTemperature_block_invoke(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  char v5 = [v2 unitForChartingDisplayType:v3];
  id v6 = objc_alloc_init(HKInteractiveChartBaselineRelativeData);
  id v7 = [v4 averageQuantity];
  [v7 doubleValueForUnit:v5];
  -[HKInteractiveChartSinglePointData setValue:](v6, "setValue:");

  [(HKInteractiveChartSinglePointData *)v6 setUnit:v5];
  id v8 = [v4 baselineRelativeValueState];
  [(HKInteractiveChartBaselineRelativeData *)v6 setRelativeValueState:v8];

  -[HKInteractiveChartSinglePointData setRecordCount:](v6, "setRecordCount:", [v4 recordCount]);
  id v9 = [v4 statisticsInterval];

  [(HKInteractiveChartSinglePointData *)v6 setStatisticsInterval:v9];
  return v6;
}

HKStateOfMindChartDataSource *HKInteractiveChartDataSourceForStateOfMind(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  char v5 = [[HKStateOfMindChartDataSource alloc] initWithDisplayType:v4 healthStore:v3 overlayPredicate:0];

  return v5;
}

HKHorizontalTimePeriodDataSource *HKInteractiveChartDataSourceForWorkouts(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  char v5 = [(HKHealthQueryChartCacheDataSource *)[HKHorizontalTimePeriodDataSource alloc] initWithDisplayType:v4 healthStore:v3];

  id v6 = [MEMORY[0x1E4F2B2C0] workoutType];
  [(HKHorizontalTimePeriodDataSource *)v5 setSampleType:v6];

  [(HKHorizontalTimePeriodDataSource *)v5 setUserInfoCreationBlock:&__block_literal_global_364];
  return v5;
}

HKInteractiveChartTimePeriodData *__HKInteractiveChartDataSourceForWorkouts_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a4;
  id v6 = a3;
  id v7 = objc_alloc_init(HKInteractiveChartTimePeriodData);
  [v5 timeIntervalSinceDate:v6];
  -[HKInteractiveChartTimePeriodData setTimePeriod:](v7, "setTimePeriod:");
  [(HKInteractiveChartTimePeriodData *)v7 setStartDate:v6];

  [(HKInteractiveChartTimePeriodData *)v7 setEndDate:v5];
  [(HKInteractiveChartTimePeriodData *)v7 setRecordCount:1];
  return v7;
}

id HKPreprocessingHandlerForUnderwaterDepth(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __HKPreprocessingHandlerForUnderwaterDepth_block_invoke;
  v9[3] = &unk_1E6D54D58;
  id v10 = v3;
  id v11 = v4;
  id v5 = v4;
  id v6 = v3;
  id v7 = _Block_copy(v9);

  return v7;
}

void __HKPreprocessingHandlerForUnderwaterDepth_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 count])
  {
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    void v16[2] = __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_2;
    void v16[3] = &unk_1E6D54CE0;
    id v17 = v7;
    id v8 = v7;
    [v5 enumerateObjectsUsingBlock:v16];
    id v9 = [MEMORY[0x1E4F28BA0] orPredicateWithSubpredicates:v8];
    id v10 = objc_alloc(MEMORY[0x1E4F2B440]);
    uint64_t v11 = *(void *)(a1 + 32);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_3;
    v13[3] = &unk_1E6D525A0;
    id v14 = v5;
    id v15 = v6;
    uint64_t v12 = (void *)[v10 initWithSampleType:v11 predicate:v9 limit:0 sortDescriptors:0 resultsHandler:v13];
    [*(id *)(a1 + 40) executeQuery:v12];
  }
  else
  {
    (*((void (**)(id, id))v6 + 2))(v6, v5);
  }
}

void __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_2(uint64_t a1, void *a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)MEMORY[0x1E4F2B3C0];
  id v4 = a2;
  id v5 = [v4 startDate];
  id v6 = [v4 endDate];
  id v7 = [v3 predicateForSamplesWithStartDate:v5 endDate:v6 options:0];

  id v8 = (void *)MEMORY[0x1E4F2B3C0];
  id v9 = [v4 maxQuantity];

  id v10 = [v8 predicateForQuantitySamplesWithOperatorType:4 quantity:v9];

  uint64_t v11 = (void *)MEMORY[0x1E4F28BA0];
  v14[0] = v7;
  v14[1] = v10;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
  id v13 = [v11 andPredicateWithSubpredicates:v12];

  [*(id *)(a1 + 32) addObject:v13];
}

void __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_4;
  v8[3] = &unk_1E6D54D30;
  id v9 = v4;
  id v6 = v4;
  id v7 = objc_msgSend(v5, "hk_map:", v8);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_4(uint64_t a1, void *a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 0;
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  id v4 = *(void **)(a1 + 32);
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  id v10 = __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_5;
  uint64_t v11 = &unk_1E6D54D08;
  id v5 = v3;
  id v12 = v5;
  id v13 = &v15;
  id v14 = &v19;
  [v4 enumerateObjectsUsingBlock:&v8];
  if (*((unsigned char *)v20 + 24) && !*((unsigned char *)v16 + 24))
  {
    uint64_t v23 = *MEMORY[0x1E4F2A1C0];
    v24[0] = &unk_1F3C21FD0;
    id v6 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1, v8, v9, v10, v11);
    [v5 setMetadata:v6];
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  return v5;
}

void sub_1E0CF7614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void __HKPreprocessingHandlerForUnderwaterDepth_block_invoke_5(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = [v12 startDate];
  id v4 = [*(id *)(a1 + 32) endDate];
  if ((objc_msgSend(v3, "hk_isAfterDate:", v4) & 1) == 0)
  {
    id v5 = [v12 endDate];
    id v6 = [*(id *)(a1 + 32) startDate];
    char v7 = objc_msgSend(v5, "hk_isBeforeDate:", v6);

    uint64_t v8 = v12;
    if (v7) {
      goto LABEL_9;
    }
    id v3 = [v12 metadata];
    uint64_t v9 = [v3 objectForKey:*MEMORY[0x1E4F2A1C0]];
    id v4 = v9;
    if (v9 && ([v9 doubleValue], v10 == 1.0)) {
      uint64_t v11 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 40);
    }
    *(unsigned char *)(*(void *)(v11 + 8) + 24) = 1;
  }

  uint64_t v8 = v12;
LABEL_9:
}

void sub_1E0CF9738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void OUTLINED_FUNCTION_1_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

uint64_t HKCodableLevelViewDataConfigurationBucketReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v23 = objc_alloc_init(HKCodableClosedRange);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !HKCodableClosedRangeReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 2)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(unsigned char *)(a1 + 16) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0D08EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D09030(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t _shouldShowMapRoute(void *a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 count];
  id v6 = [v3 workout];
  char v7 = [v4 workoutConfiguration];
  uint64_t v8 = [v7 activityType];
  if (!v8) {
    uint64_t v8 = [v6 workoutActivityType];
  }

  [v4 duration];
  double v10 = v9;
  if (v9 == 0.0)
  {
    [v6 duration];
    double v10 = v11;
  }
  double v12 = 0.7;
  if (v8 != 46) {
    double v12 = 0.5;
  }
  double v13 = v12 * v10;
  int64_t v14 = vcvtmd_s64_f64(v12 * v10 / 5.0);
  if (v5 >= v14)
  {
    int v39 = v5;
    char v40 = v6;
    id v41 = v4;
    id v42 = v3;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    obuint64_t j = [v3 inOrderLocationArrays];
    uint64_t v20 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)v45;
      double v23 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v45 != v22) {
            objc_enumerationMutation(obj);
          }
          int v25 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          unint64_t v26 = [v25 firstObject];
          if ((unint64_t)[v25 count] < 2)
          {
            CGRect v28 = v26;
          }
          else
          {
            unint64_t v27 = 1;
            do
            {
              CGRect v28 = [v25 objectAtIndexedSubscript:v27];
              uint64_t v29 = [v28 timestamp];
              [v29 timeIntervalSinceReferenceDate];
              double v31 = v30;
              uint64_t v32 = [v26 timestamp];
              [v32 timeIntervalSinceReferenceDate];
              double v34 = v31 - v33;

              double v35 = -0.0;
              if (v34 > 5.0) {
                double v35 = v34;
              }
              double v23 = v23 + v35;

              ++v27;
              unint64_t v26 = v28;
            }
            while (v27 < [v25 count]);
          }
        }
        uint64_t v21 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
      }
      while (v21);
    }
    else
    {
      double v23 = 0.0;
    }

    _HKInitializeLogging();
    uint64_t v36 = *MEMORY[0x1E4F29FB8];
    BOOL v37 = os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FB8], OS_LOG_TYPE_DEFAULT);
    if (v23 >= v13)
    {
      id v4 = v41;
      id v3 = v42;
      id v6 = v40;
      if (!v37)
      {
LABEL_33:
        uint64_t v16 = 0;
        goto LABEL_34;
      }
      *(_DWORD *)buf = 134217984;
      *(double *)char v49 = v23 / v10;
      char v17 = "[routes] Disable route. Time without GPS is %.2f of workout";
      unsigned int v18 = v36;
      uint32_t v19 = 12;
LABEL_32:
      _os_log_impl(&dword_1E0B26000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_33;
    }
    id v4 = v41;
    id v3 = v42;
    id v6 = v40;
    if (v37)
    {
      *(_DWORD *)buf = 138412546;
      *(void *)char v49 = v41;
      *(_WORD *)&v49[8] = 1024;
      int v50 = v39;
      _os_log_impl(&dword_1E0B26000, v36, OS_LOG_TYPE_DEFAULT, "[routes] Showing route for workout activity %@. Total active locations (%d)", buf, 0x12u);
    }
    uint64_t v16 = 1;
  }
  else
  {
    _HKInitializeLogging();
    int v15 = *MEMORY[0x1E4F29FB8];
    uint64_t v16 = 0;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FB8], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)char v49 = v5;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v14;
      char v17 = "[routes] Disable route. Total active locations (%d) < minimum number of points (%d)";
      unsigned int v18 = v15;
      uint32_t v19 = 14;
      goto LABEL_32;
    }
  }
LABEL_34:

  return v16;
}

void sub_1E0D097C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D09C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void sub_1E0D0A45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D0A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKHealthPrivacyServiceRemoteObjectPickerViewControllerInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1F3D18E38];
}

uint64_t HKCodableQuantityReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

HKDisplayType *HKDisplayTypeIdentifierHeartbeatSeriesMake()
{
  uint64_t v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  id v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"TACHOGRAM" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  char v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:119];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:119 categoryIdentifier:11 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLocationSeriesMake()
{
  uint64_t v0 = [[HKDisplayTypeChartingRules alloc] initWithDefaultChartStyle:1 chartingOptions:0 preferredTimeScope:5];
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  uint64_t v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  id v2 = [HKDisplayTypePresentation alloc];
  id v3 = [[HKDisplayTypePresentationConfiguration alloc] initWithCurrentValue:0 secondaryValue:0 detailChart:0 singleDailyValue:0];
  LOBYTE(v12) = 0;
  uint64_t v4 = MEMORY[0x1E4F1CC08];
  uint64_t v5 = [(HKDisplayTypePresentation *)v2 initWithDefaultConfiguration:v3 configurationOverrides:MEMORY[0x1E4F1CC08] scaleFactor:0 showAllDataHierarchically:0 showAppDataHierarchically:0 shouldDisplayUnitStringOnYAxis:0 useSecondsWhenDisplayingDuration:1.0 isCriticalForAutoscale:v12 detailImageName:0 listIconImageNameOverride:0 summaryAttribution:0];

  id v6 = [[HKDisplayTypeLocalization alloc] initWithDisplayNameKey:@"WORKOUT_ROUTE" labelDisplayNameKey:0 localizationTableNameOverride:0 localizedKeySuffix:0 unitNameKeyOverrides:v4];
  char v7 = [HKDisplayType alloc];
  char v8 = [MEMORY[0x1E4F2B2C0] dataTypeWithCode:102];
  unsigned int v9 = [(HKDisplayType *)v7 initWithDisplayTypeIdentifier:102 categoryIdentifier:2 secondaryCategoryIdentifiers:MEMORY[0x1E4F1CBF0] objectType:v8 behavior:v1 presentation:v5 localization:v6 chartingRules:v0 defaultChartingPredicate:0 chartingPredicatesByTimeScope:0];

  return v9;
}

void OUTLINED_FUNCTION_2_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id _enumeratorForCurrentLocale(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4FB1EB0];
  id v2 = a1;
  if ([v1 userInterfaceLayoutDirectionForSemanticContentAttribute:0] == 1) {
    [v2 reverseObjectEnumerator];
  }
  else {
  id v3 = [v2 objectEnumerator];
  }

  return v3;
}

uint64_t HKHealthKeyColor()
{
  return objc_msgSend(MEMORY[0x1E4FB1618], "hk_appKeyColor");
}

uint64_t HKHealthTintColor()
{
  return objc_msgSend(MEMORY[0x1E4FB1618], "hk_appTintColor");
}

id HKUIDefaultBirthdate()
{
  uint64_t v0 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  uint64_t v1 = [MEMORY[0x1E4F1C9C8] date];
  id v2 = [v0 startOfDayForDate:v1];

  id v3 = [v0 dateByAddingUnit:4 value:-35 toDate:v2 options:0];

  return v3;
}

id HKUIDefaultBirthdateComponents()
{
  uint64_t v0 = HKUIDefaultBirthdate();
  uint64_t v1 = objc_msgSend(MEMORY[0x1E4F1C9A8], "hk_canonicalDateOfBirthDateComponentsWithDate:", v0);

  return v1;
}

uint64_t HKDefaultChartYAxisColor()
{
  return objc_msgSend(MEMORY[0x1E4FB1618], "hk_chartAxisLabelColor");
}

double HKHealthUIBuddyDirectionalEdgeInsets()
{
  return 0.0;
}

uint64_t HKUICalendarLocaleIsRightToLeft()
{
  if (HKUICalendarLocaleIsRightToLeft_onceToken != -1) {
    dispatch_once(&HKUICalendarLocaleIsRightToLeft_onceToken, &__block_literal_global_67);
  }
  return HKUICalendarLocaleIsRightToLeft___calLocaleIsRTL;
}

void __HKUICalendarLocaleIsRightToLeft_block_invoke()
{
  id v0 = [MEMORY[0x1E4F1CA20] currentLocale];
  HKUICalendarLocaleIsRightToLeft___calLocaleIsRTL = [v0 _calendarDirection] != 0;
}

id HKUIJoinStringsForLocale(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = _enumeratorForCurrentLocale(v1);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(v2, "appendString:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return v2;
}

id HKUIJoinAttributedStringsForLocale(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E48]);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(v2, "appendAttributedString:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return v2;
}

id HKUIJoinAttributedStringsForLocaleWithSeparator(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ([v3 count])
  {
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        char v7 = [v3 objectAtIndexedSubscript:v6 - 1];
        uint64_t v8 = [v7 length] - 1;

        long long v9 = [v3 objectAtIndexedSubscript:v6 - 1];
        long long v10 = [v9 attributesAtIndex:v8 effectiveRange:0];

        long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v4 attributes:v10];
        [v5 addObject:v11];
      }
      long long v12 = [v3 objectAtIndexedSubscript:v6];
      [v5 addObject:v12];

      ++v6;
    }
    while (v6 < [v3 count]);
  }
  unint64_t v13 = HKUIJoinAttributedStringsForLocale(v5);

  return v13;
}

double HKUIHalfPixel()
{
  double result = *(double *)&HKUIHalfPixel___halfPixel;
  if (*(double *)&HKUIHalfPixel___halfPixel == 2.22507386e-308)
  {
    double result = HKUIOnePixel() * 0.5;
    HKUIHalfPixel___halfPixel = *(void *)&result;
  }
  return result;
}

double HKUIFloorToScreenScale(double a1)
{
  double v2 = *(double *)&HKUIFloorToScreenScale___mainscreenScale;
  if (*(double *)&HKUIFloorToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4FB1BA8], "mainScreen", *(double *)&HKUIFloorToScreenScale___mainscreenScale);
    [v3 scale];
    HKUIFloorToScreenScale___mainscreenScale = v4;

    double v2 = *(double *)&HKUIFloorToScreenScale___mainscreenScale;
  }
  return floor(v2 * a1) / v2;
}

double HKUIFloorCGPointToScreenScale(double a1, double a2)
{
  double v3 = HKUIFloorToScreenScale(a1);
  HKUIFloorToScreenScale(a2);
  return v3;
}

double HKUICeilToScreenScale(double a1)
{
  double v2 = *(double *)&HKUICeilToScreenScale___mainscreenScale;
  if (*(double *)&HKUICeilToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    double v3 = objc_msgSend(MEMORY[0x1E4FB1BA8], "mainScreen", *(double *)&HKUICeilToScreenScale___mainscreenScale);
    [v3 scale];
    HKUICeilToScreenScale___mainscreenScale = v4;

    double v2 = *(double *)&HKUICeilToScreenScale___mainscreenScale;
  }
  return ceil(v2 * a1) / v2;
}

double HKUIRoundToScreenScale(double a1)
{
  double v2 = *(double *)&HKUIRoundToScreenScale___mainscreenScale;
  if (*(double *)&HKUIRoundToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    double v3 = objc_msgSend(MEMORY[0x1E4FB1BA8], "mainScreen", *(double *)&HKUIRoundToScreenScale___mainscreenScale);
    [v3 scale];
    HKUIRoundToScreenScale___mainscreenScale = v4;

    double v2 = *(double *)&HKUIRoundToScreenScale___mainscreenScale;
  }
  return floor(a1 * v2 + 0.5) / v2;
}

double HKUICeilRectToScreenScale(double a1, double a2, double a3, double a4)
{
  double v7 = HKUICeilToScreenScale(a1);
  HKUICeilToScreenScale(a2);
  HKUICeilToScreenScale(a3);
  HKUICeilToScreenScale(a4);
  return v7;
}

uint64_t HKUIRectIntegralToScreenScale(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  unint64_t v5 = a4.n128_u64[0];
  unint64_t v6 = a3.n128_u64[0];
  unint64_t v7 = a2.n128_u64[0];
  unint64_t v8 = a1.n128_u64[0];
  a5.n128_u64[0] = HKUIRectIntegralToScreenScale___mainscreenScale;
  if (*(double *)&HKUIRectIntegralToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    long long v9 = objc_msgSend(MEMORY[0x1E4FB1BA8], "mainScreen", 2.22507386e-308, a2.n128_f64[0], a3.n128_f64[0], a4.n128_f64[0], *(double *)&HKUIRectIntegralToScreenScale___mainscreenScale);
    [v9 scale];
    HKUIRectIntegralToScreenScale___mainscreenScale = v10;

    a5.n128_u64[0] = HKUIRectIntegralToScreenScale___mainscreenScale;
  }
  a1.n128_u64[0] = v8;
  a2.n128_u64[0] = v7;
  a3.n128_u64[0] = v6;
  a4.n128_u64[0] = v5;
  return MEMORY[0x1F4166E98](a1, a2, a3, a4, a5);
}

uint64_t HKUIMidDate(void *a1, void *a2)
{
  id v3 = a2;
  [a1 timeIntervalSinceReferenceDate];
  double v5 = v4;
  [v3 timeIntervalSinceReferenceDate];
  double v7 = v6;

  unint64_t v8 = (void *)MEMORY[0x1E4F1C9C8];
  return [v8 dateWithTimeIntervalSinceReferenceDate:(v5 + v7) * 0.5];
}

uint64_t HKUIUnitDisplayName(void *a1, const char *a2, uint64_t a3)
{
  return [a1 localizedDisplayNameForDisplayType:a2 value:a3];
}

id HKUIPredicateMatchingPredicates(void *a1, void *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (v3 && v4)
  {
    double v6 = (void *)MEMORY[0x1E4F28BA0];
    v11[0] = v3;
    v11[1] = v4;
    double v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:2];
    id v8 = [v6 andPredicateWithSubpredicates:v7];
  }
  else
  {
    if (v3) {
      long long v9 = v3;
    }
    else {
      long long v9 = v4;
    }
    id v8 = v9;
  }

  return v8;
}

BOOL HKUIEqualDoubles(double a1, double a2)
{
  return vabdd_f64(a1, a2) <= 2.22044605e-16;
}

BOOL HKUIEqualCGFloats(double a1, double a2)
{
  return vabdd_f64(a1, a2) <= 0.00000011920929;
}

BOOL HKUIEqualCGFloatsWithPrecision(double a1, double a2, double a3)
{
  return vabdd_f64(a1, a2) <= a3;
}

double HKUIRoundedDivide(double a1, double a2, double a3)
{
  double result = a1 / a2;
  double v4 = round(result);
  if (vabdd_f64(result, v4) <= a3) {
    return v4;
  }
  return result;
}

__CFString *HKUIBloodPressureSystolicDiastolicSeparatorString()
{
  return @"/";
}

BOOL HKUIObjectIsLarger(void *a1, uint64_t a2)
{
  return [a1 compare:a2] == 1;
}

BOOL HKUIObjectIsSmallerOrEqual(void *a1, uint64_t a2)
{
  return [a1 compare:a2] != 1;
}

uint64_t HKUIObjectsAreEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (v3 == v4)
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    if (v3 && v4) {
      uint64_t v6 = [v3 isEqual:v4];
    }
  }

  return v6;
}

uint64_t HKUIObjectsAreNotEqual(void *a1, void *a2)
{
  return HKUIObjectsAreEqual(a1, a2) ^ 1;
}

id HKUIObjectMax(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (!v3)
  {
    uint64_t v6 = v4;
    if (v4) {
      goto LABEL_10;
    }
  }
  if (v3)
  {
    uint64_t v6 = v3;
    if (!v4) {
      goto LABEL_10;
    }
  }
  id v7 = 0;
  if (v3 && v4)
  {
    if ([v3 compare:v4] == 1) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v5;
    }
LABEL_10:
    id v7 = v6;
  }

  return v7;
}

id HKUIObjectMin(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  if (!v3)
  {
    uint64_t v6 = v4;
    if (v4) {
      goto LABEL_10;
    }
  }
  if (v3)
  {
    uint64_t v6 = v3;
    if (!v4) {
      goto LABEL_10;
    }
  }
  id v7 = 0;
  if (v3 && v4)
  {
    if ([v3 compare:v4] == -1) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v5;
    }
LABEL_10:
    id v7 = v6;
  }

  return v7;
}

id HKUIArrayLargestValue(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = 0;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (!v4 || [*(id *)(*((void *)&v10 + 1) + 8 * i) compare:v4] == 1)
        {
          id v8 = v7;

          id v4 = v8;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id HKUIArraySmallestValue(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = 0;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v1);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (!v4 || [*(id *)(*((void *)&v10 + 1) + 8 * i) compare:v4] == -1)
        {
          id v8 = v7;

          id v4 = v8;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

BOOL HKUIApplicationIsUsingAccessibilityContentSizeCategory()
{
  id v0 = [MEMORY[0x1E4FB1648] system];
  id v1 = [v0 preferredContentSizeCategory];
  IsAccessibilityCategorCGFloat y = UIContentSizeCategoryIsAccessibilityCategory(v1);

  return IsAccessibilityCategory;
}

BOOL HKUIApplicationContentSizeCategoryIsLargerThanSizeCategory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [MEMORY[0x1E4FB1648] system];
  uint64_t v3 = [v2 preferredContentSizeCategory];

  if (v3) {
    BOOL v4 = UIContentSizeCategoryCompareToCategory(v3, v1) == NSOrderedDescending;
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

BOOL HKUIApplicationContentSizeCategoryIsSmallerThanSizeCategory(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4FB1648];
  uint64_t v2 = a1;
  uint64_t v3 = [v1 system];
  BOOL v4 = [v3 preferredContentSizeCategory];
  NSComparisonResult v5 = UIContentSizeCategoryCompareToCategory(v4, v2);

  return v5 == NSOrderedAscending;
}

NSString *HKUIContentSizeCategoryMin(void *a1, void *a2)
{
  BOOL v4 = a1;
  NSComparisonResult v5 = a2;
  NSComparisonResult v6 = UIContentSizeCategoryCompareToCategory(v4, v5);
  if ((unint64_t)v6 >= 2)
  {
    id v7 = v4;
    if (v6 != NSOrderedAscending) {
      goto LABEL_5;
    }
  }
  else
  {
    id v7 = v5;
  }
  uint64_t v2 = v7;
LABEL_5:

  return v2;
}

id HKUIContentSizeCategoryMax(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  NSComparisonResult v5 = HKUIContentSizeCategoryMin(v4, v3);
  if ([v5 isEqualToString:v4]) {
    NSComparisonResult v6 = v3;
  }
  else {
    NSComparisonResult v6 = v4;
  }
  id v7 = v6;

  return v7;
}

id HKUIContentSizeCategoryBounded(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  NSComparisonResult v6 = HKUIContentSizeCategoryMax(a1, a2);
  id v7 = HKUIContentSizeCategoryMin(v6, v5);

  return v7;
}

id HKUIDefaultGregorianBirthday()
{
  id v0 = objc_msgSend(MEMORY[0x1E4F1C9A8], "hk_gregorianCalendar");
  id v1 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v2 = [v0 startOfDayForDate:v1];

  id v3 = objc_msgSend(v0, "hk_dateOfBirthDateComponentsWithDate:", v2);
  objc_msgSend(v3, "setYear:", objc_msgSend(v3, "year") - 35);

  return v3;
}

id HKUIDefaultPregnancyDueDate()
{
  id v0 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  id v1 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v2 = [v0 startOfDayForDate:v1];

  id v3 = [v0 dateByAddingUnit:0x2000 value:5 toDate:v2 options:0];

  return v3;
}

id HKAttributedString(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F28B18];
  id v2 = a1;
  id v3 = (void *)[[v1 alloc] initWithString:v2];

  return v3;
}

id HKStringForHKTimeScope(uint64_t a1, int a2)
{
  if (a2)
  {
    switch(a1)
    {
      case 0:
        id v2 = @"SHORT_TEN_YEARS_%@";
        goto LABEL_6;
      case 1:
        id v2 = @"SHORT_FIVE_YEARS_%@";
        goto LABEL_16;
      case 2:
        id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        NSComparisonResult v6 = v5;
        id v7 = @"SHORT_YEAR";
        goto LABEL_25;
      case 3:
        id v2 = @"SHORT_SIX_MONTHS_%@";
        goto LABEL_19;
      case 4:
        id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        NSComparisonResult v6 = v5;
        id v7 = @"SHORT_MONTH";
        goto LABEL_25;
      case 5:
        id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        NSComparisonResult v6 = v5;
        id v7 = @"SHORT_WEEK";
        goto LABEL_25;
      case 6:
        id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        NSComparisonResult v6 = v5;
        id v7 = @"SHORT_DAY";
        goto LABEL_25;
      case 7:
        id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
        NSComparisonResult v6 = v5;
        id v7 = @"SHORT_HOUR";
        goto LABEL_25;
      default:
        goto LABEL_7;
    }
  }
  switch(a1)
  {
    case 0:
      id v2 = @"TEN_YEARS_%@";
LABEL_6:
      uint64_t v3 = 10;
      goto LABEL_20;
    case 1:
      id v2 = @"FIVE_YEARS_%@";
LABEL_16:
      uint64_t v3 = 5;
      goto LABEL_20;
    case 2:
      id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      NSComparisonResult v6 = v5;
      id v7 = @"YEAR";
      goto LABEL_25;
    case 3:
      id v2 = @"SIX_MONTHS_%@";
LABEL_19:
      uint64_t v3 = 6;
LABEL_20:
      id v4 = _NumericalLocalizedTimeScope(v2, v3);
      break;
    case 4:
      id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      NSComparisonResult v6 = v5;
      id v7 = @"MONTH";
      goto LABEL_25;
    case 5:
      id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      NSComparisonResult v6 = v5;
      id v7 = @"WEEK";
      goto LABEL_25;
    case 6:
      id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      NSComparisonResult v6 = v5;
      id v7 = @"DAY";
      goto LABEL_25;
    case 7:
      id v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      NSComparisonResult v6 = v5;
      id v7 = @"HOUR";
LABEL_25:
      id v4 = [v5 localizedStringForKey:v7 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

      break;
    default:
LABEL_7:
      id v4 = 0;
      break;
  }
  return v4;
}

id _NumericalLocalizedTimeScope(void *a1, uint64_t a2)
{
  uint64_t v3 = _NumericalLocalizedTimeScope_onceToken;
  id v4 = a1;
  if (v3 != -1) {
    dispatch_once(&_NumericalLocalizedTimeScope_onceToken, &__block_literal_global_431);
  }
  id v5 = (void *)_NumericalLocalizedTimeScope_numericalTimeScopeFormatter;
  NSComparisonResult v6 = [NSNumber numberWithInteger:a2];
  id v7 = [v5 stringFromNumber:v6];

  id v8 = NSString;
  long long v9 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
  long long v10 = [v9 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

  long long v11 = objc_msgSend(v8, "stringWithFormat:", v10, v7);

  return v11;
}

id __HKUIDynamicColorWithColors_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 userInterfaceStyle];
  uint64_t v4 = 40;
  if (v3 == 2) {
    uint64_t v4 = 32;
  }
  id v5 = *(void **)(a1 + v4);
  return v5;
}

id HKUILocalizedString(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28B50];
  id v2 = a1;
  uint64_t v3 = [v1 bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v4 = [v3 localizedStringForKey:v2 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

  return v4;
}

id HKHealthRecordsLocalizedStringForIsApplication(void *a1, int a2)
{
  uint64_t v3 = @"HealthUI-Localizable-CHR-API-LimeAlmanac";
  if (a2) {
    uint64_t v3 = @"HealthUI-Localizable-CHR-API";
  }
  uint64_t v4 = v3;
  id v5 = a1;
  NSComparisonResult v6 = HKHealthUIFrameworkBundle();
  id v7 = [v6 localizedStringForKey:v5 value:&stru_1F3B9CF20 table:v4];

  return v7;
}

id HKHealthRecordsAPILocalizedString(void *a1)
{
  return HKHealthRecordsLocalizedStringForIsApplication(a1, 1);
}

id HKHealthRecordsAPILocalizedStringWithSource(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = HKHealthRecordsLocalizedStringForIsApplication(v3, [a2 _isResearchStudy] ^ 1);

  return v4;
}

id HKUIAFibBurdenLocalizedString(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28B50];
  id v2 = a1;
  id v3 = [v1 bundleWithIdentifier:@"com.apple.HealthUI"];
  uint64_t v4 = [v3 localizedStringForKey:v2 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable-AFibBurden"];

  return v4;
}

uint64_t HKAccessibilityIdentifierWithFeature(uint64_t a1, uint64_t a2)
{
  return [@"UIA.Health" stringByAppendingFormat:@".%@.%@", a1, a2];
}

uint64_t HKAccessibilityIdentifier(uint64_t a1)
{
  return [@"UIA.Health" stringByAppendingFormat:@".%@", a1];
}

void sub_1E0D16C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 240), 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

uint64_t HKCodableChartSampleTypeCountDataQueryDataReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableSampleTypeCountData);
        [a1 addTimePeriodToCount:v17];
        if (!PBReaderPlaceMark() || (HKCodableSampleTypeCountDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartSharableModelReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        uint64_t v18 = 40;
        goto LABEL_42;
      case 2u:
        char v17 = objc_alloc_init(HKCodableDateInterval);
        uint64_t v20 = 48;
        goto LABEL_46;
      case 3u:
        char v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        uint64_t v18 = 56;
        goto LABEL_42;
      case 4u:
        char v17 = objc_alloc_init(HKCodableDateInterval);
        uint64_t v20 = 64;
        goto LABEL_46;
      case 5u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 88) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_52:
        uint64_t v32 = 8;
        goto LABEL_57;
      case 6u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 88) |= 2u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v23 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_56:
        uint64_t v32 = 16;
LABEL_57:
        *(void *)(a1 + v32) = v23;
        goto LABEL_58;
      case 7u:
        char v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        uint64_t v18 = 72;
        goto LABEL_42;
      case 8u:
        char v17 = objc_alloc_init(HKCodableDateInterval);
        uint64_t v20 = 80;
        goto LABEL_46;
      case 9u:
        char v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        uint64_t v18 = 24;
LABEL_42:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark()
          || (HKCodableChartDataSourceQueryDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_60;
        }
        goto LABEL_48;
      case 0xAu:
        char v17 = objc_alloc_init(HKCodableDateInterval);
        uint64_t v20 = 32;
LABEL_46:
        objc_storeStrong((id *)(a1 + v20), v17);
        if (PBReaderPlaceMark() && HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_60:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

uint64_t HKCodableHealthRecordsEduSectionReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 56) |= 1u;
              break;
            case 2u:
              uint64_t v24 = PBReaderReadString();
              unint64_t v25 = *(void **)(a1 + 40);
              *(void *)(a1 + 40) = v24;

              goto LABEL_42;
            case 3u:
              char v26 = PBReaderReadString();
              if (v26) {
                [(id)a1 addSectionLocaleIdentifiers:v26];
              }
              goto LABEL_37;
            case 4u:
              char v26 = PBReaderReadString();
              if (v26) {
                [(id)a1 addSectionValidRegionCodes:v26];
              }
              goto LABEL_37;
            case 5u:
              char v26 = PBReaderReadString();
              if (v26) {
                [(id)a1 addSectionAttributions:v26];
              }
              goto LABEL_37;
            case 6u:
              char v26 = PBReaderReadString();
              if (v26) {
                [(id)a1 addSectionCitations:v26];
              }
LABEL_37:

              goto LABEL_42;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_42:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_39;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_41:
          *(void *)(a1 + 8) = v19;
          goto LABEL_42;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0D1EE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D1F06C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id HKGenerateDateRangeForCharts(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  uint64_t v9 = a2 - 2;
  switch(a2)
  {
    case 2:
      uint64_t v10 = [v7 startOfRollingYear:v8];
      goto LABEL_7;
    case 3:
    case 5:
      uint64_t v10 = [v7 startOfRollingWeek:v8];
      goto LABEL_7;
    case 4:
      uint64_t v10 = [v7 startOfRollingMonth:v8];
      goto LABEL_7;
    case 6:
      uint64_t v10 = [v7 startOfRollingDay:v8];
LABEL_7:
      uint64_t v11 = (void *)v10;
      break;
    default:
      uint64_t v11 = 0;
      break;
  }

  id v12 = v7;
  id v13 = v8;
  switch(v9)
  {
    case 0:
      uint64_t v14 = [v12 endOfRollingYear:v13];
      goto LABEL_14;
    case 1:
    case 3:
      uint64_t v14 = [v12 endOfRollingWeek:v13];
      goto LABEL_14;
    case 2:
      uint64_t v14 = [v12 endOfRollingMonth:v13];
      goto LABEL_14;
    case 4:
      uint64_t v14 = [v12 endOfRollingDay:v13];
LABEL_14:
      int v15 = (void *)v14;
      break;
    default:
      int v15 = 0;
      break;
  }

  BOOL v16 = +[HKValueRange valueRangeWithMinValue:v11 maxValue:v15];

  return v16;
}

void sub_1E0D21480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D22A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void sub_1E0D23CCC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1E0D23F3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL HKCodableSummaryAFibBurdenValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableAFibBurdenValue);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (HKCodableAFibBurdenValueReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v17 = objc_alloc_init(HKCodableDayIndexRange);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0D26948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSampleTypeCountDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v25 = *v3;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0) {
            goto LABEL_37;
          }
          v22 += 7;
          BOOL v15 = v23++ >= 9;
          if (v15)
          {
            uint64_t v24 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_39:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        if (v18 == 2)
        {
          *(unsigned char *)(a1 + 32) |= 2u;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          uint64_t v32 = 16;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          *(unsigned char *)(a1 + 32) |= 4u;
          uint64_t v19 = *v3;
          unint64_t v20 = *(void *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
            *(void *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          uint64_t v32 = 24;
        }
        *(void *)(a1 + v32) = v21;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableMenstrualCyclesProjectionHighlightTileViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(HKCodableMenstrualCyclesProjection);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark()
          && (HKCodableMenstrualCyclesProjectionReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_26;
        }
        goto LABEL_52;
      case 2u:
        char v17 = objc_alloc_init(HKCodableMenstrualCyclesProjectionKind);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark()
          && (HKCodableMenstrualCyclesProjectionKindReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_50:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_52:

        return 0;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_44:
        uint64_t v30 = 8;
        goto LABEL_49;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_48:
        uint64_t v30 = 16;
LABEL_49:
        *(void *)(a1 + v30) = v21;
        goto LABEL_50;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_50;
    }
  }
}

void sub_1E0D39FF4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1E0D3A950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

uint64_t HKCodableChartInsulinValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v22 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 24), v22);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v22, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if (v18 == 2)
        {
          *(unsigned char *)(a1 + 32) |= 1u;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          uint64_t v26 = 8;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          *(unsigned char *)(a1 + 32) |= 2u;
          uint64_t v19 = *v3;
          unint64_t v20 = *(void *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
            *(void *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          uint64_t v26 = 16;
        }
        *(void *)(a1 + v26) = v21;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryGAD7AssessmentValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v25 = *v3;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v22 += 7;
          BOOL v15 = v23++ >= 9;
          if (v15)
          {
            uint64_t v24 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_43:
        uint64_t v36 = 16;
      }
      else
      {
        if (v18 != 2)
        {
          if (v18 == 1)
          {
            *(unsigned char *)(a1 + 32) |= 1u;
            uint64_t v19 = *v3;
            unint64_t v20 = *(void *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
              *(void *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v21 = 0;
            }
            *(void *)(a1 + 8) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (1)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
          *(void *)(a2 + v31) = v33;
          v24 |= (unint64_t)(v34 & 0x7F) << v29;
          if ((v34 & 0x80) == 0) {
            goto LABEL_45;
          }
          v29 += 7;
          BOOL v15 = v30++ >= 9;
          if (v15)
          {
            uint64_t v24 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_47:
        uint64_t v36 = 24;
      }
      *(void *)(a1 + v36) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableNotificationDataSourceQueryDataReadFrom(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        a1[48] |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_53;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_55:
        uint64_t v40 = 16;
        goto LABEL_68;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        a1[48] |= 1u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_59:
        uint64_t v40 = 8;
        goto LABEL_68;
      case 3u:
        char v29 = objc_alloc_init(HKCodableNotificationSample);
        [a1 addSamples:v29];
        if PBReaderPlaceMark() && (HKCodableNotificationSampleReadFrom((uint64_t)v29, a2))
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v19 = 0;
        a1[48] |= 4u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_63:
        uint64_t v40 = 24;
        goto LABEL_68;
      case 5u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v19 = 0;
        a1[48] |= 8u;
        while (2)
        {
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v14 = v36++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_67:
        uint64_t v40 = 32;
LABEL_68:
        *(void *)&a1[v40] = v19;
        goto LABEL_69;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_69;
    }
  }
}

void sub_1E0D47CE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1E0D47DFC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryVisualizationPointReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v18 == 2)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v26 = 8;
LABEL_36:
        *(void *)(a1 + v26) = v22;
        goto LABEL_37;
      }
      if (v18 == 1)
      {
        uint64_t v19 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 24), v19);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
LABEL_37:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    *(unsigned char *)(a1 + 32) |= 2u;
    uint64_t v20 = *v3;
    unint64_t v21 = *(void *)(a2 + v20);
    if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
      *(void *)(a2 + v20) = v21 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + *v5) = 1;
      uint64_t v22 = 0;
    }
    uint64_t v26 = 16;
    goto LABEL_36;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _DisplayTypeForActivityValue(unint64_t a1, void *a2)
{
  if (a1 > 7) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = qword_1E0F05EA8[a1];
  }
  uint64_t v3 = NSNumber;
  id v4 = a2;
  id v5 = [v3 numberWithInteger:v2];
  id v6 = [v4 displayTypeWithIdentifier:v5];

  return v6;
}

void sub_1E0D506D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void sub_1E0D52BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D53D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D54178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
}

BOOL HKCodableQuantityValueWithRangeReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(HKCodableHealthRecordsCode);
        [a1 addCode:v17];
        if (PBReaderPlaceMark() && HKCodableHealthRecordsCodeReadFrom((uint64_t)v17, a2)) {
          goto LABEL_30;
        }
        goto LABEL_37;
      case 2u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 16;
        goto LABEL_28;
      case 3u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 40;
        goto LABEL_32;
      case 4u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 32;
        goto LABEL_28;
      case 5u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 24;
LABEL_28:
        objc_storeStrong((id *)&a1[v18], v17);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2))
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_37:

        return 0;
      case 6u:
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = 48;
LABEL_32:
        char v17 = *(HKCodableHealthRecordsCode **)&a1[v20];
        *(void *)&a1[v20] = v19;
        goto LABEL_33;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_34;
    }
  }
}

void sub_1E0D56060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

uint64_t HKCodableSummaryActivityRingsValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  id v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 124) |= 8u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v55 = 32;
        goto LABEL_91;
      case 2u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 124) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              BOOL v15 = v23++ >= 9;
              if (v15)
              {
                uint64_t v24 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_71:
        *(void *)(a1 + 8) = v24;
        goto LABEL_92;
      case 3u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 56;
        goto LABEL_39;
      case 4u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 64;
        goto LABEL_39;
      case 5u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 88;
        goto LABEL_39;
      case 6u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 96;
        goto LABEL_39;
      case 7u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 72;
        goto LABEL_39;
      case 8u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 80;
        goto LABEL_39;
      case 9u:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 104;
        goto LABEL_39;
      case 0xAu:
        char v29 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 112;
LABEL_39:
        objc_storeStrong((id *)(a1 + v30), v29);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v29, a2))
        {
          PBReaderRecallMark();

LABEL_92:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 0xBu:
        *(unsigned char *)(a1 + 124) |= 0x20u;
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v32);
          *(void *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v55 = 48;
        goto LABEL_91;
      case 0xCu:
        *(unsigned char *)(a1 + 124) |= 0x10u;
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v55 = 40;
        goto LABEL_91;
      case 0xDu:
        *(unsigned char *)(a1 + 124) |= 4u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v55 = 24;
        goto LABEL_91;
      case 0xEu:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + 124) |= 0x40u;
        while (2)
        {
          uint64_t v40 = *v3;
          uint64_t v41 = *(void *)(a2 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              BOOL v15 = v38++ >= 9;
              if (v15)
              {
                uint64_t v39 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
LABEL_75:
        BOOL v53 = v39 != 0;
        uint64_t v54 = 120;
        goto LABEL_80;
      case 0xFu:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(unsigned char *)(a1 + 124) |= 0x80u;
        while (2)
        {
          uint64_t v47 = *v3;
          uint64_t v48 = *(void *)(a2 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              BOOL v15 = v45++ >= 9;
              if (v15)
              {
                uint64_t v46 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
LABEL_79:
        BOOL v53 = v46 != 0;
        uint64_t v54 = 121;
LABEL_80:
        *(unsigned char *)(a1 + v54) = v53;
        goto LABEL_92;
      case 0x10u:
        *(unsigned char *)(a1 + 124) |= 2u;
        uint64_t v51 = *v3;
        unint64_t v52 = *(void *)(a2 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v52);
          *(void *)(a2 + v51) = v52 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v55 = 16;
LABEL_91:
        *(void *)(a1 + v55) = v20;
        goto LABEL_92;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_92;
    }
  }
}

BOOL HKCodableAudiogramSensitivityPointClampingRangeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2)
      {
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 16;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
          continue;
        }
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 8;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKUIStandardMapGreenColor()
{
  return [MEMORY[0x1E4FB1618] colorWithRed:0.298039216 green:0.850980392 blue:0.392156863 alpha:1.0];
}

uint64_t HKUIStandardMapRedColor()
{
  return [MEMORY[0x1E4FB1618] colorWithRed:1.0 green:0.231372549 blue:0.188235294 alpha:1.0];
}

void sub_1E0D5C7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D64560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose((const void *)(v71 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void sub_1E0D660E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D66E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D67410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D67C2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E0D68534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t HKSleepSomnogramStageForSleepAnalysis(unint64_t a1)
{
  if (a1 > 5) {
    return 0;
  }
  else {
    return qword_1E0F06000[a1];
  }
}

uint64_t HKSleepSomnogramConnectionOrientationForBars(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    [v5 top];
    double v8 = v7;
    [v6 top];
    if (v8 <= v9)
    {
      [v5 top];
      double v11 = v10;
      [v6 top];
      if (v11 >= v12) {
        goto LABEL_11;
      }
      goto LABEL_6;
    }
LABEL_10:
    [v6 right];
    double v24 = v23;
    [v5 right];
    uint64_t v19 = v24 < v25;
    goto LABEL_12;
  }
  [v5 bottom];
  double v14 = v13;
  [v6 bottom];
  if (v14 <= v15)
  {
    [v5 bottom];
    double v21 = v20;
    [v6 bottom];
    if (v21 >= v22)
    {
LABEL_11:
      uint64_t v19 = 4;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_6:
  [v6 right];
  double v17 = v16;
  [v5 right];
  if (v17 >= v18) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = 3;
  }
LABEL_12:

  return v19;
}

void sub_1E0D6F65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D6F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void sub_1E0D71E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKIndexForOverlaySleepRoomSegment(BOOL result)
{
  if (result != 2) {
    return result != 1;
  }
  return result;
}

void sub_1E0D77918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableDateComponentsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_123;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_125;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_123:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_125:
          uint64_t v92 = 16;
          goto LABEL_178;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x1000u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_129:
          uint64_t v92 = 104;
          goto LABEL_178;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x10u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_133:
          uint64_t v92 = 40;
          goto LABEL_178;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 1u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_137:
          uint64_t v92 = 8;
          goto LABEL_178;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 4u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v19 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_141:
          uint64_t v92 = 24;
          goto LABEL_178;
        case 6u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 8u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v19 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v14 = v45++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_145:
          uint64_t v92 = 32;
          goto LABEL_178;
        case 7u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x80u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v19 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v14 = v50++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_149:
          uint64_t v92 = 64;
          goto LABEL_178;
        case 8u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x400u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v19 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v14 = v55++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_153:
          uint64_t v92 = 88;
          goto LABEL_178;
        case 9u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x800u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v19 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v14 = v60++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_157;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_157:
          uint64_t v92 = 96;
          goto LABEL_178;
        case 0xAu:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x40u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v7) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v19 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                BOOL v14 = v65++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_161;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_161:
          uint64_t v92 = 56;
          goto LABEL_178;
        case 0xBu:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x100u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v19 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v14 = v70++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_165;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_165:
          uint64_t v92 = 72;
          goto LABEL_178;
        case 0xCu:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x200u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v19 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v14 = v75++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_169:
          uint64_t v92 = 80;
          goto LABEL_178;
        case 0xDu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x2000u;
          while (2)
          {
            uint64_t v81 = *v3;
            unint64_t v82 = *(void *)(a2 + v81);
            if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v83 = *(unsigned char *)(*(void *)(a2 + *v7) + v82);
              *(void *)(a2 + v81) = v82 + 1;
              v19 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                BOOL v14 = v80++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_173:
          uint64_t v92 = 112;
          goto LABEL_178;
        case 0xEu:
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x20u;
          break;
        case 0xFu:
          uint64_t v89 = PBReaderReadString();
          uint64_t v90 = 120;
          goto LABEL_121;
        case 0x10u:
          uint64_t v89 = PBReaderReadString();
          uint64_t v90 = 128;
LABEL_121:
          v91 = *(void **)(a1 + v90);
          *(void *)(a1 + v90) = v89;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v86 = *v3;
        unint64_t v87 = *(void *)(a2 + v86);
        if (v87 == -1 || v87 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v88 = *(unsigned char *)(*(void *)(a2 + *v7) + v87);
        *(void *)(a2 + v86) = v87 + 1;
        v19 |= (unint64_t)(v88 & 0x7F) << v84;
        if ((v88 & 0x80) == 0) {
          goto LABEL_175;
        }
        v84 += 7;
        BOOL v14 = v85++ >= 9;
        if (v14)
        {
          uint64_t v19 = 0;
          goto LABEL_177;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_175:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v19 = 0;
      }
LABEL_177:
      uint64_t v92 = 48;
LABEL_178:
      *(void *)(a1 + v92) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0D7E3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNContactPickerViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ContactsUILibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    v3[3] = __ContactsUILibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6D56138;
    uint64_t v5 = 0;
    ContactsUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary_0) {
    __getCNContactPickerViewControllerClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("CNContactPickerViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNContactPickerViewControllerClass_block_invoke_cold_2();
  }
  getCNContactPickerViewControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  ContactsUILibraryCore_frameworkLibrary_0 = result;
  return result;
}

void sub_1E0D7F5C8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1E0D803C8(void *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x450]);
  _Block_object_dispose(&STACK[0x458], 8);
  _Block_object_dispose(&STACK[0x478], 8);
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x1E0D803ACLL);
}

void *HKCircularBufferCreate(uint64_t a1, uint64_t a2)
{
  if (a1 < 1 || (unint64_t)(a2 - 1024) <= 0xFFFFFFFFFFFFFC00)
  {
    double v7 = [MEMORY[0x1E4F28B00] currentHandler];
    char v8 = objc_msgSend(NSString, "stringWithUTF8String:", "HKCircularBufferRef HKCircularBufferCreate(NSInteger, NSInteger)");
    [v7 handleFailureInFunction:v8, @"HKCiruclarBuffer.m", 26, @"Invalid parameter not satisfying: %@", @"(bufferLimit > 0) && (itemSize > 0) && (itemSize < HKCircularBufferMaxItemSize)" file lineNumber description];
  }
  if (a1 >= 1000) {
    uint64_t v4 = 1000;
  }
  else {
    uint64_t v4 = a1;
  }
  uint64_t v5 = malloc_type_malloc(0x28uLL, 0x108004003DAF236uLL);
  v5[1] = 0;
  v5[2] = 0;
  void v5[3] = v4;
  v5[4] = a2;
  *uint64_t v5 = malloc_type_malloc(v4 * a2, 0xEEAB7DACuLL);
  return v5;
}

void HKCircularBufferRelease(void **a1)
{
  if (!a1)
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void HKCircularBufferRelease(HKCircularBufferRef)"];
    [v2 handleFailureInFunction:v3, @"HKCiruclarBuffer.m", 41, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];
  }
  free(*a1);
  free(a1);
}

BOOL HKCircularBufferIsEmpty(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"BOOL HKCircularBufferIsEmpty(HKCircularBufferRef)"];
    [v3 handleFailureInFunction:v4, @"HKCiruclarBuffer.m", 47, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];
  }
  return *(void *)(a1 + 16) == 0;
}

uint64_t HKCircularBufferCount(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"NSInteger HKCircularBufferCount(HKCircularBufferRef)"];
    [v3 handleFailureInFunction:v4, @"HKCiruclarBuffer.m", 52, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];
  }
  return *(void *)(a1 + 16);
}

void HKCircularBufferClean(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  if (!a1)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", "void HKCircularBufferClean(HKCircularBufferRef, HKCircularBufferPredicate, void *)");
    [v11 handleFailureInFunction:v12, @"HKCiruclarBuffer.m", 57, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];
  }
  uint64_t v6 = 0;
  uint64_t v15 = 0;
  do
  {
    uint64_t v7 = v6;
    if (!HKCircularBufferIteratorHasNext((uint64_t)a1, v15)) {
      break;
    }
    uint64_t v8 = HKCircularBufferIteratorNext(a1, &v15);
    char v9 = a2(v8, a3);
    uint64_t v6 = v7 - 1;
  }
  while ((v9 & 1) != 0);
  if (a1)
  {
    if (!v7) {
      return;
    }
  }
  else
  {
    char v13 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v14 = objc_msgSend(NSString, "stringWithUTF8String:", "void _HKCircularBufferRemoveNItems(HKCircularBufferRef, NSInteger)");
    [v13 handleFailureInFunction:v14, @"HKCiruclarBuffer.m", 115, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];

    if (!v7) {
      return;
    }
  }
  uint64_t v10 = (a1[2] + v7) & ~((a1[2] + v7) >> 63);
  a1[1] = (a1[1] - v7) % a1[3];
  a1[2] = v10;
}

uint64_t HKCircularBufferIteratorMake()
{
  return 0;
}

BOOL HKCircularBufferIteratorHasNext(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL HKCircularBufferIteratorHasNext(HKCircularBufferRef, HKCircularBufferIterator)");
    [v5 handleFailureInFunction:v6, @"HKCiruclarBuffer.m", 75, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];
  }
  return *(void *)(a1 + 16) > a2;
}

uint64_t HKCircularBufferIteratorNext(uint64_t *a1, void *a2)
{
  if (!a1)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    char v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void *HKCircularBufferIteratorNext(HKCircularBufferRef, HKCircularBufferIterator *)");
    [v8 handleFailureInFunction:v9, @"HKCiruclarBuffer.m", 80, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];

    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void *HKCircularBufferIteratorNext(HKCircularBufferRef, HKCircularBufferIterator *)");
    [v10 handleFailureInFunction:v11, @"HKCiruclarBuffer.m", 81, @"Invalid parameter not satisfying: %@", @"iterator != NULL" file lineNumber description];

    goto LABEL_3;
  }
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v4 = *a1;
  uint64_t v5 = *a2 + a1[1];
  uint64_t v6 = a1[3];
  ++*a2;
  return v4 + a1[4] * (v5 % v6);
}

void *HKCircularBufferAddItem(uint64_t *a1, void *__src)
{
  if (!a1)
  {
    unint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    char v13 = objc_msgSend(NSString, "stringWithUTF8String:", "void HKCircularBufferAddItem(HKCircularBufferRef, void *)");
    [v12 handleFailureInFunction:v13, @"HKCiruclarBuffer.m", 92, @"Invalid parameter not satisfying: %@", @"buffer != NULL" file lineNumber description];
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = (v4 + v6) % v5;
  if (v4 >= v5)
  {
    uint64_t v9 = v6 + 1;
  }
  else
  {
    ++v4;
    uint64_t v9 = a1[1];
  }
  a1[1] = v9;
  a1[2] = v4;
  size_t v10 = a1[4];
  return memcpy((void *)(v7 + v10 * v8), __src, v10);
}

BOOL HKCodableAudiogramSensitivityPointReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 8;
        goto LABEL_22;
      case 2u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 16;
        goto LABEL_22;
      case 3u:
        char v17 = objc_alloc_init(HKCodableQuantity);
        uint64_t v18 = 24;
LABEL_22:
        objc_storeStrong((id *)&a1[v18], v17);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_33;
        }
        goto LABEL_29;
      case 6u:
        char v17 = objc_alloc_init(HKCodableAudiogramSensitivityTest);
        [a1 addTests:v17];
        if PBReaderPlaceMark() && (HKCodableAudiogramSensitivityTestReadFrom((uint64_t)v17, a2))
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_30:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_33:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_30;
    }
  }
}

uint64_t HKCodableHealthRecordsEduContentReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HKCodableHealthRecordsEduSection);
        [a1 addSections:v17];
        if (!PBReaderPlaceMark() || (HKCodableHealthRecordsEduSectionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableAFibBurdenValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_37;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 24) = v21 != 0;
      }
      else
      {
        if (v17 == 2)
        {
          uint64_t v18 = objc_alloc_init(HKCodableDayIndexRange);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v18, a2))
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v18 = objc_alloc_init(HKCodableQuantity);
          objc_storeStrong((id *)(a1 + 16), v18);
          if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0) {
            goto LABEL_42;
          }
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableHealthRecordsSharableViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 40;
        goto LABEL_30;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 1u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_66:
        uint64_t v44 = 8;
        goto LABEL_79;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 72;
LABEL_30:
        uint64_t v26 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_80;
      case 4u:
        unint64_t v27 = objc_alloc_init(HKCodableHealthRecordsEduContent);
        objc_storeStrong((id *)(a1 + 48), v27);
        if (!PBReaderPlaceMark() || (HKCodableHealthRecordsEduContentReadFrom(v27, a2) & 1) == 0) {
          goto LABEL_82;
        }
        goto LABEL_62;
      case 5u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 84) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              BOOL v14 = v29++ >= 9;
              if (v14)
              {
                uint64_t v30 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v30 = 0;
        }
LABEL_70:
        *(unsigned char *)(a1 + 80) = v30 != 0;
        goto LABEL_80;
      case 6u:
        unint64_t v27 = objc_alloc_init(HKCodableHealthRecordsIndividualRecord);
        objc_storeStrong((id *)(a1 + 56), v27);
        goto LABEL_43;
      case 7u:
        unint64_t v27 = objc_alloc_init(HKCodableHealthRecordsIndividualRecord);
        [(id)a1 addAllRecords:v27];
LABEL_43:
        if (!PBReaderPlaceMark()
          || (HKCodableHealthRecordsIndividualRecordReadFrom((uint64_t)v27, a2) & 1) == 0)
        {
          goto LABEL_82;
        }
        goto LABEL_62;
      case 8u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 2u;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v22 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              BOOL v14 = v35++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_74:
        uint64_t v44 = 16;
        goto LABEL_79;
      case 9u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 84) |= 4u;
        while (2)
        {
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v22 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_78:
        uint64_t v44 = 24;
LABEL_79:
        *(void *)(a1 + v44) = v22;
        goto LABEL_80;
      case 0xAu:
        unint64_t v27 = objc_alloc_init(HKCodableHealthRecordsLocalizedEducationContent);
        objc_storeStrong((id *)(a1 + 64), v27);
        if (PBReaderPlaceMark()
          && (HKCodableHealthRecordsLocalizedEducationContentReadFrom(v27, a2) & 1) != 0)
        {
LABEL_62:
          PBReaderRecallMark();

LABEL_80:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_82:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_80;
    }
  }
}

uint64_t HKCodableAudiogramSensitivityTestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 32), v17);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2)) {
          goto LABEL_47;
        }
        goto LABEL_63;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_51:
        uint64_t v36 = 16;
        goto LABEL_60;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v27 = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_55:
        *(unsigned char *)(a1 + 40) = v27 != 0;
        goto LABEL_61;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v21 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_59:
        uint64_t v36 = 8;
LABEL_60:
        *(void *)(a1 + v36) = v21;
        goto LABEL_61;
      case 5u:
        uint64_t v17 = objc_alloc_init(HKCodableAudiogramSensitivityPointClampingRange);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark()
          && HKCodableAudiogramSensitivityPointClampingRangeReadFrom((uint64_t)v17, a2))
        {
LABEL_47:
          PBReaderRecallMark();

LABEL_61:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_63:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_61;
    }
  }
}

uint64_t HKCodableSampleDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HKCodableSampleChartData);
        [a1 addSamples:v17];
        if (!PBReaderPlaceMark() || (HKCodableSampleChartDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0D8DDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryVisionPrescriptionValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 44) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
        goto LABEL_45;
      case 3u:
        uint64_t v22 = objc_alloc_init(HKCodablePrescriptionType);
        objc_storeStrong((id *)(a1 + 24), v22);
        if (!PBReaderPlaceMark() || (HKCodablePrescriptionTypeReadFrom((uint64_t)v22, a2) & 1) == 0) {
          goto LABEL_47;
        }
        goto LABEL_38;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          uint64_t v26 = *v3;
          uint64_t v27 = *(void *)(a2 + v26);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v28;
            v25 |= (unint64_t)(v29 & 0x7F) << v23;
            if (v29 < 0)
            {
              v23 += 7;
              BOOL v15 = v24++ >= 9;
              if (v15)
              {
                uint64_t v25 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v25 = 0;
        }
LABEL_42:
        *(unsigned char *)(a1 + 40) = v25 != 0;
        goto LABEL_45;
      case 5u:
        uint64_t v22 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 16;
        goto LABEL_36;
      case 6u:
        uint64_t v22 = objc_alloc_init(HKCodableQuantity);
        uint64_t v30 = 32;
LABEL_36:
        objc_storeStrong((id *)(a1 + v30), v22);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v22, a2))
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_45:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_47:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_45;
    }
  }
}

void sub_1E0D909D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void sub_1E0D915F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D91964(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1E0D92848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D9308C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1E0D93408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 224), 8);
  _Unwind_Resume(a1);
}

BOOL HKCodableSummaryTrendValueReadFrom(char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_26:
        uint64_t v20 = *(HKCodableSummaryVisualizationDataPresencePoint **)&a1[v19];
        *(void *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = objc_alloc_init(HKCodableSummaryVisualizationDataPresencePoint);
    [a1 addDataPresencePoints:v20];
    if (!PBReaderPlaceMark()
      || (HKCodableSummaryVisualizationDataPresencePointReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1E0D96D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0D9805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D98BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0D9C8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

uint64_t HKCodableSummaryAudioExposureValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = objc_alloc_init(HKCodableQuantity);
          objc_storeStrong((id *)(a1 + 32), v18);
          if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v18, a2))
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 4u;
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v22 = 0;
          }
          uint64_t v32 = 24;
          goto LABEL_45;
        case 3u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          break;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 2u;
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v22 = 0;
          }
          uint64_t v32 = 16;
LABEL_45:
          *(void *)(a1 + v32) = v22;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v26 = *v3;
        uint64_t v27 = *(void *)(a2 + v26);
        unint64_t v28 = v27 + 1;
        if (v27 == -1 || v28 > *(void *)(a2 + *v4)) {
          break;
        }
        char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
        *(void *)(a2 + v26) = v28;
        v25 |= (unint64_t)(v29 & 0x7F) << v23;
        if ((v29 & 0x80) == 0) {
          goto LABEL_38;
        }
        v23 += 7;
        BOOL v15 = v24++ >= 9;
        if (v15)
        {
          uint64_t v25 = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v25 = 0;
      }
LABEL_40:
      *(void *)(a1 + 8) = v25;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartQuantityDistributionDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HKCodableQuantityDistributionData);
        [a1 addQuantityDistributionData:v17];
        if (!PBReaderPlaceMark() || (HKCodableQuantityDistributionDataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryPHQ9AssessmentValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v25 = *v3;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v22 += 7;
          BOOL v15 = v23++ >= 9;
          if (v15)
          {
            uint64_t v24 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_43:
        uint64_t v36 = 16;
      }
      else
      {
        if (v18 != 2)
        {
          if (v18 == 1)
          {
            *(unsigned char *)(a1 + 32) |= 1u;
            uint64_t v19 = *v3;
            unint64_t v20 = *(void *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
              *(void *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v21 = 0;
            }
            *(void *)(a1 + 8) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (1)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
          *(void *)(a2 + v31) = v33;
          v24 |= (unint64_t)(v34 & 0x7F) << v29;
          if ((v34 & 0x80) == 0) {
            goto LABEL_45;
          }
          v29 += 7;
          BOOL v15 = v30++ >= 9;
          if (v15)
          {
            uint64_t v24 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v24 = 0;
        }
LABEL_47:
        uint64_t v36 = 24;
      }
      *(void *)(a1 + v36) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void HKAffineTransformFromLinearTransforms(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a4;
}

double HKLinearTransformValue(double a1, double a2, double a3)
{
  return a1 + a3 * a2;
}

double HKLinearTransformInvert(double a1, double a2)
{
  return -a1 / a2;
}

double HKLinearTransformConcat(double a1, double a2, double a3, double a4)
{
  return a3 + a1 * a4;
}

BOOL HKLinearTransformEqualToTransform(double a1, double a2, double a3, double a4)
{
  double v4 = a2 - a4;
  if (v4 < 0.0) {
    double v4 = -v4;
  }
  double v5 = a1 - a3;
  if (v5 < 0.0) {
    double v5 = -v5;
  }
  return v5 < 0.00000011920929 && v4 < 0.00000011920929;
}

double HKLinearTransformRange(double a1, double a2, double a3)
{
  return a1 + a3 * a2;
}

void sub_1E0DA6208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_1E0DA6F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0DA7114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0DA8E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1E0DA8F00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E0DA9604(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1E0DA9AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0DA9BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0DA9DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1E0DA9F88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

Class __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  Class result = objc_getClass("WKWebViewConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getWKWebViewConfigurationClass_block_invoke_cold_1();
  }
  getWKWebViewConfigurationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void WebKitLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __WebKitLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E6D56818;
    uint64_t v2 = 0;
    WebKitLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary) {
    WebKitLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __WebKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getWKWebViewClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  Class result = objc_getClass("WKWebView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getWKWebViewClass_block_invoke_cold_1();
  }
  getWKWebViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableElectrocardiogramDataSourceQueryDataReadFrom(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_49;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        a1[32] |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        uint64_t v31 = 16;
        goto LABEL_48;
      }
      char v29 = objc_alloc_init(HKCodableElectrocardiogramSample);
      [a1 addSamples:v29];
      if (!PBReaderPlaceMark() || (HKCodableElectrocardiogramSampleReadFrom((uint64_t)v29, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v20 = 0;
    a1[32] |= 1u;
    while (1)
    {
      uint64_t v26 = *v3;
      unint64_t v27 = *(void *)(a2 + v26);
      if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
      *(void *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_45;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v20 = 0;
        goto LABEL_47;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v20 = 0;
    }
LABEL_47:
    uint64_t v31 = 8;
LABEL_48:
    *(void *)&a1[v31] = v20;
    goto LABEL_49;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HKAudiogramEarLocalizedDisplayNameForEar(uint64_t a1, char a2)
{
  if (a1 == 2)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    if (a2) {
      double v4 = @"RIGHT_ABBREVIATED";
    }
    else {
      double v4 = @"RIGHT_FULL";
    }
  }
  else
  {
    if (a1 != 1)
    {
      double v5 = 0;
      goto LABEL_11;
    }
    uint64_t v3 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    if (a2) {
      double v4 = @"LEFT_ABBREVIATED";
    }
    else {
      double v4 = @"LEFT_FULL";
    }
  }
  double v5 = [v3 localizedStringForKey:v4 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

LABEL_11:
  return v5;
}

__CFString *HKAudiogramEarLocalizedKeyForEar(uint64_t a1, int a2)
{
  if (a1 == 2)
  {
    uint64_t v3 = @"RIGHT_FULL";
    double v4 = @"RIGHT_ABBREVIATED";
    goto LABEL_5;
  }
  if (a1 == 1)
  {
    uint64_t v3 = @"LEFT_FULL";
    double v4 = @"LEFT_ABBREVIATED";
LABEL_5:
    if (a2) {
      uint64_t v3 = v4;
    }
    double v5 = v3;
    return v5;
  }
  double v5 = &stru_1F3B9CF20;
  return v5;
}

void sub_1E0DB1784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HKUIAddDefaultSampleDetailValuesToSection(void *a1, void *a2)
{
  v52[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  double v5 = [v3 sampleType];
  uint64_t v6 = [v5 identifier];

  uint64_t v7 = HKDateFormatterFromTemplate(32);
  char v8 = [v3 startDate];
  unsigned int v9 = [v3 endDate];
  int v10 = [v8 isEqualToDate:v9];

  uint64_t v11 = [v3 startDate];
  unint64_t v12 = [v7 stringFromDate:v11];

  if (v10)
  {
    char v13 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    BOOL v14 = [v13 localizedStringForKey:@"DATE" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    v52[0] = v6;
    v52[1] = @"Date";
    int v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v52 count:2];
    int v16 = HKUIJoinStringsForAutomationIdentifier(v15);
    [v4 addText:v12 detail:v14 baseIdentifier:v16];
  }
  else
  {
    unint64_t v17 = v6;
    char v18 = [v3 endDate];
    char v13 = [v7 stringFromDate:v18];

    unsigned int v19 = v4;
    if ([v3 hasUndeterminedDuration])
    {
      uint64_t v20 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
      uint64_t v21 = [v20 localizedStringForKey:@"ONGOING_DATE" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];

      char v13 = (void *)v21;
    }
    unint64_t v22 = objc_msgSend(MEMORY[0x1E4F28B50], "bundleWithIdentifier:", @"com.apple.HealthUI", v7);
    char v23 = [v22 localizedStringForKey:@"START_TIME" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    char v24 = v17;
    v51[0] = v17;
    v51[1] = @"StartTime";
    unsigned int v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v51 count:2];
    uint64_t v26 = HKUIJoinStringsForAutomationIdentifier(v25);
    [v19 addText:v12 detail:v23 baseIdentifier:v26];

    id v4 = v19;
    uint64_t v6 = v24;
    BOOL v14 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    int v15 = [v14 localizedStringForKey:@"END_TIME" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    v50[0] = v24;
    v50[1] = @"EndTime";
    int v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:2];
    unint64_t v27 = HKUIJoinStringsForAutomationIdentifier(v16);
    [v4 addText:v13 detail:v15 baseIdentifier:v27];

    uint64_t v7 = v45;
  }

  char v28 = [v3 _source];
  char v29 = [v28 name];
  if (v29)
  {
    unsigned int v30 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    uint64_t v31 = [v30 localizedStringForKey:@"SOURCE" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    v49[0] = v6;
    v49[1] = @"Source";
    uint64_t v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v49 count:2];
    unint64_t v33 = HKUIJoinStringsForAutomationIdentifier(v32);
    [v4 addText:v29 detail:v31 baseIdentifier:v33];
  }
  [v3 _creationTimestamp];
  if (v34 != 2.22507386e-308)
  {
    unint64_t v47 = [v3 _creationDate];
    char v35 = [v7 stringFromDate:v47];
    uint64_t v46 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    uint64_t v36 = [v46 localizedStringForKey:@"DATE_ADDED_TO_HEALTH" value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
    v48[0] = v6;
    v48[1] = @"DateAdded";
    [MEMORY[0x1E4F1C978] arrayWithObjects:v48 count:2];
    unint64_t v37 = v29;
    char v38 = v28;
    char v39 = v6;
    v41 = unsigned int v40 = v4;
    HKUIJoinStringsForAutomationIdentifier(v41);
    id v42 = v3;
    v44 = char v43 = v7;
    [v40 addText:v35 detail:v36 baseIdentifier:v44];

    uint64_t v7 = v43;
    id v3 = v42;

    id v4 = v40;
    uint64_t v6 = v39;
    char v28 = v38;
    char v29 = v37;
  }
}

__CFString *HKOrganDonationFlowImpressionEventAsString(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v2 = @"MedicalID";
    }
    else
    {
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", a1);
      uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    uint64_t v2 = @"SetUpBuddy";
  }
  return v2;
}

void sub_1E0DBE7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNLabeledValueClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!ContactsUILibraryCore_frameworkLibrary_1)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    v3[3] = __ContactsUILibraryCore_block_invoke_1;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E6D569B0;
    uint64_t v5 = 0;
    ContactsUILibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary_1) {
    __getCNLabeledValueClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("CNLabeledValue");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNLabeledValueClass_block_invoke_cold_2();
  }
  getCNLabeledValueClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsUILibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  ContactsUILibraryCore_frameworkLibrary_1 = result;
  return result;
}

uint64_t HKCodableElectrocardiogramSampleReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (PBReaderPlaceMark() && HKCodableDateIntervalReadFrom((uint64_t)v17, a2)) {
          goto LABEL_33;
        }
        goto LABEL_75;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              BOOL v14 = v20++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_59:
        uint64_t v42 = 16;
        goto LABEL_72;
      case 3u:
        unint64_t v17 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 40), v17);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_73:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_75:

        return 0;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 64) |= 8u;
        while (2)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_63:
        uint64_t v42 = 32;
        goto LABEL_72;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 64) |= 4u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v21 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v14 = v31++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_67:
        uint64_t v42 = 24;
        goto LABEL_72;
      case 6u:
        uint64_t v35 = PBReaderReadData();
        uint64_t v36 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v35;

        goto LABEL_73;
      case 7u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 == -1 || v40 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v40 + 1;
            v21 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              BOOL v14 = v38++ >= 9;
              if (v14)
              {
                uint64_t v21 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_71:
        uint64_t v42 = 8;
LABEL_72:
        *(void *)(a1 + v42) = v21;
        goto LABEL_73;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_73;
    }
  }
}

uint64_t HKCodableSummaryDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = 32;
        goto LABEL_41;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
        goto LABEL_41;
      case 3u:
        unsigned int v20 = objc_alloc_init(HKCodableQueryAnchor);
        objc_storeStrong((id *)(a1 + 40), v20);
        if PBReaderPlaceMark() && (HKCodableQueryAnchorReadFrom((uint64_t)v20, a2))
        {
          PBReaderRecallMark();

LABEL_51:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 56) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_45:
        uint64_t v33 = 8;
        goto LABEL_50;
      case 5u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v23 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_49:
        uint64_t v33 = 16;
LABEL_50:
        *(void *)(a1 + v33) = v23;
        goto LABEL_51;
      case 6u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
LABEL_41:
        uint64_t v32 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_51;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_51;
    }
  }
}

uint64_t HKCodableStatisticsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 112) |= 4u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_64;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            uint64_t v20 = 0;
            goto LABEL_66;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_66:
        uint64_t v45 = 24;
        goto LABEL_75;
      case 2u:
        *(unsigned char *)(a1 + 112) |= 0x10u;
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v46 = 40;
        goto LABEL_80;
      case 3u:
        *(unsigned char *)(a1 + 112) |= 8u;
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v46 = 32;
LABEL_80:
        *(void *)(a1 + v46) = v28;
        goto LABEL_81;
      case 4u:
        char v31 = objc_alloc_init(HKCodableQuantity);
        uint64_t v32 = 48;
        goto LABEL_40;
      case 5u:
        char v31 = objc_alloc_init(HKCodableQuantity);
        uint64_t v32 = 80;
        goto LABEL_40;
      case 6u:
        char v31 = objc_alloc_init(HKCodableQuantity);
        uint64_t v32 = 64;
        goto LABEL_40;
      case 7u:
        char v31 = objc_alloc_init(HKCodableQuantity);
        uint64_t v32 = 88;
        goto LABEL_40;
      case 8u:
        char v31 = objc_alloc_init(HKCodableQuantity);
        uint64_t v32 = 104;
        goto LABEL_40;
      case 9u:
        char v31 = objc_alloc_init(HKCodableQuantity);
        uint64_t v32 = 56;
LABEL_40:
        objc_storeStrong((id *)(a1 + v32), v31);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v31, a2)) {
          goto LABEL_42;
        }
        goto LABEL_83;
      case 0xAu:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 112) |= 2u;
        while (2)
        {
          uint64_t v35 = *v3;
          uint64_t v36 = *(void *)(a2 + v35);
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v37;
            v20 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v15 = v34++ >= 9;
              if (v15)
              {
                uint64_t v20 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_70:
        uint64_t v45 = 16;
        goto LABEL_75;
      case 0xBu:
        char v31 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong((id *)(a1 + 96), v31);
        if (!PBReaderPlaceMark() || (HKCodableDateComponentsReadFrom((uint64_t)v31, a2) & 1) == 0) {
          goto LABEL_83;
        }
        goto LABEL_42;
      case 0xCu:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 112) |= 1u;
        while (2)
        {
          uint64_t v41 = *v3;
          uint64_t v42 = *(void *)(a2 + v41);
          unint64_t v43 = v42 + 1;
          if (v42 == -1 || v43 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v43;
            v20 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v15 = v40++ >= 9;
              if (v15)
              {
                uint64_t v20 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_74:
        uint64_t v45 = 8;
LABEL_75:
        *(void *)(a1 + v45) = v20;
        goto LABEL_81;
      case 0xDu:
        char v31 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 72), v31);
        if PBReaderPlaceMark() && (HKCodableMetadataDictionaryReadFrom(v31, a2))
        {
LABEL_42:
          PBReaderRecallMark();

LABEL_81:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_83:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_81;
    }
  }
}

void sub_1E0DC9190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

id HKBluetoothIcon()
{
  id v0 = (void *)MEMORY[0x1E4FB1818];
  uint64_t v1 = HKHealthUIFrameworkBundle();
  uint64_t v2 = [v0 imageNamed:@"bluetooth_sharing" inBundle:v1];
  id v3 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_sourceIconTintColor");
  long long v4 = [v2 _flatImageWithColor:v3];

  return v4;
}

id HKDeviceImage(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_3;
  }
  uint64_t v2 = (void *)MEMORY[0x1E4FB1818];
  id v3 = HKHealthUIFrameworkBundle();
  long long v4 = [v2 imageNamed:v1 inBundle:v3];
  uint64_t v5 = objc_msgSend(MEMORY[0x1E4FB1618], "hk_sourceIconTintColor");
  id v6 = [v4 _flatImageWithColor:v5];

  if (!v6)
  {
LABEL_3:
    uint64_t v7 = (void *)HKDeviceImage_fallback;
    if (!HKDeviceImage_fallback)
    {
      v14.CGFloat width = 29.0;
      v14.CGFloat height = 29.0;
      UIGraphicsBeginImageContextWithOptions(v14, 1, 0.0);
      CurrentContext = UIGraphicsGetCurrentContext();
      if ([MEMORY[0x1E4F2B860] isAppleInternalInstall])
      {
        CGContextSetRGBFillColor(CurrentContext, 0.800000012, 0.800000012, 0.800000012, 1.0);
        v15.origin.CGFloat x = 0.0;
        v15.origin.CGFloat y = 0.0;
        v15.size.CGFloat width = 29.0;
        v15.size.CGFloat height = 29.0;
        CGContextFillRect(CurrentContext, v15);
        CGContextSetRGBStrokeColor(CurrentContext, 0.899999976, 0.100000001, 0.100000001, 1.0);
        CGContextMoveToPoint(CurrentContext, 0.0, 0.0);
        CGContextAddLineToPoint(CurrentContext, 29.0, 29.0);
        CGContextMoveToPoint(CurrentContext, 0.0, 29.0);
        CGContextAddLineToPoint(CurrentContext, 29.0, 0.0);
        CGContextStrokePath(CurrentContext);
      }
      else
      {
        CGContextSetRGBFillColor(CurrentContext, 1.0, 1.0, 1.0, 1.0);
        v16.origin.CGFloat x = 0.0;
        v16.origin.CGFloat y = 0.0;
        v16.size.CGFloat width = 29.0;
        v16.size.CGFloat height = 29.0;
        CGContextFillRect(CurrentContext, v16);
        objc_msgSend(MEMORY[0x1E4FB1618], "hk_sourceIconTintColor");
        id v9 = objc_claimAutoreleasedReturnValue();
        CGContextSetFillColorWithColor(CurrentContext, (CGColorRef)[v9 CGColor]);

        CGContextAddArc(CurrentContext, 14.5, 14.5, 7.25, 0.0, 6.28318531, 1);
        CGContextFillPath(CurrentContext);
      }
      uint64_t v10 = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();
      uint64_t v11 = (void *)HKDeviceImage_fallback;
      HKDeviceImage_fallback = v10;

      uint64_t v7 = (void *)HKDeviceImage_fallback;
    }
    id v6 = v7;
  }

  return v6;
}

__CFString *HKOrganDonationErrorTypeAsString(uint64_t a1)
{
  if (a1 >= 5)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E6D56C00[(int)a1];
  }
  return v1;
}

uint64_t HKDisplayCategoryIdentifierFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierVitalSigns"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierFitness"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierNutrition"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierSleep"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierBodyMeasurements"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierMe"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierReproductiveHealth"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierClinicalDocuments"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierMindfulness"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierHeart"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierHearingHealth"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierRespiratory"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierOther"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierHealthRecords"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierAllergies"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierClinicalVitals"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierConditions"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierImmunizations"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierLabResults"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierMedications"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierProcedures"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierMobility"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierSymptoms"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierInsurance"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierClinicalNotes"])
  {
    uint64_t v2 = 30;
  }
  else if ([v1 isEqualToString:@"HKDisplayCategoryIdentifierMedicationTracking"])
  {
    uint64_t v2 = 31;
  }
  else
  {
    uint64_t v2 = -1;
  }

  return v2;
}

__CFString *HKDisplayCategoryIdentifierToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x1E) {
    return 0;
  }
  else {
    return off_1E6D56C50[a1 - 1];
  }
}

uint64_t HKCodableSummaryWalkingSteadinessValueReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v18 = objc_alloc_init(HKCodableLevelViewDataConfiguration);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (HKCodableLevelViewDataConfigurationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if (v17 == 2)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_37;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              uint64_t v21 = 0;
              goto LABEL_39;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v21 = 0;
          }
LABEL_39:
          *(void *)(a1 + 8) = v21;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v18 = objc_alloc_init(HKCodableSummaryQuantityValue);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (HKCodableSummaryQuantityValueReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_42;
        }
      }
      PBReaderRecallMark();
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id _workoutValidationRanges()
{
  if (_workoutValidationRanges_onceToken[0] != -1) {
    dispatch_once(_workoutValidationRanges_onceToken, &__block_literal_global_87);
  }
  id v0 = (void *)_workoutValidationRanges_workoutPropertyKeyToRangeDict;
  return v0;
}

void ___workoutValidationRanges_block_invoke()
{
  void v41[2] = *MEMORY[0x1E4F143B8];
  v40[0] = @"_HKManualEntryWorkoutDistanceKey";
  v38[0] = @"_HKManualEntryConfirmRangeKey";
  id v0 = (void *)MEMORY[0x1E4F2B380];
  id v1 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v35 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  char v33 = [v1 quantityWithUnit:v35 doubleValue:0.0];
  uint64_t v2 = (void *)MEMORY[0x1E4F2B370];
  unsigned int v34 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v32 = [v2 quantityWithUnit:v34 doubleValue:150.0];
  char v31 = [v0 inclusiveRangeWithMinimum:v33 maximum:v32];
  v39[0] = v31;
  v38[1] = @"_HKManualEntryAbsoluteRangeKey";
  id v3 = (void *)MEMORY[0x1E4F2B380];
  long long v4 = (void *)MEMORY[0x1E4F2B370];
  unint64_t v30 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  uint64_t v28 = [v4 quantityWithUnit:v30 doubleValue:0.0];
  uint64_t v5 = (void *)MEMORY[0x1E4F2B370];
  uint64_t v29 = [MEMORY[0x1E4F2B618] unitFromString:@"mi"];
  unint64_t v27 = [v5 quantityWithUnit:v29 doubleValue:500.0];
  uint64_t v26 = [v3 inclusiveRangeWithMinimum:v28 maximum:v27];
  v39[1] = v26;
  unint64_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];
  v40[1] = @"_HKManualEntryWorkoutEnergyBurnedKey";
  v41[0] = v25;
  v36[0] = @"_HKManualEntryConfirmRangeKey";
  id v6 = (void *)MEMORY[0x1E4F2B380];
  uint64_t v7 = (void *)MEMORY[0x1E4F2B370];
  char v24 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  unint64_t v23 = [v7 quantityWithUnit:v24 doubleValue:0.0];
  char v8 = (void *)MEMORY[0x1E4F2B370];
  unsigned int v9 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  unint64_t v10 = [v8 quantityWithUnit:v9 doubleValue:4000.0];
  uint64_t v11 = [v6 inclusiveRangeWithMinimum:v23 maximum:v10];
  v36[1] = @"_HKManualEntryAbsoluteRangeKey";
  v37[0] = v11;
  unint64_t v12 = (void *)MEMORY[0x1E4F2B380];
  char v13 = (void *)MEMORY[0x1E4F2B370];
  BOOL v14 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  int v15 = [v13 quantityWithUnit:v14 doubleValue:0.0];
  CGRect v16 = (void *)MEMORY[0x1E4F2B370];
  unint64_t v17 = [MEMORY[0x1E4F2B618] unitFromString:@"kcal"];
  char v18 = [v16 quantityWithUnit:v17 doubleValue:10000.0];
  char v19 = [v12 inclusiveRangeWithMinimum:v15 maximum:v18];
  v37[1] = v19;
  unsigned int v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2];
  v41[1] = v20;
  uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:2];
  uint64_t v22 = (void *)_workoutValidationRanges_workoutPropertyKeyToRangeDict;
  _workoutValidationRanges_workoutPropertyKeyToRangeDict = v21;
}

void sub_1E0DD2A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v21 - 80));
  _Unwind_Resume(a1);
}

void sub_1E0DD57D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

id OUTLINED_FUNCTION_3_2(id a1)
{
  return a1;
}

uint64_t HKAudiogramFrequencyAxisFont()
{
  return objc_msgSend(MEMORY[0x1E4FB08E0], "hk_roundedSystemFontWithSize:weight:", 11.0, *MEMORY[0x1E4FB09D0]);
}

id _formattedFrequencyStringForFrequency(int a1, int a2, double a3)
{
  if (a1) {
    HKNumberFormatterFromTemplate(1);
  }
  else {
  uint64_t v5 = HKNumberFormatterWithDecimalPrecision(1, 0);
  }
  if (a3 / 1000.0 >= 1.0)
  {
    uint64_t v11 = [NSNumber numberWithDouble:a3 / 1000.0];
    uint64_t v7 = [v5 stringFromNumber:v11];

    char v8 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    unsigned int v9 = v8;
    unint64_t v10 = @"KILOHERTZ_NUMBERLESS_UNIT";
  }
  else
  {
    id v6 = [NSNumber numberWithDouble:a3];
    uint64_t v7 = [v5 stringFromNumber:v6];

    if (!a2) {
      goto LABEL_9;
    }
    char v8 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.HealthUI"];
    unsigned int v9 = v8;
    unint64_t v10 = @"HERTZ_NUMBERLESS_UNIT";
  }
  unint64_t v12 = [v8 localizedStringForKey:v10 value:&stru_1F3B9CF20 table:@"HealthUI-Localizable"];
  uint64_t v13 = [v7 stringByAppendingString:v12];

  uint64_t v7 = (void *)v13;
LABEL_9:

  return v7;
}

__CFString *_formattedFrequencyStringForLocation(void *a1)
{
  [a1 doubleValue];
  double v2 = v1;
  if (v1 < 0.0 || v1 > 6.0)
  {
    uint64_t v5 = &stru_1F3B9CF20;
  }
  else
  {
    +[HKAudiogramChartPoint frequencyFromAxisValue:v1];
    _formattedFrequencyStringForFrequency(1, v2 == 0.0, v4);
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

void sub_1E0DDADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1E0DDCED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKDisplayTypeIdentifierFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBodyMassIndex"])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBodyFatPercentage"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeight"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBodyMass"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLeanBodyMass"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeartRate"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSteps"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDistanceWalkingRunning"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBasalEnergyBurned"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierActiveEnergy"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierFlightsClimbed"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierNikeFuel"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierOxygenSaturation"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBloodGlucose"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBloodAlcoholContent"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPeripheralPerfusionIndex"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryFatTotal"])
  {
    uint64_t v2 = 20;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryFatPolyunsaturated"])
  {
    uint64_t v2 = 21;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryFatMonounsaturated"])
  {
    uint64_t v2 = 22;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryFatSaturated"])
  {
    uint64_t v2 = 23;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryCholesterol"])
  {
    uint64_t v2 = 24;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietarySodium"])
  {
    uint64_t v2 = 25;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryCarbohydrates"])
  {
    uint64_t v2 = 26;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryFiber"])
  {
    uint64_t v2 = 27;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietarySugar"])
  {
    uint64_t v2 = 28;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryEnergy"])
  {
    uint64_t v2 = 29;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryProtein"])
  {
    uint64_t v2 = 30;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminA"])
  {
    uint64_t v2 = 31;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminB6"])
  {
    uint64_t v2 = 32;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminB12"])
  {
    uint64_t v2 = 33;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminC"])
  {
    uint64_t v2 = 34;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminD"])
  {
    uint64_t v2 = 35;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminE"])
  {
    uint64_t v2 = 36;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryVitaminK"])
  {
    uint64_t v2 = 37;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryCalcium"])
  {
    uint64_t v2 = 38;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryIron"])
  {
    uint64_t v2 = 39;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryThiamin"])
  {
    uint64_t v2 = 40;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryRiboflavin"])
  {
    uint64_t v2 = 41;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryNiacin"])
  {
    uint64_t v2 = 42;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryFolate"])
  {
    uint64_t v2 = 43;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryBiotin"])
  {
    uint64_t v2 = 44;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryPantothenicAcid"])
  {
    uint64_t v2 = 45;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryPhosphorus"])
  {
    uint64_t v2 = 46;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryIodine"])
  {
    uint64_t v2 = 47;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryMagnesium"])
  {
    uint64_t v2 = 48;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryZinc"])
  {
    uint64_t v2 = 49;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietarySelenium"])
  {
    uint64_t v2 = 50;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryCopper"])
  {
    uint64_t v2 = 51;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryManganese"])
  {
    uint64_t v2 = 52;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryChromium"])
  {
    uint64_t v2 = 53;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryMolybdenum"])
  {
    uint64_t v2 = 54;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryChloride"])
  {
    uint64_t v2 = 55;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryPotassium"])
  {
    uint64_t v2 = 56;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierNumberOfTimesFallen"])
  {
    uint64_t v2 = 57;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierElectrodermalActivity"])
  {
    uint64_t v2 = 58;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierInhalerUsage"])
  {
    uint64_t v2 = 60;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRespiratoryRate"])
  {
    uint64_t v2 = 61;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBodyTemperature"])
  {
    uint64_t v2 = 62;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSleepAnalysis"])
  {
    uint64_t v2 = 63;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBiologicalSex"])
  {
    uint64_t v2 = 64;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDateOfBirth"])
  {
    uint64_t v2 = 65;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBloodType"])
  {
    uint64_t v2 = 66;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleStandHour"])
  {
    uint64_t v2 = 70;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierForcedVitalCapacity"])
  {
    uint64_t v2 = 71;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierForcedExpiratoryVolume1"])
  {
    uint64_t v2 = 72;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPeakExpiratoryFlowRate"])
  {
    uint64_t v2 = 73;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleExerciseTime"])
  {
    uint64_t v2 = 75;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryCaffeine"])
  {
    uint64_t v2 = 78;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWorkout"])
  {
    uint64_t v2 = 79;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBloodPressure"])
  {
    uint64_t v2 = 80;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCyclingDistance"])
  {
    uint64_t v2 = 83;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDietaryWater"])
  {
    uint64_t v2 = 87;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierFitzpatrickSkinType"])
  {
    uint64_t v2 = 88;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierUVExposure"])
  {
    uint64_t v2 = 89;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBasalBodyTemperature"])
  {
    uint64_t v2 = 90;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCervicalMucusQuality"])
  {
    uint64_t v2 = 91;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierOvulationTestResult"])
  {
    uint64_t v2 = 92;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierMenstruation"])
  {
    uint64_t v2 = 95;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierIntermenstrualBleeding"])
  {
    uint64_t v2 = 96;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSexualActivity"])
  {
    uint64_t v2 = 97;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierMindfulSession"])
  {
    uint64_t v2 = 99;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierActivitySummary"])
  {
    uint64_t v2 = 100;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPushCount"])
  {
    uint64_t v2 = 101;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLocationSeries"])
  {
    uint64_t v2 = 102;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWheelchairUse"])
  {
    uint64_t v2 = 103;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCDADocument"])
  {
    uint64_t v2 = 107;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSwimmingDistance"])
  {
    uint64_t v2 = 110;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSwimmingStrokes"])
  {
    uint64_t v2 = 111;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWheelchairDistance"])
  {
    uint64_t v2 = 113;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWaistCircumference"])
  {
    uint64_t v2 = 114;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRestingHeartRate"])
  {
    uint64_t v2 = 118;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeartbeatSeries"])
  {
    uint64_t v2 = 119;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierVO2Max"])
  {
    uint64_t v2 = 124;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierInsulinDelivery"])
  {
    uint64_t v2 = 125;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWalkingHeartRateAverage"])
  {
    uint64_t v2 = 137;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDownhillSnowSportsDistance"])
  {
    uint64_t v2 = 138;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeartRateVariability"])
  {
    uint64_t v2 = 139;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierTachycardiaEvent"])
  {
    uint64_t v2 = 140;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierElectrocardiogram"])
  {
    uint64_t v2 = 144;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAudiogram"])
  {
    uint64_t v2 = 145;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBradycardiaEvent"])
  {
    uint64_t v2 = 147;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAllergyRecord"])
  {
    uint64_t v2 = 149;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierConditionRecord"])
  {
    uint64_t v2 = 150;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierImmunizationRecord"])
  {
    uint64_t v2 = 151;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLabResultRecord"])
  {
    uint64_t v2 = 152;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierMedicationRecord"])
  {
    uint64_t v2 = 153;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierProcedureRecord"])
  {
    uint64_t v2 = 154;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierVitalSignRecord"])
  {
    uint64_t v2 = 155;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAtrialFibrillationEvent"])
  {
    uint64_t v2 = 156;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAbdominalCramps"])
  {
    uint64_t v2 = 157;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBreastPain"])
  {
    uint64_t v2 = 158;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBloating"])
  {
    uint64_t v2 = 159;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeadache"])
  {
    uint64_t v2 = 160;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAcne"])
  {
    uint64_t v2 = 161;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLowerBackPain"])
  {
    uint64_t v2 = 162;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPelvicPain"])
  {
    uint64_t v2 = 163;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierMoodChanges"])
  {
    uint64_t v2 = 164;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierConstipation"])
  {
    uint64_t v2 = 165;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDiarrhea"])
  {
    uint64_t v2 = 166;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierFatigue"])
  {
    uint64_t v2 = 167;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierNausea"])
  {
    uint64_t v2 = 168;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSleepChanges"])
  {
    uint64_t v2 = 169;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppetiteChanges"])
  {
    uint64_t v2 = 170;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHotFlashes"])
  {
    uint64_t v2 = 171;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierEnvironmentalAudioExposure"])
  {
    uint64_t v2 = 172;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeadphoneAudioExposure"])
  {
    uint64_t v2 = 173;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierActivityMoveMode"])
  {
    uint64_t v2 = 177;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierEnvironmentalAudioExposureEvent"])
  {
    uint64_t v2 = 178;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleMoveTime"])
  {
    uint64_t v2 = 179;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWalkingDoubleSupportPercentage"])
  {
    uint64_t v2 = 182;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSixMinuteWalkTestDistance"])
  {
    uint64_t v2 = 183;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleStandTime"])
  {
    uint64_t v2 = 186;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWalkingSpeed"])
  {
    uint64_t v2 = 187;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWalkingStepLength"])
  {
    uint64_t v2 = 188;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierToothbrushingEvent"])
  {
    uint64_t v2 = 189;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPregnancy"])
  {
    uint64_t v2 = 191;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLactation"])
  {
    uint64_t v2 = 192;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierContraceptive"])
  {
    uint64_t v2 = 193;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWalkingAsymmetryPercentage"])
  {
    uint64_t v2 = 194;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierStairAscentSpeed"])
  {
    uint64_t v2 = 195;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierStairDescentSpeed"])
  {
    uint64_t v2 = 196;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSleepDurationGoal"])
  {
    uint64_t v2 = 197;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSleepSchedule"])
  {
    uint64_t v2 = 198;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeadphoneAudioExposureEvent"])
  {
    uint64_t v2 = 199;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRapidPoundingOrFlutteringHeartbeat"])
  {
    uint64_t v2 = 201;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSkippedHeartbeat"])
  {
    uint64_t v2 = 202;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierFever"])
  {
    uint64_t v2 = 203;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierShortnessOfBreath"])
  {
    uint64_t v2 = 204;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierChestTightnessOrPain"])
  {
    uint64_t v2 = 205;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierFainting"])
  {
    uint64_t v2 = 206;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDizziness"])
  {
    uint64_t v2 = 207;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierInsuranceRecord"])
  {
    uint64_t v2 = 217;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCardioFitnessMedicationsUse"])
  {
    uint64_t v2 = 218;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierVomiting"])
  {
    uint64_t v2 = 220;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeartburn"])
  {
    uint64_t v2 = 221;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCoughing"])
  {
    uint64_t v2 = 222;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWheezing"])
  {
    uint64_t v2 = 223;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSoreThroat"])
  {
    uint64_t v2 = 224;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCongestion"])
  {
    uint64_t v2 = 225;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRunnyNose"])
  {
    uint64_t v2 = 226;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierVaginalDryness"])
  {
    uint64_t v2 = 229;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierNightSweats"])
  {
    uint64_t v2 = 230;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierChills"])
  {
    uint64_t v2 = 231;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHairLoss"])
  {
    uint64_t v2 = 232;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierDrySkin"])
  {
    uint64_t v2 = 233;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBladderIncontinence"])
  {
    uint64_t v2 = 234;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierMemoryLapse"])
  {
    uint64_t v2 = 235;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLowCardioFitnessEvent"])
  {
    uint64_t v2 = 236;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHandwashingEvent"])
  {
    uint64_t v2 = 237;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierGeneralizedBodyAche"])
  {
    uint64_t v2 = 240;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLossOfSmell"])
  {
    uint64_t v2 = 241;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierLossOfTaste"])
  {
    uint64_t v2 = 242;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPregnancyTestResult"])
  {
    uint64_t v2 = 243;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierProgesteroneTestResult"])
  {
    uint64_t v2 = 244;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAtrialFibrillationBurden"])
  {
    uint64_t v2 = 248;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleWalkingSteadiness"])
  {
    uint64_t v2 = 249;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleWalkingSteadinessEvent"])
  {
    uint64_t v2 = 250;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierNumberOfAlcoholicBeverages"])
  {
    uint64_t v2 = 251;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleSleepingWristTemperature"])
  {
    uint64_t v2 = 256;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierVisionPrescription"])
  {
    uint64_t v2 = 257;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRunningStrideLength"])
  {
    uint64_t v2 = 258;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRunningVerticalOscillation"])
  {
    uint64_t v2 = 259;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRunningGroundContactTime"])
  {
    uint64_t v2 = 260;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPersistentIntermenstrualBleeding"])
  {
    uint64_t v2 = 262;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierProlongedMenstrualPeriods"])
  {
    uint64_t v2 = 263;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierIrregularMenstrualCycles"])
  {
    uint64_t v2 = 264;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierInfrequentMenstrualCycles"])
  {
    uint64_t v2 = 265;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierHeartRateRecovery"])
  {
    uint64_t v2 = 266;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierClinicalNoteRecord"])
  {
    uint64_t v2 = 268;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierUnderwaterDepth"])
  {
    uint64_t v2 = 269;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRunningPower"])
  {
    uint64_t v2 = 270;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierEnvironmentalSoundReduction"])
  {
    uint64_t v2 = 272;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierMedicationDoseEvent"])
  {
    uint64_t v2 = 273;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRunningSpeed"])
  {
    uint64_t v2 = 274;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleSleepingBreathingDisturbances"])
  {
    uint64_t v2 = 275;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSleepApneaEvent"])
  {
    uint64_t v2 = 276;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWaterTemperature"])
  {
    uint64_t v2 = 277;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierTimeInDaylight"])
  {
    uint64_t v2 = 279;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCyclingPower"])
  {
    uint64_t v2 = 280;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCyclingSpeed"])
  {
    uint64_t v2 = 281;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCyclingCadence"])
  {
    uint64_t v2 = 282;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCyclingFunctionalThresholdPower"])
  {
    uint64_t v2 = 283;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierStateOfMind"])
  {
    uint64_t v2 = 284;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPhysicalEffort"])
  {
    uint64_t v2 = 286;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierGAD7"])
  {
    uint64_t v2 = 287;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPHQ9"])
  {
    uint64_t v2 = 288;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPaddleSportsDistance"])
  {
    uint64_t v2 = 294;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRowingDistance"])
  {
    uint64_t v2 = 295;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCrossCountrySkiingDistance"])
  {
    uint64_t v2 = 296;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierSkatingSportsDistance"])
  {
    uint64_t v2 = 297;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierEstimatedWorkoutEffortScore"])
  {
    uint64_t v2 = 298;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierRowingSpeed"])
  {
    uint64_t v2 = 301;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierCrossCountrySkiingSpeed"])
  {
    uint64_t v2 = 302;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierPaddleSportsSpeed"])
  {
    uint64_t v2 = 303;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierWorkoutEffortScore"])
  {
    uint64_t v2 = 304;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierAppleBalanceMetrics"])
  {
    uint64_t v2 = 305;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBleedingDuringPregnancy"])
  {
    uint64_t v2 = 313;
  }
  else if ([v1 isEqualToString:@"HKDisplayTypeIdentifierBleedingAfterPregnancy"])
  {
    uint64_t v2 = 314;
  }
  else
  {
    uint64_t v2 = HKDisplayTypeIdentifierEnding;
  }

  return v2;
}

__CFString *HKDisplayTypeIdentifierToString(unint64_t a1)
{
  if (a1 > 0x13A) {
    return 0;
  }
  else {
    return off_1E6D570F0[a1];
  }
}

void sub_1E0DE0548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKDecodeDateForValue()
{
  return objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
}

void sub_1E0DE1EC0(_Unwind_Exception *a1)
{
}

BOOL HKCodableRGBConfigurationReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 8u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          unint64_t v27 = &OBJC_IVAR___HKCodableRGBConfiguration__red;
          goto LABEL_41;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 4u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          unint64_t v27 = &OBJC_IVAR___HKCodableRGBConfiguration__green;
          goto LABEL_41;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 2u;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          unint64_t v27 = &OBJC_IVAR___HKCodableRGBConfiguration__blue;
          goto LABEL_41;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 1u;
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          unint64_t v27 = &OBJC_IVAR___HKCodableRGBConfiguration__alpha;
LABEL_41:
          *(void *)(a1 + *v27) = v20;
          goto LABEL_42;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartDataSourceQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
        goto LABEL_23;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 32;
LABEL_23:
        uint64_t v21 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_60;
      case 3u:
        *(unsigned char *)(a1 + 60) |= 4u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v42 = 24;
        goto LABEL_59;
      case 4u:
        *(unsigned char *)(a1 + 60) |= 1u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v42 = 8;
LABEL_59:
        *(void *)(a1 + v42) = v24;
        goto LABEL_60;
      case 5u:
        unint64_t v27 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong((id *)(a1 + 40), v27);
        if PBReaderPlaceMark() && (HKCodableDateComponentsReadFrom((uint64_t)v27, a2))
        {
          PBReaderRecallMark();

LABEL_60:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)(a1 + 60) |= 8u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              BOOL v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v30) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v30) = 0;
        }
LABEL_50:
        *(_DWORD *)(a1 + 56) = v30;
        goto LABEL_60;
      case 7u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v38 = *v3;
          uint64_t v39 = *(void *)(a2 + v38);
          unint64_t v40 = v39 + 1;
          if (v39 == -1 || v40 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              BOOL v15 = v36++ >= 9;
              if (v15)
              {
                uint64_t v37 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v37 = 0;
        }
LABEL_54:
        *(void *)(a1 + 16) = v37;
        goto LABEL_60;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_60;
    }
  }
}

uint64_t HKCodableSummaryTrendChartViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 56;
        goto LABEL_24;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
        goto LABEL_24;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 64;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_46;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 72) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_45:
        *(void *)(a1 + 8) = v23;
        goto LABEL_46;
      case 5u:
        unint64_t v27 = objc_alloc_init(HKCodableDateInterval);
        uint64_t v28 = 16;
        goto LABEL_35;
      case 6u:
        unint64_t v27 = objc_alloc_init(HKCodableQuantity);
        uint64_t v29 = 24;
        goto LABEL_39;
      case 7u:
        unint64_t v27 = objc_alloc_init(HKCodableDateInterval);
        uint64_t v28 = 32;
LABEL_35:
        objc_storeStrong((id *)(a1 + v28), v27);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v27, a2)) {
          goto LABEL_48;
        }
        goto LABEL_41;
      case 8u:
        unint64_t v27 = objc_alloc_init(HKCodableQuantity);
        uint64_t v29 = 40;
LABEL_39:
        objc_storeStrong((id *)(a1 + v29), v27);
        if PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v27, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_46:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_48:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_46;
    }
  }
}

double StateOfMindBucketData.valenceRange.getter()
{
  return *(double *)v0;
}

uint64_t StateOfMindBucketData.sampleCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t StateOfMindBucketData.reflectiveInterval.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t StateOfMindBucketData.init(valenceRange:sampleCount:reflectiveInterval:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = a2;
  return result;
}

uint64_t sub_1E0DEBA88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1E0ECB980();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  sub_1E0DF0900(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8, v7);
  unint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8, v11);
  char v13 = &v16[-v12];
  uint64_t v14 = v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___dateIntervalMidpoint;
  swift_beginAccess();
  sub_1E0DF0C20(v14, (uint64_t)v13);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v4 + 32))(a1, v13, v3);
  }
  sub_1E0DF0AA0((uint64_t)v13);
  sub_1E0ECB3B0();
  sub_1E0ECB3A0();
  sub_1E0ECB8E0();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v10, a1, v3);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v4 + 56))(v10, 0, 1, v3);
  swift_beginAccess();
  sub_1E0DF0CB4((uint64_t)v10, v14);
  return swift_endAccess();
}

uint64_t sub_1E0DEBCF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1E0DEBD3C();
  *a1 = result;
  return result;
}

void *sub_1E0DEBD1C(void *result, void *a2)
{
  uint64_t v2 = *a2 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount;
  *(void *)uint64_t v2 = *result;
  *(unsigned char *)(v2 + 8) = 0;
  return result;
}

uint64_t sub_1E0DEBD3C()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount + 8) != 1) {
    return *(void *)v1;
  }
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t result = 0;
    uint64_t v5 = (uint64_t *)(v2 + 48);
    while (1)
    {
      uint64_t v6 = *v5;
      v5 += 4;
      BOOL v7 = __OFADD__(result, v6);
      result += v6;
      if (v7) {
        break;
      }
      if (!--v3) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t result = 0;
LABEL_9:
    *(void *)uint64_t v1 = result;
    v1[8] = 0;
  }
  return result;
}

id StateOfMindChartPoint.__allocating_init(dateInterval:buckets:isSharingPreview:)(uint64_t a1, uint64_t a2, char a3)
{
  id v7 = objc_allocWithZone(v3);
  return StateOfMindChartPoint.init(dateInterval:buckets:isSharingPreview:)(a1, a2, a3);
}

id StateOfMindChartPoint.init(dateInterval:buckets:isSharingPreview:)(uint64_t a1, uint64_t a2, char a3)
{
  id v7 = &v3[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___dateIntervalMidpoint];
  uint64_t v8 = sub_1E0ECB980();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = &v3[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  unint64_t v10 = &v3[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_dateInterval];
  uint64_t v11 = sub_1E0ECB3C0();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  uint64_t v17 = a2;
  char v13 = v3;
  swift_bridgeObjectRetain();
  sub_1E0DEDE7C(&v17);
  swift_bridgeObjectRelease();
  *(void *)&v13[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets] = v17;
  v13[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_isSharingPreview] = a3 & 1;

  v16.receiver = v13;
  v16.super_class = (Class)type metadata accessor for StateOfMindChartPoint();
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id StateOfMindChartPoint.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void StateOfMindChartPoint.init()()
{
}

id StateOfMindChartPoint.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateOfMindChartPoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t StateOfMindChartPoint.xValueAsGenericType()@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = sub_1E0ECB980();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a1);
  return sub_1E0DEBA88((uint64_t)boxed_opaque_existential_0);
}

uint64_t _s8HealthUI21StateOfMindChartPointC22minXValueAsGenericTypeypyF_0()
{
  id v1 = objc_msgSend(v0, sel_xValueAsGenericType);
  sub_1E0ECD760();
  return swift_unknownObjectRelease();
}

double StateOfMindChartPoint.yValue()@<D0>(_OWORD *a1@<X8>)
{
  if (objc_msgSend(v1, sel_minYValue))
  {
    sub_1E0ECD760();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double StateOfMindChartPoint.yValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  objc_super v2 = v1;
  swift_getObjectType();
  uint64_t v4 = sub_1E0ECC010();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0ECBFE0();
  uint64_t v9 = sub_1E0ECBFF0();
  os_log_type_t v10 = sub_1E0ECD520();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = a1;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = v2;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = sub_1E0ECDBC0();
    uint64_t v20 = sub_1E0DED7E4(v14, v15, &v21);
    a1 = v19;
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v13, -1, -1);
    objc_super v16 = v12;
    objc_super v2 = v18;
    MEMORY[0x1E4E41080](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (objc_msgSend(v2, sel_yValue))
  {
    sub_1E0ECD760();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t StateOfMindChartPoint.allYValues()()
{
  if (!objc_msgSend(v0, sel_minYValue)) {
    return MEMORY[0x1E4FBC860];
  }
  sub_1E0ECD760();
  swift_unknownObjectRelease();
  sub_1E0DEDF98(v4, v5);
  if (!objc_msgSend(v0, sel_maxYValue))
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
    return MEMORY[0x1E4FBC860];
  }
  sub_1E0ECD760();
  swift_unknownObjectRelease();
  sub_1E0DEDF98(&v3, v4);
  sub_1E0B5CDC0(0, (unint64_t *)&qword_1EAD69A40, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1E0F06210;
  sub_1E0DEDFA8((uint64_t)v5, v1 + 32);
  sub_1E0DEDF98(v4, (_OWORD *)(v1 + 64));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  return v1;
}

double StateOfMindChartPoint.minYValue()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  if (*(void *)(v2 + 16))
  {
    double result = *(double *)(v2 + 32);
    *(void *)(a1 + 24) = MEMORY[0x1E4FBB3D0];
    *(double *)a1 = result;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double StateOfMindChartPoint.maxYValue()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    double result = *(double *)(v2 + 32 * v3 + 8);
    *(void *)(a1 + 24) = MEMORY[0x1E4FBB3D0];
    *(double *)a1 = result;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

id sub_1E0DECAFC(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  a3(v10);
  uint64_t v3 = v11;
  if (v11)
  {
    uint64_t v4 = __swift_project_boxed_opaque_existential_0(v10, v11);
    uint64_t v5 = *(void *)(v3 - 8);
    MEMORY[0x1F4188790](v4, v4);
    uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = (void *)sub_1E0ECD9D0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8;
}

id StateOfMindChartPoint.userInfo()()
{
  uint64_t v1 = sub_1E0ECB3C0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v48 = v0;
  char v49 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)(v5 + 56);
    uint64_t v8 = MEMORY[0x1E4FBC860];
    do
    {
      if (*v7 == 2)
      {
        long long v50 = *(_OWORD *)(v7 - 3);
        uint64_t v12 = *(v7 - 1);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v52 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1E0DEE968(0, *(void *)(v8 + 16) + 1, 1);
          uint64_t v8 = v52;
        }
        unint64_t v10 = *(void *)(v8 + 16);
        unint64_t v9 = *(void *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          sub_1E0DEE968(v9 > 1, v10 + 1, 1);
          uint64_t v8 = v52;
        }
        *(void *)(v8 + 16) = v10 + 1;
        uint64_t v11 = v8 + 32 * v10;
        *(_OWORD *)(v11 + 32) = v50;
        *(void *)(v11 + 48) = v12;
        *(void *)(v11 + 56) = 2;
      }
      v7 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  uint64_t v44 = sub_1E0DF0060(v8);
  uint64_t v46 = v15;
  uint64_t v47 = v14;
  int v45 = v16;
  swift_release();
  uint64_t v17 = *(void *)(v5 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = (void *)(v5 + 56);
    uint64_t v19 = MEMORY[0x1E4FBC860];
    do
    {
      if (*v18 == 1)
      {
        long long v50 = *(_OWORD *)(v18 - 3);
        uint64_t v23 = *(v18 - 1);
        char v24 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v52 = v19;
        if ((v24 & 1) == 0)
        {
          sub_1E0DEE968(0, *(void *)(v19 + 16) + 1, 1);
          uint64_t v19 = v52;
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_1E0DEE968(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v52;
        }
        *(void *)(v19 + 16) = v21 + 1;
        uint64_t v22 = v19 + 32 * v21;
        *(_OWORD *)(v22 + 32) = v50;
        *(void *)(v22 + 48) = v23;
        *(void *)(v22 + 56) = 1;
      }
      v18 += 4;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
  uint64_t v25 = sub_1E0DF0060(v19);
  uint64_t v27 = v26;
  *(void *)&long long v50 = v28;
  int v43 = v29;
  swift_release();
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v32(v49, v48 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_dateInterval, v1);
  char v33 = *(unsigned char *)(v30 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_isSharingPreview);
  char v34 = (objc_class *)type metadata accessor for StateOfMindCoordinateInfo();
  char v35 = objc_allocWithZone(v34);
  v32(&v35[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dateInterval], (uint64_t)v31, v1);
  *(void *)&v35[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyReflectiveCount] = v44;
  unsigned int v36 = &v35[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyValenceRange];
  uint64_t v37 = v46;
  *(void *)unsigned int v36 = v47;
  *((void *)v36 + 1) = v37;
  v36[16] = v45 & 1;
  *(void *)&v35[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryReflectiveCount] = v25;
  uint64_t v38 = &v35[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryValenceRange];
  uint64_t v39 = v50;
  *(void *)uint64_t v38 = v27;
  *((void *)v38 + 1) = v39;
  v38[16] = v43 & 1;
  v35[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_isSharingPreview] = v33;
  v51.receiver = v35;
  v51.super_class = v34;
  id v40 = objc_msgSendSuper2(&v51, sel_init);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v31, v1);
  return v40;
}

uint64_t static StateOfMindChartPoint.countAndValence(bucketData:)(uint64_t a1)
{
  return sub_1E0DF0060(a1);
}

void ClosedRange<>.merge(with:)(double a1, double a2, double a3, double a4)
{
  if (a1 >= a3) {
    a1 = a3;
  }
  if (a4 > a2) {
    a2 = a4;
  }
  if (a1 > a2) {
    __break(1u);
  }
}

void sub_1E0DED080(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1E0DED08C(uint64_t a1, uint64_t a2)
{
  return sub_1E0DED64C(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1E0DED0BC()
{
  return sub_1E0ECDA60();
}

BOOL sub_1E0DED0EC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1E0DED104(uint64_t a1, id *a2)
{
  uint64_t result = sub_1E0ECD1B0();
  *a2 = 0;
  return result;
}

uint64_t sub_1E0DED17C(uint64_t a1, id *a2)
{
  char v3 = sub_1E0ECD1C0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1E0DED1FC@<X0>(uint64_t *a1@<X8>)
{
  sub_1E0ECD1D0();
  uint64_t v2 = sub_1E0ECD190();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1E0DED240()
{
  return sub_1E0ECDA70();
}

uint64_t sub_1E0DED288()
{
  return sub_1E0ECDA70();
}

uint64_t sub_1E0DED2D0(uint64_t a1)
{
  uint64_t v2 = sub_1E0DF06A4((unint64_t *)&qword_1EAD699D0, type metadata accessor for Key);
  uint64_t v3 = sub_1E0DF06A4(&qword_1EAD6D930, type metadata accessor for Key);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1E0DED38C(uint64_t a1)
{
  uint64_t v2 = sub_1E0DF06A4(&qword_1EAD6D938, type metadata accessor for UIContentSizeCategory);
  uint64_t v3 = sub_1E0DF06A4(&qword_1EAD6D940, type metadata accessor for UIContentSizeCategory);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1E0DED448(uint64_t a1)
{
  uint64_t v2 = sub_1E0DF06A4((unint64_t *)&qword_1EAD6DA68, type metadata accessor for AttributeName);
  uint64_t v3 = sub_1E0DF06A4(&qword_1EAD6DA70, type metadata accessor for AttributeName);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1E0DED504@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1E0ECD190();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1E0DED54C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1E0ECD1D0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1E0DED578(uint64_t a1)
{
  uint64_t v2 = sub_1E0DF06A4(&qword_1EAD6DA78, type metadata accessor for Name);
  uint64_t v3 = sub_1E0DF06A4(&qword_1EAD6DA80, type metadata accessor for Name);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1E0DED634(uint64_t a1, uint64_t a2)
{
  return sub_1E0DED64C(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1E0DED64C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1E0ECD1D0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1E0DED690()
{
  sub_1E0ECD1D0();
  sub_1E0ECD220();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1E0DED6E4()
{
  sub_1E0ECD1D0();
  sub_1E0ECDA50();
  sub_1E0ECD220();
  uint64_t v0 = sub_1E0ECDA70();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1E0DED758()
{
  uint64_t v0 = sub_1E0ECD1D0();
  uint64_t v2 = v1;
  if (v0 == sub_1E0ECD1D0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1E0ECD9E0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1E0DED7E4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1E0DED8B8(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1E0DEDFA8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1E0DEDFA8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1E0DED8B8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1E0ECD6E0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1E0DEDA74(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1E0ECD860();
  if (!v8)
  {
    sub_1E0ECD8E0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1E0ECD960();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1E0DEDA74(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1E0DEDB0C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1E0DEDD0C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1E0DEDD0C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1E0DEDB0C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1E0DEDC84(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1E0ECD810();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1E0ECD8E0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1E0ECD270();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1E0ECD960();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1E0ECD8E0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1E0DEDC84(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1E0B5CDC0(0, &qword_1EB584EB8, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBBE00]);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _OWORD v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1E0DEDD0C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, &qword_1EB584EB8, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEDE7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1E0E65D0C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1E0DEE004(v5);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for StateOfMindChartPoint()
{
  uint64_t result = qword_1EAD6D738;
  if (!qword_1EAD6D738) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_OWORD *sub_1E0DEDF98(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1E0DEDFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1E0DEE004(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1E0ECD9A0();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v89 = *a1;
      uint64_t v90 = -1;
      uint64_t v91 = 1;
      uint64_t v92 = *a1;
      do
      {
        double v93 = *(double *)(v89 + 32 * v91);
        uint64_t v94 = v90;
        uint64_t v95 = v92;
        do
        {
          if (v93 >= *(double *)v95) {
            break;
          }
          if (!v89) {
            goto LABEL_141;
          }
          uint64_t v96 = *(void *)(v95 + 40);
          long long v97 = *(_OWORD *)(v95 + 48);
          long long v98 = *(_OWORD *)(v95 + 16);
          *(_OWORD *)(v95 + 32) = *(_OWORD *)v95;
          *(_OWORD *)(v95 + 48) = v98;
          *(double *)uint64_t v95 = v93;
          *(void *)(v95 + 8) = v96;
          *(_OWORD *)(v95 + 16) = v97;
          v95 -= 32;
        }
        while (!__CFADD__(v94++, 1));
        ++v91;
        v92 += 32;
        --v90;
      }
      while (v91 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v6 = result;
  v109 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      v100 = v12;
      uint64_t v111 = v9;
      if (v13 >= 2)
      {
        uint64_t v101 = *v109;
        do
        {
          unint64_t v102 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v101) {
            goto LABEL_145;
          }
          v103 = v100;
          uint64_t v104 = *(void *)&v100[16 * v102 + 32];
          uint64_t v105 = *(void *)&v100[16 * v13 + 24];
          sub_1E0DEE6EC((double *)(v101 + 32 * v104), (double *)(v101 + 32 * *(void *)&v100[16 * v13 + 16]), v101 + 32 * v105, __dst);
          if (v1) {
            break;
          }
          if (v105 < v104) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v103 = sub_1E0E64F24((uint64_t)v103);
          }
          if (v102 >= *((void *)v103 + 2)) {
            goto LABEL_134;
          }
          v106 = &v103[16 * v102 + 32];
          *(void *)v106 = v104;
          *((void *)v106 + 1) = v105;
          unint64_t v107 = *((void *)v103 + 2);
          if (v13 > v107) {
            goto LABEL_135;
          }
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          v100 = v103;
          *((void *)v103 + 2) = v107 - 1;
          unint64_t v13 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v111 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v111 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_1E0ECD360();
    *(void *)(v8 + 16) = v7;
    uint64_t v111 = v8;
    __dst = (double *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v110 = *a1 + 64;
  uint64_t v108 = *a1 + 16;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v112 = v6;
  uint64_t v113 = v3;
  uint64_t v114 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 32 * v10);
      uint64_t v16 = 32 * v14;
      double v17 = *(double *)(v11 + 32 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (double *)(v110 + 32 * v14);
        double v19 = v15;
        while (1)
        {
          double v20 = v19;
          double v19 = *v18;
          if (v15 < v17 == *v18 >= v20) {
            break;
          }
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 32 * v10;
          uint64_t v22 = v10;
          uint64_t v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11) {
                goto LABEL_144;
              }
              char v24 = (_OWORD *)(v11 + v16);
              uint64_t v25 = v11 + v21;
              long long v27 = *(_OWORD *)(v11 + v16);
              long long v26 = *(_OWORD *)(v11 + v16 + 16);
              long long v28 = *(_OWORD *)(v11 + v21 - 16);
              _OWORD *v24 = *(_OWORD *)(v11 + v21 - 32);
              v24[1] = v28;
              *(_OWORD *)(v25 - 32) = v27;
              *(_OWORD *)(v25 - 16) = v26;
            }
            ++v23;
            v21 -= 32;
            v16 += 32;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v29 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v29 >= v3) {
      uint64_t v29 = v3;
    }
    if (v29 < v14) {
      break;
    }
    if (v10 != v29)
    {
      uint64_t v30 = v108 + 32 * v10;
      do
      {
        double v31 = *(double *)(v11 + 32 * v10);
        uint64_t v32 = v14;
        uint64_t v33 = v30;
        do
        {
          char v34 = (long long *)(v33 - 48);
          if (v31 >= *(double *)(v33 - 48)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          long long v36 = *v34;
          long long v35 = *(_OWORD *)(v33 - 32);
          *(_OWORD *)(v33 - 32) = *(_OWORD *)v33;
          v33 -= 32;
          uint64_t v37 = *(void *)(v33 + 24);
          void v34[2] = v36;
          v34[3] = v35;
          *(double *)(v33 - 16) = v31;
          *(void *)(v33 - 8) = v37;
          ++v32;
        }
        while (v10 != v32);
        ++v10;
        v30 += 32;
      }
      while (v10 != v29);
      uint64_t v10 = v29;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_1E0E64BC4(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v39 = *((void *)v12 + 2);
    unint64_t v38 = *((void *)v12 + 3);
    unint64_t v13 = v39 + 1;
    uint64_t v11 = v114;
    if (v39 >= v38 >> 1)
    {
      char v88 = sub_1E0E64BC4((char *)(v38 > 1), v39 + 1, 1, v12);
      uint64_t v11 = v114;
      uint64_t v12 = v88;
    }
    *((void *)v12 + 2) = v13;
    id v40 = v12 + 32;
    char v41 = &v12[16 * v39 + 32];
    *(void *)char v41 = v14;
    *((void *)v41 + 1) = v10;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v47 = &v40[16 * v13];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_120;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_121;
          }
          unint64_t v54 = v13 - 2;
          unsigned int v55 = &v40[16 * v13 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_123;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_126;
          }
          if (v59 >= v50)
          {
            unint64_t v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_130;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v71 = *((void *)v12 + 4);
            uint64_t v72 = *((void *)v12 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_77;
          }
          uint64_t v44 = *((void *)v12 + 4);
          uint64_t v43 = *((void *)v12 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }
        if (v46) {
          goto LABEL_122;
        }
        unint64_t v54 = v13 - 2;
        unsigned int v60 = &v40[16 * v13 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_125;
        }
        uint64_t v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_128;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_129;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_83:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v65) {
          goto LABEL_124;
        }
        char v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_127;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        unint64_t v82 = v12;
        char v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        unsigned int v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        sub_1E0DEE6EC((double *)(v11 + 32 * *(void *)v83), (double *)(v11 + 32 * *(void *)v85), v11 + 32 * v86, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v86 < v84) {
          goto LABEL_117;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_118;
        }
        *(void *)char v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        unint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_119;
        }
        uint64_t v12 = v82;
        unint64_t v13 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        uint64_t v11 = v114;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v112;
    uint64_t v3 = v113;
    if (v10 >= v113)
    {
      uint64_t v9 = v111;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  uint64_t result = sub_1E0ECD8E0();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEE6EC(double *__src, double *a2, unint64_t a3, double *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 31;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  long long v28 = __src;
  long long v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[4 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      uint64_t v18 = &v4[4 * v13];
      long long v26 = v18;
      long long v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        double v19 = (double *)(a3 - 32);
        double v20 = v6;
        while (1)
        {
          uint64_t v21 = v19 + 4;
          double v22 = *(v20 - 4);
          v20 -= 4;
          if (*(v18 - 4) >= v22)
          {
            long long v26 = v18 - 4;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
            {
              long long v24 = *((_OWORD *)v18 - 1);
              *(_OWORD *)double v19 = *((_OWORD *)v18 - 2);
              *((_OWORD *)v19 + 1) = v24;
            }
            double v20 = v6;
            v18 -= 4;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v21 != v6 || v19 >= v6)
            {
              long long v23 = *((_OWORD *)v20 + 1);
              *(_OWORD *)double v19 = *(_OWORD *)v20;
              *((_OWORD *)v19 + 1) = v23;
            }
            long long v28 = v20;
            if (v20 <= v7) {
              goto LABEL_42;
            }
          }
          v19 -= 4;
          uint64_t v6 = v20;
          if (v18 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[4 * v10] <= __dst) {
      memmove(__dst, __src, 32 * v10);
    }
    uint64_t v14 = &v4[4 * v10];
    long long v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
          {
            long long v17 = *((_OWORD *)v4 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v17;
          }
          v4 += 4;
          long long v27 = v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 4;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            long long v16 = *((_OWORD *)v6 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v16;
          }
        }
        v7 += 4;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      long long v28 = v7;
    }
LABEL_42:
    sub_1E0E64CEC((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEE968(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEEC60(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEE988(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEEDE0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEE9A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF760(a1, a2, a3, (void *)*v3, &qword_1EAD6D9E8, MEMORY[0x1E4F273A8], MEMORY[0x1E4F273A8]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEE9F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF760(a1, a2, a3, (void *)*v3, (unint64_t *)&unk_1EAD6D9A8, MEMORY[0x1E4F65950], MEMORY[0x1E4F65950]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEEA48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEEF6C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEA68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF9C4(a1, a2, a3, *v3, (unint64_t *)&unk_1EAD6D990, (uint64_t (*)(uint64_t))sub_1E0DF0964);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEAA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF10C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEAC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF298(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEEAE4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF760(a1, a2, a3, (void *)*v3, &qword_1EAD6D988, MEMORY[0x1E4F27FC8], MEMORY[0x1E4F27FC8]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEEB34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF44C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEB54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF5E0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEB74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF760(a1, a2, a3, (void *)*v3, &qword_1EAD6D978, MEMORY[0x1E4F65968], MEMORY[0x1E4F65968]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEEBC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEF9C4(a1, a2, a3, *v3, &qword_1EAD6D9C8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEC00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEFB3C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEEC20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEFD08(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1E0DEEC40(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1E0DEFEAC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1E0DEEC60(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, (unint64_t *)&unk_1EAD6D9F0, (uint64_t)&type metadata for StateOfMindBucketData, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEEDE0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, (unint64_t *)&qword_1EAD69880, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEEF6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, &qword_1EAD6D980, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEF0EC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1E0DEF9C4(a1, a2, a3, a4, (unint64_t *)&unk_1EAD6D990, (uint64_t (*)(uint64_t))sub_1E0DF0964);
}

uint64_t sub_1E0DEF10C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, (unint64_t *)&unk_1EAD6D948, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEF298(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0DF0900(0, &qword_1EAD6D9D0, (uint64_t (*)(uint64_t))sub_1E0DF0B7C, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1E0DF0B7C();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEF44C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, (unint64_t *)&qword_1EAD69A40, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEF5E0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, &qword_1EAD6D970, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEF760(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    long long v17 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1E0DF0900(0, a5, a6, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  long long v17 = (void *)swift_allocObject();
  size_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_34;
  }
  v17[2] = v12;
  void v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  double v22 = (char *)v17 + v21;
  long long v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v17 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v12;
  uint64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEF9C4(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    sub_1E0DF0900(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = v12 + 32;
  unint64_t v16 = a4 + 32;
  if (a1)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10]) {
      memmove(v15, v16, 16 * v10);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v10] || v15 >= &v16[16 * v10])
  {
    memcpy(v15, v16, 16 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEFB3C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0DF08A0(0, &qword_1EAD6D9B8, (unint64_t *)&qword_1EAD6D9C0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1E0DF0B2C(0, (unint64_t *)&qword_1EAD6D9C0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEFD08(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0B5CDC0(0, &qword_1EAD6D968, (uint64_t)&type metadata for HKMultiLineSeriesCoordinate, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DEFEAC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1E0DF08A0(0, &qword_1EAD6D958, &qword_1EAD6D960);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1E0DF0B2C(0, &qword_1EAD6D960);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0DF0060(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = (uint64_t *)(a1 + 48);
  uint64_t v5 = v1;
  do
  {
    uint64_t v6 = *v4;
    v4 += 4;
    BOOL v7 = __OFADD__(result, v6);
    result += v6;
    if (v7)
    {
      __break(1u);
      goto LABEL_17;
    }
    --v5;
  }
  while (v5);
  uint64_t v8 = v1 - 1;
  if (v1 == 1) {
    return result;
  }
  double v9 = *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 40);
  for (uint64_t i = (double *)(a1 + 72); ; i += 4)
  {
    if (*(i - 1) < v9) {
      double v9 = *(i - 1);
    }
    if (*i >= v10) {
      double v10 = *i;
    }
    if (v9 > v10) {
      break;
    }
    if (!--v8) {
      return result;
    }
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StateOfMindBucketData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StateOfMindBucketData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for StateOfMindBucketData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StateOfMindBucketData()
{
  return &type metadata for StateOfMindBucketData;
}

uint64_t sub_1E0DF0198()
{
  return type metadata accessor for StateOfMindChartPoint();
}

void sub_1E0DF01A0()
{
  sub_1E0ECB3C0();
  if (v0 <= 0x3F)
  {
    sub_1E0DF0900(319, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for StateOfMindChartPoint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for StateOfMindChartPoint);
}

uint64_t dispatch thunk of StateOfMindChartPoint.totalSampleCount.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of StateOfMindChartPoint.__allocating_init(dateInterval:buckets:isSharingPreview:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for HKOverlayRoomViewControllerMode(uint64_t a1)
{
}

void type metadata accessor for HKHearingLevelClassification(uint64_t a1)
{
}

void type metadata accessor for HKHealthRecordsAccountsEvent(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for __HKStateOfMindReflectiveInterval(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1E0DF0450(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E0DF0470(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for HKGraphSeriesDataPointPathRange(uint64_t a1)
{
}

void type metadata accessor for CLKDeviceProductFamilyType(uint64_t a1)
{
}

void type metadata accessor for CLKDeviceSizeClass(uint64_t a1)
{
}

void type metadata accessor for HKAudiogramEar(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for CGContext(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_1E0DF0614()
{
  return sub_1E0DF06A4(&qword_1EAD6D8F8, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1E0DF065C()
{
  return sub_1E0DF06A4(&qword_1EAD6D900, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1E0DF06A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E0DF06EC()
{
  return sub_1E0DF06A4(&qword_1EAD6D908, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1E0DF0734()
{
  return sub_1E0DF06A4(&qword_1EAD6D910, type metadata accessor for Key);
}

uint64_t sub_1E0DF077C()
{
  return sub_1E0DF06A4(&qword_1EAD6D918, type metadata accessor for Key);
}

uint64_t sub_1E0DF07C4()
{
  return sub_1E0DF06A4(&qword_1EAD6D920, type metadata accessor for CLKDeviceProductFamilyType);
}

uint64_t sub_1E0DF080C()
{
  return sub_1E0DF06A4(&qword_1EAD6D928, type metadata accessor for CLKDeviceSizeClass);
}

uint64_t sub_1E0DF0854()
{
  return sub_1E0DF06A4(&qword_1EAD699E0, type metadata accessor for Key);
}

void sub_1E0DF08A0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1E0DF0B2C(255, a3);
    unint64_t v4 = sub_1E0ECD9C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0DF0900(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1E0DF0964()
{
  if (!qword_1EAD6ED80)
  {
    sub_1E0DF09C0();
    unint64_t v0 = sub_1E0ECD0F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6ED80);
    }
  }
}

unint64_t sub_1E0DF09C0()
{
  unint64_t result = qword_1EAD6D9A0;
  if (!qword_1EAD6D9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6D9A0);
  }
  return result;
}

uint64_t sub_1E0DF0A14(uint64_t a1, uint64_t a2)
{
  sub_1E0B5CDC0(0, qword_1EB584EC0, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DF0AA0(uint64_t a1)
{
  sub_1E0DF0900(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E0DF0B2C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1E0DF0B7C()
{
  if (!qword_1EAD6D9D8)
  {
    sub_1E0DF0BE0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6D9D8);
    }
  }
}

unint64_t sub_1E0DF0BE0()
{
  unint64_t result = qword_1EAD6D9E0;
  if (!qword_1EAD6D9E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6D9E0);
  }
  return result;
}

uint64_t sub_1E0DF0C20(uint64_t a1, uint64_t a2)
{
  sub_1E0DF0900(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DF0CB4(uint64_t a1, uint64_t a2)
{
  sub_1E0DF0900(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for HKGraphZoomLevelResolution(uint64_t a1)
{
}

void type metadata accessor for HKTimeScope(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

uint64_t sub_1E0DF0E10(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E0DF0E30(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for HKGraphSeriesDataPointPath(uint64_t a1)
{
}

uint64_t sub_1E0DF0EA8()
{
  return sub_1E0DF06A4(&qword_1EAD6DA38, type metadata accessor for Name);
}

uint64_t sub_1E0DF0EF0()
{
  return sub_1E0DF06A4(&qword_1EAD6DA40, type metadata accessor for Name);
}

uint64_t sub_1E0DF0F38()
{
  return sub_1E0DF06A4(&qword_1EAD6DA48, type metadata accessor for Name);
}

uint64_t sub_1E0DF0F80()
{
  return sub_1E0DF06A4(&qword_1EAD6DA50, type metadata accessor for AttributeName);
}

uint64_t sub_1E0DF0FC8()
{
  return sub_1E0DF06A4(&qword_1EAD6DA58, type metadata accessor for AttributeName);
}

uint64_t sub_1E0DF1010()
{
  return sub_1E0DF06A4(&qword_1EAD6DA60, type metadata accessor for AttributeName);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1E0DF106C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1E0DF108C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for HKGraphSeriesDataBlockPath(uint64_t a1)
{
}

UIColor __swiftcall UIColor.dynamic(light:dark:)(UIColor light, UIColor dark)
{
  uint64_t v4 = (UIColor *)swift_allocObject();
  v4[2].super.isa = light.super.isa;
  v4[3].super.isa = dark.super.isa;
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  v11[4] = sub_1E0DF1240;
  v11[5] = v4;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = sub_1E0DF15E0;
  void v11[3] = &block_descriptor_2;
  uint64_t v6 = _Block_copy(v11);
  uint64_t v7 = light.super.isa;
  unint64_t v8 = dark.super.isa;
  id v9 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  return (UIColor)v9;
}

uint64_t sub_1E0DF1200()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id sub_1E0DF1240(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  char v3 = *(void **)(v1 + 24);
  id v4 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v4 == (id)2) {
    id v5 = v3;
  }
  else {
    id v5 = v2;
  }
  if (v4) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v3;
  }
  return v6;
}

id static UIColor.dynamic(light:dark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  void v8[4] = a3;
  v8[5] = a4;
  id v9 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  void v13[4] = sub_1E0DF16A0;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  v13[2] = sub_1E0DF15E0;
  v13[3] = &block_descriptor_6;
  double v10 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  id v11 = objc_msgSend(v9, sel_initWithDynamicProvider_, v10);
  _Block_release(v10);
  swift_release();
  return v11;
}

id static UIColor.stateOfMindChartVeryUnpleasant.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 0.360784314, 0.239215686, 0.8, 1.0);
}

id static UIColor.stateOfMindChartUnpleasant.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 0.270588235, 0.403921569, 0.901960784, 1.0);
}

id static UIColor.stateOfMindChartSlightlyUnpleasant.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 0.270588235, 0.545098039, 0.901960784, 1.0);
}

id static UIColor.stateOfMindChartNeutral.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 0.321568627, 0.8, 0.768627451, 1.0);
}

id static UIColor.stateOfMindChartSlightlyPleasant.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 0.57254902, 0.850980392, 0.0862745098, 1.0);
}

id static UIColor.stateOfMindChartPleasant.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 1.0, 0.623529412, 0.0, 1.0);
}

id static UIColor.stateOfMindChartVeryPleasant.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  return objc_msgSend(v0, sel_initWithRed_green_blue_alpha_, 1.0, 0.431372549, 0.160784314, 1.0);
}

id sub_1E0DF15E0(uint64_t a1, void *a2)
{
  char v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1E0DF1660()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1E0DF16A0(void *a1)
{
  char v3 = *(uint64_t (**)(void *))(v1 + 16);
  id v4 = *(uint64_t (**)(void *))(v1 + 32);
  id v5 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v5) {
    BOOL v6 = v5 == (id)2;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return v4(a1);
  }
  else {
    return v3(a1);
  }
}

id AudiogramLongitudinalOverlayRoomViewController.__allocating_init(applicationItems:factorDisplayTypes:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6DAF0);
  id v4 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  v7.receiver = v3;
  v7.super_class = v1;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithDisplayDate_applicationItems_factorDisplayTypes_mode_, 0, a1, v4, 3);

  return v5;
}

id AudiogramLongitudinalOverlayRoomViewController.init(applicationItems:factorDisplayTypes:)(void *a1)
{
  sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6DAF0);
  id v3 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for AudiogramLongitudinalOverlayRoomViewController();
  id v4 = objc_msgSendSuper2(&v6, sel_initWithDisplayDate_applicationItems_factorDisplayTypes_mode_, 0, a1, v3, 3);

  return v4;
}

uint64_t type metadata accessor for AudiogramLongitudinalOverlayRoomViewController()
{
  return self;
}

void sub_1E0DF19D8()
{
  id v1 = objc_msgSend(v0, sel_applicationItems);
  id v2 = objc_msgSend(v1, sel_healthStore);

  id v3 = objc_allocWithZone((Class)type metadata accessor for HKInteractiveChartInteractionAnalyticsManager());
  id v4 = sub_1E0DFC7DC(v2);

  id v5 = objc_msgSend(v0, sel_applicationItems);
  id v6 = objc_msgSend(v5, sel_displayTypeController);

  sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6DB78);
  id v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_audiogramSampleType);
  id v8 = objc_msgSend(v6, sel_displayTypeForObjectType_, v7);

  if (v8)
  {
    id v9 = objc_allocWithZone((Class)type metadata accessor for HKInteractiveChartInteractionAnalyticsEvent());
    id v10 = v8;
    id v11 = sub_1E0E7B358(v10);

    sub_1E0DFC25C((uint64_t)v11);
  }
  else
  {
    __break(1u);
  }
}

id AudiogramLongitudinalOverlayRoomViewController.__allocating_init(displayDate:applicationItems:factorDisplayTypes:mode:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v10 = sub_1E0ECB980();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10) != 1)
  {
    uint64_t v12 = (void *)sub_1E0ECB920();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (a3)
  {
    sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6DAF0);
    unint64_t v13 = (void *)sub_1E0ECD320();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v13 = 0;
  }
  id v14 = objc_msgSend(objc_allocWithZone(v5), sel_initWithDisplayDate_applicationItems_factorDisplayTypes_mode_, v12, a2, v13, a4);

  return v14;
}

void AudiogramLongitudinalOverlayRoomViewController.init(displayDate:applicationItems:factorDisplayTypes:mode:)()
{
}

id AudiogramLongitudinalOverlayRoomViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramLongitudinalOverlayRoomViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Bool __swiftcall AudiogramLongitudinalOverlayRoomViewController.infographicSupported(for:healthStore:)(HKDisplayType *a1, HKHealthStore healthStore)
{
  return 1;
}

void __swiftcall AudiogramLongitudinalOverlayRoomViewController.infographicViewController(for:healthStore:)(UIViewController_optional *__return_ptr retstr, HKDisplayType *a2, HKHealthStore healthStore)
{
  id v3 = objc_msgSend(self, sel_hearingLossInfographicViewController);
  id v4 = v3;
}

uint64_t AudiogramLongitudinalOverlayRoomViewController.string(for:timeScope:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  id v6 = objc_msgSend(v3, sel_chartController);
  if (!v6) {
    return 0;
  }
  id v7 = v6;
  id v8 = objc_msgSend(v6, sel_stringForValueRange_timeScope_, a1, a2);

  if (!v8) {
    return 0;
  }
  uint64_t v9 = sub_1E0ECD1D0();

  return v9;
}

id sub_1E0DF22D4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = objc_msgSend(objc_allocWithZone((Class)HKDateRangeDataSource), sel_initWithSourceDelegate_, a2);
  id v8 = objc_msgSend(objc_allocWithZone((Class)HKLevelOverlaySeries), sel_initWithDisplayType_dataSource_options_, a1, v7, a4);
  sub_1E0E8F13C();
  uint64_t v10 = v9;
  objc_msgSend(v8, sel_setYAxis_, v9);

  id v11 = v8;
  sub_1E0E8F25C();
  unint64_t v13 = v12;
  objc_msgSend(v11, sel_setAxisScalingRule_, v12);

  id v14 = objc_allocWithZone((Class)type metadata accessor for AudiogramLongitudinalChartFormatter());
  id v15 = a3;
  id v16 = a1;
  id v17 = AudiogramChartDataFormatter.init(displayType:unitController:)(a1, v15);
  id v18 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartDisplayType), sel_initWithGraphSeries_baseDisplayType_valueFormatter_dataTypeCode_, v11, v16, v17, 145);

  return v18;
}

void sub_1E0DF241C(void *a1)
{
  id v1 = objc_msgSend(a1, sel_displayTypeController);
  id v2 = objc_msgSend(self, sel_audiogramSampleType);
  id v3 = objc_msgSend(v1, sel_displayTypeForObjectType_, v2);

  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_localization);

    id v5 = objc_msgSend(v4, sel_displayName);
    sub_1E0ECD1D0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1E0DF2508(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
    sub_1E0ECD890();
    id v8 = (uint64_t *)(a1 + 32);
    id v31 = self;
    uint64_t v32 = a2;
    uint64_t v33 = a3;
    do
    {
      uint64_t v35 = v4;
      uint64_t v10 = *v8++;
      uint64_t v9 = v10;
      id v11 = a2;
      id v12 = objc_msgSend(a3, sel_applicationItems);
      char v34 = (objc_class *)type metadata accessor for AudiogramLongitudinalHearingLevelClassificationOverlayContext();
      unint64_t v13 = (char *)objc_allocWithZone(v34);
      *(void *)&v13[OBJC_IVAR____TtC8HealthUI61AudiogramLongitudinalHearingLevelClassificationOverlayContext_applicationItems] = v12;
      *(void *)&v13[OBJC_IVAR____TtC8HealthUI61AudiogramLongitudinalHearingLevelClassificationOverlayContext_hearingLevelClassification] = v10;
      *(void *)&v13[OBJC_IVAR____TtC8HealthUI61AudiogramLongitudinalHearingLevelClassificationOverlayContext_baseDisplayType] = v11;
      id v14 = v11;
      id v15 = v13;
      id v16 = v12;
      id v17 = objc_msgSend(v16, sel_unitController);
      id v18 = sub_1E0E69AE4(v10, 0, (uint64_t)v14, v17);

      *(void *)&v15[OBJC_IVAR____TtC8HealthUI61AudiogramLongitudinalHearingLevelClassificationOverlayContext_lastUpdatedItem] = v18;
      double v19 = (objc_class *)type metadata accessor for HearingLevelClassificationDateRangeDataSourceDelegate();
      uint64_t v20 = (char *)objc_allocWithZone(v19);
      uint64_t v21 = OBJC_IVAR____TtC8HealthUIP33_092EC19E3FD96CFEDE476DA46BB43D0653HearingLevelClassificationDateRangeDataSourceDelegate_dBHL;
      id v22 = v16;
      long long v23 = v20;
      *(void *)&v20[v21] = objc_msgSend(v31, sel_decibelHearingLevelUnit);
      *(void *)&v23[OBJC_IVAR____TtC8HealthUIP33_092EC19E3FD96CFEDE476DA46BB43D0653HearingLevelClassificationDateRangeDataSourceDelegate_applicationItems] = v22;
      *(void *)&v23[OBJC_IVAR____TtC8HealthUIP33_092EC19E3FD96CFEDE476DA46BB43D0653HearingLevelClassificationDateRangeDataSourceDelegate_hearingLevelClassification] = v10;
      id v24 = v22;

      v37.receiver = v23;
      v37.super_class = v19;
      id v25 = objc_msgSendSuper2(&v37, sel_init);

      *(void *)&v15[OBJC_IVAR____TtC8HealthUI61AudiogramLongitudinalHearingLevelClassificationOverlayContext_dataSourceDelegate] = v25;
      id v26 = v25;
      id v27 = objc_msgSend(v24, sel_unitController);
      uint64_t v28 = 7;
      if (v10 == 5) {
        uint64_t v28 = 5;
      }
      if (v9 == 1) {
        uint64_t v29 = 6;
      }
      else {
        uint64_t v29 = v28;
      }
      id v30 = sub_1E0DF22D4(v14, (uint64_t)v26, v27, v29);

      a2 = v32;
      *(void *)&v15[OBJC_IVAR____TtC8HealthUI61AudiogramLongitudinalHearingLevelClassificationOverlayContext_overlayDisplayType] = v30;

      v36.receiver = v15;
      v36.super_class = v34;
      objc_msgSendSuper2(&v36, sel_init);

      sub_1E0ECD870();
      sub_1E0ECD8A0();
      a3 = v33;
      sub_1E0ECD8B0();
      sub_1E0ECD880();
      uint64_t v4 = v35 - 1;
    }
    while (v35 != 1);
    return v38;
  }
  return result;
}

void sub_1E0DF27B0()
{
  id v1 = objc_msgSend(v0, sel_applicationItems);
  id v2 = objc_msgSend(v1, sel_displayTypeController);

  id v3 = objc_msgSend(self, sel_audiogramSampleType);
  id v4 = objc_msgSend(v2, sel_displayTypeForObjectType_, v3);

  if (v4)
  {
    id v5 = v0;
    unint64_t v6 = sub_1E0DF2508((uint64_t)&unk_1F3B98B40, v4, v5);

    if (v6 >> 62)
    {
      sub_1E0DF2B50();
      sub_1E0ECD900();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1E0ECD9F0();
      sub_1E0DF2B50();
    }
    swift_bridgeObjectRelease();
    id v7 = objc_allocWithZone((Class)HKOverlayContextSection);
    sub_1E0DF2B50();
    id v8 = (void *)sub_1E0ECD320();
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v7, sel_initWithSectionTitle_overlayContextItems_, 0, v8);

    id v10 = objc_msgSend(v5, sel_buildFactorContextSectionForChartController);
    uint64_t v17 = MEMORY[0x1E4FBC860];
    if (v9)
    {
      id v11 = v9;
      MEMORY[0x1E4E3E9E0]();
      if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1E0ECD350();
      }
      sub_1E0ECD370();
      sub_1E0ECD340();
    }
    if (v10)
    {
      id v12 = v10;
      MEMORY[0x1E4E3E9E0]();
      if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1E0ECD350();
      }
      sub_1E0ECD370();
      sub_1E0ECD340();
    }

    id v13 = objc_allocWithZone((Class)HKOverlayContextSectionContainer);
    sub_1E0DF2C04(0, &qword_1EAD6F4B0);
    id v14 = (void *)sub_1E0ECD320();
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v13, sel_initWithContainerTitle_overlayContextSections_, 0, v14);

    sub_1E0DF2BA8();
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1E0F06EB0;
    *(void *)(v16 + 32) = v15;
    sub_1E0ECD340();
  }
  else
  {
    __break(1u);
  }
}

uint64_t method lookup function for AudiogramLongitudinalOverlayRoomViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudiogramLongitudinalOverlayRoomViewController);
}

uint64_t dispatch thunk of AudiogramLongitudinalOverlayRoomViewController.__allocating_init(applicationItems:factorDisplayTypes:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void sub_1E0DF2AF8()
{
  if (!qword_1EAD6DB60)
  {
    sub_1E0ECB980();
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DB60);
    }
  }
}

unint64_t sub_1E0DF2B50()
{
  unint64_t result = qword_1EAD6DB70;
  if (!qword_1EAD6DB70)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6DB70);
  }
  return result;
}

void sub_1E0DF2BA8()
{
  if (!qword_1EAD69930)
  {
    unint64_t v0 = sub_1E0ECD9C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD69930);
    }
  }
}

uint64_t sub_1E0DF2C04(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.Options.rawValue.getter()
{
  return *(void *)v0;
}

HealthUI::AccessoryCircularSymbolDetailView::Options __swiftcall AccessoryCircularSymbolDetailView.Options.init(rawValue:)(HealthUI::AccessoryCircularSymbolDetailView::Options rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AccessoryCircularSymbolDetailView.Options.useLargerSizing.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static AccessoryCircularSymbolDetailView.Options.hideWidgetBackground.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void *sub_1E0DF2C68@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1E0DF2C74(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1E0DF2C7C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1E0DF2C90@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1E0DF2CA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1E0DF2CB8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1E0DF2CE8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1E0DF2D14@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1E0DF2D38(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1E0DF2D4C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1E0DF2D60(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1E0DF2D74@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1E0DF2D88(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1E0DF2D9C(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1E0DF2DB0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1E0DF2DC4()
{
  return *v0 == 0;
}

uint64_t sub_1E0DF2DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1E0DF2DEC(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.init(symbolName:detailOptions:options:baseAccessibilityIdentifier:customSymbolVoiceOverString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  char v41 = a9;
  uint64_t v42 = a5;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v14 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v43 = sub_1E0ECB640();
  uint64_t v16 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43, v17);
  double v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *a4;
  int64_t v20 = *(void *)(a3 + 16);
  if (v20)
  {
    uint64_t v35 = a6;
    uint64_t v36 = a7;
    uint64_t v37 = a8;
    uint64_t v44 = MEMORY[0x1E4FBC860];
    sub_1E0DEE9A8(0, v20, 0);
    uint64_t v21 = v44;
    v34[1] = a3;
    uint64_t v22 = a3 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_1E0ECB6E0();
      sub_1E0ECB650();
      swift_bridgeObjectRelease();
      uint64_t v44 = v21;
      unint64_t v24 = *(void *)(v21 + 16);
      unint64_t v23 = *(void *)(v21 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1E0DEE9A8(v23 > 1, v24 + 1, 1);
        uint64_t v21 = v44;
      }
      v22 += 16;
      *(void *)(v21 + 16) = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v21+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v24, v19, v43);
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    a7 = v36;
    a8 = v37;
    a6 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  id v25 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  id v26 = v41;
  id v27 = (void *)((char *)v41 + v25[10]);
  uint64_t *v27 = swift_getKeyPath();
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = (void *)((char *)v26 + v25[11]);
  uint64_t *v29 = swift_getKeyPath();
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], v28);
  swift_storeEnumTagMultiPayload();
  id v30 = (char *)v26 + v25[12];
  uint64_t result = swift_getKeyPath();
  *(void *)id v30 = result;
  v30[8] = 0;
  uint64_t v32 = v40;
  *id v26 = v39;
  v26[1] = v32;
  void v26[2] = 0;
  v26[3] = v21;
  uint64_t v33 = v42;
  v26[4] = v38;
  v26[5] = v33;
  v26[6] = a6;
  v26[7] = a7;
  v26[8] = a8;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.init(symbolName:symbol:attributedDetailOptions:options:baseAccessibilityIdentifier:customSymbolVoiceOverString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v15 = *a5;
  uint64_t v16 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  uint64_t v17 = (void *)((char *)a9 + v16[10]);
  uint64_t *v17 = swift_getKeyPath();
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  double v19 = (void *)((char *)a9 + v16[11]);
  uint64_t *v19 = swift_getKeyPath();
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], v18);
  swift_storeEnumTagMultiPayload();
  int64_t v20 = (char *)a9 + v16[12];
  uint64_t result = swift_getKeyPath();
  *(void *)int64_t v20 = result;
  v20[8] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = v15;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.init(symbol:detailOptions:options:baseAccessibilityIdentifier:customSymbolVoiceOverString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v44 = a8;
  uint64_t v45 = a7;
  uint64_t v14 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v16 = sub_1E0ECB640();
  uint64_t v17 = a2;
  uint64_t v46 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *a3;
  int64_t v23 = *(void *)(v20 + 16);
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if (v23)
  {
    uint64_t v40 = a4;
    uint64_t v41 = a5;
    uint64_t v42 = a6;
    uint64_t v47 = MEMORY[0x1E4FBC860];
    uint64_t v39 = a1;
    uint64_t v25 = v20;
    swift_retain();
    sub_1E0DEE9A8(0, v23, 0);
    uint64_t v24 = v47;
    uint64_t v38 = v25;
    uint64_t v26 = v25 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_1E0ECB6E0();
      sub_1E0ECB650();
      swift_bridgeObjectRelease();
      uint64_t v47 = v24;
      unint64_t v28 = *(void *)(v24 + 16);
      unint64_t v27 = *(void *)(v24 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_1E0DEE9A8(v27 > 1, v28 + 1, 1);
        uint64_t v24 = v47;
      }
      v26 += 16;
      *(void *)(v24 + 16) = v28 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v24+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v28, v22, v46);
      --v23;
    }
    while (v23);
    uint64_t v29 = v39;
    swift_release();
    uint64_t v30 = v45;
    a5 = v41;
    a6 = v42;
    a4 = v40;
  }
  else
  {
    uint64_t v29 = a1;
    uint64_t v30 = v45;
  }
  swift_bridgeObjectRelease();
  id v31 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  uint64_t v32 = v44;
  uint64_t v33 = (void *)((char *)v44 + v31[10]);
  uint64_t *v33 = swift_getKeyPath();
  char v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = (void *)((char *)v32 + v31[11]);
  uint64_t *v35 = swift_getKeyPath();
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], v34);
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = (char *)v32 + v31[12];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v36 = result;
  v36[8] = 0;
  *uint64_t v32 = 0;
  v32[1] = 0;
  void v32[2] = v29;
  void v32[3] = v24;
  v32[4] = v43;
  v32[5] = a4;
  v32[6] = a5;
  v32[7] = a6;
  v32[8] = v30;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_1E0ECCE20();
  a1[1] = v3;
  sub_1E0DF5BA8();
  return sub_1E0DF3628(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

uint64_t sub_1E0DF3628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  sub_1E0DF5DA4();
  MEMORY[0x1F4188790](v3 - 8, v4);
  unint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF68C4(0, &qword_1EB585010, (uint64_t (*)(uint64_t))sub_1E0DF5DA4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  uint64_t v52 = v7;
  MEMORY[0x1F4188790](v7, v8);
  id v10 = (char *)&v51 - v9;
  sub_1E0DF5CE0();
  uint64_t v53 = v11;
  uint64_t v13 = MEMORY[0x1F4188790](v11, v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v16);
  uint64_t v18 = (char *)&v51 - v17;
  sub_1E0DF5B40(0, &qword_1EB585190, MEMORY[0x1E4F46A50], MEMORY[0x1E4FBB718]);
  uint64_t v21 = MEMORY[0x1F4188790](v19 - 8, v20);
  int64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v24);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = a1 + *(int *)(type metadata accessor for AccessoryCircularSymbolDetailView() + 48);
  uint64_t v28 = *(void *)v27;
  char v29 = *(unsigned char *)(v27 + 8);
  sub_1E0DF7630(*(void *)v27, v29);
  char v30 = sub_1E0E2CA50(v28, v29);
  sub_1E0DF77E0(v28, v29);
  if ((v30 & 1) != 0 || (*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    uint64_t v32 = sub_1E0ECCF50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v26, 1, 1, v32);
  }
  else
  {
    sub_1E0ECCF40();
    uint64_t v31 = sub_1E0ECCF50();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v26, 0, 1, v31);
  }
  *(void *)unint64_t v6 = sub_1E0ECC620();
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  sub_1E0DF87E0();
  sub_1E0DF3B08((void *)a1, (uint64_t)&v6[*(int *)(v33 + 44)]);
  sub_1E0DF5780();
  char v34 = sub_1E0ECC8F0();
  sub_1E0ECC270();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  sub_1E0DF9220((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))sub_1E0DF5DA4);
  uint64_t v43 = &v10[*(int *)(v52 + 36)];
  char *v43 = v34;
  *((void *)v43 + 1) = v36;
  *((void *)v43 + 2) = v38;
  *((void *)v43 + 3) = v40;
  *((void *)v43 + 4) = v42;
  v43[40] = 0;
  sub_1E0DF9288((uint64_t)v6, (uint64_t (*)(void))sub_1E0DF5DA4);
  uint64_t KeyPath = swift_getKeyPath();
  sub_1E0DF8920((uint64_t)v10, (uint64_t)v15);
  uint64_t v45 = (uint64_t *)&v15[*(int *)(v53 + 36)];
  uint64_t *v45 = KeyPath;
  v45[1] = 0x3FE3333333333333;
  sub_1E0DF89BC((uint64_t)v10);
  sub_1E0DF8BA8((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(void))sub_1E0DF5CE0);
  uint64_t v46 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46A50];
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1E0DF9154((uint64_t)v26, (uint64_t)v23, &qword_1EB585190, MEMORY[0x1E4F46A50], MEMORY[0x1E4FBB718]);
  sub_1E0DF9220((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))sub_1E0DF5CE0);
  uint64_t v48 = v54;
  sub_1E0DF9154((uint64_t)v23, v54, &qword_1EB585190, v46, v47);
  sub_1E0DF5C40();
  sub_1E0DF9220((uint64_t)v15, v48 + *(int *)(v49 + 48), (uint64_t (*)(void))sub_1E0DF5CE0);
  sub_1E0DF9288((uint64_t)v18, (uint64_t (*)(void))sub_1E0DF5CE0);
  sub_1E0DF91C4((uint64_t)v26, &qword_1EB585190, v46, v47);
  sub_1E0DF9288((uint64_t)v15, (uint64_t (*)(void))sub_1E0DF5CE0);
  return sub_1E0DF91C4((uint64_t)v23, &qword_1EB585190, v46, v47);
}

uint64_t sub_1E0DF3B08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v152 = a2;
  uint64_t v3 = type metadata accessor for AccessoryCircularSymbolDetailView();
  uint64_t v124 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v125 = v5;
  uint64_t v126 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF6A68();
  uint64_t v150 = v6;
  uint64_t v148 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  v127 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF5B40(0, &qword_1EB584F88, (uint64_t (*)(uint64_t))sub_1E0DF6A68, MEMORY[0x1E4FBB718]);
  uint64_t v11 = MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v151 = (uint64_t)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v149 = (uint64_t)&v116 - v14;
  sub_1E0DF9064(0, &qword_1EB585050, (uint64_t (*)(uint64_t))sub_1E0DF5F68, (uint64_t (*)(uint64_t))sub_1E0DF6014, MEMORY[0x1E4F3D748]);
  uint64_t v145 = v15;
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v146 = (uint64_t)&v116 - v17;
  uint64_t v120 = sub_1E0ECC850();
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x1F4188790](v120, v18);
  v117 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF60F8(0, &qword_1EB585128, (void (*)(uint64_t))sub_1E0DF6014, (void (*)(void))sub_1E0DF6930);
  uint64_t v122 = v20;
  uint64_t v121 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v21);
  v118 = (char *)&v116 - v22;
  sub_1E0DF5F68();
  uint64_t v144 = v23;
  uint64_t v25 = MEMORY[0x1F4188790](v23, v24);
  v116 = (char *)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v27);
  uint64_t v123 = (uint64_t)&v116 - v28;
  uint64_t v138 = sub_1E0ECCF80();
  uint64_t v137 = *(void *)(v138 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v138, v29);
  v136 = (char *)&v116 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30, v32);
  v154 = (char *)&v116 - v33;
  uint64_t v34 = sub_1E0ECCF90();
  uint64_t v129 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34, v35);
  uint64_t v37 = (char *)&v116 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF6248(0);
  uint64_t v128 = v38;
  MEMORY[0x1F4188790](v38, v39);
  uint64_t v41 = (char *)&v116 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF60F8(0, &qword_1EB585118, sub_1E0DF6248, (void (*)(void))sub_1E0DF64B4);
  uint64_t v135 = v42;
  uint64_t v134 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42, v43);
  v153 = (char *)&v116 - v44;
  sub_1E0DF6184();
  uint64_t v133 = v45;
  MEMORY[0x1F4188790](v45, v46);
  uint64_t v48 = (char *)&v116 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF60F8(0, &qword_1EB585110, (void (*)(uint64_t))sub_1E0DF6184, (void (*)(void))sub_1E0DF67AC);
  uint64_t v132 = v49;
  uint64_t v131 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v50);
  v130 = (char *)&v116 - v51;
  sub_1E0DF6014();
  uint64_t v139 = v52;
  MEMORY[0x1F4188790](v52, v53);
  v140 = (char *)&v116 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF5F20(0);
  uint64_t v142 = v55;
  MEMORY[0x1F4188790](v55, v56);
  uint64_t v58 = (char *)&v116 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF5ED8(0);
  uint64_t v61 = MEMORY[0x1F4188790](v59 - 8, v60);
  uint64_t v147 = (uint64_t)&v116 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = MEMORY[0x1F4188790](v61, v63);
  v141 = (char *)&v116 - v65;
  MEMORY[0x1F4188790](v64, v66);
  uint64_t v155 = (uint64_t)&v116 - v67;
  uint64_t v68 = a1[2];
  uint64_t v69 = a1;
  v143 = v58;
  if (v68)
  {
    uint64_t v70 = v68;
  }
  else
  {
    if (a1[1])
    {
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_1E0ECCCA0();
    }
    else
    {
      uint64_t v71 = sub_1E0ECCCE0();
    }
    uint64_t v70 = v71;
  }
  swift_retain();
  sub_1E0E2C75C((uint64_t)v37);
  uint64_t v72 = v69[4];
  if (*(void *)(v69[3] + 16)) {
    uint64_t v73 = sub_1E0ECCA10();
  }
  else {
    uint64_t v73 = sub_1E0ECC980();
  }
  uint64_t v74 = v139;
  sub_1E0DF4C00(v72 & 1, v73, v70, (uint64_t)v41);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v37, v34);
  sub_1E0DF64B4();
  sub_1E0ECCB30();
  sub_1E0DF9288((uint64_t)v41, (uint64_t (*)(void))sub_1E0DF6248);
  uint64_t v75 = v69;
  sub_1E0E2C474((uint64_t)v154);
  uint64_t v76 = v136;
  sub_1E0ECCF70();
  char v77 = sub_1E0ECCF60();
  uint64_t v78 = *(void (**)(char *, uint64_t))(v137 + 8);
  uint64_t v79 = v138;
  v78(v76, v138);
  uint64_t v80 = v74;
  if (v77) {
    uint64_t v81 = sub_1E0ECCC50();
  }
  else {
    uint64_t v81 = sub_1E0ECCC10();
  }
  uint64_t v82 = v81;
  uint64_t v83 = (uint64_t)v140;
  v78(v154, v79);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v85 = v134;
  uint64_t v86 = v153;
  uint64_t v87 = v135;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v48, v153, v135);
  char v88 = (uint64_t *)&v48[*(int *)(v133 + 36)];
  *char v88 = KeyPath;
  v88[1] = v82;
  (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
  sub_1E0DF67AC();
  uint64_t v89 = v130;
  sub_1E0ECCB00();
  sub_1E0DF9288((uint64_t)v48, (uint64_t (*)(void))sub_1E0DF6184);
  uint64_t v90 = v131;
  uint64_t v91 = v132;
  (*(void (**)(uint64_t, char *, uint64_t))(v131 + 16))(v83, v89, v132);
  *(void *)(v83 + *(int *)(v80 + 36)) = 0x3FF0000000000000;
  (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v91);
  if (v75[8])
  {
    swift_bridgeObjectRetain();
    uint64_t v92 = v117;
    sub_1E0ECC820();
    unint64_t v93 = sub_1E0DF6930();
    uint64_t v94 = v118;
    sub_1E0ECCB80();
    (*(void (**)(char *, uint64_t))(v119 + 8))(v92, v120);
    uint64_t v156 = v80;
    unint64_t v157 = v93;
    swift_getOpaqueTypeConformance2();
    uint64_t v95 = (uint64_t)v116;
    uint64_t v96 = v122;
    sub_1E0ECCB40();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v94, v96);
    uint64_t v97 = v123;
    sub_1E0DF8BA8(v95, v123, (uint64_t (*)(void))sub_1E0DF5F68);
    sub_1E0DF9220(v97, v146, (uint64_t (*)(void))sub_1E0DF5F68);
    swift_storeEnumTagMultiPayload();
    sub_1E0DF8A58();
    uint64_t v98 = (uint64_t)v143;
    sub_1E0ECC740();
    sub_1E0DF9288(v97, (uint64_t (*)(void))sub_1E0DF5F68);
  }
  else
  {
    sub_1E0DF9220(v83, v146, (uint64_t (*)(void))sub_1E0DF6014);
    swift_storeEnumTagMultiPayload();
    sub_1E0DF8A58();
    sub_1E0DF6930();
    uint64_t v98 = (uint64_t)v143;
    sub_1E0ECC740();
  }
  sub_1E0DF9288(v83, (uint64_t (*)(void))sub_1E0DF6014);
  unint64_t v99 = v75[6];
  uint64_t v156 = v75[5];
  unint64_t v157 = v99;
  swift_bridgeObjectRetain();
  sub_1E0ECD250();
  sub_1E0DF8B30();
  uint64_t v100 = (uint64_t)v141;
  sub_1E0ECCBA0();
  swift_bridgeObjectRelease();
  sub_1E0DF9288(v98, (uint64_t (*)(void))sub_1E0DF5F20);
  sub_1E0DF8BA8(v100, v155, (uint64_t (*)(void))sub_1E0DF5ED8);
  uint64_t v101 = v75[3];
  if (*(void *)(v101 + 16))
  {
    char v102 = sub_1E0ECC8B0();
    uint64_t v103 = (uint64_t)v127;
    unsigned char *v127 = v102;
    sub_1E0DF8C10();
    uint64_t v156 = v101;
    swift_getKeyPath();
    uint64_t v104 = v126;
    sub_1E0DF9220((uint64_t)v75, v126, (uint64_t (*)(void))type metadata accessor for AccessoryCircularSymbolDetailView);
    unint64_t v105 = (*(unsigned __int8 *)(v124 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
    uint64_t v106 = swift_allocObject();
    sub_1E0DF8BA8(v104, v106 + v105, (uint64_t (*)(void))type metadata accessor for AccessoryCircularSymbolDetailView);
    sub_1E0DF5B40(0, &qword_1EB5851A0, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB320]);
    sub_1E0DF6BD0(0);
    sub_1E0DF6DA0();
    sub_1E0DF70FC(&qword_1EB584F68, MEMORY[0x1E4F273A8]);
    sub_1E0DF6E98();
    swift_bridgeObjectRetain();
    sub_1E0ECCDC0();
    uint64_t v107 = v149;
    sub_1E0DF8BA8(v103, v149, (uint64_t (*)(void))sub_1E0DF6A68);
    uint64_t v108 = 0;
  }
  else
  {
    uint64_t v108 = 1;
    uint64_t v107 = v149;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56))(v107, v108, 1, v150);
  uint64_t v109 = v155;
  uint64_t v110 = v147;
  sub_1E0DF9220(v155, v147, (uint64_t (*)(void))sub_1E0DF5ED8);
  uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  uint64_t v112 = v151;
  sub_1E0DF9154(v107, v151, &qword_1EB584F88, (uint64_t (*)(uint64_t))sub_1E0DF6A68, MEMORY[0x1E4FBB718]);
  uint64_t v113 = v152;
  sub_1E0DF9220(v110, v152, (uint64_t (*)(void))sub_1E0DF5ED8);
  sub_1E0DF5E38();
  sub_1E0DF9154(v112, v113 + *(int *)(v114 + 48), &qword_1EB584F88, (uint64_t (*)(uint64_t))sub_1E0DF6A68, v111);
  sub_1E0DF91C4(v107, &qword_1EB584F88, (uint64_t (*)(uint64_t))sub_1E0DF6A68, v111);
  sub_1E0DF9288(v109, (uint64_t (*)(void))sub_1E0DF5ED8);
  sub_1E0DF91C4(v112, &qword_1EB584F88, (uint64_t (*)(uint64_t))sub_1E0DF6A68, v111);
  return sub_1E0DF9288(v110, (uint64_t (*)(void))sub_1E0DF5ED8);
}

uint64_t sub_1E0DF4C00@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v52 = a3;
  uint64_t v50 = a2;
  LODWORD(v48) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F3D748];
  sub_1E0DF9064(0, &qword_1EB585060, (uint64_t (*)(uint64_t))sub_1E0DF6290, (uint64_t (*)(uint64_t))sub_1E0DF63D0, MEMORY[0x1E4F3D748]);
  uint64_t v53 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v51 = (uint64_t *)((char *)&v44 - v8);
  sub_1E0DF9064(0, &qword_1EB585058, (uint64_t (*)(uint64_t))sub_1E0DF62D8, (uint64_t (*)(uint64_t))sub_1E0DF6338, v5);
  uint64_t v46 = v9;
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v44 - v11;
  sub_1E0DF5B40(0, &qword_1EB5850F0, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v17 = (uint64_t *)((char *)&v44 - v16);
  uint64_t v18 = sub_1E0ECCCC0();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DF6338();
  uint64_t v24 = v23;
  uint64_t v26 = MEMORY[0x1F4188790](v23, v25);
  uint64_t v28 = (uint64_t *)((char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v26, v29);
  uint64_t v45 = (uint64_t)&v44 - v30;
  sub_1E0DF6290(0);
  uint64_t v49 = v31;
  MEMORY[0x1F4188790](v31, v32);
  uint64_t v47 = (char *)&v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = KeyPath;
  if (v48)
  {
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, *MEMORY[0x1E4F3EC48], v18);
    uint64_t v36 = swift_getKeyPath();
    uint64_t v48 = a4;
    uint64_t v37 = v36;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))((char *)v17 + *(int *)(v14 + 28), v22, v18);
    uint64_t *v17 = v37;
    uint64_t v44 = v24;
    uint64_t v38 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3EC78];
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3DF18];
    sub_1E0DF9154((uint64_t)v17, (uint64_t)v28 + *(int *)(v24 + 36), &qword_1EB5850F0, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
    *uint64_t v28 = v52;
    v28[1] = v35;
    void v28[2] = v50;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1E0DF91C4((uint64_t)v17, &qword_1EB5850F0, v38, v39);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    swift_release();
    uint64_t v40 = v45;
    sub_1E0DF8BA8((uint64_t)v28, v45, (uint64_t (*)(void))sub_1E0DF6338);
    sub_1E0DF9220(v40, (uint64_t)v12, (uint64_t (*)(void))sub_1E0DF6338);
    swift_storeEnumTagMultiPayload();
    sub_1E0DF62D8();
    sub_1E0DF65A4();
    sub_1E0DF6614();
    uint64_t v41 = (uint64_t)v47;
    sub_1E0ECC740();
    sub_1E0DF9288(v40, (uint64_t (*)(void))sub_1E0DF6338);
    sub_1E0DF9220(v41, (uint64_t)v51, (uint64_t (*)(void))sub_1E0DF6290);
    swift_storeEnumTagMultiPayload();
    sub_1E0DF63D0();
    sub_1E0DF652C();
    sub_1E0DF668C();
    sub_1E0ECC740();
    return sub_1E0DF9288(v41, (uint64_t (*)(void))sub_1E0DF6290);
  }
  else
  {
    uint64_t v43 = v51;
    void *v51 = v52;
    v43[1] = KeyPath;
    v43[2] = v50;
    swift_storeEnumTagMultiPayload();
    sub_1E0DF63D0();
    sub_1E0DF652C();
    sub_1E0DF668C();
    swift_retain();
    swift_retain();
    return sub_1E0ECC740();
  }
}

uint64_t sub_1E0DF51CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v76 = a2;
  uint64_t v4 = sub_1E0ECCF80();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  uint64_t v6 = MEMORY[0x1F4188790](v4, v5);
  uint64_t v8 = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v65 = &v63[-v10];
  uint64_t v11 = sub_1E0ECB640();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = &v63[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0DF6D24();
  uint64_t v70 = *(void *)(v16 - 8);
  uint64_t v71 = v16;
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v69 = &v63[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0DF6CA4();
  uint64_t v68 = v19;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = &v63[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0DF6C18();
  uint64_t v74 = v23;
  MEMORY[0x1F4188790](v23, v24);
  uint64_t v73 = &v63[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0DF6BD0(0);
  MEMORY[0x1F4188790](v26 - 8, v27);
  uint64_t v72 = &v63[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  uint64_t v29 = sub_1E0ECCAE0();
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  sub_1E0ECC970();
  uint64_t v34 = sub_1E0ECCAB0();
  uint64_t v36 = v35;
  int v64 = v37;
  swift_release();
  uint64_t v38 = v31;
  char v39 = v33;
  uint64_t v41 = (uint64_t)v65;
  uint64_t v40 = v66;
  sub_1E0DF8F74(v29, v38, v39);
  uint64_t v42 = v67;
  swift_bridgeObjectRelease();
  type metadata accessor for AccessoryCircularSymbolDetailView();
  sub_1E0E2C474(v41);
  sub_1E0ECCF70();
  LOBYTE(v29) = sub_1E0ECCF60();
  uint64_t v43 = *(void (**)(unsigned char *, uint64_t))(v40 + 8);
  v43(v8, v42);
  if (v29) {
    sub_1E0ECCC50();
  }
  else {
    sub_1E0ECCC60();
  }
  char v44 = v64 & 1;
  v43((unsigned char *)v41, v42);
  uint64_t v45 = sub_1E0ECCA90();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  char v51 = v50 & 1;
  sub_1E0DF8F74(v34, v36, v44);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v77 = v45;
  uint64_t v78 = v47;
  char v79 = v51;
  uint64_t v80 = v49;
  uint64_t v52 = v69;
  sub_1E0ECCB70();
  sub_1E0DF8F74(v45, v47, v51);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = v70;
  uint64_t v54 = v71;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v70 + 16))(v22, v52, v71);
  uint64_t v56 = &v22[*(int *)(v68 + 36)];
  *(void *)uint64_t v56 = KeyPath;
  *((void *)v56 + 1) = 2;
  v56[16] = 0;
  (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v52, v54);
  uint64_t v57 = swift_getKeyPath();
  uint64_t v58 = v73;
  sub_1E0DF9220((uint64_t)v22, (uint64_t)v73, (uint64_t (*)(void))sub_1E0DF6CA4);
  uint64_t v59 = &v58[*(int *)(v74 + 36)];
  *(void *)uint64_t v59 = v57;
  v59[8] = 1;
  sub_1E0DF9288((uint64_t)v22, (uint64_t (*)(void))sub_1E0DF6CA4);
  uint64_t v60 = *(void *)(v76 + 48);
  uint64_t v77 = *(void *)(v76 + 40);
  uint64_t v78 = v60;
  swift_bridgeObjectRetain();
  sub_1E0ECD250();
  sub_1E0DF6F40();
  uint64_t v61 = (uint64_t)v72;
  sub_1E0ECCBA0();
  swift_bridgeObjectRelease();
  sub_1E0DF9288((uint64_t)v58, (uint64_t (*)(void))sub_1E0DF6C18);
  return sub_1E0DF8BA8(v61, v75, (uint64_t (*)(void))sub_1E0DF6BD0);
}

void sub_1E0DF5780()
{
  uint64_t v1 = type metadata accessor for AccessoryCircularSymbolDetailView();
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 32);
  sub_1E0DF9220(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AccessoryCircularSymbolDetailView);
  if (v5)
  {
    uint64_t v6 = *((void *)v4 + 4);
    sub_1E0DF9288((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AccessoryCircularSymbolDetailView);
    if ((v6 & 2) != 0) {
      return;
    }
  }
  else
  {
    sub_1E0DF9288((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AccessoryCircularSymbolDetailView);
  }
  id v7 = objc_msgSend(self, sel_sharedBehavior);
  if (v7)
  {
    uint64_t v8 = v7;
    objc_msgSend(v7, sel_isAppleWatch);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1E0DF58B4()
{
  return sub_1E0ECCB50();
}

uint64_t sub_1E0DF58D0@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_1E0ECCE20();
  a1[1] = v3;
  sub_1E0DF5BA8();
  return sub_1E0DF3628(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

uint64_t sub_1E0DF5910()
{
  return sub_1E0ECC570();
}

uint64_t sub_1E0DF5934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1E0DF8F84(a1, a2, a3, a4, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F46968]);
}

uint64_t sub_1E0DF5960()
{
  sub_1E0ECC550();
  sub_1E0DF70FC(&qword_1EAD6DBB8, MEMORY[0x1E4F468D8]);
  sub_1E0ECC5E0();
  return v1;
}

uint64_t sub_1E0DF59DC@<X0>(unsigned char *a1@<X8>)
{
  sub_1E0ECC550();
  sub_1E0DF70FC(&qword_1EAD6DBB8, MEMORY[0x1E4F468D8]);
  uint64_t result = sub_1E0ECC5E0();
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for AccessoryCircularSymbolDetailView()
{
  uint64_t result = qword_1EB5851C0;
  if (!qword_1EB5851C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1E0DF5AB8()
{
  return sub_1E0ECC570();
}

uint64_t sub_1E0DF5ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1E0DF8F84(a1, a2, a3, a4, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F46968]);
}

uint64_t sub_1E0DF5B1C()
{
  return sub_1E0ECC560();
}

void sub_1E0DF5B40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1E0DF5BA8()
{
  if (!qword_1EB584F98)
  {
    sub_1E0DF5B40(255, &qword_1EB585168, (uint64_t (*)(uint64_t))sub_1E0DF5C40, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1E0ECC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584F98);
    }
  }
}

void sub_1E0DF5C40()
{
  if (!qword_1EB585198)
  {
    sub_1E0DF5B40(255, &qword_1EB585190, MEMORY[0x1E4F46A50], MEMORY[0x1E4FBB718]);
    sub_1E0DF5CE0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB585198);
    }
  }
}

void sub_1E0DF5CE0()
{
  if (!qword_1EB585038)
  {
    sub_1E0DF68C4(255, &qword_1EB585010, (uint64_t (*)(uint64_t))sub_1E0DF5DA4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1E0DF71CC(255, &qword_1EB5850A8, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585038);
    }
  }
}

void sub_1E0DF5DA4()
{
  if (!qword_1EB585138)
  {
    sub_1E0DF5B40(255, &qword_1EB585178, (uint64_t (*)(uint64_t))sub_1E0DF5E38, MEMORY[0x1E4F3F108]);
    sub_1E0DF7144();
    unint64_t v0 = sub_1E0ECCD90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585138);
    }
  }
}

void sub_1E0DF5E38()
{
  if (!qword_1EB584FA8)
  {
    sub_1E0DF5ED8(255);
    sub_1E0DF5B40(255, &qword_1EB584F88, (uint64_t (*)(uint64_t))sub_1E0DF6A68, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB584FA8);
    }
  }
}

void sub_1E0DF5ED8(uint64_t a1)
{
}

void sub_1E0DF5F20(uint64_t a1)
{
}

void sub_1E0DF5F68()
{
  if (!qword_1EB584FE8)
  {
    sub_1E0DF60F8(255, &qword_1EB585128, (void (*)(uint64_t))sub_1E0DF6014, (void (*)(void))sub_1E0DF6930);
    sub_1E0ECC890();
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584FE8);
    }
  }
}

void sub_1E0DF6014()
{
  if (!qword_1EB584FB8)
  {
    sub_1E0DF60F8(255, &qword_1EB585110, (void (*)(uint64_t))sub_1E0DF6184, (void (*)(void))sub_1E0DF67AC);
    sub_1E0DF68C4(255, &qword_1EB5850A0, MEMORY[0x1E4F3D9F8], MEMORY[0x1E4F3D9F0], MEMORY[0x1E4F3D990]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584FB8);
    }
  }
}

void sub_1E0DF60F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_1E0DF6184()
{
  if (!qword_1EB584FC8)
  {
    sub_1E0DF60F8(255, &qword_1EB585118, sub_1E0DF6248, (void (*)(void))sub_1E0DF64B4);
    sub_1E0DF6448(255, &qword_1EB5850E0, &qword_1EB585130, MEMORY[0x1E4F3EB98]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584FC8);
    }
  }
}

void sub_1E0DF6248(uint64_t a1)
{
}

void sub_1E0DF6290(uint64_t a1)
{
}

void sub_1E0DF62D8()
{
  if (!qword_1EB584FF8)
  {
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584FF8);
    }
  }
}

void sub_1E0DF6338()
{
  if (!qword_1EB585030)
  {
    sub_1E0DF63D0();
    sub_1E0DF5B40(255, &qword_1EB5850F0, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585030);
    }
  }
}

void sub_1E0DF63D0()
{
  if (!qword_1EB585008)
  {
    sub_1E0DF6448(255, &qword_1EB5850D0, &qword_1EB585108, MEMORY[0x1E4F3E1B0]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585008);
    }
  }
}

void sub_1E0DF6448(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_1E0DF71CC(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = sub_1E0ECC880();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1E0DF64B4()
{
  unint64_t result = qword_1EB585088;
  if (!qword_1EB585088)
  {
    sub_1E0DF6248(255);
    sub_1E0DF652C();
    sub_1E0DF668C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585088);
  }
  return result;
}

unint64_t sub_1E0DF652C()
{
  unint64_t result = qword_1EB585078;
  if (!qword_1EB585078)
  {
    sub_1E0DF6290(255);
    sub_1E0DF65A4();
    sub_1E0DF6614();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585078);
  }
  return result;
}

unint64_t sub_1E0DF65A4()
{
  unint64_t result = qword_1EB584FF0;
  if (!qword_1EB584FF0)
  {
    sub_1E0DF62D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB584FF0);
  }
  return result;
}

unint64_t sub_1E0DF6614()
{
  unint64_t result = qword_1EB585028;
  if (!qword_1EB585028)
  {
    sub_1E0DF6338();
    sub_1E0DF668C();
    sub_1E0DF6724();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585028);
  }
  return result;
}

unint64_t sub_1E0DF668C()
{
  unint64_t result = qword_1EB585000;
  if (!qword_1EB585000)
  {
    sub_1E0DF63D0();
    sub_1E0DF6874((unint64_t *)&unk_1EB5850C0, &qword_1EB5850D0, &qword_1EB585108, MEMORY[0x1E4F3E1B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585000);
  }
  return result;
}

unint64_t sub_1E0DF6724()
{
  unint64_t result = qword_1EB5850E8;
  if (!qword_1EB5850E8)
  {
    sub_1E0DF5B40(255, &qword_1EB5850F0, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5850E8);
  }
  return result;
}

unint64_t sub_1E0DF67AC()
{
  unint64_t result = qword_1EB584FC0;
  if (!qword_1EB584FC0)
  {
    sub_1E0DF6184();
    sub_1E0DF6248(255);
    sub_1E0DF64B4();
    swift_getOpaqueTypeConformance2();
    sub_1E0DF6874(&qword_1EB5850D8, &qword_1EB5850E0, &qword_1EB585130, MEMORY[0x1E4F3EB98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB584FC0);
  }
  return result;
}

uint64_t sub_1E0DF6874(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1E0DF6448(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1E0DF68C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1E0DF6930()
{
  unint64_t result = qword_1EB584FB0;
  if (!qword_1EB584FB0)
  {
    sub_1E0DF6014();
    sub_1E0DF6184();
    sub_1E0DF67AC();
    swift_getOpaqueTypeConformance2();
    sub_1E0DF69D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB584FB0);
  }
  return result;
}

unint64_t sub_1E0DF69D8()
{
  unint64_t result = qword_1EB585098;
  if (!qword_1EB585098)
  {
    sub_1E0DF68C4(255, &qword_1EB5850A0, MEMORY[0x1E4F3D9F8], MEMORY[0x1E4F3D9F0], MEMORY[0x1E4F3D990]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585098);
  }
  return result;
}

void sub_1E0DF6A68()
{
  if (!qword_1EB584F80)
  {
    sub_1E0DF6ACC();
    sub_1E0DF6E28();
    unint64_t v0 = sub_1E0ECC310();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584F80);
    }
  }
}

void sub_1E0DF6ACC()
{
  if (!qword_1EB585158)
  {
    sub_1E0DF5B40(255, &qword_1EB5851A0, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB320]);
    sub_1E0ECB640();
    sub_1E0DF6BD0(255);
    sub_1E0DF6DA0();
    sub_1E0DF70FC(&qword_1EB584F68, MEMORY[0x1E4F273A8]);
    unint64_t v0 = sub_1E0ECCDD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585158);
    }
  }
}

void sub_1E0DF6BD0(uint64_t a1)
{
}

void sub_1E0DF6C18()
{
  if (!qword_1EB585020)
  {
    sub_1E0DF6CA4();
    sub_1E0DF71CC(255, &qword_1EB5850B8, MEMORY[0x1E4F3C870], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585020);
    }
  }
}

void sub_1E0DF6CA4()
{
  if (!qword_1EB584FD8)
  {
    sub_1E0DF6D24();
    sub_1E0DF6448(255, (unint64_t *)&qword_1EB585100, &qword_1EB5851B8, MEMORY[0x1E4FBB550]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584FD8);
    }
  }
}

void sub_1E0DF6D24()
{
  if (!qword_1EB585120)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EB585120);
    }
  }
}

unint64_t sub_1E0DF6DA0()
{
  unint64_t result = qword_1EB5851A8;
  if (!qword_1EB5851A8)
  {
    sub_1E0DF5B40(255, &qword_1EB5851A0, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5851A8);
  }
  return result;
}

unint64_t sub_1E0DF6E28()
{
  unint64_t result = qword_1EB585150;
  if (!qword_1EB585150)
  {
    sub_1E0DF6ACC();
    sub_1E0DF6E98();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585150);
  }
  return result;
}

unint64_t sub_1E0DF6E98()
{
  unint64_t result = qword_1EB585040;
  if (!qword_1EB585040)
  {
    sub_1E0DF6BD0(255);
    sub_1E0DF6F40();
    sub_1E0DF70FC(&qword_1EAD6DB80, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585040);
  }
  return result;
}

unint64_t sub_1E0DF6F40()
{
  unint64_t result = qword_1EB585018;
  if (!qword_1EB585018)
  {
    sub_1E0DF6C18();
    sub_1E0DF6FB8();
    sub_1E0DF7080();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585018);
  }
  return result;
}

unint64_t sub_1E0DF6FB8()
{
  unint64_t result = qword_1EB584FD0;
  if (!qword_1EB584FD0)
  {
    sub_1E0DF6CA4();
    swift_getOpaqueTypeConformance2();
    sub_1E0DF6874(&qword_1EB5850F8, (unint64_t *)&qword_1EB585100, &qword_1EB5851B8, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB584FD0);
  }
  return result;
}

unint64_t sub_1E0DF7080()
{
  unint64_t result = qword_1EB5850B0;
  if (!qword_1EB5850B0)
  {
    sub_1E0DF71CC(255, &qword_1EB5850B8, MEMORY[0x1E4F3C870], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB5850B0);
  }
  return result;
}

uint64_t sub_1E0DF70FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1E0DF7144()
{
  unint64_t result = qword_1EB585170;
  if (!qword_1EB585170)
  {
    sub_1E0DF5B40(255, &qword_1EB585178, (uint64_t (*)(uint64_t))sub_1E0DF5E38, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585170);
  }
  return result;
}

void sub_1E0DF71CC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1E0DF721C()
{
  unint64_t result = qword_1EAD6DB88;
  if (!qword_1EAD6DB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DB88);
  }
  return result;
}

unint64_t sub_1E0DF7274()
{
  unint64_t result = qword_1EAD6DB90;
  if (!qword_1EAD6DB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DB90);
  }
  return result;
}

unint64_t sub_1E0DF72CC()
{
  unint64_t result = qword_1EB585180;
  if (!qword_1EB585180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585180);
  }
  return result;
}

unint64_t sub_1E0DF7324()
{
  unint64_t result = qword_1EB585188;
  if (!qword_1EB585188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585188);
  }
  return result;
}

uint64_t sub_1E0DF7378()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v9 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a3[10];
    uint64_t v24 = (void *)(a1 + v10);
    uint64_t v11 = (uint64_t *)((char *)a2 + v10);
    *(void *)(a1 + 64) = a2[8];
    sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_1E0ECCF80();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v24, v11, v12);
    }
    else
    {
      void *v24 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[11];
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_1E0ECCF90();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      void *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[12];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    uint64_t v21 = *(void *)v20;
    char v22 = *(unsigned char *)(v20 + 8);
    sub_1E0DF7630(*(void *)v20, v22);
    *(void *)uint64_t v19 = v21;
    v19[8] = v22;
  }
  return v4;
}

uint64_t sub_1E0DF7630(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for AccessoryCircularSymbolDetailView(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1E0ECCF80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[11];
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1E0ECCF90();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + a2[12];
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);
  return sub_1E0DF77E0(v9, v10);
}

uint64_t sub_1E0DF77E0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = a3[10];
  uint64_t v9 = (void *)(a1 + v8);
  char v10 = (void *)(a2 + v8);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1E0ECCF80();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[11];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = sub_1E0ECCF90();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    void *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = a3[12];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)v18;
  char v20 = *(unsigned char *)(v18 + 8);
  sub_1E0DF7630(*(void *)v18, v20);
  *(void *)uint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v20;
  return a1;
}

void *assignWithCopy for AccessoryCircularSymbolDetailView(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[10];
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46AE8];
    char v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1E0DF91C4((uint64_t)a1 + v6, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
    sub_1E0DF5B40(0, &qword_1EB584F70, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_1E0ECCF80();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = a3[11];
    uint64_t v13 = (void *)((char *)a1 + v12);
    uint64_t v14 = (void *)((char *)a2 + v12);
    uint64_t v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46B98];
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1E0DF91C4((uint64_t)a1 + v12, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
    sub_1E0DF5B40(0, &qword_1EB584F78, v15, v16);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_1E0ECCF90();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v13, v14, v17);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = a3[12];
  uint64_t v19 = (char *)a1 + v18;
  char v20 = (char *)a2 + v18;
  uint64_t v21 = *(void *)v20;
  char v22 = v20[8];
  sub_1E0DF7630(*(void *)v20, v22);
  uint64_t v23 = *(void *)v19;
  char v24 = v19[8];
  *(void *)uint64_t v19 = v21;
  v19[8] = v22;
  sub_1E0DF77E0(v23, v24);
  return a1;
}

uint64_t initializeWithTake for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  uint64_t v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1E0ECCF80();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[11];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
  uint64_t v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = sub_1E0ECCF90();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v13, v14, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[12];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  return a1;
}

uint64_t assignWithTake for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v8 = a3[10];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46AE8];
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1E0DF91C4(a1 + v8, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
    sub_1E0DF5B40(0, &qword_1EB584F70, v11, v12);
    uint64_t v14 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_1E0ECCF80();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v9, v10, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v16 = a3[11];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    uint64_t v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46B98];
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1E0DF91C4(a1 + v16, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
    sub_1E0DF5B40(0, &qword_1EB584F78, v19, v20);
    uint64_t v22 = v21;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_1E0ECCF90();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v17, v18, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
  }
  uint64_t v24 = a3[12];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  LOBYTE(v26) = *((unsigned char *)v26 + 8);
  uint64_t v28 = *(void *)v25;
  char v29 = *(unsigned char *)(v25 + 8);
  *(void *)uint64_t v25 = v27;
  *(unsigned char *)(v25 + 8) = (_BYTE)v26;
  sub_1E0DF77E0(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0DF81D4);
}

uint64_t sub_1E0DF81D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1E0DF5B40(0, &qword_1EAD6DB98, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C658]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_1E0DF5B40(0, &qword_1EAD6DBA0, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C658]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0DF8374);
}

uint64_t sub_1E0DF8374(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    sub_1E0DF5B40(0, &qword_1EAD6DB98, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C658]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_1E0DF5B40(0, &qword_1EAD6DBA0, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C658]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 44);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1E0DF8500()
{
  sub_1E0DF5B40(319, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  if (v0 <= 0x3F)
  {
    sub_1E0DF5B40(319, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for AccessoryCircularSymbolDetailView.Options()
{
  return &type metadata for AccessoryCircularSymbolDetailView.Options;
}

uint64_t sub_1E0DF867C()
{
  return sub_1E0DF70FC(&qword_1EB585140, (void (*)(uint64_t))sub_1E0DF86C4);
}

void sub_1E0DF86C4()
{
  if (!qword_1EB585148)
  {
    sub_1E0DF5B40(255, &qword_1EB585168, (uint64_t (*)(uint64_t))sub_1E0DF5C40, MEMORY[0x1E4F3F108]);
    sub_1E0DF8758();
    unint64_t v0 = sub_1E0ECCDA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585148);
    }
  }
}

unint64_t sub_1E0DF8758()
{
  unint64_t result = qword_1EB585160;
  if (!qword_1EB585160)
  {
    sub_1E0DF5B40(255, &qword_1EB585168, (uint64_t (*)(uint64_t))sub_1E0DF5C40, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585160);
  }
  return result;
}

void sub_1E0DF87E0()
{
  if (!qword_1EB584F90)
  {
    sub_1E0DF5B40(255, &qword_1EB585178, (uint64_t (*)(uint64_t))sub_1E0DF5E38, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1E0ECC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584F90);
    }
  }
}

uint64_t sub_1E0DF8878@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1E0ECC4D0();
  *a1 = v3;
  return result;
}

uint64_t sub_1E0DF88A4@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1E0ECC4D0();
  *a1 = v3;
  return result;
}

uint64_t sub_1E0DF88D0()
{
  return sub_1E0ECC4E0();
}

uint64_t sub_1E0DF88F8()
{
  return sub_1E0ECC4E0();
}

uint64_t sub_1E0DF8920(uint64_t a1, uint64_t a2)
{
  sub_1E0DF68C4(0, &qword_1EB585010, (uint64_t (*)(uint64_t))sub_1E0DF5DA4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DF89BC(uint64_t a1)
{
  sub_1E0DF68C4(0, &qword_1EB585010, (uint64_t (*)(uint64_t))sub_1E0DF5DA4, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1E0DF8A58()
{
  unint64_t result = qword_1EB584FE0;
  if (!qword_1EB584FE0)
  {
    sub_1E0DF5F68();
    sub_1E0DF6014();
    sub_1E0DF6930();
    swift_getOpaqueTypeConformance2();
    sub_1E0DF70FC(&qword_1EAD6DB80, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB584FE0);
  }
  return result;
}

unint64_t sub_1E0DF8B30()
{
  unint64_t result = qword_1EB585068;
  if (!qword_1EB585068)
  {
    sub_1E0DF5F20(255);
    sub_1E0DF8A58();
    sub_1E0DF6930();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB585068);
  }
  return result;
}

uint64_t sub_1E0DF8BA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1E0DF8C10()
{
  if (!qword_1EAD6DBA8)
  {
    sub_1E0DF6ACC();
    sub_1E0DF8C7C();
    unint64_t v0 = sub_1E0ECC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DBA8);
    }
  }
}

unint64_t sub_1E0DF8C7C()
{
  unint64_t result = qword_1EAD6DBB0;
  if (!qword_1EAD6DBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DBB0);
  }
  return result;
}

uint64_t sub_1E0DF8CD0()
{
  uint64_t v1 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[10];
  sub_1E0DF5B40(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1E0ECCF80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[11];
  sub_1E0DF5B40(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_1E0ECCF90();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  sub_1E0DF77E0(*(void *)(v5 + v1[12]), *(unsigned char *)(v5 + v1[12] + 8));
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t sub_1E0DF8EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCircularSymbolDetailView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_1E0DF51CC(a1, v6, a2);
}

uint64_t sub_1E0DF8F74(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1E0DF8F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

void sub_1E0DF9064(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_1E0DF90F0()
{
  return sub_1E0ECC440();
}

uint64_t sub_1E0DF9114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1E0DF8F84(a1, a2, a3, a4, MEMORY[0x1E4F3EC78], MEMORY[0x1E4F3CEE8]);
}

uint64_t sub_1E0DF9154(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_1E0DF5B40(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1E0DF91C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_1E0DF5B40(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1E0DF9220(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1E0DF9288(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1E0DF92EC()
{
}

void sub_1E0DF9300()
{
}

void sub_1E0DF9314()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)HKUIMetricColors), sel_init);
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1EAD740B8;
  uint64_t v2 = (void *)sub_1E0ECD190();
  uint64_t v3 = self;
  id v4 = objc_msgSend(v3, sel_colorNamed_inBundle_compatibleWithTraitCollection_, v2, v1, 0);

  if (v4)
  {
    objc_msgSend(v0, sel_setKeyColor_, v4);

    id v5 = objc_msgSend(v3, sel_hk_chartOverlayPillLightColor);
    objc_msgSend(v0, sel_setContextViewPrimaryTextColor_, v5);

    id v6 = objc_msgSend(v3, sel_hk_defaultSecondaryTextColor);
    objc_msgSend(v0, sel_setContextViewSecondaryTextColor_, v6);
  }
  else
  {
    __break(1u);
  }
}

id AudiogramLongitudinalChartDataSource.__allocating_init(displayType:healthStore:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithDisplayType_healthStore_, a1, a2);

  return v5;
}

id AudiogramLongitudinalChartDataSource.init(displayType:healthStore:)(void *a1, void *a2)
{
  objc_allocWithZone((Class)type metadata accessor for AudiogramAnalyticsManager());
  id v5 = v2;
  *(void *)&v5[OBJC_IVAR____TtC8HealthUI36AudiogramLongitudinalChartDataSource_analyticsManager] = sub_1E0E9DF40(a2);

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for AudiogramLongitudinalChartDataSource();
  id v6 = objc_msgSendSuper2(&v8, sel_initWithDisplayType_healthStore_, a1, a2);

  return v6;
}

uint64_t sub_1E0DF9694(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v79 = a3;
  uint64_t v77 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_1E0ECB460();
  *(void *)&long long v74 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = &v66[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_1E0ECB980();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = v9[8];
  uint64_t v12 = MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = &v66[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = &v66[-v15];
  id v75 = a1;
  id v17 = objc_msgSend(a1, sel_startDate);
  sub_1E0ECB940();

  sub_1E0ECB950();
  LOBYTE(v17) = sub_1E0ECB930();
  uint64_t v18 = (void (*)(unsigned char *, uint64_t))v9[1];
  v18(v13, v8);
  v18(v16, v8);
  if (v17)
  {
    uint64_t v70 = v10;
    uint64_t v71 = v16;
    uint64_t v69 = (unsigned __int8 *)v9;
    uint64_t v72 = v9 + 1;
    uint64_t v73 = v18;
    id v19 = v75;
    id v20 = objc_msgSend(v75, sel_statisticsInterval);
    sub_1E0ECB410();

    sub_1E0ECB430();
    if (v21)
    {
      sub_1E0ECB420();
      if (v24)
      {
        sub_1E0ECB3F0();
        if (v25)
        {
          sub_1E0ECB450();
          char v29 = v71;
          uint64_t v28 = v69;
          uint64_t v61 = v74;
          if (v62)
          {
            sub_1E0ECB440();
            char v65 = v64;
            (*(void (**)(unsigned char *, uint64_t))(v61 + 8))(v7, v4);
            if (v65) {
              int v63 = 0;
            }
            else {
              int v63 = 5;
            }
          }
          else
          {
            (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v7, v4);
            int v63 = 4;
          }
          int v67 = v63;
          uint64_t v26 = v8;
          uint64_t v27 = v73;
          goto LABEL_10;
        }
        (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v7, v4);
        int v22 = 3;
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v7, v4);
        int v22 = 2;
      }
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v7, v4);
      int v22 = 1;
    }
    int v67 = v22;
    uint64_t v26 = v8;
    uint64_t v27 = v73;
    uint64_t v28 = v69;
    char v29 = v71;
LABEL_10:
    uint64_t v30 = self;
    id v31 = objc_msgSend(v19, sel_startDate);
    sub_1E0ECB940();

    char v32 = v29;
    char v33 = (void *)sub_1E0ECB920();
    v27(v32, v26);
    id v34 = objc_msgSend(v19, sel_endDate);
    sub_1E0ECB940();

    uint64_t v35 = (void *)sub_1E0ECB920();
    v27(v32, v26);
    uint64_t v69 = (unsigned __int8 *)objc_msgSend(v30, sel_predicateForSamplesWithStartDate_endDate_options_, v33, v35, 0);

    sub_1E0ECD1D0();
    id v36 = objc_allocWithZone(MEMORY[0x1E4F29008]);
    int v37 = (void *)sub_1E0ECD190();
    swift_bridgeObjectRelease();
    id v38 = objc_msgSend(v36, sel_initWithKey_ascending_, v37, 1);

    sub_1E0ECB970();
    sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6DB78);
    id v68 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_audiogramSampleType);
    sub_1E0B32FF4(0, (unint64_t *)&qword_1EAD69930, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    id v75 = v39;
    uint64_t v40 = swift_allocObject();
    long long v74 = xmmword_1E0F06EB0;
    *(_OWORD *)(v40 + 16) = xmmword_1E0F06EB0;
    *(void *)(v40 + 32) = v38;
    aBlock[0] = v40;
    sub_1E0ECD340();
    (*((void (**)(unsigned char *, unsigned char *, uint64_t))v28 + 2))(v13, v32, v26);
    unint64_t v41 = (v28[80] + 48) & ~(unint64_t)v28[80];
    uint64_t v42 = v26;
    unint64_t v43 = (v70 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v76;
    uint64_t v46 = v79;
    *(void *)(v44 + 16) = v77;
    *(void *)(v44 + 24) = v46;
    *(unsigned char *)(v44 + 32) = v67;
    *(void *)(v44 + 40) = v45;
    uint64_t v47 = v13;
    uint64_t v48 = v42;
    (*((void (**)(unint64_t, unsigned char *, uint64_t))v28 + 4))(v44 + v41, v47, v42);
    *(void *)(v44 + v43) = ObjectType;
    id v49 = objc_allocWithZone(MEMORY[0x1E4F2B440]);
    sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6DBC8);
    char v50 = v69;
    id v51 = v38;
    swift_retain();
    id v52 = v45;
    uint64_t v53 = (void *)sub_1E0ECD320();
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1E0DFA9A4;
    aBlock[5] = v44;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1E0DFA7E8;
    aBlock[3] = &block_descriptor_3;
    uint64_t v54 = _Block_copy(aBlock);
    uint64_t v55 = v68;
    id v56 = objc_msgSend(v49, sel_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_, v68, v50, 0, v53, v54);

    _Block_release(v54);
    swift_release();
    id v57 = v56;
    id v58 = objc_msgSend(v52, sel_queryDescription);
    objc_msgSend(v57, sel_setDebugIdentifier_, v58);

    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = v74;
    *(void *)(v59 + 32) = v57;
    aBlock[0] = v59;
    sub_1E0ECD340();
    uint64_t v23 = aBlock[0];

    v73(v71, v48);
    return v23;
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1E0DF9DD4(uint64_t a1, unint64_t a2, void *a3, void (*a4)(long long *, id), uint64_t a5, char a6, char *a7, uint64_t a8)
{
  v57[1] = a8;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v12 = sub_1E0ECBB60();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  uint64_t v16 = (char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1E0ECB980();
  uint64_t v58 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17, v18);
  char v21 = (char *)v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v22);
  char v24 = (char *)v57 - v23;
  if (a2 && (uint64_t v25 = sub_1E0E4591C(a2)) != 0)
  {
    unint64_t v26 = v25;
    sub_1E0ECB970();
    LOBYTE(v62) = a6;
    id v27 = objc_msgSend(a7, sel_queryCalendar);
    sub_1E0ECBB20();

    uint64_t v28 = _s8HealthUI30AudiogramLongitudinalChartDataC013makeAggregateeF010audiograms19aggregationStrategy8calendarSayACGSaySo17HKAudiogramSampleCG_AA011AggregationK0O10Foundation8CalendarVtFZ_0(v26, &v62, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_1E0ECB970();
    sub_1E0ECB910();
    double v30 = v29;
    sub_1E0ECB910();
    double v32 = v31;
    uint64_t v33 = *(void *)&a7[OBJC_IVAR____TtC8HealthUI36AudiogramLongitudinalChartDataSource_analyticsManager];
    LOBYTE(v62) = a6;
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1E0ECD910();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v35 = _s8HealthUI29AudiogramPerformanceAnalyticsC6MetricC017longitudinalChartC11Aggregation8strategy13queryDuration011aggregationL014audiogramCountAEXDAA0I8StrategyO_S2dSitFZ_0((unsigned __int8 *)&v62, v34, v30, v32);
    type metadata accessor for AudiogramPerformanceAnalytics.Event();
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v35;
    *(void *)(v36 + 24) = &protocol witness table for AudiogramPerformanceAnalytics.Metric;
    id v37 = v35;
    sub_1E0E9DC30(v36, v33);

    swift_release();
    sub_1E0DFAABC();
    *((void *)&v63 + 1) = v38;
    *(void *)&long long v62 = v28;
    v59(&v62, 0);
    char v39 = *(void (**)(char *, uint64_t))(v58 + 8);
    v39(v21, v17);
    v39(v24, v17);
  }
  else
  {
    if (a3) {
      id v40 = a3;
    }
    else {
      id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C58]), sel_init);
    }
    unint64_t v41 = v59;
    id v42 = a3;
    if (qword_1EAD6D4E8 != -1) {
      swift_once();
    }
    uint64_t v43 = sub_1E0ECC010();
    __swift_project_value_buffer(v43, (uint64_t)qword_1EAD74150);
    id v44 = v40;
    id v45 = v40;
    uint64_t v46 = sub_1E0ECBFF0();
    os_log_type_t v47 = sub_1E0ECD520();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      id v49 = (void *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(void *)&long long v62 = v50;
      *(_DWORD *)uint64_t v48 = 136446466;
      uint64_t v51 = sub_1E0ECDBC0();
      uint64_t v61 = sub_1E0DED7E4(v51, v52, (uint64_t *)&v62);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2114;
      id v53 = v40;
      uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v61 = v54;
      sub_1E0ECD6D0();
      *id v49 = v54;

      _os_log_impl(&dword_1E0B26000, v46, v47, "[%{public}s] Query failed with error: %{public}@", (uint8_t *)v48, 0x16u);
      sub_1E0DFABA4();
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v49, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v50, -1, -1);
      MEMORY[0x1E4E41080](v48, -1, -1);
    }
    else
    {
    }
    long long v62 = 0u;
    long long v63 = 0u;
    id v55 = v40;
    v41(&v62, v40);
  }
  return sub_1E0B32EE4((uint64_t)&v62);
}

uint64_t sub_1E0DFA41C(uint64_t a1)
{
  sub_1E0B32F68(a1, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1E0B32EE4((uint64_t)v13);
    return 0;
  }
  sub_1E0DFAABC();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  unint64_t v1 = v12;
  id v2 = objc_msgSend(objc_allocWithZone((Class)HKGraphSeriesDataBlock), sel_init);
  if (!(v12 >> 62))
  {
    uint64_t v3 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_5;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    sub_1E0DFAB14();
    uint64_t v10 = (void *)sub_1E0ECD320();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setChartPoints_, v10);

    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1E0ECD910();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_15;
  }
LABEL_5:
  v13[0] = MEMORY[0x1E4FBC860];
  uint64_t result = sub_1E0ECD890();
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1E4E3EF00](v5, v1);
      }
      else {
        id v6 = *(id *)(v1 + 8 * v5 + 32);
      }
      id v7 = v6;
      ++v5;
      uint64_t v8 = (objc_class *)type metadata accessor for AudiogramLongitudinalChartPoint();
      uint64_t v9 = (char *)objc_allocWithZone(v8);
      *(void *)&v9[OBJC_IVAR____TtC8HealthUI31AudiogramLongitudinalChartPoint_audiogramChartData] = v7;
      v11.receiver = v9;
      v11.super_class = v8;
      objc_msgSendSuper2(&v11, sel_init);
      sub_1E0ECD870();
      sub_1E0ECD8A0();
      sub_1E0ECD8B0();
      sub_1E0ECD880();
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

id AudiogramLongitudinalChartDataSource.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AudiogramLongitudinalChartDataSource.init()()
{
}

id AudiogramLongitudinalChartDataSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramLongitudinalChartDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1E0DFA7E8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  id v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1E0DF2C04(0, &qword_1EAD6DBE8);
    uint64_t v5 = sub_1E0ECD330();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AudiogramLongitudinalChartDataSource()
{
  return self;
}

uint64_t sub_1E0DFA8C4()
{
  uint64_t v1 = sub_1E0ECB980();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_1E0DFA9A4(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = *(void *)(sub_1E0ECB980() - 8);
  return sub_1E0DF9DD4(a1, a2, a3, *(void (**)(long long *, id))(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), *(char **)(v3 + 40), v3 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1E0DFAA7C()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1E0DFAAB4(uint64_t a1, void *a2)
{
  sub_1E0E999FC(a1, a2, *(void *)(v2 + 16));
}

void sub_1E0DFAABC()
{
  if (!qword_1EAD6DBD8)
  {
    type metadata accessor for AudiogramLongitudinalChartData();
    unint64_t v0 = sub_1E0ECD380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DBD8);
    }
  }
}

unint64_t sub_1E0DFAB14()
{
  unint64_t result = qword_1EAD6DBE0;
  if (!qword_1EAD6DBE0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6DBE0);
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_1E0DFABA4()
{
  if (!qword_1EB584EA0)
  {
    sub_1E0DF2C04(255, (unint64_t *)&qword_1EB584EB0);
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB584EA0);
    }
  }
}

id Locale.isIn24HourTime.getter()
{
  unint64_t v0 = (void *)sub_1E0ECB9D0();
  id v1 = objc_msgSend(v0, sel_hk_isIn24HourTime);

  return v1;
}

uint64_t Locale.isAMPMSymbolBeforeTime.getter()
{
  sub_1E0DFBF40(0, &qword_1EAD6DBF0, MEMORY[0x1E4F271B8]);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v107 - v2;
  sub_1E0DFBE4C();
  uint64_t v5 = v4;
  uint64_t v152 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v138 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_1E0ECB6F0();
  uint64_t v133 = *(void (***)(char *, uint64_t))(v140 - 8);
  MEMORY[0x1F4188790](v140, v8);
  uint64_t v10 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_1E0ECB4B0();
  uint64_t v129 = *(void (***)(char *, uint64_t))(v137 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v137, v11);
  v127 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v126 = (char *)&v107 - v16;
  MEMORY[0x1F4188790](v15, v17);
  v130 = (char *)&v107 - v18;
  uint64_t v160 = sub_1E0ECB5E0();
  uint64_t v109 = *(void *)(v160 - 8);
  MEMORY[0x1F4188790](v160, v19);
  v159 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DFBF40(0, &qword_1EAD6DC00, MEMORY[0x1E4F27350]);
  MEMORY[0x1F4188790](v21 - 8, v22);
  uint64_t v151 = (char *)&v107 - v23;
  uint64_t v156 = sub_1E0ECB5F0();
  uint64_t v158 = *(void *)(v156 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v156, v24);
  uint64_t v150 = (char *)&v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25, v27);
  uint64_t v155 = (char *)&v107 - v28;
  uint64_t v108 = sub_1E0ECB600();
  uint64_t v157 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108, v29);
  v154 = (char *)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DFBEAC();
  uint64_t v148 = v31 - 8;
  uint64_t v33 = MEMORY[0x1F4188790](v31 - 8, v32);
  uint64_t v147 = (void (*)(char *, uint64_t, uint64_t))((char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v33, v35);
  v153 = (char *)&v107 - v36;
  uint64_t v149 = sub_1E0ECB900();
  uint64_t v146 = *(void (***)(char *, uint64_t))(v149 - 8);
  MEMORY[0x1F4188790](v149, v37);
  uint64_t v145 = (char *)&v107 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_1E0ECB640();
  uint64_t v115 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116, v39);
  v118 = (char *)&v107 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_1E0ECB7C0();
  MEMORY[0x1F4188790](v41 - 8, v42);
  uint64_t v144 = (void (*)(char *, char *, uint64_t))((char *)&v107 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = sub_1E0ECBC40();
  MEMORY[0x1F4188790](v44 - 8, v45);
  uint64_t v46 = sub_1E0ECBB60();
  MEMORY[0x1F4188790](v46 - 8, v47);
  uint64_t v48 = sub_1E0ECBA30();
  MEMORY[0x1F4188790](v48 - 8, v49);
  sub_1E0DFBF40(0, &qword_1EAD6DC18, MEMORY[0x1E4F27808]);
  MEMORY[0x1F4188790](v50 - 8, v51);
  id v53 = (char *)&v107 - v52;
  sub_1E0DFBF40(0, &qword_1EAD6DC20, MEMORY[0x1E4F27810]);
  MEMORY[0x1F4188790](v54 - 8, v55);
  id v57 = (char *)&v107 - v56;
  uint64_t v114 = sub_1E0ECB8D0();
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114, v58);
  uint64_t v60 = (char *)&v107 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_1E0ECB980();
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111, v61);
  v117 = (char *)&v107 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0ECB970();
  sub_1E0ECB890();
  uint64_t v63 = sub_1E0ECB8A0();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v57, 0, 1, v63);
  sub_1E0ECB860();
  uint64_t v64 = sub_1E0ECB870();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v53, 0, 1, v64);
  sub_1E0ECB9E0();
  sub_1E0ECBB10();
  sub_1E0ECBC30();
  sub_1E0ECB7B0();
  uint64_t v65 = (uint64_t)v153;
  uint64_t v66 = v108;
  sub_1E0ECB8C0();
  int v67 = v145;
  uint64_t v112 = v60;
  sub_1E0ECB8B0();
  sub_1E0ECB8F0();
  v146[1](v67, v149);
  id v68 = v154;
  sub_1E0ECB610();
  uint64_t v69 = v157;
  uint64_t v70 = (uint64_t)v147;
  uint64_t v144 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
  uint64_t v145 = (char *)(v157 + 16);
  v144((char *)v147, v68, v66);
  uint64_t v71 = sub_1E0DFBFF8(&qword_1EAD6DC10, MEMORY[0x1E4F27368]);
  uint64_t v72 = v155;
  uint64_t v149 = v71;
  sub_1E0ECD440();
  uint64_t v73 = *(void (**)(char *, uint64_t))(v69 + 8);
  uint64_t v157 = v69 + 8;
  v143 = v73;
  v73(v68, v66);
  uint64_t v74 = v148;
  uint64_t v75 = v158;
  (*(void (**)(uint64_t, char *, uint64_t))(v158 + 32))(v70 + *(int *)(v148 + 44), v72, v156);
  sub_1E0DFBF94(v70, v65);
  uint64_t v76 = v65 + *(int *)(v74 + 44);
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  uint64_t v158 = v75 + 16;
  uint64_t v146 = (void (**)(char *, uint64_t))(v75 + 8);
  uint64_t v147 = v77;
  uint64_t v142 = (void (**)(char *))(v109 + 16);
  uint64_t v148 = v109 + 56;
  v141 = (uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
  uint64_t v134 = (void (**)(char *, char *, uint64_t))(v109 + 32);
  ++v133;
  uint64_t v132 = (void (**)(char *, uint64_t))(v152 + 8);
  uint64_t v131 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 6);
  uint64_t v124 = (void (**)(char *, uint64_t, uint64_t))(v129 + 4);
  unsigned int v123 = *MEMORY[0x1E4F271A8];
  uint64_t v122 = (void (**)(char *, void, uint64_t))(v129 + 13);
  uint64_t v125 = v129 + 1;
  uint64_t v121 = (void (**)(char *, char *, uint64_t))(v129 + 2);
  unsigned int v120 = *MEMORY[0x1E4F271B0];
  unsigned int v119 = *MEMORY[0x1E4F271A0];
  uint64_t v129 = (void (**)(char *, uint64_t))(v109 + 8);
  uint64_t v139 = v10;
  uint64_t v136 = v5;
  uint64_t v128 = v76;
  uint64_t v135 = v3;
  while (1)
  {
    while (1)
    {
      uint64_t v79 = v155;
      uint64_t v78 = v156;
      v147(v155, v76, v156);
      uint64_t v80 = v150;
      sub_1E0ECD460();
      sub_1E0DFBFF8(&qword_1EAD6DC28, MEMORY[0x1E4F27358]);
      uint64_t v81 = v65;
      char v82 = sub_1E0ECD100();
      uint64_t v83 = *v146;
      (*v146)(v80, v78);
      v83(v79, v78);
      if (v82)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v148)(v151, 1, 1, v160);
        LODWORD(v152) = 0;
LABEL_11:
        uint64_t v65 = v81;
        goto LABEL_14;
      }
      uint64_t v84 = (void (*)(char *, void))sub_1E0ECD480();
      uint64_t v85 = v151;
      uint64_t v86 = v160;
      (*v142)(v151);
      v84(v161, 0);
      uint64_t v87 = v154;
      v144(v154, (char *)v81, v66);
      uint64_t v88 = v86;
      sub_1E0ECD470();
      uint64_t v89 = v66;
      v143(v87, v66);
      (*(void (**)(char *, void, uint64_t, uint64_t))v148)(v85, 0, 1, v86);
      int v90 = (*v141)(v85, 1, v86);
      LODWORD(v152) = v90 != 1;
      if (v90 == 1) {
        goto LABEL_11;
      }
      uint64_t v91 = v159;
      (*v134)(v159, v85, v86);
      uint64_t v92 = v139;
      sub_1E0ECB5B0();
      swift_getKeyPath();
      sub_1E0ECB500();
      unint64_t v93 = v138;
      sub_1E0ECB6A0();
      swift_release();
      (*v133)(v92, v140);
      swift_getKeyPath();
      sub_1E0DFC0E8();
      uint64_t v94 = (uint64_t)v135;
      uint64_t v95 = v136;
      sub_1E0ECB790();
      uint64_t v96 = v137;
      swift_release();
      (*v132)(v93, v95);
      if ((*v131)(v94, 1, v96) != 1) {
        break;
      }
      (*v129)(v91, v88);
      sub_1E0DFC13C(v94);
      uint64_t v65 = (uint64_t)v153;
      uint64_t v66 = v89;
      uint64_t v76 = v128;
    }
    uint64_t v97 = v130;
    (*v124)(v130, v94, v96);
    uint64_t v98 = *v122;
    unint64_t v99 = v126;
    (*v122)(v126, v123, v96);
    char v100 = sub_1E0ECB4A0();
    uint64_t v101 = *v125;
    (*v125)(v99, v96);
    char v102 = v127;
    (*v121)(v127, v97, v96);
    if (v100) {
      break;
    }
    v98(v99, v120, v96);
    char v103 = sub_1E0ECB4A0();
    v101(v99, v96);
    v101(v102, v96);
    if (v103) {
      goto LABEL_13;
    }
    v98(v99, v119, v96);
    uint64_t v104 = v130;
    char v105 = sub_1E0ECB4A0();
    v101(v99, v96);
    v101(v104, v96);
    (*v129)(v159, v160);
    uint64_t v65 = (uint64_t)v153;
    uint64_t v66 = v89;
    uint64_t v76 = v128;
    if (v105) {
      goto LABEL_14;
    }
  }
  v101(v102, v96);
LABEL_13:
  v101(v130, v96);
  (*v129)(v159, v160);
  LODWORD(v152) = 0;
  uint64_t v65 = (uint64_t)v153;
LABEL_14:
  sub_1E0DFC040(v65);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v118, v116);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v112, v114);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v117, v111);
  return v152;
}

void sub_1E0DFBE4C()
{
  if (!qword_1EAD6DBF8)
  {
    sub_1E0ECB500();
    unint64_t v0 = sub_1E0ECB7A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DBF8);
    }
  }
}

void sub_1E0DFBEAC()
{
  if (!qword_1EAD6DC08)
  {
    sub_1E0ECB600();
    sub_1E0DFBFF8(&qword_1EAD6DC10, MEMORY[0x1E4F27368]);
    unint64_t v0 = sub_1E0ECD8D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DC08);
    }
  }
}

void sub_1E0DFBF40(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD6C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1E0DFBF94(uint64_t a1, uint64_t a2)
{
  sub_1E0DFBEAC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DFBFF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E0DFC040(uint64_t a1)
{
  sub_1E0DFBEAC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E0DFC09C@<X0>(uint64_t *a1@<X8>)
{
  sub_1E0ECB510();
  uint64_t result = sub_1E0ECB500();
  *a1 = result;
  return result;
}

void sub_1E0DFC0CC()
{
}

unint64_t sub_1E0DFC0E8()
{
  unint64_t result = qword_1EAD6DC30;
  if (!qword_1EAD6DC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DC30);
  }
  return result;
}

uint64_t sub_1E0DFC13C(uint64_t a1)
{
  sub_1E0DFBF40(0, &qword_1EAD6DBF0, MEMORY[0x1E4F271B8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id HKInteractiveChartInteractionAnalyticsManager.__allocating_init(healthStore:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1E0DFC7DC(a1);

  return v4;
}

id HKInteractiveChartInteractionAnalyticsManager.init(healthStore:)(void *a1)
{
  id v2 = sub_1E0DFC7DC(a1);

  return v2;
}

void sub_1E0DFC25C(uint64_t a1)
{
  id v2 = *(void **)(v1 + OBJC_IVAR____TtC8HealthUI45HKInteractiveChartInteractionAnalyticsManager_submissionManager);
  if (v2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = ObjectType;
    v7[4] = sub_1E0DFCA2C;
    v7[5] = v5;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 1107296256;
    void v7[2] = sub_1E0DFC578;
    v7[3] = &block_descriptor_4;
    uint64_t v6 = _Block_copy(v7);
    swift_release();
    objc_msgSend(v2, sel_submitEvent_completion_, a1, v6);
    _Block_release(v6);
  }
}

void sub_1E0DFC34C(char a1, id a2)
{
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      uint64_t v13 = (uint64_t)a2;
      id v2 = a2;
      sub_1E0DFCAE0();
      uint64_t v3 = sub_1E0ECD200();
      unint64_t v5 = v4;
    }
    else
    {
      unint64_t v5 = 0xE400000000000000;
      uint64_t v3 = 1701736270;
    }
    if (qword_1EAD69888 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_1E0ECC010();
    __swift_project_value_buffer(v6, (uint64_t)qword_1EAD74098);
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1E0ECBFF0();
    os_log_type_t v8 = sub_1E0ECD520();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v11 = sub_1E0ECDBC0();
      sub_1E0DED7E4(v11, v12, &v13);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1E0DED7E4(v3, v5, &v13);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1E0B26000, v7, v8, "[%{public}s] Failed to submit analytics with error %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v10, -1, -1);
      MEMORY[0x1E4E41080](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1E0DFC578(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id HKInteractiveChartInteractionAnalyticsManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void HKInteractiveChartInteractionAnalyticsManager.init()()
{
}

id HKInteractiveChartInteractionAnalyticsManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HKInteractiveChartInteractionAnalyticsManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1E0DFC7DC(void *a1)
{
  objc_super v2 = v1;
  swift_getObjectType();
  unint64_t v4 = v2;
  id v5 = objc_msgSend(a1, sel_profileIdentifier);
  id v6 = objc_msgSend(v5, sel_type);

  if (v6 == (id)1)
  {
    id v7 = (id)HKLogAnalytics();
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2ABE8]), sel_initWithLoggingCategory_healthDataSource_, v7, a1);

    *(void *)&v4[OBJC_IVAR____TtC8HealthUI45HKInteractiveChartInteractionAnalyticsManager_submissionManager] = v8;
  }
  else
  {
    if (qword_1EAD69888 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1E0ECC010();
    __swift_project_value_buffer(v9, (uint64_t)qword_1EAD74098);
    uint64_t v10 = sub_1E0ECBFF0();
    os_log_type_t v11 = sub_1E0ECD540();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v18 = v13;
      *(_DWORD *)unint64_t v12 = 136446210;
      uint64_t v14 = sub_1E0ECDBC0();
      sub_1E0DED7E4(v14, v15, &v18);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v10, v11, "[%{public}s] Will omit analytics for non-primary profile.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v13, -1, -1);
      MEMORY[0x1E4E41080](v12, -1, -1);
    }

    *(void *)&v4[OBJC_IVAR____TtC8HealthUI45HKInteractiveChartInteractionAnalyticsManager_submissionManager] = 0;
  }

  uint64_t v16 = (objc_class *)type metadata accessor for HKInteractiveChartInteractionAnalyticsManager();
  v19.receiver = v4;
  v19.super_class = v16;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t sub_1E0DFCA1C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1E0DFCA2C(char a1, id a2)
{
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t type metadata accessor for HKInteractiveChartInteractionAnalyticsManager()
{
  return self;
}

uint64_t method lookup function for HKInteractiveChartInteractionAnalyticsManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HKInteractiveChartInteractionAnalyticsManager);
}

uint64_t dispatch thunk of HKInteractiveChartInteractionAnalyticsManager.__allocating_init(healthStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of HKInteractiveChartInteractionAnalyticsManager.submit(event:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t sub_1E0DFCAD0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t sub_1E0DFCAE0()
{
  unint64_t result = qword_1EAD6DF50;
  if (!qword_1EAD6DF50)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6DF50);
  }
  return result;
}

uint64_t Collection<>.uniqued()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1E0ECCFB0();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a1);
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = &v17;
  uint64_t v10 = sub_1E0ECD2B0();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1E0DFCC8C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = MEMORY[0x1F4188790](AssociatedTypeWitness, v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, a1, AssociatedTypeWitness);
  sub_1E0ECD420();
  char v11 = sub_1E0ECD410();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, AssociatedTypeWitness);
  return v11 & 1;
}

uint64_t sub_1E0DFCDE8(uint64_t a1)
{
  return sub_1E0DFCC8C(a1) & 1;
}

uint64_t sub_1E0DFCE0C(void *a1, uint64_t a2)
{
  uint64_t v38 = a2;
  sub_1E0DFD808(0, (unint64_t *)&qword_1EAD6E590, MEMORY[0x1E4F65908], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v38 - v5;
  id v7 = objc_msgSend(a1, sel_displayTypeController);
  id v8 = objc_msgSend(self, sel_appleBalanceMetricsType);
  id v9 = objc_msgSend(v7, sel_displayTypeForObjectType_, v8);

  if (v9)
  {
    id v10 = objc_msgSend(v9, sel_displayCategory);
    id v11 = objc_msgSend(a1, sel_unitController);
    id v12 = objc_msgSend(a1, sel_chartDataCacheController);
    id v13 = objc_msgSend(v9, sel_hk_standardSeriesForTimeScope_displayCategory_unitController_dataCacheController_, 6, v10, v11, v12);

    if (v13)
    {
      type metadata accessor for BalanceSeries();
      uint64_t v14 = swift_dynamicCastClass();
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = objc_msgSend(v9, sel_displayCategory);
        id v17 = objc_msgSend(a1, sel_unitController);
        id v18 = objc_msgSend(a1, sel_chartDataCacheController);
        id v19 = objc_msgSend(v9, sel_hk_standardSeriesForTimeScope_displayCategory_unitController_dataCacheController_, 5, v16, v17, v18);

        if (v19)
        {
          uint64_t v20 = swift_dynamicCastClass();
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = v38;
            sub_1E0DFD6E0(v38, (uint64_t)v6);
            uint64_t v23 = v15 + OBJC_IVAR___HKBalanceSeries_selectedMetric;
            swift_beginAccess();
            sub_1E0DFD774((uint64_t)v6, v23);
            swift_endAccess();
            sub_1E0DFD6E0(v22, (uint64_t)v6);
            uint64_t v24 = v21 + OBJC_IVAR___HKBalanceSeries_selectedMetric;
            swift_beginAccess();
            sub_1E0DFD774((uint64_t)v6, v24);
            swift_endAccess();
            id v25 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BalanceChartFormatter()), sel_init);
            sub_1E0DFD808(0, &qword_1EAD6DC48, (uint64_t (*)(uint64_t))sub_1E0DFD86C, MEMORY[0x1E4FBBE00]);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1E0F07450;
            *(void *)(inited + 32) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 6);
            *(void *)(inited + 40) = v15;
            id v27 = objc_allocWithZone(NSNumber);
            id v28 = v13;
            *(void *)(inited + 48) = objc_msgSend(v27, sel_initWithInteger_, 5);
            *(void *)(inited + 56) = v21;
            id v29 = objc_allocWithZone(NSNumber);
            id v30 = v19;
            *(void *)(inited + 64) = objc_msgSend(v29, sel_initWithInteger_, 4);
            *(void *)(inited + 72) = v21;
            id v31 = objc_allocWithZone(NSNumber);
            id v32 = v30;
            *(void *)(inited + 80) = objc_msgSend(v31, sel_initWithInteger_, 3);
            *(void *)(inited + 88) = v21;
            id v33 = v32;
            sub_1E0E3F648(inited);
            id v34 = objc_allocWithZone((Class)HKInteractiveChartDisplayType);
            sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6D9E0);
            sub_1E0DF2C04(0, &qword_1EAD6DC58);
            sub_1E0DFD8FC();
            uint64_t v35 = (void *)sub_1E0ECCFC0();
            swift_bridgeObjectRelease();
            id v36 = objc_msgSend(v34, sel_initWithBaseDisplayType_valueFormatter_dataTypeCode_seriesForTimeScopeMapping_, v9, v25, 305, v35);

            return (uint64_t)v36;
          }
        }
      }
    }
  }
  uint64_t result = sub_1E0ECD8F0();
  __break(1u);
  return result;
}

id sub_1E0DFD320(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1E0ECBEA0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  id v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + OBJC_IVAR____TtC8HealthUI48BalanceClassificationDateRangeDataSourceDelegate_classification;
  id v10 = objc_msgSend(objc_allocWithZone((Class)HKDateRangeDataSource), sel_initWithSourceDelegate_, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
  if (v11 == *MEMORY[0x1E4F65940])
  {
    id v12 = a1;
    uint64_t v13 = 2;
  }
  else if (v11 == *MEMORY[0x1E4F65938])
  {
    id v14 = a1;
    uint64_t v13 = 1;
  }
  else if (v11 == *MEMORY[0x1E4F65948])
  {
    id v15 = a1;
    uint64_t v13 = 3;
  }
  else
  {
    id v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    id v17 = a1;
    v16(v8, v4);
    uint64_t v13 = 0;
  }
  id v18 = objc_msgSend(objc_allocWithZone((Class)HKLevelOverlaySeries), sel_initWithDisplayType_dataSource_options_, a1, v10, v13);

  id v19 = self;
  sub_1E0E98CD4();
  uint64_t v21 = v20;
  id v22 = objc_msgSend(v19, sel_presentationStyleWithColor_options_, v20, 0);

  objc_msgSend(v22, sel_setAxisAnnotationStyle_, 0);
  sub_1E0DF2BA8();
  uint64_t v23 = swift_allocObject();
  long long v37 = xmmword_1E0F06EB0;
  *(_OWORD *)(v23 + 16) = xmmword_1E0F06EB0;
  *(void *)(v23 + 32) = v22;
  uint64_t v38 = v23;
  sub_1E0ECD340();
  sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6DC40);
  id v24 = v18;
  id v25 = v22;
  uint64_t v26 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setUnhighlightedPresentationStyles_, v26);

  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = v37;
  *(void *)(v27 + 32) = v25;
  uint64_t v38 = v27;
  sub_1E0ECD340();
  id v28 = v24;
  id v29 = v25;
  id v30 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  objc_msgSend(v28, sel_setHighlightedPresentationStyles_, v30);

  objc_msgSend(v28, sel_setInactivePresentationStyle_, v29);
  id v31 = objc_allocWithZone((Class)type metadata accessor for BalanceChartFormatter());
  id v32 = a1;
  id v33 = v28;
  id v34 = objc_msgSend(v31, sel_init);
  id v35 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartDisplayType), sel_initWithGraphSeries_baseDisplayType_valueFormatter_dataTypeCode_, v33, v32, v34, 305);

  return v35;
}

uint64_t sub_1E0DFD6E0(uint64_t a1, uint64_t a2)
{
  sub_1E0DFD808(0, (unint64_t *)&qword_1EAD6E590, MEMORY[0x1E4F65908], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DFD774(uint64_t a1, uint64_t a2)
{
  sub_1E0DFD808(0, (unint64_t *)&qword_1EAD6E590, MEMORY[0x1E4F65908], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1E0DFD808(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1E0DFD86C()
{
  if (!qword_1EAD6DC50)
  {
    sub_1E0DF2C04(255, (unint64_t *)&qword_1EAD6D9E0);
    sub_1E0DF2C04(255, &qword_1EAD6DC58);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6DC50);
    }
  }
}

unint64_t sub_1E0DFD8FC()
{
  unint64_t result = qword_1EAD6DC60;
  if (!qword_1EAD6DC60)
  {
    sub_1E0DF2C04(255, (unint64_t *)&qword_1EAD6D9E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DC60);
  }
  return result;
}

void sub_1E0DFD964(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  id v5 = v2;
}

void *sub_1E0DFD9C8()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1E0DFDA18(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_1E0DFDA6C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1E0DFDACC()
{
  id v1 = objc_msgSend(v0, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  return swift_dynamicCastClassUnconditional();
}

id sub_1E0DFDB30()
{
  uint64_t v1 = OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay];
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = sub_1E0DFDBA0(v0);
    uint64_t v4 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v3;
    id v5 = v3;
    sub_1E0DFF84C(v4);
  }
  sub_1E0DFF85C(v2);
  return v3;
}

id sub_1E0DFDBA0(void *a1)
{
  id result = objc_msgSend(a1, sel_collectionView);
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  id v3 = (void *)sub_1E0ECD190();
  id v4 = objc_msgSend(v2, sel__visibleDecorationViewsOfKind_, v3);

  if (!v4)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_10;
  }
  uint64_t v5 = sub_1E0ECD330();

  if (!*(void *)(v5 + 16))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1E0DEDFA8(v5 + 32, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_10:
    sub_1E0B32EE4((uint64_t)&v7);
    return 0;
  }
  type metadata accessor for CalendarYearOverlayView();
  if (swift_dynamicCast()) {
    return (id)v6;
  }
  else {
    return 0;
  }
}

double static BaseCalendarViewController.dataFetchingPauseVelocity.getter()
{
  return 1.5;
}

id BaseCalendarViewController.__allocating_init(collectionViewLayout:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCollectionViewLayout_, a1);

  return v3;
}

id BaseCalendarViewController.init(collectionViewLayout:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource] = 0;
  v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible] = 0;
  id v3 = &v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  *(void *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay] = 1;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  id v4 = objc_msgSendSuper2(&v6, sel_initWithCollectionViewLayout_, a1);

  return v4;
}

uint64_t type metadata accessor for BaseCalendarViewController()
{
  return self;
}

id BaseCalendarViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    objc_super v6 = (void *)sub_1E0ECD190();
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id BaseCalendarViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource] = 0;
  v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible] = 0;
  uint64_t v5 = &v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  *(void *)&v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay] = 1;
  if (a2)
  {
    objc_super v6 = (void *)sub_1E0ECD190();
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  id v7 = objc_msgSendSuper2(&v9, sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id BaseCalendarViewController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id BaseCalendarViewController.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource] = 0;
  v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible] = 0;
  id v3 = &v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  *(void *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay] = 1;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  id v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

id BaseCalendarViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewWillBeginDragging(_:)(UIScrollView *a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 1;
  BaseCalendarViewController.updateYearOverlay()();
}

void BaseCalendarViewController.scrollViewWillEndDragging(_:withVelocity:targetContentOffset:)(uint64_t a1, CGPoint *a2)
{
}

Swift::Void __swiftcall BaseCalendarViewController.updateYearOverlayForScrollViewWillEndDragging(targetContentOffset:)(CGPoint targetContentOffset)
{
  uint64_t v2 = v1;
  double y = targetContentOffset.y;
  CGFloat x = targetContentOffset.x;
  swift_getObjectType();
  uint64_t v5 = (double *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *uint64_t v5 = x;
  v5[1] = y;
  *((unsigned char *)v5 + 16) = 0;
  id v6 = objc_msgSend(v1, sel_collectionView);
  if (v6)
  {
    id v7 = v6;
    objc_msgSend(v6, sel_contentOffset);
    double v9 = v8;

    double v10 = vabdd_f64(y, v9);
    id v11 = objc_msgSend(v2, sel_collectionViewLayout);
    type metadata accessor for CalendarViewLayout();
    id v12 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
    swift_beginAccess();
    double v13 = *v12;

    if (v13 * 5.5 < v10)
    {
      if (qword_1EAD6D4D0 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_1E0ECC010();
      __swift_project_value_buffer(v14, (uint64_t)qword_1EAD74120);
      id v15 = sub_1E0ECBFF0();
      os_log_type_t v16 = sub_1E0ECD540();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v24 = v18;
        *(_DWORD *)id v17 = 136446210;
        uint64_t v19 = sub_1E0ECDBC0();
        sub_1E0DED7E4(v19, v20, &v24);
        sub_1E0ECD6D0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1E0B26000, v15, v16, "[%{public}s] Triggering the year overlay on drag end", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1E4E41080](v18, -1, -1);
        MEMORY[0x1E4E41080](v17, -1, -1);
      }

      *((unsigned char *)v2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) = 1;
      id v21 = sub_1E0DFDB30();
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        sub_1E0E8C8E0(1, (uint64_t)sub_1E0DFF168, v23, 0.25);

        swift_release_n();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewDidEndDragging(_:willDecelerate:)(UIScrollView *_, Swift::Bool willDecelerate)
{
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewDidEndScrollingAnimation(_:)(UIScrollView *a1)
{
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewDidEndDecelerating(_:)(UIScrollView *a1)
{
}

double BaseCalendarViewController.decelerationDistanceThresholdForDisplayingMonthBanner.getter()
{
  id v1 = objc_msgSend(v0, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  uint64_t v2 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
  swift_beginAccess();
  double v3 = *v2;

  return v3 * 5.5;
}

double BaseCalendarViewController.decelerationDistanceThresholdToStopShowingMonthBanner.getter()
{
  id v1 = objc_msgSend(v0, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  uint64_t v2 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
  swift_beginAccess();
  double v3 = *v2;

  return v3 * 1.1;
}

Swift::Void __swiftcall BaseCalendarViewController.updateYearOverlay()()
{
  id v1 = v0;
  swift_getObjectType();
  sub_1E0DFF510(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  uint64_t v4 = MEMORY[0x1F4188790](v2 - 8, v3);
  id v6 = &v59[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4, v7);
  double v9 = &v59[-v8];
  sub_1E0DFF510(0, &qword_1EAD6DC88, MEMORY[0x1E4F27DE8]);
  uint64_t v12 = MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v14 = &v59[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12, v15);
  id v17 = &v59[-v16];
  id v18 = objc_msgSend(v0, sel_collectionView);
  if (!v18)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v19 = v18;
  unsigned int v20 = objc_msgSend(v18, sel_isDragging);

  uint64_t v21 = OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible;
  if (!v20
    || *((unsigned char *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) != 1
    || (*((unsigned char *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset + 16) & 1) != 0)
  {
LABEL_12:
    if (*((unsigned char *)v1 + v21) != 1) {
      return;
    }
    if (qword_1EAD6D4D0 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_1E0ECC010();
    __swift_project_value_buffer(v37, (uint64_t)qword_1EAD74120);
    uint64_t v38 = sub_1E0ECBFF0();
    os_log_type_t v39 = sub_1E0ECD540();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v61[0] = v41;
      *(_DWORD *)uint64_t v40 = 136446210;
      uint64_t v42 = sub_1E0ECDBC0();
      uint64_t v60 = sub_1E0DED7E4(v42, v43, v61);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v38, v39, "[%{public}s] Hiding the visible year overlay", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v41, -1, -1);
      MEMORY[0x1E4E41080](v40, -1, -1);
    }

    *((unsigned char *)v1 + v21) = 0;
    uint64_t v44 = (char *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset;
    *(void *)uint64_t v44 = 0;
    *((void *)v44 + 1) = 0;
    v44[16] = 1;
    id v45 = sub_1E0DFDB30();
    if (v45)
    {
      uint64_t v46 = v45;
      uint64_t v47 = swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      sub_1E0E8C8E0(0, (uint64_t)sub_1E0DFF564, v47, 0.75);

      swift_release_n();
    }
    id v48 = objc_msgSend(v1, sel_collectionView);
    if (v48)
    {
      uint64_t v49 = v48;
      objc_msgSend(v48, sel__verticalVelocity);
      double v51 = v50;

      if (v51 <= 1.5) {
        (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8))();
      }
      return;
    }
    goto LABEL_29;
  }
  double v22 = *(double *)((char *)v1
                  + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset
                  + 8);
  id v23 = objc_msgSend(v1, sel_collectionView);
  if (!v23)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v24 = v23;
  objc_msgSend(v23, sel_contentOffset);
  double v26 = v25;

  double v27 = vabdd_f64(v22, v26);
  id v28 = objc_msgSend(v1, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  id v29 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
  swift_beginAccess();
  double v30 = *v29;

  if (v30 * 1.1 >= v27)
  {
    uint64_t v21 = OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible;
    goto LABEL_12;
  }
  id v31 = sub_1E0DFDB30();
  if (v31)
  {
    id v32 = v31;
    id v33 = objc_msgSend(v1, sel_collectionView);
    if (v33)
    {
      id v34 = v33;
      objc_msgSend(v32, sel_center);
      id v35 = objc_msgSend(v34, sel_indexPathForItemAtPoint_);

      if (v35)
      {
        sub_1E0ECBCE0();

        uint64_t v36 = sub_1E0ECBD30();
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v14, 0, 1, v36);
      }
      else
      {
        uint64_t v36 = sub_1E0ECBD30();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v14, 1, 1, v36);
      }
      sub_1E0DFF56C((uint64_t)v14, (uint64_t)v17);
      sub_1E0ECBD30();
      uint64_t v52 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v52 + 48))(v17, 1, v36) == 1)
      {

        sub_1E0DFF66C((uint64_t)v17, &qword_1EAD6DC88, MEMORY[0x1E4F27DE8]);
        return;
      }
      uint64_t v53 = sub_1E0ECBD20();
      (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v17, v36);
      uint64_t v54 = (id *)((char *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
      swift_beginAccess();
      if (*v54)
      {
        id v55 = *v54;
        CalendarViewDataSource.startDate(forSection:)(v53, (uint64_t)v9);

        uint64_t v56 = sub_1E0ECB980();
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v9, 0, 1, v56);
        uint64_t v57 = (uint64_t)v32 + OBJC_IVAR____TtC8HealthUI23CalendarYearOverlayView_displayDate;
        swift_beginAccess();
        sub_1E0DF0C20(v57, (uint64_t)v6);
        swift_beginAccess();
        sub_1E0DFF5EC((uint64_t)v9, v57);
        swift_endAccess();
        sub_1E0E8C044((uint64_t)v6);
        uint64_t v58 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
        sub_1E0DFF66C((uint64_t)v9, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
        sub_1E0DFF66C((uint64_t)v6, (unint64_t *)&qword_1EAD6DB60, v58);

        return;
      }
      goto LABEL_32;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
}

void sub_1E0DFF02C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1E4E41170](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) & 1) == 0)
    {
      id v4 = sub_1E0DFDB30();
      if (v4)
      {
        uint64_t v5 = v4;
        objc_msgSend(v4, sel_setHidden_, 1);
      }
    }
  }
}

void sub_1E0DFF0AC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1E4E41170](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) == 1)
    {
      id v4 = sub_1E0DFDB30();
      if (v4)
      {
        uint64_t v5 = v4;
        objc_msgSend(v4, sel_setHidden_, 0);
      }
    }
  }
}

uint64_t sub_1E0DFF130()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1E0DFF168()
{
  sub_1E0DFF0AC(v0);
}

void sub_1E0DFF170(char a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  if ((a1 & 1) == 0)
  {
    if (qword_1EAD6D4D0 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_1E0ECC010();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EAD74120);
    uint64_t v5 = sub_1E0ECBFF0();
    os_log_type_t v6 = sub_1E0ECD540();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v13 = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t v9 = sub_1E0ECDBC0();
      sub_1E0DED7E4(v9, v10, &v13);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v5, v6, "[%{public}s] scrollViewDidEndDragging without deceleration: resuming data fetching", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v8, -1, -1);
      MEMORY[0x1E4E41080](v7, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xD8))(v11, v12);
    BaseCalendarViewController.updateYearOverlay()();
  }
}

void sub_1E0DFF340(const char *a1)
{
  uint64_t v3 = v1;
  swift_getObjectType();
  if (qword_1EAD6D4D0 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1E0ECC010();
  __swift_project_value_buffer(v4, (uint64_t)qword_1EAD74120);
  uint64_t v5 = sub_1E0ECBFF0();
  os_log_type_t v6 = sub_1E0ECD540();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v9 = sub_1E0ECDBC0();
    sub_1E0DED7E4(v9, v10, &v13);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1E0B26000, v5, v6, a1, v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v8, -1, -1);
    MEMORY[0x1E4E41080](v7, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xD8))(v11, v12);
  BaseCalendarViewController.updateYearOverlay()();
}

void sub_1E0DFF510(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD6C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0DFF564()
{
  sub_1E0DFF02C(v0);
}

uint64_t sub_1E0DFF56C(uint64_t a1, uint64_t a2)
{
  sub_1E0DFF510(0, &qword_1EAD6DC88, MEMORY[0x1E4F27DE8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DFF5EC(uint64_t a1, uint64_t a2)
{
  sub_1E0DFF510(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0DFF66C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1E0DFF510(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id sub_1E0DFF6C8@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t method lookup function for BaseCalendarViewController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BaseCalendarViewController);
}

uint64_t dispatch thunk of BaseCalendarViewController.collectionViewDataSource.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of BaseCalendarViewController.collectionViewDataSource.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of BaseCalendarViewController.collectionViewDataSource.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of BaseCalendarViewController.calendarViewLayout.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BaseCalendarViewController.resumeDataFetching()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

void sub_1E0DFF84C(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_1E0DFF85C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t static DailyModelProvider.FetchState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v9);
  v30[0] = (char *)v30 - v10;
  v30[1] = a4;
  void v30[2] = a3;
  uint64_t State = type metadata accessor for DailyModelProvider.FetchState();
  uint64_t v12 = *(void *)(State - 8);
  MEMORY[0x1F4188790](State, v13);
  id v32 = (char *)v30 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](TupleTypeMetadata2, v17);
  unsigned int v20 = (char *)v30 - v19;
  uint64_t v21 = (char *)v30 + *(int *)(v18 + 48) - v19;
  uint64_t v31 = v12;
  double v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22((char *)v30 - v19, a1, State);
  v22(v21, v33, State);
  uint64_t v33 = v8;
  id v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  switch(v23(v20, 3, AssociatedTypeWitness))
  {
    case 1u:
      if (v23(v21, 3, AssociatedTypeWitness) != 1) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 2u:
      if (v23(v21, 3, AssociatedTypeWitness) != 2) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 3u:
      if (v23(v21, 3, AssociatedTypeWitness) != 3) {
        goto LABEL_9;
      }
LABEL_5:
      char v24 = 1;
      goto LABEL_11;
    default:
      v22(v32, (uint64_t)v20, State);
      if (v23(v21, 3, AssociatedTypeWitness))
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v32, AssociatedTypeWitness);
LABEL_9:
        char v24 = 0;
      }
      else
      {
        uint64_t v25 = v33;
        uint64_t v26 = v30[0];
        (*(void (**)(void, char *, uint64_t))(v33 + 32))(v30[0], v21, AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        double v27 = v32;
        char v24 = sub_1E0ECD100();
        id v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v28(v26, AssociatedTypeWitness);
        v28((uint64_t)v27, AssociatedTypeWitness);
LABEL_11:
        uint64_t v16 = v31;
        TupleTypeMetadata2 = State;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v20, TupleTypeMetadata2);
      return v24 & 1;
  }
}

uint64_t type metadata accessor for DailyModelProvider.FetchState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1E0DFFC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DailyModelProvider.FetchState.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t DailyModelProvider.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t DailyModelProvider.daysUpdatedPublisher.getter()
{
  return swift_retain();
}

uint64_t sub_1E0DFFCFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  uint64_t v4 = sub_1E0ECBC20();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1E0DFFD8C(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  uint64_t v4 = sub_1E0ECBC20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_1E0DFFE24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  uint64_t v4 = sub_1E0ECBC20();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t *DailyModelProvider.__allocating_init(dataSource:minimumBufferDuration:prefetchMultiplier:cacheLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_allocObject();
  uint64_t v10 = sub_1E0E05FA0(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 8))(a1);
  return v10;
}

uint64_t *DailyModelProvider.init(dataSource:minimumBufferDuration:prefetchMultiplier:cacheLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = sub_1E0E05FA0(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 80) - 8) + 8))(a1);
  return v7;
}

uint64_t *DailyModelProvider.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *v0;
  if (*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)))
  {
    swift_retain();
    sub_1E0ECC130();
    swift_release();
    uint64_t v2 = *v0;
  }
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(v2 + 96));
  swift_release();
  uint64_t v4 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v5 = sub_1E0ECBC20();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6((uint64_t)v1 + *(void *)(*v1 + 120), v5);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1E0E07B90((uint64_t)v1 + *(void *)(*v1 + 168), &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  return v1;
}

uint64_t DailyModelProvider.__deallocating_deinit()
{
  DailyModelProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1E0E001F4(uint64_t a1)
{
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v7 - v4;
  sub_1E0E062D4(a1, (uint64_t)&v7 - v4);
  return sub_1E0E00D7C((uint64_t)v5);
}

uint64_t sub_1E0E00298(uint64_t a1)
{
  uint64_t v82 = *v1;
  uint64_t v3 = v82;
  sub_1E0E06240();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v4, v7);
  uint64_t v85 = (uint64_t)v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v83 = (uint64_t)v79 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v91 = (char *)v79 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v92 = (uint64_t)v79 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17, v19);
  uint64_t v87 = (uint64_t)v79 - v21;
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v88 = (uint64_t)v79 - v24;
  MEMORY[0x1F4188790](v23, v25);
  double v27 = (char *)v79 - v26;
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  uint64_t v30 = MEMORY[0x1F4188790](v28 - 8, v29);
  uint64_t v84 = (uint64_t)v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v30, v32);
  os_log_t v89 = (os_log_t)((char *)v79 - v34);
  uint64_t v36 = MEMORY[0x1F4188790](v33, v35);
  uint64_t v38 = (char *)v79 - v37;
  MEMORY[0x1F4188790](v36, v39);
  uint64_t v41 = (char *)v79 - v40;
  sub_1E0E0833C();
  uint64_t v43 = v42 - 8;
  MEMORY[0x1F4188790](v42, v44);
  uint64_t v46 = (char *)v79 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = *(void *)(v3 + 168);
  unint64_t v93 = v1;
  uint64_t v48 = (uint64_t)v1 + v47;
  swift_beginAccess();
  uint64_t v49 = *(int *)(v43 + 56);
  uint64_t v50 = v5;
  uint64_t v51 = (uint64_t)&v46[v49];
  uint64_t v90 = a1;
  sub_1E0E062D4(a1, (uint64_t)v46);
  sub_1E0E062D4(v48, v51);
  uint64_t v86 = v6;
  uint64_t v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v52((uint64_t)v46, 1, v5) == 1)
  {
    if (v52(v51, 1, v5) == 1) {
      return sub_1E0E07B90((uint64_t)v46, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
    }
    goto LABEL_6;
  }
  sub_1E0E062D4((uint64_t)v46, (uint64_t)v41);
  if (v52(v51, 1, v5) == 1)
  {
    sub_1E0E083BC((uint64_t)v41, (uint64_t (*)(void))sub_1E0E06240);
LABEL_6:
    sub_1E0E083BC((uint64_t)v46, (uint64_t (*)(void))sub_1E0E0833C);
LABEL_11:
    uint64_t v58 = v93;
    goto LABEL_12;
  }
  uint64_t v80 = v48;
  uint64_t v81 = v5;
  sub_1E0E07890(v51, (uint64_t)v27);
  sub_1E0ECCF30();
  v79[1] = sub_1E0E07FDC(&qword_1EAD6DE30, MEMORY[0x1E4F295A0]);
  char v54 = sub_1E0ECD100();
  uint64_t v55 = v88;
  sub_1E0E07EE4((uint64_t)v41, v88);
  uint64_t v56 = v87;
  sub_1E0E07EE4((uint64_t)v27, v87);
  if ((v54 & 1) == 0)
  {
    sub_1E0E083BC(v56, (uint64_t (*)(void))sub_1E0E06240);
    sub_1E0E083BC(v55, (uint64_t (*)(void))sub_1E0E06240);
    sub_1E0E083BC((uint64_t)v27, (uint64_t (*)(void))sub_1E0E06240);
    sub_1E0E083BC((uint64_t)v41, (uint64_t (*)(void))sub_1E0E06240);
    sub_1E0E07B90((uint64_t)v46, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
    uint64_t v48 = v80;
    uint64_t v50 = v81;
    goto LABEL_11;
  }
  char v57 = sub_1E0ECD100();
  sub_1E0E083BC(v56, (uint64_t (*)(void))sub_1E0E06240);
  sub_1E0E083BC(v55, (uint64_t (*)(void))sub_1E0E06240);
  sub_1E0E083BC((uint64_t)v27, (uint64_t (*)(void))sub_1E0E06240);
  uint64_t v50 = v81;
  sub_1E0E083BC((uint64_t)v41, (uint64_t (*)(void))sub_1E0E06240);
  uint64_t result = sub_1E0E07B90((uint64_t)v46, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  uint64_t v58 = v93;
  uint64_t v48 = v80;
  if (v57) {
    return result;
  }
LABEL_12:
  sub_1E0E062D4(v48, (uint64_t)v38);
  if (v52((uint64_t)v38, 1, v50) != 1)
  {
    uint64_t v60 = v92;
    sub_1E0E07890((uint64_t)v38, v92);
    uint64_t v61 = *(void *)((char *)v58 + *(void *)(*v58 + 144));
    uint64_t v62 = *(void *)((char *)v58 + *(void *)(*v58 + 152));
    if ((unsigned __int128)(v61 * (__int128)v62) >> 64 == (v61 * v62) >> 63)
    {
      uint64_t v63 = v50;
      uint64_t v50 = (uint64_t)v91;
      sub_1E0ECD490();
      uint64_t v81 = v63;
      sub_1E0ECCF30();
      sub_1E0E07FDC(&qword_1EAD6DDA8, MEMORY[0x1E4F295A0]);
      sub_1E0ECD700();
      double v27 = *(char **)((char *)v58 + *(void *)(*v58 + 160));
      if ((uint64_t)v27 >= v95[0])
      {
LABEL_22:
        sub_1E0E0101C(v60);
        sub_1E0E083BC(v50, (uint64_t (*)(void))sub_1E0E06240);
        return sub_1E0E083BC(v60, (uint64_t (*)(void))sub_1E0E06240);
      }
      if (qword_1EAD6D4D0 == -1)
      {
LABEL_18:
        uint64_t v64 = sub_1E0ECC010();
        __swift_project_value_buffer(v64, (uint64_t)qword_1EAD74120);
        uint64_t v65 = v83;
        sub_1E0E07EE4(v60, v83);
        swift_retain_n();
        uint64_t v66 = sub_1E0ECBFF0();
        os_log_type_t v67 = sub_1E0ECD530();
        LODWORD(v93) = v67;
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = swift_slowAlloc();
          uint64_t v90 = swift_slowAlloc();
          v95[0] = v90;
          *(_DWORD *)uint64_t v68 = 136447234;
          os_log_t v89 = v66;
          uint64_t v69 = sub_1E0ECDBC0();
          uint64_t v94 = sub_1E0DED7E4(v69, v70, v95);
          sub_1E0ECD6D0();
          swift_bridgeObjectRelease();
          *(_WORD *)(v68 + 12) = 2050;
          sub_1E0ECD700();
          uint64_t v71 = v94;
          sub_1E0E083BC(v65, (uint64_t (*)(void))sub_1E0E06240);
          uint64_t v94 = v71;
          sub_1E0ECD6D0();
          *(_WORD *)(v68 + 22) = 2048;
          swift_release();
          uint64_t v94 = v61;
          sub_1E0ECD6D0();
          swift_release();
          *(_WORD *)(v68 + 32) = 2048;
          swift_release();
          uint64_t v94 = v62;
          sub_1E0ECD6D0();
          swift_release();
          *(_WORD *)(v68 + 42) = 2048;
          swift_release();
          uint64_t v94 = (uint64_t)v27;
          sub_1E0ECD6D0();
          swift_release();
          os_log_t v72 = v89;
          _os_log_impl(&dword_1E0B26000, v89, (os_log_type_t)v93, "[%{public}s] Cache limit too small for active day range: %{public}ld +/- %ld * %ld > %ld", (uint8_t *)v68, 0x34u);
          uint64_t v73 = v90;
          swift_arrayDestroy();
          MEMORY[0x1E4E41080](v73, -1, -1);
          uint64_t v74 = v68;
          uint64_t v50 = (uint64_t)v91;
          uint64_t v60 = v92;
          MEMORY[0x1E4E41080](v74, -1, -1);
        }
        else
        {
          swift_release_n();
          sub_1E0E083BC(v65, (uint64_t (*)(void))sub_1E0E06240);

          swift_release_n();
        }
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_18;
  }
  sub_1E0E07B90((uint64_t)v38, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  os_log_t v59 = v89;
  sub_1E0E062D4(v90, (uint64_t)v89);
  if (v52((uint64_t)v59, 1, v50) == 1) {
    return sub_1E0E07B90((uint64_t)v59, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  }
  uint64_t v75 = (uint64_t)v59;
  uint64_t v76 = v85;
  sub_1E0E07890(v75, v85);
  uint64_t v77 = v76;
  uint64_t v78 = v84;
  sub_1E0E07890(v77, v84);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v78, 0, 1, v50);
  swift_beginAccess();
  sub_1E0E0841C(v78, v48);
  return swift_endAccess();
}

uint64_t sub_1E0E00D1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 168);
  swift_beginAccess();
  return sub_1E0E062D4(v3, a1);
}

uint64_t sub_1E0E00D7C(uint64_t a1)
{
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = &v9[-v5];
  uint64_t v7 = v1 + *(void *)(*(void *)v1 + 168);
  swift_beginAccess();
  sub_1E0E062D4(v7, (uint64_t)v6);
  swift_beginAccess();
  sub_1E0E06354(a1, v7);
  swift_endAccess();
  sub_1E0E00298((uint64_t)v6);
  sub_1E0E07B90(a1, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  return sub_1E0E07B90((uint64_t)v6, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
}

void (*sub_1E0E00EA0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[4] = malloc(v5);
  uint64_t v6 = malloc(v5);
  void v3[5] = v6;
  uint64_t v7 = v1 + *(void *)(*(void *)v1 + 168);
  swift_beginAccess();
  sub_1E0E062D4(v7, (uint64_t)v6);
  return sub_1E0E00F84;
}

void sub_1E0E00F84(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    sub_1E0E062D4((uint64_t)v4, (uint64_t)v3);
    sub_1E0E00D7C((uint64_t)v3);
    sub_1E0E07B90((uint64_t)v4, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  }
  else
  {
    sub_1E0E00D7C((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_1E0E0101C(uint64_t a1)
{
  uint64_t v112 = a1;
  uint64_t v108 = *v1;
  uint64_t v2 = v108;
  sub_1E0E079A4(0, &qword_1EAD6E4D0, MEMORY[0x1E4FBCFE8]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  char v103 = (char *)&v94 - v5;
  sub_1E0E07F48();
  uint64_t v100 = v6;
  MEMORY[0x1F4188790](v6, v7);
  unsigned int v120 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1E0ECBBE0();
  uint64_t v105 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v101 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v12;
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v110 = (char *)&v94 - v14;
  sub_1E0E06240();
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1E0ECBC20();
  uint64_t v119 = *(void *)(v19 - 8);
  uint64_t v20 = v119;
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  unint64_t v99 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  double v27 = (char *)&v94 - v26;
  uint64_t v29 = MEMORY[0x1F4188790](v25, v28);
  v117 = (char *)&v94 - v30;
  uint64_t v32 = MEMORY[0x1F4188790](v29, v31);
  uint64_t v114 = (char *)&v94 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32, v34);
  uint64_t v37 = (char *)&v94 - v36;
  uint64_t v39 = MEMORY[0x1F4188790](v35, v38);
  uint64_t v41 = (char *)&v94 - v40;
  uint64_t v43 = MEMORY[0x1F4188790](v39, v42);
  uint64_t v45 = (char *)&v94 - v44;
  uint64_t v47 = MEMORY[0x1F4188790](v43, v46);
  uint64_t v116 = (char *)&v94 - v48;
  MEMORY[0x1F4188790](v47, v49);
  uint64_t v113 = (char *)&v94 - v50;
  uint64_t v51 = *(void *)((char *)v1 + *(void *)(v2 + 144));
  v118 = v1;
  uint64_t v104 = v51;
  sub_1E0ECD490();
  sub_1E0ECD4A0();
  uint64_t v98 = v18;
  sub_1E0E083BC((uint64_t)v18, (uint64_t (*)(void))sub_1E0E06240);
  uint64_t v52 = v41;
  uint64_t v115 = v41;
  sub_1E0DFFCFC((uint64_t)v41);
  uint64_t v53 = v20 + 16;
  char v54 = *(void (**)(void))(v20 + 16);
  uint64_t v111 = v37;
  ((void (*)(char *, char *, uint64_t))v54)(v37, v45, v19);
  ((void (*)(char *, char *, uint64_t))v54)(v117, v45, v19);
  ((void (*)(char *, char *, uint64_t))v54)(v27, v52, v19);
  uint64_t v55 = sub_1E0E07FDC(&qword_1EAD6DDB0, MEMORY[0x1E4F27D00]);
  uint64_t v56 = v114;
  uint64_t v107 = v27;
  sub_1E0ECD780();
  sub_1E0ECD770();
  char v57 = *(void (**)(char *, uint64_t))(v119 + 8);
  v119 += 8;
  v57(v56, v19);
  uint64_t v58 = v115;
  v57(v115, v19);
  v57(v45, v19);
  sub_1E0DFFE24((uint64_t)v45);
  os_log_t v59 = v58;
  uint64_t v60 = v116;
  ((void (*)(char *, char *, uint64_t))v54)(v59, v116, v19);
  ((void (*)(char *, char *, uint64_t))v54)(v56, v60, v19);
  uint64_t v97 = v54;
  uint64_t v96 = v53;
  ((void (*)(char *, char *, uint64_t))v54)(v117, v45, v19);
  uint64_t v61 = (uint64_t)v111;
  sub_1E0ECD780();
  uint64_t v62 = (uint64_t)v115;
  uint64_t v106 = v55;
  uint64_t v63 = v113;
  sub_1E0ECD770();
  v57((char *)v61, v19);
  uint64_t v109 = v45;
  v57(v45, v19);
  v57(v60, v19);
  uint64_t result = sub_1E0ECBBB0();
  uint64_t v65 = *v118;
  if (result)
  {
    (*(void (**)(void))(*(void *)(v108 + 88) + 40))(*(void *)(v108 + 80));
    return ((uint64_t (*)(char *, uint64_t))v57)(v63, v19);
  }
  else
  {
    uint64_t v94 = (void (*)(uint64_t, uint64_t))v57;
    uint64_t v95 = v19;
    if ((unsigned __int128)(v104 * (__int128)*(uint64_t *)((char *)v118 + *(void *)(v65 + 152))) >> 64 == (v104 * *(void *)((char *)v118 + *(void *)(v65 + 152))) >> 63)
    {
      uint64_t v66 = (uint64_t)v98;
      sub_1E0ECD490();
      uint64_t v67 = v62;
      sub_1E0ECD4A0();
      sub_1E0E083BC(v66, (uint64_t (*)(void))sub_1E0E06240);
      uint64_t v68 = (uint64_t)v111;
      sub_1E0DFFCFC((uint64_t)v111);
      uint64_t v69 = v95;
      unint64_t v70 = v97;
      ((void (*)(char *, uint64_t, uint64_t))v97)(v114, v67, v95);
      v70();
      ((void (*)(char *, uint64_t, uint64_t))v70)(v99, v68, v69);
      uint64_t v71 = v117;
      sub_1E0ECD780();
      sub_1E0ECD770();
      os_log_t v72 = v94;
      v94((uint64_t)v71, v69);
      v72(v68, v69);
      v72(v67, v69);
      sub_1E0DFFE24(v67);
      uint64_t v73 = v109;
      ((void (*)(uint64_t, char *, uint64_t))v70)(v68, v109, v69);
      ((void (*)(char *, char *, uint64_t))v70)(v71, v73, v69);
      ((void (*)(char *, uint64_t, uint64_t))v70)(v107, v67, v69);
      uint64_t v74 = v114;
      sub_1E0ECD780();
      uint64_t v75 = v116;
      sub_1E0ECD770();
      v72((uint64_t)v74, v69);
      v72(v67, v69);
      v72((uint64_t)v109, v69);
      sub_1E0ECBBF0();
      v72((uint64_t)v75, v69);
      uint64_t v76 = (uint64_t)v120;
      sub_1E0ECBBD0();
      uint64_t v77 = (uint64_t *)(v76 + *(int *)(v100 + 36));
      sub_1E0E07FDC(&qword_1EAD6DE40, MEMORY[0x1E4F27CE0]);
      uint64_t v78 = *v77;
      sub_1E0ECD460();
      uint64_t v79 = v101;
      if (v78 != v121[0])
      {
        uint64_t v80 = (void (**)(char *, char *, uint64_t))(v105 + 16);
        uint64_t v81 = (void (**)(char *, uint64_t))(v105 + 8);
        do
        {
          uint64_t v82 = (void (*)(uint64_t *, void))sub_1E0ECD480();
          v82(v121, 0);
          (*v80)(v79, v120, v9);
          sub_1E0ECD470();
          (*v81)(v79, v9);
          swift_beginAccess();
          uint64_t v76 = (uint64_t)v120;
          sub_1E0ECBB90();
          swift_endAccess();
          uint64_t v83 = *v77;
          sub_1E0ECD460();
        }
        while (v83 != v121[0]);
      }
      sub_1E0E083BC(v76, (uint64_t (*)(void))sub_1E0E07F48);
      uint64_t v84 = sub_1E0ECD3E0();
      uint64_t v85 = (uint64_t)v103;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v103, 1, 1, v84);
      uint64_t v86 = v105;
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v79, v110, v9);
      sub_1E0ECD3B0();
      uint64_t v87 = v118;
      swift_retain();
      uint64_t v88 = sub_1E0ECD3A0();
      unint64_t v89 = (*(unsigned __int8 *)(v86 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
      unint64_t v90 = (v102 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v91 = (char *)swift_allocObject();
      uint64_t v92 = MEMORY[0x1E4FBCFD8];
      *((void *)v91 + 2) = v88;
      *((void *)v91 + 3) = v92;
      uint64_t v93 = v108;
      *((void *)v91 + 4) = *(void *)(v108 + 80);
      *((void *)v91 + 5) = *(void *)(v93 + 88);
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(&v91[v89], v79, v9);
      *(void *)&v91[v90] = v87;
      *(void *)&v91[(v90 + 15) & 0xFFFFFFFFFFFFFFF8] = v93;
      sub_1E0E90D64(v85, (uint64_t)&unk_1EAD6DE50, (uint64_t)v91);
      swift_release();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v110, v9);
      return ((uint64_t (*)(char *, uint64_t))v94)(v113, v95);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1E0E01C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v6[31] = a5;
  v6[32] = a6;
  v6[30] = a4;
  v6[33] = *a5;
  sub_1E0E06240();
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  uint64_t v7 = sub_1E0ECBBE0();
  v6[36] = v7;
  v6[37] = *(void *)(v7 - 8);
  v6[38] = swift_task_alloc();
  sub_1E0E07F48();
  v6[39] = v8;
  v6[40] = swift_task_alloc();
  sub_1E0ECD3B0();
  v6[41] = sub_1E0ECD3A0();
  uint64_t v10 = sub_1E0ECD390();
  v6[42] = v10;
  v6[43] = v9;
  return MEMORY[0x1F4188298](sub_1E0E01DC0, v10, v9);
}

uint64_t sub_1E0E01DC0()
{
  uint64_t v32 = v0;
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(uint64_t **)(v0 + 248);
  sub_1E0ECBBD0();
  uint64_t v4 = *(int *)(v2 + 36);
  *(_DWORD *)(v0 + 432) = v4;
  uint64_t v5 = *v3;
  *(void *)(v0 + 352) = *(void *)(*v3 + 96);
  *(void *)(v0 + 360) = *(void *)(v5 + 120);
  *(void *)(v0 + 368) = *(void *)(v5 + 104);
  uint64_t v6 = *(void *)(v1 + v4);
  *(void *)(v0 + 376) = sub_1E0E07FDC(&qword_1EAD6DE40, MEMORY[0x1E4F27CE0]);
  sub_1E0ECD460();
  if (v6 == *(void *)(v0 + 224))
  {
    sub_1E0E083BC(*(void *)(v0 + 320), (uint64_t (*)(void))sub_1E0E07F48);
    swift_release();
    sub_1E0E05248();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v10 = *(void *)(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v13 = (void (*)(uint64_t, void))sub_1E0ECD480();
    uint64_t v15 = *v14;
    *(void *)(v0 + 384) = *v14;
    uint64_t v30 = v14[1];
    *(void *)(v0 + 392) = v30;
    v13(v0 + 16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v9, v12);
    sub_1E0ECD470();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    if (qword_1EAD6D4D0 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_1E0ECC010();
    *(void *)(v0 + 400) = __swift_project_value_buffer(v16, (uint64_t)qword_1EAD74120);
    uint64_t v17 = sub_1E0ECBFF0();
    os_log_type_t v18 = sub_1E0ECD510();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v31 = v28;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v20 = sub_1E0ECDBC0();
      *(void *)(v0 + 200) = sub_1E0DED7E4(v20, v21, &v31);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v0 + 208) = v15;
      *(void *)(v0 + 216) = v30;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0xE000000000000000;
      sub_1E0ECD8C0();
      sub_1E0ECD250();
      sub_1E0ECD8C0();
      *(void *)(v0 + 232) = sub_1E0DED7E4(*(void *)(v0 + 72), *(void *)(v0 + 80), &v31);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v17, v18, "[%{public}s] Fetching values in %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v28, -1, -1);
      MEMORY[0x1E4E41080](v19, -1, -1);
    }
    else
    {
    }
    uint64_t v22 = *(void *)(v0 + 264);
    sub_1E0ECD4B0();
    uint64_t v25 = v22 + 80;
    uint64_t v24 = *(void *)(v22 + 80);
    uint64_t v23 = *(void *)(v25 + 8);
    type = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 24) + **(int **)(v23 + 24));
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_1E0E02314;
    uint64_t v27 = *(void *)(v0 + 280);
    return type(v27, v24, v23);
  }
}

uint64_t sub_1E0E02314(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[52] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[35];
  if (v1)
  {
    sub_1E0E083BC(v5, (uint64_t (*)(void))sub_1E0E06240);
    uint64_t v6 = v4[42];
    uint64_t v7 = v4[43];
    uint64_t v8 = sub_1E0E02BA8;
  }
  else
  {
    v4[53] = a1;
    sub_1E0E083BC(v5, (uint64_t (*)(void))sub_1E0E06240);
    uint64_t v6 = v4[42];
    uint64_t v7 = v4[43];
    uint64_t v8 = sub_1E0E02484;
  }
  return MEMORY[0x1F4188298](v8, v6, v7);
}

uint64_t sub_1E0E02484()
{
  uint64_t v38 = v0;
  sub_1E0E036DC();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1E0ECBFF0();
  os_log_type_t v2 = sub_1E0ECD510();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = *(void *)(v0 + 384);
    uint64_t v3 = *(void *)(v0 + 392);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v37 = v33;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v6 = sub_1E0ECDBC0();
    *(void *)(v0 + 160) = sub_1E0DED7E4(v6, v7, &v37);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v0 + 176) = v3;
    *(void *)(v0 + 168) = v4;
    *(void *)(v0 + 88) = 0;
    *(void *)(v0 + 96) = 0xE000000000000000;
    sub_1E0ECD8C0();
    sub_1E0ECD250();
    sub_1E0ECD8C0();
    *(void *)(v0 + 192) = sub_1E0DED7E4(*(void *)(v0 + 88), *(void *)(v0 + 96), &v37);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1E0B26000, v1, v2, "[%{public}s] Finished fetching in %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v33, -1, -1);
    MEMORY[0x1E4E41080](v5, -1, -1);
  }

  uint64_t v8 = *(int *)(v0 + 432);
  uint64_t v9 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 272);
  swift_beginAccess();
  sub_1E0ECBBA0();
  swift_endAccess();
  sub_1E0ECD4B0();
  sub_1E0ECC150();
  sub_1E0E083BC(v10, (uint64_t (*)(void))sub_1E0E06240);
  uint64_t v11 = *(void *)(v9 + v8);
  sub_1E0ECD460();
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v13 = *(void *)(v0 + 304);
  if (v11 == *(void *)(v0 + 224))
  {
    sub_1E0E083BC(*(void *)(v0 + 320), (uint64_t (*)(void))sub_1E0E07F48);
    swift_release();
    sub_1E0E05248();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 296);
    os_log_type_t v18 = (void (*)(uint64_t, void))sub_1E0ECD480();
    uint64_t v20 = *v19;
    *(void *)(v0 + 384) = *v19;
    uint64_t v36 = v19[1];
    *(void *)(v0 + 392) = v36;
    v18(v0 + 16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v13, v12, v17);
    sub_1E0ECD470();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v17);
    if (qword_1EAD6D4D0 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_1E0ECC010();
    *(void *)(v0 + 400) = __swift_project_value_buffer(v21, (uint64_t)qword_1EAD74120);
    uint64_t v22 = sub_1E0ECBFF0();
    os_log_type_t v23 = sub_1E0ECD510();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v37 = v34;
      *(_DWORD *)uint64_t v24 = 136446466;
      uint64_t v25 = sub_1E0ECDBC0();
      *(void *)(v0 + 200) = sub_1E0DED7E4(v25, v26, &v37);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      *(void *)(v0 + 208) = v20;
      *(void *)(v0 + 216) = v36;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0xE000000000000000;
      sub_1E0ECD8C0();
      sub_1E0ECD250();
      sub_1E0ECD8C0();
      *(void *)(v0 + 232) = sub_1E0DED7E4(*(void *)(v0 + 72), *(void *)(v0 + 80), &v37);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v22, v23, "[%{public}s] Fetching values in %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v34, -1, -1);
      MEMORY[0x1E4E41080](v24, -1, -1);
    }

    uint64_t v27 = *(void *)(v0 + 264);
    sub_1E0ECD4B0();
    uint64_t v30 = v27 + 80;
    uint64_t v29 = *(void *)(v27 + 80);
    uint64_t v28 = *(void *)(v30 + 8);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 24) + **(int **)(v28 + 24));
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v31;
    void *v31 = v0;
    v31[1] = sub_1E0E02314;
    uint64_t v32 = *(void *)(v0 + 280);
    return v35(v32, v29, v28);
  }
}

uint64_t sub_1E0E02BA8()
{
  uint64_t v46 = v0;
  uint64_t v1 = *(void **)(v0 + 416);
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_1E0ECBFF0();
  os_log_type_t v5 = sub_1E0ECD520();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 416);
    uint64_t v8 = *(void *)(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 392);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v45 = v41;
    *(_DWORD *)uint64_t v9 = 136446722;
    uint64_t v10 = sub_1E0ECDBC0();
    *(void *)(v0 + 184) = sub_1E0DED7E4(v10, v11, &v45);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    *(void *)(v0 + 128) = v8;
    *(void *)(v0 + 120) = v7;
    *(void *)(v0 + 104) = 0;
    *(void *)(v0 + 112) = 0xE000000000000000;
    sub_1E0ECD8C0();
    sub_1E0ECD250();
    sub_1E0ECD8C0();
    *(void *)(v0 + 136) = sub_1E0DED7E4(*(void *)(v0 + 104), *(void *)(v0 + 112), &v45);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2082;
    *(void *)(v0 + 144) = v6;
    id v12 = v6;
    sub_1E0DFCAE0();
    uint64_t v13 = sub_1E0ECD200();
    *(void *)(v0 + 152) = sub_1E0DED7E4(v13, v14, &v45);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1E0B26000, v4, v5, "[%{public}s] Error fetching values in %{public}s: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v41, -1, -1);
    MEMORY[0x1E4E41080](v9, -1, -1);
  }
  else
  {
    uint64_t v15 = *(void **)(v0 + 416);
  }
  uint64_t v16 = *(int *)(v0 + 432);
  uint64_t v17 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 272);
  swift_beginAccess();
  sub_1E0ECBBA0();
  swift_endAccess();
  sub_1E0ECD4B0();
  sub_1E0ECC150();
  sub_1E0E083BC(v18, (uint64_t (*)(void))sub_1E0E06240);
  uint64_t v19 = *(void *)(v17 + v16);
  sub_1E0ECD460();
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 304);
  if (v19 == *(void *)(v0 + 224))
  {
    sub_1E0E083BC(*(void *)(v0 + 320), (uint64_t (*)(void))sub_1E0E07F48);
    swift_release();
    sub_1E0E05248();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    uint64_t v25 = *(void *)(v0 + 288);
    uint64_t v24 = *(void *)(v0 + 296);
    unint64_t v26 = (void (*)(uint64_t, void))sub_1E0ECD480();
    uint64_t v28 = *v27;
    *(void *)(v0 + 384) = *v27;
    uint64_t v44 = v27[1];
    *(void *)(v0 + 392) = v44;
    v26(v0 + 16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v21, v20, v25);
    sub_1E0ECD470();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v25);
    if (qword_1EAD6D4D0 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_1E0ECC010();
    *(void *)(v0 + 400) = __swift_project_value_buffer(v29, (uint64_t)qword_1EAD74120);
    uint64_t v30 = sub_1E0ECBFF0();
    os_log_type_t v31 = sub_1E0ECD510();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t type = swift_slowAlloc();
      uint64_t v45 = type;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v33 = sub_1E0ECDBC0();
      *(void *)(v0 + 200) = sub_1E0DED7E4(v33, v34, &v45);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      *(void *)(v0 + 208) = v28;
      *(void *)(v0 + 216) = v44;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0xE000000000000000;
      sub_1E0ECD8C0();
      sub_1E0ECD250();
      sub_1E0ECD8C0();
      *(void *)(v0 + 232) = sub_1E0DED7E4(*(void *)(v0 + 72), *(void *)(v0 + 80), &v45);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v30, v31, "[%{public}s] Fetching values in %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](type, -1, -1);
      MEMORY[0x1E4E41080](v32, -1, -1);
    }

    uint64_t v35 = *(void *)(v0 + 264);
    sub_1E0ECD4B0();
    uint64_t v38 = v35 + 80;
    uint64_t v37 = *(void *)(v35 + 80);
    uint64_t v36 = *(void *)(v38 + 8);
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 24) + **(int **)(v36 + 24));
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v39;
    void *v39 = v0;
    v39[1] = sub_1E0E02314;
    uint64_t v40 = *(void *)(v0 + 280);
    return v43(v40, v37, v36);
  }
}

uint64_t sub_1E0E03364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t v33 = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = sub_1E0ECBC20();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1E0ECD6C0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = (void *)((char *)v3 + *(void *)(v5 + 136));
  swift_beginAccess();
  uint64_t v17 = *v16;
  uint64_t v18 = sub_1E0ECCF30();
  uint64_t v19 = sub_1E0E07FDC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
  swift_bridgeObjectRetain();
  uint64_t v32 = a1;
  MEMORY[0x1E4E3E700](a1, v17, v18, AssociatedTypeWitness, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v21 = v33;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    sub_1E0DFFCFC((uint64_t)v9);
    sub_1E0ECCF10();
    char v22 = sub_1E0ECBBC0();
    uint64_t v23 = v31;
    uint64_t v24 = *(void (**)(char *, uint64_t))(v30 + 8);
    v24(v9, v31);
    if (v22)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, 3, 3, AssociatedTypeWitness);
    }
    else
    {
      sub_1E0DFFE24((uint64_t)v9);
      sub_1E0ECCF10();
      char v27 = sub_1E0ECBBC0();
      v24(v9, v23);
      if (v27) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = 2;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v21, v28, 3, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v26 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v33, v15, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v26, 0, 3, AssociatedTypeWitness);
  }
}

uint64_t sub_1E0E036DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  sub_1E0E06240();
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0ECD4B0();
  sub_1E0E03F7C((void (*)(char *))sub_1E0E07CE4, v1);
  sub_1E0E083BC((uint64_t)v6, (uint64_t (*)(void))sub_1E0E06240);
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v2 + 88);
  swift_beginAccess();
  sub_1E0ECCF30();
  swift_getAssociatedTypeWitness();
  sub_1E0E07FDC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
  sub_1E0ECD020();
  swift_bridgeObjectRetain();
  sub_1E0ECD010();
  swift_endAccess();
  swift_beginAccess();
  sub_1E0ECBB90();
  return swift_endAccess();
}

uint64_t sub_1E0E0390C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1E0ECD6C0();
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = sub_1E0ECCF30();
  MEMORY[0x1F4188790](v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
  swift_beginAccess();
  sub_1E0E07FDC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
  sub_1E0ECD020();
  sub_1E0ECD040();
  return swift_endAccess();
}

uint64_t sub_1E0E03B40(void (*a1)(void *), uint64_t a2)
{
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v43 = sub_1E0ECBB70();
  uint64_t v3 = *(void *)(v43 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v43, v4);
  uint64_t v45 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v49 = (char *)&v34 - v8;
  uint64_t v9 = sub_1E0ECBC20();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E07910();
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v36(v13, v2, v9);
  sub_1E0E07FDC(&qword_1EAD6DDC8, MEMORY[0x1E4F27D00]);
  uint64_t v37 = v13;
  sub_1E0ECD2A0();
  uint64_t v19 = *(int *)(v15 + 44);
  uint64_t v44 = v18;
  uint64_t v20 = &v18[v19];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v46 = v3 + 16;
  uint64_t v41 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v42 = v21;
  uint64_t v38 = v10 + 16;
  uint64_t v35 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v23 = v43;
  uint64_t v22 = (uint64_t)v44;
  while (1)
  {
    v42(v49, v20, v23);
    sub_1E0E07FDC(&qword_1EAD6DDC0, MEMORY[0x1E4F27D00]);
    uint64_t v24 = v20;
    uint64_t v25 = v45;
    sub_1E0ECD460();
    sub_1E0E07FDC(&qword_1EAD6DDD0, MEMORY[0x1E4F27CC8]);
    char v26 = sub_1E0ECD100();
    char v27 = *v41;
    (*v41)(v25, v23);
    v27(v49, v23);
    if (v26) {
      break;
    }
    uint64_t v20 = v24;
    uint64_t v28 = (void (*)(void *, void))sub_1E0ECD480();
    uint64_t v30 = *v29;
    v28(v48, 0);
    uint64_t v31 = v37;
    v36(v37, v22, v9);
    sub_1E0ECD470();
    (*v35)(v31, v9);
    v48[0] = v30;
    uint64_t v32 = v47;
    v39(v48);
    if (v32) {
      break;
    }
    uint64_t v47 = 0;
  }
  return sub_1E0E083BC(v22, (uint64_t (*)(void))sub_1E0E07910);
}

uint64_t sub_1E0E03F7C(void (*a1)(char *), char *a2)
{
  uint64_t v3 = v2;
  uint64_t v83 = (void (*)(char *))a1;
  sub_1E0E07828();
  uint64_t v89 = v5;
  uint64_t v7 = MEMORY[0x1F4188790](v5, v6);
  uint64_t v84 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v86 = (char *)&v76 - v10;
  sub_1E0E06240();
  uint64_t v12 = v11;
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v87 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14, v16);
  uint64_t v98 = (char *)&v76 - v18;
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v97 = (uint64_t)&v76 - v20;
  uint64_t v21 = sub_1E0ECCF30();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  uint64_t v82 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24, v26);
  uint64_t v85 = (char *)&v76 - v28;
  MEMORY[0x1F4188790](v27, v29);
  uint64_t v81 = (char *)&v76 - v30;
  sub_1E0E079A4(0, &qword_1EAD6DE10, MEMORY[0x1E4F295A0]);
  MEMORY[0x1F4188790](v31 - 8, v32);
  uint64_t v100 = (char *)&v76 - v33;
  sub_1E0E07D84();
  uint64_t v35 = v34 - 8;
  MEMORY[0x1F4188790](v34, v36);
  uint64_t v38 = (char *)&v76 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E07EE4(v3, (uint64_t)v38);
  uint64_t v39 = &v38[*(int *)(v35 + 44)];
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v40(v39, v3, v21);
  uint64_t v88 = v12;
  uint64_t v41 = *(int *)(v12 + 36);
  unint64_t v90 = v38;
  uint64_t v42 = (uint64_t)&v38[v41];
  uint64_t v43 = sub_1E0E07FDC(&qword_1EAD6DE30, MEMORY[0x1E4F295A0]);
  if (sub_1E0ECD100())
  {
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    uint64_t v45 = v90;
LABEL_9:
    v44(v100, 1, 1, v21);
    uint64_t v75 = (uint64_t)v45;
    return sub_1E0E083BC(v75, (uint64_t (*)(void))sub_1E0E07D84);
  }
  else
  {
    uint64_t v76 = v43;
    uint64_t v95 = (void (*)(void, void, void))v40;
    uint64_t v96 = v22 + 16;
    uint64_t v94 = (void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v79 = (void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v80 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    uint64_t v45 = v90;
    uint64_t v78 = a2;
    uint64_t v77 = v42;
    uint64_t v93 = v39;
    while (1)
    {
      uint64_t v46 = (void (*)(char *, char *, uint64_t))v95;
      v95(v100, v39, v21);
      uint64_t v47 = sub_1E0E07FDC(&qword_1EAD6F320, MEMORY[0x1E4F295A0]);
      if ((sub_1E0ECD0E0() & 1) == 0) {
        break;
      }
      uint64_t v48 = v84;
      uint64_t v49 = v45;
      uint64_t v50 = v86;
      uint64_t v51 = v89;
      uint64_t v52 = &v86[*(int *)(v89 + 48)];
      v46(v86, v49, v21);
      uint64_t v91 = v52;
      v46(v52, (char *)v42, v21);
      uint64_t v53 = &v48[*(int *)(v51 + 48)];
      v46(v48, v50, v21);
      v46(v53, v52, v21);
      uint64_t v92 = v47;
      char v54 = *v94;
      (*v94)(v98, v48, v21);
      uint64_t v55 = *v79;
      (*v79)(v53, v21);
      uint64_t v56 = *(int *)(v51 + 48);
      uint64_t v57 = v88;
      uint64_t v58 = &v48[v56];
      v54(v48, v50, v21);
      v54(v58, v91, v21);
      uint64_t v59 = (uint64_t)v98;
      uint64_t v60 = &v98[*(int *)(v57 + 36)];
      uint64_t v91 = (char *)v54;
      v54(v60, v58, v21);
      uint64_t v61 = v48;
      a2 = (char *)v55;
      v55(v61, v21);
      uint64_t v62 = v97;
      sub_1E0E07890(v59, v97);
      uint64_t v63 = v93;
      LOBYTE(v52) = sub_1E0ECD0E0();
      uint64_t v45 = v85;
      v95(v85, v63, v21);
      uint64_t v64 = v62;
      uint64_t v42 = v87;
      sub_1E0E07EE4(v64, v87);
      if ((v52 & 1) == 0) {
        goto LABEL_13;
      }
      char v65 = sub_1E0ECD0C0();
      sub_1E0E083BC(v42, (uint64_t (*)(void))sub_1E0E06240);
      uint64_t v66 = a2;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))a2)(v45, v21);
      if ((v65 & 1) == 0) {
        goto LABEL_14;
      }
      sub_1E0E083BC(v97, (uint64_t (*)(void))sub_1E0E06240);
      uint64_t v101 = 1;
      sub_1E0E07FDC(&qword_1EAD6DDA8, MEMORY[0x1E4F295A0]);
      uint64_t v68 = v81;
      uint64_t v69 = v93;
      sub_1E0ECD6F0();
      ((void (*)(char *, uint64_t))a2)(v69, v21);
      unint64_t v70 = v69;
      a2 = v91;
      ((void (*)(char *, char *, uint64_t))v91)(v69, v68, v21);
      uint64_t v44 = *v80;
      uint64_t v71 = v100;
      (*v80)(v100, 0, 1, v21);
      os_log_t v72 = v82;
      ((void (*)(char *, char *, uint64_t))a2)(v82, v71, v21);
      uint64_t v73 = v99;
      v83(v72);
      if (v73)
      {
        ((void (*)(char *, uint64_t))v66)(v72, v21);
        uint64_t v75 = (uint64_t)v90;
        return sub_1E0E083BC(v75, (uint64_t (*)(void))sub_1E0E07D84);
      }
      uint64_t v99 = 0;
      ((void (*)(char *, uint64_t))v66)(v72, v21);
      uint64_t v39 = v70;
      uint64_t v42 = v77;
      char v74 = sub_1E0ECD100();
      uint64_t v45 = v90;
      if (v74) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_13:
    sub_1E0E083BC(v42, (uint64_t (*)(void))sub_1E0E06240);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))a2)(v45, v21);
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t sub_1E0E047A0()
{
  uint64_t v27 = *v0;
  uint64_t v1 = v27;
  uint64_t v25 = (void (*)(uint64_t))MEMORY[0x1E4FBCC28];
  sub_1E0E079A4(0, &qword_1EAD6DDD8, MEMORY[0x1E4FBCC28]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v25 - v4;
  uint64_t v6 = sub_1E0ECCE80();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E079F8();
  uint64_t v26 = v11;
  uint64_t v28 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v1 + 88);
  uint64_t v16 = *(void *)(v1 + 80);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v16, v15);
  sub_1E0E07B50();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4FBCB38], v6);
  uint64_t v17 = (void *)sub_1E0ECD600();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  id v29 = v17;
  uint64_t v18 = sub_1E0ECD5B0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v5, 1, 1, v18);
  sub_1E0E07AE4();
  sub_1E0E07FDC(&qword_1EAD6DDF0, (void (*)(uint64_t))sub_1E0E07AE4);
  sub_1E0E07FDC(&qword_1EAD6DDF8, (void (*)(uint64_t))sub_1E0E07B50);
  sub_1E0ECC250();
  sub_1E0E07B90((uint64_t)v5, &qword_1EAD6DDD8, v25);

  swift_release();
  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = v16;
  void v19[3] = v15;
  v19[4] = v27;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v16;
  v21[3] = v15;
  v21[4] = v20;
  sub_1E0E07FDC(&qword_1EAD6DE00, (void (*)(uint64_t))sub_1E0E079F8);
  uint64_t v22 = v26;
  uint64_t v23 = sub_1E0ECC240();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v22);
  return v23;
}

void sub_1E0E04C38(void **a1)
{
  uint64_t v1 = *a1;
  if (qword_1EAD6D4D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1E0ECC010();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EAD74120);
  id v3 = v1;
  id v4 = v1;
  oslog = sub_1E0ECBFF0();
  os_log_type_t v5 = sub_1E0ECD540();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    uint64_t v8 = sub_1E0ECDBC0();
    sub_1E0DED7E4(v8, v9, &v14);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    id v10 = v1;
    sub_1E0E07C84();
    uint64_t v11 = sub_1E0ECD200();
    sub_1E0DED7E4(v11, v12, &v14);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1E0B26000, oslog, v5, "[%{public}s] Error observing model change: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v7, -1, -1);
    MEMORY[0x1E4E41080](v6, -1, -1);
  }
  else
  {
  }
}

uint64_t sub_1E0E04E74()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1E0E04ECC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1E0E04ECC()
{
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  MEMORY[0x1F4188790](v0 - 8, v1);
  id v3 = (char *)&v19[-1] - v2;
  sub_1E0E06240();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  unint64_t v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E00D1C((uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5) == 1) {
    return sub_1E0E07B90((uint64_t)v3, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  }
  sub_1E0E07890((uint64_t)v3, (uint64_t)v9);
  if (qword_1EAD6D4D0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1E0ECC010();
  __swift_project_value_buffer(v11, (uint64_t)qword_1EAD74120);
  unint64_t v12 = sub_1E0ECBFF0();
  os_log_type_t v13 = sub_1E0ECD540();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v19[0] = v15;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v16 = sub_1E0ECDBC0();
    uint64_t v18 = sub_1E0DED7E4(v16, v17, v19);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1E0B26000, v12, v13, "[%{public}s] Model change detected: reloading all data", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v15, -1, -1);
    MEMORY[0x1E4E41080](v14, -1, -1);
  }

  swift_beginAccess();
  sub_1E0ECBC00();
  swift_endAccess();
  swift_beginAccess();
  sub_1E0ECBC00();
  swift_endAccess();
  sub_1E0E0101C((uint64_t)v9);
  return sub_1E0E083BC((uint64_t)v9, (uint64_t (*)(void))sub_1E0E06240);
}

uint64_t sub_1E0E05248()
{
  uint64_t v1 = v0;
  sub_1E0E07828();
  uint64_t v107 = v2;
  uint64_t v4 = MEMORY[0x1F4188790](v2, v3);
  uint64_t v101 = (void (*)())((char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v99 = (char *)&v92 - v7;
  uint64_t v103 = sub_1E0ECBC20();
  uint64_t v105 = *(void *)(v103 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v103, v8);
  uint64_t v109 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  uint64_t v108 = (char *)&v92 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12, v14);
  uint64_t v104 = (char *)&v92 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15, v17);
  uint64_t v113 = (char *)&v92 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18, v20);
  uint64_t v102 = (uint64_t)&v92 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21, v23);
  uint64_t v114 = (uint64_t)&v92 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24, v26);
  uint64_t v111 = (char *)&v92 - v28;
  MEMORY[0x1F4188790](v27, v29);
  uint64_t v110 = (char *)&v92 - v30;
  uint64_t v31 = sub_1E0ECCF30();
  uint64_t v115 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v31, v32);
  uint64_t v106 = (char *)&v92 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33, v35);
  uint64_t v112 = (char *)&v92 - v36;
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  MEMORY[0x1F4188790](v37 - 8, v38);
  uint64_t v40 = (char *)&v92 - v39;
  sub_1E0E06240();
  uint64_t v42 = v41;
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v41, v44);
  uint64_t v98 = (char *)&v92 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x1F4188790](v45, v47);
  uint64_t v100 = (uint64_t)&v92 - v49;
  MEMORY[0x1F4188790](v48, v50);
  uint64_t v52 = (char *)&v92 - v51;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  sub_1E0E07FDC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
  swift_bridgeObjectRetain();
  uint64_t v53 = v31;
  uint64_t v54 = sub_1E0ECD000();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v56 = *(void *)(v1 + *(void *)(*(void *)v1 + 160));
  if (v56 < v54)
  {
    sub_1E0E00D1C((uint64_t)v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v42) == 1) {
      return sub_1E0E07B90((uint64_t)v40, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
    }
    sub_1E0E07890((uint64_t)v40, (uint64_t)v52);
    uint64_t v97 = v42;
    sub_1E0E07FDC(&qword_1EAD6DDA8, MEMORY[0x1E4F295A0]);
    uint64_t v57 = v53;
    uint64_t v58 = (uint64_t)v52;
    sub_1E0ECD700();
    if (v116 <= v56) {
      uint64_t v59 = v56;
    }
    else {
      uint64_t v59 = v116;
    }
    uint64_t result = sub_1E0ECD700();
    if (__OFSUB__(v59, v116))
    {
      __break(1u);
    }
    else
    {
      uint64_t v60 = v112;
      sub_1E0ECCEE0();
      uint64_t v61 = v106;
      sub_1E0ECCEC0();
      sub_1E0E07FDC(&qword_1EAD6F320, MEMORY[0x1E4F295A0]);
      uint64_t result = sub_1E0ECD0E0();
      if (result)
      {
        uint64_t v62 = v107[12];
        uint64_t v63 = v107;
        uint64_t v95 = v58;
        uint64_t v64 = v99;
        char v65 = &v99[v62];
        uint64_t v66 = v115;
        uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
        v67(v99, v60, v57);
        uint64_t v68 = *(void (**)(char *, char *))(v66 + 32);
        uint64_t v94 = v65;
        v68(v65, v61);
        uint64_t v69 = v101;
        unint64_t v70 = (char *)v101 + v63[12];
        uint64_t v93 = v70;
        v67((char *)v101, v64, v57);
        v67(v70, v65, v57);
        uint64_t v71 = (uint64_t)v98;
        ((void (*)(char *, void (*)(), uint64_t))v68)(v98, v69, v57);
        uint64_t v73 = v115 + 8;
        os_log_t v72 = *(void (**)(char *, uint64_t))(v115 + 8);
        v72(v93, v57);
        uint64_t v106 = (char *)v72;
        uint64_t v115 = v73;
        char v74 = (char *)v69 + v107[12];
        uint64_t v96 = v57;
        ((void (*)(void (*)(), char *, uint64_t))v68)(v69, v64, v57);
        ((void (*)(char *, char *, uint64_t))v68)(v74, v94, v57);
        ((void (*)(uint64_t, char *, uint64_t))v68)(v71 + *(int *)(v97 + 36), v74, v57);
        v72((char *)v69, v57);
        uint64_t v75 = v100;
        sub_1E0E07890(v71, v100);
        uint64_t v76 = v111;
        sub_1E0ECD4A0();
        uint64_t v101 = sub_1E0E06240;
        sub_1E0E083BC(v75, (uint64_t (*)(void))sub_1E0E06240);
        uint64_t v77 = v114;
        sub_1E0DFFCFC(v114);
        uint64_t v78 = v110;
        sub_1E0ECBB80();
        uint64_t v79 = v105;
        uint64_t v80 = *(int **)(v105 + 8);
        uint64_t v81 = v103;
        uint64_t v107 = v80;
        ((void (*)(uint64_t, uint64_t))v80)(v77, v103);
        ((void (*)(char *, uint64_t))v80)(v76, v81);
        uint64_t v82 = v102;
        sub_1E0DFFCFC(v102);
        uint64_t v83 = *(void (**)(void))(v79 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v83)(v113, v82, v81);
        v83();
        ((void (*)(char *, char *, uint64_t))v83)(v109, v78, v81);
        sub_1E0E07FDC(&qword_1EAD6DDB0, MEMORY[0x1E4F27D00]);
        uint64_t v84 = v104;
        sub_1E0ECD780();
        uint64_t v85 = v113;
        sub_1E0ECD770();
        uint64_t v86 = (void (*)(uint64_t, uint64_t))v107;
        ((void (*)(char *, uint64_t))v107)(v84, v81);
        v86(v82, v81);
        sub_1E0DFFE24(v82);
        uint64_t v87 = v85;
        uint64_t v88 = v114;
        ((void (*)(char *, uint64_t, uint64_t))v83)(v87, v114, v81);
        ((void (*)(char *, uint64_t, uint64_t))v83)(v108, v88, v81);
        ((void (*)(char *, uint64_t, uint64_t))v83)(v109, v82, v81);
        sub_1E0ECD780();
        uint64_t v89 = (uint64_t)v111;
        sub_1E0ECD770();
        unint64_t v90 = (void (*)(uint64_t, uint64_t))v107;
        ((void (*)(char *, uint64_t))v107)(v84, v81);
        v90(v82, v81);
        v90(v114, v81);
        sub_1E0E03B40((void (*)(void *))sub_1E0E078F4, v1);
        v90(v89, v81);
        uint64_t v91 = v110;
        ((void (*)(uint64_t, char *, uint64_t))v83)(v89, v110, v81);
        sub_1E0DFFD8C(v89);
        v90((uint64_t)v91, v81);
        ((void (*)(char *, uint64_t))v106)(v112, v96);
        return sub_1E0E083BC(v95, (uint64_t (*)(void))v101);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1E0E05D48()
{
  uint64_t v0 = sub_1E0ECCF30();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1E0ECD6C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_1E0ECCF00();
  swift_beginAccess();
  sub_1E0E07FDC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
  sub_1E0ECD020();
  sub_1E0ECCFE0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_endAccess();
}

uint64_t *sub_1E0E05FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = *(void *)(*v4 + 104);
  sub_1E0E0849C();
  swift_allocObject();
  *(uint64_t *)((char *)v4 + v11) = sub_1E0ECC160();
  sub_1E0ECBC10();
  sub_1E0ECBC10();
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 128)) = 0;
  uint64_t v12 = *(void *)(*v4 + 136);
  sub_1E0ECCF30();
  uint64_t v13 = *(void *)(v10 + 80);
  swift_getAssociatedTypeWitness();
  sub_1E0E07FDC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
  *(uint64_t *)((char *)v5 + v12) = sub_1E0ECCFA0();
  uint64_t v14 = (uint64_t)v5 + *(void *)(*v5 + 168);
  sub_1E0E06240();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))((uint64_t)v5 + *(void *)(*v5 + 96), a1, v13);
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = a2;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 152)) = a3;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 160)) = a4;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 128)) = sub_1E0E047A0();
  swift_release();
  return v5;
}

void sub_1E0E06240()
{
  if (!qword_1EAD6DC98[0])
  {
    sub_1E0ECCF30();
    sub_1E0E07FDC(&qword_1EAD6F320, MEMORY[0x1E4F295A0]);
    unint64_t v0 = sub_1E0ECD4C0();
    if (!v1) {
      atomic_store(v0, qword_1EAD6DC98);
    }
  }
}

uint64_t sub_1E0E062D4(uint64_t a1, uint64_t a2)
{
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E06354(uint64_t a1, uint64_t a2)
{
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E063D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1E0E00D1C(a1);
}

uint64_t sub_1E0E063FC()
{
  return 16;
}

__n128 sub_1E0E06408(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1E0E06418()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_1E0ECBC20();
    if (v1 <= 0x3F)
    {
      sub_1E0E079A4(319, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for DailyModelProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for DailyModelProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DailyModelProvider);
}

uint64_t dispatch thunk of DailyModelProvider.__allocating_init(dataSource:minimumBufferDuration:prefetchMultiplier:cacheLimit:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of DailyModelProvider.activeDayIndexRange.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of DailyModelProvider.activeDayIndexRange.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of DailyModelProvider.activeDayIndexRange.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of DailyModelProvider.subscript.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t sub_1E0E06668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t sub_1E0E06670()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1E0E066F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  size_t v7 = *(void *)(v5 + 64);
  unint64_t v8 = v7;
  if (v6 <= 2)
  {
    if (v7 <= 3)
    {
      unsigned int v10 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
      if (v10 > 0xFFFE)
      {
        uint64_t v9 = 4;
      }
      else
      {
        BOOL v11 = v10 != 0;
        BOOL v12 = v10 >= 0xFF;
        uint64_t v9 = 2;
        if (!v12) {
          uint64_t v9 = v11;
        }
      }
    }
    else
    {
      uint64_t v9 = 1;
    }
    unint64_t v8 = v9 + v7;
  }
  uint64_t v13 = *(_DWORD *)(v5 + 80);
  if (v13 <= 7 && v8 <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 3, AssociatedTypeWitness))
    {
      if (v6 <= 2)
      {
        if (v7 <= 3)
        {
          unsigned int v18 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
          if (v18 > 0xFFFE)
          {
            uint64_t v17 = 4;
          }
          else
          {
            BOOL v19 = v18 != 0;
            BOOL v12 = v18 >= 0xFF;
            uint64_t v17 = 2;
            if (!v12) {
              uint64_t v17 = v19;
            }
          }
        }
        else
        {
          uint64_t v17 = 1;
        }
        v7 += v17;
      }
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1E0E06908(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 3, AssociatedTypeWitness);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, AssociatedTypeWitness);
  }
  return result;
}

void *sub_1E0E069D8(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 3, AssociatedTypeWitness))
  {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
    size_t v7 = *(void *)(v5 + 64);
    if (v6 <= 2)
    {
      if (v7 <= 3)
      {
        unsigned int v9 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
        if (v9 > 0xFFFE)
        {
          uint64_t v8 = 4;
        }
        else
        {
          BOOL v10 = v9 != 0;
          BOOL v11 = v9 >= 0xFF;
          uint64_t v8 = 2;
          if (!v11) {
            uint64_t v8 = v10;
          }
        }
      }
      else
      {
        uint64_t v8 = 1;
      }
      v7 += v8;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1E0E06B2C(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 3, AssociatedTypeWitness);
  int v8 = v6(a2, 3, AssociatedTypeWitness);
  if (v7)
  {
    if (v8)
    {
      unsigned int v9 = *(_DWORD *)(v5 + 84);
      size_t v10 = *(void *)(v5 + 64);
      if (v9 <= 2)
      {
        if (v10 > 3)
        {
LABEL_5:
          uint64_t v11 = 1;
LABEL_16:
          v10 += v11;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v14 = (~(-1 << (8 * v10)) - v9 + 3) >> (8 * v10);
        if (v14 > 0xFFFE)
        {
          uint64_t v11 = 4;
        }
        else
        {
          BOOL v15 = v14 != 0;
          BOOL v16 = v14 >= 0xFF;
          uint64_t v11 = 2;
          if (!v16) {
            uint64_t v11 = v15;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  else
  {
    if (v8)
    {
      uint64_t v13 = *(void (**)(void *, uint64_t))(v5 + 8);
      uint64_t v12 = v5 + 8;
      v13(a1, AssociatedTypeWitness);
      unsigned int v9 = *(_DWORD *)(v12 + 76);
      size_t v10 = *(void *)(v12 + 56);
      if (v9 <= 2)
      {
        if (v10 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v10);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1E0E06D04(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 3, AssociatedTypeWitness))
  {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
    size_t v7 = *(void *)(v5 + 64);
    if (v6 <= 2)
    {
      if (v7 <= 3)
      {
        unsigned int v9 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
        if (v9 > 0xFFFE)
        {
          uint64_t v8 = 4;
        }
        else
        {
          BOOL v10 = v9 != 0;
          BOOL v11 = v9 >= 0xFF;
          uint64_t v8 = 2;
          if (!v11) {
            uint64_t v8 = v10;
          }
        }
      }
      else
      {
        uint64_t v8 = 1;
      }
      v7 += v8;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1E0E06E58(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 3, AssociatedTypeWitness);
  int v8 = v6(a2, 3, AssociatedTypeWitness);
  if (v7)
  {
    if (v8)
    {
      unsigned int v9 = *(_DWORD *)(v5 + 84);
      size_t v10 = *(void *)(v5 + 64);
      if (v9 <= 2)
      {
        if (v10 > 3)
        {
LABEL_5:
          uint64_t v11 = 1;
LABEL_16:
          v10 += v11;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v14 = (~(-1 << (8 * v10)) - v9 + 3) >> (8 * v10);
        if (v14 > 0xFFFE)
        {
          uint64_t v11 = 4;
        }
        else
        {
          BOOL v15 = v14 != 0;
          BOOL v16 = v14 >= 0xFF;
          uint64_t v11 = 2;
          if (!v16) {
            uint64_t v11 = v15;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  else
  {
    if (v8)
    {
      uint64_t v13 = *(void (**)(void *, uint64_t))(v5 + 8);
      uint64_t v12 = v5 + 8;
      v13(a1, AssociatedTypeWitness);
      unsigned int v9 = *(_DWORD *)(v12 + 76);
      size_t v10 = *(void *)(v12 + 56);
      if (v9 <= 2)
      {
        if (v10 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v10);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_1E0E07030(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 3;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 2)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 3) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_28;
  }
  char v12 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v14 = ((a2 - v6 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v7);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v14 < 2)
    {
LABEL_28:
      if (v6)
      {
        unsigned int v16 = (*(uint64_t (**)(unsigned __int16 *))(v4 + 48))(a1);
        if (v16 >= 4) {
          return v16 - 3;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_28;
  }
LABEL_20:
  int v15 = (v13 - 1) << v12;
  if (v7 > 3) {
    int v15 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v7 | v15) + 1;
}

void sub_1E0E0723C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 3;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 2)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 3) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  if (a3 <= v8)
  {
    int v14 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v17 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v9 < 4)
    {
      int v16 = (v15 >> (8 * v9)) + 1;
      if (v9)
      {
        int v18 = v15 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v9] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v16;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1E0E074DCLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v19 = *(void (**)(unsigned char *, void))(v6 + 56);
        v19(a1, a2 + 3);
      }
      return;
  }
}

uint64_t sub_1E0E07504(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48);
  return v3(a1, 3, AssociatedTypeWitness);
}

uint64_t sub_1E0E07580(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  return v5(a1, a2, 3, AssociatedTypeWitness);
}

uint64_t dispatch thunk of DailyModelProviderDataSource.fetchModels(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 24) + **(int **)(a3 + 24));
  unsigned int v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unsigned int v7 = v3;
  v7[1] = sub_1E0E07704;
  return v9(a1, a2, a3);
}

uint64_t sub_1E0E07704(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of DailyModelProviderDataSource.modelsDidChangePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DailyModelProviderDataSource.__unitTest_noFetchNecessary()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void sub_1E0E07828()
{
  if (!qword_1EAD6F9D0)
  {
    sub_1E0ECCF30();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6F9D0);
    }
  }
}

uint64_t sub_1E0E07890(uint64_t a1, uint64_t a2)
{
  sub_1E0E06240();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E078F4()
{
  return sub_1E0E05D48();
}

void sub_1E0E07910()
{
  if (!qword_1EAD6DDB8)
  {
    sub_1E0ECBC20();
    sub_1E0E07FDC(&qword_1EAD6DDC0, MEMORY[0x1E4F27D00]);
    unint64_t v0 = sub_1E0ECD8D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DDB8);
    }
  }
}

void sub_1E0E079A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD6C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0E079F8()
{
  if (!qword_1EAD6DDE0)
  {
    sub_1E0E07AE4();
    sub_1E0E07B50();
    sub_1E0E07FDC(&qword_1EAD6DDF0, (void (*)(uint64_t))sub_1E0E07AE4);
    sub_1E0E07FDC(&qword_1EAD6DDF8, (void (*)(uint64_t))sub_1E0E07B50);
    unint64_t v0 = sub_1E0ECC0E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DDE0);
    }
  }
}

void sub_1E0E07AE4()
{
  if (!qword_1EAD6DDE8)
  {
    sub_1E0DFCAE0();
    unint64_t v0 = sub_1E0ECC100();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DDE8);
    }
  }
}

unint64_t sub_1E0E07B50()
{
  unint64_t result = qword_1EAD6FDC0;
  if (!qword_1EAD6FDC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6FDC0);
  }
  return result;
}

uint64_t sub_1E0E07B90(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1E0E079A4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1E0E07BEC()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_1E0E07BFC(void **a1)
{
}

uint64_t sub_1E0E07C08()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1E0E07C40()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1E0E07C78()
{
  return sub_1E0E04E74();
}

void sub_1E0E07C84()
{
  if (!qword_1EAD6DE08)
  {
    sub_1E0DFCAE0();
    unint64_t v0 = sub_1E0ECC0F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DE08);
    }
  }
}

uint64_t sub_1E0E07CE4(uint64_t a1)
{
  return sub_1E0E0390C(a1);
}

uint64_t sub_1E0E07D00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

void sub_1E0E07D84()
{
  if (!qword_1EAD6DE18)
  {
    sub_1E0E06240();
    sub_1E0E07DE8();
    unint64_t v0 = sub_1E0ECD8D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DE18);
    }
  }
}

unint64_t sub_1E0E07DE8()
{
  unint64_t result = qword_1EAD6DE20;
  if (!qword_1EAD6DE20)
  {
    sub_1E0E06240();
    sub_1E0E07FDC(&qword_1EAD6DDA8, MEMORY[0x1E4F295A0]);
    sub_1E0E07E90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DE20);
  }
  return result;
}

unint64_t sub_1E0E07E90()
{
  unint64_t result = qword_1EAD6DE28;
  if (!qword_1EAD6DE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DE28);
  }
  return result;
}

uint64_t sub_1E0E07EE4(uint64_t a1, uint64_t a2)
{
  sub_1E0E06240();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1E0E07F48()
{
  if (!qword_1EAD6DE38)
  {
    sub_1E0ECBBE0();
    sub_1E0E07FDC(&qword_1EAD6DE40, MEMORY[0x1E4F27CE0]);
    unint64_t v0 = sub_1E0ECD8D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DE38);
    }
  }
}

uint64_t sub_1E0E07FDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E0E08024()
{
  uint64_t v1 = sub_1E0ECBBE0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_1E0E08114(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_1E0ECBBE0() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void **)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  BOOL v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *BOOL v12 = v2;
  v12[1] = sub_1E0E08248;
  return sub_1E0E01C34(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1E0E08248()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1E0E0833C()
{
  if (!qword_1EAD6DE58)
  {
    sub_1E0E079A4(255, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6DE58);
    }
  }
}

uint64_t sub_1E0E083BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1E0E0841C(uint64_t a1, uint64_t a2)
{
  sub_1E0E079A4(0, &qword_1EAD6DC90, (void (*)(uint64_t))sub_1E0E06240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1E0E0849C()
{
  if (!qword_1EAD6DE60)
  {
    sub_1E0E06240();
    unint64_t v0 = sub_1E0ECC170();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DE60);
    }
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t static HKTraitWidthDesignation.defaultValue.getter()
{
  return 1;
}

uint64_t static HKTraitWidthDesignation.identifier.getter()
{
  return sub_1E0E0858C(&qword_1EAD698A0, &qword_1EAD69890);
}

uint64_t static HKTraitWidthDesignation.name.getter()
{
  return sub_1E0E0858C(&qword_1EAD69868, &qword_1EAD698A8);
}

uint64_t sub_1E0E0858C(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

void sub_1E0E085E0(void *a1@<X8>)
{
  *a1 = 1;
}

id HKWidthDesignation.init(viewWidth:)(double a1)
{
  uint64_t v2 = self;
  return objc_msgSend(v2, sel_widthDesignationFromViewWidth_, a1);
}

uint64_t sub_1E0E08644(unint64_t *a1, unint64_t *a2)
{
  return _sSo18HKWidthDesignationV8HealthUIE1loiySbAB_ABtFZ_0(*a1, *a2);
}

uint64_t sub_1E0E08650(unint64_t *a1, unint64_t *a2)
{
  return sub_1E0E0865C(*a1, *a2);
}

uint64_t sub_1E0E0865C(unint64_t a1, unint64_t a2)
{
  type metadata accessor for HKWidthDesignation(0);
  if (a2 - 1 < 6 && a1 - 1 < 6) {
    return a2 >= a1;
  }
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

uint64_t sub_1E0E086D4(unint64_t *a1, unint64_t *a2)
{
  return sub_1E0E086E0(*a1, *a2);
}

uint64_t sub_1E0E086E0(unint64_t a1, unint64_t a2)
{
  type metadata accessor for HKWidthDesignation(0);
  if (a1 - 1 < 6 && a2 - 1 < 6) {
    return a1 >= a2;
  }
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

uint64_t sub_1E0E08758(unint64_t *a1, unint64_t *a2)
{
  return sub_1E0E08764(*a1, *a2);
}

uint64_t sub_1E0E08764(unint64_t a1, unint64_t a2)
{
  type metadata accessor for HKWidthDesignation(0);
  if (a2 - 1 < 6 && a1 - 1 < 6) {
    return a2 < a1;
  }
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

uint64_t UIMutableTraits.widthDesignation.getter()
{
  sub_1E0B2A804();
  sub_1E0B2A7C0((unint64_t *)&unk_1EAD698C0);
  sub_1E0ECC020();
  return v1;
}

uint64_t UIMutableTraits.widthDesignation.setter()
{
  return sub_1E0ECC030();
}

uint64_t (*UIMutableTraits.widthDesignation.modify(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = UIMutableTraits.widthDesignation.getter();
  return sub_1E0E08938;
}

uint64_t sub_1E0E08938()
{
  return UIMutableTraits.widthDesignation.setter();
}

uint64_t sub_1E0E08960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1E0B2A7C0(&qword_1EAD6DE70);
  return MEMORY[0x1F40F8670](a1, a2, a3, a4, v8);
}

uint64_t EnvironmentValues.widthDesignation.getter()
{
  sub_1E0E08C34();
  sub_1E0ECC5C0();
  return v1;
}

uint64_t EnvironmentValues.widthDesignation.setter()
{
  return sub_1E0ECC5D0();
}

uint64_t (*EnvironmentValues.widthDesignation.modify(uint64_t a1))(void *a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = sub_1E0E08C34();
  sub_1E0ECC5C0();
  return sub_1E0E08AB8;
}

uint64_t sub_1E0E08AB8(void *a1)
{
  a1[1] = *a1;
  return sub_1E0ECC5D0();
}

uint64_t sub_1E0E08AF0@<X0>(void *a1@<X8>)
{
  sub_1E0B2A804();
  sub_1E0B2A7C0((unint64_t *)&unk_1EAD698C0);
  uint64_t result = sub_1E0ECD610();
  *a1 = v3;
  return result;
}

uint64_t sub_1E0E08B70(uint64_t a1)
{
  return UIMutableTraits.widthDesignation.setter();
}

uint64_t _sSo18HKWidthDesignationV8HealthUIE1loiySbAB_ABtFZ_0(unint64_t a1, unint64_t a2)
{
  type metadata accessor for HKWidthDesignation(0);
  if (a1 - 1 < 6 && a2 - 1 < 6) {
    return a1 < a2;
  }
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

unint64_t sub_1E0E08C34()
{
  unint64_t result = qword_1EAD6DE68;
  if (!qword_1EAD6DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DE68);
  }
  return result;
}

uint64_t sub_1E0E08C88()
{
  return sub_1E0B2A7C0(&qword_1EAD6DE70);
}

uint64_t sub_1E0E08CBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UIMutableTraits.widthDesignation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1E0E08CF0()
{
  return UIMutableTraits.widthDesignation.setter();
}

uint64_t sub_1E0E08D20()
{
  return 16;
}

__n128 sub_1E0E08D2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1E0E08D38@<X0>(void *a1@<X8>)
{
  sub_1E0E08C34();
  uint64_t result = sub_1E0ECC5C0();
  *a1 = v3;
  return result;
}

uint64_t sub_1E0E08D88()
{
  return sub_1E0ECC5D0();
}

ValueMetadata *type metadata accessor for HKTraitWidthDesignationKey()
{
  return &type metadata for HKTraitWidthDesignationKey;
}

unint64_t sub_1E0E08DE8()
{
  unint64_t result = qword_1EAD6DE78;
  if (!qword_1EAD6DE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DE78);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_1E0E08F98(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = sub_1E0ECBB60();
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 6)
  {
    (*(void (**)(char *, uint64_t))(v12 + 16))(v14, a3);
    id v15 = objc_allocWithZone((Class)type metadata accessor for BalanceDayXAxis());
    id v16 = sub_1E0EA609C((uint64_t)v14);
    id v17 = objc_allocWithZone((Class)HKDateGraphViewController);
    int v18 = (void *)sub_1E0ECBB00();
    id v19 = objc_msgSend(v17, sel_initWithDateZoom_previousDateZoom_previousXAxisSpace_currentCalendar_customDateAxis_, 6, a2, v18, v16, a4);
  }
  else
  {
    int v18 = (void *)sub_1E0ECBB00();
    uint64_t v20 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
    v22.receiver = v5;
    v22.super_class = v20;
    id v19 = objc_msgSendSuper2(&v22, sel_makePrimaryGraphViewControllerWithDateZoom_previousDateZoom_previousXAxisSpace_currentCalendar_, a1, a2, v18, a4);
  }

  return v19;
}

id sub_1E0E09464(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = sub_1E0ECB980();
  uint64_t v16 = *(void *)(v15 - 8);
  id v17 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a8, 1, v15) != 1)
  {
    id v17 = (void *)sub_1E0ECB920();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a8, v15);
  }
  uint64_t v18 = sub_1E0ECBB60();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a9, 1, v18) != 1)
  {
    uint64_t v20 = (void *)sub_1E0ECBB00();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a9, v18);
  }
  id v21 = objc_msgSend(objc_allocWithZone(v23), sel_initWithHealthStore_primaryDisplayType_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_, a1, a2, a3, a4, a5, a6, a7, v17, v20, a10);

  return v21;
}

id sub_1E0E09F48()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceInteractiveChartViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BalanceInteractiveChartViewController()
{
  return self;
}

void sub_1E0E09FA0()
{
  if (!qword_1EAD6DE88)
  {
    sub_1E0DF2C04(255, (unint64_t *)&unk_1EAD6DAF0);
    unint64_t v0 = sub_1E0ECD380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DE88);
    }
  }
}

id sub_1E0E0A008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v34 = a7;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  sub_1E0E0AA40(0, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  id v17 = (char *)&v32 - v16;
  uint64_t v18 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1E0E0AA40(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v19 - 8, v20);
  objc_super v22 = (char *)&v32 - v21;
  sub_1E0E0AA94(a8, (uint64_t)&v32 - v21, (unint64_t *)&qword_1EAD6DB60, v18);
  uint64_t v23 = sub_1E0ECB980();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) != 1)
  {
    uint64_t v25 = (void *)sub_1E0ECB920();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
  }
  sub_1E0E0AA94(a9, (uint64_t)v17, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  uint64_t v26 = sub_1E0ECBB60();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v17, 1, v26) != 1)
  {
    uint64_t v28 = (void *)sub_1E0ECBB00();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v26);
  }
  uint64_t v29 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
  v38.receiver = v11;
  v38.super_class = v29;
  id v30 = objc_msgSendSuper2(&v38, sel_initWithHealthStore_primaryDisplayType_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_, a1, v32, v33, v35, v36, v37, v34, v25, v28, a10);

  sub_1E0E0AB00(a9, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  sub_1E0E0AB00(a8, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  return v30;
}

id sub_1E0E0A30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v37 = a4;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  sub_1E0E0AA40(0, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)&v32 - v15;
  id v17 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1E0E0AA40(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v21 = (char *)&v32 - v20;
  sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6D9E0);
  sub_1E0DF2C04(0, &qword_1EAD6DE90);
  sub_1E0DFD8FC();
  objc_super v22 = (void *)sub_1E0ECCFC0();
  swift_bridgeObjectRelease();
  sub_1E0E0AA94(a9, (uint64_t)v21, (unint64_t *)&qword_1EAD6DB60, v17);
  uint64_t v23 = sub_1E0ECB980();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23) != 1)
  {
    uint64_t v25 = (void *)sub_1E0ECB920();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
  }
  sub_1E0E0AA94(a10, (uint64_t)v16, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  uint64_t v26 = sub_1E0ECBB60();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1, v26) != 1)
  {
    uint64_t v28 = (void *)sub_1E0ECBB00();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
  }
  uint64_t v29 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
  v40.receiver = v12;
  v40.super_class = v29;
  id v30 = objc_msgSendSuper2(&v40, sel_initWithTimeScopeRanges_healthStore_primaryDisplayType_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_, v22, v33, v34, v37, v38, v39, v35, v36, v25, v28, a11);

  sub_1E0E0AB00(a10, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  sub_1E0E0AB00(a9, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  return v30;
}

id sub_1E0E0A678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v34 = a2;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v37 = a4;
  sub_1E0E0AA40(0, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  id v17 = (char *)&v33 - v16;
  sub_1E0E09FA0();
  uint64_t v18 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  if (a3)
  {
    sub_1E0DF2C04(0, &qword_1EAD6DE98);
    uint64_t v19 = (void *)sub_1E0ECD320();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v40 = a10;
  sub_1E0B32F68(a10, (uint64_t)v42);
  uint64_t v20 = v43;
  if (v43)
  {
    uint64_t v21 = __swift_project_boxed_opaque_existential_0(v42, v43);
    uint64_t v22 = *(void *)(v20 - 8);
    MEMORY[0x1F4188790](v21, v21);
    uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v24);
    uint64_t v25 = sub_1E0ECD9D0();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v20);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
  }
  else
  {
    uint64_t v25 = 0;
  }
  sub_1E0E0AA94(a11, (uint64_t)v17, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  uint64_t v26 = sub_1E0ECBB60();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v17, 1, v26) != 1)
  {
    uint64_t v28 = (void *)sub_1E0ECBB00();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v26);
  }
  if (a13)
  {
    sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6D9E0);
    sub_1E0DF2C04(0, &qword_1EAD6DE90);
    sub_1E0DFD8FC();
    uint64_t v29 = (void *)sub_1E0ECCFC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = 0;
  }
  id v30 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
  v41.receiver = v33;
  v41.super_class = v30;
  id v31 = objc_msgSendSuper2(&v41, sel_initWithStackedDisplayTypes_primaryDisplayTypeStackIndex_stackedDisplayTypeHeights_healthStore_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_timeScopeRanges_, v18, v34, v19, v37, v38, v39, v35, v36, a9, v25, v28, a12, v29);

  swift_unknownObjectRelease();
  sub_1E0E0AB00(a11, &qword_1EAD6DE80, MEMORY[0x1E4F27CA0]);
  sub_1E0B32EE4(v40);
  return v31;
}

void sub_1E0E0AA40(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD6C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1E0E0AA94(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1E0E0AA40(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1E0E0AB00(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1E0E0AA40(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t AudiogramPerformanceAnalytics.Event.isEventSubmissionIHAGated.getter()
{
  return 0;
}

unint64_t AudiogramPerformanceAnalytics.Event.eventName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t AudiogramPerformanceAnalytics.Event.__allocating_init(metric:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t AudiogramPerformanceAnalytics.Event.init(metric:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return sub_1E0E0B034(a1, v2, ObjectType, a2);
}

uint64_t AudiogramPerformanceAnalytics.Event.makeUnrestrictedEventPayload(with:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  id v5 = v1;
  uint64_t v6 = v4(ObjectType, v2);

  return v6;
}

uint64_t AudiogramPerformanceAnalytics.Event.makeIHAGatedEventPayload(with:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  id v5 = v1;
  uint64_t v6 = v4(ObjectType, v2);

  return v6;
}

uint64_t AudiogramPerformanceAnalytics.Event.deinit()
{
  return v0;
}

uint64_t AudiogramPerformanceAnalytics.Event.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id AudiogramPerformanceAnalytics.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id AudiogramPerformanceAnalytics.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramPerformanceAnalytics();
  return objc_msgSendSuper2(&v2, sel_init);
}

id AudiogramPerformanceAnalytics.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramPerformanceAnalytics();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1E0E0B034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 24) = a4;
  return a2;
}

uint64_t type metadata accessor for AudiogramPerformanceAnalytics()
{
  return self;
}

uint64_t type metadata accessor for AudiogramPerformanceAnalytics.Event()
{
  return self;
}

uint64_t method lookup function for AudiogramPerformanceAnalytics.Event(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudiogramPerformanceAnalytics.Event);
}

uint64_t dispatch thunk of AudiogramPerformanceAnalytics.Event.__allocating_init(metric:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t AttributedString.ranges<A>(of:options:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = a2;
  uint64_t v93 = a3;
  uint64_t v90 = sub_1E0ECB710();
  uint64_t v8 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90, v9);
  uint64_t v89 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E0B910();
  uint64_t v88 = v11;
  uint64_t v13 = MEMORY[0x1F4188790](v11, v12);
  uint64_t v87 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v86 = (char *)v74 - v16;
  sub_1E0E0CE28(0, &qword_1EAD69A80, (uint64_t (*)(uint64_t))sub_1E0E0B978, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v100 = (uint64_t)v74 - v19;
  sub_1E0E0B978();
  uint64_t v21 = v20;
  uint64_t v96 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20, v22);
  uint64_t v97 = (uint64_t)v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v23, v25);
  uint64_t v85 = (char *)v74 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26, v28);
  uint64_t v84 = (uint64_t)v74 - v30;
  MEMORY[0x1F4188790](v29, v31);
  uint64_t v33 = (char *)v74 - v32;
  uint64_t v34 = sub_1E0ECB620();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v34, v36);
  uint64_t v39 = (char *)v74 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37, v40);
  uint64_t v42 = (char *)v74 - v41;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v91 = a1;
  if (sub_1E0ECD450() < 1) {
    return MEMORY[0x1E4FBC860];
  }
  sub_1E0ECB570();
  sub_1E0ECB630();
  v74[1] = sub_1E0E0BACC(&qword_1EAD69A68, MEMORY[0x1E4F27388]);
  uint64_t result = sub_1E0ECD0E0();
  if (result)
  {
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    uint64_t v45 = v35 + 16;
    uint64_t v44 = v46;
    uint64_t v81 = (void (**)(char *, char *, uint64_t))(v45 + 16);
    uint64_t v80 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v79 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
    unint64_t v99 = MEMORY[0x1E4FBC860];
    uint64_t v77 = v33;
    uint64_t v76 = v45;
    uint64_t v75 = v39;
    uint64_t v83 = v42;
    v74[0] = v46;
    uint64_t v82 = v21;
    uint64_t v78 = (void (**)(char *, uint64_t))(v45 - 8);
    while (1)
    {
      uint64_t v47 = v88;
      uint64_t v48 = v42;
      uint64_t v49 = v86;
      uint64_t v50 = &v86[*(int *)(v88 + 48)];
      uint64_t v51 = v44;
      v44(v86, v48, v34);
      uint64_t v52 = v39;
      uint64_t v53 = *v81;
      uint64_t v98 = v50;
      v53(v50, v52, v34);
      uint64_t v54 = v87;
      uint64_t v55 = &v87[*(int *)(v47 + 48)];
      v51(v87, v49, v34);
      v51(v55, v50, v34);
      uint64_t v56 = v85;
      v53(v85, v54, v34);
      uint64_t v57 = *v78;
      (*v78)(v55, v34);
      uint64_t v58 = *(int *)(v47 + 48);
      uint64_t v59 = v82;
      uint64_t v60 = &v54[v58];
      v53(v54, v49, v34);
      v53(v60, v98, v34);
      v53(&v56[*(int *)(v59 + 36)], v60, v34);
      uint64_t v61 = v54;
      uint64_t v62 = v100;
      uint64_t v63 = v57;
      v57(v61, v34);
      uint64_t v64 = (uint64_t)v56;
      uint64_t v65 = v84;
      sub_1E0E0BA0C(v64, v84);
      sub_1E0E0BACC(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
      uint64_t v66 = v89;
      sub_1E0ECB670();
      sub_1E0E0BA70(v65);
      sub_1E0E0BACC(&qword_1EAD69A70, MEMORY[0x1E4F27470]);
      uint64_t v67 = v90;
      sub_1E0ECB780();
      (*v80)(v66, v67);
      if ((*v79)(v62, 1, v59) == 1) {
        break;
      }
      uint64_t v68 = (uint64_t)v77;
      sub_1E0E0BA0C(v100, (uint64_t)v77);
      sub_1E0E0BBA0(v68, v97);
      unint64_t v69 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v69 = sub_1E0E0C008(0, *(void *)(v69 + 16) + 1, 1, v69, &qword_1EAD69A90, (uint64_t (*)(uint64_t))sub_1E0E0B978, (uint64_t (*)(void))sub_1E0E0B978, (uint64_t (*)(void))sub_1E0E0B978);
      }
      uint64_t v42 = v83;
      unint64_t v71 = *(void *)(v69 + 16);
      unint64_t v70 = *(void *)(v69 + 24);
      if (v71 >= v70 >> 1) {
        unint64_t v69 = sub_1E0E0C008(v70 > 1, v71 + 1, 1, v69, &qword_1EAD69A90, (uint64_t (*)(uint64_t))sub_1E0E0B978, (uint64_t (*)(void))sub_1E0E0B978, (uint64_t (*)(void))sub_1E0E0B978);
      }
      *(void *)(v69 + 16) = v71 + 1;
      unint64_t v72 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      unint64_t v99 = v69;
      sub_1E0E0BA0C(v97, v69 + v72 + *(void *)(v96 + 72) * v71);
      v63(v42, v34);
      uint64_t v73 = (void (*)(char *, char *, uint64_t))v74[0];
      ((void (*)(char *, uint64_t, uint64_t))v74[0])(v42, v68 + *(int *)(v59 + 36), v34);
      sub_1E0E0BA70(v68);
      uint64_t v39 = v75;
      sub_1E0ECB630();
      uint64_t result = sub_1E0ECD0E0();
      uint64_t v44 = v73;
      if ((result & 1) == 0) {
        goto LABEL_13;
      }
    }
    v63(v83, v34);
    sub_1E0E0BB14(v100);
    return v99;
  }
  else
  {
LABEL_13:
    __break(1u);
  }
  return result;
}

void sub_1E0E0B910()
{
  if (!qword_1EAD69A60)
  {
    sub_1E0ECB620();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD69A60);
    }
  }
}

void sub_1E0E0B978()
{
  if (!qword_1EAD69A78)
  {
    sub_1E0ECB620();
    sub_1E0E0BACC(&qword_1EAD69A68, MEMORY[0x1E4F27388]);
    unint64_t v0 = sub_1E0ECD4C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD69A78);
    }
  }
}

uint64_t sub_1E0E0BA0C(uint64_t a1, uint64_t a2)
{
  sub_1E0E0B978();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E0BA70(uint64_t a1)
{
  sub_1E0E0B978();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E0E0BACC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E0E0BB14(uint64_t a1)
{
  sub_1E0E0CE28(0, &qword_1EAD69A80, (uint64_t (*)(uint64_t))sub_1E0E0B978, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E0E0BBA0(uint64_t a1, uint64_t a2)
{
  sub_1E0E0B978();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1E0E0BC04(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0E0CE28(0, (unint64_t *)&unk_1EAD6D990, (uint64_t (*)(uint64_t))sub_1E0DF0964, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1E0E0CA94(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1E0E0BD40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1E0E0C008(a1, a2, a3, a4, &qword_1EAD69A90, (uint64_t (*)(uint64_t))sub_1E0E0B978, (uint64_t (*)(void))sub_1E0E0B978, (uint64_t (*)(void))sub_1E0E0B978);
}

void *sub_1E0E0BD88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0B33040(0, &qword_1EAD6DEA0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1E0E0C8B0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1E0E0BEA4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0B33040(0, (unint64_t *)&unk_1EAD6E940);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1E0E0C8B0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1E0E0BFC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1E0E0C008(a1, a2, a3, a4, &qword_1EAD6D978, MEMORY[0x1E4F65968], MEMORY[0x1E4F65968], MEMORY[0x1E4F65968]);
}

uint64_t sub_1E0E0C008(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1E0E0CE28(0, a5, a6, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = sub_1E0ECD8E0();
    __break(1u);
    return result;
  }
  void v19[2] = v14;
  uint64_t v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1E0E0CC74(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

void *sub_1E0E0C2A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0B33040(0, (unint64_t *)&unk_1EAD6D948);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1E0E0CB80(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1E0E0C3C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0B33040(0, &qword_1EAD6D968);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1E0E0C99C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1E0E0C4F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0B33040(0, &qword_1EAD6D970);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1E0E0C8B0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1E0E0C60C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1E0E0CE28(0, &qword_1EAD6D9B8, (uint64_t (*)(uint64_t))sub_1E0E0CDD0, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1E0E0C7A4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1E0E0C75C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1E0E0C008(a1, a2, a3, a4, &qword_1EAD6DEA8, (uint64_t (*)(uint64_t))type metadata accessor for OverlayConfiguration, (uint64_t (*)(void))type metadata accessor for OverlayConfiguration, (uint64_t (*)(void))type metadata accessor for OverlayConfiguration);
}

uint64_t sub_1E0E0C7A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1E0E0CDD0();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

char *sub_1E0E0C8B0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0E0C99C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

char *sub_1E0E0CA94(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0E0CB80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t sub_1E0E0CC74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

unint64_t sub_1E0E0CDD0()
{
  unint64_t result = qword_1EAD6D9C0;
  if (!qword_1EAD6D9C0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6D9C0);
  }
  return result;
}

void sub_1E0E0CE28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

id sub_1E0E0CE8C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionObserverSet;
  unint64_t v8 = (void *)*MEMORY[0x1E4F29F38];
  id v9 = objc_allocWithZone(MEMORY[0x1E4F2B2D0]);
  uint64_t v10 = v3;
  id v11 = v8;
  unint64_t v12 = (void *)sub_1E0ECD190();
  id v13 = objc_msgSend(v9, sel_initWithName_loggingCategory_, v12, v11);

  *(void *)&v3[v7] = v13;
  *(void *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_healthStore] = a1;
  *(void *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_healthRecordsStore] = a2;
  uint64_t v19 = 0;
  sub_1E0E0DEA0(0, &qword_1EAD6DF60, MEMORY[0x1E4F1ABB0]);
  swift_allocObject();
  id v14 = a1;
  id v15 = a2;
  *(void *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionStatus] = sub_1E0ECC1A0();
  sub_1E0E0DEA0(0, (unint64_t *)&qword_1EAD6F860, MEMORY[0x1E4F1AB88]);
  swift_allocObject();
  *(void *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_accountsEvents] = sub_1E0ECC160();

  v18.receiver = v10;
  v18.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  objc_msgSend(v15, sel_registerAccountsEventListener_, v16);

  return v16;
}

uint64_t sub_1E0E0D0B0()
{
  *(void *)(v1 + 128) = v0;
  return MEMORY[0x1F4188298](sub_1E0E0D0D0, 0, 0);
}

uint64_t sub_1E0E0D0D0()
{
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR___HKClinicalAuthorizationFlowManager_healthRecordsStore);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1E0E0D1D8;
  uint64_t v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = sub_1E0E0D5D4;
  v0[13] = &block_descriptor;
  v0[14] = v2;
  objc_msgSend(v1, sel_fetchClinicalConnectedAccountsWithCompletion_, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_1E0E0D1D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1E0E0D300;
  }
  else {
    uint64_t v2 = sub_1E0E0D2E8;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1E0E0D2E8()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

uint64_t sub_1E0E0D300()
{
  uint64_t v27 = v0;
  swift_willThrow();
  if (qword_1EAD6D4F0 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[16];
  uint64_t v1 = (void *)v0[17];
  uint64_t v3 = sub_1E0ECC010();
  __swift_project_value_buffer(v3, (uint64_t)qword_1EAD74168);
  id v4 = v2;
  id v5 = v1;
  id v6 = v4;
  id v7 = v1;
  unint64_t v8 = sub_1E0ECBFF0();
  os_log_type_t v9 = sub_1E0ECD520();
  BOOL v10 = os_log_type_enabled(v8, v9);
  unint64_t v12 = (void *)v0[16];
  id v11 = (void *)v0[17];
  if (v10)
  {
    uint64_t v13 = swift_slowAlloc();
    unint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = v25;
    *(_DWORD *)uint64_t v13 = 136315394;
    id v14 = v12;
    id v15 = objc_msgSend(v14, sel_description);
    uint64_t v16 = sub_1E0ECD1D0();
    unint64_t v18 = v17;

    v0[10] = sub_1E0DED7E4(v16, v18, &v26);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2112;
    id v19 = v11;
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
    v0[10] = v20;
    sub_1E0ECD6D0();
    void *v24 = v20;

    _os_log_impl(&dword_1E0B26000, v8, v9, "%s failed to load connected accounts: %@", (uint8_t *)v13, 0x16u);
    sub_1E0DFABA4();
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v24, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v25, -1, -1);
    MEMORY[0x1E4E41080](v13, -1, -1);
  }
  else
  {
  }
  BOOL v21 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v22 = MEMORY[0x1E4FBC860];
  return v21(v22);
}

uint64_t sub_1E0E0D5D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1E0DFCAE0();
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6DF48);
    **(void **)(*(void *)(v3 + 64) + 40) = sub_1E0ECD330();
    return MEMORY[0x1F4188200](v3);
  }
}

void sub_1E0E0D6AC(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = *(void **)&v1[OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionObserverSet];
  sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD6FDC0);
  uint64_t v5 = (void *)sub_1E0ECD5D0();
  objc_msgSend(v4, sel_registerObserver_queue_, a1, v5);

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  void v9[4] = sub_1E0E0DE4C;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  v9[2] = sub_1E0E0D7E0;
  v9[3] = &block_descriptor_9_0;
  id v7 = _Block_copy(v9);
  id v8 = v2;
  swift_release();
  objc_msgSend(v4, sel_notifyObserver_handler_, a1, v7);
  _Block_release(v7);
}

uint64_t sub_1E0E0D7E0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

id sub_1E0E0DA28()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ClinicalAuthorizationFlowManager()
{
  return self;
}

void sub_1E0E0DB00(uint64_t a1)
{
  swift_getObjectType();
  if ((unint64_t)(a1 - 3) >= 3)
  {
    if ((unint64_t)(a1 - 1) > 1)
    {
      if (qword_1EAD6D4F0 != -1) {
        swift_once();
      }
      uint64_t v6 = sub_1E0ECC010();
      __swift_project_value_buffer(v6, (uint64_t)qword_1EAD74168);
      oslog = sub_1E0ECBFF0();
      os_log_type_t v7 = sub_1E0ECD520();
      if (os_log_type_enabled(oslog, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        aBlock[0] = v9;
        *(_DWORD *)uint64_t v8 = 136315394;
        uint64_t v10 = sub_1E0ECDBC0();
        uint64_t v14 = sub_1E0DED7E4(v10, v11, aBlock);
        sub_1E0ECD6D0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2048;
        uint64_t v14 = a1;
        sub_1E0ECD6D0();
        _os_log_impl(&dword_1E0B26000, oslog, v7, "%s observed unknown accounts event %lu", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1E4E41080](v9, -1, -1);
        MEMORY[0x1E4E41080](v8, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      aBlock[0] = a1;
      sub_1E0ECC180();
      uint64_t v3 = *(void **)(v1 + OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionObserverSet);
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = a1;
      aBlock[4] = (uint64_t)sub_1E0E0DDEC;
      aBlock[5] = v4;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1E0E0D7E0;
      aBlock[3] = (uint64_t)&block_descriptor_3_0;
      uint64_t v5 = _Block_copy(aBlock);
      swift_release();
      objc_msgSend(v3, sel_notifyObservers_, v5);
      _Block_release(v5);
    }
  }
  else
  {
    aBlock[0] = a1;
    sub_1E0ECC150();
  }
}

uint64_t sub_1E0E0DDDC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_1E0E0DDEC(void *a1)
{
  return objc_msgSend(a1, sel_ingestionStatusDidChangeTo_, *(void *)(v1 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1E0E0DE14()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_1E0E0DE4C(void *a1)
{
  sub_1E0ECC190();
  return objc_msgSend(a1, sel_ingestionStatusDidChangeTo_, v3);
}

void sub_1E0E0DEA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  if (!*a2)
  {
    type metadata accessor for HKHealthRecordsAccountsEvent(255);
    unint64_t v7 = a3(a1, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1E0E0DF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v89 = a3;
  uint64_t v90 = a4;
  uint64_t v88 = sub_1E0ECB710();
  uint64_t v6 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88, v7);
  uint64_t v87 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E0B910();
  uint64_t v86 = v9;
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v85 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v84 = (char *)v70 - v14;
  sub_1E0E10304(0, &qword_1EAD69A80, (void (*)(uint64_t))sub_1E0E0B978);
  MEMORY[0x1F4188790](v15 - 8, v16);
  unint64_t v18 = (char *)v70 - v17;
  sub_1E0E0B978();
  uint64_t v20 = v19;
  uint64_t v91 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  uint64_t v92 = (uint64_t)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v83 = (char *)v70 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v82 = (uint64_t)v70 - v29;
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v32 = (char *)v70 - v31;
  uint64_t v33 = sub_1E0ECB620();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v33, v35);
  uint64_t v38 = (char *)v70 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36, v39);
  uint64_t v41 = (char *)v70 - v40;
  uint64_t v95 = a1;
  uint64_t v96 = a2;
  if (sub_1E0ECD230() < 1) {
    return MEMORY[0x1E4FBC860];
  }
  sub_1E0ECB570();
  sub_1E0ECB630();
  v70[1] = sub_1E0E0BACC(&qword_1EAD69A68, MEMORY[0x1E4F27388]);
  uint64_t result = sub_1E0ECD0E0();
  if (result)
  {
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    uint64_t v44 = v34 + 16;
    uint64_t v43 = v45;
    uint64_t v79 = (void (**)(char *, char *, uint64_t))(v44 + 16);
    char v74 = (void (**)(char *, uint64_t))(v44 - 8);
    uint64_t v77 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v76 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
    unint64_t v94 = MEMORY[0x1E4FBC860];
    uint64_t v81 = v18;
    uint64_t v73 = v32;
    uint64_t v72 = v44;
    unint64_t v71 = v38;
    uint64_t v80 = v41;
    v70[0] = v45;
    uint64_t v78 = v20;
    uint64_t v75 = v33;
    while (1)
    {
      uint64_t v46 = v86;
      uint64_t v47 = v41;
      uint64_t v48 = v84;
      uint64_t v49 = &v84[*(int *)(v86 + 48)];
      uint64_t v50 = v43;
      v43(v84, v47, v33);
      uint64_t v51 = *v79;
      uint64_t v93 = v49;
      v51(v49, v38, v33);
      uint64_t v52 = v85;
      uint64_t v53 = &v85[*(int *)(v46 + 48)];
      v50(v85, v48, v33);
      v50(v53, v49, v33);
      uint64_t v54 = v83;
      v51(v83, v52, v33);
      uint64_t v55 = *v74;
      (*v74)(v53, v33);
      uint64_t v56 = *(int *)(v46 + 48);
      uint64_t v57 = v78;
      uint64_t v58 = &v52[v56];
      v51(v52, v48, v33);
      v51(v58, v93, v33);
      v51(&v54[*(int *)(v57 + 36)], v58, v33);
      uint64_t v59 = (uint64_t)v81;
      v55(v52, v33);
      uint64_t v60 = (uint64_t)v54;
      uint64_t v61 = v82;
      sub_1E0E0BA0C(v60, v82);
      sub_1E0E0BACC(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
      uint64_t v62 = v87;
      sub_1E0ECB670();
      sub_1E0E0BA70(v61);
      sub_1E0E0BACC(&qword_1EAD69A70, MEMORY[0x1E4F27470]);
      sub_1E0E0F184();
      uint64_t v63 = v88;
      sub_1E0ECB780();
      (*v77)(v62, v63);
      if ((*v76)(v59, 1, v57) == 1) {
        break;
      }
      uint64_t v64 = (uint64_t)v73;
      sub_1E0E0BA0C(v59, (uint64_t)v73);
      sub_1E0E0BBA0(v64, v92);
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v41 = v80;
        unint64_t v65 = v94;
      }
      else
      {
        unint64_t v65 = sub_1E0E0BD40(0, *(void *)(v94 + 16) + 1, 1, v94);
        uint64_t v41 = v80;
      }
      unint64_t v67 = *(void *)(v65 + 16);
      unint64_t v66 = *(void *)(v65 + 24);
      if (v67 >= v66 >> 1) {
        unint64_t v65 = sub_1E0E0BD40(v66 > 1, v67 + 1, 1, v65);
      }
      *(void *)(v65 + 16) = v67 + 1;
      unint64_t v68 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      unint64_t v94 = v65;
      sub_1E0E0BA0C(v92, v65 + v68 + *(void *)(v91 + 72) * v67);
      uint64_t v33 = v75;
      v55(v41, v75);
      unint64_t v69 = (void (*)(char *, char *, uint64_t))v70[0];
      ((void (*)(char *, uint64_t, uint64_t))v70[0])(v41, v64 + *(int *)(v57 + 36), v33);
      sub_1E0E0BA70(v64);
      uint64_t v38 = v71;
      sub_1E0ECB630();
      uint64_t result = sub_1E0ECD0E0();
      uint64_t v43 = v69;
      if ((result & 1) == 0) {
        goto LABEL_14;
      }
    }
    v55(v80, v75);
    sub_1E0E10358(v59, &qword_1EAD69A80, (void (*)(uint64_t))sub_1E0E0B978);
    return v94;
  }
  else
  {
LABEL_14:
    __break(1u);
  }
  return result;
}

uint64_t String.lettersSmallCaps()@<X0>(void (**a1)(void, void, void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v58 = a3;
  sub_1E0E10304(0, &qword_1EAD6DF68, MEMORY[0x1E4F3E278]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v63 = (char *)v55 - v7;
  sub_1E0E0B978();
  uint64_t v65 = v8;
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8, v9);
  uint64_t v62 = (uint64_t)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v61 = (char *)v55 - v13;
  sub_1E0E10304(0, &qword_1EAD69A80, (void (*)(uint64_t))sub_1E0E0B978);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)v55 - v16;
  uint64_t v18 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v18 - 8, v19);
  unint64_t v66 = (char *)v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1E0ECB640();
  uint64_t v56 = *(void *)(v21 - 8);
  uint64_t v57 = v21;
  MEMORY[0x1F4188790](v21, v22);
  uint64_t v24 = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_1E0ECB350();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v30 = (char *)v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v31);
  uint64_t v33 = (char *)v55 - v32;
  unint64_t v67 = a1;
  uint64_t v68 = a2;
  sub_1E0E0F184();
  uint64_t v64 = (void (**)(void, void, void, void))sub_1E0ECD730();
  uint64_t v35 = v34;
  unint64_t v67 = v64;
  uint64_t v68 = v34;
  sub_1E0ECB330();
  sub_1E0ECB340();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v26 + 8);
  v36(v33, v25);
  uint64_t v37 = sub_1E0ECD710();
  v36(v30, v25);
  uint64_t v38 = sub_1E0E0FF34(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1E0ECB6E0();
  v55[2] = v35;
  sub_1E0ECB650();
  unint64_t v66 = v24;
  uint64_t v39 = sub_1E0E0F1D8(v38, (uint64_t)v24);
  uint64_t v40 = *(void *)(v39 + 16);
  v55[0] = v39;
  v55[1] = v38;
  if (v40)
  {
    uint64_t v41 = (uint64_t)v61;
    uint64_t v42 = v39 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
    uint64_t v43 = *(void *)(v60 + 72);
    uint64_t v64 = (void (**)(void, void, void, void))(v60 + 56);
    uint64_t v59 = v43;
    v60 += 48;
    uint64_t v44 = v65;
    uint64_t v45 = v63;
    while (1)
    {
      sub_1E0E0BBA0(v42, (uint64_t)v17);
      uint64_t v46 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v64;
      (*v64)(v17, 0, 1, v44);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v60)(v17, 1, v44) == 1) {
        break;
      }
      sub_1E0E0BA0C((uint64_t)v17, v41);
      uint64_t v47 = v17;
      uint64_t v48 = v62;
      sub_1E0E0BBA0(v41, v62);
      uint64_t KeyPath = swift_getKeyPath();
      v55[-2] = MEMORY[0x1F4188790](KeyPath, v50);
      swift_getKeyPath();
      sub_1E0ECCAC0();
      uint64_t v51 = sub_1E0ECCAD0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v45, 0, 1, v51);
      sub_1E0E0BACC(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
      uint64_t v52 = (void (*)(void, void))sub_1E0ECB660();
      sub_1E0E0FFEC();
      sub_1E0ECB700();
      v52(&v67, 0);
      uint64_t v44 = v65;
      uint64_t v53 = v48;
      uint64_t v17 = v47;
      sub_1E0E0BA70(v53);
      sub_1E0E0BA70(v41);
      v42 += v59;
      if (!--v40) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
    uint64_t v44 = v65;
LABEL_7:
    v46(v17, 1, 1, v44);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v58, v66, v57);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t String.smallCaps(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1E0E10304(0, &qword_1EAD6DF68, MEMORY[0x1E4F3E278]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v39 = (char *)v33 - v6;
  sub_1E0E0B978();
  uint64_t v41 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v38 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v37 = (char *)v33 - v13;
  sub_1E0E10304(0, &qword_1EAD69A80, (void (*)(uint64_t))sub_1E0E0B978);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)v33 - v16;
  uint64_t v18 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v18 - 8, v19);
  swift_bridgeObjectRetain();
  sub_1E0ECB6E0();
  sub_1E0ECB650();
  uint64_t v40 = a2;
  uint64_t v20 = sub_1E0E0F1D8(a1, a2);
  uint64_t v21 = *(void *)(v20 + 16);
  void v33[2] = v20;
  if (v21)
  {
    uint64_t v22 = v20 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v34 = *(void *)(v8 + 72);
    uint64_t v35 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v33[1] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v23 = v41;
    uint64_t v24 = (uint64_t)v37;
    uint64_t v25 = (uint64_t)v38;
    uint64_t v26 = v39;
    while (1)
    {
      sub_1E0E0BBA0(v22, (uint64_t)v17);
      uint64_t v27 = *v36;
      (*v36)(v17, 0, 1, v23);
      if ((*v35)(v17, 1, v23) == 1) {
        break;
      }
      sub_1E0E0BA0C((uint64_t)v17, v24);
      sub_1E0E0BBA0(v24, v25);
      uint64_t KeyPath = swift_getKeyPath();
      v33[-2] = MEMORY[0x1F4188790](KeyPath, v29);
      swift_getKeyPath();
      sub_1E0ECCAC0();
      uint64_t v30 = sub_1E0ECCAD0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v26, 0, 1, v30);
      sub_1E0E0BACC(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
      uint64_t v31 = (void (*)(char *, void))sub_1E0ECB660();
      sub_1E0E0FFEC();
      sub_1E0ECB700();
      v31(v42, 0);
      uint64_t v23 = v41;
      sub_1E0E0BA70(v25);
      sub_1E0E0BA70(v24);
      v22 += v34;
      if (!--v21) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v23 = v41;
LABEL_7:
    v27(v17, 1, 1, v23);
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1E0E0F184()
{
  unint64_t result = qword_1EAD6EED0;
  if (!qword_1EAD6EED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6EED0);
  }
  return result;
}

uint64_t sub_1E0E0F1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  sub_1E0E10304(0, &qword_1EAD6DFA0, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v29 - v5;
  uint64_t v33 = sub_1E0ECB640();
  MEMORY[0x1F4188790](v33, v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1E4FBC860];
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v30 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v31 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v18 = v33;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_5;
    }
    int64_t v26 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v26 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v17;
    if (!v27)
    {
      int64_t v17 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v17);
      if (!v27)
      {
        int64_t v17 = v26 + 2;
        if (v26 + 2 >= v31) {
          goto LABEL_23;
        }
        unint64_t v27 = *(void *)(v30 + 8 * v17);
        if (!v27)
        {
          int64_t v17 = v26 + 3;
          if (v26 + 3 >= v31) {
            goto LABEL_23;
          }
          unint64_t v27 = *(void *)(v30 + 8 * v17);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v14 = (v27 - 1) & v27;
    unint64_t v20 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_5:
    uint64_t v21 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    (*v32)(v10, v34, v18);
    uint64_t v24 = sub_1E0ECBA30();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v6, 1, 1, v24);
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_1E0E0DF18(v22, v23, 0, (uint64_t)v6);
    sub_1E0E10358((uint64_t)v6, &qword_1EAD6DFA0, MEMORY[0x1E4F27A78]);
    (*v15)(v10, v18);
    swift_bridgeObjectRelease();
    uint64_t result = sub_1E0E4E1E8(v25);
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v31)
  {
LABEL_23:
    swift_release();
    return v36;
  }
  unint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    int64_t v17 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v17 >= v31) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v17);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1E0E0F548()
{
  return sub_1E0ECD100() & 1;
}

id String.designatorSmallCaps(dateFormatter:)@<X0>(void *a1@<X0>, void (**a2)(char *, void, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1E0E10304(0, &qword_1EAD6DF68, MEMORY[0x1E4F3E278]);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v64 = (char *)v54 - v10;
  sub_1E0E0B978();
  uint64_t v65 = v11;
  unint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v63 = (char *)v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v62 = (char *)v54 - v17;
  sub_1E0E10304(0, &qword_1EAD69A80, (void (*)(uint64_t))sub_1E0E0B978);
  MEMORY[0x1F4188790](v18 - 8, v19);
  uint64_t v21 = (char *)v54 - v20;
  uint64_t v22 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v24 = sub_1E0ECB640();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24, v26);
  unint64_t v66 = (char *)v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1E0E0FC30() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_1E0ECB6E0();
    return (id)sub_1E0ECB650();
  }
  if (((unint64_t)objc_msgSend(a1, sel_formattingContext) & 0xFFFFFFFFFFFFFFFELL) != 4)
  {
    return (id)String.lettersSmallCaps()((void (**)(void, void, void, void))a2, a3, a4);
  }
  unint64_t v58 = v12;
  uint64_t v61 = a2;
  uint64_t v57 = v25;
  sub_1E0E100DC();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1E0F06210;
  uint64_t v29 = a1;
  id result = objc_msgSend(a1, sel_AMSymbol);
  if (!result)
  {
    __break(1u);
    goto LABEL_18;
  }
  int64_t v31 = result;
  uint64_t v32 = sub_1E0ECD1D0();
  uint64_t v34 = v33;

  *(void *)(inited + 32) = v32;
  *(void *)(inited + 40) = v34;
  id result = objc_msgSend(v29, sel_PMSymbol);
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v35 = result;
  uint64_t v55 = v24;
  uint64_t v56 = a4;
  uint64_t v36 = sub_1E0ECD1D0();
  uint64_t v38 = v37;

  *(void *)(inited + 48) = v36;
  *(void *)(inited + 56) = v38;
  uint64_t v39 = sub_1E0E0FF34(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  sub_1E0ECB6E0();
  uint64_t v40 = (uint64_t)v66;
  sub_1E0ECB650();
  v54[1] = v39;
  uint64_t v41 = sub_1E0E0F1D8(v39, v40);
  uint64_t v42 = *(void *)(v41 + 16);
  v54[0] = v41;
  if (v42)
  {
    uint64_t v43 = v41 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
    uint64_t v59 = *(void *)(v58 + 72);
    uint64_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    unint64_t v58 = (v58 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v44 = v65;
    uint64_t v46 = (uint64_t)v62;
    uint64_t v45 = (uint64_t)v63;
    while (1)
    {
      sub_1E0E0BBA0(v43, (uint64_t)v21);
      uint64_t v47 = *v61;
      (*v61)(v21, 0, 1, v44);
      if ((*v60)(v21, 1, v44) == 1) {
        break;
      }
      sub_1E0E0BA0C((uint64_t)v21, v46);
      sub_1E0E0BBA0(v46, v45);
      uint64_t KeyPath = swift_getKeyPath();
      v54[-2] = MEMORY[0x1F4188790](KeyPath, v49);
      swift_getKeyPath();
      uint64_t v50 = v21;
      uint64_t v51 = v64;
      sub_1E0ECCAC0();
      uint64_t v52 = sub_1E0ECCAD0();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 0, 1, v52);
      sub_1E0E0BACC(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
      uint64_t v53 = (void (*)(char *, void))sub_1E0ECB660();
      sub_1E0E0FFEC();
      uint64_t v21 = v50;
      sub_1E0ECB700();
      uint64_t v44 = v65;
      v53(v67, 0);
      sub_1E0E0BA70(v45);
      sub_1E0E0BA70(v46);
      v43 += v59;
      if (!--v42) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    uint64_t v44 = v65;
LABEL_15:
    v47(v21, 1, 1, v44);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v56, v66, v55);
  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_1E0E0FC30()
{
  id v1 = objc_msgSend(v0, sel_AMSymbol);
  if (!v1) {
    goto LABEL_14;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_1E0ECD1D0();
  uint64_t v5 = v4;

  id v6 = objc_msgSend(v0, sel_PMSymbol);
  if (!v6)
  {
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    char v18 = 0;
    return v18 & 1;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_1E0ECD1D0();
  uint64_t v10 = v9;

  sub_1E0E0F184();
  uint64_t v11 = sub_1E0ECD730();
  uint64_t v13 = v12;
  uint64_t v14 = sub_1E0ECD730();
  uint64_t v16 = v15;
  if (v11 != v3 || v13 != v5)
  {
    char v17 = sub_1E0ECD9E0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRelease_n();
LABEL_8:
  if (v14 == v8 && v16 == v10)
  {
    swift_bridgeObjectRelease_n();
    char v18 = 1;
  }
  else
  {
    char v18 = sub_1E0ECD9E0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v18 & 1;
}

uint64_t NSDateFormatter.AttributedStringFormatOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t NSDateFormatter.AttributedStringFormatOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NSDateFormatter.AttributedStringFormatOptions.designatorSmallCaps.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NSDateFormatter.attributedString(from:options:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v8 = *a1;
  uint64_t v9 = (void *)sub_1E0ECB920();
  id v10 = objc_msgSend(v3, sel_stringFromDate_, v9);

  uint64_t v11 = (void (**)(char *, void, uint64_t, void))sub_1E0ECD1D0();
  uint64_t v13 = v12;

  if (v8)
  {
    String.designatorSmallCaps(dateFormatter:)(v3, v11, v13, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1E0ECB6E0();
    return sub_1E0ECB650();
  }
}

uint64_t sub_1E0E0FF34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1E0ECD400();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1E0E2D4B4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_1E0E0FFCC()
{
}

unint64_t sub_1E0E0FFEC()
{
  unint64_t result = qword_1EAD6DF70;
  if (!qword_1EAD6DF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DF70);
  }
  return result;
}

void sub_1E0E10040()
{
}

uint64_t sub_1E0E10068()
{
  return 8;
}

uint64_t sub_1E0E10074()
{
  return swift_release();
}

uint64_t sub_1E0E1007C(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1E0E1008C()
{
  return sub_1E0ECD070();
}

void *sub_1E0E100D0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_1E0E100DC()
{
  if (!qword_1EAD69880)
  {
    unint64_t v0 = sub_1E0ECD9C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD69880);
    }
  }
}

unint64_t sub_1E0E10138()
{
  unint64_t result = qword_1EAD6DF78;
  if (!qword_1EAD6DF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DF78);
  }
  return result;
}

unint64_t sub_1E0E10190()
{
  unint64_t result = qword_1EAD6DF80;
  if (!qword_1EAD6DF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DF80);
  }
  return result;
}

unint64_t sub_1E0E101E8()
{
  unint64_t result = qword_1EAD6DF88;
  if (!qword_1EAD6DF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DF88);
  }
  return result;
}

unint64_t sub_1E0E10240()
{
  unint64_t result = qword_1EAD6DF90;
  if (!qword_1EAD6DF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6DF90);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDateFormatter.AttributedStringFormatOptions()
{
  return &type metadata for NSDateFormatter.AttributedStringFormatOptions;
}

void sub_1E0E102A4()
{
  if (!qword_1EAD6DF98)
  {
    sub_1E0ECB560();
    unint64_t v0 = sub_1E0ECDA80();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DF98);
    }
  }
}

void sub_1E0E10304(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD6C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1E0E10358(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1E0E10304(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void *HKAdaptiveModalPresented<>.makeDoneButtonForModalDismiss()(uint64_t a1)
{
  sub_1E0DF2C04(0, &qword_1EAD6DFA8);
  uint64_t v2 = (void *)sub_1E0ECD550();
  sub_1E0DF2C04(0, &qword_1EAD6DFB0);
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v3;
  uint64_t v7 = v4;
  uint64_t v5 = (void *)sub_1E0ECD6B0();
  objc_msgSend(v2, sel_setPrimaryAction_, v5, 0, 0, 0, sub_1E0E105AC, v7);

  return v2;
}

uint64_t sub_1E0E104D8()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1E0E10510(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x1E4E41170](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

uint64_t sub_1E0E10574()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1E0E105AC(uint64_t a1)
{
  sub_1E0E10510(a1, *(void *)(v1 + 24));
}

void UIViewController._hk_showAdaptively(_:sender:animated:)(void *a1, uint64_t a2, char a3)
{
  id v6 = objc_msgSend(v3, sel_traitCollection);
  id v7 = objc_msgSend(v6, sel_horizontalSizeClass);

  if (v7 == (id)2)
  {
    id v9 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), sel_initWithRootViewController_, a1);
    objc_msgSend(a1, sel_viewControllerWillEnterAdaptiveModal);
    id v10 = v9;
    objc_msgSend(v10, sel_setModalPresentationStyle_, objc_msgSend(a1, sel_modalPresentationStyle));

    objc_msgSend(v3, sel_presentViewController_animated_completion_, v10, a3 & 1, 0);
  }
  else
  {
    if (v7 == (id)1)
    {
      id v8 = objc_msgSend(v3, sel_navigationController);
      if (!v8) {
        return;
      }
    }
    else
    {
      id v8 = objc_msgSend(v3, sel_navigationController);
      if (!v8) {
        return;
      }
    }
    id v10 = v8;
    objc_msgSend(v8, sel_pushViewController_animated_, a1, 1);
  }
}

uint64_t sub_1E0E1072C(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  if (a4)
  {
    id v8 = a3;
    id v9 = a1;
    swift_unknownObjectRetain();
    sub_1E0ECD760();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
    id v11 = a3;
    id v12 = a1;
  }
  UIViewController._hk_showAdaptively(_:sender:animated:)(a3, v10, a5);

  return sub_1E0B32EE4((uint64_t)v14);
}

uint64_t destroy for ListValueCell()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ListValueCell(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ListValueCell(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ListValueCell(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListValueCell(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListValueCell(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListValueCell()
{
  return &type metadata for ListValueCell;
}

uint64_t sub_1E0E10988()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E109A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  v20[1] = a1;
  void v20[2] = a2;
  uint64_t v23 = a5;
  uint64_t v5 = sub_1E0ECC850();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  id v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E113F0();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v13);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v16 = sub_1E0ECC8B0();
  unsigned __int8 v17 = sub_1E0ECC8D0();
  char v18 = sub_1E0ECC8C0();
  sub_1E0ECC8C0();
  if (sub_1E0ECC8C0() != v16) {
    char v18 = sub_1E0ECC8C0();
  }
  sub_1E0ECC8C0();
  if (sub_1E0ECC8C0() != v17) {
    char v18 = sub_1E0ECC8C0();
  }
  sub_1E0E10C08(v21, v25);
  memcpy(&v26[7], v25, 0x140uLL);
  v24[0] = v18;
  memcpy(&v24[1], v26, 0x147uLL);
  sub_1E0ECC830();
  sub_1E0E11474();
  sub_1E0E11994();
  sub_1E0ECCB80();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  memcpy(v27, v24, 0x148uLL);
  sub_1E0E119EC((uint64_t)v27);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v23, v15, v11);
}

uint64_t sub_1E0E10C08@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  uint64_t v5 = sub_1E0ECC600();
  sub_1E0E10EF4(a1, (uint64_t)v7);
  *(_OWORD *)((char *)&v9[5] + 7) = v7[5];
  *(_OWORD *)((char *)&v9[6] + 7) = v7[6];
  *(_OWORD *)((char *)&v9[7] + 7) = v7[7];
  *(_OWORD *)((char *)&v9[1] + 7) = v7[1];
  *(_OWORD *)((char *)&v9[2] + 7) = v7[2];
  *(_OWORD *)((char *)&v9[3] + 7) = v7[3];
  *(_OWORD *)((char *)&v9[4] + 7) = v7[4];
  char v10 = 1;
  *(void *)((char *)&v9[8] + 7) = v8;
  *(_OWORD *)((char *)v9 + 7) = v7[0];
  uint64_t v3 = sub_1E0ECC630();
  sub_1E0E1116C(a1, (uint64_t)v11);
  *(void *)((char *)&v13[8] + 7) = v12;
  *(_OWORD *)((char *)&v13[5] + 7) = v11[5];
  *(_OWORD *)((char *)&v13[6] + 7) = v11[6];
  *(_OWORD *)((char *)&v13[7] + 7) = v11[7];
  *(_OWORD *)((char *)&v13[1] + 7) = v11[1];
  *(_OWORD *)((char *)&v13[2] + 7) = v11[2];
  *(_OWORD *)((char *)&v13[3] + 7) = v11[3];
  *(_OWORD *)((char *)&v13[4] + 7) = v11[4];
  *(_OWORD *)((char *)v13 + 7) = v11[0];
  *(_OWORD *)&v16[81] = v9[5];
  *(_OWORD *)&v16[97] = v9[6];
  *(_OWORD *)&v16[113] = v9[7];
  *(_OWORD *)&v16[128] = *(_OWORD *)((char *)&v9[7] + 15);
  *(_OWORD *)&v16[17] = v9[1];
  *(_OWORD *)&v16[33] = v9[2];
  *(_OWORD *)&v16[49] = v9[3];
  *(_OWORD *)&v16[65] = v9[4];
  *(_OWORD *)&v16[1] = v9[0];
  *(_OWORD *)&v18[81] = v13[5];
  *(_OWORD *)&v18[97] = v13[6];
  *(_OWORD *)&v18[113] = v13[7];
  *(_OWORD *)&v18[128] = *(_OWORD *)((char *)&v13[7] + 15);
  *(_OWORD *)&v18[17] = v13[1];
  *(_OWORD *)&v18[33] = v13[2];
  *(_OWORD *)&v18[49] = v13[3];
  char v14 = 1;
  long long v15 = (unint64_t)v5;
  v16[0] = 1;
  long long v17 = (unint64_t)v3;
  v18[0] = 1;
  *(_OWORD *)&v18[65] = v13[4];
  *(_OWORD *)&v18[1] = v13[0];
  __src[7] = *(_OWORD *)&v16[96];
  __src[8] = *(_OWORD *)&v16[112];
  __src[9] = *(_OWORD *)((char *)&v9[7] + 15);
  void __src[2] = *(_OWORD *)&v16[16];
  __src[3] = *(_OWORD *)&v16[32];
  __src[4] = *(_OWORD *)&v16[48];
  __src[5] = *(_OWORD *)&v16[64];
  __src[6] = *(_OWORD *)&v16[80];
  __src[0] = (unint64_t)v5;
  __src[1] = *(_OWORD *)v16;
  __src[16] = *(_OWORD *)&v18[80];
  __src[17] = *(_OWORD *)&v18[96];
  __src[18] = *(_OWORD *)&v18[112];
  __src[19] = *(_OWORD *)((char *)&v13[7] + 15);
  __src[12] = *(_OWORD *)&v18[16];
  __src[13] = *(_OWORD *)&v18[32];
  __src[14] = *(_OWORD *)&v18[48];
  __src[15] = *(_OWORD *)&v18[64];
  __src[10] = (unint64_t)v3;
  __src[11] = *(_OWORD *)v18;
  memcpy(a2, __src, 0x140uLL);
  long long v27 = v13[5];
  long long v28 = v13[6];
  *(_OWORD *)uint64_t v29 = v13[7];
  *(_OWORD *)&v29[15] = *(_OWORD *)((char *)&v13[7] + 15);
  long long v23 = v13[1];
  long long v24 = v13[2];
  long long v25 = v13[3];
  long long v26 = v13[4];
  v20[0] = v3;
  v20[1] = 0;
  char v21 = 1;
  long long v22 = v13[0];
  sub_1E0E11B30((uint64_t)&v15);
  sub_1E0E11B30((uint64_t)&v17);
  sub_1E0E11BD4((uint64_t)v20);
  long long v37 = v9[5];
  long long v38 = v9[6];
  *(_OWORD *)uint64_t v39 = v9[7];
  *(_OWORD *)&v39[15] = *(_OWORD *)((char *)&v9[7] + 15);
  long long v33 = v9[1];
  long long v34 = v9[2];
  long long v35 = v9[3];
  long long v36 = v9[4];
  v30[0] = v5;
  v30[1] = 0;
  char v31 = 1;
  long long v32 = v9[0];
  return sub_1E0E11BD4((uint64_t)v30);
}

uint64_t sub_1E0E10EF4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_1E0E0F184();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1E0ECCAF0();
  uint64_t v25 = v4;
  uint64_t v26 = v5;
  char v7 = v6 & 1;
  uint64_t v27 = a1;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1E0ECCAF0();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  sub_1E0ECCC70();
  uint64_t v13 = sub_1E0ECCA90();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v23 = v18;
  swift_release();
  sub_1E0DF8F74(v8, v10, v12);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = swift_getKeyPath();
  *(_DWORD *)(a2 + 17) = v27;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v27 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v31;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v31[3];
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v30;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v30[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v29;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v29[3];
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v28;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v28[3];
  *(void *)a2 = v24;
  *(void *)(a2 + 8) = v26;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v15;
  *(unsigned char *)(a2 + 64) = v17 & 1;
  *(void *)(a2 + 72) = v23;
  *(void *)(a2 + 80) = KeyPath;
  *(void *)(a2 + 88) = 1;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = 1;
  *(void *)(a2 + 120) = v21;
  *(void *)(a2 + 128) = 0x3FC999999999999ALL;
  sub_1E0E11B20(v24, v26, v7);
  swift_bridgeObjectRetain();
  sub_1E0E11B20(v13, v15, v17 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1E0DF8F74(v13, v15, v17 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v24, v26, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1E0E1116C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_1E0E0F184();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1E0ECCAF0();
  uint64_t v25 = v4;
  uint64_t v26 = v5;
  char v7 = v6 & 1;
  uint64_t v27 = a1;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1E0ECCAF0();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  sub_1E0ECCC70();
  uint64_t v13 = sub_1E0ECCA90();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v23 = v18;
  swift_release();
  sub_1E0DF8F74(v8, v10, v12);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = swift_getKeyPath();
  *(_DWORD *)(a2 + 17) = v27;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v27 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v31;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v31[3];
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v30;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v30[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v29;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v29[3];
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v28;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v28[3];
  *(void *)a2 = v24;
  *(void *)(a2 + 8) = v26;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v25;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v15;
  *(unsigned char *)(a2 + 64) = v17 & 1;
  *(void *)(a2 + 72) = v23;
  *(void *)(a2 + 80) = KeyPath;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = 1;
  *(void *)(a2 + 120) = v21;
  *(void *)(a2 + 128) = 0x3FC999999999999ALL;
  sub_1E0E11B20(v24, v26, v7);
  swift_bridgeObjectRetain();
  sub_1E0E11B20(v13, v15, v17 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1E0DF8F74(v13, v15, v17 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v24, v26, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1E0E113E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1E0E109A4(*v1, v1[1], v1[2], v1[3], a1);
}

void sub_1E0E113F0()
{
  if (!qword_1EAD6DFB8)
  {
    sub_1E0E11474();
    sub_1E0E11994();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EAD6DFB8);
    }
  }
}

void sub_1E0E11474()
{
  if (!qword_1EAD6DFC0)
  {
    sub_1E0E115BC(255, &qword_1EAD6DFC8, (void (*)(uint64_t))sub_1E0E11514);
    sub_1E0E11944(&qword_1EAD6E020, &qword_1EAD6DFC8, (void (*)(uint64_t))sub_1E0E11514);
    unint64_t v0 = sub_1E0ECC310();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6DFC0);
    }
  }
}

void sub_1E0E11514()
{
  if (!qword_1EAD6DFD0)
  {
    sub_1E0E1189C(255, &qword_1EAD6DFD8, MEMORY[0x1E4F3ED38]);
    sub_1E0E1189C(255, &qword_1EAD6E018, MEMORY[0x1E4F3EDC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6DFD0);
    }
  }
}

void sub_1E0E115BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECCE40();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0E11610()
{
  if (!qword_1EAD6DFE8)
  {
    sub_1E0E116DC(255, &qword_1EAD6DFF0, sub_1E0E116AC, &qword_1EB5850A8, MEMORY[0x1E4FBC958]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EAD6DFE8);
    }
  }
}

void sub_1E0E116AC(uint64_t a1)
{
}

void sub_1E0E116DC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    a3(255);
    sub_1E0E11850(255, a4, a5, MEMORY[0x1E4F3DF18]);
    unint64_t v8 = sub_1E0ECC3F0();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1E0E11774()
{
  if (!qword_1EAD6E000)
  {
    sub_1E0E117D4();
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E000);
    }
  }
}

void sub_1E0E117D4()
{
  if (!qword_1EB585100)
  {
    sub_1E0E11850(255, &qword_1EB5851B8, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1E0ECC880();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB585100);
    }
  }
}

void sub_1E0E11850(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1E0E1189C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1E0E115BC(255, &qword_1EAD6DFE0, (void (*)(uint64_t))sub_1E0E11610);
    uint64_t v7 = v6;
    uint64_t v8 = sub_1E0E11944(&qword_1EAD6E010, &qword_1EAD6DFE0, (void (*)(uint64_t))sub_1E0E11610);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1E0E11944(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1E0E115BC(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1E0E11994()
{
  unint64_t result = qword_1EAD6E028;
  if (!qword_1EAD6E028)
  {
    sub_1E0E11474();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E028);
  }
  return result;
}

uint64_t sub_1E0E119EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  char v4 = *(unsigned char *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 192);
  char v7 = *(unsigned char *)(a1 + 208);
  uint64_t v8 = *(void *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 248);
  uint64_t v11 = *(void *)(a1 + 240);
  char v9 = *(unsigned char *)(a1 + 256);
  sub_1E0DF8F74(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v5, v8, v7);
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v11, v10, v9);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1E0E11B20(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1E0E11B30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  char v4 = *(unsigned char *)(a1 + 88);
  sub_1E0E11B20(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_1E0E11B20(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1E0E11BD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  char v4 = *(unsigned char *)(a1 + 88);
  sub_1E0DF8F74(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1E0E11C90()
{
  return swift_getOpaqueTypeConformance2();
}

char *sub_1E0E11CE8(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 2) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(char *, char **, uint64_t))(v9 - 8);
    char v12 = v5;
    v11(a1 + 8, v8, v10);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = (uint64_t)a2 + v13;
    sub_1E0E11E10();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

void sub_1E0E11E10()
{
  if (!qword_1EAD6E030)
  {
    sub_1E0E11E6C();
    unint64_t v0 = sub_1E0ECC300();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E030);
    }
  }
}

unint64_t sub_1E0E11E6C()
{
  unint64_t result = qword_1EAD6E038;
  if (!qword_1EAD6E038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E038);
  }
  return result;
}

uint64_t sub_1E0E11EC0(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 1);

  __swift_destroy_boxed_opaque_existential_0(v4);
  uint64_t v5 = (char *)a1 + *(int *)(a2 + 24);
  sub_1E0E11E10();
  char v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t sub_1E0E11F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = a2 + 8;
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v6;
  v11(v7, v8, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  sub_1E0E11E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **sub_1E0E1202C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(a2 + 1);
  uint64_t v6 = *a2;
  uint64_t v8 = *a1;
  *a1 = *a2;
  long long v9 = (uint64_t *)(a1 + 1);
  id v10 = v6;

  __swift_assign_boxed_opaque_existential_1(v9, v7);
  uint64_t v11 = *(int *)(a3 + 24);
  id v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  sub_1E0E11E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1E0E12308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  sub_1E0E11E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1E0E1239C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_1E0E11E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1E0E12448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0E1245C);
}

uint64_t sub_1E0E1245C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1E0E11E10();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1E0E1250C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0E12520);
}

void *sub_1E0E12520(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    sub_1E0E11E10();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalAccountBrandLogoView()
{
  uint64_t result = qword_1EAD6E040;
  if (!qword_1EAD6E040) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1E0E12614()
{
  sub_1E0E11E10();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1E0E126B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E126D4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return sub_1E0ECD280();
  }
  else {
    return 0;
  }
}

uint64_t sub_1E0E1271C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ClinicalAccountBrandLogoView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3, v6);
  v52[0] = sub_1E0ECC620();
  v52[1] = 0;
  char v53 = 1;
  sub_1E0E13A18(v1 + 8, (uint64_t)v68);
  sub_1E0E13CA8(v1, (uint64_t)&v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ClinicalAccountBrandLogoView);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  sub_1E0E14920((uint64_t)&v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v8 + v7, (uint64_t (*)(void))type metadata accessor for ClinicalAccountBrandLogoView);
  *(void *)&long long v39 = swift_getKeyPath();
  BYTE8(v39) = 0;
  sub_1E0E13A18((uint64_t)v68, (uint64_t)v38);
  sub_1E0E13A18((uint64_t)v38, (uint64_t)v37);
  sub_1E0E13C50();
  sub_1E0ECCCF0();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
  *(void *)&long long v40 = sub_1E0E13B7C;
  *((void *)&v40 + 1) = v8;
  long long v56 = v41;
  long long v57 = v42;
  long long v58 = v43;
  long long v54 = v39;
  long long v55 = v40;
  sub_1E0E13CA8((uint64_t)v52, (uint64_t)&v39, (uint64_t (*)(void))sub_1E0E13D10);
  uint64_t v44 = 0x3FF0000000000000;
  __int16 v45 = 0;
  sub_1E0E14848((uint64_t)v52, (uint64_t (*)(void))sub_1E0E13D10);
  sub_1E0E11E10();
  sub_1E0ECC2F0();
  sub_1E0ECC2F0();
  sub_1E0ECCE20();
  sub_1E0ECC320();
  sub_1E0E13CA8((uint64_t)&v39, (uint64_t)v52, (uint64_t (*)(void))sub_1E0E147BC);
  long long v59 = v68[0];
  long long v60 = v68[1];
  long long v61 = v68[2];
  sub_1E0E14848((uint64_t)&v39, (uint64_t (*)(void))sub_1E0E147BC);
  char v9 = sub_1E0ECC930();
  sub_1E0ECC270();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_1E0E13CA8((uint64_t)v52, (uint64_t)&v39, (uint64_t (*)(void))sub_1E0E148A8);
  char v46 = v9;
  uint64_t v47 = v11;
  uint64_t v48 = v13;
  uint64_t v49 = v15;
  uint64_t v50 = v17;
  char v51 = 0;
  sub_1E0E14848((uint64_t)v52, (uint64_t (*)(void))sub_1E0E148A8);
  char v18 = sub_1E0ECC900();
  sub_1E0ECC270();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  sub_1E0E13CA8((uint64_t)&v39, (uint64_t)v52, (uint64_t (*)(void))sub_1E0E148D0);
  char v62 = v18;
  uint64_t v63 = v20;
  uint64_t v64 = v22;
  uint64_t v65 = v24;
  uint64_t v66 = v26;
  char v67 = 0;
  sub_1E0E14848((uint64_t)&v39, (uint64_t (*)(void))sub_1E0E148D0);
  char v27 = sub_1E0ECC920();
  sub_1E0ECC270();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_1E0E13CA8((uint64_t)v52, a1, (uint64_t (*)(void))sub_1E0E148F8);
  *(unsigned char *)(a1 + 264) = v27;
  *(void *)(a1 + 272) = v29;
  *(void *)(a1 + 280) = v31;
  *(void *)(a1 + 288) = v33;
  *(void *)(a1 + 296) = v35;
  *(unsigned char *)(a1 + 304) = 0;
  return sub_1E0E14848((uint64_t)v52, (uint64_t (*)(void))sub_1E0E148F8);
}

uint64_t sub_1E0E12B38@<X0>(id *a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v91 = a2;
  uint64_t v97 = a3;
  sub_1E0E1420C();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v96 = (uint64_t)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1E0ECC410();
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E14080();
  unint64_t v94 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E13FEC();
  uint64_t v93 = v15;
  MEMORY[0x1F4188790](v15, v16);
  char v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1E0ECCCB0();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E13F18(0);
  uint64_t v92 = v24;
  MEMORY[0x1F4188790](v24, v25);
  char v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E13E4C(0);
  uint64_t v99 = v28;
  MEMORY[0x1F4188790](v28, v29);
  uint64_t v95 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E13E94(0, &qword_1EAD6E158, (uint64_t (*)(uint64_t))sub_1E0E13E4C, (uint64_t (*)(uint64_t))sub_1E0E142D0, MEMORY[0x1E4F3D748]);
  uint64_t v98 = v31;
  MEMORY[0x1F4188790](v31, v32);
  uint64_t v34 = (char *)&v84 - v33;
  if ((unint64_t)a1 >> 62)
  {
    uint64_t v77 = sub_1E0ECCE20();
    uint64_t v79 = v78;
    sub_1E0E13470(v91, (uint64_t)&v100);
    *(void *)uint64_t v34 = v77;
    *((void *)v34 + 1) = v79;
    long long v80 = v107;
    *((_OWORD *)v34 + 7) = v106;
    *((_OWORD *)v34 + 8) = v80;
    *((_OWORD *)v34 + 9) = v108;
    *((void *)v34 + 20) = v109;
    long long v81 = v103;
    *((_OWORD *)v34 + 3) = v102;
    *((_OWORD *)v34 + 4) = v81;
    long long v82 = v105;
    *((_OWORD *)v34 + 5) = v104;
    *((_OWORD *)v34 + 6) = v82;
    long long v83 = v101;
    *((_OWORD *)v34 + 1) = v100;
    *((_OWORD *)v34 + 2) = v83;
    swift_storeEnumTagMultiPayload();
    sub_1E0E142D0();
    sub_1E0E1468C(&qword_1EAD6E100, sub_1E0E13E4C, (void (*)(void))sub_1E0E14644, (void (*)(void))sub_1E0E14788);
    sub_1E0E14130(&qword_1EAD6E128, (void (*)(uint64_t))sub_1E0E142D0);
    return sub_1E0ECC740();
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v23, *MEMORY[0x1E4F3EBF8], v19);
    swift_retain();
    uint64_t v90 = sub_1E0ECCCD0();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    int v88 = sub_1E0ECC8F0();
    sub_1E0ECC270();
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v85 = sub_1E0ECCE20();
    uint64_t v84 = v43;
    uint64_t v89 = v7;
    uint64_t v44 = &v10[*(int *)(v7 + 20)];
    unsigned int v87 = *MEMORY[0x1E4F3D4A0];
    uint64_t v45 = v87;
    uint64_t v46 = sub_1E0ECC610();
    uint64_t v91 = a1;
    uint64_t v47 = v46;
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104);
    v48(v44, v45, v46);
    __asm { FMOV            V0.2D, #3.0 }
    long long v86 = _Q0;
    *(_OWORD *)uint64_t v10 = _Q0;
    uint64_t v54 = sub_1E0ECCC50();
    long long v55 = (uint64_t (*)(void))MEMORY[0x1E4F3CDB8];
    sub_1E0E13CA8((uint64_t)v10, (uint64_t)v14, MEMORY[0x1E4F3CDB8]);
    long long v56 = v94;
    *(void *)&v14[*((int *)v94 + 13)] = v54;
    *(_WORD *)&v14[*((int *)v56 + 14)] = 256;
    unint64_t v94 = (uint64_t (*)(void))MEMORY[0x1E4F3CDB8];
    sub_1E0E14848((uint64_t)v10, MEMORY[0x1E4F3CDB8]);
    sub_1E0E14920((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))sub_1E0E14080);
    long long v57 = (uint64_t *)&v18[*(int *)(v93 + 36)];
    uint64_t v58 = v84;
    uint64_t *v57 = v85;
    v57[1] = v58;
    sub_1E0E13CA8((uint64_t)v18, (uint64_t)&v27[*(int *)(v92 + 36)], (uint64_t (*)(void))sub_1E0E13FEC);
    *(void *)char v27 = v90;
    *((void *)v27 + 1) = 0;
    *((_WORD *)v27 + 8) = 1;
    v27[24] = v88;
    *((void *)v27 + 4) = v36;
    *((void *)v27 + 5) = v38;
    *((void *)v27 + 6) = v40;
    *((void *)v27 + 7) = v42;
    v27[64] = 0;
    sub_1E0E14848((uint64_t)v18, (uint64_t (*)(void))sub_1E0E13FEC);
    uint64_t v93 = sub_1E0ECCE20();
    uint64_t v60 = v59;
    uint64_t v61 = (uint64_t)v95;
    uint64_t v62 = (uint64_t)&v95[*(int *)(v99 + 36)];
    v48(&v10[*(int *)(v89 + 20)], v87, v47);
    *(_OWORD *)uint64_t v10 = v86;
    int v63 = sub_1E0ECC7C0();
    sub_1E0ECC2B0();
    uint64_t v64 = v96;
    sub_1E0E13CA8((uint64_t)v10, v96, v55);
    sub_1E0E14988();
    uint64_t v66 = v64 + *(int *)(v65 + 36);
    long long v67 = v101;
    *(_OWORD *)uint64_t v66 = v100;
    *(_OWORD *)(v66 + 16) = v67;
    *(void *)(v66 + 32) = v102;
    sub_1E0E14A1C();
    *(_DWORD *)(v64 + *(int *)(v68 + 52)) = v63;
    *(_WORD *)(v64 + *(int *)(v68 + 56)) = 256;
    uint64_t v69 = sub_1E0ECCE20();
    uint64_t v71 = v70;
    sub_1E0E14ACC();
    uint64_t v73 = (uint64_t *)(v64 + *(int *)(v72 + 36));
    uint64_t *v73 = v69;
    v73[1] = v71;
    sub_1E0E14848((uint64_t)v10, v94);
    sub_1E0E14920(v64, v62, (uint64_t (*)(void))sub_1E0E1420C);
    sub_1E0E14178();
    uint64_t v75 = (uint64_t *)(v62 + *(int *)(v74 + 36));
    *uint64_t v75 = v93;
    v75[1] = v60;
    sub_1E0E14920((uint64_t)v27, v61, (uint64_t (*)(void))sub_1E0E13F18);
    sub_1E0E13CA8(v61, (uint64_t)v34, (uint64_t (*)(void))sub_1E0E13E4C);
    swift_storeEnumTagMultiPayload();
    sub_1E0E142D0();
    sub_1E0E1468C(&qword_1EAD6E100, sub_1E0E13E4C, (void (*)(void))sub_1E0E14644, (void (*)(void))sub_1E0E14788);
    sub_1E0E14130(&qword_1EAD6E128, (void (*)(uint64_t))sub_1E0E142D0);
    sub_1E0ECC740();
    sub_1E0E14BB0((unint64_t)v91);
    return sub_1E0E14848(v61, (uint64_t (*)(void))sub_1E0E13E4C);
  }
}

uint64_t sub_1E0E13470@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v72 = a2;
  sub_1E0E14BD0(0, &qword_1EAD6E188, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v73 = (char *)&v67 - v5;
  uint64_t v6 = sub_1E0ECCC20();
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void))(v10 + 104))(v9, *MEMORY[0x1E4F3EB10]);
  uint64_t v71 = MEMORY[0x1E4E3E350](v9, 0.650980392, 0.650980392, 0.650980392, 1.0);
  id v11 = objc_msgSend(*a1, sel_title);
  uint64_t v12 = sub_1E0ECD1D0();
  uint64_t v14 = v13;

  *(void *)&long long v76 = v12;
  *((void *)&v76 + 1) = v14;
  sub_1E0E0F184();
  uint64_t v15 = sub_1E0ECD720();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1E0E126D4(v15, v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if (v20) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = 0;
  }
  unint64_t v22 = 0xE000000000000000;
  if (v20) {
    unint64_t v22 = v20;
  }
  *(void *)&long long v76 = v21;
  *((void *)&v76 + 1) = v22;
  uint64_t v23 = sub_1E0ECCAF0();
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  *(void *)&long long v76 = sub_1E0ECCC50();
  uint64_t v28 = sub_1E0ECCAA0();
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  sub_1E0DF8F74(v23, v25, v27);
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for ClinicalAccountBrandLogoView();
  sub_1E0E11E10();
  sub_1E0ECC2F0();
  uint64_t v33 = sub_1E0ECC990();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v67 = v33;
  uint64_t v68 = v34;
  uint64_t v35 = *(id **)(v34 + 56);
  uint64_t v69 = v34 + 56;
  uint64_t v70 = v35;
  uint64_t v36 = (uint64_t)v73;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v35)(v73, 1, 1, v33);
  sub_1E0ECC9C0();
  sub_1E0E14C34(v36);
  uint64_t v37 = sub_1E0ECCAB0();
  uint64_t v39 = v38;
  char v41 = v40;
  swift_release();
  char v42 = v41 & 1;
  sub_1E0DF8F74(v28, v30, v32);
  swift_bridgeObjectRelease();
  sub_1E0ECC9B0();
  uint64_t v43 = sub_1E0ECCA80();
  uint64_t v45 = v44;
  LOBYTE(v30) = v46 & 1;
  sub_1E0DF8F74(v37, v39, v42);
  swift_bridgeObjectRelease();
  uint64_t v47 = v67;
  uint64_t v48 = (uint64_t)v73;
  (*(void (**)(char *, void, uint64_t))(v68 + 104))(v73, *MEMORY[0x1E4F3E090], v67);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v70)(v48, 0, 1, v47);
  uint64_t v49 = sub_1E0ECCA70();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  LOBYTE(v39) = v54 & 1;
  sub_1E0DF8F74(v43, v45, v30);
  swift_bridgeObjectRelease();
  sub_1E0E14C34(v48);
  uint64_t v55 = sub_1E0ECCE20();
  sub_1E0E6C088(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v76, 0.0, 1, 0.0, 1, v55, v56, v49, v51, v39, v53);
  sub_1E0DF8F74(v49, v51, v39);
  swift_bridgeObjectRelease();
  long long v57 = v80;
  v75[5] = v81;
  v75[6] = v82;
  long long v58 = v82;
  long long v59 = v83;
  v75[7] = v83;
  v75[8] = v84;
  long long v60 = v77;
  long long v61 = v76;
  v75[1] = v77;
  v75[2] = v78;
  long long v62 = v78;
  long long v63 = v79;
  v75[3] = v79;
  v75[4] = v80;
  v74[6] = v82;
  v74[7] = v83;
  v74[8] = v84;
  v75[0] = v76;
  void v74[2] = v78;
  v74[3] = v79;
  v74[4] = v80;
  v74[5] = v81;
  v74[0] = v76;
  v74[1] = v77;
  uint64_t v65 = v71;
  uint64_t v64 = v72;
  *(_OWORD *)(v72 + 88) = v81;
  *(_OWORD *)(v64 + 104) = v58;
  *(_OWORD *)(v64 + 120) = v59;
  *(_OWORD *)(v64 + 136) = v84;
  *(_OWORD *)(v64 + 24) = v60;
  *(_OWORD *)(v64 + 40) = v62;
  *(_OWORD *)(v64 + 56) = v63;
  *(_OWORD *)(v64 + 72) = v57;
  *(_OWORD *)(v64 + 8) = v61;
  *(void *)uint64_t v64 = v65;
  swift_retain();
  sub_1E0E14CC0((uint64_t)v74);
  sub_1E0E14D00((uint64_t)v75);
  return swift_release();
}

uint64_t sub_1E0E13A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1E0E13A7C()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalAccountBrandLogoView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = v0 + v3 + 8;

  __swift_destroy_boxed_opaque_existential_0(v7);
  uint64_t v8 = v6 + v1[8];
  sub_1E0E11E10();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t sub_1E0E13B7C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ClinicalAccountBrandLogoView() - 8);
  uint64_t v6 = (id *)(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  return sub_1E0E12B38(a1, v6, a2);
}

uint64_t sub_1E0E13BFC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1E0ECC450();
  *a1 = v3;
  return result;
}

uint64_t sub_1E0E13C28()
{
  return sub_1E0ECC460();
}

unint64_t sub_1E0E13C50()
{
  unint64_t result = qword_1EAD6E050;
  if (!qword_1EAD6E050)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6E050);
  }
  return result;
}

uint64_t sub_1E0E13CA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1E0E13D10()
{
  if (!qword_1EAD6E058)
  {
    sub_1E0E13DA4();
    sub_1E0E14130(&qword_1EAD6E130, (void (*)(uint64_t))sub_1E0E13DA4);
    unint64_t v0 = sub_1E0ECCD90();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E058);
    }
  }
}

void sub_1E0E13DA4()
{
  if (!qword_1EAD6E060)
  {
    sub_1E0E13E94(255, &qword_1EAD6E068, (uint64_t (*)(uint64_t))sub_1E0E13E4C, (uint64_t (*)(uint64_t))sub_1E0E142D0, MEMORY[0x1E4F3D750]);
    sub_1E0E14514();
    unint64_t v0 = type metadata accessor for LoadableImage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E060);
    }
  }
}

void sub_1E0E13E4C(uint64_t a1)
{
}

void sub_1E0E13E94(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void sub_1E0E13F18(uint64_t a1)
{
}

void sub_1E0E13F60()
{
  if (!qword_1EAD6E080)
  {
    sub_1E0E14B60(255, (unint64_t *)&qword_1EB584FF8, MEMORY[0x1E4F3EC98], MEMORY[0x1E4F3D4F8], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E080);
    }
  }
}

void sub_1E0E13FEC()
{
  if (!qword_1EAD6E088)
  {
    sub_1E0E14080();
    sub_1E0E14130(&qword_1EAD6E0A0, (void (*)(uint64_t))sub_1E0E14080);
    unint64_t v0 = sub_1E0ECC730();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E088);
    }
  }
}

void sub_1E0E14080()
{
  if (!qword_1EAD6E090)
  {
    sub_1E0ECC410();
    sub_1E0E14130(&qword_1EAD6E098, MEMORY[0x1E4F3CDB8]);
    unint64_t v0 = sub_1E0ECC2A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E090);
    }
  }
}

uint64_t sub_1E0E14130(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1E0E14178()
{
  if (!qword_1EAD6E0A8)
  {
    sub_1E0E1420C();
    sub_1E0E14130(&qword_1EAD6E0B8, (void (*)(uint64_t))sub_1E0E1420C);
    unint64_t v0 = sub_1E0ECC430();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E0A8);
    }
  }
}

void sub_1E0E1420C()
{
  if (!qword_1EAD6E0B0)
  {
    sub_1E0ECC410();
    sub_1E0E14130(&qword_1EAD6E098, MEMORY[0x1E4F3CDB8]);
    unint64_t v0 = sub_1E0ECC400();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E0B0);
    }
  }
}

void sub_1E0E142D0()
{
  if (!qword_1EAD6E0C0)
  {
    sub_1E0E14BD0(255, &qword_1EAD6E0C8, (uint64_t (*)(uint64_t))sub_1E0E14364, MEMORY[0x1E4F3F108]);
    sub_1E0E1448C();
    unint64_t v0 = sub_1E0ECCDA0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E0C0);
    }
  }
}

void sub_1E0E14364()
{
  if (!qword_1EAD6E0D0)
  {
    sub_1E0E14400();
    sub_1E0E14B60(255, (unint64_t *)&qword_1EAD6E0E8, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CE48], MEMORY[0x1E4F3CC10]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6E0D0);
    }
  }
}

void sub_1E0E14400()
{
  if (!qword_1EAD6E0D8)
  {
    sub_1E0E14B60(255, &qword_1EAD6E0E0, MEMORY[0x1E4F3EB98], MEMORY[0x1E4F3EB78], MEMORY[0x1E4F3DC28]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E0D8);
    }
  }
}

unint64_t sub_1E0E1448C()
{
  unint64_t result = qword_1EAD6E0F0;
  if (!qword_1EAD6E0F0)
  {
    sub_1E0E14BD0(255, &qword_1EAD6E0C8, (uint64_t (*)(uint64_t))sub_1E0E14364, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E0F0);
  }
  return result;
}

unint64_t sub_1E0E14514()
{
  unint64_t result = qword_1EAD6E0F8;
  if (!qword_1EAD6E0F8)
  {
    sub_1E0E13E94(255, &qword_1EAD6E068, (uint64_t (*)(uint64_t))sub_1E0E13E4C, (uint64_t (*)(uint64_t))sub_1E0E142D0, MEMORY[0x1E4F3D750]);
    sub_1E0E1468C(&qword_1EAD6E100, sub_1E0E13E4C, (void (*)(void))sub_1E0E14644, (void (*)(void))sub_1E0E14788);
    sub_1E0E14130(&qword_1EAD6E128, (void (*)(uint64_t))sub_1E0E142D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E0F8);
  }
  return result;
}

uint64_t sub_1E0E14644()
{
  return sub_1E0E1468C(&qword_1EAD6E108, sub_1E0E13F18, (void (*)(void))sub_1E0E14718, (void (*)(void))sub_1E0E14754);
}

uint64_t sub_1E0E1468C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E0E14718()
{
  return sub_1E0E14D90(&qword_1EAD6E110, (void (*)(uint64_t))sub_1E0E13F60, (void (*)(void))sub_1E0DF65A4);
}

uint64_t sub_1E0E14754()
{
  return sub_1E0E14130(&qword_1EAD6E118, (void (*)(uint64_t))sub_1E0E13FEC);
}

uint64_t sub_1E0E14788()
{
  return sub_1E0E14130(&qword_1EAD6E120, (void (*)(uint64_t))sub_1E0E14178);
}

void sub_1E0E147BC(uint64_t a1)
{
}

void sub_1E0E147E4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECC3F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1E0E14848(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1E0E148A8(uint64_t a1)
{
}

void sub_1E0E148D0(uint64_t a1)
{
}

void sub_1E0E148F8(uint64_t a1)
{
}

uint64_t sub_1E0E14920(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1E0E14988()
{
  if (!qword_1EAD6E160)
  {
    sub_1E0ECC410();
    sub_1E0E14130(&qword_1EAD6E098, MEMORY[0x1E4F3CDB8]);
    unint64_t v0 = sub_1E0ECC360();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E160);
    }
  }
}

void sub_1E0E14A1C()
{
  if (!qword_1EAD6E168)
  {
    sub_1E0E14988();
    sub_1E0E14130(&qword_1EAD6E170, (void (*)(uint64_t))sub_1E0E14988);
    unint64_t v0 = sub_1E0ECC2A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E168);
    }
  }
}

void sub_1E0E14ACC()
{
  if (!qword_1EAD6E178)
  {
    sub_1E0E14A1C();
    sub_1E0E14B60(255, &qword_1EAD6E180, MEMORY[0x1E4F3F058], MEMORY[0x1E4F3F050], MEMORY[0x1E4F3D730]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E178);
    }
  }
}

void sub_1E0E14B60(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1E0E14BB0(unint64_t a1)
{
  if (a1 >> 62 == 1)
  {
  }
  else if (!(a1 >> 62))
  {
    swift_release();
  }
}

void sub_1E0E14BD0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1E0E14C34(uint64_t a1)
{
  sub_1E0E14BD0(0, &qword_1EAD6E188, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E0E14CC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1E0E14D00(uint64_t a1)
{
  return a1;
}

uint64_t sub_1E0E14D40()
{
  return sub_1E0E14D90(&qword_1EAD6E190, sub_1E0E14E10, (void (*)(void))sub_1E0E14E38);
}

uint64_t sub_1E0E14D90(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1E0E14E10(uint64_t a1)
{
}

uint64_t sub_1E0E14E38()
{
  return sub_1E0E14D90(&qword_1EAD6E1A0, sub_1E0E148F8, (void (*)(void))sub_1E0E14E74);
}

uint64_t sub_1E0E14E74()
{
  return sub_1E0E14D90(&qword_1EAD6E1A8, sub_1E0E148D0, (void (*)(void))sub_1E0E14EB0);
}

uint64_t sub_1E0E14EB0()
{
  return sub_1E0E14D90(&qword_1EAD6E1B0, sub_1E0E148A8, (void (*)(void))sub_1E0E14EEC);
}

uint64_t sub_1E0E14EEC()
{
  return sub_1E0E14D90(&qword_1EAD6E1B8, sub_1E0E147BC, (void (*)(void))sub_1E0E14F28);
}

uint64_t sub_1E0E14F28()
{
  return sub_1E0E14130((unint64_t *)&unk_1EAD6E1C0, (void (*)(uint64_t))sub_1E0E13D10);
}

uint64_t sub_1E0E14F5C()
{
  uint64_t v1 = sub_1E0ECBEF0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1E0ECBDF0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric;
  if (*(void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric))
  {
    unint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric);
LABEL_30:
    swift_bridgeObjectRetain();
    return v11;
  }
  unint64_t v60 = (unint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1E0ECBDE0();
  unint64_t v61 = sub_1E0E3F750(MEMORY[0x1E4FBC860]);
  uint64_t v55 = *(void *)(v12 + 16);
  if (!v55)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    unint64_t v11 = v61;
    *(void *)(v0 + v10) = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v47 = v10;
  uint64_t v48 = v0;
  uint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
  uint64_t v13 = v7 + 16;
  unint64_t v54 = v12 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  uint64_t v53 = (void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection);
  uint64_t v57 = *(void *)(v13 + 56);
  long long v58 = v14;
  uint64_t v63 = v2 + 16;
  uint64_t v15 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v51 = (void (**)(uint64_t, uint64_t))(v13 - 8);
  uint64_t v46 = v12;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  uint64_t v62 = v1;
  uint64_t v17 = v60;
  uint64_t v49 = v6;
  uint64_t v50 = v2;
  uint64_t v52 = v13;
  while (1)
  {
    uint64_t v59 = v16;
    v58(v17, v54 + v57 * v16, v6);
    __swift_project_boxed_opaque_existential_0(v53, v53[3]);
    uint64_t v19 = sub_1E0ECBF50();
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      uint64_t v21 = *(unsigned __int8 *)(v2 + 80);
      uint64_t v56 = v19;
      uint64_t v22 = v19 + ((v21 + 32) & ~v21);
      uint64_t v23 = *(void *)(v2 + 72);
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
      uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
      v24(v5, v22, v1);
      while (1)
      {
        uint64_t v26 = sub_1E0ECBE50();
        char v28 = v27;
        (*v15)(v5, v1);
        if ((v28 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v25 = sub_1E0E0BD88(0, v25[2] + 1, 1, v25);
          }
          unint64_t v30 = v25[2];
          unint64_t v29 = v25[3];
          if (v30 >= v29 >> 1) {
            uint64_t v25 = sub_1E0E0BD88((void *)(v29 > 1), v30 + 1, 1, v25);
          }
          void v25[2] = v30 + 1;
          v25[v30 + 4] = v26;
          uint64_t v1 = v62;
        }
        v22 += v23;
        if (!--v20) {
          break;
        }
        v24(v5, v22, v1);
      }
      swift_bridgeObjectRelease();
      uint64_t v6 = v49;
      uint64_t v2 = v50;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
    }
    unint64_t v31 = v61;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v64 = v31;
    unint64_t v34 = sub_1E0E5D90C(v60);
    uint64_t v35 = *(void *)(v31 + 16);
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (*(void *)(v31 + 24) >= v37)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1E0E60270();
      }
    }
    else
    {
      sub_1E0E5E0F8(v37, isUniquelyReferenced_nonNull_native);
      unint64_t v39 = sub_1E0E5D90C(v60);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_33;
      }
      unint64_t v34 = v39;
    }
    unint64_t v61 = v64;
    if (v38)
    {
      uint64_t v18 = *(void *)(v64 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v18 + 8 * v34) = v25;
      uint64_t v17 = v60;
    }
    else
    {
      *(void *)(v64 + 8 * (v34 >> 6) + 64) |= 1 << v34;
      uint64_t v17 = v60;
      v58(*(void *)(v61 + 48) + v34 * v57, v60, v6);
      unint64_t v41 = v61;
      *(void *)(*(void *)(v61 + 56) + 8 * v34) = v25;
      uint64_t v42 = *(void *)(v41 + 16);
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      if (v43) {
        goto LABEL_32;
      }
      *(void *)(v41 + 16) = v44;
    }
    uint64_t v16 = v59 + 1;
    swift_bridgeObjectRelease();
    (*v51)(v17, v6);
    if (v16 == v55)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v47;
      uint64_t v0 = v48;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t result = sub_1E0ECDA30();
  __break(1u);
  return result;
}

void sub_1E0E15434()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueRange;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueRange + 16))
  {
    uint64_t v2 = sub_1E0E14F5C();
    *(double *)&uint64_t v3 = COERCE_DOUBLE(sub_1E0E8FA98(v2));
    if (v4)
    {
      swift_bridgeObjectRelease();
      double v9 = 0.0;
      double v10 = 0.0;
    }
    else
    {
      double v5 = *(double *)&v3;
      double v6 = COERCE_DOUBLE(sub_1E0E8FD00(v2));
      char v8 = v7;
      swift_bridgeObjectRelease();
      double v9 = 0.0;
      double v10 = 0.0;
      if ((v8 & 1) == 0)
      {
        double v9 = v5;
        double v10 = v6;
        if (v5 > v6)
        {
          __break(1u);
          return;
        }
      }
    }
    *(double *)uint64_t v1 = v9;
    *(double *)(v1 + 8) = v10;
    *(unsigned char *)(v1 + 16) = 0;
  }
}

uint64_t sub_1E0E154E0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueMedialRange;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueMedialRange + 16))
  {
    uint64_t result = sub_1E0ECBEC0();
    if (v3 > v4)
    {
      __break(1u);
    }
    else
    {
      *(double *)uint64_t v1 = v3;
      *(double *)(v1 + 8) = v4;
      *(unsigned char *)(v1 + 16) = 0;
    }
  }
  return result;
}

unint64_t sub_1E0E15530()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRange;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRange + 17) & 1) == 0) {
    return *(void *)v1;
  }
  __swift_project_boxed_opaque_existential_0((void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection), *(void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection + 24));
  char v2 = sub_1E0ECBF80();
  if (v2) {
    unint64_t result = 0xBFFCCCCCCCCCCCCDLL;
  }
  else {
    unint64_t result = 0;
  }
  if (v2) {
    uint64_t v4 = 0x3FFCCCCCCCCCCCCDLL;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)uint64_t v1 = result;
  *(void *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 16) = (v2 & 1) == 0;
  return result;
}

uint64_t sub_1E0E155E0()
{
  uint64_t v1 = sub_1E0ECBDF0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  double v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1E0ECBEF0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  double v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric;
  if (*(void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric))
  {
    unint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric);
LABEL_26:
    swift_bridgeObjectRetain();
    return v12;
  }
  unint64_t v54 = v5;
  uint64_t v13 = sub_1E0ECBDE0();
  unint64_t v56 = sub_1E0E3F948(MEMORY[0x1E4FBC860]);
  uint64_t v51 = *(void *)(v13 + 16);
  if (!v51)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    unint64_t v12 = v56;
    *(void *)(v0 + v11) = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v42 = v11;
  uint64_t v43 = v0;
  unint64_t v50 = v13 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v49 = (void *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection);
  uint64_t v14 = *(void *)(v2 + 72);
  uint64_t v44 = v7;
  uint64_t v52 = (void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16);
  uint64_t v53 = v14;
  uint64_t v46 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v41 = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  long long v47 = xmmword_1E0F07BF0;
  uint64_t v45 = v1;
  while (1)
  {
    uint64_t v55 = v15;
    unint64_t v16 = v50 + v53 * v15;
    __swift_project_boxed_opaque_existential_0(v49, v49[3]);
    uint64_t v17 = sub_1E0ECBF50();
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      unint64_t v48 = v16;
      unint64_t v19 = v17 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      uint64_t v20 = *(void *)(v44 + 72);
      uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      while (1)
      {
        v21(v10, v19, v6);
        char v22 = sub_1E0ECBE60();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        if ((v22 & 1) == 0) {
          break;
        }
        v19 += v20;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          uint64_t v1 = v45;
          unint64_t v16 = v48;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v1 = v45;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v23 = *v52;
    uint64_t v24 = (uint64_t)v54;
    (*v52)((uint64_t)v54, v16, v1);
    unint64_t v25 = v56;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v25;
    unint64_t v28 = sub_1E0E5D90C(v24);
    uint64_t v29 = *(void *)(v25 + 16);
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (*(void *)(v25 + 24) >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1E0E6028C();
      }
    }
    else
    {
      sub_1E0E5E114(v31, isUniquelyReferenced_nonNull_native);
      unint64_t v33 = sub_1E0E5D90C((uint64_t)v54);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_29;
      }
      unint64_t v28 = v33;
    }
    uint64_t v35 = (uint64_t)v54;
    unint64_t v56 = v57;
    if (v32)
    {
      *(_OWORD *)(*(void *)(v57 + 56) + 16 * v28) = v47;
    }
    else
    {
      *(void *)(v57 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v23(*(void *)(v56 + 48) + v28 * v53, v35, v1);
      unint64_t v36 = v56;
      *(_OWORD *)(*(void *)(v56 + 56) + 16 * v28) = v47;
      uint64_t v37 = *(void *)(v36 + 16);
      BOOL v38 = __OFADD__(v37, 1);
      uint64_t v39 = v37 + 1;
      if (v38) {
        goto LABEL_28;
      }
      *(void *)(v36 + 16) = v39;
    }
    swift_bridgeObjectRelease();
    (*v46)(v35, v1);
LABEL_7:
    uint64_t v15 = v55 + 1;
    if (v55 + 1 == v51)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = v42;
      uint64_t v0 = v43;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = sub_1E0ECDA30();
  __break(1u);
  return result;
}

id sub_1E0E15A50(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric] = 0;
  double v5 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueRange];
  *(void *)double v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v6 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueMedialRange];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v7 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRange];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  v7[16] = 0;
  v7[17] = 1;
  *(void *)&v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric] = 0;
  sub_1E0E13A18(a1, (uint64_t)&v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection]);
  uint64_t v8 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_date];
  uint64_t v9 = sub_1E0ECB980();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a2, v9);
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for BalanceChartPoint();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v11;
}

id sub_1E0E15BD0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceChartPoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1E0E15CA8()
{
  return type metadata accessor for BalanceChartPoint();
}

uint64_t type metadata accessor for BalanceChartPoint()
{
  uint64_t result = qword_1EAD6E208;
  if (!qword_1EAD6E208) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1E0E15CFC()
{
  uint64_t result = sub_1E0ECB980();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double sub_1E0E1601C@<D0>(_OWORD *a1@<X8>)
{
  objc_super v2 = v1;
  swift_getObjectType();
  uint64_t v4 = sub_1E0ECC010();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0ECBFD0();
  uint64_t v9 = sub_1E0ECBFF0();
  os_log_type_t v10 = sub_1E0ECD520();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v19 = a1;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v18 = v2;
    unint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v14 = sub_1E0ECDBC0();
    uint64_t v20 = sub_1E0DED7E4(v14, v15, &v21);
    a1 = v19;
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v13, -1, -1);
    unint64_t v16 = v12;
    objc_super v2 = v18;
    MEMORY[0x1E4E41080](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (objc_msgSend(v2, sel_yValue))
  {
    sub_1E0ECD760();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t sub_1E0E163A4()
{
  if (!objc_msgSend(v0, sel_minYValue)) {
    return MEMORY[0x1E4FBC860];
  }
  sub_1E0ECD760();
  swift_unknownObjectRelease();
  sub_1E0DEDF98(v4, v5);
  if (!objc_msgSend(v0, sel_maxYValue))
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
    return MEMORY[0x1E4FBC860];
  }
  sub_1E0ECD760();
  swift_unknownObjectRelease();
  sub_1E0DEDF98(&v3, v4);
  sub_1E0B5CE0C(0, (unint64_t *)&qword_1EAD69A40, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1E0F06210;
  sub_1E0DEDFA8((uint64_t)v5, v1 + 32);
  sub_1E0DEDF98(v4, (_OWORD *)(v1 + 64));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  return v1;
}

void sub_1E0E16794()
{
  uint64_t v1 = OBJC_IVAR___HKAudiogramCurrentValueViewDataSource____lazy_storage___chartFormatter;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource____lazy_storage___chartFormatter);
  if (v2) {
    goto LABEL_4;
  }
  uint64_t v3 = v0;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems);
  id v5 = objc_msgSend(v4, sel_displayTypeController);
  id v6 = objc_msgSend(self, sel_audiogramSampleType);
  id v7 = objc_msgSend(v5, sel_displayTypeForObjectType_, v6);

  if (v7)
  {
    id v8 = objc_msgSend(v4, sel_unitController);
    id v9 = objc_allocWithZone((Class)type metadata accessor for AudiogramChartDataFormatter());
    id v10 = AudiogramChartDataFormatter.init(displayType:unitController:)(v7, v8);
    uint64_t v11 = *(void **)(v3 + v1);
    *(void *)(v3 + v1) = v10;
    v10;

    objc_super v2 = 0;
LABEL_4:
    id v12 = v2;
    return;
  }
  __break(1u);
}

id AudiogramCurrentValueViewDataSource.__allocating_init(applicationItems:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource____lazy_storage___chartFormatter] = 0;
  *(void *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram] = 0;
  *(void *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems] = a1;
  *(void *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels] = MEMORY[0x1E4FBC860];
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id AudiogramCurrentValueViewDataSource.init(applicationItems:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource____lazy_storage___chartFormatter] = 0;
  *(void *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram] = 0;
  *(void *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems] = a1;
  *(void *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels] = MEMORY[0x1E4FBC860];
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for AudiogramCurrentValueViewDataSource();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for AudiogramCurrentValueViewDataSource()
{
  return self;
}

void sub_1E0E16A44(void *a1)
{
  objc_super v2 = *(void **)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram);
  *(void *)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram) = a1;
  id v3 = a1;

  sub_1E0E16E70();
}

uint64_t sub_1E0E16B48()
{
  return 0;
}

uint64_t sub_1E0E16B58()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62)) {
    return *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1E0ECD910();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1E0E16C98(unint64_t a1, uint64_t a2)
{
  objc_super v5 = (uint64_t *)(v2 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v8 = (id)MEMORY[0x1E4E3EF00](a1, v7);
    swift_bridgeObjectRelease();
    if (a2) {
      goto LABEL_5;
    }
    goto LABEL_7;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    id v8 = *(id *)(v7 + 8 * a1 + 32);
    if (a2)
    {
LABEL_5:
      uint64_t v9 = 0;
LABEL_8:
      objc_msgSend(v8, sel_setOrientation_, v9);
      return (uint64_t)v8;
    }
LABEL_7:
    uint64_t v9 = 1;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1E0E16E60()
{
  return 0;
}

void sub_1E0E16E70()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  swift_beginAccess();
  *uint64_t v1 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram);
  if (v2)
  {
    uint64_t v3 = self;
    id v4 = v2;
    id v5 = objc_msgSend(v3, sel_sharedBehavior);
    if (v5)
    {
      id v6 = v5;
      id v7 = objc_msgSend(v5, sel_features);

      if (v7)
      {
        unsigned int v8 = objc_msgSend(v7, sel_yodel);

        if (v8)
        {
          id v9 = objc_msgSend(v4, sel_averageLeftEarSensitivity);
          id v10 = (void *)MEMORY[0x1E4FBC8C8];
          if (v9)
          {
            uint64_t v11 = v9;
            sub_1E0E16794();
            uint64_t v13 = v12;
            id v14 = objc_msgSend(self, sel_decibelHearingLevelUnit);
            id v15 = objc_msgSend(v11, sel_doubleValueForUnit_, v14);
            double v17 = v16;
            id v18 = objc_msgSend(objc_allocWithZone((Class)HKSelectedRangeData), sel_initWithStatisticsType_, (*(uint64_t (**)(id))((*v10 & *v13) + 0x60))(v15));
            objc_msgSend(v18, sel_setDataType_, (*(uint64_t (**)(void))((*v10 & *v13) + 0x50))());
            id v19 = objc_msgSend(v13, sel_attributedStringWithValue_unit_showUnit_, v14, 1, v17);
            objc_msgSend(v18, sel_setAttributedString_, v19);

            uint64_t v20 = (void *)sub_1E0ECBD90();
            objc_msgSend(v18, sel_setValueAsNumber_, v20);

            if (qword_1EAD69948 != -1) {
              swift_once();
            }
            sub_1E0ECB680();
            uint64_t v21 = (void *)sub_1E0ECD190();
            swift_bridgeObjectRelease();
            objc_msgSend(v18, sel_setTitleOverride_, v21, 0xE000000000000000);

            id v22 = objc_msgSend(self, sel_clearColor);
            uint64_t v23 = _s8HealthUI20AudiogramPointMarkerV7OptionsV03forC0_4sideSayAEGSo17HKAudiogramSampleC_So0I19SensitivityTestSideVtFZ_0(v4, 0);
            sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6E250);
            sub_1E0E18764(0, (unint64_t *)&qword_1EAD6E950, (uint64_t (*)(uint64_t))sub_1E0E187C8, MEMORY[0x1E4FBBE00]);
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_1E0F07C90;
            *(void *)(v24 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v24 + 32) = 0xD00000000000001DLL;
            *(void *)(v24 + 40) = 0x80000001E0F292F0;
            sub_1E0E18830(0, &qword_1EAD6E268, (uint64_t)&type metadata for AudiogramPointMarker.Options, MEMORY[0x1E4FBB320]);
            *(void *)(v24 + 88) = v25;
            *(void *)(v24 + 64) = v23;
            sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6E270);
            swift_bridgeObjectRetain();
            uint64_t v26 = (void *)sub_1E0ECD4F0();
            char v27 = (void *)sub_1E0ECD4E0();

            id v28 = v22;
            objc_msgSend(v27, sel___swift_setObject_forKeyedSubscript_, v28, sub_1E0ECDA10());
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            objc_msgSend(v18, sel_setMetadata_, v27);

            id v29 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartAnnotationViewKeyValueLabel), sel_init);
            id v30 = objc_msgSend(v29, sel_keyLabel);
            objc_msgSend(v30, sel_setSelectedRangeData_, v18);

            id v31 = objc_msgSend(v29, sel_valueLabel);
            id v32 = objc_msgSend(v18, sel_attributedString);
            objc_msgSend(v31, sel_setAttributedText_, v32);

            uint64_t v33 = swift_beginAccess();
            MEMORY[0x1E4E3E9E0](v33);
            if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              sub_1E0ECD350();
            }
            sub_1E0ECD370();
            sub_1E0ECD340();
            swift_endAccess();

            id v10 = (void *)MEMORY[0x1E4FBC8C8];
          }
          id v34 = objc_msgSend(v4, sel_averageRightEarSensitivity);
          if (v34)
          {
            uint64_t v35 = v34;
            sub_1E0E16794();
            uint64_t v37 = v36;
            id v38 = objc_msgSend(self, sel_decibelHearingLevelUnit);
            id v39 = objc_msgSend(v35, sel_doubleValueForUnit_, v38);
            double v41 = v40;
            id v42 = objc_msgSend(objc_allocWithZone((Class)HKSelectedRangeData), sel_initWithStatisticsType_, (*(uint64_t (**)(id))((*v10 & *v37) + 0x60))(v39));
            objc_msgSend(v42, sel_setDataType_, (*(uint64_t (**)(void))((*v10 & *v37) + 0x58))());
            id v43 = objc_msgSend(v37, sel_attributedStringWithValue_unit_showUnit_, v38, 1, v41);
            objc_msgSend(v42, sel_setAttributedString_, v43);

            uint64_t v44 = (void *)sub_1E0ECBD90();
            objc_msgSend(v42, sel_setValueAsNumber_, v44);

            if (qword_1EAD69948 != -1) {
              swift_once();
            }
            sub_1E0ECB680();
            uint64_t v45 = (void *)sub_1E0ECD190();
            swift_bridgeObjectRelease();
            objc_msgSend(v42, sel_setTitleOverride_, v45, 0xE000000000000000);

            id v46 = objc_msgSend(self, sel_clearColor);
            long long v47 = _s8HealthUI20AudiogramPointMarkerV7OptionsV03forC0_4sideSayAEGSo17HKAudiogramSampleC_So0I19SensitivityTestSideVtFZ_0(v4, (id)1);
            sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6E250);
            sub_1E0E18764(0, (unint64_t *)&qword_1EAD6E950, (uint64_t (*)(uint64_t))sub_1E0E187C8, MEMORY[0x1E4FBBE00]);
            uint64_t v48 = swift_allocObject();
            *(_OWORD *)(v48 + 16) = xmmword_1E0F07C90;
            *(void *)(v48 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v48 + 32) = 0xD00000000000001DLL;
            *(void *)(v48 + 40) = 0x80000001E0F292F0;
            sub_1E0E18830(0, &qword_1EAD6E268, (uint64_t)&type metadata for AudiogramPointMarker.Options, MEMORY[0x1E4FBB320]);
            *(void *)(v48 + 88) = v49;
            *(void *)(v48 + 64) = v47;
            sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6E270);
            swift_bridgeObjectRetain();
            unint64_t v50 = (void *)sub_1E0ECD4F0();
            uint64_t v51 = (void *)sub_1E0ECD4E0();

            id v52 = v46;
            objc_msgSend(v51, sel___swift_setObject_forKeyedSubscript_, v52, sub_1E0ECDA10());
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            objc_msgSend(v42, sel_setMetadata_, v51);

            id v53 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartAnnotationViewKeyValueLabel), sel_init);
            id v54 = objc_msgSend(v53, sel_keyLabel);
            objc_msgSend(v54, sel_setSelectedRangeData_, v42);

            id v55 = objc_msgSend(v53, sel_valueLabel);
            id v56 = objc_msgSend(v42, sel_attributedString);
            objc_msgSend(v55, sel_setAttributedText_, v56);

            uint64_t v57 = swift_beginAccess();
            MEMORY[0x1E4E3E9E0](v57);
            if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              sub_1E0ECD350();
            }
            sub_1E0ECD370();
            sub_1E0ECD340();
            swift_endAccess();
          }
          if (*v1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v59 = sub_1E0ECD910();
            swift_bridgeObjectRelease();
            if (v59) {
              goto LABEL_19;
            }
          }
          else if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_19:
            id v58 = v4;
LABEL_24:

            return;
          }
        }
        sub_1E0E17A3C(v4);
        unint64_t v61 = v60;
        swift_beginAccess();
        id v58 = v61;
        MEMORY[0x1E4E3E9E0]();
        if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1E0ECD350();
        }
        sub_1E0ECD370();
        sub_1E0ECD340();
        swift_endAccess();

        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_1E0E17A3C(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)HKSelectedRangeData), sel_initWithStatisticsType_, 3);
  objc_msgSend(v3, sel_setDataType_, 0);
  id v4 = *(void **)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems);
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_healthStore);
  uint64_t v7 = qword_1F3B98BD0;
  unsigned int v8 = (objc_class *)type metadata accessor for AudiogramCurrentValueDataProvider();
  id v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram] = v5;
  *(void *)&v9[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_healthStore] = v6;
  *(void *)&v9[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options] = v7;
  id v29 = v5;
  v30.receiver = v9;
  v30.super_class = v8;
  id v10 = objc_msgSendSuper2(&v30, sel_init);
  id v11 = objc_msgSend(v4, sel_displayTypeController);
  id v12 = objc_msgSend(self, sel_audiogramSampleType);
  id v13 = objc_msgSend(v11, sel_displayTypeForObjectType_, v12);

  if (v13)
  {
    id v14 = objc_msgSend(v4, sel_unitController);
    id v15 = self;
    id v16 = objc_msgSend(v15, sel_hk_chartCurrentValueValueFont);
    id v17 = objc_msgSend(v15, sel_hk_chartCurrentValueUnitFont);
    id v18 = objc_msgSend(v4, sel_dateCache);
    id v19 = self;
    id v20 = objc_msgSend(v19, sel_labelColor);
    id v21 = objc_msgSend(v19, sel_secondaryLabelColor);
    sub_1E0E1962C(v13, v14, v16, v20, v17, v21);
    uint64_t v23 = v22;

    objc_msgSend(v3, sel_setAttributedString_, v23);
    sub_1E0E17ED0(v29);
    uint64_t v24 = (void *)sub_1E0ECD190();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setTitleOverride_, v24);

    id v25 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartAnnotationViewKeyValueLabel), sel_init);
    id v26 = objc_msgSend(v25, sel_keyLabel);
    objc_msgSend(v26, sel_setSelectedRangeData_, v3);

    id v27 = objc_msgSend(v25, sel_valueLabel);
    id v28 = objc_msgSend(v3, sel_attributedString);
    objc_msgSend(v27, sel_setAttributedText_, v28);
  }
  else
  {
    __break(1u);
  }
}

id AudiogramCurrentValueViewDataSource.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AudiogramCurrentValueViewDataSource.init()()
{
}

id AudiogramCurrentValueViewDataSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramCurrentValueViewDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1E0E17ED0(void *a1)
{
  id v2 = objc_msgSend(a1, sel_hearingLevelSummary);
  id v3 = objc_msgSend(v2, sel_overallMetrics);

  id v4 = objc_msgSend(v3, sel_averageSensitivity);
  if (!v4)
  {
    if (qword_1EAD69948 != -1) {
      swift_once();
    }
    id v21 = (id)qword_1EAD740B8;
    sub_1E0ECB680();

    sub_1E0E0F184();
    uint64_t v9 = sub_1E0ECD730();
    swift_bridgeObjectRelease();
    return (id)v9;
  }
  id v5 = objc_msgSend(a1, sel_averageLeftEarSensitivity);
  id v6 = objc_msgSend(a1, sel_averageRightEarSensitivity);
  id result = HKAudiogramEarLocalizedDisplayNameForEar(1, 0);
  if (result)
  {
    unsigned int v8 = result;
    uint64_t v9 = sub_1E0ECD1D0();
    uint64_t v11 = v10;

    id result = HKAudiogramEarLocalizedDisplayNameForEar(2, 0);
    if (result)
    {
      id v12 = result;
      id v22 = v5;
      uint64_t v13 = sub_1E0ECD1D0();
      uint64_t v15 = v14;

      sub_1E0E18830(0, (unint64_t *)&qword_1EAD69880, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1E0F06210;
      *(void *)(v16 + 32) = v9;
      *(void *)(v16 + 40) = v11;
      *(void *)(v16 + 48) = v13;
      *(void *)(v16 + 56) = v15;
      uint64_t v17 = qword_1EAD69948;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17 != -1) {
        swift_once();
      }
      id v18 = (id)qword_1EAD740B8;
      sub_1E0ECB680();

      sub_1E0E18830(0, &qword_1EAD6E310, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
      sub_1E0E186E8();
      uint64_t v19 = sub_1E0ECD0A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6)
      {
        id v20 = v22;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v20)
        {

          return (id)v19;
        }
        else
        {
          return (id)v13;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      return (id)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1E0E182B0()
{
  sub_1E0E18764(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8, v2);
  id v4 = (char *)&v22 - v3;
  uint64_t v5 = sub_1E0ECB980();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram);
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  id v15 = objc_msgSend(v14, sel_endDate);
  sub_1E0ECB940();

  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v16(v4, v10, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_1E0DF0AA0((uint64_t)v4);
    sub_1E0ECB950();
    id v17 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems), sel_dateCache);
    sub_1E0E8F67C((uint64_t)v10, v17, 0);
    uint64_t v19 = v20;
    goto LABEL_6;
  }
  v16(v13, v4, v5);
  id v17 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems), sel_dateCache));
  sub_1E0E8F67C((uint64_t)v13, v17, 1);
  uint64_t v19 = v18;
  uint64_t v10 = v13;
LABEL_6:

  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  return v19;
}

uint64_t method lookup function for AudiogramCurrentValueViewDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudiogramCurrentValueViewDataSource);
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.__allocating_init(applicationItems:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.update(audiogram:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.dateView(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.leftMarginView(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.numberOfValues(forAnnotationView:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.valueViewForColumn(at:orientation:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.showSeparators()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

unint64_t sub_1E0E186E8()
{
  unint64_t result = qword_1EAD6E240;
  if (!qword_1EAD6E240)
  {
    sub_1E0E18830(255, &qword_1EAD6E310, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E240);
  }
  return result;
}

void sub_1E0E18764(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1E0E187C8()
{
  if (!qword_1EAD6E260)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6E260);
    }
  }
}

void sub_1E0E18830(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

id AudiogramCurrentValueDataProvider.__allocating_init(audiogram:healthStore:options:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = *a3;
  *(void *)&v7[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram] = a1;
  *(void *)&v7[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_healthStore] = a2;
  *(void *)&v7[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options] = v8;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t AudiogramCurrentValueOptions.rawValue.getter()
{
  return *(void *)v0;
}

HealthUI::AudiogramCurrentValueOptions __swiftcall AudiogramCurrentValueOptions.init(rawValue:)(HealthUI::AudiogramCurrentValueOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AudiogramCurrentValueOptions.shortenedSupplementaryValue.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void sub_1E0E18914()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_startDate);
  sub_1E0ECB940();
}

id AudiogramCurrentValueDataProvider.init(audiogram:healthStore:options:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *(void *)&v3[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram] = a1;
  *(void *)&v3[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_healthStore] = a2;
  *(void *)&v3[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options] = v4;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AudiogramCurrentValueDataProvider();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for AudiogramCurrentValueDataProvider()
{
  return self;
}

uint64_t sub_1E0E189FC(void *a1)
{
  uint64_t v3 = sub_1E0ECB980();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_startDate);
  sub_1E0ECB940();

  uint64_t v9 = (void *)sub_1E0ECB920();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  id v10 = HKLastUpdatedText(v9, a1);

  if (!v10) {
    return 0;
  }
  uint64_t v11 = sub_1E0ECD1D0();

  return v11;
}

uint64_t sub_1E0E18B5C(void *a1)
{
  uint64_t v3 = sub_1E0ECB980();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_startDate);
  sub_1E0ECB940();

  uint64_t v9 = (void *)sub_1E0ECB920();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  id v10 = HKMostRecentSampleEndDateText(v9, a1, 0);

  if (!v10) {
    return 0;
  }
  uint64_t v11 = sub_1E0ECD1D0();

  return v11;
}

id sub_1E0E18CC0(void *a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v6 = a3;
  id v7 = a1;
  a4(v6);
  uint64_t v9 = v8;

  if (v9)
  {
    id v10 = (void *)sub_1E0ECD190();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v10 = 0;
  }
  return v10;
}

uint64_t sub_1E0E18D54(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_labelColor);
  id v10 = objc_msgSend(v8, sel_secondaryLabelColor);
  sub_1E0E1962C(a1, a2, a3, v9, a4, v10);
  uint64_t v12 = v11;

  return v12;
}

uint64_t sub_1E0E18F34(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a1) {
    uint64_t v9 = 2 * (a1 == 1);
  }
  else {
    uint64_t v9 = 1;
  }
  id v10 = self;
  id v11 = objc_msgSend(v10, sel_labelColor);
  id v12 = objc_msgSend(v10, sel_secondaryLabelColor);
  uint64_t v13 = sub_1E0E19000(v9, a2, a3, a4, v11, a5, v12);

  return v13;
}

uint64_t sub_1E0E19000(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  switch(a1)
  {
    case 0:
      id v16 = objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_hearingLevelSummary);
      id v17 = objc_msgSend(v16, sel_overallMetrics);

      id v18 = objc_msgSend(v17, sel_averageSensitivity);
      if (v18) {
        goto LABEL_9;
      }
      return 0;
    case 2:
      id v15 = objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_averageRightEarSensitivity);
      goto LABEL_8;
    case 1:
      id v15 = objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_averageLeftEarSensitivity);
LABEL_8:
      id v18 = v15;
      if (v18)
      {
LABEL_9:
        if (a4)
        {
          id v20 = v18;
          id v21 = a4;
          unint64_t v64 = a7;
          if (a6)
          {
LABEL_11:
            id v22 = a4;
            id v60 = a6;
LABEL_14:
            id v27 = a6;
            sub_1E0E19F54(v18, a1, a2, a3, 1);
            sub_1E0E1AC14(0, (unint64_t *)&qword_1EAD69A20, (void (*)(uint64_t))sub_1E0E1AC68);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1E0F06210;
            uint64_t v63 = v18;
            id v29 = (void *)*MEMORY[0x1E4FB06F8];
            *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
            uint64_t v59 = sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD69A00);
            *(void *)(inited + 40) = v21;
            objc_super v30 = (void *)*MEMORY[0x1E4FB0700];
            *(void *)(inited + 64) = v59;
            *(void *)(inited + 72) = v30;
            uint64_t v58 = sub_1E0DF2C04(0, &qword_1EAD69A10);
            *(void *)(inited + 104) = v58;
            *(void *)(inited + 80) = a5;
            swift_bridgeObjectRetain();
            id v57 = v29;
            id v62 = v21;
            id v31 = v30;
            id v32 = a5;
            sub_1E0E3FB40(inited);
            id v33 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
            id v34 = (void *)sub_1E0ECD190();
            swift_bridgeObjectRelease();
            type metadata accessor for Key(0);
            sub_1E0E1ACD4();
            uint64_t v35 = MEMORY[0x1E4FBC840] + 8;
            unint64_t v36 = a3;
            uint64_t v37 = (void *)sub_1E0ECCFC0();
            swift_bridgeObjectRelease();
            id v61 = objc_msgSend(v33, sel_initWithString_attributes_, v34, v37);
            swift_bridgeObjectRelease();

            id v38 = objc_msgSend(self, sel_decibelHearingLevelUnit);
            id v39 = objc_msgSend(v36, sel_localizedDisplayNameForUnit_value_, v38, 0);

            sub_1E0ECD1D0();
            uint64_t v40 = swift_initStackObject();
            *(_OWORD *)(v40 + 16) = xmmword_1E0F06210;
            *(void *)(v40 + 32) = v57;
            *(void *)(v40 + 40) = v60;
            *(void *)(v40 + 64) = v59;
            *(void *)(v40 + 72) = v31;
            *(void *)(v40 + 104) = v58;
            *(void *)(v40 + 80) = v64;
            swift_bridgeObjectRetain();
            id v41 = v57;
            id v42 = v60;
            id v43 = v31;
            id v44 = v64;
            sub_1E0E3FB40(v40);
            id v45 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
            id v46 = (void *)sub_1E0ECD190();
            swift_bridgeObjectRelease();
            long long v47 = (void *)sub_1E0ECCFC0();
            swift_bridgeObjectRelease();
            id v48 = objc_msgSend(v45, sel_initWithString_attributes_, v46, v47);
            swift_bridgeObjectRelease();

            if (qword_1EAD69948 != -1) {
              swift_once();
            }
            id v49 = (id)qword_1EAD740B8;
            sub_1E0ECB680();

            sub_1E0E1AD2C(0, (unint64_t *)&qword_1EAD69A40, v35, MEMORY[0x1E4FBBE00]);
            uint64_t v50 = swift_allocObject();
            *(_OWORD *)(v50 + 16) = xmmword_1E0F06210;
            uint64_t v51 = sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD699C0);
            *(void *)(v50 + 32) = v61;
            *(void *)(v50 + 88) = v51;
            *(void *)(v50 + 56) = v51;
            *(void *)(v50 + 64) = v48;
            id v52 = v61;
            id v53 = v48;
            id v54 = (void *)sub_1E0ECD320();
            swift_bridgeObjectRelease();
            id v55 = (void *)sub_1E0ECD190();
            swift_bridgeObjectRelease();
            id v19 = HKUIJoinAttributedStringsWithFormat(v54, v55);

            return (uint64_t)v19;
          }
        }
        else
        {
          uint64_t v23 = self;
          id v24 = v18;
          id v21 = objc_msgSend(v23, sel_hk_chartCurrentValueValueFont);
          unint64_t v64 = a7;
          if (a6) {
            goto LABEL_11;
          }
        }
        id v25 = self;
        id v26 = a4;
        id v60 = objc_msgSend(v25, sel_hk_chartCurrentValueUnitFont);
        goto LABEL_14;
      }
      return 0;
  }
  type metadata accessor for HKAudiogramEar(0);
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

void sub_1E0E1962C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  if (a3)
  {
    id v13 = a3;
    id v53 = a6;
    if (a5)
    {
LABEL_3:
      id v14 = a3;
      id v48 = a5;
      goto LABEL_6;
    }
  }
  else
  {
    id v13 = objc_msgSend(self, sel_hk_chartCurrentValueValueFont);
    id v53 = a6;
    if (a5) {
      goto LABEL_3;
    }
  }
  id v15 = self;
  id v16 = a3;
  id v48 = objc_msgSend(v15, sel_hk_chartCurrentValueUnitFont);
LABEL_6:
  char v17 = *(_DWORD *)(v6 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options) & 1;
  id v18 = a5;
  sub_1E0E19B50(a1, a2, v17);
  sub_1E0E1AC14(0, (unint64_t *)&qword_1EAD69A20, (void (*)(uint64_t))sub_1E0E1AC68);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1E0F06210;
  id v20 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  uint64_t v52 = sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD69A00);
  *(void *)(inited + 40) = v13;
  id v21 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 64) = v52;
  *(void *)(inited + 72) = v21;
  uint64_t v51 = sub_1E0DF2C04(0, &qword_1EAD69A10);
  *(void *)(inited + 104) = v51;
  *(void *)(inited + 80) = a4;
  swift_bridgeObjectRetain();
  id v49 = v20;
  id v47 = v13;
  id v22 = v21;
  id v23 = a4;
  sub_1E0E3FB40(inited);
  id v24 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  id v25 = (void *)sub_1E0ECD190();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1E0E1ACD4();
  uint64_t v26 = MEMORY[0x1E4FBC840] + 8;
  id v27 = (void *)sub_1E0ECCFC0();
  swift_bridgeObjectRelease();
  id v50 = objc_msgSend(v24, sel_initWithString_attributes_, v25, v27);
  swift_bridgeObjectRelease();

  id v28 = objc_msgSend(self, sel_decibelHearingLevelUnit);
  id v29 = objc_msgSend(a2, sel_localizedDisplayNameForUnit_value_, v28, 0);

  sub_1E0ECD1D0();
  uint64_t v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_1E0F06210;
  *(void *)(v30 + 32) = v49;
  *(void *)(v30 + 40) = v48;
  *(void *)(v30 + 64) = v52;
  *(void *)(v30 + 72) = v22;
  *(void *)(v30 + 104) = v51;
  *(void *)(v30 + 80) = v53;
  swift_bridgeObjectRetain();
  id v31 = v49;
  id v32 = v48;
  id v33 = v22;
  id v34 = v53;
  sub_1E0E3FB40(v30);
  id v35 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  unint64_t v36 = (void *)sub_1E0ECD190();
  swift_bridgeObjectRelease();
  uint64_t v37 = (void *)sub_1E0ECCFC0();
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(v35, sel_initWithString_attributes_, v36, v37);
  swift_bridgeObjectRelease();

  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v39 = (id)qword_1EAD740B8;
  sub_1E0ECB680();

  sub_1E0E1AD2C(0, (unint64_t *)&qword_1EAD69A40, v26, MEMORY[0x1E4FBBE00]);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1E0F06210;
  uint64_t v41 = sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD699C0);
  *(void *)(v40 + 32) = v50;
  *(void *)(v40 + 88) = v41;
  *(void *)(v40 + 56) = v41;
  *(void *)(v40 + 64) = v38;
  id v42 = v50;
  id v43 = v38;
  id v44 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  id v45 = (void *)sub_1E0ECD190();
  swift_bridgeObjectRelease();
  id v46 = HKUIJoinAttributedStringsWithFormat(v44, v45);

  if (v46)
  {
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1E0E19B50(void *a1, void *a2, char a3)
{
  uint64_t v7 = *(void **)(v3 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram);
  id v8 = objc_msgSend(v7, sel_averageLeftEarSensitivity);
  id v9 = objc_msgSend(v7, sel_averageRightEarSensitivity);
  if (v8)
  {
    if (v9)
    {
      id v10 = v9;
      id v11 = v8;
      uint64_t v12 = sub_1E0E19F54(v11, 1, a1, a2, a3 & 1);
      uint64_t v14 = v13;
      uint64_t v15 = sub_1E0E19F54(v10, 2, a1, a2, a3 & 1);
      uint64_t v17 = v16;
      if (a3)
      {
        sub_1E0E1AD2C(0, (unint64_t *)&qword_1EAD69880, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_1E0F06210;
        *(void *)(v18 + 32) = v12;
        *(void *)(v18 + 40) = v14;
        *(void *)(v18 + 48) = v15;
        *(void *)(v18 + 56) = v17;
        if (qword_1EAD69948 != -1) {
          swift_once();
        }
        id v19 = (id)qword_1EAD740B8;
        sub_1E0ECB680();

        sub_1E0E1AD2C(0, &qword_1EAD6E310, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
        sub_1E0E186E8();
        uint64_t v20 = sub_1E0ECD0A0();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (qword_1EAD69948 != -1) {
          swift_once();
        }
        id v27 = (id)qword_1EAD740B8;
        sub_1E0ECB680();

        sub_1E0E1AC14(0, (unint64_t *)&qword_1EAD69A30, (void (*)(uint64_t))sub_1E0E1AB68);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_1E0F06210;
        uint64_t v29 = MEMORY[0x1E4FBB1A0];
        *(void *)(v28 + 56) = MEMORY[0x1E4FBB1A0];
        unint64_t v30 = sub_1E0E1ABC0();
        *(void *)(v28 + 32) = v12;
        *(void *)(v28 + 40) = v14;
        *(void *)(v28 + 96) = v29;
        *(void *)(v28 + 104) = v30;
        *(void *)(v28 + 64) = v30;
        *(void *)(v28 + 72) = v15;
        *(void *)(v28 + 80) = v17;
        uint64_t v20 = sub_1E0ECD1E0();
      }
      swift_bridgeObjectRelease();
      return v20;
    }
    id v21 = v8;
    id v22 = v21;
    char v23 = a3 & 1;
    uint64_t v24 = 1;
LABEL_10:
    uint64_t v25 = sub_1E0E19F54(v21, v24, a1, a2, v23);

    return v25;
  }
  if (v9)
  {
    id v21 = v9;
    id v22 = v21;
    char v23 = a3 & 1;
    uint64_t v24 = 2;
    goto LABEL_10;
  }
  return sub_1E0E1A424(a1, a2);
}

uint64_t sub_1E0E19F54(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  swift_getObjectType();
  id v10 = objc_msgSend(self, sel_decibelHearingLevelUnit);
  objc_msgSend(a1, sel_doubleValueForUnit_, v10);
  HKRoundWithPositiveZeroForDoubleValue(v11);
  id v12 = (id)sub_1E0ECBD90();
  id v13 = HKIntegerFormatter();
  id v14 = HKFormattedStringFromValue(v12, a3, a4, 1, v13);

  if (!v14)
  {
    if (qword_1EAD6D4E8 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_1E0ECC010();
    __swift_project_value_buffer(v18, (uint64_t)qword_1EAD74150);
    id v19 = v12;
    uint64_t v20 = sub_1E0ECBFF0();
    os_log_type_t v21 = sub_1E0ECD520();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v31 = v23;
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v24 = sub_1E0ECDBC0();
      sub_1E0DED7E4(v24, v25, &v31);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      sub_1E0DED7E4(0xD000000000000048, 0x80000001E0F29420, &v31);
      sub_1E0ECD6D0();
      *(_WORD *)(v22 + 22) = 2080;
      swift_getObjectType();
      uint64_t v26 = sub_1E0ECDBC0();
      sub_1E0DED7E4(v26, v27, &v31);
      sub_1E0ECD6D0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v20, v21, "[%s][%s] Unable to format string from value. Found type: %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v23, -1, -1);
      MEMORY[0x1E4E41080](v22, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  uint64_t v15 = sub_1E0ECD1D0();
  uint64_t v17 = v16;

  if ((a5 & 1) != 0 || !a2)
  {

    return v15;
  }
  if (a2 == 2)
  {
    if (qword_1EAD69948 == -1) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  if (a2 == 1)
  {
    if (qword_1EAD69948 == -1)
    {
LABEL_16:
      id v28 = (id)qword_1EAD740B8;
      sub_1E0ECB680();

      sub_1E0E1AC14(0, (unint64_t *)&qword_1EAD69A30, (void (*)(uint64_t))sub_1E0E1AB68);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1E0F07C90;
      *(void *)(v29 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v29 + 64) = sub_1E0E1ABC0();
      *(void *)(v29 + 32) = v15;
      *(void *)(v29 + 40) = v17;
      uint64_t v15 = sub_1E0ECD1E0();

      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_18:
    swift_once();
    goto LABEL_16;
  }
  type metadata accessor for HKAudiogramEar(0);
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

uint64_t sub_1E0E1A424(void *a1, void *a2)
{
  id v5 = objc_msgSend(self, sel_decibelHearingLevelUnit);
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram);
  id v7 = objc_msgSend(v6, sel_minimumSensitivity);
  id v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, sel_doubleValueForUnit_, v5);

    id v9 = (void *)sub_1E0ECBD90();
    id v10 = HKIntegerFormatter();
    id v11 = HKFormattedStringFromValue(v9, a1, a2, 1, v10);

    if (v11)
    {
      uint64_t v12 = sub_1E0ECD1D0();
      id v8 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      id v8 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v14 = objc_msgSend(v6, sel_maximumSensitivity);
  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v15 = v14;
  objc_msgSend(v14, sel_doubleValueForUnit_, v5);

  uint64_t v16 = (void *)sub_1E0ECBD90();
  id v17 = HKIntegerFormatter();
  id v18 = HKFormattedStringFromValue(v16, a1, a2, 1, v17);

  if (v18)
  {
    uint64_t v19 = sub_1E0ECD1D0();
    os_log_type_t v21 = v20;

    if (!v8) {
      goto LABEL_9;
    }
  }
  else
  {
LABEL_11:
    uint64_t v19 = 0;
    os_log_type_t v21 = 0;
    if (!v8)
    {
LABEL_9:

      if (!v21) {
        return 0;
      }
      return v19;
    }
  }
  if (!v21)
  {
LABEL_17:

    return v12;
  }
  if (v12 == v19 && v8 == v21 || (sub_1E0ECD9E0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v23 = (id)qword_1EAD740B8;
  sub_1E0ECB680();

  sub_1E0E1AC14(0, (unint64_t *)&qword_1EAD69A30, (void (*)(uint64_t))sub_1E0E1AB68);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1E0F06210;
  uint64_t v25 = MEMORY[0x1E4FBB1A0];
  *(void *)(v24 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v26 = sub_1E0E1ABC0();
  *(void *)(v24 + 32) = v12;
  *(void *)(v24 + 40) = v8;
  *(void *)(v24 + 96) = v25;
  *(void *)(v24 + 104) = v26;
  *(void *)(v24 + 64) = v26;
  *(void *)(v24 + 72) = v19;
  *(void *)(v24 + 80) = v21;
  uint64_t v19 = sub_1E0ECD1E0();
  swift_bridgeObjectRelease();

  return v19;
}

id AudiogramCurrentValueDataProvider.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AudiogramCurrentValueDataProvider.init()()
{
}

id AudiogramCurrentValueDataProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramCurrentValueDataProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1E0E1A84C()
{
  unint64_t result = qword_1EAD6E298;
  if (!qword_1EAD6E298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E298);
  }
  return result;
}

unint64_t sub_1E0E1A8A4()
{
  unint64_t result = qword_1EAD6E2A0;
  if (!qword_1EAD6E2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E2A0);
  }
  return result;
}

unint64_t sub_1E0E1A8FC()
{
  unint64_t result = qword_1EAD69998;
  if (!qword_1EAD69998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD69998);
  }
  return result;
}

unint64_t sub_1E0E1A954()
{
  unint64_t result = qword_1EAD699A0;
  if (!qword_1EAD699A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD699A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiogramCurrentValueOptions()
{
  return &type metadata for AudiogramCurrentValueOptions;
}

uint64_t method lookup function for AudiogramCurrentValueDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudiogramCurrentValueDataProvider);
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.date.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.__allocating_init(audiogram:healthStore:options:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.lastUpdatedDescription(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.lastUpdatedShortDescription(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.attributedString(with:unitController:valueFont:unitFont:dateCache:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.attributedSupplementaryString(with:unitController:font:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.attributedAverageSensitivityString(ear:displayType:unitController:valueFont:unitFont:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

unint64_t sub_1E0E1AB68()
{
  unint64_t result = qword_1EAD69A50;
  if (!qword_1EAD69A50)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD69A50);
  }
  return result;
}

unint64_t sub_1E0E1ABC0()
{
  unint64_t result = qword_1EAD699B0;
  if (!qword_1EAD699B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD699B0);
  }
  return result;
}

void sub_1E0E1AC14(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD9C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0E1AC68()
{
  if (!qword_1EAD699F0)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD699F0);
    }
  }
}

unint64_t sub_1E0E1ACD4()
{
  unint64_t result = qword_1EAD699D0;
  if (!qword_1EAD699D0)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD699D0);
  }
  return result;
}

void sub_1E0E1AD2C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1E0E1AD78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v5 = (void *)v1[5];
  uint64_t v8 = v1[6];
  uint64_t v7 = v1[7];
  if (!v3)
  {
    uint64_t v13 = v1[6];
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v10 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v34 = 0;
    id v14 = 0;
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v4 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    os_log_type_t v21 = v5;
    uint64_t v20 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v13 = 0;
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = v1[7];
  uint64_t v39 = *v1;
  uint64_t v10 = v1[1];
  sub_1E0E1B03C(*v1, v10, v3);
  swift_bridgeObjectRetain();
  sub_1E0E88BC4(v43);
  uint64_t v7 = v9;
  uint64_t v11 = v43[2];
  uint64_t v41 = v43[1];
  uint64_t v42 = v43[0];
  uint64_t v12 = v43[4];
  uint64_t v40 = v43[3];
  uint64_t v13 = v8;
  uint64_t v34 = v7;
  uint64_t v35 = v8;
  uint64_t v37 = v43[6];
  uint64_t v38 = v43[5];
  uint64_t v36 = v43[7];
  id v14 = v3;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v15 = v7;
  swift_bridgeObjectRetain();
  sub_1E0E1B03C(v4, v6, v5);
  sub_1E0E88BC4(v44);
  uint64_t v16 = v15;
  uint64_t v17 = v44[0];
  uint64_t v18 = v44[1];
  uint64_t v19 = v44[2];
  uint64_t v20 = v44[3];
  os_log_type_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v44[4];
  uint64_t v24 = v44[5];
  uint64_t v25 = v44[6];
  uint64_t v26 = v44[7];
LABEL_6:
  *a1 = v39;
  a1[1] = v10;
  id v33 = v14;
  unint64_t v27 = v14;
  a1[2] = (uint64_t)v14;
  a1[3] = v42;
  a1[4] = v41;
  a1[5] = v11;
  a1[6] = v40;
  a1[7] = v12;
  a1[8] = v38;
  a1[9] = v37;
  a1[10] = v36;
  a1[11] = v35;
  a1[12] = v34;
  a1[13] = v4;
  a1[14] = v22;
  a1[15] = (uint64_t)v21;
  a1[16] = v17;
  a1[17] = v18;
  a1[18] = v19;
  a1[19] = v20;
  a1[20] = v23;
  a1[21] = v24;
  a1[22] = v25;
  a1[23] = v26;
  a1[24] = v13;
  a1[25] = v16;
  uint64_t v28 = v22;
  uint64_t v31 = v22;
  uint64_t v29 = v21;
  id v32 = v21;
  sub_1E0E1BDD8(v39, v10, v27);
  sub_1E0E1BDD8(v4, v28, v29);
  sub_1E0E1BE64(v4, v31, v32);
  return sub_1E0E1BE64(v39, v10, v33);
}

void PairedDeviceFeatureAttributes.localFeatureAttributes.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = (uint64_t)v4;
  sub_1E0E1B03C(v2, v3, v4);
}

void sub_1E0E1B03C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    id v3 = a3;
  }
}

__n128 PairedDeviceFeatureAttributes.localFeatureAttributes.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  sub_1E0E1B0C8(*(void *)v1, *(void *)(v1 + 8), *(void **)(v1 + 16));
  __n128 result = v4;
  *(__n128 *)uint64_t v1 = v4;
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_1E0E1B0C8(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*PairedDeviceFeatureAttributes.localFeatureAttributes.modify())()
{
  return nullsub_1;
}

void PairedDeviceFeatureAttributes.remoteFeatureAttributes.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __n128 v4 = (void *)v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = (uint64_t)v4;
  sub_1E0E1B03C(v2, v3, v4);
}

__n128 PairedDeviceFeatureAttributes.remoteFeatureAttributes.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  sub_1E0E1B0C8(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
  __n128 result = v4;
  *(__n128 *)(v1 + 24) = v4;
  *(void *)(v1 + 40) = v2;
  return result;
}

uint64_t (*PairedDeviceFeatureAttributes.remoteFeatureAttributes.modify())()
{
  return nullsub_1;
}

uint64_t PairedDeviceFeatureAttributes.init(localFeatureAttributes:remoteFeatureAttributes:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = a1[1];
  uint64_t v6 = a1[2];
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v6 == 0;
  }
  if (v9)
  {
    uint64_t v10 = *a1;
  }
  else
  {
    long long v11 = *a2;
    swift_bridgeObjectRelease();
    long long v7 = v11;
    uint64_t result = 0;
    uint64_t v10 = 0;
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = result;
  *(void *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 24) = v7;
  *(void *)(a3 + 40) = v8;
  return result;
}

BOOL _s8HealthUI29PairedDeviceFeatureAttributesV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v5 = (void *)a1[2];
  uint64_t v4 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v6 = (void *)a1[5];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  long long v11 = (void *)a2[2];
  uint64_t v10 = a2[3];
  uint64_t v12 = a2[4];
  uint64_t v13 = (void *)a2[5];
  if (!v5)
  {
    uint64_t v40 = a1[3];
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    id v24 = v5;
LABEL_21:
    sub_1E0E1B03C(v8, v9, v11);
    sub_1E0E1B0C8(v3, v2, v5);
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    unint64_t v27 = v11;
LABEL_30:
    sub_1E0E1B0C8(v25, v26, v27);
    return 0;
  }
  if (!v2)
  {
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
  if (!v9
    || (v3 != v8 || v2 != v9) && (v36 = a2[3], v38 = a2[4], v14 = sub_1E0ECD9E0(), v10 = v36, uint64_t v12 = v38, (v14 & 1) == 0))
  {
LABEL_23:
    swift_bridgeObjectRetain();
    id v28 = v5;
    uint64_t v25 = v3;
    uint64_t v26 = v2;
    unint64_t v27 = v5;
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v37 = v10;
  uint64_t v39 = v12;
  uint64_t v40 = v4;
  sub_1E0E1BEF0();
  sub_1E0E1B03C(v3, v2, v5);
  sub_1E0E1B03C(v3, v2, v5);
  sub_1E0E1B03C(v8, v9, v11);
  char v15 = sub_1E0ECD6A0();
  sub_1E0E1B0C8(v8, v9, v11);

  swift_bridgeObjectRelease();
  sub_1E0E1B0C8(v3, v2, v5);
  uint64_t v10 = v37;
  uint64_t v12 = v39;
  if ((v15 & 1) == 0) {
    return 0;
  }
LABEL_11:
  uint64_t v16 = v7;
  if (!v6)
  {
    if (!v13) {
      return 1;
    }
    goto LABEL_27;
  }
  if (!v13)
  {
    uint64_t v30 = v12;
    uint64_t v31 = v10;
    swift_bridgeObjectRetain();
    id v32 = v6;
    uint64_t v10 = v31;
    uint64_t v12 = v30;
LABEL_27:
    uint64_t v33 = v10;
    uint64_t v34 = v12;
    sub_1E0E1B03C(v10, v12, v13);
    sub_1E0E1B0C8(v40, v7, v6);
    uint64_t v25 = v33;
    uint64_t v26 = v34;
    unint64_t v27 = v13;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (!v12) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  if (!v12
    || (v40 != v10 || v7 != v12) && (v17 = v10, v18 = v12, v19 = sub_1E0ECD9E0(), v10 = v17, uint64_t v12 = v18, (v19 & 1) == 0))
  {
LABEL_29:
    swift_bridgeObjectRetain();
    id v35 = v6;
    uint64_t v25 = v40;
    uint64_t v26 = v7;
    unint64_t v27 = v6;
    goto LABEL_30;
  }
LABEL_18:
  uint64_t v20 = v12;
  uint64_t v21 = v10;
  sub_1E0E1BEF0();
  uint64_t v22 = v16;
  sub_1E0E1B03C(v40, v16, v6);
  sub_1E0E1B03C(v40, v16, v6);
  sub_1E0E1B03C(v21, v20, v13);
  char v23 = sub_1E0ECD6A0();
  sub_1E0E1B0C8(v21, v20, v13);

  swift_bridgeObjectRelease();
  sub_1E0E1B0C8(v40, v22, v6);
  return (v23 & 1) != 0;
}

uint64_t destroy for PairedDeviceFeatureAttributes(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 16);
  if (v2)
  {

    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PairedDeviceFeatureAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 16);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v7 = *(void **)(a2 + 40);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    return a1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  id v6 = v4;
  uint64_t v7 = *(void **)(a2 + 40);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  id v9 = v7;
  return a1;
}

void *assignWithCopy for PairedDeviceFeatureAttributes(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)a2[2];
      id v6 = (void *)a1[2];
      a1[2] = v5;
      id v7 = v5;
    }
    else
    {
      sub_1E0E1B794((uint64_t)a1);
      uint64_t v10 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v10;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    uint64_t v8 = (void *)a2[2];
    a1[2] = v8;
    swift_bridgeObjectRetain();
    id v9 = v8;
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
  }
  uint64_t v12 = a1 + 3;
  uint64_t v13 = a2 + 3;
  uint64_t v14 = a2[5];
  if (a1[5])
  {
    if (v14)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      char v15 = (void *)a2[5];
      uint64_t v16 = (void *)a1[5];
      a1[5] = v15;
      id v17 = v15;
    }
    else
    {
      sub_1E0E1B794((uint64_t)(a1 + 3));
      uint64_t v20 = a2[5];
      *uint64_t v12 = *v13;
      a1[5] = v20;
    }
  }
  else if (v14)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    uint64_t v18 = (void *)a2[5];
    a1[5] = v18;
    swift_bridgeObjectRetain();
    id v19 = v18;
  }
  else
  {
    long long v21 = *v13;
    a1[5] = a2[5];
    *uint64_t v12 = v21;
  }
  return a1;
}

uint64_t sub_1E0E1B794(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PairedDeviceFeatureAttributes(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      id v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v4;

      goto LABEL_6;
    }
    sub_1E0E1B794(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
LABEL_6:
  if (!*(void *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    return a1;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  if (!v7)
  {
    sub_1E0E1B794(a1 + 24);
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for PairedDeviceFeatureAttributes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PairedDeviceFeatureAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedDeviceFeatureAttributes()
{
  return &type metadata for PairedDeviceFeatureAttributes;
}

uint64_t destroy for PairedDeviceFeatureAttributesSections(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  unint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairedDeviceFeatureAttributesSections(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 16);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v7 = *(void **)(a2 + 40);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  id v6 = v4;
  uint64_t v7 = *(void **)(a2 + 40);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  id v9 = v7;
LABEL_6:
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PairedDeviceFeatureAttributesSections(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)a2[2];
      id v6 = (void *)a1[2];
      a1[2] = v5;
      id v7 = v5;
    }
    else
    {
      sub_1E0E1B794((uint64_t)a1);
      uint64_t v10 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v10;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    uint64_t v8 = (void *)a2[2];
    a1[2] = v8;
    swift_bridgeObjectRetain();
    id v9 = v8;
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
  }
  uint64_t v12 = a1 + 3;
  uint64_t v13 = a2 + 3;
  uint64_t v14 = a2[5];
  if (a1[5])
  {
    if (v14)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      char v15 = (void *)a2[5];
      uint64_t v16 = (void *)a1[5];
      a1[5] = v15;
      id v17 = v15;
    }
    else
    {
      sub_1E0E1B794((uint64_t)(a1 + 3));
      uint64_t v20 = a2[5];
      *uint64_t v12 = *v13;
      a1[5] = v20;
    }
  }
  else if (v14)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    uint64_t v18 = (void *)a2[5];
    a1[5] = v18;
    swift_bridgeObjectRetain();
    id v19 = v18;
  }
  else
  {
    long long v21 = *v13;
    a1[5] = a2[5];
    *uint64_t v12 = v21;
  }
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PairedDeviceFeatureAttributesSections(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      id v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v4;

      goto LABEL_6;
    }
    sub_1E0E1B794(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
LABEL_6:
  if (!*(void *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  if (!v7)
  {
    sub_1E0E1B794(a1 + 24);
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;

LABEL_11:
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairedDeviceFeatureAttributesSections(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairedDeviceFeatureAttributesSections(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedDeviceFeatureAttributesSections()
{
  return &type metadata for PairedDeviceFeatureAttributesSections;
}

uint64_t sub_1E0E1BDBC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E1BDD8(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    id v4 = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1E0E1BE64(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1E0E1BEF0()
{
  unint64_t result = qword_1EB584EB0;
  if (!qword_1EB584EB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB584EB0);
  }
  return result;
}

unint64_t sub_1E0E1BF34()
{
  unint64_t result = qword_1EAD6E318;
  if (!qword_1EAD6E318)
  {
    sub_1E0E1BF8C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E318);
  }
  return result;
}

void sub_1E0E1BF8C()
{
  if (!qword_1EAD6E320)
  {
    sub_1E0E1BFE4();
    unint64_t v0 = sub_1E0ECCE40();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E320);
    }
  }
}

void sub_1E0E1BFE4()
{
  if (!qword_1EAD6E328)
  {
    sub_1E0E1C048();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6E328);
    }
  }
}

void sub_1E0E1C048()
{
  if (!qword_1EAD6E330[0])
  {
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, qword_1EAD6E330);
    }
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for LoadableImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1E0E1C0D4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1E0E1C0D4(unint64_t result)
{
  if (result >> 62 == 1) {
    return (unint64_t)(id)(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if (!(result >> 62)) {
    return swift_retain();
  }
  return result;
}

void destroy for LoadableImagePhase(unint64_t *a1)
{
}

unint64_t *assignWithCopy for LoadableImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1E0E1C0D4(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1E0E14BB0(v4);
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for LoadableImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1E0E14BB0(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadableImagePhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LoadableImagePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1E0E1C224(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_1E0E1C240(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1E0E1C250(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for LoadableImagePhase()
{
  return &type metadata for LoadableImagePhase;
}

uint64_t sub_1E0E1C28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_1E0E1C294(uint64_t a1)
{
  sub_1E0DF77E0(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  return swift_release();
}

uint64_t sub_1E0E1C2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_1E0DF7630(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = v7;
  id v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  v9(a1 + 32, a2 + 32, v8);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t sub_1E0E1C3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_1E0DF7630(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_1E0DF77E0(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_1E0E1C464(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_1E0DF77E0(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  long long v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  uint64_t v9 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v9;
  swift_release();
  return a1;
}

uint64_t sub_1E0E1C4D8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1E0E1C520(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for LoadableImage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1E0E1C58C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1E0E1C5D0()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  sub_1E0DF7630(v1, v2);
  double v3 = sub_1E0E2CC54(v1, v2);
  sub_1E0DF77E0(v1, v2);
  return v3;
}

uint64_t sub_1E0E1C628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = sub_1E0ECD3E0();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v6 = MEMORY[0x1F4188790](v4, v5);
  id v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v36 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v6, v9);
  id v32 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0ECC370();
  uint64_t v11 = sub_1E0ECC3F0();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11, v12);
  uint64_t v33 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v34 = (char *)&v32 - v16;
  id v17 = *(void (**)(unint64_t))(v2 + 16);
  sub_1E0E1CD08();
  sub_1E0ECCD00();
  __swift_project_boxed_opaque_existential_0(&v43, *((uint64_t *)&v44 + 1));
  uint64_t v18 = (unint64_t (__cdecl *)())off_1F3B9B818;
  type metadata accessor for ClinicalAccountLogoLoader();
  unint64_t v19 = v18();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v43);
  uint64_t v20 = v32;
  v17(v19);
  sub_1E0E14BB0(v19);
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(&v43, v2, a1);
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = *(void *)(a1 + 24);
  *(void *)(v21 + 16) = v8;
  *(void *)(v21 + 24) = v22;
  long long v23 = v46;
  *(_OWORD *)(v21 + 64) = v45;
  *(_OWORD *)(v21 + 80) = v23;
  *(_OWORD *)(v21 + 96) = v47;
  long long v24 = v44;
  *(_OWORD *)(v21 + 32) = v43;
  *(_OWORD *)(v21 + 48) = v24;
  uint64_t v25 = v35;
  sub_1E0ECD3C0();
  uint64_t v26 = v33;
  sub_1E0ECCBC0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v39);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v8);
  unint64_t v27 = sub_1E0E1CE5C();
  uint64_t v41 = v22;
  unint64_t v42 = v27;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = v34;
  sub_1E0E28FF8(v26, v11, WitnessTable);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v37 + 8);
  v30(v26, v11);
  sub_1E0E28FF8(v29, v11, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v30)(v29, v11);
}

uint64_t sub_1E0E1CA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  sub_1E0ECD3B0();
  v3[10] = sub_1E0ECD3A0();
  uint64_t v5 = sub_1E0ECD390();
  v3[11] = v5;
  v3[12] = v4;
  return MEMORY[0x1F4188298](sub_1E0E1CAA4, v5, v4);
}

uint64_t sub_1E0E1CAA4()
{
  sub_1E0E1CD08();
  sub_1E0ECCD00();
  __swift_project_boxed_opaque_existential_0(v0 + 2, v0[5]);
  double v1 = sub_1E0E1C5D0();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  void *v2 = v0;
  v2[1] = sub_1E0E1CB78;
  return sub_1E0EAE3C4(v1);
}

uint64_t sub_1E0E1CB78()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return MEMORY[0x1F4188298](sub_1E0E1CC98, v3, v2);
}

uint64_t sub_1E0E1CC98()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1E0E1CD08()
{
  if (!qword_1EAD6E3B8)
  {
    sub_1E0E13C50();
    unint64_t v0 = sub_1E0ECCD30();
    if (!v1) {
      atomic_store(v0, &qword_1EAD6E3B8);
    }
  }
}

uint64_t sub_1E0E1CD60()
{
  sub_1E0DF77E0(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  swift_release();
  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t sub_1E0E1CDB4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1E0E1CF24;
  return sub_1E0E1CA08(v0 + 32, v2, v3);
}

unint64_t sub_1E0E1CE5C()
{
  unint64_t result = qword_1EAD6E3D0;
  if (!qword_1EAD6E3D0)
  {
    sub_1E0ECC370();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E3D0);
  }
  return result;
}

uint64_t sub_1E0E1CEB4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1E0E1CF2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t AudiogramPointMarker.Options.rawValue.getter()
{
  return *(void *)v0;
}

HealthUI::AudiogramPointMarker::Options __swiftcall AudiogramPointMarker.Options.init(rawValue:)(HealthUI::AudiogramPointMarker::Options rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AudiogramPointMarker.Options.bordered.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static AudiogramPointMarker.Options.verticalFlip.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static AudiogramPointMarker.Options.masked.getter(void *a1@<X8>)
{
  *a1 = 4;
}

id static AudiogramPointMarker.Options.forAudiogramChartData(_:bordered:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2 & 1;
  id result = objc_msgSend(a1, sel_isMasked);
  uint64_t v7 = a2 & 1 | 4;
  if (!result) {
    uint64_t v7 = v5;
  }
  *a3 = v7;
  return result;
}

uint64_t sub_1E0E1D00C()
{
  return sub_1E0ECD300();
}

uint64_t sub_1E0E1D06C()
{
  return sub_1E0ECD2F0();
}

uint64_t sub_1E0E1D0BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1E0E1CF2C(a1, a2);
}

double AudiogramPointMarker.init(ear:pointColor:backgroundColor:options:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, id a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a4;
  if (!a3) {
    a3 = objc_msgSend(self, sel_systemBackgroundColor);
  }
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = v8;
  double result = 2.0;
  *(_OWORD *)(a5 + 32) = xmmword_1E0F08060;
  return result;
}

UIImage __swiftcall AudiogramPointMarker.makePointMarkerImage(bounds:)(__C::CGRect bounds)
{
  double height = bounds.size.height;
  double width = bounds.size.width;
  CGFloat y = bounds.origin.y;
  CGFloat x = bounds.origin.x;
  long long v6 = v1[1];
  long long v19 = *v1;
  long long v20 = v6;
  long long v21 = v1[2];
  if ((BYTE8(v6) & 1) == 0)
  {
    long long v7 = v1[1];
    long long aBlock = *v1;
    long long v17 = v7;
    long long v18 = v1[2];
    return (UIImage)sub_1E0E1D704(x, y, bounds.size.width, bounds.size.height);
  }
  ((void (*)())MEMORY[0x1F4188790])();
  void v15[2] = &v19;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17D8]), sel_initWithSize_, width, height);
  uint64_t v10 = swift_allocObject();
  long long v11 = v20;
  *(_OWORD *)(v10 + 16) = v19;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v21;
  *(CGFloat *)(v10 + 64) = x;
  *(CGFloat *)(v10 + 72) = y;
  *(double *)(v10 + 80) = width;
  *(double *)(v10 + 88) = height;
  *(void *)(v10 + 96) = sub_1E0E1F0F0;
  *(void *)(v10 + 104) = v15;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1E0E1F170;
  *(void *)(v12 + 24) = v10;
  *(void *)&long long v18 = sub_1E0E1F184;
  *((void *)&v18 + 1) = v12;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v17 = sub_1E0E1E258;
  *((void *)&v17 + 1) = &block_descriptor_5;
  uint64_t v13 = _Block_copy(&aBlock);
  sub_1E0E1F1C4((uint64_t)&v19);
  swift_retain();
  swift_release();
  id v8 = objc_msgSend(v9, sel_imageWithActions_, v13);

  _Block_release(v13);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result.super.isa = (Class)swift_release();
  if ((v9 & 1) == 0) {
    return (UIImage)v8;
  }
  __break(1u);
  return result;
}

void sub_1E0E1D390(CGContext *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v6 = *v5;
  if (*v5)
  {
    uint64_t v12 = (void *)v5[1];
    uint64_t v13 = (void *)v5[2];
    uint64_t v14 = v5[3];
    if (v6 == 2)
    {
      *(_OWORD *)dCGFloat x = *((_OWORD *)v5 + 2);
      id v15 = v13;
      id v31 = v15;
      if ((v14 & 4) != 0)
      {
        CGContextSetLineWidth(a1, dx[0]);
        uint64_t v22 = sub_1E0E1E2A4(a2, a3, a4, a5);
        CGContextAddPath(a1, v22);

        long long v23 = (CGColor *)objc_msgSend(v31, sel_CGColor);
        CGContextSetStrokeColorWithColor(a1, v23);

        long long v24 = (CGColor *)objc_msgSend(v12, sel_CGColor);
        CGContextSetFillColorWithColor(a1, v24);

        CGContextDrawPath(a1, kCGPathFillStroke);
      }
      else
      {
        uint64_t v16 = (CGColor *)objc_msgSend(v15, sel_CGColor);
        CGContextSetFillColorWithColor(a1, v16);

        v35.origin.CGFloat x = a2;
        v35.origin.CGFloat y = a3;
        v35.size.CGFloat width = a4;
        v35.size.CGFloat height = a5;
        CGContextFillEllipseInRect(a1, v35);
        v36.origin.CGFloat x = a2;
        v36.origin.CGFloat y = a3;
        v36.size.CGFloat width = a4;
        v36.size.CGFloat height = a5;
        CGRect v37 = CGRectInset(v36, dx[0], dx[0]);
        CGFloat x = v37.origin.x;
        CGFloat y = v37.origin.y;
        CGFloat width = v37.size.width;
        CGFloat height = v37.size.height;
        long long v21 = (CGColor *)objc_msgSend(v12, sel_CGColor);
        CGContextSetFillColorWithColor(a1, v21);

        v38.origin.CGFloat x = x;
        v38.origin.CGFloat y = y;
        v38.size.CGFloat width = width;
        v38.size.CGFloat height = height;
        CGContextFillEllipseInRect(a1, v38);
      }
      CGFloat v25 = *(double *)&v31;
    }
    else
    {
      if (v6 != 1)
      {
        type metadata accessor for HKAudiogramEar(0);
        sub_1E0ECDA00();
        __break(1u);
        return;
      }
      if ((v14 & 4) == 0)
      {
        sub_1E0E1DF80(a1, v12, a2, a3, a4, a5);
        return;
      }
      *(_OWORD *)dxa = *((_OWORD *)v5 + 2);
      uint64_t v26 = self;
      id v27 = v13;
      id v28 = objc_msgSend(v26, sel_bezierPathWithRoundedRect_cornerRadius_, a2, a3, a4, a5, 1.5);
      uint64_t v29 = (CGColor *)objc_msgSend(v27, sel_CGColor);
      CGContextSetFillColorWithColor(a1, v29);

      objc_msgSend(v28, sel_fill);
      v39.origin.CGFloat x = a2;
      v39.origin.CGFloat y = a3;
      v39.size.CGFloat width = a4;
      v39.size.CGFloat height = a5;
      CGRect v40 = CGRectInset(v39, dxa[0], dxa[0]);
      *(void *)&dxa[0] = objc_msgSend(v26, sel_bezierPathWithRoundedRect_cornerRadius_, v40.origin.x, v40.origin.y, v40.size.width, v40.size.height, 1.5);
      uint64_t v30 = (CGColor *)objc_msgSend(v12, sel_CGColor);
      CGContextSetFillColorWithColor(a1, v30);

      objc_msgSend(*(id *)&dxa[0], sel_fill);
      CGFloat v25 = dxa[0];
    }
  }
}

uint64_t sub_1E0E1D704(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v10 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v11 = v4[2];
  uint64_t v12 = v4[3];
  uint64_t v14 = v4[4];
  uint64_t v13 = v4[5];
  double Height = CGRectGetHeight(*(CGRect *)&a1);
  uint64_t v16 = self;
  id v17 = objc_msgSend(v16, sel_configurationWithPointSize_, Height);
  id v18 = objc_allocWithZone(MEMORY[0x1E4FB1818]);
  id v19 = v17;
  id v20 = objc_msgSend(v18, sel_init);
  id v47 = v20;
  switch(v10)
  {
    case 0:

      if ((v12 & 2) == 0) {
        goto LABEL_15;
      }
LABEL_17:

      return (uint64_t)v20;
    case 2:
      if ((v12 & 4) != 0)
      {
        uint64_t v40 = 2;
        uint64_t v41 = v9;
        uint64_t v42 = v11;
        uint64_t v43 = v12;
        uint64_t v44 = v14;
        uint64_t v45 = v13;
        uint64_t v24 = 0x656C676E61697274;
        unint64_t v25 = 0xED00006C6C69662ELL;
        goto LABEL_14;
      }
      uint64_t v40 = 2;
      uint64_t v41 = v9;
      uint64_t v42 = v11;
      uint64_t v43 = v12;
      uint64_t v44 = v14;
      uint64_t v45 = v13;
      uint64_t v21 = 0x656C63726963;
LABEL_13:
      uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL | 0x662E000000000000;
      unint64_t v25 = 0xEB000000006C6C69;
LABEL_14:
      id v26 = sub_1E0E1DB9C(v24, v25, v19);

      id v47 = v26;
      id v20 = v26;
      if ((v12 & 2) == 0)
      {
LABEL_15:
        id v27 = v20;
        long long v23 = sub_1E0E1DE38();

        if (v23)
        {
        }
        else
        {
          if (qword_1EAD6D4E8 != -1) {
            swift_once();
          }
          uint64_t v28 = sub_1E0ECC010();
          __swift_project_value_buffer(v28, (uint64_t)qword_1EAD74150);
          id v29 = v27;
          uint64_t v30 = sub_1E0ECBFF0();
          os_log_type_t v31 = sub_1E0ECD520();
          if (os_log_type_enabled(v30, v31))
          {
            uint64_t v32 = swift_slowAlloc();
            uint64_t v33 = swift_slowAlloc();
            uint64_t v40 = v33;
            *(_DWORD *)uint64_t v32 = 136315394;
            uint64_t v46 = sub_1E0DED7E4(0xD000000000000017, 0x80000001E0F29520, &v40);
            sub_1E0ECD6D0();
            *(_WORD *)(v32 + 12) = 2080;
            id v34 = v29;
            id v35 = objc_msgSend(v34, sel_description);
            uint64_t v36 = sub_1E0ECD1D0();
            unint64_t v38 = v37;

            uint64_t v46 = sub_1E0DED7E4(v36, v38, &v40);
            sub_1E0ECD6D0();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1E0B26000, v30, v31, "%s: failed to flip symbol vertically for: %s", (uint8_t *)v32, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1E4E41080](v33, -1, -1);
            MEMORY[0x1E4E41080](v32, -1, -1);
          }
          else
          {
          }
          swift_beginAccess();
          return (uint64_t)v47;
        }
        return (uint64_t)v23;
      }
      goto LABEL_17;
    case 1:
      if ((v12 & 4) == 0)
      {

        v48.origin.CGFloat x = a1;
        v48.origin.CGFloat y = a2;
        v48.size.CGFloat width = a3;
        v48.size.CGFloat height = a4;
        id v22 = objc_msgSend(v16, sel_configurationWithPointSize_weight_, 8, CGRectGetHeight(v48));

        uint64_t v40 = 1;
        uint64_t v41 = v9;
        uint64_t v42 = v11;
        uint64_t v43 = v12;
        uint64_t v44 = v14;
        uint64_t v45 = v13;
        id v19 = v22;
        long long v23 = sub_1E0E1DB9C(0x6B72616D78, 0xE500000000000000, v19);

        id v47 = v23;
        if ((v12 & 2) == 0)
        {
          id v20 = v23;
          goto LABEL_15;
        }

        return (uint64_t)v23;
      }
      uint64_t v40 = 1;
      uint64_t v41 = v9;
      uint64_t v42 = v11;
      uint64_t v43 = v12;
      uint64_t v44 = v14;
      uint64_t v45 = v13;
      uint64_t v21 = 0x657261757173;
      goto LABEL_13;
  }
  type metadata accessor for HKAudiogramEar(0);
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

id sub_1E0E1DB9C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = *(void *)(v3 + 8);
  swift_bridgeObjectRetain();
  id v8 = a3;
  uint64_t v9 = (void *)sub_1E0ECD190();
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(self, sel_systemImageNamed_withConfiguration_, v9, v8);

  if (v10)
  {
    id v11 = objc_msgSend(v10, sel_imageWithTintColor_renderingMode_, v7, 1);

    return v11;
  }
  else
  {
    if (qword_1EAD6D4E8 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_1E0ECC010();
    __swift_project_value_buffer(v13, (uint64_t)qword_1EAD74150);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = sub_1E0ECBFF0();
    os_log_type_t v15 = sub_1E0ECD520();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = v17;
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_1E0DED7E4(0xD000000000000016, 0x80000001E0F29540, &v18);
      sub_1E0ECD6D0();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1E0DED7E4(a1, a2, &v18);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1E0B26000, v14, v15, "[%s] unable to render sf symbol for %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v17, -1, -1);
      MEMORY[0x1E4E41080](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_init);
  }
}

CGContext *sub_1E0E1DE38()
{
  objc_msgSend(v0, sel_size);
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  objc_msgSend(v0, sel_scale);
  CGFloat v6 = v5;
  v19.CGFloat width = v2;
  v19.CGFloat height = v4;
  UIGraphicsBeginImageContextWithOptions(v19, 0, v6);
  uint64_t result = UIGraphicsGetCurrentContext();
  if (result)
  {
    id v8 = result;
    objc_msgSend(v0, sel_size);
    CGFloat v10 = v9 * 0.5;
    objc_msgSend(v0, sel_size);
    CGContextTranslateCTM(v8, v10, v11 * 0.5);
    CGContextScaleCTM(v8, 1.0, -1.0);
    objc_msgSend(v0, sel_size);
    CGFloat v13 = v12 * -0.5;
    objc_msgSend(v0, sel_size);
    CGContextTranslateCTM(v8, v13, v14 * -0.5);
    objc_msgSend(v0, sel_size);
    double v16 = v15;
    objc_msgSend(v0, sel_size);
    objc_msgSend(v0, sel_drawInRect_, 0.0, 0.0, v16, v17);
    uint64_t v18 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return (CGContext *)v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1E0E1DF80(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v13 = *(double *)(v6 + 32);
  id v14 = *(id *)(v6 + 16);
  v24.origin.CGFloat x = a3;
  v24.origin.CGFloat y = a4;
  v24.size.CGFloat width = a5;
  v24.size.CGFloat height = a6;
  CGFloat Width = CGRectGetWidth(v24);
  CGFloat v16 = Width * Width;
  v25.origin.CGFloat x = a3;
  v25.origin.CGFloat y = a4;
  v25.size.CGFloat width = a5;
  v25.size.CGFloat height = a6;
  CGFloat Height = CGRectGetHeight(v25);
  double v18 = sqrt(v16 + Height * Height) + v13 * 3.0 * -0.5;
  id v19 = sub_1E0E1E424(a3, a4, a5, a6, v13 * 3.0, v18);
  id v20 = (CGColor *)objc_msgSend(v14, sel_CGColor);
  CGContextSetFillColorWithColor(a1, v20);

  objc_msgSend(v19, sel_fill);
  id v22 = sub_1E0E1E424(a3, a4, a5, a6, v13, v18 - (v13 + v13));
  uint64_t v21 = (CGColor *)objc_msgSend(a2, sel_CGColor);
  CGContextSetFillColorWithColor(a1, v21);

  objc_msgSend(v22, sel_fill);
}

void sub_1E0E1E128(void *a1, uint64_t a2, void (*a3)(CGContext *, double, double, double, double), CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v13 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSaveGState(v13);
  if ((*(unsigned char *)(a2 + 24) & 2) == 0)
  {
    v17.origin.CGFloat x = a4;
    v17.origin.CGFloat y = a5;
    v17.size.CGFloat width = a6;
    v17.size.CGFloat height = a7;
    CGFloat Height = CGRectGetHeight(v17);
    CGAffineTransformMakeTranslation(&transform, 0.0, Height);
    CGAffineTransformScale(&v15, &transform, 1.0, -1.0);
    CGAffineTransform transform = v15;
    CGContextConcatCTM(v13, &transform);
  }
  a3(v13, a4, a5, a6, a7);
  CGContextRestoreGState(v13);
}

uint64_t sub_1E0E1E230(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1E0E1E258(uint64_t a1, void *a2)
{
  CGFloat v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

CGPath *sub_1E0E1E2A4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.CGFloat x = a1;
  v10.origin.CGFloat y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetMinY(v10);
  v11.origin.CGFloat x = a1;
  v11.origin.CGFloat y = a2;
  v11.size.CGFloat width = a3;
  v11.size.CGFloat height = a4;
  CGRectGetMinX(v11);
  v12.origin.CGFloat x = a1;
  v12.origin.CGFloat y = a2;
  v12.size.CGFloat width = a3;
  v12.size.CGFloat height = a4;
  CGRectGetMaxY(v12);
  v13.origin.CGFloat x = a1;
  v13.origin.CGFloat y = a2;
  v13.size.CGFloat width = a3;
  v13.size.CGFloat height = a4;
  CGRectGetMaxX(v13);
  v14.origin.CGFloat x = a1;
  v14.origin.CGFloat y = a2;
  v14.size.CGFloat width = a3;
  v14.size.CGFloat height = a4;
  CGRectGetMaxY(v14);
  Mutable = CGPathCreateMutable();
  sub_1E0ECD580();
  sub_1E0ECD590();
  sub_1E0ECD590();
  sub_1E0ECD590();
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

id sub_1E0E1E424(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  CGFloat v12 = CGRectGetMidX(*(CGRect *)&a1) - a5 * 0.5;
  v35.origin.CGFloat x = a1;
  v35.origin.CGFloat y = a2;
  v35.size.CGFloat width = a3;
  v35.size.CGFloat height = a4;
  CGFloat v13 = CGRectGetMidY(v35) - a6 * 0.5;
  CGRect v14 = self;
  id v15 = objc_msgSend(v14, sel_bezierPathWithRoundedRect_cornerRadius_, v12, v13, a5, a6, a5 * 0.5);
  id v16 = objc_msgSend(v14, sel_bezierPathWithRoundedRect_cornerRadius_, v12, v13, a5, a6, a5 * 0.5);
  CGRect v17 = (const CGPath *)objc_msgSend(v15, sel_CGPath);
  BoundingBoCGFloat x = CGPathGetBoundingBox(v17);
  CGFloat x = BoundingBox.origin.x;
  CGFloat y = BoundingBox.origin.y;
  CGFloat width = BoundingBox.size.width;
  CGFloat height = BoundingBox.size.height;

  v37.origin.CGFloat x = x;
  v37.origin.CGFloat y = y;
  v37.size.CGFloat width = width;
  v37.size.CGFloat height = height;
  double MidX = CGRectGetMidX(v37);
  v38.origin.CGFloat x = x;
  v38.origin.CGFloat y = y;
  v38.size.CGFloat width = width;
  v38.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v38);
  v34.a = 1.0;
  v34.b = 0.0;
  v34.c = 0.0;
  v34.d = 1.0;
  v34.tCGFloat x = 0.0;
  v34.tCGFloat y = 0.0;
  CGAffineTransformTranslate(&v33, &v34, MidX, MidY);
  CGAffineTransform v34 = v33;
  CGAffineTransformRotate(&v33, &v34, 0.785398163);
  CGAffineTransform v34 = v33;
  CGAffineTransformTranslate(&v33, &v34, -MidX, -MidY);
  CGAffineTransform v34 = v33;
  objc_msgSend(v15, sel_applyTransform_, &v34);
  CGRect v24 = (const CGPath *)objc_msgSend(v16, sel_CGPath);
  CGRect v39 = CGPathGetBoundingBox(v24);
  CGFloat v25 = v39.origin.x;
  CGFloat v26 = v39.origin.y;
  CGFloat v27 = v39.size.width;
  CGFloat v28 = v39.size.height;

  v40.origin.CGFloat x = v25;
  v40.origin.CGFloat y = v26;
  v40.size.CGFloat width = v27;
  v40.size.CGFloat height = v28;
  double v29 = CGRectGetMidX(v40);
  v41.origin.CGFloat x = v25;
  v41.origin.CGFloat y = v26;
  v41.size.CGFloat width = v27;
  v41.size.CGFloat height = v28;
  double v30 = CGRectGetMidY(v41);
  v34.a = 1.0;
  v34.b = 0.0;
  v34.c = 0.0;
  v34.d = 1.0;
  v34.tCGFloat x = 0.0;
  v34.tCGFloat y = 0.0;
  CGAffineTransformTranslate(&v33, &v34, v29, v30);
  CGAffineTransform v34 = v33;
  CGAffineTransformRotate(&v33, &v34, -0.785398163);
  CGAffineTransform v34 = v33;
  CGAffineTransformTranslate(&v33, &v34, -v29, -v30);
  CGAffineTransform v34 = v33;
  objc_msgSend(v16, sel_applyTransform_, &v34);
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14C0]), sel_init);
  objc_msgSend(v31, sel_appendPath_, v15);
  objc_msgSend(v31, sel_appendPath_, v16);

  return v31;
}

UIImage __swiftcall AudiogramPointMarker.makeAnnotationMarkerImage(bounds:)(__C::CGRect bounds)
{
  CGFloat height = bounds.size.height;
  CGFloat width = bounds.size.width;
  CGFloat y = bounds.origin.y;
  CGFloat x = bounds.origin.x;
  long long v6 = v1[1];
  long long v16 = *v1;
  long long v17 = v6;
  long long v18 = v1[2];
  _OWORD v14[2] = &v16;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17D8]), sel_initWithSize_, bounds.size.width, bounds.size.height);
  uint64_t v8 = swift_allocObject();
  long long v9 = v17;
  *(_OWORD *)(v8 + 16) = v16;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = v18;
  *(CGFloat *)(v8 + 64) = x;
  *(CGFloat *)(v8 + 72) = y;
  *(CGFloat *)(v8 + 80) = width;
  *(CGFloat *)(v8 + 88) = height;
  *(void *)(v8 + 96) = sub_1E0E1F1F4;
  *(void *)(v8 + 104) = v14;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1E0E1F170;
  *(void *)(v10 + 24) = v8;
  aBlock[4] = sub_1E0E200E8;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1E0E1E258;
  aBlock[3] = &block_descriptor_14;
  CGRect v11 = _Block_copy(aBlock);
  sub_1E0E1F1C4((uint64_t)&v16);
  swift_retain();
  swift_release();
  id v12 = objc_msgSend(v7, sel_imageWithActions_, v11);

  _Block_release(v11);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result.super.isa = (Class)swift_release();
  if ((v7 & 1) == 0) {
    return (UIImage)v12;
  }
  __break(1u);
  return result;
}

void sub_1E0E1E940(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6)
{
  CGFloat Height = CGRectGetHeight(*(CGRect *)&a1);
  sub_1E0E1F458(a1, a2, a3, a4, Height * *(double *)(a6 + 40));
}

id AudiogramPointMarker.annotationAttributedString(fontSize:)(double a1)
{
  return sub_1E0E1F644(*(void *)v1, *(void **)(v1 + 8), a1, *MEMORY[0x1E4FB09B8]);
}

void sub_1E0E1E9DC(void *a1, unint64_t a2)
{
  c = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSaveGState(c);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1E0ECD910();
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v4 = 0;
  double v5 = 0.0;
  do
  {
    if ((a2 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x1E4E3EF00](v4, a2);
    }
    else {
      id v6 = *(id *)(a2 + 8 * v4 + 32);
    }
    id v7 = v6;
    ++v4;
    objc_msgSend(v6, sel_size);
    double v9 = v8;
    objc_msgSend(v7, sel_size);
    objc_msgSend(v7, sel_drawInRect_, v5, 0.0, v9, v10);
    objc_msgSend(v7, sel_size);
    double v12 = v11;

    double v5 = v5 + v12;
  }
  while (v3 != v4);
LABEL_10:
  swift_bridgeObjectRelease();
  CGContextRestoreGState(c);
}

void *_s8HealthUI20AudiogramPointMarkerV7OptionsV03forC0_4sideSayAEGSo17HKAudiogramSampleC_So0I19SensitivityTestSideVtFZ_0(void *a1, id a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = &selRef_removeAllGestureRecognizers;
  id v5 = objc_msgSend(a1, sel_sensitivityPoints);
  sub_1E0DF2C04(0, &qword_1EAD6E3E8);
  unint64_t v6 = sub_1E0ECD330();

  if (!(v6 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_27:
    char v40 = 0;
    goto LABEL_28;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1E0ECD910();
  if (!v7) {
    goto LABEL_27;
  }
LABEL_3:
  uint64_t v37 = v3;
  uint64_t v8 = 0;
  unint64_t v43 = v6;
  unint64_t v45 = v6 & 0xC000000000000001;
  unint64_t v39 = v6 + 32;
  uint64_t v41 = v7;
  do
  {
    if (v45) {
      id v9 = (id)MEMORY[0x1E4E3EF00](v8, v6);
    }
    else {
      id v9 = *(id *)(v39 + 8 * v8);
    }
    double v10 = v9;
    BOOL v11 = __OFADD__(v8++, 1);
    if (v11) {
      goto LABEL_25;
    }
    id v12 = objc_msgSend(v9, sel_tests);
    sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6F3A0);
    unint64_t v6 = sub_1E0ECD330();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v13 = sub_1E0ECD910();
      swift_bridgeObjectRelease();
      if (v13)
      {
LABEL_11:
        uint64_t v4 = (char **)(v6 & 0xC000000000000001);
        uint64_t v3 = 4;
        while (1)
        {
          id v14 = v4 ? (id)MEMORY[0x1E4E3EF00](v3 - 4, v6) : *(id *)(v6 + 8 * v3);
          id v15 = v14;
          uint64_t v16 = v3 - 3;
          if (__OFADD__(v3 - 4, 1)) {
            break;
          }
          if (objc_msgSend(v14, sel_side) == a2 && objc_msgSend(v15, sel_masked))
          {
            swift_bridgeObjectRelease_n();

            char v40 = 1;
            goto LABEL_22;
          }

          ++v3;
          if (v16 == v13) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v13) {
        goto LABEL_11;
      }
    }
LABEL_4:
    swift_bridgeObjectRelease_n();

    unint64_t v6 = v43;
  }
  while (v8 != v41);
  char v40 = 0;
LABEL_22:
  uint64_t v3 = v37;
  uint64_t v4 = &selRef_removeAllGestureRecognizers;
LABEL_28:
  swift_bridgeObjectRelease_n();
  id v17 = [(id)v3 v4[300]];
  unint64_t v18 = sub_1E0ECD330();

  if (v18 >> 62)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1E0ECD910();
    if (v42) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v42 = v19;
    if (v19)
    {
LABEL_30:
      uint64_t v20 = 0;
      unint64_t v44 = v18;
      unint64_t v46 = v18 & 0xC000000000000001;
      unint64_t v38 = v18 + 32;
      do
      {
        if (v46) {
          id v21 = (id)MEMORY[0x1E4E3EF00](v20, v18);
        }
        else {
          id v21 = *(id *)(v38 + 8 * v20);
        }
        id v22 = v21;
        BOOL v11 = __OFADD__(v20++, 1);
        if (v11)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        id v23 = objc_msgSend(v21, sel_tests);
        sub_1E0DF2C04(0, (unint64_t *)&unk_1EAD6F3A0);
        unint64_t v24 = sub_1E0ECD330();

        if (v24 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v25 = sub_1E0ECD910();
          swift_bridgeObjectRelease();
          if (v25)
          {
LABEL_38:
            unint64_t v18 = 4;
            while (1)
            {
              if ((v24 & 0xC000000000000001) != 0) {
                id v26 = (id)MEMORY[0x1E4E3EF00](v18 - 4, v24);
              }
              else {
                id v26 = *(id *)(v24 + 8 * v18);
              }
              CGFloat v27 = v26;
              unint64_t v28 = v18 - 3;
              if (__OFADD__(v18 - 4, 1))
              {
                __break(1u);
                goto LABEL_53;
              }
              if (objc_msgSend(v26, sel_side) == a2 && (objc_msgSend(v27, sel_masked) & 1) == 0) {
                break;
              }

              ++v18;
              if (v28 == v25) {
                goto LABEL_31;
              }
            }
            swift_bridgeObjectRelease_n();

            swift_bridgeObjectRelease_n();
            if (v40)
            {
              int v29 = 1;
              goto LABEL_57;
            }
            double v30 = (void *)MEMORY[0x1E4FBC860];
LABEL_60:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              double v30 = sub_1E0E0BEA4(0, v30[2] + 1, 1, v30);
            }
            unint64_t v35 = v30[2];
            unint64_t v34 = v30[3];
            if (v35 >= v34 >> 1) {
              double v30 = sub_1E0E0BEA4((void *)(v34 > 1), v35 + 1, 1, v30);
            }
            void v30[2] = v35 + 1;
            v30[v35 + 4] = 0;
            return v30;
          }
        }
        else
        {
          uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v25) {
            goto LABEL_38;
          }
        }
LABEL_31:
        swift_bridgeObjectRelease_n();

        unint64_t v18 = v44;
      }
      while (v20 != v42);
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v40 & 1) == 0) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  int v29 = 0;
LABEL_57:
  uint64_t v31 = qword_1F3B98BA8;
  double v30 = sub_1E0E0BEA4(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1) {
    double v30 = sub_1E0E0BEA4((void *)(v32 > 1), v33 + 1, 1, v30);
  }
  void v30[2] = v33 + 1;
  v30[v33 + 4] = v31;
  if (v29) {
    goto LABEL_60;
  }
  return v30;
}

void sub_1E0E1F0F0(CGContext *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
}

uint64_t sub_1E0E1F130()
{
  return MEMORY[0x1F4186498](v0, 112, 7);
}

uint64_t sub_1E0E1F174()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1E0E1F184()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1E0E1F1C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  id v3 = *(id *)(a1 + 8);
  id v4 = v2;
  return a1;
}

void sub_1E0E1F1F4(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  sub_1E0E1E940(a2, a3, a4, a5, a1, *(void *)(v5 + 16));
}

void sub_1E0E1F1FC(void *a1)
{
  sub_1E0E1E128(a1, v1 + 16, *(void (**)(CGContext *, double, double, double, double))(v1 + 96), *(CGFloat *)(v1 + 64), *(CGFloat *)(v1 + 72), *(CGFloat *)(v1 + 80), *(CGFloat *)(v1 + 88));
}

uint64_t sub_1E0E1F210()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1E0E1F220(uint64_t a1, void *a2, double a3, double a4)
{
  id v6 = objc_msgSend(self, sel_hk_roundedSystemFontWithSize_weight_, a3, a4);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v7, sel_setAlignment_, 1);
  uint64_t v8 = HKAudiogramEarLocalizedKeyForEar(a1, 1);
  sub_1E0ECD1D0();

  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v9 = (id)qword_1EAD740B8;
  uint64_t v10 = sub_1E0ECB680();
  swift_bridgeObjectRelease();

  sub_1E0E2002C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1E0F08070;
  id v12 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB0700];
  uint64_t v13 = sub_1E0DF2C04(0, &qword_1EAD69A10);
  *(void *)(inited + 40) = a2;
  id v14 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 64) = v13;
  *(void *)(inited + 72) = v14;
  uint64_t v15 = sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD69A00);
  *(void *)(inited + 80) = v6;
  uint64_t v16 = (void *)*MEMORY[0x1E4FB0738];
  *(void *)(inited + 104) = v15;
  *(void *)(inited + 112) = v16;
  *(void *)(inited + 144) = sub_1E0DF2C04(0, &qword_1EAD6E3E0);
  *(void *)(inited + 120) = v7;
  id v17 = v12;
  id v18 = a2;
  id v19 = v14;
  id v20 = v16;
  sub_1E0E3FB40(inited);
  return v10;
}

void sub_1E0E1F458(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  uint64_t v11 = *(void *)v5;
  double v12 = *MEMORY[0x1E4FB09C0];
  id v13 = *(id *)(v5 + 8);
  sub_1E0E1F220(v11, v13, a5, v12);
  id v14 = (void *)sub_1E0ECD190();
  type metadata accessor for Key(0);
  sub_1E0E1ACD4();
  uint64_t v15 = (void *)sub_1E0ECCFC0();
  objc_msgSend(v14, sel_sizeWithAttributes_, v15);
  double v17 = v16;
  double v19 = v18;

  v27.origin.CGFloat x = a1;
  v27.origin.CGFloat y = a2;
  v27.size.CGFloat width = a3;
  v27.size.CGFloat height = a4;
  double MidX = CGRectGetMidX(v27);
  v28.origin.CGFloat x = 0.0;
  v28.origin.CGFloat y = 0.0;
  v28.size.CGFloat width = v17;
  v28.size.CGFloat height = v19;
  double v21 = MidX - CGRectGetMidX(v28);
  v29.origin.CGFloat x = a1;
  v29.origin.CGFloat y = a2;
  v29.size.CGFloat width = a3;
  v29.size.CGFloat height = a4;
  double MidY = CGRectGetMidY(v29);
  v30.origin.CGFloat x = 0.0;
  v30.origin.CGFloat y = 0.0;
  v30.size.CGFloat width = v17;
  v30.size.CGFloat height = v19;
  double v23 = MidY - CGRectGetMidY(v30);
  unint64_t v24 = (void *)sub_1E0ECD190();
  id v25 = (id)sub_1E0ECCFC0();
  objc_msgSend(v24, sel_drawInRect_withAttributes_, v25, v21, v23, v17, v19);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

id sub_1E0E1F644(uint64_t a1, void *a2, double a3, double a4)
{
  id v6 = objc_msgSend(self, sel_hk_roundedSystemFontWithSize_weight_, a3, a4);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0848]), sel_init);
  objc_msgSend(v7, sel_setAlignment_, 1);
  uint64_t v8 = HKAudiogramEarLocalizedKeyForEar(a1, 1);
  sub_1E0ECD1D0();

  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v9 = (id)qword_1EAD740B8;
  sub_1E0ECB680();
  swift_bridgeObjectRelease();

  id v10 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
  uint64_t v11 = (void *)sub_1E0ECD190();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v10, sel_initWithString_, v11, 0xE000000000000000);

  sub_1E0E2002C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1E0F08070;
  id v14 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB0700];
  uint64_t v15 = sub_1E0DF2C04(0, &qword_1EAD69A10);
  *(void *)(inited + 40) = a2;
  double v16 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 64) = v15;
  *(void *)(inited + 72) = v16;
  uint64_t v17 = sub_1E0DF2C04(0, (unint64_t *)&qword_1EAD69A00);
  *(void *)(inited + 80) = v6;
  double v18 = (void *)*MEMORY[0x1E4FB0738];
  *(void *)(inited + 104) = v17;
  *(void *)(inited + 112) = v18;
  *(void *)(inited + 144) = sub_1E0DF2C04(0, &qword_1EAD6E3E0);
  *(void *)(inited + 120) = v7;
  id v19 = v14;
  id v20 = a2;
  id v21 = v16;
  id v22 = v6;
  id v23 = v18;
  id v24 = v7;
  sub_1E0E3FB40(inited);
  type metadata accessor for Key(0);
  sub_1E0E1ACD4();
  id v25 = (void *)sub_1E0ECCFC0();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_addAttributes_range_, v25, 0, objc_msgSend(v12, sel_length));

  return v12;
}

unint64_t _s8HealthUI20AudiogramPointMarkerV13renderAndJoin7symbolsSo7UIImageCSayAGG_tFZ_0(unint64_t result)
{
  unint64_t v1 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1E0ECD910();
    UIImage result = swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = v2 - 1;
      if (v2 < 1)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      unint64_t v4 = v1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      uint64_t v5 = 0;
      double v6 = 0.0;
      do
      {
        if (v4) {
          id v7 = (id)MEMORY[0x1E4E3EF00](v5, v1);
        }
        else {
          id v7 = *(id *)(v1 + 8 * v5 + 32);
        }
        uint64_t v8 = v7;
        ++v5;
        objc_msgSend(v7, sel_size);
        double v10 = v9;

        double v6 = v6 + v10;
      }
      while (v2 != v5);
      UIImage result = swift_bridgeObjectRelease();
      if (v4)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = (void *)MEMORY[0x1E4E3EF00](0, v1);
        if (v2 == 1) {
          goto LABEL_14;
        }
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        id v12 = *(void **)(v1 + 32);
        swift_bridgeObjectRetain();
        UIImage result = v12;
        uint64_t v11 = (void *)result;
        if (v2 == 1) {
          goto LABEL_14;
        }
        unint64_t v20 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v20 < 2 || v2 - 1 >= (uint64_t)v20) {
          goto LABEL_35;
        }
      }
      uint64_t v21 = 0;
      do
      {
        if (v4) {
          id v22 = (id)MEMORY[0x1E4E3EF00](v21 + 1, v1);
        }
        else {
          id v22 = *(id *)(v1 + 8 * v21 + 40);
        }
        id v23 = v22;
        objc_msgSend(v11, sel_size);
        double v25 = v24;
        objc_msgSend(v23, sel_size);
        if (v26 >= v25) {
          CGRect v27 = v23;
        }
        else {
          CGRect v27 = v11;
        }
        if (v26 < v25) {
          uint64_t v11 = v23;
        }

        ++v21;
      }
      while (v3 != v21);
LABEL_14:
      swift_bridgeObjectRelease();
      objc_msgSend(v11, sel_size);
      double v14 = v13;

      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17D8]), sel_initWithSize_, v6, v14);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v1;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = sub_1E0E200BC;
      *(void *)(v17 + 24) = v16;
      v29[4] = sub_1E0E200E8;
      v29[5] = v17;
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 1107296256;
      v29[2] = sub_1E0E1E258;
      void v29[3] = &block_descriptor_24;
      double v18 = _Block_copy(v29);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      id v19 = objc_msgSend(v15, sel_imageWithActions_, v18);

      _Block_release(v18);
      LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      UIImage result = swift_release();
      if ((v15 & 1) == 0) {
        return (unint64_t)v19;
      }
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
  }
  id v28 = objc_allocWithZone(MEMORY[0x1E4FB1818]);
  return (unint64_t)objc_msgSend(v28, sel_init);
}

unint64_t sub_1E0E1FCC4()
{
  unint64_t result = qword_1EAD69980;
  if (!qword_1EAD69980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD69980);
  }
  return result;
}

unint64_t sub_1E0E1FD1C()
{
  unint64_t result = qword_1EAD6E3D8;
  if (!qword_1EAD6E3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E3D8);
  }
  return result;
}

unint64_t sub_1E0E1FD74()
{
  unint64_t result = qword_1EAD69978;
  if (!qword_1EAD69978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD69978);
  }
  return result;
}

unint64_t sub_1E0E1FDCC()
{
  unint64_t result = qword_1EAD69988;
  if (!qword_1EAD69988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD69988);
  }
  return result;
}

void destroy for AudiogramPointMarker(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t initializeWithCopy for AudiogramPointMarker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for AudiogramPointMarker(void *a1, void *a2)
{
  *a1 = *a2;
  unint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  id v7 = (void *)a2[2];
  uint64_t v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for AudiogramPointMarker(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  unint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudiogramPointMarker(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudiogramPointMarker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiogramPointMarker()
{
  return &type metadata for AudiogramPointMarker;
}

ValueMetadata *type metadata accessor for AudiogramPointMarker.Options()
{
  return &type metadata for AudiogramPointMarker.Options;
}

void sub_1E0E2002C()
{
  if (!qword_1EAD69A20)
  {
    sub_1E0E1AC68();
    unint64_t v0 = sub_1E0ECD9C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD69A20);
    }
  }
}

uint64_t sub_1E0E20084()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1E0E200BC(void *a1)
{
  sub_1E0E1E9DC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1E0E200C4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

Swift::Bool __swiftcall AudiogramAverageLevelSeries.supportsMultiTouchSelection()()
{
  return 0;
}

id AudiogramAverageLevelSeries.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1E0E201BC(void *a1)
{
  id v2 = objc_msgSend(self, sel_strokeStyleWithColor_lineWidth_, a1, 2.0);
  objc_msgSend(v2, sel_setDashStyle_, 0);
  id v3 = objc_msgSend(self, sel_sharedBehavior);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  unint64_t v4 = v3;
  id v5 = objc_msgSend(v3, sel_features);

  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  unsigned int v6 = objc_msgSend(v5, sel_yodel);

  if (v6)
  {
    objc_msgSend(v2, sel_setDashStyle_, 1);
    objc_msgSend(v2, sel_setLineCap_, 1);
  }
  id v7 = objc_msgSend(objc_allocWithZone((Class)HKLineSeriesPresentationStyle), sel_init);
  objc_msgSend(v7, sel_setStrokeStyle_, v2);
  objc_msgSend(v7, sel_setShouldNegateAnnotationValue_, 1);
  objc_msgSend(v7, sel_setPointMarkerStyle_, 0);
  id v8 = objc_msgSend(self, sel_hk_roundedSystemFontWithSize_weight_textStyle_, *MEMORY[0x1E4FB28F0], 18.0, *MEMORY[0x1E4FB09D0]);
  id v9 = HKIntegerFormatter();
  if (v9)
  {
    double v10 = v9;
    uint64_t v11 = self;
    id v12 = a1;
    id v13 = objc_msgSend(v11, sel_labelStyleWithColor_font_horizontalAlignment_verticalAlignment_numberFormatter_, v12, v8, 0, 2, v10);

    objc_msgSend(v7, sel_setAxisAnnotationStyle_, v13);
    return;
  }
LABEL_9:
  __break(1u);
}

id _s8HealthUI27AudiogramAverageLevelSeriesC04makecdeF012primaryColorACSo7UIColorC_tFZ_0(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudiogramAverageLevelSeries()), sel_init);
  objc_msgSend(v2, sel_setAllowsSelection_, 1);
  objc_msgSend(v2, sel_setFlatLastValue_, 1);
  objc_msgSend(v2, sel_setExtendFirstValue_, 1);
  objc_msgSend(v2, sel_setExtendLastValue_, 1);
  id v3 = v2;
  sub_1E0E8F13C();
  id v5 = v4;
  objc_msgSend(v3, sel_setYAxis_, v4);

  id v6 = v3;
  sub_1E0E8F25C();
  id v8 = v7;
  objc_msgSend(v6, sel_setAxisScalingRule_, v7);

  sub_1E0E201BC(a1);
  double v10 = v9;
  sub_1E0DF2BA8();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1E0F06EB0;
  *(void *)(v11 + 32) = v10;
  sub_1E0ECD340();
  sub_1E0E20684();
  id v12 = v6;
  id v13 = v10;
  double v14 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setUnhighlightedPresentationStyles_, v14);

  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1E0F06EB0;
  *(void *)(v15 + 32) = v13;
  sub_1E0ECD340();
  id v16 = v12;
  id v17 = v13;
  double v18 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setHighlightedPresentationStyles_, v18);

  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1E0F06EB0;
  *(void *)(v19 + 32) = v17;
  sub_1E0ECD340();
  id v20 = v16;
  id v21 = v17;
  id v22 = (void *)sub_1E0ECD320();
  swift_bridgeObjectRelease();
  objc_msgSend(v20, sel_setSelectedPresentationStyles_, v22);

  objc_msgSend(v20, sel_setInactivePresentationStyle_, v21);
  return v20;
}

uint64_t type metadata accessor for AudiogramAverageLevelSeries()
{
  return self;
}

unint64_t sub_1E0E20684()
{
  unint64_t result = qword_1EAD6DC40;
  if (!qword_1EAD6DC40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6DC40);
  }
  return result;
}

uint64_t sub_1E0E206C4(uint64_t a1)
{
  uint64_t v16 = sub_1E0ECBEA0();
  uint64_t v3 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v4);
  id v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    v14[1] = v1;
    uint64_t v17 = MEMORY[0x1E4FBC860];
    sub_1E0DEE9F8(0, v7, 0);
    uint64_t v8 = v17;
    uint64_t v9 = *(void *)(sub_1E0ECBEF0() - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v9 + 72);
    do
    {
      sub_1E0ECBEB0();
      uint64_t v17 = v8;
      unint64_t v12 = *(void *)(v8 + 16);
      unint64_t v11 = *(void *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1E0DEE9F8(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v17;
      }
      *(void *)(v8 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v12, v6, v16);
      v10 += v15;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1E0E208AC(unint64_t a1)
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = sub_1E0ECD910())
  {
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v4 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x1E4E3EF00](i - 4, a1)
         : (char *)*(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      int64_t v7 = &v4[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection];
      swift_beginAccess();
      __swift_project_boxed_opaque_existential_0(v7, *((void *)v7 + 3));
      id v8 = v5;
      uint64_t v9 = sub_1E0ECBF60();
      swift_endAccess();

      sub_1E0E4E214(v9);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

id sub_1E0E20A30(unint64_t a1, uint64_t a2, char a3)
{
  sub_1E0E20BE4();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a3)
  {
    return sub_1E0E20C3C();
  }
  else
  {
    uint64_t v10 = sub_1E0E208AC(a1);
    uint64_t v11 = sub_1E0E206C4(v10);
    swift_bridgeObjectRelease();
    sub_1E0E4336C(v11, (uint64_t)v9);
    swift_bridgeObjectRelease();
    if (MEMORY[0x1E4E41170](v3 + OBJC_IVAR____TtC8HealthUI47BalanceMostFrequentClassificationOverlayContext_delegate))
    {
      sub_1E0E83D08((uint64_t)v9);
      swift_unknownObjectRelease();
    }
    id v12 = sub_1E0E20C3C();
    sub_1E0E20E84((uint64_t)v9);
    return v12;
  }
}

uint64_t sub_1E0E20B44()
{
  return sub_1E0E20BBC(v0 + OBJC_IVAR____TtC8HealthUI47BalanceMostFrequentClassificationOverlayContext_delegate);
}

id sub_1E0E20B54()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceMostFrequentClassificationOverlayContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BalanceMostFrequentClassificationOverlayContext()
{
  return self;
}

uint64_t sub_1E0E20BBC(uint64_t a1)
{
  return a1;
}

void sub_1E0E20BE4()
{
  if (!qword_1EAD6E3F8)
  {
    sub_1E0ECBEA0();
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E3F8);
    }
  }
}

id sub_1E0E20C3C()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)HKDisplayTypeContextItem), sel_init);
  uint64_t v1 = self;
  objc_super v2 = (void *)sub_1E0ECD190();
  id v3 = objc_msgSend(v1, sel_hk_chartOverlayAccessibilityIdentifier_, v2);

  if (v3)
  {
    uint64_t v14 = 0;
    sub_1E0ECD1C0();

    id v3 = 0;
  }
  objc_msgSend(v0, sel_setAccessibilityIdentifier_, v3, v14);

  uint64_t v4 = self;
  id v5 = objc_msgSend(self, sel_tertiarySystemBackgroundColor);
  id v6 = objc_msgSend(v4, sel_defaultContextViewColorsUsingColor_, v5);

  objc_msgSend(v0, sel_setMetricColors_, v6);
  id v7 = objc_msgSend(self, sel_defaultMetricColorsForOverlayMode_, 1);
  objc_msgSend(v0, sel_setMetricColors_, v7);

  uint64_t v8 = (void *)sub_1E0ECD190();
  objc_msgSend(v0, sel_setTitle_, v8);

  sub_1E0DF92EC();
  uint64_t v10 = v9;
  objc_msgSend(v0, sel_setSelectedMetricColors_, v9);

  uint64_t v11 = (void *)sub_1E0ECD190();
  id v12 = HKUILocalizedString(v11);

  objc_msgSend(v0, sel_setValue_, v12);
  objc_msgSend(v0, sel_setInfoHidden_, 1);
  return v0;
}

uint64_t sub_1E0E20E84(uint64_t a1)
{
  sub_1E0E20BE4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1E0E20EE0()
{
  uint64_t v1 = OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer];
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v4 = objc_msgSend(v0, sel_layer);
    self;
    id v3 = (void *)swift_dynamicCastObjCClass();
    if (!v3) {

    }
    id v5 = *(void **)&v0[v1];
    *(void *)&v0[v1] = v3;
    id v6 = v3;
    sub_1E0DFF84C(v5);
  }
  sub_1E0DFF85C(v2);
  return v3;
}

unint64_t sub_1E0E20FB0()
{
  unint64_t result = qword_1EAD6E400;
  if (!qword_1EAD6E400)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD6E400);
  }
  return result;
}

void sub_1E0E20FF0(void *a1, void *a2)
{
}

void sub_1E0E20FFC(void *a1, void *a2)
{
}

void sub_1E0E21008(void *a1, void *a2, double a3, double a4)
{
  uint64_t v8 = sub_1E0E20EE0();
  if (v8)
  {
    uint64_t v9 = v8;
    objc_msgSend(v8, sel_setStartPoint_, 0.0, 0.0);
  }
  uint64_t v10 = sub_1E0E20EE0();
  if (v10)
  {
    uint64_t v11 = v10;
    objc_msgSend(v10, sel_setEndPoint_, a3, a4);
  }
  id v13 = a1;
  id v12 = a2;
  sub_1E0E21458(a1, a2);
}

id GradientView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

id GradientView.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer] = 1;
  id v9 = &v4[OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors];
  uint64_t v10 = (objc_class *)type metadata accessor for GradientView();
  *(void *)id v9 = 0;
  *((void *)v9 + 1) = 0;
  v12.receiver = v4;
  v12.super_class = v10;
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a1, a2, a3, a4);
}

id GradientView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id GradientView.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer] = 1;
  id v3 = &v1[OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors];
  id v4 = (objc_class *)type metadata accessor for GradientView();
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v7.receiver = v1;
  v7.super_class = v4;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

id GradientView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GradientView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1E0E21458(void *a1, void *a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors;
  id v4 = *(void **)(v2 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors);
  id v5 = *(void **)(v2 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors + 8);
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  sub_1E0E21850(a1, a2);
  sub_1E0E217B4(v4, v5);
  if (*(void *)v3)
  {
    id v6 = *(void **)(v3 + 8);
    id v16 = *(id *)v3;
    id v7 = v6;
    uint64_t v8 = sub_1E0E20EE0();
    if (v8)
    {
      id v9 = v8;
      sub_1E0E217F4();
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1E0F06210;
      id v11 = objc_msgSend(v16, sel_CGColor);
      type metadata accessor for CGColor(0);
      uint64_t v13 = v12;
      *(void *)(v10 + 56) = v12;
      *(void *)(v10 + 32) = v11;
      id v14 = objc_msgSend(v7, sel_CGColor);
      *(void *)(v10 + 88) = v13;
      *(void *)(v10 + 64) = v14;
      uint64_t v15 = sub_1E0ECD320();
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_setColors_, v15);

      id v7 = v9;
      id v16 = (id)v15;
    }
  }
}

void sub_1E0E215C0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors + 8);
    id v12 = v1;
    id v3 = v2;
    id v4 = sub_1E0E20EE0();
    if (v4)
    {
      id v5 = v4;
      sub_1E0E217F4();
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1E0F06210;
      id v7 = objc_msgSend(v12, sel_CGColor);
      type metadata accessor for CGColor(0);
      uint64_t v9 = v8;
      *(void *)(v6 + 56) = v8;
      *(void *)(v6 + 32) = v7;
      id v10 = objc_msgSend(v3, sel_CGColor);
      *(void *)(v6 + 88) = v9;
      *(void *)(v6 + 64) = v10;
      uint64_t v11 = sub_1E0ECD320();
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel_setColors_, v11);

      id v3 = v5;
      id v12 = (id)v11;
    }
  }
}

uint64_t type metadata accessor for GradientView()
{
  return self;
}

uint64_t method lookup function for GradientView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GradientView);
}

uint64_t dispatch thunk of GradientView.setGradientColors(topColor:bottomColor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of GradientView.setGradientColors(leftColor:rightColor:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

void sub_1E0E217B4(void *a1, void *a2)
{
  if (a1)
  {
  }
}

void sub_1E0E217F4()
{
  if (!qword_1EAD69A40)
  {
    unint64_t v0 = sub_1E0ECD9C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD69A40);
    }
  }
}

id sub_1E0E21850(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    return a2;
  }
  return result;
}

id sub_1E0E218F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateOfMindCoordinate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StateOfMindCoordinate()
{
  return self;
}

void sub_1E0E21A08(CGFloat *a1)
{
  CGFloat v3 = a1[1];
  CGFloat v4 = a1[2];
  CGFloat v5 = a1[3];
  CGFloat v6 = a1[4];
  CGFloat v7 = a1[5];
  v42.CGFloat x = *(CGFloat *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_xValue);
  v41.CGFloat a = *a1;
  CGFloat a = v41.a;
  v41.b = v3;
  v41.c = v4;
  v41.d = v5;
  v41.tCGFloat x = v6;
  v41.tCGFloat y = v7;
  v42.CGFloat y = 0.0;
  CGFloat x = v42.x;
  uint64_t v31 = *(_OWORD *)&CGPointApplyAffineTransform(v42, &v41);
  v43.CGFloat y = *(CGFloat *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_maxYValue);
  v41.CGFloat a = a;
  v41.b = v3;
  v41.c = v4;
  v41.d = v5;
  v41.tCGFloat x = v6;
  v41.tCGFloat y = v7;
  v43.CGFloat x = 0.0;
  CGFloat y = CGPointApplyAffineTransform(v43, &v41).y;
  v44.CGFloat y = *(CGFloat *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_minYValue);
  CGFloat v37 = v3;
  CGFloat v38 = a;
  v41.CGFloat a = a;
  v41.b = v3;
  v41.c = v4;
  v41.d = v5;
  v41.tCGFloat x = v6;
  v41.tCGFloat y = v7;
  v44.CGFloat x = 0.0;
  CGFloat v32 = CGPointApplyAffineTransform(v44, &v41).y;
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_dailyYValueRanges);
  int64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v40 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1E0DEEA68(0, v9, 0);
    uint64_t v10 = v40;
    uint64_t v11 = (CGFloat *)(v8 + 40);
    while (1)
    {
      v45.CGFloat y = *(v11 - 1);
      CGFloat point = *v11;
      v41.CGFloat a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tCGFloat x = v6;
      v41.tCGFloat y = v7;
      v45.CGFloat x = x;
      double v12 = CGPointApplyAffineTransform(v45, &v41).y;
      v41.CGFloat a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tCGFloat x = v6;
      v41.tCGFloat y = v7;
      v46.CGFloat x = x;
      v46.CGFloat y = point;
      CGPoint v13 = CGPointApplyAffineTransform(v46, &v41);
      if (v12 <= v13.y)
      {
        CGFloat v14 = v12;
        double v12 = v13.y;
      }
      else
      {
        CGFloat v14 = v13.y;
        if (v13.y > v12)
        {
          __break(1u);
LABEL_22:
          __break(1u);
          return;
        }
      }
      uint64_t v40 = v10;
      unint64_t v16 = *(void *)(v10 + 16);
      unint64_t v15 = *(void *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1E0DEEA68(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v40;
      }
      *(void *)(v10 + 16) = v16 + 1;
      uint64_t v17 = v10 + 16 * v16;
      *(CGFloat *)(v17 + 32) = v14;
      *(double *)(v17 + 40) = v12;
      v11 += 2;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_momentaryYValueRanges);
  int64_t v19 = *(void *)(v18 + 16);
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if (v19)
  {
    uint64_t v40 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1E0DEEA68(0, v19, 0);
    uint64_t v20 = v40;
    id v21 = (CGFloat *)(v18 + 40);
    do
    {
      v47.CGFloat y = *(v21 - 1);
      pointCGFloat a = *v21;
      v41.CGFloat a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tCGFloat x = v6;
      v41.tCGFloat y = v7;
      v47.CGFloat x = x;
      double v22 = CGPointApplyAffineTransform(v47, &v41).y;
      v41.CGFloat a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tCGFloat x = v6;
      v41.tCGFloat y = v7;
      v48.CGFloat x = x;
      v48.CGFloat y = pointa;
      CGPoint v23 = CGPointApplyAffineTransform(v48, &v41);
      if (v22 <= v23.y)
      {
        CGFloat v24 = v22;
        double v22 = v23.y;
      }
      else
      {
        CGFloat v24 = v23.y;
        if (v23.y > v22) {
          goto LABEL_22;
        }
      }
      uint64_t v40 = v20;
      unint64_t v26 = *(void *)(v20 + 16);
      unint64_t v25 = *(void *)(v20 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_1E0DEEA68(v25 > 1, v26 + 1, 1);
        uint64_t v20 = v40;
      }
      *(void *)(v20 + 16) = v26 + 1;
      uint64_t v27 = v20 + 16 * v26;
      *(CGFloat *)(v27 + 32) = v24;
      *(double *)(v27 + 40) = v22;
      v21 += 2;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = *(void *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_userInfo);
  CGRect v29 = (objc_class *)type metadata accessor for StateOfMindCoordinate();
  CGRect v30 = (char *)objc_allocWithZone(v29);
  *(void *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_xValue] = v31;
  *(CGFloat *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_maxYValue] = y;
  *(CGFloat *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_minYValue] = v32;
  *(void *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_dailyYValueRanges] = v10;
  *(void *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_momentaryYValueRanges] = v20;
  *(void *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_userInfo] = v28;
  v39.receiver = v30;
  v39.super_class = v29;
  swift_unknownObjectRetain();
  [(CGFloat *)&v39 init];
}

uint64_t sub_1E0E21DAC(unint64_t a1, uint64_t *a2)
{
  id v56 = a2;
  sub_1E0E251B4();
  uint64_t v59 = v3;
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3, v4);
  uint64_t v51 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = MEMORY[0x1F4188790](v5, v7);
  id v50 = &v47[-v9];
  uint64_t v11 = MEMORY[0x1F4188790](v8, v10);
  uint64_t v13 = (uint64_t)&v47[-v12];
  uint64_t v15 = MEMORY[0x1F4188790](v11, v14);
  uint64_t v17 = &v47[-v16];
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  id v21 = &v47[-v20];
  MEMORY[0x1F4188790](v19, v22);
  uint64_t v63 = &v47[-v23];
  uint64_t v64 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1E0ECD910();
    if (v24) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24)
    {
LABEL_3:
      uint64_t v25 = 0;
      unint64_t v54 = a1 & 0xC000000000000001;
      unint64_t v48 = a1 + 32;
      uint64_t v52 = v24;
      unint64_t v53 = a1;
      uint64_t v60 = v13;
      while (1)
      {
        if (v54)
        {
          CGRect v29 = (char *)MEMORY[0x1E4E3EF00](v25, a1);
          BOOL v30 = __OFADD__(v25, 1);
          uint64_t v31 = v25 + 1;
          if (v30) {
            goto LABEL_22;
          }
        }
        else
        {
          CGRect v29 = (char *)*(id *)(v48 + 8 * v25);
          BOOL v30 = __OFADD__(v25, 1);
          uint64_t v31 = v25 + 1;
          if (v30)
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        uint64_t v58 = v31;
        uint64_t v32 = *v56;
        id v57 = v29;
        unint64_t v33 = &v29[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection];
        uint64_t v34 = *((void *)v33 + 3);
        id v55 = v33;
        __swift_project_boxed_opaque_existential_0(v33, v34);
        swift_bridgeObjectRetain();
        sub_1E0ECBF40();
        uint64_t v62 = v32;
        if (*(void *)(v32 + 16))
        {
          uint64_t v35 = v62;
          sub_1E0ECDA50();
          sub_1E0ECCF30();
          sub_1E0E252AC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
          sub_1E0ECD060();
          sub_1E0ECD060();
          uint64_t v36 = sub_1E0ECDA70();
          uint64_t v37 = -1 << *(unsigned char *)(v35 + 32);
          unint64_t v38 = v36 & ~v37;
          uint64_t v39 = v35 + 56;
          if ((*(void *)(v35 + 56 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38))
          {
            uint64_t v61 = ~v37;
            uint64_t v40 = *(void *)(v49 + 72);
            do
            {
              sub_1E0E25248(*(void *)(v62 + 48) + v40 * v38, (uint64_t)v21);
              sub_1E0E252AC(&qword_1EAD6DE30, MEMORY[0x1E4F295A0]);
              CGAffineTransform v41 = v63;
              char v42 = sub_1E0ECD100();
              sub_1E0E25248((uint64_t)v21, (uint64_t)v17);
              uint64_t v43 = (uint64_t)v41;
              uint64_t v44 = (uint64_t)v17;
              uint64_t v45 = v60;
              sub_1E0E25248(v43, v60);
              if (v42)
              {
                uint64_t v13 = sub_1E0ECD100();
                sub_1E0E25154(v45, (uint64_t (*)(void))sub_1E0E251B4);
                sub_1E0E25154(v44, (uint64_t (*)(void))sub_1E0E251B4);
                sub_1E0E25154((uint64_t)v21, (uint64_t (*)(void))sub_1E0E251B4);
                uint64_t v17 = (unsigned char *)v44;
                if (v13)
                {
                  swift_bridgeObjectRelease();
                  sub_1E0E25154((uint64_t)v63, (uint64_t (*)(void))sub_1E0E251B4);

                  a1 = v53;
                  goto LABEL_7;
                }
              }
              else
              {
                sub_1E0E25154(v45, (uint64_t (*)(void))sub_1E0E251B4);
                sub_1E0E25154(v44, (uint64_t (*)(void))sub_1E0E251B4);
                sub_1E0E25154((uint64_t)v21, (uint64_t (*)(void))sub_1E0E251B4);
                uint64_t v17 = (unsigned char *)v44;
              }
              unint64_t v38 = (v38 + 1) & v61;
            }
            while (((*(void *)(v39 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) != 0);
          }
        }
        swift_bridgeObjectRelease();
        sub_1E0E25154((uint64_t)v63, (uint64_t (*)(void))sub_1E0E251B4);
        __swift_project_boxed_opaque_existential_0(v55, *((void *)v55 + 3));
        uint64_t v26 = (uint64_t)v51;
        sub_1E0ECBF40();
        uint64_t v27 = v50;
        sub_1E0E2D664((uint64_t)v50, v26);
        uint64_t v28 = sub_1E0E25154((uint64_t)v27, (uint64_t (*)(void))sub_1E0E251B4);
        uint64_t v13 = (uint64_t)&v64;
        MEMORY[0x1E4E3E9E0](v28);
        if (*(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1E0ECD350();
        }
        sub_1E0ECD370();
        sub_1E0ECD340();
        a1 = v53;
LABEL_7:
        uint64_t v25 = v58;
        if (v58 == v52)
        {
          swift_bridgeObjectRelease();
          return v64;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1E0E2239C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_1E0DFCAE0();
    uint64_t v6 = swift_allocError();
    *uint64_t v7 = a4;
    id v8 = a4;
    return MEMORY[0x1F4188208](v4, v6);
  }
  else
  {
    sub_1E0DFAB14();
    uint64_t v10 = sub_1E0ECD330();
    uint64_t v11 = *(void *)(*(void *)(v4 + 64) + 40);
    *(void *)uint64_t v11 = v10;
    *(unsigned char *)(v11 + 8) = a3;
    return MEMORY[0x1F4188200](v4);
  }
}

uint64_t sub_1E0E22618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  uint64_t v7 = sub_1E0ECB3C0();
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  sub_1E0ECD3B0();
  v6[10] = sub_1E0ECD3A0();
  uint64_t v9 = sub_1E0ECD390();
  return MEMORY[0x1F4188298](sub_1E0E22714, v9, v8);
}

uint64_t sub_1E0E22714()
{
  uint64_t v1 = (const void *)v0[5];
  objc_super v2 = (void *)v0[6];
  uint64_t v3 = (void *)v0[3];
  swift_release();
  v0[11] = _Block_copy(v1);
  sub_1E0ECB370();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1EAD6E518 + dword_1EAD6E518);
  id v4 = v3;
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[12] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1E0E22808;
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  return v11(v7, v8, v9);
}

uint64_t sub_1E0E22808(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = (void *)*v2;
  id v5 = (void *)*v2;
  uint64_t v7 = (void *)*v2;
  swift_task_dealloc();
  uint64_t v8 = v5[11];
  uint64_t v9 = (void *)v5[6];
  uint64_t v10 = (void *)v5[3];
  (*(void (**)(void, void))(v5[8] + 8))(v5[9], v5[7]);

  if (v3)
  {
    uint64_t v11 = (void *)sub_1E0ECB760();

    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v11);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, a1 & 1, 0);
  }
  _Block_release((const void *)v6[11]);
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v7[1];
  return v12();
}

void sub_1E0E22AE0()
{
}

id sub_1E0E22B6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceOverlayContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BalanceOverlayContext()
{
  return self;
}

uint64_t sub_1E0E22C20()
{
  _Block_release(*(const void **)(v0 + 48));
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1E0E22C70()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1E0E08248;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EAD6E4D8
                                                                                    + dword_1EAD6E4D8);
  return v9(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_1E0E22D44(uint64_t a1, uint64_t a2)
{
  sub_1E0E251B4();
  uint64_t v5 = v4;
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v7, v10);
  uint64_t v13 = (char *)&v26 - v12;
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v17 = (char *)&v26 - v16;
  if (*(void *)(a2 + 16))
  {
    uint64_t v27 = v15;
    sub_1E0ECDA50();
    sub_1E0ECCF30();
    sub_1E0E252AC(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
    sub_1E0ECD060();
    uint64_t v28 = v5;
    sub_1E0ECD060();
    uint64_t v18 = sub_1E0ECDA70();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    uint64_t v21 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
    {
      uint64_t v29 = ~v19;
      uint64_t v30 = a2;
      uint64_t v22 = *(void *)(v27 + 72);
      do
      {
        sub_1E0E25248(*(void *)(v30 + 48) + v22 * v20, (uint64_t)v17);
        sub_1E0E252AC(&qword_1EAD6DE30, MEMORY[0x1E4F295A0]);
        char v23 = sub_1E0ECD100();
        sub_1E0E25248((uint64_t)v17, (uint64_t)v13);
        sub_1E0E25248(a1, (uint64_t)v9);
        if (v23)
        {
          char v24 = sub_1E0ECD100();
          sub_1E0E25154((uint64_t)v9, (uint64_t (*)(void))sub_1E0E251B4);
          sub_1E0E25154((uint64_t)v13, (uint64_t (*)(void))sub_1E0E251B4);
          sub_1E0E25154((uint64_t)v17, (uint64_t (*)(void))sub_1E0E251B4);
          if (v24) {
            return 1;
          }
        }
        else
        {
          sub_1E0E25154((uint64_t)v9, (uint64_t (*)(void))sub_1E0E251B4);
          sub_1E0E25154((uint64_t)v13, (uint64_t (*)(void))sub_1E0E251B4);
          sub_1E0E25154((uint64_t)v17, (uint64_t (*)(void))sub_1E0E251B4);
        }
        unint64_t v20 = (v20 + 1) & v29;
      }
      while (((*(void *)(v21 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0);
    }
  }
  return 0;
}

uint64_t sub_1E0E23060(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_1E0E1CF24;
  return v6();
}

uint64_t sub_1E0E23130()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1E0E1CF24;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EAD6E4E8 + dword_1EAD6E4E8);
  return v6(v2, v3, v4);
}

uint64_t sub_1E0E231F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1E0E1CF24;
  return v7();
}

uint64_t objectdestroy_13Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1E0E23300(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1E0E1CF24;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EAD6E4F8 + dword_1EAD6E4F8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1E0E233CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1E0ECD3E0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1E0ECD3D0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1E0E250F8(a1, &qword_1EAD6E4D0, MEMORY[0x1E4FBCFE8]);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1E0ECD390();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1E0E2358C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1E0E23668;
  return v6(a1);
}

uint64_t sub_1E0E23668()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1E0E23760()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1E0E23798(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1E0E08248;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EAD6E508 + dword_1EAD6E508);
  return v6(a1, v4);
}

uint64_t sub_1E0E23850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v4[27] = swift_getObjectType();
  uint64_t v5 = sub_1E0ECC010();
  v4[28] = v5;
  v4[29] = *(void *)(v5 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  uint64_t v6 = sub_1E0ECB3C0();
  v4[34] = v6;
  v4[35] = *(void *)(v6 - 8);
  v4[36] = swift_task_alloc();
  uint64_t v7 = sub_1E0ECB980();
  v4[37] = v7;
  v4[38] = *(void *)(v7 - 8);
  v4[39] = swift_task_alloc();
  sub_1E0E25024();
  v4[40] = v8;
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  sub_1E0E250A4(0, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  sub_1E0ECD3B0();
  v4[49] = sub_1E0ECD3A0();
  uint64_t v10 = sub_1E0ECD390();
  v4[50] = v10;
  v4[51] = v9;
  return MEMORY[0x1F4188298](sub_1E0E23AFC, v10, v9);
}

uint64_t sub_1E0E23AFC()
{
  uint64_t v131 = v0;
  id v1 = objc_msgSend(*(id *)(*(void *)(v0 + 208) + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_baseDisplayType), sel_graphSeriesForTimeScope_, *(void *)(v0 + 200));
  *(void *)(v0 + 416) = v1;
  if (!v1)
  {
    swift_release();
    sub_1E0ECBFD0();
    uint64_t v11 = sub_1E0ECBFF0();
    os_log_type_t v12 = sub_1E0ECD520();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void **)(v0 + 248);
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v15 = *(void *)(v0 + 232);
    if (v13)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      id v127 = v14;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v130 = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      uint64_t v19 = sub_1E0ECDBC0();
      *(void *)(v0 + 144) = sub_1E0DED7E4(v19, v20, &v130);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v11, v12, "[%{public}s] cannot update context item without a graph series", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v18, -1, -1);
      uint64_t v21 = v17;
      id v1 = 0;
      MEMORY[0x1E4E41080](v21, -1, -1);

      (*(void (**)(id, uint64_t))(v15 + 8))(v127, v16);
    }
    else
    {

      (*(void (**)(void *, uint64_t))(v15 + 8))(v14, v16);
    }
    uint64_t v49 = *(void **)(v0 + 208);
    uint64_t v50 = (*(uint64_t (**)(void, void, void))((*MEMORY[0x1E4FBC8C8] & *v49) + 0xB8))(MEMORY[0x1E4FBC860], *(void *)(v0 + 200), 0);
    uint64_t v51 = *(void **)((char *)v49 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem);
    *(void *)((char *)v49 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem) = v50;

    goto LABEL_29;
  }
  id v2 = objc_msgSend(*(id *)(v0 + 192), sel_primaryGraphViewController);
  id v3 = objc_msgSend(v2, sel_graphView);

  id v4 = objc_msgSend(v3, sel_effectiveVisibleRangeActive);
  *(void *)(v0 + 424) = v4;

  id v126 = v4;
  id v5 = objc_msgSend(v4, sel_startDate);
  uint64_t v6 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v129 = v1;
  if (v5)
  {
    uint64_t v9 = v5;
    sub_1E0ECB940();

    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v10(v6, 0, 1, v8);
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v10(v6, 1, 1, v8);
  }
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v22 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 336);
  uint64_t v25 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 296);
  uint64_t v26 = *(void *)(v0 + 304);
  sub_1E0ECB3A0();
  v10(v23, 0, 1, v27);
  uint64_t v28 = v24 + *(int *)(v25 + 48);
  sub_1E0DF0C20(v22, v24);
  sub_1E0DF0C20(v23, v28);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v29(v24, 1, v27) != 1)
  {
    uint64_t v37 = *(void *)(v0 + 296);
    sub_1E0DF0C20(*(void *)(v0 + 336), *(void *)(v0 + 368));
    unsigned int v38 = v29(v28, 1, v37);
    uint64_t v40 = *(void *)(v0 + 376);
    uint64_t v39 = *(void *)(v0 + 384);
    uint64_t v41 = *(void *)(v0 + 368);
    if (v38 != 1)
    {
      uint64_t v116 = v25;
      v118 = v10;
      uint64_t v109 = *(void *)(v0 + 384);
      uint64_t v110 = *(void *)(v0 + 336);
      uint64_t v52 = *(void *)(v0 + 304);
      uint64_t v53 = *(void *)(v0 + 312);
      uint64_t v114 = v29;
      uint64_t v54 = *(void *)(v0 + 296);
      uint64_t v55 = *(void *)(v0 + 280);
      uint64_t v112 = *(void *)(v0 + 272);
      uint64_t v113 = *(void *)(v0 + 288);
      uint64_t v111 = *(void *)(v0 + 184);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v53, v28, v54);
      sub_1E0E252AC((unint64_t *)&qword_1EAD6F6E0, MEMORY[0x1E4F27928]);
      char v108 = sub_1E0ECD100();
      id v56 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v56(v53, v54);
      id v57 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
      sub_1E0E250F8(v40, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
      sub_1E0E250F8(v109, (unint64_t *)&qword_1EAD6DB60, v57);
      uint64_t v58 = v54;
      uint64_t v29 = v114;
      v56(v41, v58);
      sub_1E0E250F8(v110, (unint64_t *)&qword_1EAD6DB60, v57);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v113, v111, v112);
      if (v108) {
        goto LABEL_17;
      }
LABEL_13:
      (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 272));
      goto LABEL_26;
    }
    uint64_t v43 = *(void *)(v0 + 296);
    uint64_t v42 = *(void *)(v0 + 304);
    uint64_t v44 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
    sub_1E0E250F8(*(void *)(v0 + 376), (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
    sub_1E0E250F8(v39, (unint64_t *)&qword_1EAD6DB60, v44);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
LABEL_12:
    uint64_t v45 = *(void *)(v0 + 280);
    uint64_t v46 = *(void *)(v0 + 288);
    uint64_t v47 = *(void *)(v0 + 272);
    uint64_t v48 = *(void *)(v0 + 184);
    sub_1E0E25154(*(void *)(v0 + 336), (uint64_t (*)(void))sub_1E0E25024);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v48, v47);
    goto LABEL_13;
  }
  uint64_t v30 = *(void *)(v0 + 384);
  uint64_t v31 = *(void *)(v0 + 296);
  uint64_t v32 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
  sub_1E0E250F8(*(void *)(v0 + 376), (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  sub_1E0E250F8(v30, (unint64_t *)&qword_1EAD6DB60, v32);
  if (v29(v28, 1, v31) != 1) {
    goto LABEL_12;
  }
  uint64_t v116 = v25;
  v118 = v10;
  uint64_t v34 = *(void *)(v0 + 280);
  uint64_t v33 = *(void *)(v0 + 288);
  uint64_t v35 = *(void *)(v0 + 272);
  uint64_t v36 = *(void *)(v0 + 184);
  sub_1E0E250F8(*(void *)(v0 + 336), (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v36, v35);
LABEL_17:
  id v59 = objc_msgSend(v126, sel_endDate);
  if (v59)
  {
    uint64_t v60 = v59;
    sub_1E0ECB940();

    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v61 = 1;
  }
  uint64_t v63 = *(void *)(v0 + 352);
  uint64_t v62 = *(void *)(v0 + 360);
  uint64_t v64 = *(void *)(v0 + 328);
  uint64_t v65 = *(void *)(v0 + 296);
  v118(v62, v61, 1, v65);
  sub_1E0ECB380();
  v118(v63, 0, 1, v65);
  uint64_t v66 = v64 + *(int *)(v116 + 48);
  sub_1E0DF0C20(v62, v64);
  sub_1E0DF0C20(v63, v66);
  if (v29(v64, 1, v65) == 1)
  {
    uint64_t v67 = *(void *)(v0 + 360);
    uint64_t v68 = *(void *)(v0 + 288);
    uint64_t v121 = *(void *)(v0 + 296);
    uint64_t v69 = v29;
    uint64_t v70 = *(void *)(v0 + 272);
    uint64_t v71 = *(void *)(v0 + 280);
    uint64_t v72 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
    sub_1E0E250F8(*(void *)(v0 + 352), (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
    sub_1E0E250F8(v67, (unint64_t *)&qword_1EAD6DB60, v72);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v68, v70);
    if (v69(v66, 1, v121) == 1)
    {
      sub_1E0E250F8(*(void *)(v0 + 328), (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
LABEL_33:
      uint64_t v101 = *(void *)(v0 + 304);
      uint64_t v102 = *(void *)(v0 + 312);
      uint64_t v103 = *(void *)(v0 + 296);
      id v128 = *(id *)(v0 + 200);
      uint64_t v125 = *(void **)(v0 + 192);
      sub_1E0ECB3A0();
      uint64_t v104 = sub_1E0ECB920();
      *(void *)(v0 + 432) = v104;
      long long v105 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
      v105(v102, v103);
      sub_1E0ECB380();
      uint64_t v106 = sub_1E0ECB920();
      *(void *)(v0 + 440) = v106;
      v105(v102, v103);
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 120;
      *(void *)(v0 + 24) = sub_1E0E24848;
      uint64_t v107 = swift_continuation_init();
      *(void *)(v0 + 80) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = sub_1E0E2239C;
      *(void *)(v0 + 104) = &block_descriptor_0;
      *(void *)(v0 + 112) = v107;
      objc_msgSend(v125, sel_cachedDataForCustomGraphSeries_timeScope_resolution_startDate_endDate_completion_, v129, v128, 0, v104, v106, v0 + 80);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
  }
  else
  {
    uint64_t v73 = *(void *)(v0 + 296);
    uint64_t v74 = *(void *)(v0 + 304);
    sub_1E0DF0C20(*(void *)(v0 + 328), *(void *)(v0 + 344));
    unsigned int v75 = v29(v66, 1, v73);
    long long v76 = (void (**)(uint64_t, uint64_t))(v74 + 8);
    uint64_t v77 = *(void *)(v0 + 352);
    uint64_t v78 = *(void *)(v0 + 360);
    uint64_t v79 = *(void *)(v0 + 344);
    if (v75 != 1)
    {
      uint64_t v96 = *(void *)(v0 + 312);
      uint64_t v97 = *(void *)(v0 + 296);
      uint64_t v120 = *(void *)(v0 + 288);
      uint64_t v124 = *(void *)(v0 + 328);
      uint64_t v98 = *(void *)(v0 + 280);
      uint64_t v117 = *(void *)(v0 + 272);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 304) + 32))(v96, v66, v97);
      sub_1E0E252AC((unint64_t *)&qword_1EAD6F6E0, MEMORY[0x1E4F27928]);
      char v115 = sub_1E0ECD100();
      uint64_t v99 = *v76;
      (*v76)(v96, v97);
      long long v100 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
      sub_1E0E250F8(v77, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
      sub_1E0E250F8(v78, (unint64_t *)&qword_1EAD6DB60, v100);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v120, v117);
      v99(v79, v97);
      sub_1E0E250F8(v124, (unint64_t *)&qword_1EAD6DB60, v100);
      if (v115) {
        goto LABEL_33;
      }
      goto LABEL_26;
    }
    uint64_t v80 = *(void *)(v0 + 288);
    uint64_t v122 = *(void *)(v0 + 296);
    uint64_t v82 = *(void *)(v0 + 272);
    uint64_t v81 = *(void *)(v0 + 280);
    long long v83 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
    sub_1E0E250F8(v77, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
    sub_1E0E250F8(v78, (unint64_t *)&qword_1EAD6DB60, v83);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
    (*v76)(v79, v122);
  }
  sub_1E0E25154(*(void *)(v0 + 328), (uint64_t (*)(void))sub_1E0E25024);
LABEL_26:
  swift_release();
  sub_1E0ECBFD0();
  long long v84 = sub_1E0ECBFF0();
  os_log_type_t v85 = sub_1E0ECD540();
  BOOL v86 = os_log_type_enabled(v84, v85);
  uint64_t v87 = *(void *)(v0 + 256);
  uint64_t v88 = *(void *)(v0 + 224);
  uint64_t v89 = *(void *)(v0 + 232);
  if (v86)
  {
    uint64_t v123 = *(void *)(v0 + 224);
    uint64_t v119 = *(void *)(v0 + 256);
    uint64_t v90 = (uint8_t *)swift_slowAlloc();
    uint64_t v91 = swift_slowAlloc();
    uint64_t v130 = v91;
    *(_DWORD *)uint64_t v90 = 136446210;
    uint64_t v92 = sub_1E0ECDBC0();
    *(void *)(v0 + 136) = sub_1E0DED7E4(v92, v93, &v130);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1E0B26000, v84, v85, "[%{public}s] skipping update for out of range dates", v90, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v91, -1, -1);
    MEMORY[0x1E4E41080](v90, -1, -1);

    id v1 = v129;
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v119, v123);
  }
  else
  {

    id v1 = v129;
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
  }
LABEL_29:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v94 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v94(v1 != 0);
}

uint64_t sub_1E0E24848()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 448) = v2;
  uint64_t v3 = *(void *)(v1 + 408);
  uint64_t v4 = *(void *)(v1 + 400);
  if (v2) {
    id v5 = sub_1E0E24CDC;
  }
  else {
    id v5 = sub_1E0E24978;
  }
  return MEMORY[0x1F4188298](v5, v4, v3);
}

uint64_t sub_1E0E24978()
{
  uint64_t v28 = v0;
  uint64_t v2 = *(void **)(v0 + 432);
  uint64_t v1 = *(void **)(v0 + 440);
  swift_release();
  unint64_t v3 = *(void *)(v0 + 120);

  unint64_t v4 = sub_1E0E45B04(v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
    id v5 = *(void **)(v0 + 416);
    uint64_t v6 = *(void **)(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v7 = *(void **)(v0 + 208);
    v27[0] = MEMORY[0x1E4FBC870];
    uint64_t v9 = sub_1E0E21DAC(v4, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0xB8))(v9, v8, 0);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void **)((char *)v7 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem);
    *(void *)((char *)v7 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem) = v10;
  }
  else
  {
    sub_1E0ECBFD0();
    os_log_type_t v12 = sub_1E0ECBFF0();
    os_log_type_t v13 = sub_1E0ECD520();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void **)(v0 + 416);
    uint64_t v16 = *(void *)(v0 + 264);
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 232);
    if (v14)
    {
      uint64_t v25 = *(void **)(v0 + 424);
      uint64_t v26 = *(void *)(v0 + 264);
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v27[0] = v20;
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v21 = sub_1E0ECDBC0();
      *(void *)(v0 + 176) = sub_1E0DED7E4(v21, v22, v27);
      sub_1E0ECD6D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1E0B26000, v12, v13, "[%{public}s] skipping update for incompatible chart points", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v20, -1, -1);
      MEMORY[0x1E4E41080](v19, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v26, v17);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v23(v4 != 0);
}

uint64_t sub_1E0E24CDC()
{
  uint64_t v28 = v0;
  uint64_t v2 = *(void **)(v0 + 440);
  uint64_t v1 = *(void **)(v0 + 448);
  unint64_t v4 = *(void **)(v0 + 424);
  unint64_t v3 = *(void **)(v0 + 432);
  swift_release();
  swift_willThrow();

  sub_1E0ECBFD0();
  id v5 = v1;
  id v6 = v1;
  uint64_t v7 = sub_1E0ECBFF0();
  os_log_type_t v8 = sub_1E0ECD520();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void **)(v0 + 448);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v24 = *(void **)(v0 + 416);
    uint64_t v25 = *(void *)(v0 + 224);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v27[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v13 = sub_1E0ECDBC0();
    *(void *)(v0 + 152) = sub_1E0DED7E4(v13, v14, v27);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v0 + 160) = v9;
    id v15 = v9;
    sub_1E0DFCAE0();
    uint64_t v16 = sub_1E0ECD200();
    *(void *)(v0 + 168) = sub_1E0DED7E4(v16, v17, v27);
    sub_1E0ECD6D0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1E0B26000, v7, v8, "[%{public}s] skipping update due to fetch error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v12, -1, -1);
    MEMORY[0x1E4E41080](v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v26, v25);
  }
  else
  {
    uint64_t v18 = *(void **)(v0 + 448);
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v21 = *(void *)(v0 + 224);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22(0);
}

void sub_1E0E25024()
{
  if (!qword_1EAD6E520)
  {
    sub_1E0E250A4(255, (unint64_t *)&qword_1EAD6DB60, MEMORY[0x1E4F27928]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6E520);
    }
  }
}

void sub_1E0E250A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECD6C0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1E0E250F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1E0E250A4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1E0E25154(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1E0E251B4()
{
  if (!qword_1EAD6E530)
  {
    sub_1E0ECCF30();
    sub_1E0E252AC(&qword_1EAD6F320, MEMORY[0x1E4F295A0]);
    unint64_t v0 = sub_1E0ECD0F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E530);
    }
  }
}

uint64_t sub_1E0E25248(uint64_t a1, uint64_t a2)
{
  sub_1E0E251B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E252AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1E0E252F4(void *a1)
{
  id v2 = objc_msgSend(self, sel_audiogramSampleType);
  id v3 = objc_msgSend(a1, sel_displayTypeController);
  id v4 = objc_msgSend(v3, sel_displayTypeForObjectType_, v2);

  if (v4)
  {
    id v5 = v4;
    id v6 = objc_msgSend(a1, sel_healthStore);
    id v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudiogramLongitudinalChartDataSource()), sel_initWithDisplayType_healthStore_, v5, v6);

    id v8 = objc_msgSend(objc_allocWithZone((Class)HKChartCache), sel_init);
    objc_msgSend(v8, sel_setDataSource_, v7);
    id v9 = objc_msgSend(self, sel_sharedOperationManager);
    objc_msgSend(v8, sel_setOperationManager_, v9);

    id v10 = objc_msgSend(objc_allocWithZone((Class)HKCacheBackedChartSeriesDataSource), sel_init);
    objc_msgSend(v10, sel_setChartCache_, v8);
    id v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for HKMultiLineSeries()), sel_init);
    objc_msgSend(v11, sel_setDataSource_, v10);
    id v12 = v11;
    sub_1E0E8F13C();
    unint64_t v14 = v13;
    objc_msgSend(v12, sel_setYAxis_, v13);

    id v15 = v12;
    sub_1E0E8F25C();
    unint64_t v17 = v16;
    objc_msgSend(v15, sel_setAxisScalingRule_, v16);

    objc_msgSend(v15, sel_setAllowsSelection_, 1);
    id v18 = v5;
    id v19 = objc_msgSend(a1, sel_unitController);
    id v20 = objc_allocWithZone((Class)type metadata accessor for AudiogramLongitudinalChartFormatter());
    id v21 = AudiogramChartDataFormatter.init(displayType:unitController:)(v4, v19);
    id v22 = v15;
    objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartDisplayType), sel_initWithGraphSeries_baseDisplayType_valueFormatter_dataTypeCode_, v22, v18, v21, objc_msgSend(v2, sel_code));
  }
  else
  {
    __break(1u);
  }
}

BOOL AttributedDurationFormatterUnitsStyle.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

void *sub_1E0E255E4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1E0E25690(uint64_t a1, void *a2, char *a3, void *a4)
{
  uint64_t v8 = sub_1E0ECDB70();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  id v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1E0ECB640();
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1E0ECDBB0();
  uint64_t v19 = v18;
  if (a1 == 1)
  {
    sub_1E0ECDB60();
LABEL_5:
    sub_1E0E25858();
    sub_1E0E25AA4(v17, v19, (uint64_t)v12, a2, a3, a4, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return sub_1E0ECD620();
  }
  if (!a1)
  {
    sub_1E0ECDB40();
    goto LABEL_5;
  }
  v21[1] = a1;
  uint64_t result = sub_1E0ECDA00();
  __break(1u);
  return result;
}

unint64_t sub_1E0E25858()
{
  unint64_t result = qword_1EAD699C0;
  if (!qword_1EAD699C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EAD699C0);
  }
  return result;
}

uint64_t sub_1E0E25AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, char *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v60 = a6;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v52 = a3;
  uint64_t v10 = sub_1E0ECB600();
  uint64_t v54 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v11);
  id v57 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1E0ECB640();
  uint64_t v58 = *(void *)(v13 - 8);
  uint64_t v59 = v13;
  MEMORY[0x1F4188790](v13, v14);
  id v56 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1E0ECDB00();
  MEMORY[0x1F4188790](v16 - 8, v17);
  uint64_t v49 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1E0ECDAB0();
  MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v21 = sub_1E0ECDB70();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21, v23);
  uint64_t v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1E0ECDB80();
  uint64_t v47 = *(void *)(v26 - 8);
  uint64_t v48 = v26;
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v29 = (char *)&v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1E0ECDAD0();
  uint64_t v50 = *(void *)(v30 - 8);
  uint64_t v51 = v30;
  MEMORY[0x1F4188790](v30, v31);
  uint64_t v33 = (char *)&v44 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0ECDBB0();
  uint64_t v53 = a1;
  uint64_t v55 = a2;
  if (sub_1E0ECDBA0()) {
    return sub_1E0E26820(v61, v62, v60, a7);
  }
  sub_1E0E2718C(0, &qword_1EAD6E558, MEMORY[0x1E4F281B0], MEMORY[0x1E4FBBE00]);
  uint64_t v46 = v10;
  sub_1E0ECDB30();
  uint64_t v45 = a7;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1E0F06210;
  sub_1E0ECDB10();
  sub_1E0ECDB20();
  sub_1E0E4CA50(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v52, v21);
  sub_1E0ECDAA0();
  sub_1E0ECDAF0();
  sub_1E0ECDA90();
  sub_1E0ECDAE0();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v48);
  uint64_t v36 = (uint64_t)v56;
  sub_1E0ECDAC0();
  uint64_t KeyPath = swift_getKeyPath();
  *(&v44 - 2) = MEMORY[0x1F4188790](KeyPath, v38);
  swift_getKeyPath();
  uint64_t v39 = v61;
  uint64_t v63 = v61;
  sub_1E0E271F8();
  id v40 = v39;
  sub_1E0ECB580();
  uint64_t v41 = (uint64_t)v57;
  sub_1E0ECB610();
  uint64_t v42 = v62;
  uint64_t v43 = v60;
  sub_1E0E27340(v41, v36, v42, v43);

  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v41, v46);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v33, v51);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v45, v36, v59);
}

uint64_t sub_1E0E260BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v54 = a2;
  sub_1E0E0B978();
  uint64_t v53 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E279B4();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E27A58(0);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  uint64_t v20 = (char *)&v51 - v19;
  MEMORY[0x1F4188790](v18, v21);
  uint64_t v23 = (char *)&v51 - v22;
  sub_1E0E27A24(0);
  uint64_t v26 = MEMORY[0x1F4188790](v24 - 8, v25);
  uint64_t v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v29);
  uint64_t v31 = (char *)&v51 - v30;
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  sub_1E0E272F8(&qword_1EAD69950, MEMORY[0x1E4F27100]);
  sub_1E0ECB5C0();
  swift_release();
  uint64_t v56 = swift_getKeyPath();
  swift_getKeyPath();
  sub_1E0E27B10();
  sub_1E0ECB5C0();
  swift_release();
  uint64_t v32 = (uint64_t)&v11[*(int *)(v8 + 56)];
  sub_1E0E27BE0((uint64_t)v31, (uint64_t)v11, (uint64_t (*)(void))sub_1E0E27A24);
  sub_1E0E27BE0((uint64_t)v23, v32, (uint64_t (*)(void))sub_1E0E27A58);
  uint64_t v33 = sub_1E0ECB470();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1, v33) == 1) {
    goto LABEL_13;
  }
  sub_1E0E27CA8((uint64_t)v11, (uint64_t)v28, (uint64_t (*)(void))sub_1E0E27A24);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v28, v33);
  if (v35 != *MEMORY[0x1E4F270E0])
  {
    if (v35 == *MEMORY[0x1E4F270D8])
    {
      uint64_t v43 = sub_1E0ECB490();
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v32, 1, v43) != 1)
      {
        sub_1E0E27CA8(v32, (uint64_t)v16, (uint64_t (*)(void))sub_1E0E27A58);
        int v45 = (*(uint64_t (**)(char *, uint64_t))(v44 + 88))(v16, v43);
        if (v45 != *MEMORY[0x1E4F27130] && v45 != *MEMORY[0x1E4F27140]) {
          (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v43);
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v33);
    }
    goto LABEL_13;
  }
  uint64_t v36 = sub_1E0ECB490();
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v32, 1, v36) == 1)
  {
LABEL_13:
    uint64_t v39 = (uint64_t)v55;
    sub_1E0ECB5D0();
    uint64_t v46 = swift_getKeyPath();
    *(&v51 - 2) = (void *)MEMORY[0x1F4188790](v46, v47);
    swift_getKeyPath();
    uint64_t v42 = v52;
    goto LABEL_14;
  }
  sub_1E0E27CA8(v32, (uint64_t)v20, (uint64_t (*)(void))sub_1E0E27A58);
  int v38 = (*(uint64_t (**)(char *, uint64_t))(v37 + 88))(v20, v36);
  if (v38 != *MEMORY[0x1E4F27130] && v38 != *MEMORY[0x1E4F27140])
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v36);
    goto LABEL_13;
  }
  uint64_t v39 = (uint64_t)v55;
  sub_1E0ECB5D0();
  uint64_t v40 = swift_getKeyPath();
  *(&v51 - 2) = (void *)MEMORY[0x1F4188790](v40, v41);
  swift_getKeyPath();
  uint64_t v42 = v51;
LABEL_14:
  uint64_t v59 = v42;
  id v48 = v42;
  sub_1E0E272F8(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
  uint64_t v49 = (void (*)(char *, void))sub_1E0ECB660();
  sub_1E0E2728C();
  sub_1E0ECB700();
  v49(v58, 0);
  sub_1E0E27C48(v39, (uint64_t (*)(void))sub_1E0E0B978);
  sub_1E0E27C48(v32, (uint64_t (*)(void))sub_1E0E27A58);
  return sub_1E0E27C48((uint64_t)v11, (uint64_t (*)(void))sub_1E0E27A24);
}

uint64_t sub_1E0E267C8()
{
  return sub_1E0ECD100() & 1;
}

uint64_t sub_1E0E26820@<X0>(void *a1@<X1>, char *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  id v62 = a3;
  id v57 = a2;
  uint64_t v67 = a4;
  sub_1E0E27124(0);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v66 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E27158(0);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v65 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E0B978();
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v52 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1E0ECBA30();
  uint64_t v59 = *(void *)(v14 - 8);
  uint64_t v60 = v14;
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v56 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1E0ECD180();
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v55 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1E0ECD160();
  MEMORY[0x1F4188790](v20 - 8, v21);
  uint64_t v22 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v58 = sub_1E0ECB640();
  uint64_t v61 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58, v24);
  uint64_t v26 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v27 = (id)qword_1EAD740B8;
  unint64_t v54 = 0x80000001E0F29290;
  uint64_t v28 = sub_1E0ECB680();
  uint64_t v30 = v29;

  swift_bridgeObjectRetain();
  sub_1E0ECB6E0();
  sub_1E0ECB650();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath, v32);
  swift_getKeyPath();
  uint64_t v68 = (uint64_t)a1;
  sub_1E0E271F8();
  id v53 = a1;
  sub_1E0ECB580();
  uint64_t v33 = swift_getKeyPath();
  MEMORY[0x1F4188790](v33, v34);
  swift_getKeyPath();
  int v35 = v57;
  uint64_t v68 = (uint64_t)v57;
  sub_1E0E2728C();
  uint64_t v36 = v35;
  id v57 = v26;
  sub_1E0ECB580();
  sub_1E0ECD150();
  sub_1E0ECD140();
  sub_1E0ECD130();
  sub_1E0ECD140();
  sub_1E0ECD170();
  id v37 = (id)qword_1EAD740B8;
  sub_1E0ECBA20();
  sub_1E0ECD1F0();
  sub_1E0ECB6E0();
  sub_1E0ECB650();
  uint64_t v38 = swift_getKeyPath();
  MEMORY[0x1F4188790](v38, v39);
  swift_getKeyPath();
  uint64_t v68 = (uint64_t)a1;
  id v40 = v53;
  sub_1E0ECB580();
  uint64_t v41 = swift_getKeyPath();
  MEMORY[0x1F4188790](v41, v42);
  swift_getKeyPath();
  uint64_t v68 = (uint64_t)v62;
  id v43 = v62;
  sub_1E0ECB580();
  uint64_t v68 = v28;
  uint64_t v69 = v30;
  uint64_t v44 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v66, 1, 1, v60);
  sub_1E0E272F8(&qword_1EAD6E550, MEMORY[0x1E4F273A8]);
  sub_1E0E0F184();
  uint64_t v45 = (uint64_t)v65;
  uint64_t v46 = v58;
  sub_1E0ECB780();
  sub_1E0E27C48(v44, (uint64_t (*)(void))sub_1E0E27124);
  swift_bridgeObjectRelease();
  uint64_t v47 = v46;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v45, 1, v64) == 1)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v57, v46);
    return sub_1E0E27C48(v45, (uint64_t (*)(void))sub_1E0E27158);
  }
  else
  {
    uint64_t v49 = v45;
    uint64_t v50 = v52;
    sub_1E0E27BE0(v49, v52, (uint64_t (*)(void))sub_1E0E0B978);
    sub_1E0E272F8(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
    uint64_t v51 = v57;
    sub_1E0ECB590();
    sub_1E0E27C48(v50, (uint64_t (*)(void))sub_1E0E0B978);
    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v51, v47);
  }
}

id AttributedDurationFormatter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttributedDurationFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AttributedDurationFormatter()
{
  return self;
}

unint64_t sub_1E0E27094()
{
  unint64_t result = qword_1EAD6E548;
  if (!qword_1EAD6E548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E548);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedDurationFormatterUnitsStyle()
{
  return &type metadata for AttributedDurationFormatterUnitsStyle;
}

uint64_t method lookup function for AttributedDurationFormatter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AttributedDurationFormatter);
}

uint64_t dispatch thunk of static AttributedDurationFormatter.formattedValue(duration:unitsStyle:font:valueColor:unitColor:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

void sub_1E0E27124(uint64_t a1)
{
}

void sub_1E0E27158(uint64_t a1)
{
}

void sub_1E0E2718C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1E0E271F8()
{
  unint64_t result = qword_1EAD69960;
  if (!qword_1EAD69960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD69960);
  }
  return result;
}

uint64_t sub_1E0E27250()
{
  return 8;
}

uint64_t sub_1E0E2725C()
{
  return swift_release();
}

uint64_t sub_1E0E27264(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1E0E27278(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1E0E2728C()
{
  unint64_t result = qword_1EAD69958;
  if (!qword_1EAD69958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD69958);
  }
  return result;
}

uint64_t sub_1E0E272E4()
{
  return 8;
}

uint64_t sub_1E0E272F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E0E27340(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v49 = a4;
  id v48 = a3;
  uint64_t v47 = a2;
  uint64_t v58 = sub_1E0ECB5E0();
  uint64_t v5 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58, v6);
  uint64_t v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_1E0ECB5F0();
  uint64_t v8 = *(void *)(v61 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v61, v9);
  uint64_t v63 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  id v62 = (char *)&v43 - v13;
  sub_1E0E2718C(0, &qword_1EAD6DC00, MEMORY[0x1E4F27350], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  id v57 = (char *)&v43 - v16;
  uint64_t v17 = sub_1E0ECB600();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0DFBEAC();
  uint64_t v23 = v22 - 8;
  MEMORY[0x1F4188790](v22, v24);
  uint64_t v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v18 += 16;
  id v53 = v27;
  v27(v21, a1, v17);
  sub_1E0E272F8(&qword_1EAD6E560, MEMORY[0x1E4F27368]);
  unint64_t v54 = v21;
  sub_1E0ECD2A0();
  uint64_t v28 = &v26[*(int *)(v23 + 44)];
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v64 = v8 + 16;
  uint64_t v59 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v60 = v29;
  uint64_t v30 = (uint64_t)v26;
  uint64_t v51 = (void (**)(char *, uint64_t))(v18 - 8);
  uint64_t v52 = (void (**)(char *))(v5 + 16);
  uint64_t v55 = v18;
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v44 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  for (uint64_t i = (void (**)(uint64_t, uint64_t))(v5 + 8); ; (*i)(v40, v37))
  {
    uint64_t v32 = v61;
    uint64_t v31 = v62;
    v60(v62, v28, v61);
    sub_1E0E27980();
    uint64_t v33 = v63;
    sub_1E0ECD460();
    sub_1E0E272F8(&qword_1EAD6DC28, MEMORY[0x1E4F27358]);
    int v67 = sub_1E0ECD100();
    uint64_t v34 = v30;
    int v35 = *v59;
    (*v59)(v33, v32);
    v35(v31, v32);
    if (v67)
    {
      (*v56)(v57, 1, 1, v58);
      uint64_t v30 = v34;
      return sub_1E0E27C48(v30, (uint64_t (*)(void))sub_1E0DFBEAC);
    }
    uint64_t v30 = v34;
    uint64_t v36 = (void (*)(char *, void))sub_1E0ECD480();
    uint64_t v38 = v57;
    uint64_t v37 = v58;
    (*v52)(v57);
    v36(v66, 0);
    uint64_t v39 = v54;
    v53(v54, v30, v17);
    sub_1E0ECD470();
    (*v51)(v39, v17);
    (*v56)(v38, 0, 1, v37);
    if ((*v50)(v38, 1, v37) == 1) {
      return sub_1E0E27C48(v30, (uint64_t (*)(void))sub_1E0DFBEAC);
    }
    uint64_t v40 = (uint64_t)v46;
    (*v44)(v46, v38, v37);
    uint64_t v41 = v65;
    sub_1E0E260BC(v40, v47, v48, v49);
    if (v41) {
      break;
    }
    uint64_t v65 = 0;
  }
  (*i)(v40, v37);
  return sub_1E0E27C48(v30, (uint64_t (*)(void))sub_1E0DFBEAC);
}

uint64_t sub_1E0E27980()
{
  return sub_1E0E272F8(&qword_1EAD6DC10, MEMORY[0x1E4F27368]);
}

void sub_1E0E279B4()
{
  if (!qword_1EAD6E568)
  {
    sub_1E0E27A24(255);
    sub_1E0E27A58(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6E568);
    }
  }
}

void sub_1E0E27A24(uint64_t a1)
{
}

void sub_1E0E27A58(uint64_t a1)
{
}

uint64_t sub_1E0E27A90()
{
  return sub_1E0E272F8(&qword_1EAD69950, MEMORY[0x1E4F27100]);
}

uint64_t sub_1E0E27ADC()
{
  return 8;
}

void sub_1E0E27AF0()
{
}

unint64_t sub_1E0E27B10()
{
  unint64_t result = qword_1EAD6E580;
  if (!qword_1EAD6E580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E580);
  }
  return result;
}

void sub_1E0E27B64()
{
}

uint64_t sub_1E0E27B8C()
{
  return 8;
}

uint64_t sub_1E0E27B9C()
{
  return sub_1E0ECD070();
}

uint64_t sub_1E0E27BE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1E0E27C48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1E0E27CA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1E0E27D10()
{
  if (!qword_1EAD6E588)
  {
    sub_1E0ECB500();
    unint64_t v0 = sub_1E0ECDA80();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E588);
    }
  }
}

BOOL static BalanceCoordinateInfo.Context.TimeScope.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t BalanceCoordinateInfo.Context.TimeScope.hash(into:)()
{
  return sub_1E0ECDA60();
}

uint64_t BalanceCoordinateInfo.Context.TimeScope.hashValue.getter()
{
  return sub_1E0ECDA70();
}

BOOL sub_1E0E27E1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1E0E27E30()
{
  return sub_1E0ECDA70();
}

uint64_t sub_1E0E27E78()
{
  return sub_1E0ECDA60();
}

uint64_t sub_1E0E27EA4()
{
  return sub_1E0ECDA70();
}

uint64_t BalanceCoordinateInfo.Context.init(selectedMetric:timeScope:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a2;
  sub_1E0E27F24(a1, a3);
  uint64_t result = type metadata accessor for BalanceCoordinateInfo.Context(0);
  *(unsigned char *)(a3 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_1E0E27F24(uint64_t a1, uint64_t a2)
{
  sub_1E0E27F88();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1E0E27F88()
{
  if (!qword_1EAD6E590)
  {
    sub_1E0ECBDF0();
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E590);
    }
  }
}

uint64_t type metadata accessor for BalanceCoordinateInfo.Context(uint64_t a1)
{
  return sub_1E0E28200(a1, qword_1EAD6E5C8);
}

id BalanceCoordinateInfo.__allocating_init(collection:context:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  sub_1E0E13A18(a1, (uint64_t)v5 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_collection);
  sub_1E0E28120(a2, (uint64_t)v5 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_context);
  v8.receiver = v5;
  v8.super_class = v2;
  id v6 = objc_msgSendSuper2(&v8, sel_init);
  sub_1E0E28184(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v6;
}

id BalanceCoordinateInfo.init(collection:context:)(uint64_t a1, uint64_t a2)
{
  sub_1E0E13A18(a1, (uint64_t)v2 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_collection);
  sub_1E0E28120(a2, (uint64_t)v2 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_context);
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for BalanceCoordinateInfo(0);
  id v5 = objc_msgSendSuper2(&v7, sel_init);
  sub_1E0E28184(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v5;
}

uint64_t sub_1E0E28120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BalanceCoordinateInfo.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E28184(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BalanceCoordinateInfo.Context(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BalanceCoordinateInfo(uint64_t a1)
{
  return sub_1E0E28200(a1, qword_1EAD6E5B0);
}

uint64_t sub_1E0E28200(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id BalanceCoordinateInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BalanceCoordinateInfo.init()()
{
}

id BalanceCoordinateInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceCoordinateInfo(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1E0E28308()
{
  unint64_t result = qword_1EAD6E5A0;
  if (!qword_1EAD6E5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E5A0);
  }
  return result;
}

uint64_t sub_1E0E283A8()
{
  return type metadata accessor for BalanceCoordinateInfo(0);
}

uint64_t sub_1E0E283B0()
{
  uint64_t result = type metadata accessor for BalanceCoordinateInfo.Context(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for BalanceCoordinateInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BalanceCoordinateInfo);
}

uint64_t dispatch thunk of BalanceCoordinateInfo.__allocating_init(collection:context:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t *initializeBufferWithCopyOfBuffer for BalanceCoordinateInfo.Context(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1E0ECBDF0();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1E0E27F88();
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for BalanceCoordinateInfo.Context(uint64_t a1)
{
  uint64_t v2 = sub_1E0ECBDF0();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for BalanceCoordinateInfo.Context(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1E0ECBDF0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1E0E27F88();
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for BalanceCoordinateInfo.Context(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1E0ECBDF0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1E0E27F88();
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for BalanceCoordinateInfo.Context(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1E0ECBDF0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1E0E27F88();
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for BalanceCoordinateInfo.Context(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1E0ECBDF0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1E0E27F88();
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceCoordinateInfo.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0E28C28);
}

uint64_t sub_1E0E28C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1E0E27F88();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for BalanceCoordinateInfo.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0E28CF8);
}

void sub_1E0E28CF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1E0E27F88();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
}

void sub_1E0E28DB4()
{
  sub_1E0E27F88();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceCoordinateInfo.Context.TimeScope(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BalanceCoordinateInfo.Context.TimeScope(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E0E28FB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1E0E28FD8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1E0E28FE0(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BalanceCoordinateInfo.Context.TimeScope()
{
  return &type metadata for BalanceCoordinateInfo.Context.TimeScope;
}

uint64_t sub_1E0E28FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_1E0E29034(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  unsigned int v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata, a2);
    int v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        _OWORD *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        uint64_t v16 = &v8[8 * v9];
        uint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  MEMORY[0x1F4188790](TupleTypeMetadata, a2);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return sub_1E0ECCE50();
}

uint64_t sub_1E0E291F8(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t *)(a3 + 40);
  int v8 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v9 = *v7;
    v24[0] = *(v7 - 1);
    v24[1] = v9;
    swift_bridgeObjectRetain();
    a1(&v25, v24);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v25;
    uint64_t v11 = *(void *)(v25 + 16);
    int64_t v12 = v8[2];
    int64_t v13 = v12 + v11;
    if (__OFADD__(v12, v11)) {
      break;
    }
    int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v13 <= v8[3] >> 1)
    {
      if (*(void *)(v10 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v12 <= v13) {
        int64_t v15 = v12 + v11;
      }
      else {
        int64_t v15 = v12;
      }
      int v8 = sub_1E0E0C2A4(isUniquelyReferenced_nonNull_native, v15, 1, v8);
      if (*(void *)(v10 + 16))
      {
LABEL_15:
        uint64_t v16 = v8[2];
        if ((v8[3] >> 1) - v16 < v11) {
          goto LABEL_30;
        }
        unint64_t v17 = (unint64_t)&v8[4 * v16 + 4];
        if (v10 + 32 < v17 + 32 * v11 && v17 < v10 + 32 + 32 * v11) {
          goto LABEL_32;
        }
        swift_arrayInitWithCopy();
        if (v11)
        {
          uint64_t v19 = v8[2];
          BOOL v20 = __OFADD__(v19, v11);
          uint64_t v21 = v19 + v11;
          if (v20) {
            goto LABEL_31;
          }
          v8[2] = v21;
        }
        goto LABEL_4;
      }
    }
    if (v11) {
      goto LABEL_29;
    }
LABEL_4:
    v7 += 2;
    swift_bridgeObjectRelease();
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = sub_1E0ECD960();
  __break(1u);
  return result;
}

uint64_t AccessoryRectangularChartView.init(titleOptions:detailOptions:baseAccessibilityIdentifier:chartContent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t AccessoryRectangularChartView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v25 = a1;
  id v27 = a2;
  type metadata accessor for AccessoryRectangularTitleView();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_getTupleTypeMetadata3();
  sub_1E0ECCE40();
  swift_getWitnessTable();
  uint64_t v5 = sub_1E0ECCD90();
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v6);
  int v8 = (char *)&v24 - v7;
  uint64_t v9 = sub_1E0ECC3F0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v15);
  unint64_t v17 = (char *)&v24 - v16;
  long long v18 = v2[1];
  v33[0] = *v2;
  v33[1] = v18;
  void v33[2] = v2[2];
  sub_1E0ECC630();
  uint64_t v19 = *(void *)(v25 + 24);
  uint64_t v28 = v4;
  uint64_t v29 = v19;
  uint64_t v30 = v33;
  sub_1E0ECCD80();
  sub_1E0ECCE30();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1E0ECCBD0();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v5);
  uint64_t v31 = WitnessTable;
  uint64_t v32 = MEMORY[0x1E4F3CE38];
  swift_getWitnessTable();
  BOOL v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v20(v17, v14, v9);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v14, v9);
  v20(v27, v17, v9);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v9);
}

uint64_t type metadata accessor for AccessoryRectangularTitleView()
{
  uint64_t result = qword_1EAD6E658;
  if (!qword_1EAD6E658) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1E0E297B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = type metadata accessor for AccessoryRectangularTitleView();
  uint64_t v15 = MEMORY[0x1F4188790](v13, v14);
  unint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v15, v18);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v22 = *a1;
  uint64_t v42 = a1[1];
  uint64_t v23 = v42;
  uint64_t v43 = v22;
  long long v41 = *((_OWORD *)a1 + 1);
  long long v24 = v41;
  *(void *)unint64_t v17 = v22;
  *((void *)v17 + 1) = v23;
  *((_OWORD *)v17 + 1) = v24;
  uint64_t v25 = (uint64_t *)&v17[*(int *)(v19 + 28)];
  uint64_t *v25 = swift_getKeyPath();
  sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  swift_storeEnumTagMultiPayload();
  sub_1E0E2FCDC((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for AccessoryRectangularTitleView);
  uint64_t v26 = (void (*)(uint64_t))a1[4];
  sub_1E0E2FDF4((uint64_t)&v43);
  sub_1E0E2FDF4((uint64_t)&v42);
  uint64_t v27 = sub_1E0E2FE20((uint64_t)&v41);
  v26(v27);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v28(v12, v9, a2);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
  v29(v9, a2);
  sub_1E0E2FC74((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AccessoryRectangularTitleView);
  v40[0] = v17;
  v28(v9, v12, a2);
  uint64_t v38 = 0;
  char v39 = 0;
  v40[1] = v9;
  void v40[2] = &v38;
  v37[0] = v13;
  v37[1] = a2;
  void v37[2] = MEMORY[0x1E4F3EDA0];
  uint64_t v34 = sub_1E0E2FF84(&qword_1EAD6E738, (void (*)(uint64_t))type metadata accessor for AccessoryRectangularTitleView);
  uint64_t v35 = v32;
  uint64_t v36 = MEMORY[0x1E4F3ED90];
  sub_1E0E29034((uint64_t)v40, 3uLL, (uint64_t)v37);
  v29(v12, a2);
  sub_1E0E2FE4C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for AccessoryRectangularTitleView);
  v29(v9, a2);
  return sub_1E0E2FE4C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AccessoryRectangularTitleView);
}

uint64_t sub_1E0E29B04@<X0>(uint64_t a1@<X8>)
{
  return sub_1E0E297B4(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1E0E29B10()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E29B58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1E0E29BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1E0E29C1C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1E0E29CB4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

uint64_t sub_1E0E29D1C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1E0E29D64(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessoryRectangularChartView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1E0E29DC8()
{
  return swift_getWitnessTable();
}

uint64_t *sub_1E0E29EB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_1E0ECCF80();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v5;
}

uint64_t sub_1E0E2A034(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1E0ECCF80();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1E0E2A128(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_1E0ECCF80();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1E0E2A248(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    uint64_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46AE8];
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1E0E2FB84((uint64_t)a1 + v6, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
    sub_1E0E2A70C(0, &qword_1EB584F70, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_1E0ECCF80();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1E0E2A3B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  uint64_t v9 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_1E0ECCF80();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v6, v7, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

void *sub_1E0E2A4B8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46AE8];
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3C648];
    sub_1E0E2FB84((uint64_t)a1 + v7, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
    sub_1E0E2A70C(0, &qword_1EB584F70, v10, v11);
    uint64_t v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_1E0ECCF80();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v8, v9, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1E0E2A618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0E2A62C);
}

uint64_t sub_1E0E2A62C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1E0E2A70C(0, &qword_1EAD6DB98, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C658]);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

void sub_1E0E2A70C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1E0E2A770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0E2A784);
}

void *sub_1E0E2A784(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_1E0E2A70C(0, &qword_1EAD6DB98, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C658]);
    unint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1E0E2A85C()
{
  sub_1E0E2A70C(319, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1E0E2A934()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E2A950()
{
  return sub_1E0ECDA70();
}

uint64_t sub_1E0E2A9D8()
{
  swift_bridgeObjectRetain();
  sub_1E0ECD220();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1E0ECD220();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1E0E2AA5C()
{
  return sub_1E0ECDA70();
}

uint64_t sub_1E0E2AAE0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = sub_1E0ECD9E0(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return sub_1E0ECD9E0();
    }
  }
  return result;
}

uint64_t sub_1E0E2AB84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessoryRectangularTitleView();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v29 + 64);
  MEMORY[0x1F4188790](v4 - 8, v6);
  sub_1E0E2BE68();
  uint64_t v31 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v30 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v28 - v13;
  *a1 = sub_1E0ECC8B0();
  uint64_t v32 = MEMORY[0x1E4FBC870];
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = (void *)sub_1E0E2F264(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = &unk_1F3B98BD8;
  }
  sub_1E0E2F3D0();
  uint64_t v18 = &a1[*(int *)(v17 + 44)];
  MEMORY[0x1F4188790](v17, v19);
  unint64_t v27 = v2;
  uint64_t v20 = sub_1E0E291F8((void (*)(uint64_t *__return_ptr, void *))sub_1E0E2F43C, (uint64_t)(&v28 - 4), (uint64_t)v16);
  swift_bridgeObjectRelease();
  uint64_t v32 = v20;
  swift_getKeyPath();
  sub_1E0E2FC74(v2, (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AccessoryRectangularTitleView);
  unint64_t v21 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v22 = swift_allocObject();
  sub_1E0E2FCDC((uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, (uint64_t (*)(void))type metadata accessor for AccessoryRectangularTitleView);
  sub_1E0E2C358(0, &qword_1EAD6E670, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, MEMORY[0x1E4FBB320]);
  sub_1E0E2BF28();
  sub_1E0E2C3A4();
  sub_1E0E2C420();
  unint64_t v27 = sub_1E0E2F62C();
  uint64_t v23 = v30;
  sub_1E0ECCDC0();
  long long v24 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v25 = v31;
  v24(v14, v23, v31);
  return ((uint64_t (*)(unsigned char *, char *, uint64_t))v24)(v18, v14, v25);
}

uint64_t sub_1E0E2AEE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  sub_1E0E2C058();
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E2BFE4(0, &qword_1EAD6E680, (void (*)(uint64_t))sub_1E0E2C058, (void (*)(uint64_t))sub_1E0E117D4);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v16 = a1[2];
  uint64_t v17 = a1[3];
  *(void *)uint64_t v8 = sub_1E0ECC600();
  *((void *)v8 + 1) = 0;
  unsigned char v8[16] = 0;
  sub_1E0E2F828();
  sub_1E0E2B1C8(v15, v14, a2, v16, v17, (uint64_t)&v8[*(int *)(v18 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_1E0E2FC74((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(void))sub_1E0E2C058);
  uint64_t v20 = &v13[*(int *)(v10 + 44)];
  *(void *)uint64_t v20 = KeyPath;
  *((void *)v20 + 1) = 1;
  v20[16] = 0;
  sub_1E0E2FE4C((uint64_t)v8, (uint64_t (*)(void))sub_1E0E2C058);
  uint64_t v21 = swift_getKeyPath();
  uint64_t v22 = v27;
  sub_1E0E2F97C((uint64_t)v13, v27, &qword_1EAD6E680, (void (*)(uint64_t))sub_1E0E2C058, (void (*)(uint64_t))sub_1E0E117D4);
  sub_1E0E2BF28();
  uint64_t v24 = v22 + *(int *)(v23 + 36);
  *(void *)uint64_t v24 = v21;
  *(unsigned char *)(v24 + 8) = 1;
  return sub_1E0E2F9EC((uint64_t)v13, &qword_1EAD6E680, (void (*)(uint64_t))sub_1E0E2C058, (void (*)(uint64_t))sub_1E0E117D4);
}

uint64_t sub_1E0E2B0F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = (void *)sub_1E0E2F264(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = &unk_1F3B98C08;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1E0E2F16C((uint64_t)v6, v4, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v7;
  return result;
}

uint64_t sub_1E0E2B1C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v123 = a5;
  uint64_t v122 = a4;
  uint64_t v138 = a3;
  uint64_t v135 = a6;
  sub_1E0E2C254();
  uint64_t v130 = v8;
  uint64_t v129 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  id v127 = &v114[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0E2C1F4();
  uint64_t v131 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v132 = &v114[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1E0E2BFE4(0, &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, MEMORY[0x1E4F3DF60]);
  uint64_t v16 = MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v134 = &v114[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = MEMORY[0x1F4188790](v16, v18);
  id v126 = &v114[-v20];
  MEMORY[0x1F4188790](v19, v21);
  uint64_t v133 = &v114[-v22];
  uint64_t v139 = sub_1E0ECCF80();
  uint64_t v23 = *(void *)(v139 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v139, v24);
  uint64_t v121 = &v114[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v30 = &v114[-v29];
  MEMORY[0x1F4188790](v28, v31);
  uint64_t v33 = &v114[-v32];
  sub_1E0E2C194();
  uint64_t v36 = MEMORY[0x1F4188790](v34 - 8, v35);
  id v128 = &v114[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v39 = MEMORY[0x1F4188790](v36, v38);
  uint64_t v119 = &v114[-v40];
  MEMORY[0x1F4188790](v39, v41);
  uint64_t v136 = &v114[-v42];
  uint64_t v124 = a1;
  uint64_t v142 = a1;
  uint64_t v143 = a2;
  unint64_t v43 = sub_1E0E0F184();
  uint64_t v125 = a2;
  swift_bridgeObjectRetain();
  unint64_t v118 = v43;
  uint64_t v44 = sub_1E0ECCAF0();
  uint64_t v46 = v45;
  char v48 = v47 & 1;
  sub_1E0E2BBB0();
  uint64_t v49 = sub_1E0ECCAB0();
  uint64_t v51 = v50;
  int v115 = v52;
  uint64_t v116 = v53;
  swift_release();
  sub_1E0DF8F74(v44, v46, v48);
  swift_bridgeObjectRelease();
  uint64_t v117 = v138 + *(int *)(type metadata accessor for AccessoryRectangularTitleView() + 28);
  sub_1E0E2C474((uint64_t)v33);
  sub_1E0ECCF70();
  LOBYTE(a2) = sub_1E0ECCF60();
  unint64_t v54 = *(void (**)(unsigned char *, uint64_t))(v23 + 8);
  uint64_t v120 = v30;
  uint64_t v137 = v23 + 8;
  v54(v30, v139);
  if (a2) {
    sub_1E0ECCC50();
  }
  else {
    sub_1E0ECCC60();
  }
  v54(v33, v139);
  char v55 = v115 & 1;
  uint64_t v56 = sub_1E0ECCA90();
  id v57 = v54;
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  char v63 = v62 & 1;
  sub_1E0DF8F74(v49, v51, v55);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v142 = v56;
  uint64_t v143 = v59;
  char v144 = v63;
  uint64_t v145 = v61;
  uint64_t v64 = *(void *)(v138 + 24);
  uint64_t v140 = *(void *)(v138 + 16);
  uint64_t v141 = v64;
  swift_bridgeObjectRetain();
  sub_1E0ECD250();
  uint64_t v65 = (uint64_t)v119;
  sub_1E0ECCBA0();
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v56, v59, v63);
  swift_bridgeObjectRelease();
  sub_1E0E2FCDC(v65, (uint64_t)v136, (uint64_t (*)(void))sub_1E0E2C194);
  uint64_t v142 = v122;
  uint64_t v143 = v123;
  swift_bridgeObjectRetain();
  uint64_t v66 = sub_1E0ECCAF0();
  uint64_t v68 = v67;
  char v70 = v69 & 1;
  sub_1E0E2BBB0();
  uint64_t v71 = sub_1E0ECCAB0();
  uint64_t v73 = v72;
  char v75 = v74;
  swift_release();
  sub_1E0DF8F74(v66, v68, v70);
  long long v76 = v57;
  swift_bridgeObjectRelease();
  uint64_t v77 = v121;
  sub_1E0E2C474((uint64_t)v121);
  uint64_t v78 = v120;
  sub_1E0ECCF70();
  LOBYTE(v66) = sub_1E0ECCF60();
  v76(v78, v139);
  if (v66) {
    sub_1E0ECCC40();
  }
  else {
    sub_1E0ECCC10();
  }
  v76(v77, v139);
  char v79 = v75 & 1;
  uint64_t v80 = sub_1E0ECCA90();
  uint64_t v82 = v81;
  uint64_t v84 = v83;
  char v86 = v85 & 1;
  sub_1E0DF8F74(v71, v73, v79);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v142 = v80;
  uint64_t v143 = v82;
  char v144 = v86;
  uint64_t v145 = v84;
  uint64_t v87 = v127;
  sub_1E0ECCB00();
  sub_1E0DF8F74(v80, v82, v86);
  swift_bridgeObjectRelease();
  unsigned __int8 v88 = sub_1E0ECC900();
  char v89 = sub_1E0ECC910();
  sub_1E0ECC910();
  if (sub_1E0ECC910() != v88) {
    char v89 = sub_1E0ECC910();
  }
  sub_1E0ECC270();
  uint64_t v91 = v90;
  uint64_t v93 = v92;
  uint64_t v95 = v94;
  uint64_t v97 = v96;
  uint64_t v98 = v129;
  uint64_t v99 = (uint64_t)v132;
  uint64_t v100 = v130;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v129 + 16))(v132, v87, v130);
  uint64_t v101 = v99 + *(int *)(v131 + 36);
  *(unsigned char *)uint64_t v101 = v89;
  *(void *)(v101 + 8) = v91;
  *(void *)(v101 + 16) = v93;
  *(void *)(v101 + 24) = v95;
  *(void *)(v101 + 32) = v97;
  *(unsigned char *)(v101 + 40) = 0;
  (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v87, v100);
  uint64_t v102 = *(void *)(v138 + 24);
  uint64_t v142 = *(void *)(v138 + 16);
  uint64_t v143 = v102;
  swift_bridgeObjectRetain();
  sub_1E0ECD250();
  sub_1E0E2FA48();
  uint64_t v103 = (uint64_t)v126;
  sub_1E0ECCBA0();
  swift_bridgeObjectRelease();
  sub_1E0E2FE4C(v99, (uint64_t (*)(void))sub_1E0E2C1F4);
  uint64_t v104 = v133;
  sub_1E0E2FAF0(v103, (uint64_t)v133);
  long long v105 = v136;
  uint64_t v106 = v128;
  sub_1E0E2FC74((uint64_t)v136, (uint64_t)v128, (uint64_t (*)(void))sub_1E0E2C194);
  uint64_t v107 = (void (*)(uint64_t))MEMORY[0x1E4F3DF60];
  char v108 = v134;
  sub_1E0E2F97C((uint64_t)v104, (uint64_t)v134, &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, MEMORY[0x1E4F3DF60]);
  uint64_t v109 = v135;
  sub_1E0E2FC74((uint64_t)v106, v135, (uint64_t (*)(void))sub_1E0E2C194);
  sub_1E0E2C0EC();
  uint64_t v111 = v110;
  sub_1E0E2F97C((uint64_t)v108, v109 + *(int *)(v110 + 48), &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, v107);
  uint64_t v112 = v109 + *(int *)(v111 + 64);
  *(void *)uint64_t v112 = 0;
  *(unsigned char *)(v112 + 8) = 0;
  sub_1E0E2F9EC((uint64_t)v104, &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, v107);
  sub_1E0E2FE4C((uint64_t)v105, (uint64_t (*)(void))sub_1E0E2C194);
  sub_1E0E2F9EC((uint64_t)v108, &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, v107);
  return sub_1E0E2FE4C((uint64_t)v106, (uint64_t (*)(void))sub_1E0E2C194);
}

uint64_t sub_1E0E2BBB0()
{
  sub_1E0E2A70C(0, &qword_1EAD6E188, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v17 - v2;
  uint64_t v4 = sub_1E0ECC960();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(self, sel_sharedBehavior);
  if (v9)
  {
    uint64_t v10 = v9;
    unsigned int v11 = objc_msgSend(v9, sel_isAppleWatch);

    if (!v11)
    {
      sub_1E0ECC950();
      uint64_t v12 = *MEMORY[0x1E4F3E090];
      uint64_t v13 = sub_1E0ECC990();
      uint64_t v14 = *(void *)(v13 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v3, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v3, 0, 1, v13);
      sub_1E0ECC9D0();
      sub_1E0E2FB84((uint64_t)v3, &qword_1EAD6E188, MEMORY[0x1E4F3E0A0], MEMORY[0x1E4FBB718]);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      sub_1E0ECC9B0();
      uint64_t v15 = sub_1E0ECC9F0();
      swift_release();
      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F40FB0D0]();
}

void sub_1E0E2BE68()
{
  if (!qword_1EAD6E668)
  {
    sub_1E0E2C358(255, &qword_1EAD6E670, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, MEMORY[0x1E4FBB320]);
    sub_1E0E2BF28();
    sub_1E0E2C3A4();
    sub_1E0E2C420();
    unint64_t v0 = sub_1E0ECCDD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E668);
    }
  }
}

void sub_1E0E2BF28()
{
  if (!qword_1EAD6E678)
  {
    sub_1E0E2BFE4(255, &qword_1EAD6E680, (void (*)(uint64_t))sub_1E0E2C058, (void (*)(uint64_t))sub_1E0E117D4);
    sub_1E0E2C358(255, &qword_1EAD6E008, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E678);
    }
  }
}

void sub_1E0E2BFE4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = sub_1E0ECC3F0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1E0E2C058()
{
  if (!qword_1EAD6E688)
  {
    sub_1E0E2A70C(255, &qword_1EAD6E690, (uint64_t (*)(uint64_t))sub_1E0E2C0EC, MEMORY[0x1E4F3F108]);
    sub_1E0E2C2D0();
    unint64_t v0 = sub_1E0ECCD70();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E688);
    }
  }
}

void sub_1E0E2C0EC()
{
  if (!qword_1EAD6E698)
  {
    sub_1E0E2C194();
    sub_1E0E2BFE4(255, &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, MEMORY[0x1E4F3DF60]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EAD6E698);
    }
  }
}

void sub_1E0E2C194()
{
  if (!qword_1EAD6E6A0)
  {
    sub_1E0ECC890();
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E6A0);
    }
  }
}

void sub_1E0E2C1F4()
{
  if (!qword_1EAD6E6B0)
  {
    sub_1E0E2C254();
    unint64_t v0 = sub_1E0ECC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E6B0);
    }
  }
}

void sub_1E0E2C254()
{
  if (!qword_1EAD6E6B8)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EAD6E6B8);
    }
  }
}

unint64_t sub_1E0E2C2D0()
{
  unint64_t result = qword_1EAD6E6C0;
  if (!qword_1EAD6E6C0)
  {
    sub_1E0E2A70C(255, &qword_1EAD6E690, (uint64_t (*)(uint64_t))sub_1E0E2C0EC, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E6C0);
  }
  return result;
}

void sub_1E0E2C358(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1E0E2C3A4()
{
  unint64_t result = qword_1EAD6E6C8;
  if (!qword_1EAD6E6C8)
  {
    sub_1E0E2C358(255, &qword_1EAD6E670, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E6C8);
  }
  return result;
}

unint64_t sub_1E0E2C420()
{
  unint64_t result = qword_1EAD6E6D0;
  if (!qword_1EAD6E6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E6D0);
  }
  return result;
}

uint64_t sub_1E0E2C474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1E0ECC5B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46AE8];
  sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v21 - v12;
  sub_1E0E2FEAC(v2, (uint64_t)v21 - v12, &qword_1EB584F70, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1E0ECCF80();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    os_log_type_t v16 = sub_1E0ECD530();
    uint64_t v17 = sub_1E0ECC8A0();
    os_log_type_t v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      v21[1] = a1;
      *(_DWORD *)uint64_t v19 = 136315138;
      void v21[2] = sub_1E0DED7E4(0xD000000000000013, 0x80000001E0F29A70, &v22);
      sub_1E0ECD6D0();
      _os_log_impl(&dword_1E0B26000, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v20, -1, -1);
      MEMORY[0x1E4E41080](v19, -1, -1);
    }

    sub_1E0ECC5A0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1E0E2C75C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1E0ECC5B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F46B98];
  sub_1E0E2A70C(0, &qword_1EB584F78, MEMORY[0x1E4F46B98], MEMORY[0x1E4F3C648]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (void *)((char *)v22 - v12);
  sub_1E0E2FEAC(v2, (uint64_t)v22 - v12, &qword_1EB584F78, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1E0ECCF90();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    uint64_t v16 = *v13;
    os_log_type_t v17 = sub_1E0ECD530();
    os_log_type_t v18 = sub_1E0ECC8A0();
    os_log_type_t v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      v22[1] = v16;
      *(_DWORD *)uint64_t v20 = 136315138;
      v22[2] = sub_1E0DED7E4(0x6146746567646957, 0xEC000000796C696DLL, &v23);
      sub_1E0ECD6D0();
      _os_log_impl(&dword_1E0B26000, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v21, -1, -1);
      MEMORY[0x1E4E41080](v20, -1, -1);
    }

    sub_1E0ECC5A0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1E0E2CA50(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1E0ECC5B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v9 = sub_1E0ECD530();
  uint64_t v10 = sub_1E0ECC8A0();
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = sub_1E0DED7E4(1819242306, 0xE400000000000000, &v16);
    sub_1E0ECD6D0();
    _os_log_impl(&dword_1E0B26000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v13, -1, -1);
    MEMORY[0x1E4E41080](v12, -1, -1);
  }

  sub_1E0ECC5A0();
  swift_getAtKeyPath();
  sub_1E0DF77E0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

double sub_1E0E2CC54(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1E0ECC5B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v9 = sub_1E0ECD530();
  uint64_t v10 = sub_1E0ECC8A0();
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    double v16 = *(double *)&v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v15 = sub_1E0DED7E4(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    sub_1E0ECD6D0();
    _os_log_impl(&dword_1E0B26000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E4E41080](v13, -1, -1);
    MEMORY[0x1E4E41080](v12, -1, -1);
  }

  sub_1E0ECC5A0();
  swift_getAtKeyPath();
  sub_1E0DF77E0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t sub_1E0E2CE60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1E0ECC5B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3C868];
  sub_1E0E2A70C(0, &qword_1EAD6E730, MEMORY[0x1E4F3C868], MEMORY[0x1E4F3C648]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (void *)((char *)v22 - v12);
  sub_1E0E2FEAC(v2, (uint64_t)v22 - v12, &qword_1EAD6E730, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1E0ECC350();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    uint64_t v16 = *v13;
    os_log_type_t v17 = sub_1E0ECD530();
    os_log_type_t v18 = sub_1E0ECC8A0();
    os_log_type_t v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      v22[1] = v16;
      *(_DWORD *)uint64_t v20 = 136315138;
      v22[2] = sub_1E0DED7E4(0x414C52556E65704FLL, 0xED00006E6F697463, &v23);
      sub_1E0ECD6D0();
      _os_log_impl(&dword_1E0B26000, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v21, -1, -1);
      MEMORY[0x1E4E41080](v20, -1, -1);
    }

    sub_1E0ECC5A0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1E0E2D158@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1E0ECC5B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3CB98];
  sub_1E0E2A70C(0, &qword_1EAD6E728, MEMORY[0x1E4F3CB98], MEMORY[0x1E4F3C648]);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (void *)((char *)v22 - v12);
  sub_1E0E2FEAC(v2, (uint64_t)v22 - v12, &qword_1EAD6E728, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1E0ECC3E0();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, v13, v14);
  }
  else
  {
    uint64_t v16 = *v13;
    os_log_type_t v17 = sub_1E0ECD530();
    os_log_type_t v18 = sub_1E0ECC8A0();
    os_log_type_t v19 = v17;
    if (os_log_type_enabled(v18, v17))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      v22[1] = v16;
      *(_DWORD *)uint64_t v20 = 136315138;
      v22[2] = sub_1E0DED7E4(0x5463696D616E7944, 0xEF657A6953657079, &v23);
      sub_1E0ECD6D0();
      _os_log_impl(&dword_1E0B26000, v18, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E41080](v21, -1, -1);
      MEMORY[0x1E4E41080](v20, -1, -1);
    }

    sub_1E0ECC5A0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1E0E2D450@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1E0ECC580();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1E0E2D484()
{
  return sub_1E0ECC590();
}

uint64_t sub_1E0E2D4B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1E0ECDA50();
  swift_bridgeObjectRetain();
  sub_1E0ECD220();
  uint64_t v8 = sub_1E0ECDA70();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1E0ECD9E0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      os_log_type_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1E0ECD9E0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *char v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1E0E2E170(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *char v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1E0E2D664(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  sub_1E0E251B4();
  uint64_t v7 = v6;
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6, v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v9, v12);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v17 = MEMORY[0x1F4188790](v13, v16);
  BOOL v19 = (char *)&v37 - v18;
  MEMORY[0x1F4188790](v17, v20);
  uint64_t v39 = (char *)&v37 - v21;
  uint64_t v22 = *v3;
  sub_1E0ECDA50();
  sub_1E0ECCF30();
  sub_1E0E2FC40();
  swift_bridgeObjectRetain();
  sub_1E0ECD060();
  uint64_t v40 = v7;
  uint64_t v45 = a2;
  sub_1E0ECD060();
  uint64_t v23 = sub_1E0ECDA70();
  uint64_t v24 = -1 << *(unsigned char *)(v22 + 32);
  unint64_t v25 = v23 & ~v24;
  uint64_t v44 = v22 + 56;
  if ((*(void *)(v22 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25))
  {
    uint64_t v37 = v3;
    uint64_t v38 = a1;
    uint64_t v41 = ~v24;
    uint64_t v42 = *(void *)(v42 + 72);
    uint64_t v43 = v22;
    do
    {
      unint64_t v26 = v42 * v25;
      sub_1E0E2FC74(*(void *)(v22 + 48) + v42 * v25, (uint64_t)v19, (uint64_t (*)(void))sub_1E0E251B4);
      sub_1E0E2FF84(&qword_1EAD6DE30, MEMORY[0x1E4F295A0]);
      uint64_t v27 = (uint64_t)v15;
      uint64_t v28 = (uint64_t)v11;
      uint64_t v29 = v45;
      char v30 = sub_1E0ECD100();
      sub_1E0E2FC74((uint64_t)v19, v27, (uint64_t (*)(void))sub_1E0E251B4);
      uint64_t v31 = v29;
      uint64_t v11 = (char *)v28;
      sub_1E0E2FC74(v31, v28, (uint64_t (*)(void))sub_1E0E251B4);
      if (v30)
      {
        char v32 = sub_1E0ECD100();
        sub_1E0E2FE4C(v28, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C(v27, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C((uint64_t)v19, (uint64_t (*)(void))sub_1E0E251B4);
        uint64_t v15 = (char *)v27;
        if (v32)
        {
          swift_bridgeObjectRelease();
          sub_1E0E2FE4C(v45, (uint64_t (*)(void))sub_1E0E251B4);
          sub_1E0E2FC74(*(void *)(*v37 + 48) + v26, v38, (uint64_t (*)(void))sub_1E0E251B4);
          return 0;
        }
      }
      else
      {
        sub_1E0E2FE4C(v28, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C(v27, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C((uint64_t)v19, (uint64_t (*)(void))sub_1E0E251B4);
        uint64_t v15 = (char *)v27;
      }
      unint64_t v25 = (v25 + 1) & v41;
      uint64_t v22 = v43;
    }
    while (((*(void *)(v44 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) != 0);
    swift_bridgeObjectRelease();
    char v3 = v37;
    a1 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = (uint64_t)v39;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v36 = v45;
  sub_1E0E2FC74(v45, v34, (uint64_t (*)(void))sub_1E0E251B4);
  uint64_t v46 = *v3;
  *char v3 = 0x8000000000000000;
  sub_1E0E2E30C(v34, v25, isUniquelyReferenced_nonNull_native);
  *char v3 = v46;
  swift_bridgeObjectRelease();
  sub_1E0E2FCDC(v36, a1, (uint64_t (*)(void))sub_1E0E251B4);
  return 1;
}

uint64_t sub_1E0E2DAB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1E0E2FBE0();
  uint64_t v3 = sub_1E0ECD7D0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1E0ECDA50();
      sub_1E0ECD220();
      uint64_t result = sub_1E0ECDA70();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1E0E2DD8C()
{
  uint64_t v1 = v0;
  sub_1E0E251B4();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1E0E2FD44();
  uint64_t v7 = sub_1E0ECD7D0();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v35 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    uint64_t v33 = v0;
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v34) {
          goto LABEL_33;
        }
        unint64_t v20 = v35[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v20 = v35[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v34) {
              goto LABEL_33;
            }
            unint64_t v20 = v35[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v34)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v33;
                uint64_t v32 = 1 << *(unsigned char *)(v6 + 32);
                if (v32 > 63) {
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v35 = -1 << v32;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v35[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v35[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = v6;
      uint64_t v23 = *(void *)(v6 + 48);
      uint64_t v24 = *(void *)(v36 + 72);
      sub_1E0E2FCDC(v23 + v24 * v18, (uint64_t)v5, (uint64_t (*)(void))sub_1E0E251B4);
      sub_1E0ECDA50();
      sub_1E0ECCF30();
      sub_1E0E2FC40();
      sub_1E0ECD060();
      sub_1E0ECD060();
      uint64_t result = sub_1E0ECDA70();
      uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_1E0E2FCDC((uint64_t)v5, *(void *)(v8 + 48) + v16 * v24, (uint64_t (*)(void))sub_1E0E251B4);
      ++*(void *)(v8 + 16);
      uint64_t v6 = v22;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

uint64_t sub_1E0E2E170(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1E0E2DAB0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1E0E2E6B8();
      goto LABEL_22;
    }
    sub_1E0E2EAC4();
  }
  uint64_t v11 = *v4;
  sub_1E0ECDA50();
  sub_1E0ECD220();
  uint64_t result = sub_1E0ECDA70();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    int64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1E0ECD9E0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1E0ECDA20();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1E0ECD9E0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  uint64_t *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1E0E2E30C(uint64_t a1, unint64_t a2, char a3)
{
  sub_1E0E251B4();
  uint64_t v36 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7, v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v10, v13);
  BOOL v16 = (char *)&v33 - v15;
  MEMORY[0x1F4188790](v14, v17);
  int64_t v19 = (char *)&v33 - v18;
  unint64_t v20 = *(void *)(*v3 + 16);
  unint64_t v21 = *(void *)(*v3 + 24);
  uint64_t v34 = v8;
  uint64_t v35 = v3;
  if (v21 > v20 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    sub_1E0E2DD8C();
  }
  else
  {
    if (v21 > v20)
    {
      sub_1E0E2E868();
      goto LABEL_15;
    }
    sub_1E0E2ED70();
  }
  uint64_t v22 = *v3;
  sub_1E0ECDA50();
  sub_1E0ECCF30();
  sub_1E0E2FC40();
  sub_1E0ECD060();
  sub_1E0ECD060();
  uint64_t v23 = sub_1E0ECDA70();
  uint64_t v24 = -1 << *(unsigned char *)(v22 + 32);
  a2 = v23 & ~v24;
  uint64_t v38 = v22 + 56;
  uint64_t v39 = v22;
  if ((*(void *)(v22 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v37 = ~v24;
    uint64_t v25 = *(void *)(v8 + 72);
    do
    {
      sub_1E0E2FC74(*(void *)(v39 + 48) + v25 * a2, (uint64_t)v19, (uint64_t (*)(void))sub_1E0E251B4);
      sub_1E0E2FF84(&qword_1EAD6DE30, MEMORY[0x1E4F295A0]);
      char v26 = sub_1E0ECD100();
      sub_1E0E2FC74((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))sub_1E0E251B4);
      sub_1E0E2FC74(a1, (uint64_t)v12, (uint64_t (*)(void))sub_1E0E251B4);
      if (v26)
      {
        char v27 = sub_1E0ECD100();
        sub_1E0E2FE4C((uint64_t)v12, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C((uint64_t)v16, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C((uint64_t)v19, (uint64_t (*)(void))sub_1E0E251B4);
        if (v27)
        {
          sub_1E0ECDA20();
          __break(1u);
          break;
        }
      }
      else
      {
        sub_1E0E2FE4C((uint64_t)v12, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C((uint64_t)v16, (uint64_t (*)(void))sub_1E0E251B4);
        sub_1E0E2FE4C((uint64_t)v19, (uint64_t (*)(void))sub_1E0E251B4);
      }
      a2 = (a2 + 1) & v37;
    }
    while (((*(void *)(v38 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  uint64_t v28 = *v35;
  *(void *)(*v35 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1E0E2FCDC(a1, *(void *)(v28 + 48) + *(void *)(v34 + 72) * a2, (uint64_t (*)(void))sub_1E0E251B4);
  uint64_t v30 = *(void *)(v28 + 16);
  BOOL v31 = __OFADD__(v30, 1);
  uint64_t v32 = v30 + 1;
  if (v31) {
    __break(1u);
  }
  else {
    *(void *)(v28 + 16) = v32;
  }
  return result;
}

void *sub_1E0E2E6B8()
{
  uint64_t v1 = v0;
  sub_1E0E2FBE0();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1E0ECD7C0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1E0E2E868()
{
  uint64_t v1 = v0;
  sub_1E0E251B4();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E2FD44();
  uint64_t v7 = *v0;
  uint64_t v8 = sub_1E0ECD7C0();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v14);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v3 + 72) * v20;
    sub_1E0E2FC74(*(void *)(v7 + 48) + v21, (uint64_t)v6, (uint64_t (*)(void))sub_1E0E251B4);
    uint64_t result = (void *)sub_1E0E2FCDC((uint64_t)v6, *(void *)(v9 + 48) + v21, (uint64_t (*)(void))sub_1E0E251B4);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v18) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v11 + 8 * v24);
  if (v23)
  {
    int64_t v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1E0E2EAC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1E0E2FBE0();
  uint64_t v3 = sub_1E0ECD7D0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1E0ECDA50();
    swift_bridgeObjectRetain();
    sub_1E0ECD220();
    uint64_t result = sub_1E0ECDA70();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1E0E2ED70()
{
  uint64_t v1 = v0;
  sub_1E0E251B4();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1E0E2FD44();
  uint64_t v7 = sub_1E0ECD7D0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v30 = v0;
  uint64_t v31 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v32 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v32) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v32) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v31 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v31 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v33 + 72);
    sub_1E0E2FC74(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, (uint64_t (*)(void))sub_1E0E251B4);
    sub_1E0ECDA50();
    sub_1E0ECCF30();
    sub_1E0E2FC40();
    sub_1E0ECD060();
    sub_1E0ECD060();
    uint64_t result = sub_1E0ECDA70();
    uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_1E0E2FCDC((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, (uint64_t (*)(void))sub_1E0E251B4);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1E0E2F114@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1E0ECC4B0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1E0E2F144()
{
  return sub_1E0ECC4C0();
}

uint64_t sub_1E0E2F16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    sub_1E0DEEAA4(0, v3, 0);
    uint64_t v4 = v16;
    uint64_t v7 = (uint64_t *)(a1 + 40);
    uint64_t v8 = a2;
    do
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      unint64_t v11 = *(void *)(v16 + 16);
      unint64_t v12 = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11 >= v12 >> 1)
      {
        sub_1E0DEEAA4(v12 > 1, v11 + 1, 1);
        uint64_t v8 = a2;
      }
      v7 += 2;
      *(void *)(v16 + 16) = v11 + 1;
      uint64_t v13 = (void *)(v16 + 32 * v11);
      void v13[4] = v8;
      v13[5] = a3;
      void v13[6] = v10;
      v13[7] = v9;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1E0E2F264(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 40;
  uint64_t v4 = -(uint64_t)v1;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v15 = result + 40;
  unint64_t v16 = *(void *)(result + 16);
  do
  {
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *(i - 1);
      uint64_t v9 = *i;
      swift_bridgeObjectRetain_n();
      char v11 = sub_1E0E2D4B4(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if (v11) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1) {
        return v5;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = v5;
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1E0DEE988(0, *(void *)(v5 + 16) + 1, 1);
      uint64_t v5 = v18;
    }
    unint64_t v13 = *(void *)(v5 + 16);
    unint64_t v12 = *(void *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      uint64_t result = sub_1E0DEE988(v12 > 1, v13 + 1, 1);
      uint64_t v5 = v18;
    }
    *(void *)(v5 + 16) = v13 + 1;
    uint64_t v14 = v5 + 16 * v13;
    *(void *)(v14 + 32) = v10;
    *(void *)(v14 + 40) = v9;
    uint64_t v3 = v15;
    unint64_t v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

void sub_1E0E2F3D0()
{
  if (!qword_1EAD6E6D8)
  {
    sub_1E0E2BE68();
    sub_1E0DF8C7C();
    unint64_t v0 = sub_1E0ECC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E6D8);
    }
  }
}

uint64_t sub_1E0E2F43C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1E0E2B0F0(a1, a2);
}

uint64_t sub_1E0E2F458()
{
  uint64_t v1 = (int *)(type metadata accessor for AccessoryRectangularTitleView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[9];
  sub_1E0E2A70C(0, &qword_1EB584F70, MEMORY[0x1E4F46AE8], MEMORY[0x1E4F3C648]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1E0ECCF80();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t sub_1E0E2F5AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryRectangularTitleView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_1E0E2AEE4(a1, v6, a2);
}

unint64_t sub_1E0E2F62C()
{
  unint64_t result = qword_1EAD6E6E0;
  if (!qword_1EAD6E6E0)
  {
    sub_1E0E2BF28();
    sub_1E0E2F6A4();
    sub_1E0E2F7AC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E6E0);
  }
  return result;
}

unint64_t sub_1E0E2F6A4()
{
  unint64_t result = qword_1EAD6E6E8;
  if (!qword_1EAD6E6E8)
  {
    sub_1E0E2BFE4(255, &qword_1EAD6E680, (void (*)(uint64_t))sub_1E0E2C058, (void (*)(uint64_t))sub_1E0E117D4);
    sub_1E0E2FF84(&qword_1EAD6E6F0, (void (*)(uint64_t))sub_1E0E2C058);
    sub_1E0E2FF84(&qword_1EB5850F8, (void (*)(uint64_t))sub_1E0E117D4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E6E8);
  }
  return result;
}

unint64_t sub_1E0E2F7AC()
{
  unint64_t result = qword_1EAD6E6F8;
  if (!qword_1EAD6E6F8)
  {
    sub_1E0E2C358(255, &qword_1EAD6E008, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E6F8);
  }
  return result;
}

void sub_1E0E2F828()
{
  if (!qword_1EAD6E700)
  {
    sub_1E0E2A70C(255, &qword_1EAD6E690, (uint64_t (*)(uint64_t))sub_1E0E2C0EC, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1E0ECC380();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E700);
    }
  }
}

uint64_t sub_1E0E2F8C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1E0ECC580();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1E0E2F8F4()
{
  return sub_1E0ECC590();
}

uint64_t sub_1E0E2F924@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1E0ECC4B0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1E0E2F954()
{
  return sub_1E0ECC4C0();
}

uint64_t sub_1E0E2F97C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  sub_1E0E2BFE4(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1E0E2F9EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  sub_1E0E2BFE4(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_1E0E2FA48()
{
  unint64_t result = qword_1EAD6E708;
  if (!qword_1EAD6E708)
  {
    sub_1E0E2C1F4();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E708);
  }
  return result;
}

uint64_t sub_1E0E2FAF0(uint64_t a1, uint64_t a2)
{
  sub_1E0E2BFE4(0, &qword_1EAD6E6A8, (void (*)(uint64_t))sub_1E0E2C1F4, MEMORY[0x1E4F3DF60]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E0E2FB84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_1E0E2A70C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_1E0E2FBE0()
{
  if (!qword_1EAD6E710)
  {
    unint64_t v0 = sub_1E0ECD7F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E710);
    }
  }
}

uint64_t sub_1E0E2FC40()
{
  return sub_1E0E2FF84(&qword_1EAD6E540, MEMORY[0x1E4F295A0]);
}

uint64_t sub_1E0E2FC74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1E0E2FCDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1E0E2FD44()
{
  if (!qword_1EAD6E718)
  {
    sub_1E0E251B4();
    sub_1E0E30074(&qword_1EAD6E720, (void (*)(uint64_t))sub_1E0E251B4, (void (*)(void))sub_1E0E2FC40);
    unint64_t v0 = sub_1E0ECD7F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E718);
    }
  }
}

uint64_t sub_1E0E2FDF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1E0E2FE20(uint64_t a1)
{
  return a1;
}

uint64_t sub_1E0E2FE4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1E0E2FEAC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1E0E2A70C(0, a3, a4, MEMORY[0x1E4F3C648]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

ValueMetadata *type metadata accessor for AccessoryRectangularTitleView.TitleDetail()
{
  return &type metadata for AccessoryRectangularTitleView.TitleDetail;
}

uint64_t sub_1E0E2FF3C()
{
  return sub_1E0E2FF84(&qword_1EAD6E740, (void (*)(uint64_t))sub_1E0E2FFCC);
}

uint64_t sub_1E0E2FF84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1E0E2FFCC()
{
  if (!qword_1EAD6E748)
  {
    sub_1E0E2BE68();
    sub_1E0E30074(&qword_1EAD6E750, (void (*)(uint64_t))sub_1E0E2BE68, (void (*)(void))sub_1E0E2F62C);
    unint64_t v0 = sub_1E0ECC310();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E748);
    }
  }
}

uint64_t sub_1E0E30074(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1E0E300E8()
{
  unint64_t result = qword_1EAD6E758;
  if (!qword_1EAD6E758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E758);
  }
  return result;
}

uint64_t sub_1E0E30140()
{
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >= 3)
  {
    type metadata accessor for HKAudiogramEar(0);
    uint64_t result = sub_1E0ECDA00();
    __break(1u);
  }
  else
  {
    id v2 = objc_msgSend(self, *off_1E6D57F68[v1]);
    id v3 = objc_msgSend(self, sel_strokeStyleWithColor_lineWidth_, v2, 2.0);

    objc_msgSend(v3, sel_setDashStyle_, 0);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_1E0E30208()
{
  id v1 = objc_msgSend(objc_allocWithZone((Class)HKLineSeriesPresentationStyle), sel_init);
  id v2 = (void *)sub_1E0E30140();
  objc_msgSend(v1, sel_setStrokeStyle_, v2);

  unint64_t v3 = *(void *)(v0 + 16);
  if (v3 >= 3)
  {
    type metadata accessor for HKAudiogramEar(0);
    uint64_t result = sub_1E0ECDA00();
    __break(1u);
  }
  else
  {
    id v4 = objc_msgSend(self, *off_1E6D57F80[v3]);
    id v5 = objc_msgSend(objc_allocWithZone((Class)HKLineSeriesPointMarkerStyle), sel_initWithColor_radius_style_, v4, 1, 4.0);

    objc_msgSend(v1, sel_setPointMarkerStyle_, v5);
    return (uint64_t)v1;
  }
  return result;
}

uint64_t sub_1E0E30314()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudiogramLongitudinalLineSeriesPresentationStyle()
{
  return self;
}

uint64_t FeatureRegulatoryInfoView.init(infoProvider:)@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_1E0E357CC(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = type metadata accessor for FeatureRegulatoryInfoView(0);
  unint64_t v3 = (uint64_t *)((char *)a1 + *(int *)(v2 + 24));
  uint64_t v8 = sub_1E0ECD1D0();
  uint64_t v9 = v4;
  sub_1E0ECD250();
  *unint64_t v3 = v8;
  v3[1] = v9;
  id v5 = (uint64_t *)((char *)a1 + *(int *)(v2 + 20));
  type metadata accessor for FeatureRegulatoryInfoProvider();
  sub_1E0E35BB4(&qword_1EAD6E760, (void (*)(uint64_t))type metadata accessor for FeatureRegulatoryInfoProvider);
  uint64_t result = sub_1E0ECC3C0();
  *id v5 = result;
  v5[1] = v7;
  return result;
}

uint64_t FeatureRegulatoryInfoView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v3 = sub_1E0ECC850();
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1E0ECC7A0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35820();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v14);
  unint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E36010();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  uint64_t v38 = v18;
  MEMORY[0x1F4188790](v17, v19);
  int64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E360E4();
  uint64_t v42 = *(void *)(v22 - 8);
  uint64_t v43 = v22;
  MEMORY[0x1F4188790](v22, v23);
  unint64_t v25 = (char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v2;
  sub_1E0E39FBC(0, &qword_1EAD6E770, (uint64_t (*)(uint64_t))sub_1E0E358D0, MEMORY[0x1E4F3F108]);
  sub_1E0E35F88();
  sub_1E0ECCA50();
  sub_1E0ECC790();
  uint64_t v26 = sub_1E0E35BB4(&qword_1EAD6E820, (void (*)(uint64_t))sub_1E0E35820);
  uint64_t v27 = MEMORY[0x1E4F3D8F0];
  sub_1E0ECCBF0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v28 = v37;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v29 = v39;
  sub_1E0ECC840();
  uint64_t v48 = v12;
  unint64_t v49 = v6;
  uint64_t v50 = v26;
  uint64_t v51 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_1E0ECCB80();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v28);
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  sub_1E0ECD800();
  swift_bridgeObjectRelease();
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v31 = (id)qword_1EAD740B8;
  uint64_t v32 = sub_1E0ECB680();
  unint64_t v34 = v33;

  uint64_t v48 = v32;
  unint64_t v49 = v34;
  uint64_t v46 = v28;
  uint64_t v47 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1E0E0F184();
  uint64_t v35 = v43;
  sub_1E0ECCB60();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v25, v35);
}

uint64_t sub_1E0E309A8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v154 = a1;
  v165 = a2;
  sub_1E0E35F5C(0);
  uint64_t v152 = v2;
  uint64_t v151 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v150 = (char *)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35C24(0, &qword_1EAD6E800, sub_1E0E35F5C);
  v164 = v5;
  v163 = (void (*)(uint64_t))*((void *)v5 - 1);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v149 = (char *)&v144 - v7;
  sub_1E0E36384(0);
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v160 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = sub_1E0ECB810();
  uint64_t v161 = *(void *)(v162 - 8);
  MEMORY[0x1F4188790](v162, v11);
  uint64_t v148 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35EDC(0);
  uint64_t v15 = MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v185 = (uint64_t)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v180 = (uint64_t)&v144 - v18;
  uint64_t v19 = sub_1E0ECB640();
  MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v146 = (uint64_t)&v144 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E362C8(0);
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v157 = (uint64_t)&v144 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x1F4188790](v156, v25);
  uint64_t v147 = (uint64_t)&v144 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35DF8();
  uint64_t v29 = MEMORY[0x1F4188790](v27 - 8, v28);
  uint64_t v179 = (uint64_t)&v144 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29, v31);
  uint64_t v183 = (uint64_t)&v144 - v32;
  sub_1E0E35A1C(0, &qword_1EAD6E790, sub_1E0E35A88);
  uint64_t v186 = v33;
  uint64_t v184 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33, v34);
  v182 = (char *)&v144 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v35, v37);
  v153 = (char *)&v144 - v39;
  MEMORY[0x1F4188790](v38, v40);
  v181 = (char *)&v144 - v41;
  uint64_t v158 = type metadata accessor for FeatureRegulatoryInfo(0);
  uint64_t v43 = MEMORY[0x1F4188790](v158, v42);
  v159 = (char *)&v144 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v43, v45);
  uint64_t v48 = (char *)&v144 - v47;
  MEMORY[0x1F4188790](v46, v49);
  uint64_t v51 = (uint64_t *)((char *)&v144 - v50);
  sub_1E0E35A1C(0, &qword_1EAD6E780, (void (*)(uint64_t))sub_1E0E2C194);
  uint64_t v53 = v52;
  uint64_t v54 = *(void *)(v52 - 8);
  uint64_t v56 = MEMORY[0x1F4188790](v52, v55);
  v176 = (char *)&v144 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = MEMORY[0x1F4188790](v56, v58);
  uint64_t v61 = (char *)&v144 - v60;
  MEMORY[0x1F4188790](v59, v62);
  uint64_t v64 = (char *)&v144 - v63;
  uint64_t v191 = 0;
  unint64_t v192 = 0xE000000000000000;
  sub_1E0ECD800();
  swift_bridgeObjectRelease();
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v65 = (id)qword_1EAD740B8;
  uint64_t v66 = sub_1E0ECB680();
  unint64_t v68 = v67;

  uint64_t v191 = v66;
  unint64_t v192 = v68;
  sub_1E0E0F184();
  uint64_t v191 = sub_1E0ECCAF0();
  unint64_t v192 = v69;
  char v193 = v70 & 1;
  uint64_t v194 = v71;
  MEMORY[0x1F4188790](v191, v69);
  uint64_t v72 = v154;
  sub_1E0E2C194();
  sub_1E0E35D50();
  sub_1E0ECCDE0();
  uint64_t v177 = v54;
  uint64_t v178 = v53;
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
  v175 = v64;
  v73(v64, v61, v53);
  uint64_t v74 = type metadata accessor for FeatureRegulatoryInfoView(0);
  uint64_t v166 = v72 + *(int *)(v74 + 20);
  char v75 = *(void **)(v166 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v76 = v75;
  sub_1E0ECC210();

  swift_release();
  swift_release();
  uint64_t v77 = v51[4];
  uint64_t v78 = v51[5];
  uint64_t v80 = (void *)v51[6];
  uint64_t v79 = v51[7];
  uint64_t v82 = v51[8];
  uint64_t v81 = (void *)v51[9];
  sub_1E0E361F0(v77, v78, v80, v79, v82, v81);
  sub_1E0E36440((uint64_t)v51, type metadata accessor for FeatureRegulatoryInfo);
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  char v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  char v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  if (v80 != (void *)1)
  {
    uint64_t v90 = *(void *)(v72 + *(int *)(v74 + 24));
    uint64_t v91 = swift_bridgeObjectRetain();
    uint64_t v84 = v77;
    uint64_t v85 = v78;
    char v86 = v80;
    uint64_t v87 = v79;
    uint64_t v88 = v82;
    char v89 = v81;
  }
  uint64_t v145 = v74;
  v167 = v89;
  uint64_t v168 = v88;
  uint64_t v169 = v87;
  v170 = v86;
  uint64_t v171 = v85;
  uint64_t v172 = v84;
  uint64_t v173 = v91;
  uint64_t v174 = v90;
  MEMORY[0x1F4188790](v91, v83);
  sub_1E0E35A88(0);
  sub_1E0E35BB4(&qword_1EAD6E890, sub_1E0E35A88);
  uint64_t v92 = v153;
  sub_1E0ECCDF0();
  (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v181, v92, v186);
  uint64_t v93 = *(void **)(v166 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v94 = v93;
  sub_1E0ECC210();

  swift_release();
  swift_release();
  uint64_t v95 = v158;
  uint64_t v96 = v157;
  sub_1E0E3631C((uint64_t)&v48[*(int *)(v158 + 32)], v157, (uint64_t (*)(void))sub_1E0E362C8);
  sub_1E0E36440((uint64_t)v48, type metadata accessor for FeatureRegulatoryInfo);
  uint64_t v97 = v72;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v96, 1, v156) == 1)
  {
    sub_1E0E36440(v96, (uint64_t (*)(void))sub_1E0E362C8);
    sub_1E0E35A1C(0, &qword_1EAD6E7E8, (void (*)(uint64_t))sub_1E0E35E7C);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v183, 1, 1, v98);
  }
  else
  {
    uint64_t v99 = v147;
    sub_1E0E3A020(v96, v147, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E329F8(v146);
    uint64_t v187 = sub_1E0ECCAE0();
    uint64_t v188 = v100;
    char v189 = v101 & 1;
    uint64_t v190 = v102;
    MEMORY[0x1F4188790](v187, v100);
    sub_1E0E35E7C();
    sub_1E0E35BB4(&qword_1EAD6E898, (void (*)(uint64_t))sub_1E0E35E7C);
    uint64_t v103 = v183;
    sub_1E0ECCE00();
    sub_1E0E35A1C(0, &qword_1EAD6E7E8, (void (*)(uint64_t))sub_1E0E35E7C);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v103, 0, 1, v104);
    sub_1E0E36440(v99, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  }
  uint64_t v105 = v180;
  uint64_t v106 = v162;
  uint64_t v107 = v161;
  uint64_t v108 = (uint64_t)v160;
  uint64_t v109 = *(void **)(v166 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v110 = v109;
  uint64_t v111 = (uint64_t)v159;
  sub_1E0ECC210();

  swift_release();
  swift_release();
  sub_1E0E3631C(v111 + *(int *)(v95 + 36), v108, (uint64_t (*)(void))sub_1E0E36384);
  sub_1E0E36440(v111, type metadata accessor for FeatureRegulatoryInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v108, 1, v106) == 1)
  {
    sub_1E0E36440(v108, (uint64_t (*)(void))sub_1E0E36384);
    (*((void (**)(uint64_t, uint64_t, uint64_t, void (*)()))v163 + 7))(v105, 1, 1, v164);
  }
  else
  {
    uint64_t v112 = v148;
    uint64_t v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v107 + 32))(v148, v108, v106);
    MEMORY[0x1F4188790](v113, v114);
    sub_1E0E35E7C();
    sub_1E0E35BB4(&qword_1EAD6E898, (void (*)(uint64_t))sub_1E0E35E7C);
    int v115 = v150;
    sub_1E0ECCDF0();
    uint64_t v116 = (uint64_t *)(v97 + *(int *)(v145 + 24));
    uint64_t v117 = v116[1];
    uint64_t v187 = *v116;
    uint64_t v188 = v117;
    swift_bridgeObjectRetain();
    sub_1E0ECD250();
    sub_1E0E39ADC();
    uint64_t v118 = (uint64_t)v149;
    uint64_t v119 = v152;
    sub_1E0ECCBA0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v115, v119);
    sub_1E0E3A088(v118, v105, &qword_1EAD6E800, sub_1E0E35F5C);
    (*((void (**)(uint64_t, void, uint64_t, void (*)()))v163 + 7))(v105, 0, 1, v164);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v112, v106);
  }
  uint64_t v120 = v178;
  uint64_t v121 = v176;
  uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v177 + 16);
  v122(v176, v175, v178);
  uint64_t v166 = *(void *)(v184 + 16);
  ((void (*)(char *, char *, uint64_t))v166)(v182, v181, v186);
  v164 = sub_1E0E35DF8;
  uint64_t v123 = v179;
  sub_1E0E3631C(v183, v179, (uint64_t (*)(void))sub_1E0E35DF8);
  v163 = sub_1E0E35EDC;
  sub_1E0E3631C(v105, v185, (uint64_t (*)(void))sub_1E0E35EDC);
  uint64_t v124 = v165;
  v122(v165, v121, v120);
  sub_1E0E358D0();
  uint64_t v126 = v125;
  id v127 = &v124[*(int *)(v125 + 48)];
  uint64_t v128 = v172;
  uint64_t v129 = v171;
  *(void *)id v127 = v172;
  *((void *)v127 + 1) = v129;
  uint64_t v130 = v170;
  uint64_t v131 = v169;
  *((void *)v127 + 2) = v170;
  *((void *)v127 + 3) = v131;
  uint64_t v132 = v168;
  uint64_t v133 = v167;
  *((void *)v127 + 4) = v168;
  *((void *)v127 + 5) = v133;
  uint64_t v134 = v173;
  *((void *)v127 + 6) = v174;
  *((void *)v127 + 7) = v134;
  ((void (*)(char *, char *, uint64_t))v166)(&v124[*(int *)(v125 + 64)], v182, v186);
  sub_1E0E3631C(v123, (uint64_t)&v124[*(int *)(v126 + 80)], (uint64_t (*)(void))v164);
  sub_1E0E3631C(v185, (uint64_t)&v124[*(int *)(v126 + 96)], (uint64_t (*)(void))v163);
  uint64_t v135 = v128;
  uint64_t v136 = v171;
  uint64_t v137 = v133;
  uint64_t v138 = v174;
  sub_1E0E39A0C(v135, v171, v130, v131, v132, v137, v174, v134);
  sub_1E0E36440(v180, (uint64_t (*)(void))sub_1E0E35EDC);
  sub_1E0E36440(v183, (uint64_t (*)(void))sub_1E0E35DF8);
  uint64_t v139 = *(void (**)(char *, uint64_t))(v184 + 8);
  uint64_t v140 = v186;
  v139(v181, v186);
  uint64_t v141 = v178;
  uint64_t v142 = *(void (**)(char *, uint64_t))(v177 + 8);
  v142(v175, v178);
  sub_1E0E36440(v185, (uint64_t (*)(void))sub_1E0E35EDC);
  sub_1E0E36440(v179, (uint64_t (*)(void))sub_1E0E35DF8);
  v139(v182, v140);
  sub_1E0E39A70(v172, v136, v170, v169, v168, v167, v138, v173);
  return ((uint64_t (*)(char *, uint64_t))v142)(v176, v141);
}

uint64_t sub_1E0E31C64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeatureRegulatoryInfo(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (void *)((char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for FeatureRegulatoryInfoView(0);
  uint64_t v7 = *(void **)(a1 + *(int *)(v6 + 20) + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v8 = v7;
  sub_1E0ECC210();

  swift_release();
  swift_release();
  uint64_t v10 = *v5;
  uint64_t v9 = v5[1];
  swift_bridgeObjectRetain();
  sub_1E0E36440((uint64_t)v5, type metadata accessor for FeatureRegulatoryInfo);
  uint64_t v20 = v10;
  uint64_t v21 = v9;
  sub_1E0E0F184();
  uint64_t v11 = sub_1E0ECCAF0();
  uint64_t v13 = v12;
  LOBYTE(v8) = v14 & 1;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  char v22 = v14 & 1;
  uint64_t v23 = v15;
  uint64_t v16 = (void *)(a1 + *(int *)(v6 + 24));
  uint64_t v17 = v16[1];
  v19[0] = *v16;
  v19[1] = v17;
  swift_bridgeObjectRetain();
  sub_1E0ECD250();
  sub_1E0ECCBA0();
  swift_bridgeObjectRelease();
  sub_1E0DF8F74(v11, v13, (char)v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1E0E31E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = a2;
  sub_1E0E2C194();
  v93[2] = v3;
  MEMORY[0x1F4188790](v3, v4);
  v93[1] = (char *)v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35C90(0);
  uint64_t v97 = v6;
  uint64_t v96 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v95 = (char *)v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35C24(0, &qword_1EAD6E7C8, sub_1E0E35C90);
  uint64_t v106 = *(void *)(v9 - 8);
  uint64_t v107 = v9;
  MEMORY[0x1F4188790](v9, v10);
  id v94 = (char *)v93 - v11;
  sub_1E0E35BFC(0);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v108 = (uint64_t)v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v111 = (uint64_t)v93 - v17;
  sub_1E0E39F88(0);
  unint64_t v102 = v18;
  uint64_t v20 = MEMORY[0x1F4188790](v18, v19);
  uint64_t v101 = (uint64_t)v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v22);
  uint64_t v24 = (char *)v93 - v23;
  uint64_t v25 = type metadata accessor for FeatureRegulatoryInfo(0);
  MEMORY[0x1F4188790](v25 - 8, v26);
  uint64_t v28 = (char *)v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for InstructionsForUseWebViewContainer(0);
  MEMORY[0x1F4188790](v29, v30);
  uint64_t v32 = (char *)v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35B4C(0);
  uint64_t v103 = *(void *)(v33 - 8);
  uint64_t v104 = v33;
  MEMORY[0x1F4188790](v33, v34);
  uint64_t v36 = (char *)v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E35B2C(0);
  uint64_t v39 = MEMORY[0x1F4188790](v37 - 8, v38);
  id v110 = (char *)v93 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39, v41);
  uint64_t v105 = (uint64_t)v93 - v42;
  uint64_t v114 = 0;
  unint64_t v115 = 0xE000000000000000;
  sub_1E0ECD800();
  swift_bridgeObjectRelease();
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v43 = (id)qword_1EAD740B8;
  v93[0] = 0x80000001E0F29B10;
  uint64_t v44 = sub_1E0ECB680();
  unint64_t v46 = v45;

  uint64_t v114 = v44;
  unint64_t v115 = v46;
  uint64_t v47 = type metadata accessor for FeatureRegulatoryInfoView(0);
  uint64_t v100 = a1 + *(int *)(v47 + 20);
  uint64_t v48 = *(void **)(v100 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v49 = v48;
  uint64_t v98 = a1;
  id v50 = v49;
  sub_1E0ECC210();

  swift_release();
  swift_release();
  uint64_t v51 = *((void *)v28 + 2);
  uint64_t v52 = *((void *)v28 + 3);
  swift_bridgeObjectRetain();
  uint64_t v99 = type metadata accessor for FeatureRegulatoryInfo;
  sub_1E0E36440((uint64_t)v28, type metadata accessor for FeatureRegulatoryInfo);
  LOBYTE(v112) = 0;
  sub_1E0ECCCF0();
  uint64_t v53 = v119;
  *uint64_t v32 = v118;
  *((void *)v32 + 1) = v53;
  uint64_t v54 = type metadata accessor for ErrorDetails(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v24, 1, 1, v54);
  sub_1E0E3631C((uint64_t)v24, v101, (uint64_t (*)(void))sub_1E0E39F88);
  sub_1E0ECCCF0();
  sub_1E0E36440((uint64_t)v24, (uint64_t (*)(void))sub_1E0E39F88);
  uint64_t v55 = &v32[*(int *)(v29 + 24)];
  *(void *)uint64_t v55 = v51;
  *((void *)v55 + 1) = v52;
  sub_1E0E35B80();
  unint64_t v56 = sub_1E0E0F184();
  sub_1E0ECC3A0();
  uint64_t v57 = (uint64_t *)(v98 + *(int *)(v47 + 24));
  unint64_t v58 = v57[1];
  uint64_t v114 = *v57;
  unint64_t v115 = v58;
  swift_bridgeObjectRetain();
  sub_1E0ECD250();
  sub_1E0E35BB4(&qword_1EAD6E8B8, sub_1E0E35B4C);
  uint64_t v59 = (uint64_t)v110;
  uint64_t v60 = v104;
  sub_1E0ECCBA0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v36, v60);
  uint64_t v61 = v105;
  sub_1E0E3A020(v59, v105, (uint64_t (*)(void))sub_1E0E35B2C);
  uint64_t v62 = *(void **)(v100 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v63 = v62;
  sub_1E0ECC210();

  swift_release();
  swift_release();
  LODWORD(v60) = v28[80];
  sub_1E0E36440((uint64_t)v28, v99);
  uint64_t v64 = 1;
  uint64_t v65 = v59;
  if (v60 == 1)
  {
    uint64_t v114 = 0;
    unint64_t v115 = 0xE000000000000000;
    sub_1E0ECD800();
    swift_bridgeObjectRelease();
    unint64_t v102 = v56;
    id v66 = (id)qword_1EAD740B8;
    uint64_t v67 = sub_1E0ECB680();
    uint64_t v69 = v68;

    uint64_t v118 = v67;
    uint64_t v119 = v69;
    uint64_t v114 = 0;
    unint64_t v115 = 0xE000000000000000;
    sub_1E0ECD800();
    swift_bridgeObjectRelease();
    id v70 = (id)qword_1EAD740B8;
    uint64_t v71 = sub_1E0ECB680();
    unint64_t v73 = v72;

    uint64_t v114 = v71;
    unint64_t v115 = v73;
    uint64_t v74 = sub_1E0ECCAF0();
    uint64_t v76 = v75;
    uint64_t v114 = v74;
    unint64_t v115 = v75;
    uint64_t v77 = v61;
    char v79 = v78 & 1;
    char v116 = v78 & 1;
    uint64_t v117 = v80;
    uint64_t v112 = 0;
    unint64_t v113 = 0xE000000000000000;
    sub_1E0ECD800();
    uint64_t v82 = *v57;
    unint64_t v81 = v57[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v112 = v82;
    unint64_t v113 = v81;
    sub_1E0ECD250();
    sub_1E0ECCBA0();
    swift_bridgeObjectRelease();
    uint64_t v83 = v74;
    uint64_t v65 = (uint64_t)v110;
    char v84 = v79;
    uint64_t v61 = v77;
    sub_1E0DF8F74(v83, v76, v84);
    swift_bridgeObjectRelease();
    sub_1E0E35D50();
    uint64_t v85 = v95;
    sub_1E0ECC3A0();
    uint64_t v114 = 0;
    unint64_t v115 = 0xE000000000000000;
    sub_1E0ECD800();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v114 = v82;
    unint64_t v115 = v81;
    sub_1E0ECD250();
    sub_1E0E35BB4(&qword_1EAD6E8C0, sub_1E0E35C90);
    uint64_t v86 = (uint64_t)v94;
    uint64_t v87 = v97;
    sub_1E0ECCBA0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v85, v87);
    sub_1E0E3A088(v86, v111, &qword_1EAD6E7C8, sub_1E0E35C90);
    uint64_t v64 = 0;
  }
  uint64_t v88 = v111;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v111, v64, 1, v107);
  sub_1E0E3631C(v61, v65, (uint64_t (*)(void))sub_1E0E35B2C);
  uint64_t v89 = v108;
  sub_1E0E3631C(v88, v108, (uint64_t (*)(void))sub_1E0E35BFC);
  uint64_t v90 = v109;
  sub_1E0E3631C(v65, v109, (uint64_t (*)(void))sub_1E0E35B2C);
  sub_1E0E35ABC();
  sub_1E0E3631C(v89, v90 + *(int *)(v91 + 48), (uint64_t (*)(void))sub_1E0E35BFC);
  sub_1E0E36440(v88, (uint64_t (*)(void))sub_1E0E35BFC);
  sub_1E0E36440(v61, (uint64_t (*)(void))sub_1E0E35B2C);
  sub_1E0E36440(v89, (uint64_t (*)(void))sub_1E0E35BFC);
  return sub_1E0E36440(v65, (uint64_t (*)(void))sub_1E0E35B2C);
}

uint64_t sub_1E0E329F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v78 = a1;
  sub_1E0E27124(0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  unint64_t v75 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E27158(0);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v76 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E0B978();
  uint64_t v77 = v9;
  uint64_t v74 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v14);
  uint64_t v16 = (char *)&v66 - v15;
  uint64_t v17 = sub_1E0ECB6F0();
  MEMORY[0x1F4188790](v17 - 8, v18);
  uint64_t v19 = sub_1E0ECB640();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19, v21);
  unint64_t v73 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v24);
  char v79 = (char *)&v66 - v25;
  sub_1E0E36384(0);
  uint64_t v28 = MEMORY[0x1F4188790](v26 - 8, v27);
  unint64_t v72 = (char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v32 = (char *)&v66 - v31;
  uint64_t v33 = sub_1E0ECB810();
  uint64_t v34 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33, v35);
  uint64_t v37 = (char *)&v66 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  sub_1E0E3631C(v2 + *(int *)(v38 + 28), (uint64_t)v32, (uint64_t (*)(void))sub_1E0E36384);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
  {
    sub_1E0E36440((uint64_t)v32, (uint64_t (*)(void))sub_1E0E36384);
    swift_bridgeObjectRetain();
    sub_1E0ECB6E0();
    return sub_1E0ECB650();
  }
  else
  {
    id v66 = v16;
    uint64_t v67 = v13;
    uint64_t v70 = v20;
    uint64_t v71 = v19;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    uint64_t v69 = v37;
    v40(v37, v32, v33);
    uint64_t v80 = 0;
    unint64_t v81 = 0xE000000000000000;
    sub_1E0ECD800();
    swift_bridgeObjectRelease();
    if (qword_1EAD69948 != -1) {
      swift_once();
    }
    id v41 = (id)qword_1EAD740B8;
    uint64_t v68 = sub_1E0ECB680();

    uint64_t v80 = 0;
    unint64_t v81 = 0xE000000000000000;
    sub_1E0ECD800();
    swift_bridgeObjectRelease();
    id v42 = (id)qword_1EAD740B8;
    uint64_t v43 = sub_1E0ECB680();
    unint64_t v45 = v44;

    sub_1E0E39FBC(0, (unint64_t *)&qword_1EAD69A30, (uint64_t (*)(uint64_t))sub_1E0E1AB68, MEMORY[0x1E4FBBE00]);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_1E0F06210;
    uint64_t v47 = *(void *)(v2 + 16);
    uint64_t v48 = *(void *)(v2 + 24);
    uint64_t v49 = MEMORY[0x1E4FBB1A0];
    *(void *)(v46 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v50 = sub_1E0E1ABC0();
    *(void *)(v46 + 32) = v47;
    *(void *)(v46 + 40) = v48;
    *(void *)(v46 + 96) = v49;
    *(void *)(v46 + 104) = v50;
    *(void *)(v46 + 64) = v50;
    *(void *)(v46 + 72) = v43;
    *(void *)(v46 + 80) = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1E0ECD1E0();
    swift_bridgeObjectRelease();
    sub_1E0ECB6E0();
    uint64_t v51 = v79;
    sub_1E0ECB650();
    uint64_t v52 = v70;
    uint64_t v53 = v73;
    uint64_t v54 = v51;
    uint64_t v55 = v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v73, v54, v71);
    uint64_t v80 = v43;
    unint64_t v81 = v45;
    uint64_t v56 = sub_1E0ECBA30();
    uint64_t v57 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v75, 1, 1, v56);
    sub_1E0E35BB4(&qword_1EAD6E550, MEMORY[0x1E4F273A8]);
    sub_1E0E0F184();
    uint64_t v58 = (uint64_t)v76;
    sub_1E0ECB780();
    sub_1E0E36440(v57, (uint64_t (*)(void))sub_1E0E27124);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v55);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v58, 1, v77) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v69, v33);
      sub_1E0E36440(v58, (uint64_t (*)(void))sub_1E0E27158);
    }
    else
    {
      uint64_t v59 = (uint64_t)v66;
      sub_1E0E3A020(v58, (uint64_t)v66, (uint64_t (*)(void))sub_1E0E0B978);
      uint64_t v60 = (uint64_t)v67;
      sub_1E0E3631C(v59, (uint64_t)v67, (uint64_t (*)(void))sub_1E0E0B978);
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath, v62);
      uint64_t v76 = (char *)swift_getKeyPath();
      id v63 = v72;
      uint64_t v64 = v69;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v72, v69, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v63, 0, 1, v33);
      sub_1E0E35BB4(&qword_1EAD69A88, (void (*)(uint64_t))sub_1E0E0B978);
      uint64_t v65 = (void (*)(uint64_t *, void))sub_1E0ECB660();
      sub_1E0E39BB0();
      sub_1E0ECB700();
      v65(&v80, 0);
      sub_1E0E36440(v60, (uint64_t (*)(void))sub_1E0E0B978);
      sub_1E0E36440(v59, (uint64_t (*)(void))sub_1E0E0B978);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v64, v33);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v78, v79, v55);
  }
}

uint64_t sub_1E0E33328()
{
  return sub_1E0ECCD50();
}

uint64_t sub_1E0E333A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v3 = sub_1E0ECB810();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v7 = type metadata accessor for FeatureRegulatoryInfoView(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8, v10);
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  sub_1E0ECD800();
  swift_bridgeObjectRelease();
  if (qword_1EAD69948 != -1) {
    swift_once();
  }
  id v11 = (id)qword_1EAD740B8;
  uint64_t v12 = sub_1E0ECB680();
  unint64_t v14 = v13;

  uint64_t v23 = v12;
  unint64_t v24 = v14;
  sub_1E0E3631C(v20, (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FeatureRegulatoryInfoView);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v3);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v16 = (v9 + *(unsigned __int8 *)(v4 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1E0E3A020((uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v15, type metadata accessor for FeatureRegulatoryInfoView);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v17 + v16, (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_1E0E0F184();
  return sub_1E0ECCD50();
}

uint64_t sub_1E0E3367C()
{
  uint64_t v0 = sub_1E0ECC350();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E2CE60((uint64_t)v4);
  sub_1E0ECC340();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t FeatureRegulatoryInfo.productDisplayName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeatureRegulatoryInfo.productDisplayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.productDisplayName.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.IFUURLProductName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeatureRegulatoryInfo.IFUURLProductName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.IFUURLProductName.modify())()
{
  return nullsub_1;
}

void FeatureRegulatoryInfo.pairedDeviceAttributes.getter(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[5];
  uint64_t v4 = (void *)v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = (void *)v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = (uint64_t)v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = (uint64_t)v7;
  sub_1E0E361F0(v2, v3, v4, v5, v6, v7);
}

__n128 FeatureRegulatoryInfo.pairedDeviceAttributes.setter(long long *a1)
{
  __n128 v5 = (__n128)a1[1];
  long long v6 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  sub_1E0E3624C(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72));
  __n128 result = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(__n128 *)(v1 + 48) = v5;
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v3;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.pairedDeviceAttributes.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.showManufacturersAddress.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t FeatureRegulatoryInfo.showManufacturersAddress.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.showManufacturersAddress.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.reenableActionConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1E0E3631C(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(void))sub_1E0E362C8);
}

uint64_t FeatureRegulatoryInfo.reenableActionConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1E0E363B8(a1, v1 + *(int *)(v3 + 32), (uint64_t (*)(void))sub_1E0E362C8);
}

uint64_t (*FeatureRegulatoryInfo.reenableActionConfiguration.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.contactAppleSupportURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1E0E3631C(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(void))sub_1E0E36384);
}

uint64_t FeatureRegulatoryInfo.contactAppleSupportURL.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1E0E363B8(a1, v1 + *(int *)(v3 + 36), (uint64_t (*)(void))sub_1E0E36384);
}

uint64_t (*FeatureRegulatoryInfo.contactAppleSupportURL.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.init(productDisplayName:IFUURLProductName:pairedDeviceAttributes:showManufacturersAddress:reenableActionConfiguration:contactAppleSupportURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  long long v23 = a5[1];
  long long v24 = *a5;
  uint64_t v15 = *((void *)a5 + 4);
  uint64_t v16 = *((void *)a5 + 5);
  uint64_t v17 = type metadata accessor for FeatureRegulatoryInfo(0);
  uint64_t v18 = a9 + *(int *)(v17 + 32);
  uint64_t v19 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = a9 + *(int *)(v17 + 36);
  uint64_t v21 = sub_1E0ECB810();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(_OWORD *)(a9 + 32) = v24;
  *(_OWORD *)(a9 + 48) = v23;
  *(void *)(a9 + 64) = v15;
  *(void *)(a9 + 72) = v16;
  *(unsigned char *)(a9 + 80) = a6;
  sub_1E0E363B8(a7, v18, (uint64_t (*)(void))sub_1E0E362C8);
  return sub_1E0E363B8(a8, v20, (uint64_t (*)(void))sub_1E0E36384);
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.buttonTitle.modify())()
{
  return nullsub_1;
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.footerText.modify())()
{
  return nullsub_1;
}

uint64_t sub_1E0E33C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 32) = sub_1E0E399A4;
  *(void *)(a2 + 40) = v5;
  return result;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.action.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.action.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.learnMoreURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  return sub_1E0E3631C(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))sub_1E0E36384);
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.learnMoreURL.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  return sub_1E0E363B8(a1, v1 + *(int *)(v3 + 28), (uint64_t (*)(void))sub_1E0E36384);
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.learnMoreURL.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.requiresPairedDevice.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0)
                                     + 32));
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.requiresPairedDevice.setter(char a1)
{
  uint64_t result = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.requiresPairedDevice.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.init(buttonTitle:footerText:action:learnMoreURL:requiresPairedDevice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>)
{
  uint64_t v17 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v18 = (uint64_t)a9 + *(int *)(v17 + 28);
  uint64_t v19 = sub_1E0ECB810();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  uint64_t result = sub_1E0E363B8(a7, v18, (uint64_t (*)(void))sub_1E0E36384);
  *((unsigned char *)a9 + *(int *)(v17 + 32)) = a8;
  return result;
}

uint64_t sub_1E0E34004()
{
  return sub_1E0ECD100() & 1;
}

uint64_t FeatureRegulatoryInfo.isEquivalent(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v114 = sub_1E0ECB810();
  uint64_t v4 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114, v5);
  uint64_t v109 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E36384(0);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v110 = (uint64_t)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E36420(0);
  uint64_t v111 = v10;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v112 = (uint64_t)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for FeatureRegulatoryInfo(0);
  uint64_t v14 = MEMORY[0x1F4188790](v115, v13);
  uint64_t v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v14, v17);
  uint64_t v20 = (char *)&v102 - v19;
  uint64_t v22 = MEMORY[0x1F4188790](v18, v21);
  uint64_t v121 = (char *)&v102 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22, v24);
  uint64_t v122 = (char *)&v102 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25, v27);
  uint64_t v120 = (uint64_t)&v102 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28, v30);
  uint64_t v119 = (uint64_t)&v102 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31, v33);
  uint64_t v36 = (uint64_t *)((char *)&v102 - v35);
  uint64_t v38 = MEMORY[0x1F4188790](v34, v37);
  uint64_t v40 = (uint64_t *)((char *)&v102 - v39);
  uint64_t v42 = MEMORY[0x1F4188790](v38, v41);
  unint64_t v44 = (char *)&v102 - v43;
  MEMORY[0x1F4188790](v42, v45);
  uint64_t v47 = (char *)&v102 - v46;
  uint64_t v48 = v2[1];
  uint64_t v49 = a1[1];
  BOOL v50 = *v2 == *a1;
  uint64_t v113 = v4;
  if (v50 && v48 == v49)
  {
    sub_1E0E3631C((uint64_t)v2, (uint64_t)&v102 - v46, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v44, type metadata accessor for FeatureRegulatoryInfo);
  }
  else
  {
    char v51 = sub_1E0ECD9E0();
    sub_1E0E3631C((uint64_t)v2, (uint64_t)v47, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v44, type metadata accessor for FeatureRegulatoryInfo);
    if ((v51 & 1) == 0)
    {
      sub_1E0E36440((uint64_t)v47, type metadata accessor for FeatureRegulatoryInfo);
      sub_1E0E36440((uint64_t)v44, type metadata accessor for FeatureRegulatoryInfo);
      sub_1E0E3631C((uint64_t)v2, (uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
      sub_1E0E3631C((uint64_t)a1, (uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
      goto LABEL_17;
    }
  }
  if (*((void *)v47 + 2) == *((void *)v44 + 2) && *((void *)v47 + 3) == *((void *)v44 + 3))
  {
    sub_1E0E36440((uint64_t)v47, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E36440((uint64_t)v44, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)v2, (uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
    goto LABEL_10;
  }
  char v52 = sub_1E0ECD9E0();
  sub_1E0E36440((uint64_t)v47, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E36440((uint64_t)v44, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E3631C((uint64_t)v2, (uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E3631C((uint64_t)a1, (uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
  if ((v52 & 1) == 0)
  {
LABEL_17:
    sub_1E0E36440((uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E36440((uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
    uint64_t v75 = (uint64_t)v121;
    uint64_t v74 = (uint64_t)v122;
    uint64_t v72 = v119;
    uint64_t v73 = v120;
    goto LABEL_18;
  }
LABEL_10:
  char v116 = v2;
  uint64_t v117 = v16;
  uint64_t v118 = v20;
  uint64_t v54 = v40[4];
  uint64_t v53 = v40[5];
  uint64_t v56 = (void *)v40[6];
  uint64_t v55 = v40[7];
  uint64_t v58 = v40[8];
  uint64_t v57 = (void *)v40[9];
  uint64_t v60 = v36[4];
  uint64_t v59 = v36[5];
  uint64_t v62 = (void *)v36[6];
  uint64_t v61 = v36[7];
  uint64_t v64 = v36[8];
  id v63 = (void *)v36[9];
  if (v56 == (void *)1)
  {
    uint64_t v108 = (uint64_t)a1;
    uint64_t v107 = v60;
    uint64_t v106 = v59;
    uint64_t v103 = v61;
    uint64_t v104 = v64;
    uint64_t v105 = v63;
    sub_1E0E361F0(v60, v59, v62, v61, v64, v63);
    uint64_t v65 = v53;
    uint64_t v66 = v55;
    uint64_t v67 = v58;
    uint64_t v68 = v57;
    sub_1E0E36440((uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
    uint64_t v69 = v67;
    uint64_t v70 = v66;
    uint64_t v71 = v65;
    sub_1E0E36440((uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
    if (v62 == (void *)1)
    {
      sub_1E0E3624C(v54, v65, (void *)1, v70, v69, v57);
      uint64_t v2 = v116;
      uint64_t v72 = v119;
      sub_1E0E3631C((uint64_t)v116, v119, type metadata accessor for FeatureRegulatoryInfo);
      a1 = (void *)v108;
      uint64_t v73 = v120;
      sub_1E0E3631C(v108, v120, type metadata accessor for FeatureRegulatoryInfo);
      uint64_t v16 = v117;
      uint64_t v20 = v118;
      uint64_t v75 = (uint64_t)v121;
      uint64_t v74 = (uint64_t)v122;
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  uint64_t v124 = v40[4];
  uint64_t v125 = v53;
  uint64_t v126 = v56;
  uint64_t v127 = v55;
  uint64_t v128 = v58;
  uint64_t v129 = v57;
  if (v62 == (void *)1)
  {
    uint64_t v108 = (uint64_t)a1;
    uint64_t v76 = v54;
    uint64_t v107 = v60;
    uint64_t v106 = v59;
    uint64_t v105 = v63;
    uint64_t v104 = v64;
    uint64_t v103 = v61;
    sub_1E0E1B03C(v54, v53, v56);
    sub_1E0E1B03C(v55, v58, v57);
    sub_1E0E1B03C(v54, v53, v56);
    sub_1E0E1B03C(v55, v58, v57);
    uint64_t v77 = v53;
    uint64_t v78 = v55;
    uint64_t v79 = v58;
    uint64_t v68 = v57;
    sub_1E0E36440((uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
    uint64_t v69 = v79;
    uint64_t v70 = v78;
    uint64_t v71 = v77;
    sub_1E0E36440((uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
    uint64_t v54 = v76;
    sub_1E0E1B0C8(v76, v71, v56);
    sub_1E0E1B0C8(v70, v69, v57);
LABEL_15:
    sub_1E0E3624C(v54, v71, v56, v70, v69, v68);
    sub_1E0E3624C(v107, v106, v62, v103, v104, v105);
    uint64_t v16 = v117;
    uint64_t v20 = v118;
    uint64_t v75 = (uint64_t)v121;
    uint64_t v74 = (uint64_t)v122;
    uint64_t v72 = v119;
    uint64_t v73 = v120;
    a1 = (void *)v108;
    uint64_t v2 = v116;
LABEL_18:
    sub_1E0E3631C((uint64_t)v2, v72, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)a1, v73, type metadata accessor for FeatureRegulatoryInfo);
LABEL_19:
    sub_1E0E36440(v73, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E36440(v72, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)v2, v74, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)a1, v75, type metadata accessor for FeatureRegulatoryInfo);
LABEL_20:
    sub_1E0E36440(v75, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E36440(v74, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)v2, (uint64_t)v20, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
LABEL_21:
    sub_1E0E36440((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    uint64_t v80 = (uint64_t)v20;
    unint64_t v81 = type metadata accessor for FeatureRegulatoryInfo;
    goto LABEL_22;
  }
  v123[0] = v60;
  v123[1] = v59;
  v123[2] = (uint64_t)v62;
  v123[3] = v61;
  v123[4] = v64;
  v123[5] = (uint64_t)v63;
  sub_1E0E361F0(v54, v53, v56, v55, v58, v57);
  sub_1E0E361F0(v54, v53, v56, v55, v58, v57);
  LODWORD(v108) = _s8HealthUI29PairedDeviceFeatureAttributesV2eeoiySbAC_ACtFZ_0(&v124, v123);
  char v84 = v57;
  sub_1E0E36440((uint64_t)v36, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E36440((uint64_t)v40, type metadata accessor for FeatureRegulatoryInfo);
  uint64_t v85 = v127;
  uint64_t v86 = v128;
  uint64_t v87 = v129;
  sub_1E0E1B0C8(v124, v125, v126);
  sub_1E0E1B0C8(v85, v86, v87);
  sub_1E0E3624C(v54, v53, v56, v55, v58, v84);
  uint64_t v2 = v116;
  uint64_t v72 = v119;
  sub_1E0E3631C((uint64_t)v116, v119, type metadata accessor for FeatureRegulatoryInfo);
  uint64_t v73 = v120;
  sub_1E0E3631C((uint64_t)a1, v120, type metadata accessor for FeatureRegulatoryInfo);
  uint64_t v16 = v117;
  uint64_t v20 = v118;
  uint64_t v75 = (uint64_t)v121;
  uint64_t v74 = (uint64_t)v122;
  if ((v108 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_25:
  int v88 = *(unsigned __int8 *)(v72 + 80);
  sub_1E0E36440(v72, type metadata accessor for FeatureRegulatoryInfo);
  int v89 = *(unsigned __int8 *)(v73 + 80);
  sub_1E0E36440(v73, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E3631C((uint64_t)v2, v74, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E3631C((uint64_t)a1, v75, type metadata accessor for FeatureRegulatoryInfo);
  if (v88 != v89) {
    goto LABEL_20;
  }
  uint64_t v90 = v115;
  char v91 = Optional<A>.isEquivalent(to:)(v75 + *(int *)(v115 + 32));
  sub_1E0E36440(v75, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E36440(v74, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E3631C((uint64_t)v2, (uint64_t)v20, type metadata accessor for FeatureRegulatoryInfo);
  sub_1E0E3631C((uint64_t)a1, (uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
  if ((v91 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v92 = *(int *)(v90 + 36);
  uint64_t v93 = (uint64_t)&v16[v92];
  uint64_t v94 = v112;
  uint64_t v95 = v112 + *(int *)(v111 + 48);
  sub_1E0E3631C((uint64_t)&v20[v92], v112, (uint64_t (*)(void))sub_1E0E36384);
  sub_1E0E3631C(v93, v95, (uint64_t (*)(void))sub_1E0E36384);
  uint64_t v96 = v113;
  uint64_t v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  uint64_t v98 = v114;
  if (v97(v94, 1, v114) == 1)
  {
    sub_1E0E36440((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E36440((uint64_t)v20, type metadata accessor for FeatureRegulatoryInfo);
    if (v97(v95, 1, v98) == 1)
    {
      sub_1E0E36440(v94, (uint64_t (*)(void))sub_1E0E36384);
      char v82 = 1;
      return v82 & 1;
    }
  }
  else
  {
    uint64_t v99 = v110;
    sub_1E0E3631C(v94, v110, (uint64_t (*)(void))sub_1E0E36384);
    if (v97(v95, 1, v98) != 1)
    {
      uint64_t v100 = v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v109, v95, v98);
      sub_1E0E35BB4(&qword_1EAD6E848, MEMORY[0x1E4F276F0]);
      char v82 = sub_1E0ECD100();
      uint64_t v101 = *(void (**)(char *, uint64_t))(v96 + 8);
      v101(v100, v98);
      sub_1E0E36440((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
      sub_1E0E36440((uint64_t)v20, type metadata accessor for FeatureRegulatoryInfo);
      v101((char *)v99, v98);
      sub_1E0E36440(v94, (uint64_t (*)(void))sub_1E0E36384);
      return v82 & 1;
    }
    sub_1E0E36440((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    sub_1E0E36440((uint64_t)v20, type metadata accessor for FeatureRegulatoryInfo);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v99, v98);
  }
  unint64_t v81 = (uint64_t (*)(void))sub_1E0E36420;
  uint64_t v80 = v94;
LABEL_22:
  sub_1E0E36440(v80, v81);
  char v82 = 0;
  return v82 & 1;
}

uint64_t Optional<A>.isEquivalent(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = (char *)&v25 - v11;
  sub_1E0E364A0(0, &qword_1EAD6E850, sub_1E0E362C8);
  uint64_t v15 = MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = (char *)&v25 + *(int *)(v15 + 56) - v16;
  sub_1E0E3631C(v2, (uint64_t)&v25 - v16, (uint64_t (*)(void))sub_1E0E362C8);
  sub_1E0E3631C(a1, (uint64_t)v18, (uint64_t (*)(void))sub_1E0E362C8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(a1) = v19(v17, 1, v4);
  int v20 = v19(v18, 1, v4);
  if (a1 != 1)
  {
    if (v20 != 1)
    {
      sub_1E0E3A020((uint64_t)v17, (uint64_t)v12, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1E0E3A020((uint64_t)v18, (uint64_t)v9, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      char v21 = FeatureRegulatoryInfo.ReenableActionConfiguration.isEquivalent(to:)(v9);
      sub_1E0E36440((uint64_t)v9, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1E0E36440((uint64_t)v12, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      return v21 & 1;
    }
    uint64_t v22 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration;
    uint64_t v23 = (uint64_t)v17;
    goto LABEL_7;
  }
  if (v20 != 1)
  {
    uint64_t v22 = (uint64_t (*)(void))sub_1E0E362C8;
    uint64_t v23 = (uint64_t)v18;
LABEL_7:
    sub_1E0E36440(v23, v22);
    char v21 = 0;
    return v21 & 1;
  }
  char v21 = 1;
  return v21 & 1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.isEquivalent(to:)(void *a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = sub_1E0ECB810();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v47 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E36384(0);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v48 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E0E36420(0);
  uint64_t v49 = v10;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v16 = MEMORY[0x1F4188790](v14, v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v16, v19);
  uint64_t v22 = (char *)&v46 - v21;
  uint64_t v24 = MEMORY[0x1F4188790](v20, v23);
  uint64_t v26 = (char *)&v46 - v25;
  MEMORY[0x1F4188790](v24, v27);
  uint64_t v29 = (char *)&v46 - v28;
  if (*v1 == *a1 && v1[1] == a1[1])
  {
    sub_1E0E3631C((uint64_t)v1, (uint64_t)&v46 - v28, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v26, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  }
  else
  {
    char v30 = sub_1E0ECD9E0();
    sub_1E0E3631C(v2, (uint64_t)v29, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v26, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    if ((v30 & 1) == 0)
    {
      sub_1E0E36440((uint64_t)v29, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1E0E36440((uint64_t)v26, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1E0E3631C(v2, (uint64_t)v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1E0E3631C((uint64_t)a1, (uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
LABEL_19:
      sub_1E0E36440((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      uint64_t v42 = (uint64_t)v22;
      uint64_t v41 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration;
      goto LABEL_20;
    }
  }
  if (*((void *)v29 + 2) == *((void *)v26 + 2) && *((void *)v29 + 3) == *((void *)v26 + 3))
  {
    sub_1E0E36440((uint64_t)v29, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E36440((uint64_t)v26, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E3631C(v2, (uint64_t)v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  }
  else
  {
    char v32 = sub_1E0ECD9E0();
    sub_1E0E36440((uint64_t)v29, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E36440((uint64_t)v26, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E3631C(v2, (uint64_t)v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E3631C((uint64_t)a1, (uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    if ((v32 & 1) == 0) {
      goto LABEL_19;
    }
  }
  uint64_t v33 = *(int *)(v14 + 28);
  uint64_t v34 = (uint64_t)&v18[v33];
  uint64_t v35 = (uint64_t)&v13[*(int *)(v49 + 48)];
  sub_1E0E3631C((uint64_t)&v22[v33], (uint64_t)v13, (uint64_t (*)(void))sub_1E0E36384);
  sub_1E0E3631C(v34, v35, (uint64_t (*)(void))sub_1E0E36384);
  uint64_t v37 = v50;
  uint64_t v36 = v51;
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v38((uint64_t)v13, 1, v51) != 1)
  {
    uint64_t v40 = v48;
    sub_1E0E3631C((uint64_t)v13, v48, (uint64_t (*)(void))sub_1E0E36384);
    if (v38(v35, 1, v36) != 1)
    {
      unint64_t v44 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v47, v35, v36);
      sub_1E0E35BB4(&qword_1EAD6E848, MEMORY[0x1E4F276F0]);
      char v39 = sub_1E0ECD100();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v37 + 8);
      v45(v44, v36);
      sub_1E0E36440((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1E0E36440((uint64_t)v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      v45((char *)v40, v36);
      sub_1E0E36440((uint64_t)v13, (uint64_t (*)(void))sub_1E0E36384);
      return v39 & 1;
    }
    sub_1E0E36440((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1E0E36440((uint64_t)v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
    goto LABEL_17;
  }
  sub_1E0E36440((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  sub_1E0E36440((uint64_t)v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  if (v38(v35, 1, v36) != 1)
  {
LABEL_17:
    uint64_t v41 = (uint64_t (*)(void))sub_1E0E36420;
    uint64_t v42 = (uint64_t)v13;
LABEL_20:
    sub_1E0E36440(v42, v41);
    char v39 = 0;
    return v39 & 1;
  }
  sub_1E0E36440((uint64_t)v13, (uint64_t (*)(void))sub_1E0E36384);
  char v39 = 1;
  return v39 & 1;
}

uint64_t sub_1E0E356B8()
{
  return sub_1E0ECC530();
}

uint64_t sub_1E0E356DC()
{
  return sub_1E0ECC530();
}

uint64_t sub_1E0E35700(uint64_t a1)
{
  uint64_t v2 = sub_1E0ECC350();
  MEMORY[0x1F4188790](v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1E0ECC540();
}

void sub_1E0E357CC(uint64_t a1)
{
}

uint64_t type metadata accessor for FeatureRegulatoryInfoView(uint64_t a1)
{
  return sub_1E0E28200(a1, (uint64_t *)&unk_1EAD6E860);
}

void sub_1E0E35820()
{
  if (!qword_1EAD6E768)
  {
    sub_1E0E39FBC(255, &qword_1EAD6E770, (uint64_t (*)(uint64_t))sub_1E0E358D0, MEMORY[0x1E4F3F108]);
    sub_1E0E35F88();
    unint64_t v0 = sub_1E0ECCA60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E768);
    }
  }
}

void sub_1E0E358D0()
{
  if (!qword_1EAD6E778)
  {
    sub_1E0E35A1C(255, &qword_1EAD6E780, (void (*)(uint64_t))sub_1E0E2C194);
    sub_1E0E359C4();
    sub_1E0E35A1C(255, &qword_1EAD6E790, sub_1E0E35A88);
    sub_1E0E35DF8();
    sub_1E0E35EDC(255);
    TupleTypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EAD6E778);
    }
  }
}

void sub_1E0E359C4()
{
  if (!qword_1EAD6E788)
  {
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E788);
    }
  }
}

void sub_1E0E35A1C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1E0ECCE10();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0E35A88(uint64_t a1)
{
}

void sub_1E0E35ABC()
{
  if (!qword_1EAD6E7A0)
  {
    sub_1E0E35B2C(255);
    sub_1E0E35BFC(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EAD6E7A0);
    }
  }
}

void sub_1E0E35B2C(uint64_t a1)
{
}

void sub_1E0E35B4C(uint64_t a1)
{
}

uint64_t sub_1E0E35B80()
{
  return sub_1E0E35BB4(&qword_1EAD6E7B8, (void (*)(uint64_t))type metadata accessor for InstructionsForUseWebViewContainer);
}

uint64_t sub_1E0E35BB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1E0E35BFC(uint64_t a1)
{
}

void sub_1E0E35C24(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1E0ECC890();
    unint64_t v4 = sub_1E0ECC3F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1E0E35C90(uint64_t a1)
{
}

void sub_1E0E35CC4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = sub_1E0ECC3B0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1E0E35D50()
{
  unint64_t result = qword_1EAD6E7D8;
  if (!qword_1EAD6E7D8)
  {
    sub_1E0E2C194();
    sub_1E0E35BB4(&qword_1EAD6DB80, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E7D8);
  }
  return result;
}

void sub_1E0E35DF8()
{
  if (!qword_1EAD6E7E0)
  {
    sub_1E0E35A1C(255, &qword_1EAD6E7E8, (void (*)(uint64_t))sub_1E0E35E7C);
    unint64_t v0 = sub_1E0ECD6C0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E7E0);
    }
  }
}

void sub_1E0E35E7C()
{
  if (!qword_1EAD6E7F0)
  {
    unint64_t v0 = sub_1E0ECCD60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EAD6E7F0);
    }
  }
}

void sub_1E0E35EDC(uint64_t a1)
{
}

void sub_1E0E35F04(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1E0E35C24(255, a3, a4);
    unint64_t v5 = sub_1E0ECD6C0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1E0E35F5C(uint64_t a1)
{
}

unint64_t sub_1E0E35F88()
{
  unint64_t result = qword_1EAD6E810;
  if (!qword_1EAD6E810)
  {
    sub_1E0E39FBC(255, &qword_1EAD6E770, (uint64_t (*)(uint64_t))sub_1E0E358D0, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EAD6E810);
  }
  return result;
}

void sub_1E0E36010()
{
  if (!qword_1EAD6E818)
  {
    sub_1E0E35820();
    sub_1E0ECC7A0();
    sub_1E0E35BB4(&qword_1EAD6E820, (void (*)(uint64_t))sub_1E0E35820);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EAD6E818);
    }
  }
}

void sub_1E0E360E4()
{
  if (!qword_1EAD6E828)
  {
    sub_1E0E36010();
    sub_1E0E35820();
    sub_1E0ECC7A0();
    sub_1E0E35BB4(&qword_1EAD6E820, (void (*)(uint64_t))sub_1E0E35820);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EAD6E828);
    }
  }
}

uint64_t sub_1E0E361E8@<X0>(char *a1@<X8>)
{
  return sub_1E0E309A8(*(void *)(v1 + 16), a1);
}

void sub_1E0E361F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3 != (void *)1)
  {
    sub_1E0E1B03C(a1, a2, a3);
    sub_1E0E1B03C(a4, a5, a6);
  }
}

uint64_t sub_1E0E3624C(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3 != (void *)1)
  {
    sub_1E0E1B0C8(result, a2, a3);
    return sub_1E0E1B0C8(a4, a5, a6);
  }
  return result;
}

uint64_t type metadata accessor for FeatureRegulatoryInfo(uint64_t a1)
{
  return sub_1E0E28200(a1, (uint64_t *)&unk_1EAD6E870);
}

void sub_1E0E362C8(uint64_t a1)
{
}

uint64_t type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1)
{
  return sub_1E0E28200(a1, (uint64_t *)&unk_1EAD6E880);
}

uint64_t sub_1E0E3631C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1E0E36384(uint64_t a1)
{
}

uint64_t sub_1E0E363B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_1E0E36420(uint64_t a1)
{
}

uint64_t sub_1E0E36440(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1E0E364A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1E0E36500()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E3651C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = sub_1E0E399CC;
  a2[1] = (uint64_t (*)())v5;
  return swift_retain();
}

uint64_t *initializeBufferWithCopyOfBuffer for FeatureRegulatoryInfoView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_1E0E357CC(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1E0ECC350();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v14 = *v12;
    uint64_t v13 = (void *)v12[1];
    void *v11 = v14;
    v11[1] = v13;
    uint64_t v15 = (uint64_t *)((char *)a1 + v10);
    uint64_t v16 = (uint64_t *)((char *)a2 + v10);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    id v18 = v13;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FeatureRegulatoryInfoView(uint64_t a1, uint64_t a2)
{
  sub_1E0E357CC(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1E0ECC350();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FeatureRegulatoryInfoView(void *a1, void *a2, uint64_t a3)
{
  sub_1E0E357CC(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1E0ECC350();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v12 = *v10;
  uint64_t v11 = (void *)v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  uint64_t v13 = (void *)((char *)a1 + v8);
  uint64_t v14 = (void *)((char *)a2 + v8);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  id v16 = v11;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FeatureRegulatoryInfoView(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1E0E36440((uint64_t)a1, (uint64_t (*)(void))sub_1E0E357CC);
    sub_1E0E357CC(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1E0ECC350();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = (void *)v9[1];
  uint64_t v11 = (void *)v8[1];
  v8[1] = v10;
  id v12 = v10;

  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FeatureRegulatoryInfoView(char *a1, char *a2, uint64_t a3)
{
  sub_1E0E357CC(0);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_1E0ECC350();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *assignWithTake for FeatureRegulatoryInfoView(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1E0E36440((uint64_t)a1, (uint64_t (*)(void))sub_1E0E357CC);
    sub_1E0E357CC(0);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_1E0ECC350();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  uint64_t v14 = (void *)*((void *)v10 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;

  uint64_t v15 = *(int *)(a3 + 24);
  id v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)id v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureRegulatoryInfoView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0E36BA4);
}

uint64_t sub_1E0E36BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1E0E39FBC(0, &qword_1EAD6E858, MEMORY[0x1E4F3C868], MEMORY[0x1E4F3C658]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureRegulatoryInfoView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0E36CAC);
}

void sub_1E0E36CAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1E0E39FBC(0, &qword_1EAD6E858, MEMORY[0x1E4F3C868], MEMORY[0x1E4F3C658]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

void sub_1E0E36D9C()
{
  sub_1E0E357CC(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for FeatureRegulatoryInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return a1;
  }
  uint64_t v7 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = (_OWORD *)(a1 + 32);
  unint64_t v10 = a2 + 4;
  uint64_t v11 = (void *)a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v11)
  {
    *uint64_t v9 = *v10;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v14 = (void *)a2[9];
    if (!v14)
    {
LABEL_9:
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(void *)(a1 + 72) = a2[9];
      goto LABEL_10;
    }
LABEL_7:
    uint64_t v15 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v14;
    swift_bridgeObjectRetain();
    id v16 = v14;
    goto LABEL_10;
  }
  if (v11 != (void *)1)
  {
    uint64_t v17 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v17;
    *(void *)(a1 + 48) = v11;
    swift_bridgeObjectRetain();
    id v18 = v11;
    uint64_t v14 = (void *)a2[9];
    if (!v14) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  long long v12 = *((_OWORD *)a2 + 3);
  *uint64_t v9 = *v10;
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
LABEL_10:
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  uint64_t v19 = *(int *)(a3 + 32);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_1E0E362C8(0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v25;
    void v20[2] = v21[2];
    uint64_t v26 = v21[5];
    *(_OWORD *)(v20 + 3) = *(_OWORD *)(v21 + 3);
    v20[5] = v26;
    uint64_t v27 = *(int *)(v22 + 28);
    __dst = (char *)v20 + v27;
    char v39 = (char *)v21 + v27;
    uint64_t v28 = sub_1E0ECB810();
    uint64_t v37 = *(void *)(v28 - 8);
    uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v40(v39, 1, v28))
    {
      sub_1E0E36384(0);
      memcpy(__dst, v39, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v39, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v28);
    }
    *((unsigned char *)v20 + *(int *)(v22 + 32)) = *((unsigned char *)v21 + *(int *)(v22 + 32));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v30 = *(int *)(a3 + 36);
  uint64_t v31 = (void *)(a1 + v30);
  char v32 = (char *)a2 + v30;
  uint64_t v33 = sub_1E0ECB810();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    sub_1E0E36384(0);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t destroy for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    if (v4 == (void *)1) {
      goto LABEL_6;
    }

    swift_bridgeObjectRelease();
  }
  int v5 = *(void **)(a1 + 72);
  if (v5)
  {

    swift_bridgeObjectRelease();
  }
LABEL_6:
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = v6 + *(int *)(v7 + 28);
    uint64_t v9 = sub_1E0ECB810();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  uint64_t v11 = a1 + *(int *)(a2 + 36);
  uint64_t v12 = sub_1E0ECB810();
  uint64_t v15 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v11, 1, v12);
  if (!result)
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
    return v14(v11, v12);
  }
  return result;
}

uint64_t initializeWithCopy for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = (_OWORD *)(a1 + 32);
  uint64_t v9 = (_OWORD *)(a2 + 32);
  uint64_t v10 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    if (v10 == (void *)1)
    {
      long long v11 = v9[1];
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v9[2];
      goto LABEL_8;
    }
    uint64_t v15 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = v10;
    swift_bridgeObjectRetain();
    id v16 = v10;
    uint64_t v12 = *(void **)(a2 + 72);
    if (!v12) {
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v13 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v12;
    swift_bridgeObjectRetain();
    id v14 = v12;
    goto LABEL_8;
  }
  *uint64_t v8 = *v9;
  *(void *)(a1 + 48) = *((void *)v9 + 2);
  uint64_t v12 = *(void **)(a2 + 72);
  if (v12) {
    goto LABEL_5;
  }
LABEL_7:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
LABEL_8:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v17 = *(int *)(a3 + 32);
  id v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1E0E362C8(0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v39 = a3;
    uint64_t v23 = v19[1];
    *id v18 = *v19;
    v18[1] = v23;
    void v18[2] = v19[2];
    uint64_t v24 = v19[5];
    *(_OWORD *)(v18 + 3) = *(_OWORD *)(v19 + 3);
    v18[5] = v24;
    uint64_t v25 = *(int *)(v20 + 28);
    __dst = (char *)v18 + v25;
    uint64_t v36 = (char *)v19 + v25;
    uint64_t v26 = sub_1E0ECB810();
    uint64_t v35 = *(void *)(v26 - 8);
    uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v37(v36, 1, v26))
    {
      sub_1E0E36384(0);
      memcpy(__dst, v36, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v36, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v26);
    }
    *((unsigned char *)v18 + *(int *)(v20 + 32)) = *((unsigned char *)v19 + *(int *)(v20 + 32));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    a3 = v39;
  }
  uint64_t v28 = *(int *)(a3 + 36);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (const void *)(a2 + v28);
  uint64_t v31 = sub_1E0ECB810();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    sub_1E0E36384(0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithCopy for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 32);
  uint64_t v7 = (long long *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  if (v8 == 1)
  {
    if (v9)
    {
      if (v9 == 1)
      {
        long long v10 = *v7;
        long long v11 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v11;
LABEL_5:
        *uint64_t v6 = v10;
        goto LABEL_24;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      id v18 = *(void **)(a2 + 48);
      *(void *)(a1 + 48) = v18;
      swift_bridgeObjectRetain();
      id v19 = v18;
      if (!*(void *)(a2 + 72)) {
        goto LABEL_14;
      }
    }
    else
    {
      long long v17 = *v7;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *uint64_t v6 = v17;
      if (!*(void *)(a2 + 72))
      {
LABEL_14:
        long long v20 = *(_OWORD *)(a2 + 56);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v20;
        goto LABEL_24;
      }
    }
    goto LABEL_23;
  }
  if (v9 == 1)
  {
    sub_1E0E38048(a1 + 32);
    long long v13 = *(_OWORD *)(a2 + 48);
    long long v12 = *(_OWORD *)(a2 + 64);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 64) = v12;
    goto LABEL_24;
  }
  if (v8)
  {
    if (v9)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v14 = *(void **)(a2 + 48);
      uint64_t v15 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v14;
      id v16 = v14;
    }
    else
    {
      sub_1E0E1B794(a1 + 32);
      uint64_t v23 = *(void *)(a2 + 48);
      *uint64_t v6 = *v7;
      *(void *)(a1 + 48) = v23;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    uint64_t v21 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v21;
    swift_bridgeObjectRetain();
    id v22 = v21;
  }
  else
  {
    long long v24 = *v7;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *uint64_t v6 = v24;
  }
  uint64_t v6 = (long long *)(a1 + 56);
  uint64_t v25 = (long long *)(a2 + 56);
  uint64_t v26 = *(void *)(a2 + 72);
  if (!*(void *)(a1 + 72))
  {
    if (!v26)
    {
      long long v10 = *v25;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      goto LABEL_5;
    }
LABEL_23:
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v30 = *(void **)(a2 + 72);
    *(void *)(a1 + 72) = v30;
    swift_bridgeObjectRetain();
    id v31 = v30;
    goto LABEL_24;
  }
  if (v26)
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void **)(a2 + 72);
    uint64_t v28 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v27;
    id v29 = v27;
  }
  else
  {
    sub_1E0E1B794(a1 + 56);
    uint64_t v56 = *(void *)(a2 + 72);
    *uint64_t v6 = *v25;
    *(void *)(a1 + 72) = v56;
  }
LABEL_24:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v32 = *(int *)(a3 + 32);
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (v39)
    {
      sub_1E0E36440((uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      goto LABEL_30;
    }
    uint64_t v75 = a3;
    void *v33 = *v34;
    v33[1] = v34[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v33[2] = v34[2];
    _OWORD v33[3] = v34[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v46 = v34[5];
    v33[4] = v34[4];
    v33[5] = v46;
    swift_retain();
    swift_release();
    uint64_t v47 = *(int *)(v35 + 28);
    uint64_t v48 = (char *)v33 + v47;
    uint64_t v49 = (char *)v34 + v47;
    uint64_t v50 = sub_1E0ECB810();
    uint64_t v70 = *(void *)(v50 - 8);
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
    __dstCGFloat a = v48;
    LODWORD(v48) = v51(v48, 1, v50);
    int v52 = v51(v49, 1, v50);
    if (v48)
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v70 + 16))(__dsta, v49, v50);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(__dsta, 0, 1, v50);
        goto LABEL_43;
      }
      sub_1E0E36384(0);
      size_t v54 = *(void *)(*(void *)(v53 - 8) + 64);
      uint64_t v55 = __dsta;
    }
    else
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v70 + 24))(__dsta, v49, v50);
        goto LABEL_43;
      }
      (*(void (**)(void *, uint64_t))(v70 + 8))(__dsta, v50);
      sub_1E0E36384(0);
      size_t v54 = *(void *)(*(void *)(v57 - 8) + 64);
      uint64_t v55 = __dsta;
    }
    memcpy(v55, v49, v54);
LABEL_43:
    a3 = v75;
    *((unsigned char *)v33 + *(int *)(v35 + 32)) = *((unsigned char *)v34 + *(int *)(v35 + 32));
    goto LABEL_44;
  }
  if (v39)
  {
LABEL_30:
    sub_1E0E362C8(0);
    memcpy(v33, v34, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_44;
  }
  uint64_t v74 = a3;
  void *v33 = *v34;
  v33[1] = v34[1];
  void v33[2] = v34[2];
  _OWORD v33[3] = v34[3];
  uint64_t v40 = v34[5];
  v33[4] = v34[4];
  v33[5] = v40;
  uint64_t v41 = *(int *)(v35 + 28);
  __src = (char *)v34 + v41;
  __dst = (char *)v33 + v41;
  uint64_t v42 = sub_1E0ECB810();
  uint64_t v68 = *(void *)(v42 - 8);
  uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
  uint64_t v43 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v69(__src, 1, v43))
  {
    sub_1E0E36384(0);
    memcpy(__dst, __src, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(__dst, __src, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v43);
  }
  a3 = v74;
  *((unsigned char *)v33 + *(int *)(v35 + 32)) = *((unsigned char *)v34 + *(int *)(v35 + 32));
  (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_44:
  uint64_t v58 = *(int *)(a3 + 36);
  uint64_t v59 = (void *)(a1 + v58);
  uint64_t v60 = (void *)(a2 + v58);
  uint64_t v61 = sub_1E0ECB810();
  uint64_t v62 = *(void *)(v61 - 8);
  id v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v62 + 48);
  int v64 = v63(v59, 1, v61);
  int v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(void *, void *, uint64_t))(v62 + 24))(v59, v60, v61);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v62 + 8))(v59, v61);
    goto LABEL_49;
  }
  if (v65)
  {
LABEL_49:
    sub_1E0E36384(0);
    memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v62 + 16))(v59, v60, v61);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  return a1;
}

uint64_t sub_1E0E38048(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 32);
  long long v10 = (_OWORD *)(a1 + v9);
  long long v11 = (_OWORD *)(a2 + v9);
  *(_OWORD *)(a1 + 64) = v8;
  uint64_t v12 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_1E0E362C8(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    long long v15 = v11[1];
    _OWORD *v10 = *v11;
    v10[1] = v15;
    void v10[2] = v11[2];
    uint64_t v16 = *(int *)(v12 + 28);
    __dst = (char *)v10 + v16;
    long long v17 = (char *)v11 + v16;
    uint64_t v18 = sub_1E0ECB810();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_1E0E36384(0);
      memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *((unsigned char *)v10 + *(int *)(v12 + 32)) = *((unsigned char *)v11 + *(int *)(v12 + 32));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v21 = *(int *)(a3 + 36);
  id v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  uint64_t v24 = sub_1E0ECB810();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_1E0E36384(0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithTake for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  long long v8 = (_OWORD *)(a1 + 32);
  uint64_t v9 = (_OWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10 == 1) {
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(a2 + 48);
  if (v11 == 1)
  {
    sub_1E0E38048(a1 + 32);
LABEL_4:
    long long v12 = *(_OWORD *)(a2 + 48);
    *long long v8 = *v9;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    goto LABEL_5;
  }
  if (v10)
  {
    if (v11)
    {
      uint64_t v29 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v29;
      swift_bridgeObjectRelease();
      uint64_t v30 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v11;

      goto LABEL_22;
    }
    sub_1E0E1B794(a1 + 32);
  }
  *long long v8 = *v9;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
LABEL_22:
  if (*(void *)(a1 + 72))
  {
    uint64_t v42 = *(void *)(a2 + 72);
    if (v42)
    {
      uint64_t v43 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v43;
      swift_bridgeObjectRelease();
      uint64_t v44 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v42;

      goto LABEL_5;
    }
    sub_1E0E1B794(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
LABEL_5:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  long long v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (v20)
    {
      sub_1E0E36440((uint64_t)v14, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      goto LABEL_11;
    }
    uint64_t v59 = a3;
    uint64_t v31 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v31;
    swift_bridgeObjectRelease();
    uint64_t v32 = *((void *)v15 + 3);
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *((void *)v14 + 3) = v32;
    swift_bridgeObjectRelease();
    void v14[2] = v15[2];
    swift_release();
    uint64_t v33 = *(int *)(v16 + 28);
    uint64_t v34 = (char *)v14 + v33;
    uint64_t v35 = (char *)v15 + v33;
    uint64_t v36 = sub_1E0ECB810();
    uint64_t v56 = *(void *)(v36 - 8);
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    uint64_t v57 = v34;
    LODWORD(v34) = v37(v34, 1, v36);
    int v38 = v37(v35, 1, v36);
    if (v34)
    {
      if (!v38)
      {
        (*(void (**)(void *, char *, uint64_t))(v56 + 32))(v57, v35, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v36);
        goto LABEL_32;
      }
      sub_1E0E36384(0);
      size_t v40 = *(void *)(*(void *)(v39 - 8) + 64);
      uint64_t v41 = v57;
    }
    else
    {
      if (!v38)
      {
        (*(void (**)(void *, char *, uint64_t))(v56 + 40))(v57, v35, v36);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v56 + 8))(v57, v36);
      sub_1E0E36384(0);
      size_t v40 = *(void *)(*(void *)(v45 - 8) + 64);
      uint64_t v41 = v57;
    }
    memcpy(v41, v35, v40);
LABEL_32:
    *((unsigned char *)v14 + *(int *)(v16 + 32)) = *((unsigned char *)v15 + *(int *)(v16 + 32));
    a3 = v59;
    goto LABEL_33;
  }
  if (v20)
  {
LABEL_11:
    sub_1E0E362C8(0);
    memcpy(v14, v15, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_33;
  }
  uint64_t v58 = a3;
  long long v21 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v21;
  void v14[2] = v15[2];
  uint64_t v22 = *(int *)(v16 + 28);
  uint64_t v23 = (char *)v14 + v22;
  uint64_t v24 = (char *)v15 + v22;
  uint64_t v25 = sub_1E0ECB810();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    sub_1E0E36384(0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  a3 = v58;
  *((unsigned char *)v14 + *(int *)(v16 + 32)) = *((unsigned char *)v15 + *(int *)(v16 + 32));
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_33:
  uint64_t v46 = *(int *)(a3 + 36);
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (void *)(a2 + v46);
  uint64_t v49 = sub_1E0ECB810();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v50 + 40))(v47, v48, v49);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v50 + 8))(v47, v49);
    goto LABEL_38;
  }
  if (v53)
  {
LABEL_38:
    sub_1E0E36384(0);
    memcpy(v47, v48, *(void *)(*(void *)(v54 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v50 + 32))(v47, v48, v49);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0E389DC);
}

uint64_t sub_1E0E389DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1E0E362C8(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_1E0E36384(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0E38B1C);
}

uint64_t sub_1E0E38B1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1E0E362C8(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_1E0E36384(0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1E0E38C48()
{
  sub_1E0E362C8(319);
  if (v0 <= 0x3F)
  {
    sub_1E0E36384(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    unint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    uint64_t v8 = a2[5];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v9 = *(int *)(a3 + 28);
    __dst = (void *)(a1 + v9);
    uint64_t v10 = (char *)a2 + v9;
    *(void *)(a1 + 40) = v8;
    uint64_t v11 = sub_1E0ECB810();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v13(v10, 1, v11))
    {
      sub_1E0E36384(0);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t destroy for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_1E0ECB810();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1E0ECB810();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12(v9, 1, v10))
  {
    sub_1E0E36384(0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

void *assignWithCopy for FeatureRegulatoryInfo.ReenableActionConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1E0ECB810();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1E0E36384(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_OWORD *initializeWithTake for FeatureRegulatoryInfo.ReenableActionConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1E0ECB810();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1E0E36384(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_1E0ECB810();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1E0E36384(0);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E0E39634);
}

uint64_t sub_1E0E39634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1E0E36384(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E0E396F8);
}

uint64_t sub_1E0E396F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1E0E36384(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1E0E397A0()
{
  sub_1E0E36384(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1E0E39850()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1E0E3996C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}