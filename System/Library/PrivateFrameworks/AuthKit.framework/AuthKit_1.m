uint64_t sub_100135EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;

  if ([*(id *)(v1 + 16) securityLevelForAccount:a1] != (id)4)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    v6 = type metadata accessor for Logger();
    sub_1000D78F8(v6, (uint64_t)qword_100274490);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ineligible to share account - Account is not HSA2", v9, 2u);
      swift_slowDealloc();
    }
    goto LABEL_17;
  }
  if (![*(id *)(v1 + 24) isUserVisibleKeychainSyncEnabled])
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_100274490);
    v7 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v11, "Ineligible to share account - User visible keychain is not enabled", v12, 2u);
      swift_slowDealloc();
    }
LABEL_17:

    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return 1;
  }
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274490);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Eligible to perform account sharing", v5, 2u);
    swift_slowDealloc();
  }

  return 1;
}

uint64_t type metadata accessor for AccountSharingPreFlightChecker()
{
  return self;
}

id sub_1001361F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  *(void *)&long long v34 = 0;
  v33.receiver = v2;
  v33.super_class = (Class)type metadata accessor for PrivateEmailRegistrationRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v33, "validateResponseData:error:", isa, &v34);

  if (v4) {
    return (id)v34;
  }
  id v6 = (id)v34;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  v7 = (void *)_convertErrorToNSError(_:)();
  if ([v7 code] == (id)-7010)
  {
    id v8 = [v7 userInfo];
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v9 + 16) && (unint64_t v12 = sub_10014A0BC(v10, v11), (v13 & 1) != 0))
    {
      sub_1000D7C68(*(void *)(v9 + 56) + 32 * v12, (uint64_t)&v34);
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v35 + 1))
    {
      if (swift_dynamicCast())
      {
        switch(v32)
        {
          case -41015:
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v14 = [v7 userInfo];
            static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            id v15 = objc_allocWithZone((Class)NSError);
            NSString v16 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v15 initWithDomain:v16 code:-11002 userInfo:v17.super.isa];
            break;
          case -41014:
          case -41013:
          case -41011:
          case -41010:
          case -41009:
          case -41008:
          case -41007:
          case -41006:
          case -41004:
          case -41003:
          case -41002:
            goto LABEL_22;
          case -41012:
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v24 = [v7 userInfo];
            static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            id v25 = objc_allocWithZone((Class)NSError);
            NSString v16 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v25 initWithDomain:v16 code:-11003 userInfo:v17.super.isa];
            break;
          case -41005:
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v26 = [v7 userInfo];
            static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            id v27 = objc_allocWithZone((Class)NSError);
            NSString v16 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v27 initWithDomain:v16 code:-11006 userInfo:v17.super.isa];
            break;
          case -41001:
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v28 = [v7 userInfo];
            static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            id v29 = objc_allocWithZone((Class)NSError);
            NSString v16 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            [v29 initWithDomain:v16 code:-11008 userInfo:v17.super.isa];
            break;
          default:
            if (v32 == -24000)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              id v30 = [v7 userInfo];
              static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              id v31 = objc_allocWithZone((Class)NSError);
              NSString v16 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v31 initWithDomain:v16 code:-11011 userInfo:v17.super.isa];
            }
            else if (v32 == -9008)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              id v20 = [v7 userInfo];
              static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              id v21 = objc_allocWithZone((Class)NSError);
              NSString v16 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v21 initWithDomain:v16 code:-11012 userInfo:v17.super.isa];
            }
            else
            {
LABEL_22:
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              id v22 = [v7 userInfo];
              static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              id v23 = objc_allocWithZone((Class)NSError);
              NSString v16 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v23 initWithDomain:v16 code:-11009 userInfo:v17.super.isa];
            }
            break;
        }
        goto LABEL_17;
      }
    }
    else
    {
      sub_1000E79A4((uint64_t)&v34);
    }
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v18 = [v7 userInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v19 = objc_allocWithZone((Class)NSError);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 initWithDomain:v16 code:-11010 userInfo:v17.super.isa];
LABEL_17:

  swift_willThrow();
  return (id)swift_errorRelease();
}

id sub_100136E18()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PrivateEmailRegistrationRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PrivateEmailRegistrationRequestProvider()
{
  return self;
}

uint64_t sub_100136E74()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100136F20()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100136FCC()
{
  sub_100136F20();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for Oneshot()
{
  return sub_100137038();
}

uint64_t sub_100137010()
{
  return v0;
}

uint64_t sub_10013701C()
{
  return sub_100137010();
}

uint64_t sub_100137038()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100137068()
{
  uint64_t v1 = v0;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274490);
  v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching last saved group memership info", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = *(void **)(v1 + 24);
  id v7 = sub_1000F0C1C();
  id v8 = [v6 keychainItemFor:v7];

  if (v8) {
    return sub_1000F0E08(v8);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001371A0()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_1001371C0, 0, 0);
}

uint64_t sub_1001371C0()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching current group memership info", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[16];

  id v6 = *(void **)(v5 + 16);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10013737C;
  uint64_t v7 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000D91D4;
  v0[13] = &unk_10022D740;
  v0[14] = v7;
  [v6 fetchGroupParticipantsWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10013737C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_100107E6C;
  }
  else {
    uint64_t v2 = sub_10011DB4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10013748C(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1000D78F8(v6, (uint64_t)qword_100274490);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Saving shared group membership info", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(void **)(v4 + 24);
  id v11 = sub_1000F0C1C();
  id v19 = 0;
  unsigned int v12 = [v10 deleteKeychainItemsFor:v11 error:&v19];

  if (v12)
  {
    id v13 = v19;
  }
  else
  {
    id v14 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v3 = 0;
  }
  sub_1000E2FEC();
  id v15 = sub_1000F084C(a1);
  if (!v3)
  {
    NSString v16 = v15;
    id v19 = 0;
    if ([v10 addWithItem:v15 error:&v19])
    {
      id v17 = v19;
    }
    else
    {
      id v18 = v19;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_100137690(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v31 = a2 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  uint64_t v32 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v12)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (i << 6);
      int64_t v12 = i;
      if (!*(void *)(v4 + 16)) {
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    int64_t v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v13 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v12 = i + 1;
    if (!v14)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v30) {
        goto LABEL_41;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v30) {
          goto LABEL_41;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    if (!*(void *)(v4 + 16))
    {
LABEL_40:
      uint64_t v2 = 0;
      goto LABEL_42;
    }
LABEL_25:
    uint64_t v16 = v3;
    id v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = v4;
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = v20 & ~v22;
    if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v24 = *(void *)(v21 + 48);
    id v25 = (void *)(v24 + 16 * v23);
    BOOL v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v27 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v27;
        if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        id v28 = (void *)(v24 + 16 * v23);
        BOOL v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
LABEL_42:
      sub_1000FBD5C();
      return v2;
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    uint64_t v4 = v21;
  }
  int64_t v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_41:
    uint64_t v2 = 1;
    goto LABEL_42;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    int64_t v12 = i + 4;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_100137984()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for SharedGroupsMembershipController()
{
  return self;
}

uint64_t sub_1001379E8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100137A08, 0, 0);
}

uint64_t sub_100137A08()
{
  uint64_t v51 = v0;
  if (qword_10026F9C0 != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v1 = type metadata accessor for Logger();
    sub_1000D78F8(v1, (uint64_t)qword_100274490);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Computing groups with departed participants", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 16);

    if (!v5) {
      break;
    }
    uint64_t v6 = *(void **)(v0 + 16);
    type metadata accessor for SharedGroupsMembershipInfo();
    unint64_t v7 = v6;
    if (static NSObject.== infix(_:_:)())
    {
      os_log_type_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        unint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "There are no group membership changes.", v10, 2u);
        swift_slowDealloc();
      }

      goto LABEL_11;
    }
    v44 = v7;
    uint64_t v45 = v0;
    uint64_t v47 = *(void *)(v0 + 24);
    uint64_t v13 = *(void *)&v7[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = sub_100139554(v14);
    int64_t v16 = 0;
    uint64_t v48 = v15 + 56;
    uint64_t v17 = -1;
    uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
    if (-v18 < 64) {
      uint64_t v17 = ~(-1 << -(char)v18);
    }
    unint64_t v19 = v17 & *(void *)(v15 + 56);
    uint64_t v46 = OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants;
    int64_t v49 = (unint64_t)(63 - v18) >> 6;
    while (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v16 << 6);
LABEL_32:
      id v25 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v21);
      uint64_t v26 = *v25;
      unint64_t v27 = v25[1];
      uint64_t v28 = *(void *)(v13 + 16);
      swift_bridgeObjectRetain();
      if (!v28) {
        goto LABEL_40;
      }
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_10014A0BC(v26, v27);
      if ((v30 & 1) != 0
        && (uint64_t v31 = *(void *)(*(void *)(v13 + 56) + 8 * v29),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            uint64_t v32 = *(void *)(v47 + v46),
            *(void *)(v32 + 16)))
      {
        swift_bridgeObjectRetain();
        unint64_t v33 = sub_10014A0BC(v26, v27);
        if ((v34 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 8 * v33);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        char v36 = sub_100137690(v35, v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v36)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain_n();
          v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v41 = swift_slowAlloc();
            uint64_t v0 = swift_slowAlloc();
            v50[0] = v0;
            *(_DWORD *)uint64_t v41 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v41 + 4) = sub_100158C6C(v26, v27, v50);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "Group (%s) has departed participants", (uint8_t *)v41, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          sub_10013FC94(v50, v26, v27);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
LABEL_39:
        swift_bridgeObjectRelease();
LABEL_40:
        swift_bridgeObjectRetain();
        v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v0 = swift_slowAlloc();
          v50[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v0 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 4) = sub_100158C6C(v26, v27, v50);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Group (%s) mismatch. Potentially the group was exited. Skipping.", (uint8_t *)v0, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
    }
    int64_t v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v22 >= v49) {
      goto LABEL_47;
    }
    unint64_t v23 = *(void *)(v48 + 8 * v22);
    ++v16;
    if (v23) {
      goto LABEL_31;
    }
    int64_t v16 = v22 + 1;
    if (v22 + 1 >= v49) {
      goto LABEL_47;
    }
    unint64_t v23 = *(void *)(v48 + 8 * v16);
    if (v23) {
      goto LABEL_31;
    }
    int64_t v16 = v22 + 2;
    if (v22 + 2 >= v49) {
      goto LABEL_47;
    }
    unint64_t v23 = *(void *)(v48 + 8 * v16);
    if (v23) {
      goto LABEL_31;
    }
    int64_t v24 = v22 + 3;
    if (v24 >= v49)
    {
LABEL_47:
      swift_release();

      uint64_t v0 = v45;
      goto LABEL_48;
    }
    unint64_t v23 = *(void *)(v48 + 8 * v24);
    if (v23)
    {
      int64_t v16 = v24;
LABEL_31:
      unint64_t v19 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v16 << 6);
      goto LABEL_32;
    }
    while (1)
    {
      int64_t v16 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      if (v16 >= v49) {
        goto LABEL_47;
      }
      unint64_t v23 = *(void *)(v48 + 8 * v16);
      ++v24;
      if (v23) {
        goto LABEL_31;
      }
    }
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
  }
  os_log_type_t v8 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, (os_log_type_t)v11))
  {
    int64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v11, "There was no previously saved SharedGroupsMembershipInfo.", v12, 2u);
    swift_slowDealloc();
  }
LABEL_11:

LABEL_48:
  v42 = *(uint64_t (**)(void *))(v0 + 8);
  return v42(&_swiftEmptySetSingleton);
}

void sub_1001380C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8(&qword_100270020);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  unint64_t v7 = *(void **)(a2 + OBJC_IVAR___AKAppleIDPasskeyUnenrollProvider_serviceController);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1001393E8;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001435F8;
  aBlock[3] = &unk_10022D820;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [v7 executeRequestWithCompletion:v11];
  _Block_release(v11);
}

uint64_t sub_100138408(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_100138480, 0, 0);
}

uint64_t sub_100138480()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  void *v3 = v0;
  v3[1] = sub_10013857C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000018, 0x80000001001C5060, sub_1001392D8, v2, &type metadata for Bool);
}

uint64_t sub_10013857C()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100138718;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100138698;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100138698()
{
  uint64_t v1 = *(void *)(v0 + 24);

  (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, *(unsigned __int8 *)(v0 + 56), 0);
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100138718()
{
  uint64_t v1 = *(void *)(v0 + 24);

  swift_task_dealloc();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);

  _Block_release(*(const void **)(v0 + 24));
  os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t type metadata accessor for AppleIDPasskeyUnenrollProvider()
{
  return self;
}

uint64_t sub_100138868()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001388A8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  os_log_type_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000D7208;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100271AF0 + dword_100271AF0);
  return v5(v2, v3);
}

void sub_100138954(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (a3 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    id v11 = [self dictionaryFromObject:isa ofType:@"application/json"];
    swift_unknownObjectRelease();
    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&long long v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v23 + 1) = v13;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v14 = sub_10014A078((uint64_t)v25), (v15 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v14, (uint64_t)&v23);
      }
      else
      {
        long long v23 = 0u;
        long long v24 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC((uint64_t)v25);
      uint64_t v16 = *((void *)&v24 + 1);
      sub_1000E79A4((uint64_t)&v23);
      if (!v16)
      {
        sub_100138DC8();
        LOBYTE(v25[0]) = 1;
        sub_1000D70C8(&qword_100270020);
        CheckedContinuation.resume(returning:)();
        goto LABEL_27;
      }
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_1000D78F8(v17, (uint64_t)qword_1002744A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v18, v19))
      {
LABEL_25:

        type metadata accessor for AppleIDPasskeyError(0);
        *(void *)&long long v23 = -120015;
        sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
        sub_1000DBBA0();
        _BridgedStoredNSError.init(_:userInfo:)();
        *(void *)&long long v23 = v25[0];
        sub_1000D70C8(&qword_100270020);
        CheckedContinuation.resume(throwing:)();
LABEL_27:

        return;
      }
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      unint64_t v21 = "Failed to unenroll passkey.";
    }
    else
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_1000D78F8(v22, (uint64_t)qword_1002744A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v18, v19)) {
        goto LABEL_25;
      }
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      unint64_t v21 = "Failed to unenroll passkey. Missing response.";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc();
    goto LABEL_25;
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000D78F8(v7, (uint64_t)qword_1002744A8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to unenroll passkey. AppleIDPasskeyUnenrollProvider instance is nil.", v10, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  *(void *)&long long v23 = v25[0];
  sub_1000D70C8(&qword_100270020);
  CheckedContinuation.resume(throwing:)();
}

void sub_100138DC8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___AKAppleIDPasskeyUnenrollProvider_accountManager);
  id v2 = [v1 primaryAuthKitAccount];
  if (v2)
  {
    os_log_type_t v3 = v2;
    [v1 setPasskeyPresent:0 forAccount:v2];
    id v21 = 0;
    if ([v1 saveAccount:v3 error:&v21])
    {
      uint64_t v4 = qword_10026F9C8;
      id v5 = v21;
      if (v4 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_1000D78F8(v6, (uint64_t)qword_1002744A8);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "AppleIDPasskeyUnenrollProvider: passkeyPresent saved successfully.", v9, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      id v13 = v21;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_1000D78F8(v14, (uint64_t)qword_1002744A8);
      swift_errorRetain();
      swift_errorRetain();
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        swift_errorRetain();
        os_log_type_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v21 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v18 = v19;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "AppleIDPasskeyUnenrollProvider: Failed to save passkeyPresent with error %@.", v17, 0xCu);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_1002744A8);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "AppleIDPasskeyUnenrollProvider: Missing primary account.", v12, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10013920C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_1001392D8(uint64_t a1)
{
  sub_1001380C4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001392E0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100139318()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270020);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1001393E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1000D70C8(&qword_100270020);

  sub_100138954(a1, a2, a3);
}

uint64_t sub_100139488(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100139498()
{
  return swift_release();
}

uint64_t sub_1001394A0(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100139558(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    os_log_type_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10013FC94(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001396F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      os_log_type_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          int64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100139828(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10013C978(a1, a2, a3, &qword_100271B88);
}

uint64_t sub_10013983C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100141B20(a1, (uint64_t)sub_1001423F4, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100139958(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return _swift_task_switch(sub_10013997C, 0, 0);
}

uint64_t sub_10013997C()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v1[19] = sub_1000D78F8(v3, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v1[17];
  if (v6)
  {
    uint64_t v8 = v1[16];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v1[10] = sub_100158C6C(v8, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching EULA for clientID: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = v1[17];
  uint64_t v11 = v1[16];
  BOOL v12 = *(void **)(v1[18] + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  sub_1000D70C8(&qword_100270970);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1001B81D0;
  *(void *)(v13 + 32) = v11;
  *(void *)(v13 + 40) = v10;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v1[20] = isa;
  swift_bridgeObjectRelease();
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_100139C6C;
  uint64_t v15 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10013A18C;
  v1[13] = &unk_10022D8D8;
  v1[14] = v15;
  [v12 appMetadataForBundleIDs:isa completion:v2];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100139C6C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_100139FCC;
  }
  else {
    uint64_t v2 = sub_100139D7C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100139D7C()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void *)(v0 + 120);

  if (!*(void *)(v1 + 16)) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10014A0BC(v3, v2);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  id v6 = *(id *)(*(void *)(v1 + 56) + 8 * v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v7 = [v6 eula];

  if (!v7)
  {
LABEL_7:
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = *(void *)(v0 + 136);
    if (v13)
    {
      uint64_t v15 = *(void *)(v0 + 128);
      int64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)int64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = sub_100158C6C(v15, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "EULA not available for clientID: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v8 = 0;
    unint64_t v10 = 0xE000000000000000;
    goto LABEL_11;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

LABEL_11:
  uint64_t v17 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v17(v8, v10);
}

uint64_t sub_100139FCC()
{
  uint64_t v1 = (void *)v0[20];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    char v5 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[10] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch EULA failed with error: %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10013A18C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100100D68(0, (unint64_t *)&unk_100271B98);
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10013A278(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 160) = v4;
  *(double *)(v5 + 144) = a3;
  *(double *)(v5 + 152) = a4;
  *(void *)(v5 + 128) = a1;
  *(void *)(v5 + 136) = a2;
  return _swift_task_switch(sub_10013A2A0, 0, 0);
}

uint64_t sub_10013A2A0()
{
  int64_t v16 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  v1[21] = [objc_allocWithZone((Class)AKIconContext) init];
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v1[22] = sub_1000D78F8(v3, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v1[17];
  if (v6)
  {
    uint64_t v8 = v1[16];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v1[10] = sub_100158C6C(v8, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetching app icon from AMS for clientID: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v10 = *(void **)(v1[20] + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  NSString v11 = String._bridgeToObjectiveC()();
  v1[23] = v11;
  Class isa = CGSize._bridgeToObjectiveC()().super.isa;
  v1[24] = isa;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_10013A588;
  uint64_t v13 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10013A8E0;
  v1[13] = &unk_10022D8C0;
  v1[14] = v13;
  [v10 appIconForBundleID:v11 size:isa completion:v2];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_10013A588()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 200) = v1;
  if (v1) {
    uint64_t v2 = sub_10013A714;
  }
  else {
    uint64_t v2 = sub_10013A698;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013A698()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 120);

  uint64_t v3 = *(void **)(v0 + 168);
  if (v2)
  {

    uint64_t v3 = v2;
  }
  uint64_t v4 = *(uint64_t (**)(void *))(v0 + 8);
  return v4(v3);
}

uint64_t sub_10013A714()
{
  uint64_t v1 = (void *)v0[24];
  uint64_t v2 = (void *)v0[23];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[10] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch app icon failed with error: %@", v5, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (void *)v0[21];

  swift_willThrow();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10013A8E0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_1001429A4((uint64_t)&v11, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10013AB34(int a1, void *aBlock, double a3, double a4, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v5[4] = v10;
  id v12 = a5;
  uint64_t v13 = swift_task_alloc();
  v5[5] = v13;
  *(void *)uint64_t v13 = v5;
  *(void *)(v13 + 8) = sub_10013AC34;
  *(void *)(v13 + 160) = v12;
  *(double *)(v13 + 144) = a3;
  *(double *)(v13 + 152) = a4;
  *(void *)(v13 + 128) = v9;
  *(void *)(v13 + 136) = v11;
  return _swift_task_switch(sub_10013A2A0, 0, 0);
}

uint64_t sub_10013AC34(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_10013ADF0(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return _swift_task_switch(sub_10013AE14, 0, 0);
}

uint64_t sub_10013AE14()
{
  uint64_t v1 = *(void **)(v0[17] + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[18] = v2;
  v0[2] = v0;
  v0[7] = v0 + 20;
  v0[3] = sub_10013AF3C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001394A0;
  v0[13] = &unk_10022D8A8;
  v0[14] = v3;
  [v1 cancelAppIconRequestForBundleID:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10013AF3C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    NSString v2 = sub_10013B0B0;
  }
  else {
    NSString v2 = sub_10013B04C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013B04C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013B0B0()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10013B29C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10011B7F0;
  v9[16] = v7;
  v9[17] = v8;
  v9[15] = v5;
  return _swift_task_switch(sub_10013AE14, 0, 0);
}

uint64_t sub_10013B388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_10013B3AC, 0, 0);
}

uint64_t sub_10013B3AC()
{
  uint64_t v1 = sub_1001424D8(*(void *)(v0 + 128));
  *(void *)(v0 + 160) = v1;
  if (v1[2])
  {
    uint64_t v2 = swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    *(void *)uint64_t v2 = v0;
    *(void *)(v2 + 8) = sub_10013B56C;
    uint64_t v3 = *(void *)(v0 + 136);
    *(_OWORD *)(v2 + 136) = *(_OWORD *)(v0 + 144);
    *(void *)(v2 + 128) = v3;
    return _swift_task_switch(sub_10013C340, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No primary applications found, unable to update primary apps metadata.", v7, 2u);
      swift_slowDealloc();
    }

    id v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10013B56C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10013BC3C;
  }
  else {
    uint64_t v4 = sub_10013B680;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013B680()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 160);
  if (*(void *)(v1 + 16) <= *(void *)(v2 + 16) >> 3)
  {
    id v8 = *(unint64_t **)(v0 + 160);
    sub_100140724(v1);
    swift_bridgeObjectRelease();
    uint64_t v3 = v8;
  }
  else
  {
    uint64_t v3 = sub_1001408CC(*(void *)(v0 + 176), v2);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 192) = v3;
  if (v3[2])
  {
    uint64_t v4 = swift_task_alloc();
    *(void *)(v0 + 200) = v4;
    *(void *)uint64_t v4 = v0;
    *(void *)(v4 + 8) = sub_10013B7D4;
    uint64_t v5 = *(void *)(v0 + 136);
    *(_OWORD *)(v4 + 152) = *(_OWORD *)(v0 + 144);
    *(void *)(v4 + 136) = v3;
    *(void *)(v4 + 144) = v5;
    return _swift_task_switch(sub_10013CA70, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_10013B7D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 208) = a1;
    return _swift_task_switch(sub_10013B940, 0, 0);
  }
}

uint64_t sub_10013B940()
{
  uint64_t v1 = *(void **)(v0[19] + OBJC_IVAR___AKAccountsMetadataController_localStorageController);
  sub_100100D68(0, (unint64_t *)&unk_100271B98);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[27] = isa;
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  v0[28] = v3;
  v0[2] = v0;
  v0[7] = v0 + 30;
  v0[3] = sub_10013BAC4;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001394A0;
  v0[13] = &unk_10022D890;
  v0[14] = v4;
  [v1 updatePrimaryAppsWithAMSAppMetadata:isa withAltDSID:v3 withCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10013BAC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 232) = v1;
  if (v1) {
    uint64_t v2 = sub_10013BCA0;
  }
  else {
    uint64_t v2 = sub_10013BBD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013BBD4()
{
  uint64_t v1 = *(void **)(v0 + 216);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10013BC3C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013BCA0()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = (void *)v0[27];
  swift_willThrow();

  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000D78F8(v3, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Storing primary apps metadata failed with error: %@", v6, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10013C034(int a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_100100D68(0, &qword_100271B88);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  id v10 = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10013C158;
  v11[18] = v9;
  v11[19] = v10;
  v11[16] = v6;
  v11[17] = v7;
  return _swift_task_switch(sub_10013B3AC, 0, 0);
}

uint64_t sub_10013C158()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  os_log_type_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10013C31C(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return _swift_task_switch(sub_10013C340, 0, 0);
}

uint64_t sub_10013C340()
{
  uint64_t v1 = *(void **)(v0[18] + OBJC_IVAR___AKAccountsMetadataController_localStorageController);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[19] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10013C468;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10013C964;
  v0[13] = &unk_10022D878;
  v0[14] = v3;
  [v1 fetchAllPrimaryApplicationMetadataForAltDSID:v2 withCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10013C468()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    NSString v2 = sub_10013C8F4;
  }
  else {
    NSString v2 = sub_10013C578;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013C578()
{
  unint64_t v1 = *(void *)(v0 + 120);

  if (v1 >> 62) {
    goto LABEL_36;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  if (v2)
  {
    unint64_t v32 = v0;
    unint64_t v3 = 0;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v3 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          swift_bridgeObjectRetain();
          uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        id v4 = *(id *)(v1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      unint64_t v0 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_35;
      }
      id v6 = [v4 bundleId];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      swift_bridgeObjectRelease();
      uint64_t v10 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0) {
        uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
      }
      if (!v10) {
        goto LABEL_5;
      }
      id v11 = [v5 appName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      swift_bridgeObjectRelease();
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
      }
      if (v15
        && (id v16 = [v5 appDeveloperName]) != 0
        && (v16, (id v17 = [v5 adamID]) != 0))
      {

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
LABEL_5:
      }
      ++v3;
      if (v0 == v2)
      {
        unint64_t v0 = v32;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
    || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v18) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v18 = _swiftEmptyArrayStorage[2];
    if (!v18) {
      goto LABEL_38;
    }
  }
  uint64_t result = sub_100141624(0, v18 & ~(v18 >> 63), 0);
  if (v18 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v20 = 0;
  do
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v21 = (id)_swiftEmptyArrayStorage[v20 + 4];
    }
    uint64_t v22 = v21;
    id v23 = [v21 bundleId];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    unint64_t v28 = _swiftEmptyArrayStorage[2];
    unint64_t v27 = _swiftEmptyArrayStorage[3];
    if (v28 >= v27 >> 1) {
      sub_100141624(v27 > 1, v28 + 1, 1);
    }
    ++v20;
    _swiftEmptyArrayStorage[2] = v28 + 1;
    unint64_t v29 = &_swiftEmptyArrayStorage[2 * v28];
    v29[4] = v24;
    v29[5] = v26;
  }
  while (v18 != v20);
LABEL_38:
  swift_release();
  uint64_t v30 = sub_100142440((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v31 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v31(v30);
}

uint64_t sub_10013C8F4()
{
  unint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10013C964(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10013C978(a1, a2, a3, (unint64_t *)&unk_100271B98);
}

uint64_t sub_10013C978(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v6 = swift_allocError();
    void *v7 = a3;
    id v8 = a3;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    sub_100100D68(0, a4);
    **(void **)(*(void *)(v4 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10013CA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  return _swift_task_switch(sub_10013CA70, 0, 0);
}

uint64_t sub_10013CA70()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_100141940(v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___AKAccountsMetadataController_mediaServicesController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[21] = isa;
  swift_release();
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10013CBC4;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10013A18C;
  v0[13] = &unk_10022D860;
  v0[14] = v5;
  [v3 appMetadataForBundleIDs:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10013CBC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_10013D068;
  }
  else {
    uint64_t v2 = sub_10013CCD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013CCD4()
{
  uint64_t v1 = *(void *)(v0 + 120);

  *(void *)(v0 + 184) = v1;
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_100139558(v3);
  unint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v0 + 136);
  if (*(void *)(v4 + 16) <= v5 >> 3)
  {
    uint64_t v12 = *(unint64_t **)(v0 + 136);
    swift_bridgeObjectRetain();
    sub_100140724(v4);
    swift_bridgeObjectRelease();
    uint64_t v7 = v12;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1001408CC(v4, v6);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 192) = v7;
  if (v7[2])
  {
    uint64_t v8 = swift_task_alloc();
    *(void *)(v0 + 200) = v8;
    *(void *)uint64_t v8 = v0;
    *(void *)(v8 + 8) = sub_10013CE60;
    uint64_t v9 = *(void *)(v0 + 144);
    *(_OWORD *)(v8 + 144) = *(_OWORD *)(v0 + 152);
    *(void *)(v8 + 128) = v7;
    *(void *)(v8 + 136) = v9;
    return _swift_task_switch(sub_10013D3D0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v10(v1);
  }
}

uint64_t sub_10013CE60(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v3[23];
    uint64_t v6 = (uint64_t (*)(uint64_t))v4[1];
    return v6(v5);
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10013CFE0, 0, 0);
  }
}

uint64_t sub_10013CFE0()
{
  uint64_t v1 = v0[26];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = sub_10013983C(v1, v0[23]);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = v0[23];
  }
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_10013D068()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();

  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching app metadata from AMS failed with error: %@", v5, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 184) = &_swiftEmptyDictionarySingleton;
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100139558(v9);
  unint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v0 + 136);
  if (*(void *)(v10 + 16) <= v11 >> 3)
  {
    uint64_t v18 = *(unint64_t **)(v0 + 136);
    swift_bridgeObjectRetain();
    sub_100140724(v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1001408CC(v10, v12);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 192) = v13;
  if (v13[2])
  {
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 200) = v14;
    *(void *)uint64_t v14 = v0;
    *(void *)(v14 + 8) = sub_10013CE60;
    uint64_t v15 = *(void *)(v0 + 144);
    *(_OWORD *)(v14 + 144) = *(_OWORD *)(v0 + 152);
    *(void *)(v14 + 128) = v13;
    *(void *)(v14 + 136) = v15;
    return _swift_task_switch(sub_10013D3D0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v16 = *(uint64_t (**)(void *))(v0 + 8);
    return v16(&_swiftEmptyDictionarySingleton);
  }
}

uint64_t sub_10013D3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_10013D3D0, 0, 0);
}

uint64_t sub_10013D3D0()
{
  id v16 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000D78F8(v3, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v15 = v7;
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v1[10] = sub_100158C6C(v8, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Using WWDR client names for bundleIDs : %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v11 = *(void **)(v1[19] + OBJC_IVAR___AKAccountsMetadataController_localStorageController);
  NSString v12 = String._bridgeToObjectiveC()();
  v1[20] = v12;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_10013D69C;
  uint64_t v13 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_100139828;
  v1[13] = &unk_10022D848;
  v1[14] = v13;
  [v11 fetchAllDeveloperTeamsAndApplicationsForAltDSID:v12 withCompletion:v2];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_10013D69C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_10013D854;
  }
  else {
    uint64_t v2 = sub_10013D7AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10013D7AC()
{
  unint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);

  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100142870((uint64_t)&_swiftEmptyDictionarySingleton, v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_10013D854()
{
  unint64_t v1 = *(void **)(v0 + 160);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_10013D8C4(uint64_t *a1, id *a2, uint64_t a3)
{
  id v4 = [*a2 apps];
  sub_100100D68(0, (unint64_t *)&qword_1002707A8);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v6 = 0;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v33 = v5 + 64;
  uint64_t v36 = v5;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v13 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v13 < v34)
    {
      unint64_t v14 = *(void *)(v33 + 8 * v13);
      ++v6;
      if (v14) {
        goto LABEL_22;
      }
      int64_t v6 = v13 + 1;
      if (v13 + 1 >= v34) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v6);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v6 = v13 + 2;
      if (v13 + 2 >= v34) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v6);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v6 = v13 + 3;
      if (v13 + 3 >= v34) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v6);
      if (v14)
      {
LABEL_22:
        unint64_t v10 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v6 << 6); ; unint64_t i = v11 | (v6 << 6))
        {
          id v16 = *(id *)(*(void *)(v36 + 56) + 8 * i);
          id v17 = [v16 clientID];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          LOBYTE(v17) = sub_1001396F0(v18, v20, a3);
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {

            if (!v10) {
              goto LABEL_7;
            }
            goto LABEL_6;
          }
          id v21 = [objc_allocWithZone((Class)AKAppiTunesMetadata) init];
          NSString v22 = [v16 clientID];
          if (!v22)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v22 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          [v21 setBundleId:v22];

          id v23 = [v16 clientName];
          if (v23)
          {
            NSString v24 = v23;
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 1280070990 && v25 == 0xE400000000000000)
            {

              swift_bridgeObjectRelease();
            }
            else
            {
              char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v26 & 1) == 0) {
                goto LABEL_34;
              }
            }
          }
          NSString v24 = [v16 clientID];
          if (!v24)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v24 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
LABEL_34:
          [v21 setAppName:v24];

          id v27 = [v16 clientID];
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v30 = v29;

          id v31 = v21;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v37 = *a1;
          *a1 = 0x8000000000000000;
          sub_10013F18C((uint64_t)v31, v28, v30, isUniquelyReferenced_nonNull_native, &qword_100271B80);
          *a1 = v37;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v10) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v11 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      int64_t v15 = v13 + 4;
      if (v15 < v34)
      {
        unint64_t v14 = *(void *)(v33 + 8 * v15);
        if (v14)
        {
          int64_t v6 = v15;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v6 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_38;
          }
          if (v6 >= v34) {
            break;
          }
          unint64_t v14 = *(void *)(v33 + 8 * v6);
          ++v15;
          if (v14) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_36:
    swift_release();
    return;
  }
  __break(1u);
LABEL_38:
  __break(1u);
}

id sub_10013DD10()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountsMetadataController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountsMetadataController()
{
  return self;
}

uint64_t sub_10013DDC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D70C8((uint64_t *)&unk_100271D10);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      id v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      NSString v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000D7CC4(v24, v35);
      }
      else
      {
        sub_1000D7C68((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      int64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *int64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000D7CC4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10013E0C4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D70C8((uint64_t *)&unk_100271C10);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    NSString v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  NSString v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *NSString v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10013E3EC(uint64_t a1, char a2)
{
  return sub_10013EA28(a1, a2, &qword_100271C20);
}

uint64_t sub_10013E3F8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D70C8(&qword_100270950);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10013E710(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000D70C8((uint64_t *)&unk_100271E10);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_10013EA28(uint64_t a1, char a2, uint64_t *a3)
{
  id v4 = v3;
  uint64_t v6 = *v3;
  sub_1000D70C8(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  char v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          id v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  id v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v4 = v8;
  return result;
}

_OWORD *sub_10013ED34(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10014A0BC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10013F3C8();
      goto LABEL_7;
    }
    sub_10013DDC4(v15, a4 & 1);
    unint64_t v21 = sub_10014A0BC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_1000E2354((uint64_t)v19);
    return sub_1000D7CC4(a1, v19);
  }
LABEL_13:
  sub_10013F314(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10013EE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10014A0BC(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10013F5B0();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10013E0C4(v17, a5 & 1);
  unint64_t v23 = sub_10014A0BC(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a3;
  v25[1] = a4;
  char v26 = (void *)(v20[7] + 16 * v14);
  *char v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void sub_10013F010(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_10013F01C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10014A0BC(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10013F930();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10013E710(v15, a4 & 1);
  unint64_t v21 = sub_10014A0BC(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void sub_10013F18C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10014A0BC(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10013FAE8(a5);
LABEL_7:
    unint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10013EA28(v17, a4 & 1, a5);
  unint64_t v22 = sub_10014A0BC(a2, a3);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  unint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  swift_bridgeObjectRetain();
}

_OWORD *sub_10013F314(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000D7CC4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_10013F380(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_10013F3C8()
{
  unint64_t v1 = v0;
  sub_1000D70C8((uint64_t *)&unk_100271D10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000D7C68(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_1000D7CC4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10013F5B0()
{
  unint64_t v1 = v0;
  sub_1000D70C8((uint64_t *)&unk_100271C10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10013F76C()
{
  return sub_10013FAE8(&qword_100271C20);
}

void *sub_10013F778()
{
  unint64_t v1 = v0;
  sub_1000D70C8(&qword_100270950);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10013F930()
{
  unint64_t v1 = v0;
  sub_1000D70C8((uint64_t *)&unk_100271E10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10013FAE8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000D70C8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10013FC94(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100140124(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10013FE44()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000D70C8(&qword_100271B90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

Swift::Int sub_100140124(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10013FE44();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1001402C0();
      goto LABEL_22;
    }
    sub_100140474();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1001402C0()
{
  unint64_t v1 = v0;
  sub_1000D70C8(&qword_100271B90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100140474()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000D70C8(&qword_100271B90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100140724(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    int64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_100140D3C(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_1001408CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_1000FBD5C();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    unint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        unint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_100140ECC((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_1000FBD5C();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_100140ECC((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_1000FBD5C();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100140D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001402C0();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10014145C(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t *sub_100140ECC(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1001411C4(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          id v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1001411C4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000D70C8(&qword_100271B90);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_10014145C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100141624(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100141664(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100141644(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001417D0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100141664(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D70C8(&qword_100270970);
    Swift::Int v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    Swift::Int v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001417D0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D70C8((uint64_t *)&unk_100270470);
    Swift::Int v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    Swift::Int v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100141940(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000D70C8(&qword_100270970);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100142060((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000FBD5C();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100141A28(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1000D70C8((uint64_t *)&unk_100272130);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_100141E4C((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_100141B20(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100142260();
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  unint64_t v13 = (void *)*a5;
  unint64_t v15 = sub_10014A0BC(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      unint64_t v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_10013FAE8(&qword_100271B80);
      unint64_t v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v27 = (uint64_t *)(v22[6] + 16 * v15);
    *uint64_t v27 = v10;
    v27[1] = v11;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v28 = v22[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v22[2] = v30;
LABEL_13:
    sub_100142260();
    if (v32)
    {
      uint64_t v34 = v31;
      uint64_t v35 = v32;
      int64_t v36 = v33;
      do
      {
        v43 = (void *)*a5;
        unint64_t v44 = sub_10014A0BC(v34, v35);
        uint64_t v46 = v43[2];
        BOOL v47 = (v45 & 1) == 0;
        BOOL v29 = __OFADD__(v46, v47);
        uint64_t v48 = v46 + v47;
        if (v29) {
          goto LABEL_24;
        }
        char v49 = v45;
        if (v43[3] < v48)
        {
          sub_10013EA28(v48, 1, &qword_100271B80);
          unint64_t v44 = sub_10014A0BC(v34, v35);
          if ((v49 & 1) != (v50 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v51 = (void *)*a5;
        if (v49)
        {
          uint64_t v37 = 8 * v44;
          id v38 = *(id *)(v51[7] + 8 * v44);
          swift_bridgeObjectRelease();

          uint64_t v39 = v51[7];
          *(void *)(v39 + v37) = v38;
        }
        else
        {
          v51[(v44 >> 6) + 8] |= 1 << v44;
          uint64_t v52 = (uint64_t *)(v51[6] + 16 * v44);
          *uint64_t v52 = v34;
          v52[1] = v35;
          *(void *)(v51[7] + 8 * v44) = v36;
          uint64_t v53 = v51[2];
          BOOL v29 = __OFADD__(v53, 1);
          uint64_t v54 = v53 + 1;
          if (v29) {
            goto LABEL_25;
          }
          v51[2] = v54;
        }
        sub_100142260();
        uint64_t v34 = v40;
        uint64_t v35 = v41;
        int64_t v36 = v42;
      }
      while (v41);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000FBD5C();
    return swift_release();
  }
  sub_10013EA28(v18, a4 & 1, &qword_100271B80);
  unint64_t v20 = sub_10014A0BC(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    unint64_t v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    unint64_t v23 = v12;
    uint64_t v24 = 8 * v15;
    id v25 = *(id *)(v22[7] + 8 * v15);
    swift_bridgeObjectRelease();

    uint64_t v26 = v22[7];
    *(void *)(v26 + v24) = v25;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100141E4C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100142FA4();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_1000D70C8(&qword_100271C28);
          uint64_t v12 = sub_100108ECC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100100D68(0, (unint64_t *)&qword_100271600);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100142060(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_100142260()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    int64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              unint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

id sub_1001423F4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();

  return v4;
}

uint64_t sub_100142440(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    id v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10013FC94(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void *sub_1001424D8(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v41 = &_swiftEmptySetSingleton;
  if (a1 >> 62) {
    goto LABEL_49;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    return &_swiftEmptySetSingleton;
  }
  while (1)
  {
    unint64_t v3 = 0;
    uint64_t v36 = v2;
    unint64_t v37 = v1 & 0xC000000000000001;
    uint64_t v35 = v1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v34 = (char **)(v1 + 32);
    unint64_t v1 = (unint64_t)&selRef_messageId;
LABEL_5:
    if (v37)
    {
      id v4 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v5 = __OFADD__(v3, 1);
      unint64_t v6 = v3 + 1;
      if (!v5) {
        break;
      }
      goto LABEL_47;
    }
    if (v3 >= *(void *)(v35 + 16)) {
      goto LABEL_48;
    }
    id v4 = v34[v3];
    BOOL v5 = __OFADD__(v3, 1);
    unint64_t v6 = v3 + 1;
    if (!v5) {
      break;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_50;
    }
  }
  id v38 = v4;
  unint64_t v39 = v6;
  id v7 = objc_msgSend(v4, "apps", v34);
  sub_100100D68(0, (unint64_t *)&qword_1002707A8);
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v9 = 0;
  uint64_t v10 = v8 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v8 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v9 << 6);
      goto LABEL_35;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v21 >= v14) {
      goto LABEL_4;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_4;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v14) {
          goto LABEL_4;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v9);
        if (!v22)
        {
          int64_t v9 = v21 + 3;
          if (v21 + 3 >= v14) {
            goto LABEL_4;
          }
          unint64_t v22 = *(void *)(v10 + 8 * v9);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_34:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_35:
    id v24 = *(id *)(*(void *)(v8 + 56) + 8 * v20);
    id v25 = [v24 primaryClientID];
    if (!v25) {
      goto LABEL_16;
    }

    id v26 = [v24 primaryClientID];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;

      if (v28 == 1280070990 && v30 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_16:
        id v15 = [v24 clientID];
        Swift::Int v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v18 = v17;

        sub_10013FC94(&v40, v16, v18);
        swift_bridgeObjectRelease();
        continue;
      }
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v32) {
        goto LABEL_16;
      }
    }
  }
  int64_t v23 = v21 + 4;
  if (v23 < v14)
  {
    unint64_t v22 = *(void *)(v10 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v9 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_46;
        }
        if (v9 >= v14) {
          goto LABEL_4;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v9);
        ++v23;
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    int64_t v9 = v23;
    goto LABEL_34;
  }
LABEL_4:

  swift_release();
  unint64_t v3 = v39;
  if (v39 != v36) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_100142870(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)a1;
  uint64_t v13 = a1;
  if (a2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v9 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      unint64_t v6 = v9;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v12 = v9;
      sub_10013D8C4(&v13, &v12, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return (uint64_t)v6;
      }

      if (v10 == v7)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

uint64_t sub_1001429A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8((uint64_t *)&unk_100271BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100142A0C()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100142A5C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  BOOL v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_1000D7208;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_100271BB8 + dword_100271BB8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100142B24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100142BF0()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100142C38()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  unint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100271BC8 + dword_100271BC8);
  return v6(v2, v3, v4);
}

uint64_t sub_100142CF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100142DC0()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100142E08()
{
  uint64_t v2 = *((void *)v0 + 2);
  double v3 = v0[3];
  double v4 = v0[4];
  unint64_t v6 = (void *)*((void *)v0 + 5);
  uint64_t v5 = (void *)*((void *)v0 + 6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(int, void *, double, double, void *))((char *)&dword_100271BE8 + dword_100271BE8);
  return v8(v2, v6, v3, v4, v5);
}

uint64_t sub_100142ED8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

unint64_t sub_100142FA4()
{
  unint64_t result = qword_100271C30;
  if (!qword_100271C30)
  {
    sub_1000F0804(&qword_100271C28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100271C30);
  }
  return result;
}

unint64_t sub_100143000(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    double v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D70C8((uint64_t *)&unk_100271D10);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10014BB24(v6, (uint64_t)&v15, (uint64_t *)&unk_100270EF0);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10014A0BC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000D7CC4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100143138(uint64_t a1)
{
  return sub_1001433BC(a1, &qword_100271DF8);
}

unint64_t sub_100143144(uint64_t a1)
{
  return sub_1001434E0(a1, (uint64_t *)&unk_100271E00);
}

unint64_t sub_100143150(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D70C8(&qword_100270950);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_10014A0BC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10014326C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D70C8(&qword_100270938);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10014BB24(v6, (uint64_t)v15, &qword_100271DF0);
    unint64_t result = sub_10014A078((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000D7CC4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001433B0(uint64_t a1)
{
  return sub_1001433BC(a1, (uint64_t *)&unk_100271E10);
}

unint64_t sub_1001433BC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D70C8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10014A0BC(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001434D4(uint64_t a1)
{
  return sub_1001434E0(a1, &qword_100271C20);
}

unint64_t sub_1001434E0(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D70C8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_10014A0BC(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001435F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(void *, void *, unint64_t, void *))(a1 + 32);
  if (a3)
  {
    swift_retain();
    id v8 = a2;
    id v9 = v5;
    uint64_t v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;
  }
  else
  {
    swift_retain();
    id v12 = a2;
    unint64_t v11 = 0xF000000000000000;
  }
  id v13 = a4;
  v7(a2, v5, v11, a4);

  sub_1000D89D4((uint64_t)v5, v11);

  return swift_release();
}

uint64_t sub_1001436C0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

unint64_t sub_100143704(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000D70C8((uint64_t *)&unk_100271D10);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_1000FBD5C();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_10014AFF4(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_1000D7C68(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_10014AFF4((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_10014B050((uint64_t)v30);
      swift_bridgeObjectRelease();
      sub_1000FBD5C();
      swift_release();
      return 0;
    }
    sub_1000D7C68((uint64_t)v31 + 8, (uint64_t)v25);
    sub_10014B050((uint64_t)v30);
    sub_1000D7CC4(v25, v26);
    long long v27 = v24;
    sub_1000D7CC4(v26, v28);
    long long v16 = v27;
    sub_1000D7CC4(v28, v29);
    sub_1000D7CC4(v29, &v27);
    unint64_t result = sub_10014A0BC(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      id v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *id v8 = v16;
      id v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_1000E2354((uint64_t)v9);
      unint64_t result = (unint64_t)sub_1000D7CC4(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_1000D7CC4(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100143AC8()
{
  uint64_t v0 = NSHomeDirectory();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  swift_bridgeObjectRetain();
  v4._object = (void *)0x80000001001C55A0;
  v4._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v4);
  uint64_t result = swift_bridgeObjectRelease();
  qword_100271C40 = v1;
  *(void *)algn_100271C48 = v3;
  return result;
}

id sub_100143B58()
{
  if (qword_10026F9D0 != -1) {
    swift_once();
  }
  id v0 = objc_allocWithZone((Class)type metadata accessor for DeviceListStoreMigrator());
  swift_bridgeObjectRetain();
  id v1 = [v0 init];
  id v2 = objc_allocWithZone((Class)AKSQLiteExecutor);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithDatabasePath:v3 migrationController:v1];

  unint64_t v5 = (objc_class *)type metadata accessor for DeviceListStoreManager();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR___AKDeviceListStoreManager_executor] = v4;
  type metadata accessor for DeviceListProvider();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v4;
  *(void *)&v6[OBJC_IVAR___AKDeviceListStoreManager_deviceListProvider] = v7;
  type metadata accessor for DeletedDeviceListProvider();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  *(void *)&v6[OBJC_IVAR___AKDeviceListStoreManager_deletedDeviceListProvider] = v8;
  v11.receiver = v6;
  v11.super_class = v5;
  id v9 = v4;
  id result = objc_msgSendSuper2(&v11, "init");
  qword_1002744C0 = (uint64_t)result;
  return result;
}

uint64_t sub_100143D24()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100143DB4, 0, 0);
}

uint64_t sub_100143DB4()
{
  uint64_t v1 = v0;
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274460);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DeviceListStoreManager - Begin clearing database", v5, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[3];

  uint64_t v7 = *(void **)(v6 + OBJC_IVAR___AKDeviceListStoreManager_executor);
  v0[2] = 0;
  [v7 wipeDatabase:v0 + 2];
  uint64_t v8 = (void *)v0[2];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      int64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v12 = 138412290;
      v1[2] = v9;
      id v13 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v8;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Clearing database failed with error %@", v12, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_willThrow();

    unint64_t v17 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      long long v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "DeviceListStoreManager - Cleared database successfully", v16, 2u);
      swift_slowDealloc();
    }

    unint64_t v17 = (uint64_t (*)(void))v0[1];
  }
  return v17();
}

uint64_t sub_100144274(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  unint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100144338;
  v5[3] = v4;
  return _swift_task_switch(sub_100143DB4, 0, 0);
}

uint64_t sub_100144338()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  unint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  id v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1001444BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100144584, 0, 0);
}

uint64_t sub_100144584()
{
  uint64_t v43 = v0;
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v2 = (id *)(v0 + 56);
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = sub_1000D78F8(v5, (uint64_t)qword_100274460);
  *(void *)(v0 + 120) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  id v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  uint64_t v10 = &selRef_ak_addCustodianSyncActionHeader;
  if (os_log_type_enabled(v8, v9))
  {
    id v11 = *v2;
    int64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)int64_t v12 = 136315138;
    id v13 = [v11 altDSID];
    if (!v13)
    {

      __break(1u);
      return _swift_task_switch(v32, v33, v34);
    }
    unint64_t v14 = v13;
    uint64_t v38 = v0 + 48;
    uint64_t v39 = *(void *)(v0 + 104);
    uint64_t v40 = *(void *)(v0 + 96);
    uint64_t v41 = *(void *)(v0 + 112);
    os_log_type_t v15 = *(void **)(v0 + 56);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    *(void *)(v0 + 48) = sub_100158C6C(v16, v18, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "DeviceListStoreManager - Fetching device list for altDSID %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
    uint64_t v10 = &selRef_ak_addCustodianSyncActionHeader;
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 104);
    uint64_t v19 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 96);
    int64_t v22 = *(void **)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  uint64_t v23 = *(void **)(v0 + 64);
  id v24 = objc_msgSend(*(id *)(v0 + 56), v10[96], v38);
  LODWORD(v23) = [v23 isHSA2EnabledForAltDSID:v24];

  if (!v23
    || ([*v2 includeFamilyDevices] & 1) != 0
    || ([*v2 isForceFetch] & 1) != 0)
  {
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      long long v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not eligible for device cache. Fetching from server instead.", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = swift_task_alloc();
    *(void *)(v0 + 144) = v28;
    *(void *)uint64_t v28 = v0;
    *(void *)(v28 + 8) = sub_100144B04;
    long long v29 = *(_OWORD *)(v0 + 56);
    long long v30 = *(_OWORD *)(v0 + 72);
    *(void *)(v28 + 80) = *(void *)(v0 + 88);
    *(_OWORD *)(v28 + 48) = v29;
    *(_OWORD *)(v28 + 64) = v30;
    uint64_t v31 = sub_100145054;
  }
  else
  {
    uint64_t v35 = swift_task_alloc();
    *(void *)(v0 + 128) = v35;
    *(void *)uint64_t v35 = v0;
    *(void *)(v35 + 8) = sub_1001449AC;
    uint64_t v36 = *(void *)(v0 + 56);
    *(_OWORD *)(v35 + 32) = *(_OWORD *)(v0 + 80);
    *(void *)(v35 + 24) = v36;
    uint64_t v31 = sub_100146D00;
  }
  uint64_t v32 = v31;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  return _swift_task_switch(v32, v33, v34);
}

uint64_t sub_1001449AC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_100144C30, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_100144B04(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v5 = swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t sub_100144C30()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DeviceListStoreManager - Failed to fetch devices from cache with error %@. Trying server now.", v3, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 152) = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = sub_100144E30;
  long long v7 = *(_OWORD *)(v0 + 56);
  long long v8 = *(_OWORD *)(v0 + 72);
  *(void *)(v6 + 80) = *(void *)(v0 + 88);
  *(_OWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v6 + 64) = v8;
  return _swift_task_switch(sub_100145054, 0, 0);
}

uint64_t sub_100144E30(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100144FC0;
  }
  else {
    uint64_t v4 = sub_100144F4C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100144F4C()
{
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100144FC0()
{
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014502C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  return _swift_task_switch(sub_100145054, 0, 0);
}

uint64_t sub_100145054()
{
  if ([*(id *)(v0 + 48) type] == (id)2)
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_1000D78F8(v1, (uint64_t)qword_100274460);
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch device list context is cache only. Skipping fetch from server.", v4, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for DeviceListError(0);
    *(void *)(v0 + 40) = -14008;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E905C();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    *(void *)(v0 + 88) = sub_1000D78F8(v7, (uint64_t)qword_100274460);
    long long v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "DeviceListStoreManager - Begin fetching device list from server", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);

    uint64_t v13 = swift_task_alloc();
    *(void *)(v0 + 96) = v13;
    *(void *)(v13 + 16) = v11;
    *(void *)(v13 + 24) = v12;
    unint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v14;
    uint64_t v15 = sub_100100D68(0, &qword_100271CE0);
    *unint64_t v14 = v0;
    v14[1] = sub_10014537C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000002BLL, 0x80000001001C5550, sub_10014AE7C, v13, v15);
  }
}

uint64_t sub_10014537C()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_100145798;
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v2 = sub_100145498;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100145498()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 120) = v1;
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DeviceListStoreManager - Finished fetching device list from server", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = *(void **)(v0 + 48);
  uint64_t v5 = *(void **)(v0 + 56);

  id v7 = [v6 altDSID];
  LODWORD(v5) = [v5 isHSA2EnabledForAltDSID:v7];

  if (v5 && ([*(id *)(v0 + 48) includeFamilyDevices] & 1) == 0)
  {
    unint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v18;
    *unint64_t v18 = v0;
    v18[1] = sub_1001457FC;
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 48);
    v18[10] = v1;
    v18[11] = v19;
    v18[9] = v20;
    return _swift_task_switch(sub_100148B8C, 0, 0);
  }
  else
  {
    id v8 = *(id *)(v0 + 48);
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void **)(v0 + 48);
    if (v11)
    {
      uint64_t v21 = v1;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      unint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v0 + 24) = v12;
      id v15 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v14 = v12;

      uint64_t v1 = v21;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "DeviceListStoreManager - Cache is not supported for context - %@", v13, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v16(v1);
  }
}

uint64_t sub_100145798()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001457FC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100145AF4;
  }
  else
  {
    uint64_t v4 = swift_task_alloc();
    *(void *)(v2 + 144) = v4;
    *(void *)uint64_t v4 = v2;
    *(void *)(v4 + 8) = sub_100145964;
    uint64_t v5 = *(void *)(v2 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v2 + 72);
    *(void *)(v4 + 24) = v5;
    uint64_t v3 = sub_100146D00;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100145964(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100145B58;
  }
  else
  {
    *(void *)(v4 + 160) = a1;
    uint64_t v5 = sub_100145A8C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100145A8C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100145AF4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100145B58()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100145D5C(void *a1, void *a2, void *a3, void *a4, void *aBlock, void *a6)
{
  v6[5] = a4;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  v6[7] = _Block_copy(aBlock);
  id v12 = a1;
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  a6;
  uint64_t v16 = (void *)swift_task_alloc();
  v6[8] = v16;
  *uint64_t v16 = v6;
  v16[1] = sub_100145E60;
  return sub_1001444BC((uint64_t)v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15);
}

uint64_t sub_100145E60(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 48);
  uint64_t v7 = *(void **)(*v2 + 40);
  id v8 = *(void **)(*v2 + 32);
  os_log_type_t v9 = *(void **)(*v2 + 24);
  os_log_type_t v10 = *(void **)(*v2 + 16);
  uint64_t v11 = *v2;
  swift_task_dealloc();

  id v12 = *(void (***)(void, void, void))(v5 + 56);
  if (v3)
  {
    id v13 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v12)[2](v12, 0, v13);

    _Block_release(v12);
  }
  else
  {
    ((void (**)(void, void *, void))v12)[2](*(void *)(v5 + 56), a1, 0);
    _Block_release(v12);
  }
  id v14 = *(uint64_t (**)(void))(v11 + 8);
  return v14();
}

uint64_t sub_1001461EC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100146278, 0, 0);
}

uint64_t sub_100146278()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10014631C;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_1000E7A60(v2);
}

uint64_t sub_10014631C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100146554;
  }
  else
  {
    *(unsigned char *)(v4 + 72) = a1 & 1;
    uint64_t v5 = sub_100146448;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100146448()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v2;
    void *v2 = v0;
    v2[1] = sub_100146600;
    uint64_t v3 = *(void *)(v0 + 16);
    return sub_1000E7A60(v3);
  }
  else
  {

    (*(void (**)(void))(*(void *)(v0 + 32) + 16))();
    _Block_release(*(const void **)(v0 + 32));
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_100146554()
{
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);

  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v3);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100146600()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100146770, 0, 0);
  }
  else
  {
    uint64_t v3 = *(void **)(v2 + 24);

    (*(void (**)(void))(*(void *)(v2 + 32) + 16))();
    _Block_release(*(const void **)(v2 + 32));
    uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

uint64_t sub_100146770()
{
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);

  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v3);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100146998(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100146A24, 0, 0);
}

uint64_t sub_100146A24()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100146AC8;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_1000FF7A8(v2);
}

uint64_t sub_100146AC8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100146C34, 0, 0);
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + 24);
    uint64_t v3 = *(void *)(v2 + 32);

    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    _Block_release(*(const void **)(v2 + 32));
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t sub_100146C34()
{
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);

  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100146CDC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_100146D00, 0, 0);
}

uint64_t sub_100146D00()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274460);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DeviceListStoreManager - Begin fetching device list from cache", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[1].i64[1];
  int8x16_t v10 = v0[2];

  uint64_t v6 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v6;
  v6[1] = vextq_s8(v10, v10, 8uLL);
  v6[2].i64[0] = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v7;
  uint64_t v8 = sub_100100D68(0, &qword_100271CE0);
  void *v7 = v0;
  v7[1] = sub_100146ED8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(&v0[1], 0, 0, 0xD00000000000002ELL, 0x80000001001C5520, sub_10014AC84, v6, v8);
}

uint64_t sub_100146ED8()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100147010;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100146FF4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100146FF4()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100147010()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100147074(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = sub_1000D70C8(&qword_100271CE8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  int8x16_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = self;
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v11;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  *(void *)(v14 + v13) = a3;
  *(void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) = a4;
  aBlock[4] = sub_10014ADC4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001436C0;
  aBlock[3] = &unk_10022DAA8;
  id v15 = _Block_copy(aBlock);
  id v16 = a3;
  id v17 = a4;
  swift_release();
  [v19 performBlockAndWait:v15];
  _Block_release(v15);
}

void sub_10014728C(NSObject *a1, uint64_t a2, id a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v91 - v13;
  id v15 = a1 + 2;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = Strong;
    v93 = v12;
    id v18 = [a4 altDSID];
    if (v18)
    {
      id v19 = v18;
      id v20 = [a3 authKitAccountWithAltDSID:v18];

      uint64_t v96 = (uint64_t)v20;
      v97 = (void *)v17;
      if (v20)
      {
        uint64_t v94 = v9;
        uint64_t v95 = v8;
        swift_retain();
        uint64_t v32 = sub_100123230(a4);
        swift_release();
        swift_retain();
        uint64_t v40 = sub_1000FE294(a4);
        swift_release();
        sub_1000D70C8(&qword_10026FD78);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1001B9E80;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v42;
        id v43 = [a3 deviceListVersionForAccount:v96];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 48) = v44;
        *(void *)(inited + 56) = v46;
        *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 88) = v47;
        id v48 = [a4 altDSID];
        uint64_t v92 = a2;
        if (v48)
        {
          char v49 = v48;
          uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v52 = v51;
        }
        else
        {
          uint64_t v50 = 0;
          uint64_t v52 = 0;
        }
        uint64_t v53 = v94;
        *(void *)(inited + 120) = sub_1000D70C8(&qword_100271CF0);
        *(void *)(inited + 96) = v50;
        *(void *)(inited + 104) = v52;
        *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 136) = v54;
        uint64_t v55 = sub_1000D70C8(&qword_100271CF8);
        *(void *)(inited + 168) = v55;
        *(void *)(inited + 144) = v32;
        *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 184) = v56;
        *(void *)(inited + 216) = v55;
        *(void *)(inited + 192) = v40;
        unint64_t v57 = sub_100143000(inited);
        v58 = self;
        uint64_t v59 = swift_initStackObject();
        long long v91 = xmmword_1001B81D0;
        *(_OWORD *)(v59 + 16) = xmmword_1001B81D0;
        *(void *)(v59 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v59 + 40) = v60;
        sub_1000D70C8((uint64_t *)&unk_100271D00);
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = v91;
        *(void *)(v61 + 32) = v57;
        *(void *)(v59 + 72) = v55;
        *(void *)(v59 + 48) = v61;
        sub_100143000(v59);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v15 = [v58 deviceMapFromResponseBody:isa];

        sub_100100D68(0, &qword_100271CE0);
        uint64_t v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        id v64 = [a4 altDSID];
        if (v64)
        {
          v65 = v64;
          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v68 = v67;

          v69 = v97;
          if (*(void *)(v63 + 16) && (unint64_t v70 = sub_10014A0BC(v66, v68), (v71 & 1) != 0))
          {
            id v72 = *(id *)(*(void *)(v63 + 56) + 8 * v70);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v73 = [v72 deviceList];
            uint64_t v74 = v95;
            if (v73)
            {
              v75 = v73;
              sub_100100D68(0, &qword_100270AF0);
              unint64_t v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v76 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v77 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v77 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              if (v77)
              {
                if (qword_10026F9B0 != -1) {
                  swift_once();
                }
                sub_1000D78F8(v74, (uint64_t)qword_100274460);
                v78 = Logger.logObject.getter();
                os_log_type_t v79 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v78, v79))
                {
                  v80 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v80 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v78, v79, "DeviceListStoreManager - Finished fetching device list from cache", v80, 2u);
                  swift_slowDealloc();
                }

                uint64_t v99 = (uint64_t)v72;
                sub_1000D70C8(&qword_100271CE8);
                CheckedContinuation.resume(returning:)();
                goto LABEL_47;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v74 = v95;
          }
          v81 = v93;
          if (qword_10026F9B0 != -1) {
            swift_once();
          }
          uint64_t v82 = sub_1000D78F8(v74, (uint64_t)qword_100274460);
          (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v81, v82, v74);
          id v15 = a4;
          v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v83, v84))
          {

            (*(void (**)(char *, uint64_t))(v53 + 8))(v81, v74);
            goto LABEL_46;
          }
          v85 = (uint8_t *)swift_slowAlloc();
          uint64_t v99 = swift_slowAlloc();
          *(_DWORD *)v85 = 136315138;
          id v86 = [v15 altDSID];
          if (v86)
          {
            v87 = v86;
            *(void *)&long long v91 = v85 + 4;
            uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v90 = v89;

            uint64_t v98 = sub_100158C6C(v88, v90, &v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Device not found for altDSID %s", v85, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
            v69 = v97;
LABEL_46:
            type metadata accessor for DeviceListError(0);
            uint64_t v98 = -14002;
            sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
            sub_1000E905C();
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v98 = v99;
            sub_1000D70C8(&qword_100271CE8);
            CheckedContinuation.resume(throwing:)();
LABEL_47:

            uint64_t v39 = (void *)v96;
LABEL_22:

            return;
          }
          goto LABEL_52;
        }
LABEL_51:
        __break(1u);
LABEL_52:

        __break(1u);
        return;
      }
      if (qword_10026F9B0 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_1000D78F8(v8, (uint64_t)qword_100274460);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v24, v8);
      a3 = a4;
      id v15 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v25))
      {

        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        goto LABEL_16;
      }
      uint64_t v94 = v9;
      uint64_t v95 = v8;
      uint64_t v92 = a2;
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      uint64_t v99 = v96;
      *(_DWORD *)os_log_type_t v26 = 136315138;
      id v27 = [a3 altDSID];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        uint64_t v98 = sub_100158C6C(v29, v31, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v25, "Missing authkit account for altDSID %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v8 = v95;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v14, v95);
LABEL_16:
        type metadata accessor for DeviceListError(0);
        uint64_t v98 = -14006;
        sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
        sub_1000E905C();
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v33 = v99;
        swift_willThrow();
        if (qword_10026F9B0 != -1) {
          swift_once();
        }
        sub_1000D78F8(v8, (uint64_t)qword_100274460);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          unint64_t v37 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 138412290;
          swift_errorRetain();
          uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v99 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v37 = v38;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error %@ fetching device list from cache", v36, 0xCu);
          sub_1000D70C8((uint64_t *)&unk_10026FD80);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v99 = v33;
        sub_1000D70C8(&qword_100271CE8);
        CheckedContinuation.resume(throwing:)();
        uint64_t v39 = v97;
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_51;
  }
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  sub_1000D78F8(v8, (uint64_t)qword_100274460);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "DeviceListStoreManager - Missing instance", v23, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for DeviceListError(0);
  uint64_t v98 = -14001;
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E905C();
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v98 = v99;
  sub_1000D70C8(&qword_100271CE8);
  CheckedContinuation.resume(throwing:)();
}

uint64_t sub_100147FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  uint64_t v8 = (void *)swift_task_alloc();
  v5[6] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1001480C0;
  v8[4] = a3;
  v8[5] = v4;
  v8[3] = a2;
  return _swift_task_switch(sub_100146D00, 0, 0);
}

uint64_t sub_1001480C0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 56) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6(0);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v4 + 64) = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_100148258;
    v8[4] = *(void *)(v4 + 16);
    v8[5] = a1;
    return _swift_task_switch(sub_10014A300, 0, 0);
  }
}

uint64_t sub_100148258()
{
  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001483BC;
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[10] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1001484A0;
    uint64_t v5 = v2[7];
    v4[4] = v2[2];
    v4[5] = v5;
    uint64_t v3 = sub_10014A4C8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001483BC()
{
  sub_10014A670(0xD000000000000032, 0x80000001001C54A0, *(id *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
  swift_errorRelease();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001484A0;
  uint64_t v2 = *(void *)(v0 + 56);
  v1[4] = *(void *)(v0 + 16);
  v1[5] = v2;
  return _swift_task_switch(sub_10014A4C8, 0, 0);
}

uint64_t sub_1001484A0()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100148624;
  }
  else {
    uint64_t v2 = sub_1001485B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001485B4()
{
  BOOL v1 = *(void *)(v0 + 72) == 0;
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100148624()
{
  BOOL v1 = *(void **)(v0 + 56);
  sub_10014A670(0xD000000000000032, 0x80000001001C54E0, *(id *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));

  swift_errorRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_100148860(void *a1, void *a2, void *a3, void *a4, void *aBlock, void *a6)
{
  v6[5] = a4;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  v6[7] = _Block_copy(aBlock);
  id v12 = a1;
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  a6;
  id v16 = (void *)swift_task_alloc();
  v6[8] = v16;
  *id v16 = v6;
  v16[1] = sub_100148964;
  return sub_100147FFC((uint64_t)v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15);
}

uint64_t sub_100148964(char a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  uint64_t v6 = *(void **)(*v2 + 48);
  uint64_t v7 = *(void **)(*v2 + 40);
  uint64_t v8 = *(void **)(*v2 + 32);
  uint64_t v9 = *(void **)(*v2 + 24);
  uint64_t v10 = *(void **)(*v2 + 16);
  uint64_t v11 = *v2;
  swift_task_dealloc();

  uint64_t v12 = *(void *)(v4 + 56);
  if (v3)
  {
    id v13 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);
  }
  else
  {
    (*(void (**)(void, void, void))(v12 + 16))(*(void *)(v4 + 56), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v5 + 56));
  id v14 = *(uint64_t (**)(void))(v11 + 8);
  return v14();
}

uint64_t sub_100148B68(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  return _swift_task_switch(sub_100148B8C, 0, 0);
}

id sub_100148B8C()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274460);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Updating device list cache. Saving server response.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = (void *)v0[9];

  sub_1000D70C8(&qword_100271CB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001B81D0;
  id result = [v5 altDSID];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)v0[10];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = v9;
    id v13 = v9;
    unint64_t v14 = sub_1001434E0(inited, &qword_100271CC0);
    v0[12] = v14;
    id v15 = (void *)swift_task_alloc();
    v0[13] = v15;
    *id v15 = v0;
    v15[1] = sub_100148D7C;
    uint64_t v16 = v0[9];
    return (id)sub_100124924(v16, v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100148D7C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100148EC8, 0, 0);
  }
}

uint64_t sub_100148EC8()
{
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_100270AE8 + dword_100270AE8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100148F80;
  uint64_t v2 = *(void *)(v0 + 96);
  return v4(v2);
}

uint64_t sub_100148F80()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100149214(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100149304;
  v11[10] = v9;
  v11[11] = v10;
  v11[9] = v8;
  return _swift_task_switch(sub_100148B8C, 0, 0);
}

uint64_t sub_100149304()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 32);
  uint64_t v6 = *(void **)(*v1 + 24);
  uint64_t v7 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v3 + 40);
  if (v2)
  {
    id v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
  }
  _Block_release(*(const void **)(v4 + 40));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

id sub_1001494F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceListStoreManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceListStoreManager()
{
  return self;
}

void sub_1001495A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = sub_1000D70C8(&qword_100271CE8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v10 + ((v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  aBlock[4] = sub_10014AF2C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001435F8;
  aBlock[3] = &unk_10022DAF8;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = a3;
  swift_release();
  [a2 executeRequestWithCompletion:v11];
  _Block_release(v11);
}

void sub_100149768(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, id a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    sub_1000D78F8(v11, (uint64_t)qword_100274460);
    swift_errorRetain();
    swift_errorRetain();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v60 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed with server error %@", v17, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v60 = a4;
    swift_errorRetain();
    sub_1000D70C8(&qword_100271CE8);
LABEL_14:
    CheckedContinuation.resume(throwing:)();
    return;
  }
  if (a3 >> 60 == 15)
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    sub_1000D78F8(v11, (uint64_t)qword_100274460);
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing server response data", v22, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for DeviceListError(0);
    uint64_t v59 = -14004;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E905C();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v59 = v60;
    sub_1000D70C8(&qword_100271CE8);
    goto LABEL_14;
  }
  uint64_t v23 = self;
  sub_1001263E4(a2, a3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v25 = [v23 dictionaryFromObject:isa ofType:@"application/json"];

  if (!v25
    || (uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v25,
        unint64_t v27 = sub_100143704(v26),
        swift_bridgeObjectRelease(),
        !v27))
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    sub_1000D78F8(v11, (uint64_t)qword_100274460);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing response parameters", v43, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for DeviceListError(0);
    uint64_t v59 = -14005;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E905C();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v59 = v60;
    sub_1000D70C8(&qword_100271CE8);
    goto LABEL_33;
  }
  uint64_t v58 = a5;
  uint64_t v28 = self;
  Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v30 = [v28 deviceMapFromResponseBody:v29];

  sub_100100D68(0, &qword_100271CE0);
  uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v32 = [a6 altDSID];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    if (*(void *)(v31 + 16))
    {
      unint64_t v37 = sub_10014A0BC(v34, v36);
      if (v38)
      {
        id v39 = *(id *)(*(void *)(v31 + 56) + 8 * v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v60 = (uint64_t)v39;
        id v40 = v39;
        sub_1000D70C8(&qword_100271CE8);
        CheckedContinuation.resume(returning:)();
        sub_1000D89D4(a2, a3);

        return;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_1000D78F8(v11, (uint64_t)qword_100274460);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v44, v11);
    a6 = a6;
    uint64_t v45 = Logger.logObject.getter();
    int v46 = static os_log_type_t.error.getter();
    unint64_t v57 = v45;
    if (!os_log_type_enabled(v45, (os_log_type_t)v46))
    {

      goto LABEL_32;
    }
    int v56 = v46;
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v60 = v55;
    *(_DWORD *)uint64_t v47 = 136315138;
    id v48 = [a6 altDSID];
    if (v48)
    {
      char v49 = v48;
      v54[1] = v47 + 4;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;

      uint64_t v59 = sub_100158C6C(v50, v52, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v53 = v57;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "Missing deviceListResponse for altDSID %s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_32:
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      type metadata accessor for DeviceListError(0);
      uint64_t v59 = -14005;
      sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
      sub_1000E905C();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v59 = v60;
      sub_1000D70C8(&qword_100271CE8);
LABEL_33:
      CheckedContinuation.resume(throwing:)();
      sub_1000D89D4(a2, a3);
      return;
    }
  }
  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10014A048(uint64_t (*a1)(void))
{
  uint64_t result = a1();
  if (result) {
    return _swift_stdlib_bridgeErrorToNSError();
  }
  return result;
}

unint64_t sub_10014A078(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10014A134(a1, v4);
}

unint64_t sub_10014A0BC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10014A1FC(a1, a2, v4);
}

unint64_t sub_10014A134(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10014AFF4(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000D7ADC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10014A1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10014A2E0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_10014A300, 0, 0);
}

uint64_t sub_10014A300()
{
  id v1 = [*(id *)(v0 + 32) trustedDevicesClientHash];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  id v6 = [*(id *)(v0 + 40) trustedDevicesClientHash];
  if (!v6)
  {
    if (!v5) {
      goto LABEL_19;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (!v5)
  {
    if (!v10) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (!v10) {
    goto LABEL_16;
  }
  if (v3 != v8 || v5 != v10)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_19;
    }
LABEL_17:
    type metadata accessor for DeviceListError(0);
    *(void *)(v0 + 24) = -14009;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E905C();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
  return v13();
}

uint64_t sub_10014A4A8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_10014A4C8, 0, 0);
}

uint64_t sub_10014A4C8()
{
  id v1 = [*(id *)(v0 + 32) deletedDevicesClientHash];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  id v6 = [*(id *)(v0 + 40) deletedDevicesClientHash];
  if (!v6)
  {
    if (!v5) {
      goto LABEL_19;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (!v5)
  {
    if (!v10) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (!v10) {
    goto LABEL_16;
  }
  if (v3 != v8 || v5 != v10)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_19;
    }
LABEL_17:
    type metadata accessor for DeviceListError(0);
    *(void *)(v0 + 24) = -14010;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E905C();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
  return v13();
}

void sub_10014A670(uint64_t a1, uint64_t a2, id a3, void *a4, void *a5)
{
  id v43 = a5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  BOOL v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v42 - v12;
  id v14 = [a3 altDSID];
  if (!v14)
  {
    __break(1u);
LABEL_18:

    __break(1u);
    goto LABEL_19;
  }
  uint64_t v15 = v14;
  id v16 = [a4 authKitAccountWithAltDSID:v14];

  if (!v16)
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_1000D78F8(v8, (uint64_t)qword_100274460);
    uint64_t v24 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v11, v23, v8);
    a3 = a3;
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v8);
      return;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    id v43 = (id)swift_slowAlloc();
    v45[0] = (uint64_t)v43;
    *(_DWORD *)uint64_t v5 = 136315138;
    id v27 = [a3 altDSID];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;

      id v46 = (id)sub_100158C6C(v29, v31, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "DeviceListStoreManager - Unable to report MID hash mismatch event. No idms account found for altDSID - %s.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v8);
      return;
    }
    goto LABEL_18;
  }
  uint64_t v17 = self;
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = v16;
  id v20 = (void *)_convertErrorToNSError(_:)();
  id v21 = objc_msgSend(v17, "ak_analyticsEventWithEventName:account:error:", v18, v19, v20);

  if (v21)
  {
    v45[0] = 0;
    v45[1] = 0xE000000000000000;
    id v46 = [a4 securityLevelForAccount:v19];
    type metadata accessor for AKAppleIDSecurityLevel(0);
    _print_unlocked<A, B>(_:_:)();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 setObject:v22 forKeyedSubscript:@"securityLevel"];

    [v43 sendEvent:v21];
    return;
  }
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v32 = sub_1000D78F8(v8, (uint64_t)qword_100274460);
  uint64_t v33 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v13, v32, v8);
  uint64_t v5 = (uint8_t *)a3;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v34, v35))
  {

    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v8);
    return;
  }
  uint64_t v36 = (uint8_t *)swift_slowAlloc();
  id v43 = (id)swift_slowAlloc();
  v45[0] = (uint64_t)v43;
  *(_DWORD *)uint64_t v36 = 136315138;
  id v37 = [(uint8_t *)v5 altDSID];
  if (v37)
  {
    char v38 = v37;
    os_log_type_t v42 = v36 + 4;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    id v46 = (id)sub_100158C6C(v39, v41, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "DeviceListStoreManager - Unable to create MID hash mismatch event for altDSID - %s.", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v8);
    return;
  }
LABEL_19:

  __break(1u);
}

void sub_10014AC84(uint64_t a1)
{
  sub_100147074(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10014AC90()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014ACC8()
{
  uint64_t v1 = sub_1000D70C8(&qword_100271CE8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

void sub_10014ADC4()
{
  uint64_t v1 = *(void *)(sub_1000D70C8(&qword_100271CE8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(NSObject **)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + v3);
  unint64_t v6 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10014728C(v4, v0 + v2, v5, v6);
}

uint64_t sub_10014AE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10014AE74()
{
  return swift_release();
}

void sub_10014AE7C(uint64_t a1)
{
  sub_1001495A4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10014AE84()
{
  uint64_t v1 = sub_1000D70C8(&qword_100271CE8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10014AF2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(sub_1000D70C8(&qword_100271CE8) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  BOOL v11 = *(void **)(v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100149768(a1, a2, a3, a4, v4 + v10, v11);
}

uint64_t sub_10014AFF4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10014B050(uint64_t a1)
{
  uint64_t v2 = sub_1000D70C8((uint64_t *)&unk_100271D28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10014B0B0()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10014B100()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_1000D84E8;
  unint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_100271D38 + dword_100271D38);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_10014B1C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10014B298()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  unint64_t v7 = (void *)v0[6];
  unint64_t v6 = (void *)v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000D84E8;
  uint64_t v9 = (uint64_t (*)(void *, void *, void *, void *, void *, void *))((char *)&dword_100271D48
                                                                              + dword_100271D48);
  return v9(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_10014B374(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10014B444()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  unint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271D68 + dword_100271D68);
  return v6(v2, v3, v4);
}

uint64_t sub_10014B500(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10014B5D0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  unint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271D88 + dword_100271D88);
  return v6(v2, v3, v4);
}

uint64_t sub_10014B68C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10014B75C()
{
  _Block_release(*(const void **)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10014B7BC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  unint64_t v7 = (void *)v0[6];
  unint64_t v6 = (void *)v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000D7208;
  uint64_t v9 = (uint64_t (*)(void *, void *, void *, void *, void *, void *))((char *)&dword_100271DA8
                                                                              + dword_100271DA8);
  return v9(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_10014B898(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10014B964()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014B9A4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000D84E8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100271DC8 + dword_100271DC8);
  return v5(v2, v3);
}

uint64_t sub_10014BA58(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10014BB24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000D70C8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t SignInWithAppleDaemonService.serviceName.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

__objc2_prot *SignInWithAppleDaemonService.exportedProtocol.getter()
{
  return &OBJC_PROTOCOL___AKSignInWithAppleDaemonProtocol;
}

id SignInWithAppleDaemonService.exportedObject.getter@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for SignInWithAppleDaemonService();
  *a1 = v3;

  return v3;
}

uint64_t type metadata accessor for SignInWithAppleDaemonService()
{
  return self;
}

void *sub_10014BC84(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    sub_100141644(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000D70C8(&qword_100272120);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100141644(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100141644(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_1000D7CC4(&v8, &v2[4 * v6 + 4]);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Bool __swiftcall SignInWithAppleDaemonService.shouldAcceptNewConnection(_:)(NSXPCConnection a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for SignInWithAppleDaemonService();
  unsigned int v3 = objc_msgSendSuper2(&v7, "shouldAcceptNewConnection:", a1.super.isa);
  if (v3)
  {
    id v4 = [objc_allocWithZone((Class)AKClient) initWithConnection:a1.super.isa];
    unint64_t v5 = *(void **)&v1[OBJC_IVAR___AKSignInWithAppleDaemonService_client];
    *(void *)&v1[OBJC_IVAR___AKSignInWithAppleDaemonService_client] = v4;
  }
  return v3;
}

id SignInWithAppleDaemonService.init()()
{
  *(void *)&v0[OBJC_IVAR___AKSignInWithAppleDaemonService_client] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignInWithAppleDaemonService();
  return objc_msgSendSuper2(&v2, "init");
}

id SignInWithAppleDaemonService.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignInWithAppleDaemonService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t SignInWithAppleDaemonService.fetchAccounts(with:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_10014C034, 0, 0);
}

uint64_t sub_10014C034()
{
  uint64_t v1 = *(void **)(v0[5] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[6] = v1;
  if (v1)
  {
    uint64_t v2 = qword_10026F9C0;
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      objc_super v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)objc_super v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching SIWA accounts", v7, 2u);
      swift_slowDealloc();
    }

    long long v8 = self;
    id v9 = [v8 sharedInstance];
    id v10 = [objc_allocWithZone((Class)AKCDPFactory) init];
    type metadata accessor for AccountSharingPreFlightChecker();
    uint64_t v11 = swift_allocObject();
    v0[7] = v11;
    *(void *)(v11 + 16) = v9;
    *(void *)(v11 + 24) = v10;
    id v12 = [objc_allocWithZone((Class)AAFKeychainManager) init];
    uint64_t v13 = self;
    id v14 = [v13 sharedInstance];
    uint64_t v15 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v16 = sub_100153BC0(v12, v14, v15);
    v0[8] = v16;
    id v17 = [v13 sharedInstance];
    id v18 = [objc_allocWithZone((Class)AAFKeychainManager) init];
    type metadata accessor for SharedGroupsMembershipController();
    uint64_t v19 = swift_allocObject();
    v0[9] = v19;
    *(void *)(v19 + 16) = v17;
    *(void *)(v19 + 24) = v18;
    id v20 = self;
    id v21 = v3;
    id v22 = [v20 sharedManager];
    id v23 = [v8 sharedInstance];
    id v24 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
    id v25 = objc_allocWithZone((Class)AKApplicationInformationController);
    id v26 = v16;
    swift_retain();
    id v27 = [v25 init];
    swift_retain();
    v0[10] = sub_100153CA0((uint64_t)v21, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24, (uint64_t)v26, v11, (uint64_t)v27, v19);
    uint64_t v28 = (void *)swift_task_alloc();
    v0[11] = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_10014C4E0;
    uint64_t v29 = v0[4];
    return sub_100127BB4(v29);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_1000D78F8(v31, (uint64_t)qword_100274490);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Client is not set. Invalid connection", v34, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[3] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    os_log_type_t v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
}

uint64_t sub_10014C4E0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_10014C698;
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    unint64_t v5 = sub_10014C608;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10014C608()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = (void *)v0[6];
  swift_release();
  swift_release();

  swift_release();
  id v3 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v4 = v0[13];
  return v3(v4);
}

uint64_t sub_10014C698()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = (void *)v0[6];
  swift_release();
  swift_release();

  swift_release();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10014C8A0(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  long long v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *long long v8 = v3;
  v8[1] = sub_10014C97C;
  v8[4] = v6;
  v8[5] = v7;
  return _swift_task_switch(sub_10014C034, 0, 0);
}

uint64_t sub_10014C97C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 24);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v7 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v9 = (void *)v7;
  }
  else
  {
    sub_100100D68(0, (unint64_t *)&qword_100271600);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    id v9 = isa;
  }
  uint64_t v10 = *(void (***)(void, void, void))(v3 + 32);
  ((void (**)(void, Class, uint64_t))v10)[2](v10, isa, v7);

  _Block_release(v10);
  uint64_t v11 = *(uint64_t (**)(void))(v6 + 8);
  return v11();
}

uint64_t SignInWithAppleDaemonService.fetchEULA(forClientID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100271EA0 + dword_100271EA0);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10014CBF0;
  return v7(a1, a2);
}

uint64_t sub_10014CBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t sub_10014CE7C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100271EA0 + dword_100271EA0);
  id v8 = a3;
  id v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  *id v9 = v3;
  v9[1] = sub_10014CF64;
  return v11(v5, v7);
}

uint64_t sub_10014CF64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void **)(*v3 + 16);
  uint64_t v8 = *v3;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v4)
  {
    a2 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v9 = 0;
    uint64_t v10 = (void *)a2;
  }
  else if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    a2 = 0;
    uint64_t v10 = v9;
  }
  else
  {
    NSString v9 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, NSString, uint64_t))v11)[2](v11, v9, a2);

  _Block_release(v11);
  uint64_t v12 = *(uint64_t (**)(void))(v8 + 8);
  return v12();
}

uint64_t SignInWithAppleDaemonService.revokeAcccount(with:)(uint64_t a1)
{
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = v1;
  return _swift_task_switch(sub_10014D144, 0, 0);
}

uint64_t sub_10014D144()
{
  uint64_t v1 = *(void **)(v0[21] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[22] = v1;
  if (v1)
  {
    uint64_t v2 = qword_10026F9C0;
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Revoking SIWA account", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = (void *)v0[20];

    id v9 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
    v0[23] = v9;
    NSString v10 = [v8 altDSID];
    if (!v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v9 setAltDSID:v10];

    id v11 = [objc_allocWithZone((Class)type metadata accessor for AccountRevokingRequestProvider()) initWithContext:v9 urlBagKey:AKURLBagKeyDeleteAuthorizedApp];
    v0[24] = v11;
    [v11 setAuthenticatedRequest:1];
    [v11 setClient:v3];
    id v12 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v11];
    v0[25] = v12;
    uint64_t v13 = type metadata accessor for AccountRevokingService();
    uint64_t v14 = swift_allocObject();
    v0[26] = v14;
    *(void *)(v14 + 16) = v12;
    id v15 = objc_allocWithZone((Class)AAFKeychainManager);
    id v16 = v12;
    id v17 = [v15 init];
    id v18 = [self sharedInstance];
    uint64_t v19 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v20 = sub_100153BC0(v17, v18, v19);
    v0[27] = v20;
    id v21 = self;
    id v39 = v3;
    id v38 = [v21 sharedManager];
    id v37 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
    v0[16] = v13;
    v0[17] = &off_10022BF18;
    v0[13] = v14;
    type metadata accessor for AccountRevokingController();
    uint64_t inited = (void *)swift_initStackObject();
    v0[28] = inited;
    uint64_t v23 = v0[16];
    uint64_t v24 = sub_100114854((uint64_t)(v0 + 13), v23);
    uint64_t v25 = *(void *)(v23 - 8);
    id v26 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v25 + 16))(v26, v24, v23);
    uint64_t v27 = *v26;
    inited[9] = v13;
    inited[10] = &off_10022BF18;
    inited[5] = v20;
    inited[6] = v27;
    inited[2] = v38;
    inited[3] = v39;
    inited[4] = v37;
    id v28 = v20;
    swift_retain();
    sub_1000E2354((uint64_t)(v0 + 13));
    swift_task_dealloc();
    uint64_t v29 = (void *)swift_task_alloc();
    v0[29] = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_10014D6DC;
    uint64_t v30 = v0[20];
    return sub_1000F157C(v30);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_1000D78F8(v32, (uint64_t)qword_100274490);
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Client is not set. Invalid connection", v35, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[19] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v36 = (uint64_t (*)(void))v0[1];
    return v36();
  }
}

uint64_t sub_10014D6DC()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014D8C4;
  }
  else {
    uint64_t v2 = sub_10014D7F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014D7F0()
{
  uint64_t v2 = (void *)v0[27];
  uint64_t v1 = v0[28];
  id v3 = (void *)v0[25];
  uint64_t v5 = (void *)v0[23];
  uint64_t v4 = (void *)v0[24];
  os_log_type_t v6 = (void *)v0[22];
  swift_setDeallocating();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000E2354(v1 + 48);

  swift_release();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10014D8C4()
{
  uint64_t v2 = (void *)v0[27];
  uint64_t v1 = v0[28];
  id v3 = (void *)v0[25];
  uint64_t v5 = (void *)v0[23];
  uint64_t v4 = (void *)v0[24];
  os_log_type_t v6 = (void *)v0[22];
  swift_setDeallocating();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000E2354(v1 + 48);

  swift_release();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10014DB14(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100156A3C;
  v8[20] = v6;
  v8[21] = v7;
  return _swift_task_switch(sub_10014D144, 0, 0);
}

uint64_t SignInWithAppleDaemonService.fetchAppIcon(forClientID:iconSize:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v11 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&dword_100271EB8 + dword_100271EB8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10010F200;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_10014DE50(int a1, void *aBlock, double a3, double a4, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v5[4] = v10;
  id v15 = (uint64_t (*)(uint64_t, uint64_t, double, double))((char *)&dword_100271EB8 + dword_100271EB8);
  id v12 = a5;
  uint64_t v13 = (void *)swift_task_alloc();
  v5[5] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_10013AC34;
  return v15(v9, v11, a3, a4);
}

uint64_t SignInWithAppleDaemonService.cancelAppIconRequest(forClientID:)(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100271EC8 + dword_100271EC8);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000D7208;
  return v7(a1, a2);
}

uint64_t sub_10014E184(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100271EC8 + dword_100271EC8);
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10014E26C;
  return v11(v5, v7);
}

uint64_t sub_10014E26C()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    id v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v7, 1, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t SignInWithAppleDaemonService.shareAccount(context:with:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return _swift_task_switch(sub_10014E438, 0, 0);
}

uint64_t sub_10014E438()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 48) + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  *(void *)(v0 + 56) = v1;
  if (v1)
  {
    uint64_t v2 = qword_10026F9C0;
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sharing SIWA account", v7, 2u);
      swift_slowDealloc();
    }
    id v8 = *(void **)(v0 + 32);

    id v9 = [self sharedInstance];
    id v10 = [objc_allocWithZone((Class)AKCDPFactory) init];
    type metadata accessor for AccountSharingPreFlightChecker();
    uint64_t v11 = swift_allocObject();
    *(void *)(v0 + 64) = v11;
    *(void *)(v11 + 16) = v9;
    *(void *)(v11 + 24) = v10;
    id v12 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
    *(void *)(v0 + 72) = v12;
    NSString v13 = [v8 altDSID];
    if (!v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = *(void **)(v0 + 32);
    [v12 setAltDSID:v13];

    unsigned int v15 = [v14 _isMoveAccountRequest];
    *(unsigned char *)(v0 + 160) = v15;
    uint64_t v16 = (void *)AKURLBagKeySIWAUpdateShareToken;
    id v17 = (void *)AKURLBagKeySIWAGenerateShareToken;
    *(void *)(v0 + 80) = AKURLBagKeySIWAUpdateShareToken;
    *(void *)(v0 + 88) = v17;
    if (v15) {
      id v18 = v16;
    }
    else {
      id v18 = v17;
    }
    id v19 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v12 urlBagKey:v18];
    *(void *)(v0 + 96) = v19;
    [v19 setAuthenticatedRequest:1];
    [v19 setClient:v3];
    id v20 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v19];
    *(void *)(v0 + 104) = v20;
    type metadata accessor for AccountSharingService();
    id v21 = (uint64_t *)swift_allocObject();
    *(void *)(v0 + 112) = v21;
    v21[2] = (uint64_t)v20;
    id v22 = objc_allocWithZone((Class)AAFKeychainManager);
    id v23 = v20;
    id v24 = [v22 init];
    id v25 = [self sharedInstance];
    id v26 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v27 = sub_100153BC0(v24, v25, v26);
    *(void *)(v0 + 120) = v27;
    id v28 = self;
    id v29 = v3;
    id v30 = [v28 sharedManager];
    id v31 = objc_allocWithZone((Class)AKAuthorizationStoreManager);
    swift_retain();
    id v32 = [v31 init];
    id v33 = v27;
    swift_retain();
    *(void *)(v0 + 128) = sub_100153ED0((uint64_t)v29, (uint64_t)v30, v11, (uint64_t)v32, (uint64_t)v33, v21);
    os_log_type_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v34;
    *os_log_type_t v34 = v0;
    v34[1] = sub_10014E9A4;
    uint64_t v36 = *(void *)(v0 + 32);
    uint64_t v35 = *(void *)(v0 + 40);
    return sub_10012F8A4(v36, v35);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_1000D78F8(v38, (uint64_t)qword_100274490);
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      unint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Client is not set. Invalid connection", v41, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 24) = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    os_log_type_t v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
}

uint64_t sub_10014E9A4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10014EB9C;
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    uint64_t v5 = sub_10014EACC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10014EACC()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 104);
  id v3 = *(void **)(v0 + 96);
  uint64_t v4 = (void **)(v0 + 88);
  uint64_t v5 = *(void **)(v0 + 72);
  os_log_type_t v6 = *(void **)(v0 + 56);
  if (*(unsigned char *)(v0 + 160)) {
    uint64_t v4 = (void **)(v0 + 80);
  }
  uint64_t v7 = *v4;
  swift_release();

  swift_release();
  swift_release();

  id v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v9 = *(void *)(v0 + 152);
  return v8(v9);
}

uint64_t sub_10014EB9C()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 104);
  id v3 = *(void **)(v0 + 96);
  uint64_t v4 = (void **)(v0 + 88);
  uint64_t v5 = *(void **)(v0 + 72);
  os_log_type_t v6 = *(void **)(v0 + 56);
  if (*(unsigned char *)(v0 + 160)) {
    uint64_t v4 = (void **)(v0 + 80);
  }
  uint64_t v7 = *v4;
  swift_release();

  swift_release();
  swift_release();

  id v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10014EDEC(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10014EEDC;
  v11[5] = v9;
  v11[6] = v10;
  v11[4] = v8;
  return _swift_task_switch(sub_10014E438, 0, 0);
}

uint64_t sub_10014EEDC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  os_log_type_t v6 = *(void **)(*v2 + 32);
  uint64_t v7 = *(void **)(*v2 + 24);
  id v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc();

  id v10 = *(void (***)(void, void, void))(v5 + 40);
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v10)[2](v10, 0, v11);

    _Block_release(v10);
  }
  else
  {
    ((void (**)(void, void *, void))v10)[2](v10, a1, 0);
    _Block_release(v10);
  }
  id v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

uint64_t SignInWithAppleDaemonService.unshareAccount(context:)(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = v1;
  return _swift_task_switch(sub_10014F0D4, 0, 0);
}

uint64_t sub_10014F0D4()
{
  uint64_t v1 = *(void **)(v0[20] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[21] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v0[19];
    id v3 = objc_allocWithZone((Class)AAFKeychainManager);
    id v4 = v1;
    id v5 = [v3 init];
    id v6 = [self sharedInstance];
    uint64_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v33 = sub_100153BC0(v5, v6, v7);
    v0[22] = v33;
    id v8 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
    v0[23] = v8;
    NSString v9 = [v2 altDSID];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v8 setAltDSID:v9];

    id v10 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v8 urlBagKey:AKURLBagKeySIWARevokeShareToken];
    v0[24] = v10;
    [v10 setAuthenticatedRequest:1];
    [v10 setClient:v4];
    id v11 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v10];
    v0[25] = v11;
    uint64_t v12 = type metadata accessor for AccountUnsharingService();
    uint64_t v13 = swift_allocObject();
    v0[26] = v13;
    *(void *)(v13 + 16) = v11;
    uint64_t v14 = self;
    id v32 = v4;
    id v15 = v11;
    id v16 = [v14 sharedManager];
    v0[15] = v12;
    v0[16] = &off_10022BFE8;
    v0[12] = v13;
    type metadata accessor for AccountUnsharingController();
    uint64_t inited = (void *)swift_initStackObject();
    v0[27] = inited;
    uint64_t v18 = v0[15];
    uint64_t v19 = sub_100114854((uint64_t)(v0 + 12), v18);
    uint64_t v20 = *(void *)(v18 - 8);
    id v21 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v21, v19, v18);
    uint64_t v22 = *v21;
    inited[8] = v12;
    inited[9] = &off_10022BFE8;
    inited[2] = v32;
    inited[3] = v16;
    inited[4] = v33;
    inited[5] = v22;
    id v23 = v33;
    swift_retain();
    sub_1000E2354((uint64_t)(v0 + 12));
    swift_task_dealloc();
    id v24 = (void *)swift_task_alloc();
    v0[28] = v24;
    *id v24 = v0;
    v24[1] = sub_10014F59C;
    uint64_t v25 = v0[19];
    return sub_1000E0410(v25);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_1000D78F8(v27, (uint64_t)qword_100274490);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client is not set. Invalid connection", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[18] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    id v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

uint64_t sub_10014F59C()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100156A38;
  }
  else {
    uint64_t v2 = sub_100156A34;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014F82C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_100156A3C;
  v8[19] = v6;
  v8[20] = v7;
  return _swift_task_switch(sub_10014F0D4, 0, 0);
}

uint64_t SignInWithAppleDaemonService.leaveGroup(context:)(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = v1;
  return _swift_task_switch(sub_10014F928, 0, 0);
}

uint64_t sub_10014F928()
{
  uint64_t v1 = *(void **)(v0[20] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[21] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v0[19];
    id v3 = objc_allocWithZone((Class)AAFKeychainManager);
    id v4 = v1;
    id v5 = [v3 init];
    id v6 = [self sharedInstance];
    id v7 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
    id v33 = sub_100153BC0(v5, v6, v7);
    v0[22] = v33;
    id v8 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
    v0[23] = v8;
    NSString v9 = [v2 altDSID];
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v8 setAltDSID:v9];

    id v10 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v8 urlBagKey:AKURLBagKeySIWARevokeShareToken];
    v0[24] = v10;
    [v10 setAuthenticatedRequest:1];
    [v10 setClient:v4];
    id v11 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v10];
    v0[25] = v11;
    uint64_t v12 = type metadata accessor for AccountUnsharingService();
    uint64_t v13 = swift_allocObject();
    v0[26] = v13;
    *(void *)(v13 + 16) = v11;
    uint64_t v14 = self;
    id v32 = v4;
    id v15 = v11;
    id v16 = [v14 sharedManager];
    v0[15] = v12;
    v0[16] = &off_10022BFE8;
    v0[12] = v13;
    type metadata accessor for AccountUnsharingController();
    uint64_t inited = (void *)swift_initStackObject();
    v0[27] = inited;
    uint64_t v18 = v0[15];
    uint64_t v19 = sub_100114854((uint64_t)(v0 + 12), v18);
    uint64_t v20 = *(void *)(v18 - 8);
    id v21 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v21, v19, v18);
    uint64_t v22 = *v21;
    inited[8] = v12;
    inited[9] = &off_10022BFE8;
    inited[2] = v32;
    inited[3] = v16;
    inited[4] = v33;
    inited[5] = v22;
    id v23 = v33;
    swift_retain();
    sub_1000E2354((uint64_t)(v0 + 12));
    swift_task_dealloc();
    id v24 = (void *)swift_task_alloc();
    v0[28] = v24;
    *id v24 = v0;
    v24[1] = sub_10014FDF0;
    uint64_t v25 = v0[19];
    return sub_1000E192C(v25);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_1000D78F8(v27, (uint64_t)qword_100274490);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client is not set. Invalid connection", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[18] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    id v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

uint64_t sub_10014FDF0()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10014FFD0;
  }
  else {
    uint64_t v2 = sub_10014FF04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014FF04()
{
  uint64_t v1 = v0[27];
  id v3 = (void *)v0[24];
  uint64_t v2 = (void *)v0[25];
  id v5 = (void *)v0[22];
  uint64_t v4 = (void *)v0[23];
  id v6 = (void *)v0[21];
  swift_setDeallocating();

  swift_unknownObjectRelease();
  sub_1000E2354(v1 + 40);
  swift_release();

  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10014FFD0()
{
  uint64_t v1 = v0[27];
  id v3 = (void *)v0[24];
  uint64_t v2 = (void *)v0[25];
  id v5 = (void *)v0[22];
  uint64_t v4 = (void *)v0[23];
  id v6 = (void *)v0[21];
  swift_setDeallocating();

  swift_unknownObjectRelease();
  sub_1000E2354(v1 + 40);
  swift_release();

  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100150218(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_1001502F4;
  v8[19] = v6;
  v8[20] = v7;
  return _swift_task_switch(sub_10014F928, 0, 0);
}

uint64_t sub_1001502F4()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  id v5 = *(void **)(*v1 + 24);
  id v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  uint64_t v8 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, 1, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t SignInWithAppleDaemonService.deleteAllItemsFromDepartedGroup(context:)(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_1001504B8, 0, 0);
}

uint64_t sub_1001504B8()
{
  if (*(void *)(*(void *)(v0 + 40) + OBJC_IVAR___AKSignInWithAppleDaemonService_client))
  {
    id v1 = [*(id *)(v0 + 32) currentGroupID];
    if (v1)
    {
      uint64_t v2 = v1;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v3 = [objc_allocWithZone((Class)AAFKeychainManager) init];
      id v4 = [self sharedInstance];
      id v5 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
      id v6 = sub_100153BC0(v3, v4, v5);
      sub_10011C080();

      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000D78F8(v12, (uint64_t)qword_100274490);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Context is missing groupID", v15, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v11 = -16007;
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1000D78F8(v7, (uint64_t)qword_100274490);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client is not set. Invalid connection", v10, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v11 = -16003;
  }
  *(void *)(v0 + 24) = v11;
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
LABEL_15:
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100150938(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100156A3C;
  v8[4] = v6;
  v8[5] = v7;
  return _swift_task_switch(sub_1001504B8, 0, 0);
}

uint64_t SignInWithAppleDaemonService.participantRemovedWithContext(context:participantID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  return _swift_task_switch(sub_100150A38, 0, 0);
}

uint64_t sub_100150A38()
{
  id v1 = *(void **)(v0[22] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[23] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v0[19];
    id v3 = v1;
    id v4 = [v2 currentGroupID];
    if (v4)
    {
      id v5 = v4;
      id v6 = (void *)v0[19];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v8;
      uint64_t v37 = v7;
      uint64_t v9 = v8;

      v0[24] = v9;
      id v10 = [objc_allocWithZone((Class)AAFKeychainManager) init];
      id v11 = [self sharedInstance];
      uint64_t v12 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
      id v13 = sub_100153BC0(v10, v11, v12);
      v0[25] = v13;
      os_log_type_t v14 = sub_100155034((uint64_t)v3, v6);
      v0[26] = v14;
      uint64_t v15 = type metadata accessor for SharedAccountsTokenRotationController();
      v0[13] = v15;
      v0[14] = &off_10022C9A0;
      v0[10] = v14;
      type metadata accessor for ParticipantGroupDepartureController();
      uint64_t inited = (void *)swift_initStackObject();
      v0[27] = inited;
      uint64_t v17 = v0[13];
      uint64_t v18 = sub_100114854((uint64_t)(v0 + 10), v17);
      uint64_t v19 = *(void *)(v17 - 8);
      uint64_t v20 = (uint64_t *)swift_task_alloc();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 16))(v20, v18, v17);
      uint64_t v21 = *v20;
      inited[6] = v15;
      inited[7] = &off_10022C9A0;
      inited[2] = v13;
      inited[3] = v21;
      id v22 = v13;
      swift_retain();
      sub_1000E2354((uint64_t)(v0 + 10));
      swift_task_dealloc();
      id v23 = (void *)swift_task_alloc();
      v0[28] = v23;
      *id v23 = v0;
      v23[1] = sub_100150F10;
      uint64_t v25 = v0[20];
      uint64_t v24 = v0[21];
      return sub_1000E5E14(v25, v24, v37, v36);
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_1000D78F8(v31, (uint64_t)qword_100274490);
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Context is missing groupID", v34, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[18] = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_1000D78F8(v27, (uint64_t)qword_100274490);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client is not set. Invalid connection", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[16] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  uint64_t v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t sub_100150F10()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001510E8;
  }
  else {
    uint64_t v2 = sub_100151044;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100151044()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = (void *)v0[25];
  id v3 = (void *)v0[23];
  swift_setDeallocating();
  swift_unknownObjectRelease();
  sub_1000E2354(v1 + 24);
  swift_release();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001510E8()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = (void *)v0[25];
  id v3 = (void *)v0[23];
  swift_setDeallocating();
  swift_unknownObjectRelease();
  sub_1000E2354(v1 + 24);
  swift_release();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100151310(void *a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  v4[5] = v8;
  id v10 = a1;
  id v11 = a4;
  uint64_t v12 = (void *)swift_task_alloc();
  v4[6] = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_100151410;
  v12[21] = v9;
  v12[22] = v11;
  v12[19] = v10;
  v12[20] = v7;
  return _swift_task_switch(sub_100150A38, 0, 0);
}

uint64_t sub_100151410()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  id v5 = *(void **)(*v1 + 24);
  uint64_t v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, 1, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  id v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t SignInWithAppleDaemonService.fetchSharedGroups(with:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(sub_1001515F8, 0, 0);
}

uint64_t sub_1001515F8()
{
  uint64_t v1 = *(void **)(v0[8] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[9] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v0[7];
    id v3 = objc_allocWithZone((Class)AKAppleIDAuthenticationContext);
    id v4 = v1;
    id v5 = [v3 init];
    v0[10] = v5;
    NSString v6 = [v2 altDSID];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v5 setAltDSID:v6];

    id v7 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v5 urlBagKey:AKURLBagKeySIWAFetchSharedGroups];
    v0[11] = v7;
    [v7 setAuthenticatedRequest:1];
    [v7 setClient:v4];
    id v8 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v7];
    v0[12] = v8;
    type metadata accessor for AccountSharingService();
    uint64_t inited = swift_initStackObject();
    v0[13] = inited;
    *(void *)(inited + 16) = v8;
    id v10 = v8;
    id v11 = (void *)swift_task_alloc();
    v0[14] = v11;
    *id v11 = v0;
    v11[1] = sub_10015191C;
    return sub_1000F92C0();
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000D78F8(v13, (uint64_t)qword_100274490);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Client is not set. Invalid connection", v16, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[6] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_10015191C()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100151AD4;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100151A3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100151A3C()
{
  uint64_t v1 = (void *)v0[12];
  id v3 = (void *)v0[10];
  uint64_t v2 = (void *)v0[11];
  uint64_t v4 = (void *)v0[9];
  swift_setDeallocating();
  swift_unknownObjectRelease();

  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100151AD4()
{
  uint64_t v1 = (void *)v0[12];
  id v3 = (void *)v0[10];
  uint64_t v2 = (void *)v0[11];
  uint64_t v4 = (void *)v0[9];
  swift_setDeallocating();
  swift_unknownObjectRelease();

  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100151CE8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_100156A3C;
  v8[7] = v6;
  v8[8] = v7;
  return _swift_task_switch(sub_1001515F8, 0, 0);
}

uint64_t SignInWithAppleDaemonService.performTokenRotation(with:)(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return _swift_task_switch(sub_100151DE4, 0, 0);
}

uint64_t sub_100151DE4()
{
  uint64_t v1 = *(void **)(v0[7] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[8] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)v0[6];
    id v3 = v1;
    id v4 = [v2 _groups];
    if (v4)
    {
      id v5 = v4;
      id v6 = (void *)v0[6];
      uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
      v0[9] = v7;

      v0[10] = sub_100155034((uint64_t)v3, v6);
      id v8 = (void *)swift_task_alloc();
      v0[11] = v8;
      *id v8 = v0;
      v8[1] = sub_10015215C;
      return sub_10010B238(v7);
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1000D78F8(v14, (uint64_t)qword_100274490);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Groups is not set.", v17, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[5] = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_100274490);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client is not set. Invalid connection", v13, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[3] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10015215C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001522FC;
  }
  else {
    uint64_t v2 = sub_100152290;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100152290()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001522FC()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001524E4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_100156A3C;
  v8[6] = v6;
  v8[7] = v7;
  return _swift_task_switch(sub_100151DE4, 0, 0);
}

uint64_t SignInWithAppleDaemonService.performHealthCheck(context:)()
{
  return _swift_task_switch(sub_1001525DC, 0, 0);
}

uint64_t sub_1001525DC()
{
  if (qword_10026F9A8 != -1) {
    swift_once();
  }
  id v3 = (uint64_t (__cdecl *)())((char *)&dword_1002710A0 + dword_1002710A0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100108A84;
  return v3();
}

uint64_t sub_100152828(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_1001528B4, 0, 0);
}

uint64_t sub_1001528B4()
{
  if (qword_10026F9A8 != -1) {
    swift_once();
  }
  id v3 = (uint64_t (__cdecl *)())((char *)&dword_1002710A0 + dword_1002710A0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100152984;
  return v3();
}

uint64_t sub_100152984()
{
  uint64_t v1 = *(void (***)(void, void, void))(*v0 + 32);
  uint64_t v2 = *(void **)(*v0 + 24);
  id v3 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();

  v1[2](v1, 1, 0);
  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t SignInWithAppleDaemonService.fetchSignInWithApplePrivateEmailCount()()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_100152B04, 0, 0);
}

uint64_t sub_100152B04()
{
  uint64_t v1 = *(void **)(v0[8] + OBJC_IVAR___AKSignInWithAppleDaemonService_client);
  v0[9] = v1;
  if (v1)
  {
    uint64_t v2 = self;
    id v3 = v1;
    id v4 = [v2 sharedInstance];
    id v5 = [v4 primaryAuthKitAccount];
    v0[10] = v5;

    if (v5)
    {
      id v6 = [v2 sharedInstance];
      id v7 = [v6 altDSIDForAccount:v5];

      if (v7)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v8 = objc_allocWithZone((Class)AKSignInWithAppleRequestContext);
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v48 = [v8 initWithAltDSID:v9];
        v0[11] = v48;

        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_1000D78F8(v10, (uint64_t)qword_100274490);
        id v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetching SIWA accounts", v13, 2u);
          swift_slowDealloc();
        }

        id v14 = [v2 sharedInstance];
        id v15 = [objc_allocWithZone((Class)AKCDPFactory) init];
        type metadata accessor for AccountSharingPreFlightChecker();
        uint64_t v16 = swift_allocObject();
        v0[12] = v16;
        *(void *)(v16 + 16) = v14;
        *(void *)(v16 + 24) = v15;
        id v17 = [objc_allocWithZone((Class)AAFKeychainManager) init];
        uint64_t v18 = self;
        id v19 = [v18 sharedInstance];
        uint64_t v20 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
        id v21 = sub_100153BC0(v17, v19, v20);
        v0[13] = v21;
        id v22 = [v18 sharedInstance];
        id v23 = [objc_allocWithZone((Class)AAFKeychainManager) init];
        type metadata accessor for SharedGroupsMembershipController();
        uint64_t v24 = swift_allocObject();
        v0[14] = v24;
        *(void *)(v24 + 16) = v22;
        *(void *)(v24 + 24) = v23;
        uint64_t v25 = self;
        id v26 = v3;
        id v27 = [v25 sharedManager];
        id v28 = [v2 sharedInstance];
        id v29 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
        id v30 = objc_allocWithZone((Class)AKApplicationInformationController);
        id v31 = v21;
        swift_retain();
        id v32 = [v30 init];
        swift_retain();
        v0[15] = sub_100153CA0((uint64_t)v26, (uint64_t)v27, (uint64_t)v28, (uint64_t)v29, (uint64_t)v31, v16, (uint64_t)v32, v24);
        os_log_type_t v33 = (void *)swift_task_alloc();
        v0[16] = v33;
        *os_log_type_t v33 = v0;
        v33[1] = sub_1001532A4;
        return sub_10012A400((uint64_t)v48);
      }
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_1000D78F8(v43, (uint64_t)qword_100274490);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        id v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "No authKit account", v46, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SignInWithAppleError(0);
      v0[7] = -16007;
      sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
      sub_1000E22B8();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
    else
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_1000D78F8(v39, (uint64_t)qword_100274490);
      os_log_type_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "No primary authKit account", v42, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SignInWithAppleError(0);
      v0[5] = -16007;
      sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
      sub_1000E22B8();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
    }
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_1000D78F8(v35, (uint64_t)qword_100274490);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Client is not set. Invalid connection", v38, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[3] = -16003;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  uint64_t v47 = (uint64_t (*)(void))v0[1];
  return v47();
}

uint64_t sub_1001532A4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_10015347C;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    id v5 = sub_1001533CC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001533CC()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void *)v0[13];
  uint64_t v4 = (void *)v0[10];
  id v3 = (void *)v0[11];
  id v5 = (void *)v0[9];
  swift_release();
  swift_release();

  swift_release();
  id v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v1);
}

uint64_t sub_10015347C()
{
  uint64_t v1 = (void *)v0[13];
  id v3 = (void *)v0[10];
  uint64_t v2 = (void *)v0[11];
  uint64_t v4 = (void *)v0[9];
  swift_release();
  swift_release();

  swift_release();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100153684(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  id v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100135030;
  v5[8] = v4;
  return _swift_task_switch(sub_100152B04, 0, 0);
}

uint64_t sub_100153748(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *id v4 = v3;
  v4[1] = sub_1000D84E8;
  return v6();
}

uint64_t sub_100153814(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_1000D84E8;
  return v7();
}

uint64_t sub_1001538E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10010994C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100153A84(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100156A40;
  return v6(a1);
}

uint64_t sub_100153B60()
{
  uint64_t v0 = sub_1000D70C8(&qword_100272120);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_100272130;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_100272128;
  }

  return sub_1000D70C8(v2);
}

id sub_100153BC0(void *a1, void *a2, char *a3)
{
  uint64_t v6 = &a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap] = &_swiftEmptyDictionarySingleton;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo] = 0;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController] = a1;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager] = a2;
  uint64_t v7 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a1;
  NSString v9 = (uint64_t *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController];
  v9[3] = v7;
  v9[4] = (uint64_t)&off_10022D718;
  *NSString v9 = v8;
  v13.receiver = a3;
  v13.super_class = (Class)type metadata accessor for SharedAccountsStorageController();
  id v10 = a1;
  id v11 = a2;
  return objc_msgSendSuper2(&v13, "init");
}

void *sub_100153CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a7;
  uint64_t v14 = type metadata accessor for AccountSharingPreFlightChecker();
  v33[3] = v14;
  v33[4] = &off_10022D648;
  v33[0] = a6;
  uint64_t v15 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v31 = v15;
  id v32 = &off_10022D718;
  v30[0] = a8;
  type metadata accessor for AccountsListingController();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = sub_100114854((uint64_t)v33, v14);
  __chkstk_darwin(v17);
  id v19 = (uint64_t *)((char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_100114854((uint64_t)v30, v31);
  __chkstk_darwin(v21);
  id v23 = (uint64_t *)((char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = *v19;
  uint64_t v26 = *v23;
  v16[10] = v14;
  v16[11] = &off_10022D648;
  v16[16] = v15;
  v16[17] = &off_10022D718;
  v16[2] = a2;
  v16[3] = a1;
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = v28;
  v16[7] = v25;
  v16[12] = v29;
  v16[13] = v26;
  sub_1000E2354((uint64_t)v30);
  sub_1000E2354((uint64_t)v33);
  return v16;
}

void *sub_100153ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *a6;
  uint64_t v13 = type metadata accessor for AccountSharingPreFlightChecker();
  v29[3] = v13;
  v29[4] = &off_10022D648;
  v29[0] = a3;
  uint64_t v27 = v12;
  uint64_t v28 = &off_10022C660;
  v26[0] = a6;
  type metadata accessor for AccountSharingController();
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = sub_100114854((uint64_t)v29, v13);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_100114854((uint64_t)v26, v27);
  __chkstk_darwin(v19);
  uint64_t v21 = (void *)((char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = *v17;
  uint64_t v24 = *v21;
  v14[7] = v13;
  v14[8] = &off_10022D648;
  v14[4] = v23;
  v14[14] = v12;
  v14[15] = &off_10022C660;
  v14[10] = a5;
  v14[11] = v24;
  v14[2] = a1;
  v14[3] = a2;
  v14[9] = a4;
  sub_1000E2354((uint64_t)v26);
  sub_1000E2354((uint64_t)v29);
  return v14;
}

void _s3akd28SignInWithAppleDaemonServiceC26configureExportedInterfaceyySo14NSXPCInterfaceCF_0()
{
  sub_100153B60();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001B81E0;
  *(void *)(inited + 32) = sub_100100D68(0, &qword_100272110);
  uint64_t v1 = sub_100100D68(0, &qword_100270F20);
  *(void *)(inited + 40) = v1;
  uint64_t v2 = sub_100100D68(0, &qword_100270F50);
  *(void *)(inited + 48) = v2;
  sub_100153B60();
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001B9E80;
  *(void *)(v3 + 32) = sub_100100D68(0, (unint64_t *)&qword_100271600);
  *(void *)(v3 + 40) = v1;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = sub_100100D68(0, &qword_100272118);
  sub_10014BC84(inited);
  swift_bridgeObjectRelease();
  id v4 = objc_allocWithZone((Class)NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithArray:isa];

  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100154450(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_100154470, 0, 0);
}

uint64_t sub_100154470()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching EULA", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = [self sharedInstance];
  id v6 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  uint64_t v7 = (objc_class *)type metadata accessor for AccountsMetadataController();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController] = v5;
  *(void *)&v8[OBJC_IVAR___AKAccountsMetadataController_localStorageController] = v6;
  *(void *)&v8[OBJC_IVAR___AKAccountsMetadataController_metadataService] = 0;
  v0[1].uint64_t receiver = v8;
  v0[1].uint64_t super_class = v7;
  v0[3].uint64_t receiver = objc_msgSendSuper2(v0 + 1, "init");
  NSString v9 = (objc_class *)swift_task_alloc();
  v0[3].uint64_t super_class = v9;
  *(void *)NSString v9 = v0;
  *((void *)v9 + 1) = sub_100154654;
  uint64_t receiver = (uint64_t)v0[2].receiver;
  uint64_t super_class = (uint64_t)v0[2].super_class;
  return sub_100139958(receiver, super_class);
}

uint64_t sub_100154654(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 64) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1001547F0;
  }
  else
  {
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 80) = a1;
    uint64_t v7 = sub_100154788;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100154788()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  return v1(v2, v3);
}

uint64_t sub_1001547F0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100154854(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)(v4 + 48) = a3;
  *(double *)(v4 + 56) = a4;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  return _swift_task_switch(sub_100154878, 0, 0);
}

uint64_t sub_100154878()
{
  id v1 = [self sharedInstance];
  id v2 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  uint64_t v3 = (objc_class *)type metadata accessor for AccountsMetadataController();
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  *(void *)&v4[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController] = v1;
  *(void *)&v4[OBJC_IVAR___AKAccountsMetadataController_localStorageController] = v2;
  *(void *)&v4[OBJC_IVAR___AKAccountsMetadataController_metadataService] = 0;
  v0[1].uint64_t receiver = v4;
  v0[1].uint64_t super_class = v3;
  v0[4].uint64_t receiver = objc_msgSendSuper2(v0 + 1, "init");
  uint64_t v5 = (objc_class *)swift_task_alloc();
  v0[4].uint64_t super_class = v5;
  *(void *)uint64_t v5 = v0;
  *((void *)v5 + 1) = sub_1001549AC;
  double v6 = *(double *)&v0[3].receiver;
  double v7 = *(double *)&v0[3].super_class;
  uint64_t receiver = (uint64_t)v0[2].receiver;
  uint64_t super_class = (uint64_t)v0[2].super_class;
  return sub_10013A278(receiver, super_class, v6, v7);
}

uint64_t sub_1001549AC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100154B40;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = sub_100154AD4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100154AD4()
{
  uint64_t v1 = *(void *)(v0 + 88);

  id v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100154B40()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100154BA4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return _swift_task_switch(sub_100154BC4, 0, 0);
}

uint64_t sub_100154BC4()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Canceling app icon fetch request", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = [self sharedInstance];
  id v6 = [objc_allocWithZone((Class)AKAuthorizationStoreManager) init];
  uint64_t v7 = (objc_class *)type metadata accessor for AccountsMetadataController();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController] = v5;
  *(void *)&v8[OBJC_IVAR___AKAccountsMetadataController_localStorageController] = v6;
  *(void *)&v8[OBJC_IVAR___AKAccountsMetadataController_metadataService] = 0;
  *(void *)(v0 + 120) = v8;
  *(void *)(v0 + 128) = v7;
  uint64_t v9 = (char *)objc_msgSendSuper2((objc_super *)(v0 + 120), "init");
  *(void *)(v0 + 152) = v9;
  id v10 = *(void **)&v9[OBJC_IVAR___AKAccountsMetadataController_mediaServicesController];
  NSString v11 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 160) = v11;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 176;
  *(void *)(v0 + 24) = sub_100154E44;
  uint64_t v12 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1001394A0;
  *(void *)(v0 + 104) = &unk_10022E4A8;
  *(void *)(v0 + 112) = v12;
  [v10 cancelAppIconRequestForBundleID:v11 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_100154E44()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_100154FBC;
  }
  else {
    uint64_t v2 = sub_100154F54;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100154F54()
{
  uint64_t v1 = *(void **)(v0 + 152);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100154FBC()
{
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = (void *)v0[19];
  swift_willThrow();

  os_log_type_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void *sub_100155034(uint64_t a1, void *a2)
{
  id v4 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
  NSString v5 = [a2 altDSID];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v4 setAltDSID:v5];

  id v6 = [self sharedInstance];
  id v7 = [objc_allocWithZone((Class)AAFKeychainManager) init];
  uint64_t v8 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
  id v9 = v7;
  id v10 = v6;
  id v11 = sub_100153BC0(v9, v10, v8);
  type metadata accessor for SharedGroupsMembershipController();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v9;
  uint64_t v13 = AKURLBagKeySIWARotateShareTokens;
  id v14 = objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider());
  id v15 = v9;
  id v16 = v10;
  id v17 = [v14 initWithContext:v4 urlBagKey:v13];
  [v17 setAuthenticatedRequest:1];
  [v17 setClient:a1];
  id v18 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v17];
  type metadata accessor for AccountSharingService();
  uint64_t v19 = (uint64_t *)swift_allocObject();
  v19[2] = (uint64_t)v18;
  uint64_t v20 = self;
  id v21 = v18;
  id v22 = [v20 sharedInstance];
  swift_retain();
  id v23 = v11;
  swift_retain();
  uint64_t v24 = sub_1001136BC((uint64_t)v22, v12, (uint64_t)v23, v19);
  swift_release();

  swift_release();
  return v24;
}

uint64_t sub_1001552A8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001552E8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  os_log_type_t v3 = *(void **)(v0 + 24);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *id v4 = v1;
  v4[1] = sub_1000D84E8;
  NSString v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100271F48 + dword_100271F48);
  return v5(v2, v3);
}

uint64_t sub_10015539C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100155468()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001554A0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000D7208;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100271F78 + dword_100271F78);
  return v6(a1, v4);
}

uint64_t sub_10015555C()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271F88 + dword_100271F88);
  return v6(v2, v3, v4);
}

uint64_t sub_100155618(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1001556E8()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271FA8 + dword_100271FA8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001557A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100155874()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271FC8 + dword_100271FC8);
  return v6(v2, v3, v4);
}

uint64_t sub_100155930(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100155A00()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  id v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *id v6 = v1;
  v6[1] = sub_1000D7208;
  uint64_t v7 = (uint64_t (*)(void *, int, void *, void *))((char *)&dword_100271FE8 + dword_100271FE8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100155AC8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100155B98()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271FF8 + dword_100271FF8);
  return v6(v2, v3, v4);
}

uint64_t sub_100155C54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100155D24()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100272008 + dword_100272008);
  return v6(v2, v3, v4);
}

uint64_t sub_100155DE0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100155EB0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100272028 + dword_100272028);
  return v6(v2, v3, v4);
}

uint64_t sub_100155F6C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10015603C()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10015608C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  id v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *id v6 = v1;
  v6[1] = sub_1000D84E8;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_100272048 + dword_100272048);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_100156154(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100156224()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100272068 + dword_100272068);
  return v6(v2, v3, v4);
}

uint64_t sub_1001562E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1001563AC()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001563F4()
{
  uint64_t v2 = *((void *)v0 + 2);
  double v3 = v0[3];
  double v4 = v0[4];
  id v6 = (void *)*((void *)v0 + 5);
  uint64_t v5 = (void *)*((void *)v0 + 6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(int, void *, double, double, void *))((char *)&dword_100272088 + dword_100272088);
  return v8(v2, v6, v3, v4, v5);
}

uint64_t sub_1001564C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100156594()
{
  uint64_t v2 = (void *)v0[2];
  double v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1002720A8 + dword_1002720A8);
  return v6(v2, v3, v4);
}

uint64_t sub_100156650(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100156720()
{
  uint64_t v2 = v0[2];
  double v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1002720C8 + dword_1002720C8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001567DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1001568AC()
{
  uint64_t v2 = (void *)v0[2];
  double v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1002720E8 + dword_1002720E8);
  return v6(v2, v3, v4);
}

uint64_t sub_100156968(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_100156A8C(uint64_t a1)
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000D78F8(v3, (uint64_t)qword_100274460);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    id v8 = [v4 storeName];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    sub_100158C6C(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Database Migration requested from version:%llu", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (a1 == 1) {
      goto LABEL_9;
    }
  }
  else
  {

    if (a1 == 1) {
      goto LABEL_9;
    }
  }
  if (a1) {
    return;
  }
  sub_100156CA0();
LABEL_9:
  sub_1001573E0();
}

void sub_100156CA0()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274460);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    os_log_type_t v6 = v2;
    id v7 = [v2 storeName];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    id v2 = v6;
    sub_100158C6C(v8, v10, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Building %s database with schema version: 1", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Start creating device_list table", v13, 2u);
    swift_slowDealloc();
  }

  id v14 = [v2 executor];
  if (v14)
  {
    id v15 = v14;
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 performQuery:v16];
  }
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Done creating device_list table", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Start creating deleted_device_list table", v22, 2u);
    swift_slowDealloc();
  }

  id v23 = [v2 executor];
  if (v23)
  {
    uint64_t v24 = v23;
    NSString v25 = String._bridgeToObjectiveC()();
    [v24 performQuery:v25];
  }
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Done creating deleted_device_list table", v28, 2u);
    swift_slowDealloc();
  }

  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Start creating version table", v31, 2u);
    swift_slowDealloc();
  }

  id v32 = [v2 executor];
  if (v32)
  {
    os_log_type_t v33 = v32;
    NSString v34 = String._bridgeToObjectiveC()();
    [v33 performQuery:v34];
  }
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Done creating version table", v37, 2u);
    swift_slowDealloc();
  }

  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Initializing version table", v40, 2u);
    swift_slowDealloc();
  }

  v50[0] = 0;
  v50[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v41._object = (void *)0x80000001001C5AB0;
  v41._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v41);
  v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 3877159;
  v43._object = (void *)0xE300000000000000;
  String.append(_:)(v43);
  id v44 = [v2 executor];
  if (v44)
  {
    os_log_type_t v45 = v44;
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v45 performInsertQuery:v46];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Done initializing version table", v49, 2u);
    swift_slowDealloc();
  }
}

void sub_1001573E0()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274460);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Start creating deleted_device_list table if not exists", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = [v0 executor];
  if (v5)
  {
    os_log_type_t v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 performQuery:v7];
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Done creating deleted_device_list table", v9, 2u);
    swift_slowDealloc();
  }
}

id sub_100157680()
{
  v2.uint64_t receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for DeviceListStoreMigrator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceListStoreMigrator()
{
  return self;
}

uint64_t sub_1001576DC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

id sub_10015773C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyHealthCheckService()) init];
  qword_1002744C8 = (uint64_t)result;
  return result;
}

void sub_100157848()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000D78F8(v0, (uint64_t)qword_1002744A8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    sub_100158C6C(0xD000000000000020, 0x80000001001C5B50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Registering for passkey XPC activity: %s...", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = (uint64_t)sub_100158BAC;
  aBlock[5] = v4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001576DC;
  aBlock[3] = (uint64_t)&unk_10022E4E8;
  id v5 = _Block_copy(aBlock);
  swift_release();
  xpc_activity_register("com.apple.ak.passkey.healthcheck", XPC_ACTIVITY_CHECK_IN, v5);
  _Block_release(v5);
}

uint64_t sub_100157A80(_xpc_activity_s *a1)
{
  uint64_t v2 = sub_1000D70C8(&qword_1002701B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  os_transaction_create();
  if (state == 2)
  {
    if (xpc_activity_set_state(a1, 4))
    {
      swift_beginAccess();
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        NSString v7 = Strong;
        os_log_type_t v8 = *(void **)(Strong + OBJC_IVAR___AKAppleIDPasskeyHealthCheckService_accountManager);
        id v9 = [v8 primaryAuthKitAccount];
        if (v9)
        {
          unint64_t v10 = v9;
          id v11 = [v8 altDSIDForAccount:v9];
          if (v11)
          {
            os_log_type_t v12 = v11;
            uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v15 = v14;

            uint64_t v16 = type metadata accessor for TaskPriority();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v4, 1, 1, v16);
            id v17 = (void *)swift_allocObject();
            v17[2] = 0;
            v17[3] = 0;
            v17[4] = v10;
            v17[5] = v7;
            v17[6] = v13;
            v17[7] = v15;
            os_log_type_t v18 = v7;
            sub_100158920((uint64_t)v4, (uint64_t)&unk_1002721A8, (uint64_t)v17);

            swift_release();
LABEL_20:
            sub_100159368(a1);
            return swift_unknownObjectRelease();
          }
          if (qword_10026F9C8 != -1) {
            swift_once();
          }
          uint64_t v35 = type metadata accessor for Logger();
          sub_1000D78F8(v35, (uint64_t)qword_1002744A8);
          os_log_type_t v36 = v10;
          os_log_type_t v21 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v21, v37))
          {
            uint64_t v38 = (uint8_t *)swift_slowAlloc();
            os_log_type_t v40 = (void *)swift_slowAlloc();
            Swift::String v41 = v38;
            Swift::String v42 = v36;
            *(_DWORD *)uint64_t v38 = 138412290;
            os_log_type_t v36 = v36;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *os_log_type_t v40 = v10;

            _os_log_impl((void *)&_mh_execute_header, v21, v37, "AltDSID not found for account %@.", v41, 0xCu);
            sub_1000D70C8((uint64_t *)&unk_10026FD80);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            NSString v7 = v36;
            os_log_type_t v21 = v36;
          }
        }
        else
        {
          if (qword_10026F9C8 != -1) {
            swift_once();
          }
          uint64_t v32 = type metadata accessor for Logger();
          sub_1000D78F8(v32, (uint64_t)qword_1002744A8);
          os_log_type_t v21 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v21, v33))
          {
            NSString v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)NSString v34 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, v33, "Missing primary account.", v34, 2u);
            swift_slowDealloc();
          }
          else
          {
            os_log_type_t v39 = v21;
            os_log_type_t v21 = v7;
          }
        }
LABEL_19:

        goto LABEL_20;
      }
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_1000D78F8(v29, (uint64_t)qword_1002744A8);
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, v30)) {
        goto LABEL_19;
      }
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      uint64_t v24 = "AppleIDPasskeyHealthCheckService missing instance.";
      NSString v25 = v21;
      os_log_type_t v26 = v30;
      os_log_type_t v27 = v31;
      uint32_t v28 = 2;
    }
    else
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_1000D78F8(v20, (uint64_t)qword_1002744A8);
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v21, v22)) {
        goto LABEL_19;
      }
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v23 = 134217984;
      uint64_t v43 = 2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v24 = "XPC activity failed to set passkey activity state: %ld.";
      NSString v25 = v21;
      os_log_type_t v26 = v22;
      os_log_type_t v27 = v23;
      uint32_t v28 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v25, v26, v24, v27, v28);
    swift_slowDealloc();
    goto LABEL_19;
  }
  sub_100159368(a1);

  return swift_unknownObjectRelease();
}

uint64_t sub_10015807C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  return _swift_task_switch(sub_1001580A0, 0, 0);
}

id sub_1001580A0()
{
  uint64_t v1 = *(void **)((char *)v0[4].receiver + OBJC_IVAR___AKAppleIDPasskeyHealthCheckService_accountManager);
  uint64_t v2 = self;
  id v23 = v1;
  id v22 = [v2 sharedManager];
  id v3 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyServerConfiguration()) init];
  id result = [self currentDevice];
  if (result)
  {
    id v5 = result;
    Class super_class = v0[3].super_class;
    id v7 = [objc_allocWithZone((Class)AKCDPFactory) init];
    id v8 = [objc_allocWithZone((Class)AKAppleIDPasskeyAuthenticationController) init];
    id v9 = (objc_class *)type metadata accessor for AppleIDPasskeyValidator();
    unint64_t v10 = (char *)objc_allocWithZone(v9);
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_account] = super_class;
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager] = v23;
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_featureManager] = v22;
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_configuration] = v3;
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_device] = v5;
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_cdpFactory] = v7;
    *(void *)&v10[OBJC_IVAR___AKAppleIDPasskeyValidator_authenticationController] = v8;
    v0[1].uint64_t receiver = v10;
    v0[1].Class super_class = v9;
    id v11 = super_class;
    os_log_type_t v12 = (objc_class *)objc_msgSendSuper2(v0 + 1, "init");
    v0[5].Class super_class = v12;
    id v13 = objc_allocWithZone((Class)AKAppleIDPasskeySetupContext);
    swift_bridgeObjectRetain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v13 initWithAltDSID:v14];
    v0[6].uint64_t receiver = v15;

    uint64_t v16 = (objc_class *)sub_10012CF14(v15, 0);
    v0[6].Class super_class = v16;
    id v17 = v16;
    os_log_type_t v18 = (objc_class *)type metadata accessor for AppleIDPasskeyUnenrollController();
    uint64_t v19 = (char *)objc_allocWithZone(v18);
    *(void *)&v19[OBJC_IVAR___AKAppleIDPasskeyUnenrollController_passkeyValidator] = v12;
    *(void *)&v19[OBJC_IVAR___AKAppleIDPasskeyUnenrollController_unenrollProvider] = v17;
    v0[2].uint64_t receiver = v19;
    v0[2].Class super_class = v18;
    uint64_t v20 = v12;
    swift_unknownObjectRetain();
    v0[7].uint64_t receiver = objc_msgSendSuper2(v0 + 2, "init");
    uint64_t v24 = (uint64_t (*)(char))((char *)&dword_100271658 + dword_100271658);
    os_log_type_t v21 = (objc_class *)swift_task_alloc();
    v0[7].Class super_class = v21;
    *(void *)os_log_type_t v21 = v0;
    *((void *)v21 + 1) = sub_100158578;
    return (id)v24(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100158578()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100158708;
  }
  else {
    uint64_t v2 = sub_10015868C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10015868C()
{
  uint64_t v2 = *(void **)(v0 + 88);
  uint64_t v1 = *(void **)(v0 + 96);

  swift_unknownObjectRelease();
  id v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100158708()
{
  uint64_t v2 = *(void **)(v0 + 88);
  uint64_t v1 = *(void **)(v0 + 96);

  swift_unknownObjectRelease();
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000D78F8(v3, (uint64_t)qword_1002744A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    id v7 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to unenroll passkey with error - %@", v6, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100158920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10010994C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

id sub_100158B0C()
{
  v2.uint64_t receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for AppleIDPasskeyHealthCheckService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyHealthCheckService()
{
  return self;
}

uint64_t sub_100158B74()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100158BAC(_xpc_activity_s *a1)
{
  return sub_100157A80(a1);
}

uint64_t sub_100158BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100158BC4()
{
  return swift_release();
}

uint64_t sub_100158BCC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100158BF4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100158C6C(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100158C6C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100158D40(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000D7C68((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000D7C68((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000E2354((uint64_t)v12);
  return v7;
}

uint64_t sub_100158D40(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100158EFC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100158EFC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100158F94(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100159174(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100159174(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100158F94(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10015910C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10015910C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000D70C8(&qword_100272198);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100159174(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D70C8(&qword_100272198);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001592C4(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

void sub_100159368(_xpc_activity_s *a1)
{
  xpc_activity_set_state(a1, 5);
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Passkey XPC activity registration complete. State: %ld.", v3, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1001594A8()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001594F8()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000D7208;
  *(void *)(v4 + 72) = v2;
  *(void *)(v4 + 80) = v3;
  *(_OWORD *)(v4 + 56) = v5;
  return _swift_task_switch(sub_1001580A0, 0, 0);
}

uint64_t sub_1001595B4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001595EC(mach_port_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  int v15 = 1;
  uint64_t v16 = a2;
  int v17 = 16777472;
  int v18 = a3;
  NDR_record_t v19 = NDR_record;
  int v20 = a3;
  mach_port_t reply_port = mig_get_reply_port();
  v14.msgh_remote_port = a1;
  v14.msgh_local_port = reply_port;
  v14.msgh_bits = -2147478253;
  *(void *)&v14.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&v14);
    mach_port_t reply_port = v14.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&v14, 3, 0x38u, 0x40u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(v14.msgh_local_port);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(v14.msgh_local_port);
    return v10;
  }
  if (v14.msgh_id == 71)
  {
    uint64_t v12 = 4294966988;
  }
  else if (v14.msgh_id == 1300)
  {
    if ((v14.msgh_bits & 0x80000000) != 0)
    {
      uint64_t v12 = 4294966996;
      if (v15 == 1 && v14.msgh_size == 56 && !v14.msgh_remote_port && HIBYTE(v17) == 1)
      {
        int v13 = v18;
        if (v18 == v20)
        {
          *a4 = v16;
          *a5 = v13;
          return 0;
        }
      }
    }
    else if (v14.msgh_size == 36)
    {
      uint64_t v12 = 4294966996;
      if (HIDWORD(v16))
      {
        if (v14.msgh_remote_port) {
          uint64_t v12 = 4294966996;
        }
        else {
          uint64_t v12 = HIDWORD(v16);
        }
      }
    }
    else
    {
      uint64_t v12 = 4294966996;
    }
  }
  else
  {
    uint64_t v12 = 4294966995;
  }
  mach_msg_destroy(&v14);
  return v12;
}

uint64_t sub_1001597D8(char a1, unsigned int a2)
{
  return byte_1001B9F84[(byte_1001BA9FC[a2 - 12] ^ a1) - 4] ^ a2;
}

uint64_t sub_100159804(unsigned int a1)
{
  return byte_1001BA088[(byte_1001BAAFC[a1 - 12] ^ 0xC0) - 8] ^ a1;
}

uint64_t sub_100159830(char a1, unsigned int a2)
{
  return byte_1001BA6B0[(byte_1001BA298[a2 - 8] ^ a1)] ^ a2;
}

uint64_t sub_10015985C(unsigned int a1)
{
  return byte_1001BA7B4[(byte_1001BA394[a1 - 4] ^ 0x5E) - 4] ^ a1;
}

uint64_t sub_10015988C(unsigned int a1)
{
  return byte_1001BA088[(byte_1001BAAFC[a1 - 12] ^ 0xF2) - 8] ^ a1;
}

uint64_t sub_1001598BC(unsigned int a1)
{
  return byte_1001BA5B8[(byte_1001BA198[a1 - 8] ^ 0xD) - 8] ^ a1;
}

uint64_t sub_1001598EC(unsigned int a1)
{
  return byte_1001B9F80[byte_1001BA9F0[a1] ^ 0x92] ^ a1;
}

uint64_t sub_100159918(unsigned int a1)
{
  return byte_1001BA5B8[(byte_1001BA198[a1 - 8] ^ 0x19) - 8] ^ a1;
}

uint64_t sub_100159948(unsigned int a1)
{
  return byte_1001B9F84[(byte_1001BA9FC[a1 - 12] ^ 0xB1) - 4] ^ a1;
}

uint64_t sub_100159978(char a1, unsigned int a2)
{
  return byte_1001BA5B8[(byte_1001BA198[a2 - 8] ^ a1) - 8] ^ a2;
}

uint64_t sub_1001599A4(unsigned int a1)
{
  return byte_1001BA6B0[byte_1001BA298[a1 - 8] ^ 0xF5] ^ a1;
}

uint64_t sub_1001599D0(char a1, unsigned int a2)
{
  return byte_1001BA8B4[(byte_1001BA490[a2] ^ a1) - 4] ^ a2;
}

uint64_t sub_1001599FC(unsigned int a1)
{
  return byte_1001B9F84[(byte_1001BA9FC[a1 - 12] ^ 0x84) - 4] ^ a1;
}

uint64_t sub_100159A2C(unsigned int a1)
{
  return byte_1001BA6B0[byte_1001BA298[a1 - 8] ^ 0x6E] ^ a1;
}

uint64_t sub_100159A58(unsigned int a1)
{
  return byte_1001B9F84[(byte_1001BA9FC[a1 - 12] ^ 0x8A) - 4] ^ a1;
}

uint64_t sub_100159A88(unsigned int a1)
{
  return byte_1001BA7B4[(byte_1001BA394[a1 - 4] ^ 0xC8) - 4] ^ a1;
}

uint64_t sub_100159AB8(char a1, unsigned int a2)
{
  return byte_1001BA088[(byte_1001BAAFC[a2 - 12] ^ a1) - 8] ^ a2;
}

uint64_t sub_100159AE4(unsigned int a1)
{
  return byte_1001BA5B8[(byte_1001BA198[a1 - 8] ^ 0xB5) - 8] ^ a1;
}

uint64_t sub_100159B14(char a1, unsigned int a2)
{
  return byte_1001BA7B4[(byte_1001BA394[a2 - 4] ^ a1) - 4] ^ a2;
}

uint64_t sub_100159B40(unsigned int a1)
{
  return byte_1001BA8B4[(byte_1001BA490[a1] ^ 0x81) - 4] ^ a1;
}

uint64_t sub_100159B70(unsigned int a1)
{
  return byte_1001B9F84[(byte_1001BA9FC[a1 - 12] ^ 0x1A) - 4] ^ a1;
}

uint64_t sub_100159BA0(unsigned int a1)
{
  return byte_1001BA6B0[byte_1001BA298[a1 - 8] ^ 0x78] ^ a1;
}

uint64_t sub_100159BC8(unsigned int a1)
{
  return byte_1001BA8B4[(byte_1001BA490[a1] ^ 0x60) - 4] ^ a1;
}

void sub_100159BF4()
{
  uint64_t v0 = (uint64_t *)*(&off_100232F90
                  + ((9 * ((dword_1002721C0 - dword_1002721B8) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((dword_1002721C0 - dword_1002721B8) ^ 0x7D))] ^ 0x92])
                  - 198);
  unsigned __int8 v1 = 9 * (*v0 ^ dword_1002721C0 ^ 0x7D);
  uint64_t v2 = (uint64_t)*(&off_100232F90 + (byte_1001BA7B4[(byte_1001BA394[v1 - 4] ^ 0xC8) - 4] ^ v1) - 130);
  uint64_t v3 = *v0 - (void)&v8 + *(void *)(v2 - 4);
  uint64_t v4 = 1787074057 * v3 - 0x6585E11862ED39BLL;
  unint64_t v5 = 1787074057 * (v3 ^ 0xEDEBC87B5EDF1A7DLL);
  uint64_t *v0 = v4;
  *(void *)(v2 - 4) = v5;
  LOBYTE(v2) = 9 * ((v5 + *(_DWORD *)v0) ^ 0x7D);
  unint64_t v6 = (char *)*(&off_100232F90
               + ((9 * (dword_1002721B8 ^ 0x7D ^ dword_1002721C0)) ^ byte_1001BA080[byte_1001BAAF0[(9 * (dword_1002721B8 ^ 0x7D ^ dword_1002721C0))] ^ 0xF2])
               - 58)
     - 4;
  uint64_t v7 = *(void *)&v6[8
                    * ((29
                      * ((*(uint64_t (**)(uint64_t, uint64_t))&v6[8
                                                                        * (byte_1001BA088[(byte_1001BAAFC[v2 - 12] ^ 0xF2) - 8] ^ v2)
                                                                        + 17776])(24, 4101018099) != 0)) ^ 0x586)];
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100159DD4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 378813108;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 18520))(4096, 1358311088);
  *(void *)a1 = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * ((46 * (v3 != 0)) ^ 0x3C8u)))();
}

uint64_t sub_100159E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(v13 - 244) = v12;
  *(void *)(v13 - 192) = v11;
  *(_DWORD *)(v13 - 224) = v8;
  *(_DWORD *)(v13 - 220) = v10;
  *(void *)(v13 - 208) = v9;
  *(_DWORD *)(v5 + 8) = v6 + 4096;
  mach_msg_header_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                       + 8
                                                                                       * ((43 * (((v5 == 0) ^ 0xE7) & 1)) ^ 0x4D2));
  *(void *)(v13 - 200) = 0x3972785B6BCAF92ALL;
  return v14(a1, a2, a3, a4, a5, 3793274687);
}

uint64_t sub_100159ED4()
{
  int v3 = v0 & 0xEBD;
  unsigned int v4 = ((v3 - 428) ^ 0x81BC0EF4) + *(_DWORD *)(v1 + 12);
  unsigned int v5 = *(_DWORD *)(v1 + 8) + 1797771605;
  BOOL v6 = v4 < (((v3 - 1164) | 0x2E0) ^ 0x81BC0EF0);
  BOOL v7 = v4 > v5;
  if (v6 != v5 < 0x81BC0C09) {
    BOOL v8 = v6;
  }
  else {
    BOOL v8 = v7;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((111 * v8) ^ v3)))(v1 + 8);
}

uint64_t sub_100159F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  NDR_record_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8 * (((((v16 == 0) ^ (a6 + v15 + 7)) & 1) * (v15 ^ 0x319)) ^ v15));
  *(void *)(v18 - 200) = 0x3972785B6BCAF92ALL;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a1);
}

uint64_t sub_100159FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  int v23 = (a20 << ((v20 ^ (a6 + 100)) + 101)) - 757626216;
  unsigned int v24 = ((2 * v23) & 0x2FAFF5F8) + (v23 ^ 0x97D7FAFC);
  if ((a20 + 26154070) < 0x18234F06 != v24 - 2142546934 < 0x18234F06) {
    BOOL v25 = v24 - 2142546934 < 0x18234F06;
  }
  else {
    BOOL v25 = v24 - 2142546934 > a20 + 26154070;
  }
  return (*(uint64_t (**)(void))(v21 + 8 * (((2 * !v25) | (16 * !v25)) ^ (v22 + v20 - 2003))))();
}

uint64_t sub_10015A074()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (int)((((v2 - 24) ^ 0xE218C73F) * (v0 == 0)) ^ 0x66B)))();
}

uint64_t sub_10015A0B4@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v2 + 8 * (int)(a1 ^ 0xE218CF80)))(v1);
  return v3;
}

void sub_10015D708(unint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 > 0xFFFFFFFFFFFFFFEFLL && a2 != 0;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10015D774(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  BOOL v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 18520))(24, 4101018099) == 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((120 * v3) ^ 0x599u)))();
}

uint64_t sub_10015D7C0(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 35853729;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 18520))(4096, 1358311088);
  *(void *)a1 = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * ((103 * (v3 != 0)) ^ 0x137)))();
}

uint64_t sub_10015D830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v35 - 152) = v34 + 0x1F534F2566915141;
  *(_DWORD *)(v34 + 8) = v31 + 4096;
  os_log_type_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8 * (int)(((((v34 == 0) ^ (v29 + 102)) & 1) * (((v29 - 316339610) ^ 0xED250A23) - 321)) ^ (v29 + 1540)));
  *(void *)(v35 - 168) = (char *)*(&off_100232F90 + v29 - 298) - 8;
  *(void *)(v35 - 200) = 0x2B2216E748EAFB5FLL;
  *(void *)(v35 - 144) = v34;
  return v36(a1, a2, a3, a4, a5, a6, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           v30,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           v32);
}

uint64_t sub_10015D8E0()
{
  int v3 = v0 & 0x17FB;
  unsigned int v4 = *(_DWORD *)(v2 + 12) + 255685404;
  unsigned int v5 = *(_DWORD *)(v2 + 8) + 219831671;
  BOOL v6 = v4 < 0xF3D7318;
  BOOL v7 = v4 > v5;
  if (v6 != v5 < 0xF3D7318) {
    BOOL v8 = v6;
  }
  else {
    BOOL v8 = v7;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((!v8 * (((v3 - 647) | 0x629) ^ 0x70C)) ^ v3)))();
}

void sub_10015D964(int a1@<W6>, int a2@<W7>, int a3@<W8>)
{
  *(void *)(v8 - 200) = 0x2B2216E748EAFB5FLL;
  uint64_t v9 = *v7;
  unsigned int v10 = ((a3 << (v4 ^ 0x3A)) & 0x4FFE7BFE) + (a3 ^ 0x27FF3DFF) - 671038975;
  *(unsigned char *)(*v7 + v10) = 0;
  *(unsigned char *)(v9 + v10 + 1) = 0;
  *(unsigned char *)(v9 + v10 + 2) = 0;
  *(unsigned char *)(v9 + v10 + 3) = 1;
  *v3 += 4;
  *(void *)(v8 - 160) = v6;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10015DCA4()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((((v0 - 137) ^ 0x9A3 ^ (v0 + 1825921279) & 0x932A9FFF) * (v2 == 0)) ^ (v0 - 119))))();
}

uint64_t sub_10015DCF4()
{
  unsigned int v3 = *(_DWORD *)(v2 + 12) - 1129964345;
  unsigned int v4 = *(_DWORD *)(v2 + 8) - 1165818078;
  BOOL v5 = v3 < 0xBCA61CC3;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < ((v0 + 522693193) & 0xE0D84DFF ^ 0xBCA61CBC)) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((89 * v6) ^ v0)))();
}

uint64_t sub_10015DD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8 * (((((v28 == 0) ^ (v25 - 119)) & 1) * ((v25 - 1975) ^ 0x9E)) ^ (v25 - 1975)));
  *(void *)(v29 - 160) = v27;
  return v30(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_10015DDE0()
{
  int v3 = ((v1 ^ 0x329) - 334) | 0x130;
  unsigned int v4 = (v3 ^ 0x1425AD21) + v0;
  unsigned int v5 = ((v3 - 1536722772) & (2 * (2 * v0 - 71707458))) + ((2 * v0 - 71707458) ^ 0xD233BDF3);
  if (v4 < 0x1648C3B6 != v5 + 1142228419 < 0x1648C3B6) {
    BOOL v6 = v5 + 1142228419 < 0x1648C3B6;
  }
  else {
    BOOL v6 = v5 + 1142228419 > v4;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((110 * !v6) ^ v3)))();
}

uint64_t sub_10015DE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v30 = *(void *)(v29 - 152);
  int v31 = (v27 - 2030371456) & 0x790503BE;
  *(void *)(v29 - 152) = v30;
  uint64_t v32 = *(void *)(v30 - 0x1F534F2566915141);
  int v33 = ((2 * a9) & 0x57DFFDDE) + (a9 ^ 0x2BEFFEEF);
  *(unsigned char *)(v32 + v33 + (v31 ^ 0xD41000AF)) = 56;
  v33 -= 737148753;
  *(unsigned char *)(v32 + (v33 + 99)) = 91;
  *(unsigned char *)(v32 + (v33 + 100)) = 44;
  *(unsigned char *)(v32 + (v33 + 101)) = -24;
  *v26 += 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (int)((a7 + a8 + (v31 ^ 0x5E9) - 1111 - 1238) ^ v31)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10015E080()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((((v0 ^ 0x440) + 931) ^ (39 * (v0 ^ 0x440))) * (v2 == 0)) ^ v0)))();
}

uint64_t sub_10015E0C0()
{
  unsigned int v3 = *(_DWORD *)(v2 + 12) + 2103532965;
  unsigned int v4 = *(_DWORD *)(v2 + 8) + 2067679232;
  BOOL v5 = v3 < (v0 ^ 0x7D615E20u);
  BOOL v6 = v3 > v4;
  if (v5 != v4 < ((v0 - 373) | 0x42u) + 2103532371) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((1844 * v6) ^ v0)))();
}

uint64_t sub_10015E148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  HIDWORD(a23) = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8 * ((((v25 ^ 0x28) - 582) * (v27 != 0)) ^ v25)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_10015E184()
{
  int v3 = 3 * (v1 ^ 0x2AC);
  unsigned int v4 = v0 - 1615262585 + v3;
  unsigned int v5 = (((2 * v0 - 71707458) << ((v3 + 75) ^ 0xA8)) & 0xA776EB70) + ((2 * v0 - 71707458) ^ 0xD3BB75B9);
  if (v4 < 0xA1DC2482 != v5 - 836718903 < 0xA1DC2482) {
    BOOL v6 = v5 - 836718903 < 0xA1DC2482;
  }
  else {
    BOOL v6 = v5 - 836718903 > v4;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((56 * !v6) ^ v3)))();
}

uint64_t sub_10015E254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v29 = *(void *)(v28 - 152);
  int v30 = (v26 - 589) | 0x38A;
  *(void *)(v28 - 152) = v29;
  uint64_t v31 = *(void *)(v29 - 0x1F534F2566915141);
  unsigned int v32 = ((2 * a9) & 0x478E7FDE) + (a9 ^ 0x23C73FEF);
  unsigned int v33 = v32 + (v30 ^ 0xDC38C399);
  v32 -= 600260591;
  *(unsigned char *)(v31 + v32) = 0;
  *(unsigned char *)(v31 + v33) = 0;
  *(unsigned char *)(v31 + v32 + 2) = 0;
  *(unsigned char *)(v31 + v32 + 3) = 1;
  *v25 += 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * (int)((((9 * (v30 ^ 0x33C)) ^ (a7 + 557)) + v30 - a7 + 1332) ^ v30)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_10015E434()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((((((2 * v0) ^ 0xD60) - 312) | 0x618) ^ 0x684) * (v2 == 0)) ^ v0)))();
}

uint64_t sub_10015E474()
{
  unsigned int v3 = *(_DWORD *)(v2 + 12) + 1658655541;
  unsigned int v4 = *(_DWORD *)(v2 + 8) + ((v0 + 190) ^ 0x60B9FAD0);
  BOOL v5 = v3 < ((v0 - 1534) | 0x10Au) + 1658655107;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x62DD132D) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((3611 * v6) ^ v0)))();
}

uint64_t sub_10015E4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  LODWORD(a23) = v23;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * (((((2 * v24) ^ 0xF06) + ((v24 - 1704) | 0x509) - 1852) * (v26 == 0)) ^ v24)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

uint64_t sub_10015E540()
{
  unsigned int v3 = v0 - 1610165446;
  BOOL v4 = (v0 - 1610165446) < 0xA229E8D3;
  unsigned int v5 = ((2 * (2 * v0 - 71707458)) & 0xB677EFD4) + ((2 * v0 - 71707458) ^ ((v1 ^ 0x29A) - 616828732));
  if (v4 != v5 - 957484824 < 0xA229E8D3) {
    BOOL v6 = v5 - 957484824 < 0xA229E8D3;
  }
  else {
    BOOL v6 = v5 - 957484824 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((527 * v6) ^ v1)))();
}

uint64_t sub_10015E5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v35 = *(void *)(v34 - 152);
  uint64_t v36 = (v32 + 20);
  *(void *)(v34 - 152) = v35;
  uint64_t v37 = *(void *)(v35 - 0x1F534F2566915141);
  uint64_t v38 = ((2 * a9) & 0x1CAB9FBB6) + (a9 ^ 0x7BAFA3BFE55CFDDBLL);
  *(unsigned char *)(v37 + v38 + (v36 ^ 0x84505C401AA3039BLL)) = -1;
  uint64_t v39 = v37 - 0x7BAFA3BFE55CFDDALL + v38;
  *(_WORD *)uint64_t v39 = -1;
  *(_DWORD *)(v39 + 2) = -1;
  *(unsigned char *)(v39 + 6) = (a31 - ((2 * a31) & 0x58) + 44) ^ 0x2C;
  *v31 += 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8 * (int)((v36 - a7 + 1793) ^ (a8 + 46) ^ v36 ^ 0x571 ^ v36)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_10015E810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)(v10 - 128) = 0;
  return (*(uint64_t (**)(void))(v8 + 8 * (int)(((a7 + ((v7 - 4851920) & 0xB47F2FBF) - 2216) * (v9 == 0)) ^ v7)))();
}

uint64_t sub_10015E868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v31 = v27 - 796;
  uint64_t v32 = (*(uint64_t (**)(void))(v28 + 8 * ((v27 - 796) ^ 0x892)))();
  (*(void (**)(uint64_t, uint64_t, void, void))(v28 + 8 * (v31 + 1846)))(v32, *(void *)(v29 + 8 * (v31 - 430)) - 3, **(void **)(v30 - 144), *(unsigned int *)(*(void *)(v30 - 144) + 12));
  uint64_t v33 = (*(uint64_t (**)(void, void))(v28 + 8 * (v31 + 1868)))(*(void *)(v30 - 168), 0);
  *(void *)(v30 - 192) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (((v33 == 0) * (v31 + (v31 ^ 0x7F) + 33)) ^ v31)))(v33, v34, v35, v36, v37, v38, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10015E918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v30 = (*(uint64_t (**)(void, uint64_t, void))(v27 + 8 * (v26 + 1848)))(*(void *)(v28 - 168), a1, 0);
  int v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((v30 == 0) ^ v26));
  *(void *)(v28 - 192) = a1;
  return v31(v30, v32, v33, v34, v35, v36, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10015E978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  int v39 = v35 ^ 0x248;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8 * (v39 + 1455)))(a1, *(void *)(v37 + 8 * (v39 - 869)) - 12);
  (*(void (**)(uint64_t))(v36 + 8 * (v39 + 1325)))(a1);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8 * (v39 ^ 0xAA8)))(a1, a35);
  uint64_t v40 = (*(uint64_t (**)(void))(v36 + 8 * (v39 ^ 0xA96)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8 * (int)(((v40 != *(void *)(v37 + 8 * (v39 - 890))) * ((v39 - 1176667641) ^ 0xB9DD7D70 ^ (v39 - 1176667641) & 0x462282FC ^ 0x66)) ^ v39)))(v40, v41, v42, v43, v44, v45, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_10015EA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  unsigned int v33 = (a8 + v30 - 1321618659) & 0x9A9128FD;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 8 * (v30 + 2075)))(a29, v31, v32 - 128);
  int v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29
                                                                                                + 8
                                                                                                * (int)(((v34 == 0) * (v33 ^ 0x946)) ^ v30));
  *(void *)(v32 - 200) = 0x2B2216E748EAFB5FLL;
  return v35(v34, v36, v37, v38, v39, v40, 1271586048);
}

uint64_t sub_10015EAEC()
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 + 54)))(24, 4101018099);
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1
                                                                                               + 8
                                                                                               * (((v3 != 0)
                                                                                                 * (((v0 - 2078269644) | 0x301503B6)
                                                                                                  + 1271583817)) ^ v0));
  *(void *)(v2 - 200) = 0x2B2216E748EAFB5FLL;
  return v4(v3, v5, v6, v7, v8, v9, 1271586048);
}

uint64_t sub_10015EB80(uint64_t a1)
{
  *(void *)(v3 - 176) = a1 + 0x2B2216E748EAFB5FLL;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 445517218;
  *(_DWORD *)(a1 + 12) = 661609844;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 + 54)))(4096, 1358311088);
  *(void *)a1 = v5;
  return (*(uint64_t (**)(void))(v2 + 8 * (((v5 != 0) * ((v1 - 1723) ^ 0x27F)) ^ (v1 - 2070))))();
}

uint64_t sub_10015EC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(v9 + 8) = v8 + 4096;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8 * (((*(void *)(v10 - 128) > (unint64_t)(v8 - 445513122)) * ((5 * ((v6 | 0x21) ^ 0x22D)) ^ 0xB4C)) ^ (v6 | 0x21))))(a1, a2, a3, a4, a5, a6, 1271586048, 3023383487);
}

uint64_t sub_10015EC6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * (((((v4 == 0) ^ ((v3 ^ 7) + 59) ^ 0x69) & 1)
                                                       * ((((v3 ^ 0x707) - 1211718341) & 0x48395B7F) - 2080)) ^ v3 ^ 0x707)))(a1, a2);
}

uint64_t sub_10015ECCC@<X0>(int a1@<W8>)
{
  int v5 = v2 - 108;
  unsigned int v6 = v1 + v3 + a1;
  int v7 = ((2 * ((a1 << (v5 ^ 0x60)) - 891034436)) & 0x3D1E9BCC) + (((a1 << (v5 ^ 0x60)) - 891034436) ^ 0x1E8F4DE7);
  if (v6 > 0xA80F72B4 != (v7 + 962674532) < 0x57F08D4B) {
    BOOL v8 = (v7 + 962674532) < 0x57F08D4B;
  }
  else {
    BOOL v8 = v7 + 962674532 > (v5 ^ 0x57F08E2A) + v6;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8 * ((172 * !v8) ^ v5)))(1025416140, 4227776443, 962674532);
}

uint64_t sub_10015ED90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return (*(uint64_t (**)(void))(v29
                              + 8
                              * (int)(((a29 == (void)*(&off_100232F90 + v30 - 117) - 8)
                                     * ((a8 + ((v30 + 376) | 0x191) - 1689) ^ (v30 - 1258295497) & 0xFF353BFF)) ^ v30)))();
}

uint64_t sub_10015EE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v37 + 8 * (v36 + 1435));
  *(void *)(v38 - 176) = v35;
  v39(a26, a35);
  uint64_t v40 = (*(uint64_t (**)(void))(v37 + 8 * (v36 ^ 0xA83)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * (int)(((v40 == *(void *)(v38 - 176)) * (v36 - 553 + ((v36 + 1399813486) & 0xAC9087FB) + 966)) ^ v36)))(v40, v41, v42, v43, v44, v45, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_10015EE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return (*(uint64_t (**)(void))(v30 + 8 * (((a7 + ((v31 + 521) ^ (a8 - 753)) - 989) * (a29 == v29)) ^ v31)))();
}

uint64_t sub_10015EED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  (*(void (**)(uint64_t, uint64_t))(v36 + 8 * (v35 + 1467)))(a26, a35);
  uint64_t v38 = (*(uint64_t (**)(void))(v36 + 8 * (v35 ^ 0xA63)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8 * (((((v35 - 20) ^ (v38 == *(void *)(v37 - 176))) & 1) * ((v35 + 1550007276) ^ 0x5C633FBD)) ^ v35)))(v38, v39, v40, v41, v42, v43, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_10015EF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return (*(uint64_t (**)(void))(v30
                              + 8
                              * (int)(((((a29 == v29) ^ (v31 + 52)) & 1)
                                     * (((v31 & 0xA39CC0FF) - 42599518) & 0xB6BF2FBF ^ (a8 - 85))) ^ v31 & 0xA39CC0FF)))();
}

uint64_t sub_10015EFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  (*(void (**)(uint64_t, uint64_t))(v36 + 8 * (v35 + 1435)))(a26, a35);
  uint64_t v38 = (*(uint64_t (**)(void))(v36 + 8 * (v35 + 1409)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8 * (int)(((v38 == *(void *)(v37 - 176)) * (((v35 + 1187161198) & 0xB93D58FB) + (v35 ^ 0x7D))) ^ v35)))(v38, v39, v40, v41, v42, v43, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_10015F048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return (*(uint64_t (**)(void))(v31
                              + 8
                              * (int)((((((v29 ^ 0x319) + 248) | 0x211) ^ (a8 + 659) ^ ((v29 ^ 0x319) - 33706121) & 0xB6377BBF)
                                     * (a29 == v30)) ^ v29 ^ 0x319)))();
}

uint64_t sub_10015F0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v38 = v35;
  (*(void (**)(uint64_t, uint64_t))(v37 + 8 * (v36 ^ 0xABD)))(a26, a35);
  uint64_t v39 = (*(uint64_t (**)(void))(v37 + 8 * (v36 ^ 0xA83)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * (int)(((v39 == v38) * ((v36 ^ 0x36A) + 1271586048 + ((v36 - 1119912850) & 0xF6F5ABBF) - 1392)) ^ v36)))(v39, v40, v41, v42, v43, v44, 1271586048, 3023383487, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_10015F158()
{
  uint64_t v4 = *(uint64_t (**)(void))(v1 + 8 * (int)((((v0 ^ 0xB43529A5) + 1271584009) * (v2 == 0)) ^ v0 ^ 0x25A));
  *(void *)(v3 - 200) = 0x2B2216E748EAFB5FLL;
  return v4();
}

uint64_t sub_10015F1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  (*(void (**)(uint64_t))(v36 + 8 * (v37 ^ (a8 - 2239))))(v38);
  *(void *)(v39 - 200) = 0x2B2216E748EAFB5FLL;
  (*(void (**)(uint64_t))(v36 + 8 * (int)(v37 ^ 0xB43522BA)))(v35);
  (*(void (**)(uint64_t))(v36 + 8 * (v37 & 0x4240C905)))(a26);
  return (*(uint64_t (**)(void))(v36 + 8 * ((4033 * (a35 != 0)) ^ (v37 + 1271585819))))();
}

uint64_t sub_10015F590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v34 = (*(uint64_t (**)(void))(v32 + 8 * v30))();
  uint64_t v35 = *(uint64_t (**)(uint64_t))(v32 + 8 * ((v29 - 1233) ^ (1982 * (a29 != 0))));
  *(void *)(v33 - 192) = v31;
  return v35(v34);
}

uint64_t sub_10015F5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v36 = (*(uint64_t (**)(uint64_t))(v31 + 8 * (v34 & 0x88905)))(a29);
  *(void *)(v35 - 192) = v30;
  if (v32 == -45004)
  {
    *(void *)(v35 - 176) = v29;
    *(void *)(v35 - 120) = 0;
    *(_DWORD *)(v35 - 132) = 0;
    uint64_t v42 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v31 + 18736))(**(unsigned int **)(v33 + 64), **(void **)(v35 - 144), *(unsigned int *)(*(void *)(v35 - 144) + 12), v35 - 120, v35 - 132);
    int v43 = (v42 ^ 0x5B5FEEA9) - 285344800 + ((2 * v42) & 0xB6BFDD52) != 1516104332;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * ((v43 | (v43 << 6)) ^ 0x419)))(v42, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  }
  else if (v32)
  {
    return sub_100160930(v36, v37, v38, v39, v40, v41, 1271586048, 191);
  }
  else
  {
    return (*(uint64_t (**)(uint64_t))(v31
                                              + 8 * ((63 * (*(void *)(v35 - 200) == 0x2B2216E748EAFB5FLL)) ^ 0x29D)))(v36);
  }
}

uint64_t sub_10015FD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = ((((v3 + 483) ^ 0x749) - 810) ^ 0x76B21497) + *(_DWORD *)(a3 - 0x2B2216E748EAFB53);
  unsigned int v6 = *(_DWORD *)(a3 - 0x2B2216E748EAFB57) - 2087492361;
  BOOL v7 = v5 < 0x9E217299;
  BOOL v8 = v5 > v6;
  if (v6 < 0x9E217299 != v7) {
    BOOL v8 = v7;
  }
  return (*(uint64_t (**)(void))(v4 + 8 * ((87 * !v8) ^ (v3 + 483))))();
}

uint64_t sub_10015FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 0x2B2216E748EAFB5FLL);
  int v8 = (*(unsigned __int8 *)(v7 + ((((v5 + 1353215190) & 0xAF578FFF) - 661607984) ^ (v5 + 790672959) & 0xD0DF4DDA) + v4) << 24) | (*(unsigned __int8 *)(v7 + (v4 - 661609843)) << 16) | (*(unsigned __int8 *)(v7 + (v4 - 661609842)) << 8) | *(unsigned __int8 *)(v7 + (v4 - 661609841));
  _DWORD *v3 = v4 + 4;
  return (*(uint64_t (**)(void))(v6 + 8 * ((3178 * (v8 == 0)) ^ v5)))();
}

uint64_t sub_10015FEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((86 * (v3 ^ 0x90C)) ^ 0x4A5) * (a3 != 0x2B2216E748EAFB5FLL)) | v3)))();
}

uint64_t sub_10015FEFC(int a1)
{
  unsigned int v4 = ((((a1 + 1570025802) & 0xA26B4BBF) + 810) ^ 0x686C2B9) + v2;
  int v5 = ((v1 - 106596729) < 0x2114D3F3) ^ (v4 < 0x2114D3F3);
  BOOL v6 = v1 - 106596729 > v4;
  if (v5) {
    BOOL v6 = (v1 - 106596729) < 0x2114D3F3;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((92 * v6) ^ a1)))();
}

uint64_t sub_10015FF7C@<X0>(uint64_t a1@<X2>, int a2@<W6>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int *a15)
{
  int v21 = (*(unsigned __int8 *)(v17 + (v18 + v16 + 3)) << (v19 + 48)) | (*(unsigned __int8 *)(v17 + (v18 + v16 + 4)) << 16) | (*(unsigned __int8 *)(v17 + (v18 + v16 + 5)) << 8) | *(unsigned __int8 *)(v17 + (v18 + v16 + 6));
  *int v15 = v16 + 8;
  *a15 = v21;
  return (*(uint64_t (**)(void))(v20
                              + 8
                              * (int)(((a2 + v19 - 591 + ((v19 - 188926185) & 0xBF77EFBF) - 2786) * (a1 != a3)) ^ (v19 - 810))))();
}

uint64_t sub_100160010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  BOOL v11 = *(void *)(*(void *)(v10 - 200) - 0x2B2216E748EAFB5FLL) == 0;
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((v11 ^ (a8 + v8 + 103)) & 1 | (32
                                                                                * ((v11 ^ (a8 + v8 + 103)) & 1))) ^ v8)))();
}

uint64_t sub_100160058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  (*(void (**)(void))(v11 + 8 * (v10 ^ (a8 - 2239))))();
  *uint64_t v9 = 0;
  *(_DWORD *)(v8 - 0x2B2216E748EAFB57) = 445517218;
  *(_DWORD *)(v8 - 0x2B2216E748EAFB53) = 661609844;
  uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 8 * (v10 + 1271586048)))(v9);
  return sub_100160930(v12, v13, v14, v15, v16, v17, 1271586048, 191);
}

uint64_t sub_1001600DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_DWORD *a27,int a28,int a29)
{
  unsigned int v33 = (a8 - 1337304249) & 0x9B807CF9;
  uint64_t v34 = (*(uint64_t (**)(void))(v30 + 8 * (a8 ^ (a8 - 2239))))(*(void *)(v29 - 0x2B2216E748EAFB5FLL));
  *(void *)(v29 - 0x2B2216E748EAFB5FLL) = a22;
  *a27 = a29;
  *(void *)(v32 - 160) = v31;
  return (*(uint64_t (**)(uint64_t))(v30 + 8 * (int)(((v33 ^ 0x5C0) - 342) | v33)))(v34);
}

void sub_100160174()
{
  *(void *)(v1 - 184) = v0;
  JUMPOUT(0x1001601A0);
}

uint64_t sub_100160210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (int)((((v9 - 159553200) ^ 0xF67D6DC8 ^ (a8 - 449) ^ (v9 - 159553200) & 0xBDB7BBBF)
                                     * (v8 != 0)) ^ v9)))();
}

uint64_t sub_100160258@<X0>(uint64_t a1@<X0>, int a2@<W7>, uint64_t a3@<X8>)
{
  BOOL v7 = v3 < 8 || a1 - a3 < ((v4 - 2023158380) & 0x7896F5B7 ^ 0x5A3uLL);
  return (*(uint64_t (**)(void))(v5 + 8 * (int)((v7 * ((v4 - 1133041272) & 0xF7BDFFFF ^ (a2 + 38))) ^ v4)))();
}

uint64_t sub_1001602BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v10 + 8 * (((a7 + a8 + (v9 ^ 0x2E2) - 1889 - 2202) * (v8 > 0x1F)) ^ v9)))();
}

uint64_t sub_1001602F4@<X0>(_OWORD *a1@<X0>, int a2@<W6>, int a3@<W7>, _OWORD *a4@<X8>)
{
  long long v7 = a4[1];
  *a1 = *a4;
  a1[1] = v7;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((37 * (((v5 - a3 + 910) ^ 0x3AELL) == (v4 & 0xFFFFFFE0))) ^ (a2 + v5 - 618))))();
}

uint64_t sub_10016034C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v0 == 0) ^ (5 * (v1 ^ 0xEE))) & 1) * (v1 - 1908)) ^ v1)))();
}

uint64_t sub_100160380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v11 = v8 < ((((v9 - 2147212921) | 0x34310817) - a8 + 1057) ^ 0x429u);
  return (*(uint64_t (**)(void))(v10 + 8 * ((v11 | (4 * v11)) ^ v9)))();
}

uint64_t sub_1001603C8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((14 * (v1 >= ((v0 + 178) ^ 0x4F3uLL))) | v0)))();
}

uint64_t sub_100160400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(void))(v9 + 8 * (((v7 >= a7 + ((v8 - 1128928468) & 0xF77F3BBF) - 2207) * (v8 ^ 0x4D5)) ^ v8)))();
}

uint64_t sub_100160450@<X0>(uint64_t a1@<X0>, int a2@<W6>, int a3@<W7>, uint64_t a4@<X8>)
{
  uint64_t v7 = (v4 - 1);
  long long v8 = *(_OWORD *)(a4 + v7 - 15);
  long long v9 = *(_OWORD *)(a4 + v7 - 31);
  uint64_t v10 = a1 + v7;
  *(_OWORD *)(v10 - 15) = v8;
  *(_OWORD *)(v10 - 31) = v9;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((633 * (2 * (v5 ^ (a3 - 299)) - 566 == (v4 & 0xFFFFFFE0))) ^ (a2 + v5 - 1147))))();
}

uint64_t sub_1001604B8()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 ^ 0x60D) - 1381) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_1001604E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10
                              + 8 * (int)((((v9 - 151669188) & 0xBD3F6FFF ^ (a8 - 950)) * ((v8 & 0x18) == 0)) ^ v9)))();
}

uint64_t sub_100160520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + v2) = *(void *)(a2 + v2);
  return (*(uint64_t (**)(void))(v5 + 8 * ((3867 * (((27 * (v4 ^ 0x776u)) ^ 0x265) + v2 == (v3 & 0xFFFFFFF8))) ^ v4)))();
}

uint64_t sub_100160570()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v2 - 386) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_100160598@<X0>(uint64_t a1@<X0>, int a2@<W6>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a1 + v3) = *(unsigned char *)(a3 + v3);
  return (*(uint64_t (**)(void))(v6 + 8 * ((29 * (v3 + 1 != v4)) | (a2 + v5 - 1695))))();
}

uint64_t sub_1001605CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v11 + 8 * ((((v10 - a7 + 1641) ^ (a8 + 941) ^ 0x4D9) * (v8 == v9)) ^ v10)))();
}

uint64_t sub_100160600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10
                              + 8 * ((711 * ((v8 & 0x18) == ((a8 + v9 + 1295515245) & 0xFE92D59E) - 1182)) ^ v9)))();
}

uint64_t sub_10016064C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 - 7 + (v2 ^ 0xFFFFFDDB ^ ((v4 - 638) | 4)) + v3) = *(void *)(a2
                                                                                            - 7
                                                                                            + (v2 ^ 0xFFFFFDDB ^ ((v4 - 638) | 4))
                                                                                            + v3);
  return (*(uint64_t (**)(void))(v5 + 8 * ((726 * ((v3 & 0xFFFFFFF8) - 8 == v2)) ^ v4)))();
}

void sub_1001606A0()
{
}

uint64_t sub_1001606A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return (*(uint64_t (**)(void))(v11 + 8 * (((v10 ^ (a8 - 548) ^ (v10 - a7 + 2022)) * (v9 == v8)) ^ v10)))();
}

uint64_t sub_1001606DC()
{
  return v0();
}

uint64_t sub_1001606E4()
{
  uint64_t v2 = *(void *)(v1 - 184);
  *(_DWORD *)(v2 - 0x2B2216E748EAFB57) = (*(_DWORD *)(v1 - 132) ^ 0x7AAF7FB3)
                                         - 1612804625
                                         + ((2 * *(_DWORD *)(v1 - 132)) & 0xF55EFF66);
  *(_DWORD *)(v2 - 0x2B2216E748EAFB53) = 661609844;
  uint64_t v3 = v2;
  uint64_t v4 = (*(uint64_t (**)(void, void, void))(v0 + 18672))(mach_task_self_, *(void *)(v1 - 120), *(unsigned int *)(v1 - 132));
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 7448);
  *(void *)(v1 - 200) = v3;
  return v5(v4);
}

uint64_t sub_100160754@<X0>(uint64_t a1@<X0>, int a2@<W6>, uint64_t a3@<X8>)
{
  unsigned int v6 = v3 - 1;
  *(unsigned char *)(a1 + v6) = *(unsigned char *)(a3 + v6);
  return (*(uint64_t (**)(void))(v5 + 8 * ((225 * (v6 == 0)) ^ (a2 + v4 - 423))))();
}

uint64_t sub_100160788()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((v1 != 0x2B2216E748EAFB5FLL) | v0)))();
}

uint64_t sub_1001607C4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((((a1 | 0xC9) - 1124648714) & 0xF73DEFFF) - 21) ^ (a1 | 0xC9) ^ 0xB4352976)
                                     * (*(void *)(v1 - 0x2B2216E748EAFB5FLL) == 0)) ^ (a1 | 0xC9))))();
}

void sub_100160830(int a1@<W8>)
{
  void *v2 = 0;
  *(_DWORD *)(v3 - 0x2B2216E748EAFB57) = 445517218;
  *(_DWORD *)(v3 - 0x2B2216E748EAFB53) = 661609844;
  (*(void (**)(void *))(v4 + 8 * (a1 ^ (v1 - 2239))))(v2);
  JUMPOUT(0x1001608B0);
}

uint64_t sub_100160930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((a7 + v8 - 1976) | (32 * (((v10 == 0) ^ (3 * (v8 ^ (a8 - 65)))) & 1)))))();
}

uint64_t sub_100160964@<X0>(int a1@<W6>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (int)(((*v3 != 0) * (a1 + ((a2 + 607126217) | 0x900523B3) - 2187)) | a2)))();
}

void sub_1001609A4()
{
  (*(void (**)(void))(v1 + 8 * (v0 & 0x200CCFF)))();
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 35853729;
  *(_DWORD *)(v2 + 12) = 0;
  JUMPOUT(0x1001609D8);
}

void sub_100160A28()
{
  uint64_t v0 = (uint64_t)*(&off_100232F90
                + ((9 * ((dword_1002721C0 + dword_1002721E0) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((dword_1002721C0 + dword_1002721E0) ^ 0x7D))] ^ 0x1A])
                - 159);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = (uint64_t)*(&off_100232F90
                + (byte_1001BA7B4[(byte_1001BA394[(9 * ((dword_1002721C0 + v1) ^ 0x7D))
                                                                 - 4] ^ 0xC8)
                                                 - 4] ^ (9 * ((dword_1002721C0 + v1) ^ 0x7D)))
                - 130);
  unint64_t v3 = 1787074057 * ((*(void *)(v2 - 4) - v1 - (void)&v6) ^ 0xEDEBC87B5EDF1A7DLL);
  *(void *)(v0 - 4) = v3;
  *(void *)(v2 - 4) = v3;
  LOBYTE(v2) = 9 * ((v3 + *(_DWORD *)(v0 - 4)) ^ 0x7D);
  uint64_t v4 = (char *)*(&off_100232F90
               + ((9 * ((dword_1002721C0 + dword_1002721E0) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((dword_1002721C0 + dword_1002721E0) ^ 0x7D))] ^ 0x92])
               - 183)
     - 4;
  uint64_t v5 = *(void *)&v4[8
                    * ((8
                      * ((*(uint64_t (**)(uint64_t, uint64_t))&v4[8
                                                                        * (byte_1001BA6B0[byte_1001BA298[v2 - 8] ^ 0xF5] ^ v2)
                                                                        + 16592])(24, 4101018099) != 0)) | 0x740)];
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100160BDC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 1640180093;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 18520))(4096, 1358311088);
  *(void *)a1 = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * (((2 * (v3 == 0)) | (8 * (v3 == 0))) ^ 0x6C2u)))();
}

uint64_t sub_100160C30()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((15 * (((v0 == 0) ^ 0xED) & 1)) ^ 0x486u)))();
}

uint64_t sub_100160C68@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v3 + 8 * ((a1 & 0x36DFEF7) - 57533478)))(v1);
  return v2;
}

int *sub_100164484(int *result)
{
  int v1 = 1607344658;
  unsigned int v2 = result[2] ^ (2052531167
                  * (((result | 0x5A1B0962) - result + (result & 0xA5E4F69D)) ^ 0x9F91BE4E));
  if (v2 - 1830816770 > 0x39
    || ((1 << ((*((unsigned char *)result + 8) ^ (-33
                                                           * (((result | 0x62)
                                                             - (_BYTE)result
                                                             + (result & 0x9D)) ^ 0x4E)))
               - 2)) & 0x3C8E3C03CE503CFLL) == 0)
  {
    unsigned int v4 = v2 - 1830818786;
    BOOL v5 = v4 > 0xD;
    int v6 = (1 << v4) & 0x203F;
    if (v5 || v6 == 0) {
      int v1 = 1607344657;
    }
  }
  *uint64_t result = v1;
  return result;
}

void sub_100164534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4) {
    BOOL v7 = a5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  int v10 = v7 || a6 == 0 || a7 == 0;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1001645E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, void *a6, _DWORD *a7)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  return (*(uint64_t (**)(void))(v7 + 8 * ((50 * (qword_1002744E0 == 0)) ^ 0x45Au)))();
}

uint64_t sub_100164648()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((4 * (*(void *)(v3 + 24) == 0)) | (8 * (*(void *)(v3 + 24) == 0))) ^ (v0 + v1 - 986))))();
}

uint64_t sub_100164674()
{
  (*(void (**)(void))(v2 + 8 * (v1 + v0)))();
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 36) = 0;
  *(void *)uint64_t v3 = 0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((4 * (*(void *)(v3 + 48) != 0)) | (16 * (*(void *)(v3 + 48) != 0)) | (v0 + v1 - 733))))();
}

uint64_t sub_1001646BC()
{
  (*(void (**)(void))(v2 + 8 * (v1 ^ (v1 - 2221))))();
  *(void *)(v3 + 48) = 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((63 * (*(void *)(v3 + 64) == 0)) ^ (v0 + v1 - 1451))))();
}

uint64_t sub_100164700()
{
  *(_DWORD *)(v3 + 76) = 0;
  *(void *)(v3 + 40) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v0 + v1 + 76)))(24, 4101018099);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8 * (((v4 == 0) * ((v1 ^ (v1 + 12)) - 980)) | (v0 + v1 - 1126))))(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100164818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 120617518;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8 * (v9 + 1303)))(4096, 1358311088);
  *(void *)a1 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8 * (int)(((v12 == 0) * ((2 * v9) ^ 0x186 ^ (v9 + 492302575) & 0xE2A80FBE ^ 0x2C5)) ^ v9)))(v12, v13, v14, v15, v16, v17, v18, v19, a9);
}

uint64_t sub_1001648A4()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((v1 + v0 - 1261) ^ (v0 - v4 + 1053)) * (v3 == 0)) | v0)))();
}

uint64_t sub_1001648D8@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v2 + 8 * ((a1 - 1186) ^ (v1 - 2221))))(v3);
  return v4;
}

void sub_10016862C()
{
  uint64_t v0 = (uint64_t)*(&off_100232F90
                + (byte_1001BA6B0[byte_1001BA298[(9 * ((dword_1002721C0 + dword_1002721D8) ^ 0x7D))
                                                                                               - 8] ^ 0x6E] ^ (9 * ((dword_1002721C0 + dword_1002721D8) ^ 0x7D)))
                + 15);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = (uint64_t)*(&off_100232F90
                + (byte_1001BA5B0[byte_1001BA190[(9 * (v1 ^ dword_1002721C0 ^ 0x7D))] ^ 0x19] ^ (9 * (v1 ^ dword_1002721C0 ^ 0x7D)))
                - 39);
  uint64_t v3 = *(void *)(v2 - 4) - v1 - (void)&v8;
  unint64_t v4 = (1787074057 * v3) ^ 0xEDEBC87B5EDF1A7DLL;
  unint64_t v5 = 1787074057 * (v3 ^ 0xEDEBC87B5EDF1A7DLL);
  *(void *)(v0 - 4) = v4;
  *(void *)(v2 - 4) = v5;
  uint64_t v6 = (char *)*(&off_100232F90
               + ((9 * ((dword_1002721C0 + dword_1002721D8) ^ 0x7D)) ^ byte_1001BA8B0[byte_1001BA490[(9 * ((dword_1002721C0 + dword_1002721D8) ^ 0x7D))] ^ 0x81])
               - 132)
     - 4;
  uint64_t v7 = *(void *)&v6[8
                    * ((1009
                      * ((*(uint64_t (**)(uint64_t, uint64_t))&v6[8
                                                                        * ((9
                                                                                           * ((v5 - *(_DWORD *)(v0 - 4)) ^ 0x7D)) ^ byte_1001BA5B0[byte_1001BA190[(9 * ((v5 - *(_DWORD *)(v0 - 4)) ^ 0x7D))] ^ 0xB5])
                                                                        + 17320])(24, 4101018099) != 0)) ^ 0x5F2)];
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1001687F4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 933984072;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 18520))(4096, 1358311088);
  *(void *)a1 = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * ((40 * (v3 == 0)) ^ 0x480u)))();
}

uint64_t sub_10016886C()
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((v1 - v2 - 509) ^ v1 ^ (v3 + 1040) ^ 0xA3) * (v0 == 0)) ^ v1)))();
}

uint64_t sub_1001688A8@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v3 + 8 * (a1 - 937701277)))(v1);
  return v2;
}

void sub_10016B8CC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10016B938(void *a1, _DWORD *a2)
{
  *a1 = 0;
  *a2 = 0;
  BOOL v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 18520))(24, 4101018099) == 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((4085 * v3) ^ 0x7E7u)))();
}

uint64_t sub_10016B988(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 1411182149;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 18520))(4096, 1358311088);
  *(void *)a1 = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * ((2 * (((v3 == 0) ^ 0xF7) & 1)) ^ 0x40Du)))();
}

uint64_t sub_10016B9F4(uint64_t a1, uint64_t a2)
{
  *(void *)(v7 - 152) = v5;
  *(void *)(v7 - 232) = v6 + 0x3797084C688F39EALL;
  *(_DWORD *)(v6 + 8) = v3 + 4096;
  char v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(v4
                                                                           + 8
                                                                           * ((((179 * (v2 & 0x46B7 ^ 0x6A5)) ^ 0x173)
                                                                             * (v6 == 0)) ^ v2 & 0x46B7u));
  int v9 = (char *)*(&off_100232F90 + (v2 & 0x46B7 ^ 0x6AAu)) - 8;
  *(void *)(v7 - 224) = v9;
  *(void *)(v7 - 216) = v6;
  *(void *)(v7 - 208) = v9;
  return v8(a1, a2, 0, 0x3935222BFCD46514, 0);
}

uint64_t sub_10016BAA0()
{
  unsigned int v3 = *(_DWORD *)(v2 + 12) + 1775094903;
  unsigned int v4 = (v0 ^ 0x1C8) + 363912576 + *(_DWORD *)(v2 + 8);
  BOOL v5 = v3 < 0x69CDCC73;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x69CDCC73) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * ((v7 * ((((v0 ^ 0x1C8) - 792126199) & 0x136E65C) + 765)) ^ v0 ^ 0x1C8u)))(v2 + 8);
}

uint64_t sub_10016BB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (2 * (v4 ^ 0x4A7)) ^ 0x16D;
  int v9 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(v5 + 8 * ((v8 * (v6 == 0)) | v4));
  *(void *)(v7 - 208) = v8;
  return v9(a1, a2, 0, a4, 0);
}

uint64_t sub_10016BB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29)
{
  unsigned int v31 = ((2 * (2 * a29 + 1472602998)) & 0xE9FFDCF8) + ((2 * a29 + 1472602998) ^ 0x74FFEE7D);
  if ((a29 + 296586160) < 0x65CA79F1 != v31 - 255161484 < (((v29 ^ 0x9A) - 460) ^ 0x65CA7B33u)) {
    BOOL v32 = v31 - 255161484 < (((v29 ^ 0x9A) - 460) ^ 0x65CA7B33u);
  }
  else {
    BOOL v32 = v31 - 255161484 > a29 + 296586160;
  }
  return (*(uint64_t (**)(void))(v30 + 8 * ((348 * v32) ^ v29 ^ 0x9Au)))();
}

uint64_t sub_10016BC28()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((((((v0 | 0x262) - 771456489) | 0x20284704) - 2) ^ (((v0 | 0x262) + 51350) | 0xF22C0085))
                                     * (v2 == 0)) ^ (v0 | 0x262))))();
}

uint64_t sub_10016BC80@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v1 + 8 * (int)(a1 ^ 0xF22CC72A)))(v3);
  return v2;
}

void sub_10016F2A4(uint64_t a1, int a2)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10016F2F0()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((233 * (((*(void *)(v0 + 16) == 0) ^ 0x91) & 1)) ^ 0x27D)))();
}

uint64_t sub_10016F338()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v0 + 234) ^ 0x1EE ^ (14 * (v0 ^ 0x99))) * (*(void *)(v1 + 32 * v3 + 24) == 0)) ^ v0)))();
}

uint64_t sub_10016F37C@<X0>(int a1@<W8>)
{
  unsigned int v4 = (a1 + 2125858659) & 0x8149F97E;
  uint64_t v5 = (*(uint64_t (**)(void))(v1 + 8 * (a1 | 0x825)))();
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8
                                            * (int)((((((v4 + 196) | 0x3D) ^ 0xFFFFFFE4) + v4 + 481) * (v2 + 1 == v3)) ^ v4)))(v5);
}

uint64_t sub_10016F3E4()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((727 * (v0 == 0)) ^ 0x18A)))();
}

uint64_t sub_10016F41C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((233 * (((*(void *)(v1 + 32 * v3 + 16) == 0) ^ (a1 + 20)) & 1)) ^ a1)))();
}

uint64_t sub_10016F458@<X0>(int a1@<W8>)
{
  int v4 = 73 * (a1 ^ 0x27F);
  (*(void (**)(void))(v2 + 8 * (a1 + 1602)))();
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v4 + 234) ^ 0x1EE ^ (14 * (v4 ^ 0x99))) * (*(void *)(v1 + 32 * v3 + 24) == 0)) ^ v4)))();
}

uint64_t sub_10016F4BC()
{
  return (*(uint64_t (**)(void))(v1 + 8
                                   * (int)((((((v0 + 196) | 0x3D) ^ 0xFFFFFFE4) + v0 + 481) * (v2 + 1 == v3)) ^ v0)))();
}

uint64_t sub_10016F4F8()
{
  (*(void (**)(uint64_t))(v2 + 8 * (v0 + 1378)))(v1);
  return 0;
}

uint64_t sub_10016F524()
{
  uint64_t v0 = (uint64_t)*(&off_100232F90
                + (byte_1001BA6B0[byte_1001BA198[(9
                                                                                  * (dword_1002721C8 ^ 0x7D ^ dword_1002721C0))
                                                                + 248] ^ 0xF5] ^ (9
                                                                                * (dword_1002721C8 ^ 0x7D ^ dword_1002721C0)))
                - 238);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = (uint64_t)*(&off_100232F90
                + (byte_1001BA8B4[(byte_1001BA490[(9 * ((dword_1002721C0 - v1) ^ 0x7D))] ^ 0x60)
                                                 - 4] ^ (9 * ((dword_1002721C0 - v1) ^ 0x7D)))
                - 113);
  unint64_t v3 = v1 ^ (unint64_t)&v13 ^ *(void *)(v2 - 4);
  uint64_t v4 = 1787074057 * v3 - 0x6585E11862ED39BLL;
  unint64_t v5 = 1787074057 * (v3 ^ 0xEDEBC87B5EDF1A7DLL);
  *(void *)(v0 - 4) = v4;
  *(void *)(v2 - 4) = v5;
  LOBYTE(v4) = *(_DWORD *)(v0 - 4);
  uint64_t v6 = (char *)*(&off_100232F90
               + ((9 * (dword_1002721C8 ^ 0x7D ^ dword_1002721C0)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * (dword_1002721C8 ^ 0x7D ^ dword_1002721C0))] ^ 0x92])
               - 183)
     - 4;
  (*(void (**)(void))&v6[8
                                    * ((9 * ((v5 - v4) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((v5 - v4) ^ 0x7D))] ^ 0x84])
                                    + 18800])(*(unsigned int *)*(&off_100232F90
                                                               + (byte_1001B9F80[byte_1001BA9F0[(9 * ((v5 + v4) ^ 0x7D))] ^ 0x8A] ^ (9 * ((v5 + v4) ^ 0x7D)))
                                                               - 29));
  char v7 = *(_DWORD *)(v0 - 4);
  char v8 = *(_DWORD *)(v2 - 4);
  (*(void (**)(void))&v6[8
                                    * (byte_1001BA7B4[(byte_1001BA394[(9 * ((v8 + v7) ^ 0x7D))
                                                                                     - 4] ^ 0x5E)
                                                                     - 4] ^ (9 * ((v8 + v7) ^ 0x7D)))
                                    + 18208])(*(unsigned int *)*(&off_100232F90
                                                               + (byte_1001BA5B8[(byte_1001BA198[(9 * (v7 ^ 0x7D ^ v8)) - 8] ^ 0xD)
                                                                                                - 8] ^ (9 * (v7 ^ 0x7D ^ v8)))
                                                               - 101));
  unsigned __int8 v9 = 9 * (*(_DWORD *)(v0 - 4) ^ 0x7D ^ *(_DWORD *)(v2 - 4));
  uint64_t v10 = *(unsigned int *)*(&off_100232F90 + (v9 ^ byte_1001BA6B0[byte_1001BA198[v9 + 248] ^ 0x78])
                                          - 173);
  uint64_t v11 = *(uint64_t (**)(uint64_t))&v6[8
                                             * (byte_1001BA088[(byte_1001BAAFC[v9 - 12] ^ 0xC0) - 8] ^ v9)
                                             + 18344];

  return v11(v10);
}

void sub_10016F7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    BOOL v6 = a5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v8 = !v6 && a6 != 0;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10016F864(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  *a4 = 0;
  *a5 = 0;
  BOOL v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 18520))(24, 4101018099) == 0;
  return (*(uint64_t (**)(void))(v5 + 8 * ((115 * v6) ^ 0x333u)))();
}

uint64_t sub_10016F8C4(uint64_t a1)
{
  *(void *)(v5 - 216) = v3;
  *(void *)(v5 - 168) = v2;
  *(_DWORD *)(v5 - 184) = v1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 650052673;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 18520))(4096, 1358311088);
  *(void *)a1 = v7;
  return (*(uint64_t (**)(void))(v4 + 8 * ((255 * (v7 != 0)) ^ 0x66A)))();
}

uint64_t sub_10016F93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  *(void *)(v26 - 224) = v25;
  *(void *)(v26 - 176) = 0;
  *(_DWORD *)(v26 - 180) = 0;
  *(void *)(v26 - 136) = v21 + 0x5B68E37D168561B2;
  *(_DWORD *)(v21 + 8) = v24 + 4096;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * (((((v22 - 648) | 0x142) - 83) * (v21 == 0)) ^ (v22 + 1271)));
  uint64_t v28 = (uint64_t)*(&off_100232F90 + ((v22 + 1271) ^ 0x769u));
  *(void *)(v26 - 200) = (char *)*(&off_100232F90 + ((v22 + 1271) ^ 0x772u)) - 8;
  *(void *)(v26 - 192) = v28;
  *(void *)(v26 - 152) = 0x7D34AE117A9B271ALL;
  return v27(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
}

uint64_t sub_10016F9E4()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) + 2057538897;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + ((v0 + 793321141) & 0xD0B6E37E) + (((v0 + 1855) | 0x42) ^ 0x53E48D55);
  BOOL v5 = v3 < 0x7AA38D4D;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x7AA38D4D) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((1595 * v7) ^ v0)))(v1 + 8);
}

uint64_t sub_10016FA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(void *)(v21 - 176) = 0;
  *(_DWORD *)(v21 - 180) = 0;
  int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8 * (int)((((v18 + 1606807577) ^ 0x56000807 ^ (v18 + 1606807577) & 0xA9FFF7FF) * (v19 == 0)) ^ v18));
  *(void *)(v21 - 152) = 0x7D34AE117A9B271ALL;
  return v22(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a1);
}

uint64_t sub_10016FAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  unsigned int v29 = ((2 * (2 * a27 - 1300105346)) & 0x7FFE9AD4) + ((2 * a27 - 1300105346) ^ 0xBFFF4D6B);
  if ((a27 + 1884709690) < 0x97156777 != v29 - 686417396 < ((v27 - 163965510) | 0x48u) - 1760206695) {
    BOOL v30 = v29 - 686417396 < ((v27 - 163965510) | 0x48u) - 1760206695;
  }
  else {
    BOOL v30 = v29 - 686417396 > a27 + 1884709690;
  }
  return (*(uint64_t (**)(void))(v28 + 8 * ((219 * v30) ^ (v27 - 163965034))))();
}

uint64_t sub_10016FBBC()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((69 * ((((v1 + 138464844) ^ v1 ^ (v2 + 376) ^ (v0 == 0)) & 1) == 0)) | v1)))();
}

uint64_t sub_10016FC00@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v3 + 8 * (a1 ^ (v2 + 1927))))(v1);
  return v4;
}

uint64_t sub_100173798(uint64_t a1)
{
  if (unint64_t)(a1 + 8) <= 6 && ((0x7Du >> (a1 + 8)))
  {
    uint64_t v1 = (uint64_t)*(&off_10022E5A0
                  + ((16
                    * ((*(void *(__cdecl **)(size_t, malloc_type_id_t))((char *)&off_10022E5A0
                                                                      + &unk_100004854
                                                                      + 4))(0x18uLL, 0xF47091F3uLL) != 0)) | 0x568EF585u)- 1452207770);
    __asm { BRAA            X8, X17 }
  }
  return 4294922295;
}

void sub_100173CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  (*(void (**)(void))(v22 + 8 * (v24 + v23)))(*v21);
  *uint64_t v21 = a13;
  *a14 = a21;
  JUMPOUT(0x100173CD4);
}

uint64_t sub_100173D40@<X0>(char a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((a1 & 1)
                                     * ((v1 - 1007715077) & 0x3C108357 ^ (v3 + 1078) ^ ((v1 + 136380676) | 0xA1500032))) ^ v1)))();
}

uint64_t sub_100173D94()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v1 == 0) ^ (5 * (v0 ^ 0xA))) & 1)
                                * (((v0 + 158939080) & 0x7686C7E4) - 23)) ^ v0)))();
}

uint64_t sub_100173DE8()
{
  unsigned int v3 = ((v0 - 1146) ^ 0x5867432D) + *(_DWORD *)(v1 + 12);
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 337859105;
  BOOL v5 = v3 < v0 + 1483160741;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x58674236) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((615 * v6) ^ v0)))();
}

uint64_t sub_100173E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * ((50 * (v24 != 0)) ^ v23));
  HIDWORD(a22) = v22;
  *(void *)(v27 - 144) = v26;
  return v28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
}

uint64_t sub_100173EB8()
{
  unsigned int v3 = v1 - 1239118730;
  BOOL v4 = (v1 - 1239118730) < 0xFA687C87;
  unsigned int v5 = ((2 * (2 * v1 + 2004361174)) & 0x9DAFFA3C)
     + ((2 * v1 + 2004361174) ^ (((v0 - 2141645342) & 0xD635ED3F) - 824707069));
  if (v4 != v5 + 730890088 < 0xFA687C87) {
    BOOL v6 = v5 + 730890088 < 0xFA687C87;
  }
  else {
    BOOL v6 = v5 + 730890088 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((19 * !v6) ^ (v0 + 1452212725))))();
}

uint64_t sub_100173F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v28 = *(void *)(v27 - 136);
  int v29 = 98 * (v24 ^ 0x115);
  *(void *)(v27 - 136) = v28;
  uint64_t v30 = *(void *)(v28 - 0x29BAE573B9AE997FLL);
  int v31 = ((2 * a9) & 0x7FBEFFDE) + (a9 ^ 0x3FDF7FEF) - 1071612081;
  *(unsigned char *)(v30 + (v31 + 194)) = 99;
  *(unsigned char *)(v30 + (v31 + 195)) = 43;
  *(unsigned char *)(v30 + (v31 + v29)) = -115;
  *(unsigned char *)(v30 + (v31 + 197)) = 110;
  *v23 += 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * ((v29 + 1851) ^ (v26 + 799) ^ (v29 - 1452211914) ^ v29)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23);
}

uint64_t sub_100174144()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((6 * (v0 ^ 0x735) + ((v0 - 1982) | 0x306) + 2036) * (v1 == 0)) ^ v0)))();
}

uint64_t sub_10017418C()
{
  unsigned int v3 = ((v0 + 214) ^ 0xC898193A) + *(_DWORD *)(v1 + 12);
  unsigned int v4 = *(_DWORD *)(v1 + 8) - 2074858353;
  BOOL v5 = v3 < 0xC8981CA4;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0xC8981CA4) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((v6 * (10 * (v0 ^ 0x4E9) - 487)) ^ v0)))();
}

uint64_t sub_10017420C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  HIDWORD(a24) = v25;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * ((((v26 - 421) ^ 0x199) * (v27 != 0)) ^ v26)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           v28);
}

uint64_t sub_10017424C()
{
  unsigned int v3 = v1 - 641974977;
  BOOL v4 = (v1 - 641974977) < 0x1E002D50;
  unsigned int v5 = ((2 * (((v0 + 731) | 0x104) + 2004361174 + 2 * v1 - 1420)) & 0xD88FF0A8)
     + ((((v0 + 731) | 0x104) + 2004361174 + 2 * v1 - 1420) ^ 0xEC47F855);
  if (v4 != v5 + 834155771 < 0x1E002D50) {
    BOOL v6 = v5 + 834155771 < 0x1E002D50;
  }
  else {
    BOOL v6 = v5 + 834155771 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((1113 * v6) ^ v0)))();
}

uint64_t sub_1001742F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v32 = *(void *)(v31 - 136);
  int v33 = v28 - 587;
  *(void *)(v31 - 136) = v32;
  uint64_t v34 = *(void *)(v32 - 0x29BAE573B9AE997FLL);
  unsigned int v35 = ((a9 << (v33 ^ 0x46)) & 0xDFFFF9FE) + (a9 ^ 0x6FFFFCFF) - 1879047423;
  *(unsigned char *)(v34 + v35) = 0;
  *(unsigned char *)(v34 + v35 + 1) = 0;
  *(unsigned char *)(v34 + v35 + 2) = 0;
  *(unsigned char *)(v34 + v35 + 3) = 1;
  *v27 += 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * ((v30 + ((v33 - 830) | 0x3A2) - 330) ^ v33 ^ (v30 + 195) ^ v33)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_1001744B4()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v0 ^ 0x161) - 360) ^ 0x173) * (v1 != 0)) ^ v0)))();
}

uint64_t sub_1001744EC()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) - 1382934046;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + (v0 ^ 0x694E2B0F);
  BOOL v5 = v3 < 0xAD9219DA;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0xAD9219DA) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((v6 * ((v0 + 1354) ^ 0x83D)) ^ v0)))();
}

uint64_t sub_100174560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  LODWORD(a25) = v27;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * (((v28 - 995 + 177 * (v28 ^ 0x816) - 1425) * (v29 == 0)) | v28)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_1001745A8()
{
  unsigned int v3 = v0 + 477223401;
  BOOL v4 = (v0 + 477223401) < 0x60B5C9F6;
  unsigned int v5 = ((2 * (2 * v0 + 2004361174)) & 0xEDF7E8F8) + ((v1 + 958998766) & 0xC6D6D7FF ^ (2 * v0 + 2004361174) ^ 0x76FBF162);
  if (v4 != v5 - 373697159 < 0x60B5C9F6) {
    BOOL v6 = v5 - 373697159 < 0x60B5C9F6;
  }
  else {
    BOOL v6 = v5 - 373697159 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((3291 * v6) ^ v1)))();
}

uint64_t sub_10017465C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v33 = *(void *)(v32 - 136);
  uint64_t v34 = *(void *)(v32 - 216);
  unint64_t v35 = v34 - ((2 * v34) & 0xF99431D3CA63CC58) + (v28 ^ 0x7CCA18E9E531E4E6);
  *(void *)(v32 - 136) = v33;
  uint64_t v36 = (unsigned char *)(((2 * a9) & 0x1D3F8DBB6)
                + (a9 ^ 0xA3BF793FE9FC6DDBLL)
                + *(void *)(v33 - 0x29BAE573B9AE997FLL)
                + 0x5C4086C016039225);
  *uint64_t v36 = HIBYTE(v35) ^ 0x7C;
  v36[1] = BYTE6(v35) ^ 0xCA;
  v36[2] = BYTE5(v35) ^ 0x18;
  v36[3] = BYTE4(v35) ^ 0xE9;
  v36[4] = ((v34 - ((2 * v34) & 0xCA63CC58) + (v28 ^ 0xE531E4E6)) >> 24) ^ 0xE5;
  v36[5] = BYTE2(v35) ^ 0x31;
  v36[6] = BYTE1(v35) ^ 0xE6;
  v36[7] = v35 ^ 0x2C;
  *v29 += 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * (int)(((v28 ^ 0x3A8 ^ (v31 - 354)) - v31 + 189) ^ v28 ^ 0x3A8)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_10017489C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((((v0 + 229) ^ 0xE0) + 349) ^ 0xFFFFFD8E) + 251 * ((v0 + 229) ^ 0xE0))
                                     * (v1 == 0)) ^ (v0 + 229))))();
}

uint64_t sub_1001748E0()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) - 1452124039;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + ((v0 - 452) ^ 0x652E6B7F);
  BOOL v5 = v3 < 0xA9725871;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 73 * (v0 ^ 0x4ECu) - 1452124850) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((3568 * v6) ^ v0)))();
}

uint64_t sub_100174968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  HIDWORD(a25) = v28;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * (((4 * (((v30 == 0) ^ (v29 + 48)) & 1)) & 0xF7 | (8 * (((v30 == 0) ^ (v29 - 720)) & 1))) ^ v29)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_1001749B0()
{
  unsigned int v3 = v1 + 1498273165;
  BOOL v4 = (v1 + 1498273165) < 0x9D91C59A;
  unsigned int v5 = ((2 * ((v0 ^ 0x77781F84) + 2 * v1)) & 0x9DA7E77C) + (((v0 ^ 0x77781F84) + 2 * v1) ^ 0xCED3F3BF);
  if (v4 != v5 - 826420773 < 0x9D91C59A) {
    BOOL v6 = v5 - 826420773 < 0x9D91C59A;
  }
  else {
    BOOL v6 = v5 - 826420773 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((1763 * v6) ^ v0)))();
}

uint64_t sub_100174A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v34 = *(void *)(v33 - 136);
  int v35 = 118 * (v30 ^ 0x320);
  unint64_t v36 = *(void *)(v33 - 208)
      + 0x7CCA18E9E531E62CLL
      - ((*(void *)(v33 - 208) << (v35 ^ 0x63u)) & 0xF99431D3CA63CC58);
  *(void *)(v33 - 136) = v34;
  uint64_t v37 = (unsigned char *)(((2 * a9) & 0x1CFBF7B3ELL)
                + (a9 ^ 0x7BEFE7FBE7DFBD9FLL)
                + *(void *)(v34 - 0x29BAE573B9AE997FLL)
                - 0x7BEFE7FBE7DFBD9FLL);
  unsigned char *v37 = HIBYTE(v36) ^ 0x7C;
  v37[1] = BYTE6(v36) ^ 0xCA;
  v37[2] = BYTE5(v36) ^ 0x18;
  v37[3] = BYTE4(v36) ^ 0xE9;
  v37[4] = BYTE3(v36) ^ 0xE5;
  v37[5] = BYTE2(v36) ^ 0x31;
  v37[6] = BYTE1(v36) ^ 0xE6;
  v37[7] = v36 ^ 0x2C;
  *v29 += 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * (int)((((v35 - 1459617898) ^ 0xA9000418 ^ (v32 + 285)) + ((v35 - 1459617898) | 0x710102)) ^ v35)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

uint64_t sub_100174CCC()
{
  *(void *)(v5 - 192) = v2;
  *(void *)(v5 - 128) = 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v0 ^ (v4 + 800)) - v4 + 2) * (v1 == 0)) | v0)))();
}

uint64_t sub_100174D14@<X0>(int a1@<W8>)
{
  int v4 = a1 + 2034;
  uint64_t v5 = (*(uint64_t (**)(void))(v1 + 8 * (a1 + 2337)))();
  BOOL v6 = *(void (**)(void))(v1 + 8 * (v4 + 247));
  *(void *)(v3 - 200) = v5;
  v6();
  uint64_t v7 = (*(uint64_t (**)(void, void))(v1 + 8 * (v4 ^ 0xF0D)))(*(void *)(v3 - 160), 0);
  *(void *)(v3 - 176) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (((v7 == 0) * ((v4 ^ (v2 + 1038)) - v2 + 4091)) ^ v4)))();
}

uint64_t sub_100174DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v33 = v29 + 433;
  uint64_t v34 = (*(uint64_t (**)(void, uint64_t, void))(v30 + 8 * (v33 + 1875)))(*(void *)(v31 - 160), a1, 0);
  int v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * (((v34 == 0) * (((7 * (v33 ^ 0x1D4)) ^ 0x568EFCAE) + ((v33 - 1993343167) | 0x20410108))) ^ v33));
  *(void *)(v31 - 176) = a1;
  return v35(v34, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

uint64_t sub_100174E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  (*(void (**)(uint64_t, char *))(v26 + 8 * (v25 ^ 0xBF0)))(a1, (char *)*(&off_100232F90 + (v25 ^ 0x2DC)) - 12);
  (*(void (**)(uint64_t))(v26 + 8 * (v25 ^ 0xA72)))(a1);
  (*(void (**)(uint64_t, void))(v26 + 8 * (v25 + 1641)))(a1, *(void *)(v27 - 200));
  int v29 = (void *)(*(uint64_t (**)(void))(v26 + 8 * (v25 + 1615)))();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8 * (((((v25 ^ 0x36B ^ (v29 == *(&off_100232F90 + v25 - 697))) & 1) == 0) * (((v25 - 651) | 0x586) - 1001)) ^ v25)))(v29, v30, v31, v32, v33, v34, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_100174F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 8 * (v35 + 856)))(a33, v34, v36 - 128);
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33
                                                                                                + 8
                                                                                                * (int)(((v37 == 0) * (v35 + ((v35 + 550736449) & 0xDF2C6BDB) - 2357)) ^ v35));
  *(void *)(v36 - 184) = 0x79483BA612D83A8ELL;
  *(void *)(v36 - 152) = 0x79483BA612D83A8ELL;
  return v38(v37, v39, v40, v41, v42, v43, v44);
}

uint64_t sub_100174F8C()
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 ^ 0xAD0)))(24, 4101018099);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1
                                                                                               + 8
                                                                                               * (((2
                                                                                                  * (((v3 == 0) ^ (v0 - 59 + v0 - 75 + 1)) & 1)) & 0xDF | (32 * (((v3 == 0) ^ (v0 - 59 + v0 - 75 + 1)) & 1))) ^ v0));
  *(void *)(v2 - 184) = 0x79483BA612D83A8ELL;
  *(void *)(v2 - 152) = 0x79483BA612D83A8ELL;
  return v4(v3, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100175018(uint64_t a1)
{
  *(void *)(v3 - 152) = a1 + 0x79483BA612D83A8ELL;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1171913814;
  *(void *)(a1 + 12) = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 + 107)))(4096, 1358311088);
  *(void *)a1 = v5;
  return (*(uint64_t (**)(void))(v2 + 8 * (((v5 == 0) * ((13 * (v1 ^ 0x833) - 1036) ^ (v1 - 1341))) | v1)))();
}

uint64_t sub_1001750A0()
{
  int v4 = *(uint64_t (**)(void))(v0 + 8 * (int)((((v1 - 1451809149) & 0xFFF9D3FF ^ 0xA9710120) * (v2 != 0)) ^ v1));
  *(void *)(v3 - 184) = 0x79483BA612D83A8ELL;
  return v4();
}

uint64_t sub_100175104@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v24 = a1 - 4088;
  (*(void (**)(uint64_t))(v21 + 8 * (a1 + 1452209869)))(v22);
  *(void *)(v23 - 184) = 0x79483BA612D83A8ELL;
  *(void *)(v23 - 152) = 0x79483BA612D83A8ELL;
  (*(void (**)(uint64_t))(v21 + 8 * (v24 + 1452214027)))(v20);
  (*(void (**)(uint64_t))(v21 + 8 * (int)(v24 ^ 0xA97108FF)))(a20);
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * (((4 * (*(void *)(v23 - 200) == 0)) | (8 * (*(void *)(v23 - 200) == 0))) ^ (v24 + 1452212699))))();
}

uint64_t sub_100175A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8 * ((v34 + 3496) ^ (79 * (a33 == 0))));
  *(void *)(v36 - 176) = v33;
  return v37(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

uint64_t sub_100175A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v38 = (*(uint64_t (**)(void))(v36 + 8 * v35))();
  uint64_t v39 = *(uint64_t (**)(uint64_t))(v36 + 8 * ((v34 + 3496) ^ (79 * (a33 == 0))));
  *(void *)(v37 - 176) = v33;
  return v39(v38);
}

uint64_t sub_100175A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(v36 + 8 * (v38 + 1452214027)))(a33);
  *(void *)(v40 - 176) = v34;
  if (v37 == -45004)
  {
    *(void *)(v40 - 152) = v35;
    *(void *)(v40 - 120) = 0;
    *(_DWORD *)(v40 - 112) = 0;
    uint64_t v42 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v36 + 8 * (v39 + 1452214060)))(*(unsigned int *)*(&off_100232F90 + (v39 ^ (v39 - 8))), *(void *)v33, *(unsigned int *)(v33 + 12), v40 - 120, v40 - 112);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8 * ((824 * ((v42 ^ 0x5E5DEEB9) - 335545392 + ((2 * v42) & 0xBCBBDD72) == 1516104332)) ^ (v39 + 1452212148))))(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29);
  }
  else if (v37)
  {
    return sub_100176C8C();
  }
  else
  {
    return (*(uint64_t (**)(uint64_t))(v36
                                              + 8 * ((25 * (*(void *)(v40 - 184) != 0x79483BA612D83A8ELL)) ^ 0x347)))(v41);
  }
}

uint64_t sub_1001761A4()
{
  uint64_t v3 = *(void *)(v2 - 184);
  unsigned int v4 = *(_DWORD *)(v3 - 0x79483BA612D83A82) - 886711989;
  unsigned int v5 = *(_DWORD *)(v3 - 0x79483BA612D83A86) - 2058625807;
  int v6 = (v4 < 0xCB25D947) ^ (v5 < ((v0 - 1989083064) | 0x20000050u) + 565499725);
  BOOL v7 = v4 > v5;
  if (v6) {
    BOOL v7 = v4 < 0xCB25D947;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((!v7 * ((v0 ^ 0x99F) - 2290)) ^ v0)))();
}

uint64_t sub_100176264@<X0>(int a1@<W8>)
{
  uint64_t v5 = *(void *)(v4 - 184);
  _DWORD *v2 = v1 + 4;
  return (*(uint64_t (**)(void))(v3 + 8 * (a1 ^ ((v5 == 0x79483BA612D83A8ELL) | (2 * (v5 == 0x79483BA612D83A8ELL))))))();
}

uint64_t sub_100176330@<X0>(int a1@<W8>)
{
  uint64_t v5 = 8 * (a1 - 62);
  (*(void (**)(void))(v4 + v5))();
  *int v1 = 0;
  _DWORD *v3 = 1171913814;
  _DWORD *v2 = 0;
  (*(void (**)(void *))(v4 + v5))(v1);
  return sub_100176C8C();
}

uint64_t sub_100176388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_DWORD *a31,int a32,int a33)
{
  uint64_t v39 = (*(uint64_t (**)(void))(v35 + 8 * (v37 ^ (v37 + 1867))))(*(void *)(v33 - 0x79483BA612D83A8ELL));
  *(void *)(v33 - 0x79483BA612D83A8ELL) = a23;
  *a31 = a33;
  *(void *)(v38 - 144) = v36;
  return (*(uint64_t (**)(uint64_t))(v35 + 8 * (v34 + v37 + 4103)))(v39);
}

void sub_100176428()
{
  *(void *)(v1 - 168) = v0;
  JUMPOUT(0x100176458);
}

uint64_t sub_10017646C@<X0>(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((a2 > a1) * ((v2 - 335) ^ 0x2BC)) ^ v2)))();
}

uint64_t sub_1001764D4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v3 + ((v1 - 177) | 2) - 341) ^ ((v1 - 2127495305) | 0x2840010A)) * (v0 != 0)) ^ v1)))();
}

uint64_t sub_10017651C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v7 = (unint64_t)(a1 - a2) < 0x20 || v2 < v4 + ((40 * (v3 ^ 0xD0) - 1418502162) & 0xFDFD9DFA) + 2185;
  return (*(uint64_t (**)(void))(v5 + 8 * (((2 * v7) | (32 * v7)) ^ v3)))();
}

uint64_t sub_100176578()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((51
                                * (v0 < v2 + ((v1 - 919523605) ^ 0x60403301) + ((v1 - 919523605) & 0x36CECDFDu) + 1960)) ^ v1)))();
}

uint64_t sub_1001765CC@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  return (*(uint64_t (**)(void))(v4 + 8 * ((((v2 & 0xFFFFFFE0) == 32) * (((v3 + 2690) | 0x52) - 579)) ^ (v3 + 2914))))();
}

void sub_100176614()
{
}

uint64_t sub_100176624()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v3 + ((v1 - 1605304555) | 0x92000DA) - 67) ^ (63 * (v1 ^ 0x229))) * (v0 == 0)) ^ v1)))();
}

uint64_t sub_100176674()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * ((58 * (v1 >= ((v0 - 1451527264) & 0xFFF585FB) + v2 + 115 * (v0 ^ 0x84D))) ^ v0)))();
}

uint64_t sub_1001766C8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((v1 - v3 + 54) ^ (v4 + 32) ^ 0x3D9) * (v0 < 0x20)) ^ v1)))();
}

uint64_t sub_100176700()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v0 < 0x20) ^ (v1 - v2 - 96)) & 1) * (((v1 - 722) | 1) + 1718)) ^ v1)))();
}

uint64_t sub_10017673C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v8 = (v3 - 3169 - v7 + 1975) ^ v6;
  uint64_t v9 = a2 + (v8 & (v2 - 1));
  long long v10 = *(_OWORD *)(v9 - 31);
  uint64_t v11 = a1 + (v8 & (v2 - 1));
  *(_OWORD *)(v11 - 15) = *(_OWORD *)(v9 - 15);
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((2 * ((v2 & 0xFFFFFFE0) == 32)) | (32 * ((v2 & 0xFFFFFFE0) == 32)) | (v4 + v3 - 3169 + 3841))))();
}

void sub_10017679C()
{
}

uint64_t sub_1001767A8(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((((a2 ^ (v5 - 1) ^ (v2 == v3)) & 1) == 0) * (a2 - 547)) ^ a2)))();
}

uint64_t sub_1001767DC(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((a2 - 346) ^ (v4 - 247) ^ (v4 - 3)) * ((v2 & 0x18) == 0)) | (a2 + 221))))();
}

uint64_t sub_100176810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + v2) = *(void *)(a2 + v2);
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((53 * (((v4 + 1196036742) & 0xB8B5EFBD ^ 0x335) + v2 != ((v6 + v4 - 45 + 1764) & v3))) ^ (v4 - 45))))();
}

uint64_t sub_100176874()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (int)(((v4 + v2 + ((v2 + 155188541) | 0xA0310180) - 38) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_1001768B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a1 + v2) = *(unsigned char *)(a2 + v2);
  return (*(uint64_t (**)(void))(v6 + 8 * ((61 * (v2 + 1 == v3)) ^ (v5 + v4 + 4038))))();
}

uint64_t sub_1001768E8()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((127 * (v0 != v1)) ^ v2)))();
}

uint64_t sub_100176908()
{
  int v4 = 2 * ((v1 - 335606200) & 0x3D71EBFA ^ (v3 - 246));
  return (*(uint64_t (**)(void))(v2 + 8 * ((973 * ((v0 & 0x18) == (v4 - 237) - 271)) ^ v4)))();
}

uint64_t sub_100176970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = (v6 + 33 * (v4 ^ 0x11Eu) + 1414) & (~v2 + v3);
  *(void *)(a1 - 7 + v7) = *(void *)(a2 - 7 + v7);
  return (*(uint64_t (**)(void))(v5 + 8 * ((1711 * (v2 - (v3 & 0xFFFFFFF8) == -8)) ^ v4)))();
}

void sub_1001769D0()
{
}

uint64_t sub_1001769DC(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)((((((a3 - 2006909079) | 0x21100060) ^ 0xFFFE0319) + ((a3 - 34363954) & 0xAB7D59FA))
                                     * (v4 == v3)) ^ a3)))();
}

uint64_t sub_100176A38()
{
  return v0();
}

uint64_t sub_100176A40()
{
  uint64_t v3 = *(void *)(v2 - 168);
  *(_DWORD *)(v3 - 0x79483BA612D83A86) = (*(_DWORD *)(v2 - 112) ^ 0xF7FDFE57)
                                         + 1306263039
                                         + ((2 * *(_DWORD *)(v2 - 112)) & 0xEFFBFCAE);
  *(_DWORD *)(v3 - 0x79483BA612D83A82) = 0;
  uint64_t v4 = (*(uint64_t (**)(void, void, void))(v0 + 18672))(*(unsigned int *)*(&off_100232F90 + (int)((v1 - 22) ^ 0xA97101FA)), *(void *)(v2 - 120), *(unsigned int *)(v2 - 112));
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 13320);
  *(void *)(v2 - 184) = v3;
  return v5(v4);
}

uint64_t sub_100176AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v6 = v2 - 1;
  *(unsigned char *)(a1 + v6) = *(unsigned char *)(a2 + v6);
  return (*(uint64_t (**)(void))(v5 + 8 * ((3401 * (v6 == 0)) ^ (v4 + v3 + 3606))))();
}

uint64_t sub_100176ADC()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((872 * (v0 ^ 0x32) - 1452213462) ^ 0xA971030E) - 708)
                                     * (v1 == 0x79483BA612D83A8ELL)) ^ (872 * (v0 ^ 0x32)))))();
}

uint64_t sub_100176B38@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((*(void *)(v1 - 0x79483BA612D83A8ELL) == 0) ^ (a1 - 1)) & 1)
                                * (v3 + a1 + 1452210976)) ^ a1)))();
}

void sub_100176B90(int a1@<W8>)
{
  unsigned int v5 = (a1 + 24116700) | 0xA801012A;
  (*(void (**)(void))(v3 + 8 * (int)(v5 ^ (v4 + 1867))))();
  *uint64_t v1 = 0;
  *(_DWORD *)(v2 - 0x79483BA612D83A86) = 1171913814;
  *(_DWORD *)(v2 - 0x79483BA612D83A82) = 0;
  (*(void (**)(void *))(v3 + 8 * (int)(v5 + 1452213957)))(v1);
  JUMPOUT(0x100176C10);
}

uint64_t sub_100176C8C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v3 + v1 - 2119) * (v0 == 0)) ^ (v1 + 1452213181))))();
}

uint64_t sub_100176CC0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((*v1 == 0) * ((v4 + a1 - 215 - 2040) ^ (a1 - v3))) ^ (a1 - 215))))();
}

void sub_100176CF8(int a1@<W8>)
{
  (*(void (**)(void))(v2 + 8 * (a1 - 2024 + v3)))();
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 1145303061;
  *(_DWORD *)(v1 + 12) = 0;
  JUMPOUT(0x100176D20);
}

void sub_100176D34()
{
  uint64_t v0 = (uint64_t)*(&off_100232F90
                + (byte_1001BA5B8[(byte_1001BA198[(9
                                                                                   * ((dword_1002721C0 - dword_1002721D0) ^ 0x7D))
                                                                 - 8] ^ 0x19)
                                                 - 8] ^ (9 * ((dword_1002721C0 - dword_1002721D0) ^ 0x7D)))
                - 29);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = (uint64_t)*(&off_100232F90
                + (byte_1001BA6B0[byte_1001BA298[(9 * ((dword_1002721C0 - v1) ^ 0x7D))
                                                                                 - 8] ^ 0x78] ^ (9
                                                                                               * ((dword_1002721C0 - v1) ^ 0x7D)))
                - 187);
  unint64_t v3 = (unint64_t)&v8[v1 + *(void *)(v2 - 4)];
  uint64_t v4 = 1787074057 * v3 - 0x6585E11862ED39BLL;
  unint64_t v5 = 1787074057 * (v3 ^ 0xEDEBC87B5EDF1A7DLL);
  *(void *)(v0 - 4) = v4;
  *(void *)(v2 - 4) = v5;
  LOBYTE(v2) = 9 * ((v5 - *(_DWORD *)(v0 - 4)) ^ 0x7D);
  unsigned int v6 = (char *)*(&off_100232F90
               + ((9 * ((dword_1002721C0 - dword_1002721D0) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((dword_1002721C0 - dword_1002721D0) ^ 0x7D))] ^ 0x8A])
               - 1)
     - 4;
  uint64_t v7 = *(void *)&v6[8
                    * ((84
                      * ((*(uint64_t (**)(uint64_t, uint64_t))&v6[8
                                                                        * (byte_1001B9F84[(byte_1001BA9FC[v2 - 12] ^ 0xB1) - 4] ^ v2)
                                                                        + 16728])(24, 4101018099) == 0)) ^ 0x412)];
  __asm { BRAA            X8, X17 }
}

uint64_t sub_100176EF8(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 912148809;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 18520))(4096, 1358311088);
  *(void *)a1 = v3;
  return (*(uint64_t (**)(void))(v1 + 8 * ((213 * (v3 != 0)) ^ 0x67Du)))();
}

uint64_t sub_100176F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  *(void *)(v25 - 152) = v21 + 0x2A5C32E9989AD503;
  *(_DWORD *)(v21 + 8) = v22 + 4096;
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8 * ((57 * (v21 == 0)) ^ 0x4C8));
  *(void *)(v25 - 168) = *(void *)(v23 + 104) - 8;
  *(void *)(v25 - 200) = 0x1A44E0EB4FC706ALL;
  return v26(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
}

uint64_t sub_100176FEC()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) + ((v0 + 1147767190) & 0x154D) - 312355264 - 1288;
  unsigned int v4 = *(_DWORD *)(v1 + 8) - 1224504073;
  BOOL v5 = v3 < 0xED61D640;
  BOOL v6 = v3 > v4;
  if (v4 < 0xED61D640 != v5) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((2 * (((v0 - 125) ^ v7) & 1)) & 0xFB | (4 * (((v0 - 1149) ^ v7) & 1)) | v0)))();
}

uint64_t sub_100177078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v20 - 200) = 0x1A44E0EB4FC706ALL;
  int v21 = ((v14 | 0x10) + 71) | 0x24;
  uint64_t v22 = *v16;
  unsigned int v23 = ((v21 - 806356520) & (2 * a9)) + (a9 ^ 0xE7F7FDFF) + 403177985;
  *(unsigned char *)(*v16 + v23) = 0;
  *(unsigned char *)(v22 + v23 + 1) = 0;
  *(unsigned char *)(v22 + v23 + 2) = 0;
  *(unsigned char *)(v22 + v23 + 3) = 1;
  *v15 += 4;
  *(void *)(v20 - 160) = v18;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8 * (int)(((((v21 + 1328) | 0x80) ^ (v17 - 620)) + ((v21 + 675306972) | 0x82019444)) ^ v21)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14);
}

uint64_t sub_1001773B8()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v1 == 0) ^ (v0 + 43)) & 1) * ((v0 - 33160169) & 0x1F9F5FB ^ 0x1E7)) ^ v0)))();
}

uint64_t sub_10017740C()
{
  unsigned int v3 = (v0 ^ 0x7FEF5C30) + *(_DWORD *)(v1 + 12);
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 1234244748;
  BOOL v5 = v3 < 0x7FEF5DD5;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < ((v0 + 1028) ^ 0x7FEF5838)) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((1889 * v6) ^ v0)))();
}

uint64_t sub_10017748C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * (int)(((((v28 - 1544683122) & 0x411FC95) + (v28 ^ 0xFFFFFA32)) * (v29 == 0)) ^ v28));
  HIDWORD(a23) = v27;
  *(void *)(v32 - 160) = v30;
  return v33(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_1001774DC()
{
  unsigned int v3 = v0 + 262598220;
  BOOL v4 = (v0 + 262598220) < 0x46053791;
  int v5 = ((2 * ((v0 << (v1 ^ 0xEC)) - 1824297618)) & 0x7DBD96D0) + (((v0 << (v1 ^ 0xEC)) - 1824297618) ^ 0x3EDECB69);
  if (v4 != (v5 + 119958568) < 0x46053791) {
    BOOL v6 = (v5 + 119958568) < 0x46053791;
  }
  else {
    BOOL v6 = v5 + 119958568 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((3447 * v6) ^ v1 ^ 0x17u)))();
}

uint64_t sub_100177590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v33 = *(void *)(v32 - 152);
  int v34 = (v29 - 643) | 0x401;
  *(void *)(v32 - 152) = v33;
  uint64_t v35 = *(void *)(v33 - 0x2A5C32E9989AD503);
  unsigned int v36 = ((a9 << (v34 - 16)) & 0x47FF7FFE) + (a9 ^ 0xA3FFBFFF) + 1543520257;
  *(unsigned char *)(v35 + v36 + 1) = -19;
  *(unsigned char *)(v35 + v36 + 2) = -89;
  *(unsigned char *)(v35 + v36) = -80;
  *(unsigned char *)(v35 + v36 + 3) = -81;
  *v28 += 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * (((v34 ^ 0x55BE1C0F) + v34 - v30 + 1198) ^ v34)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_100177750()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((v1 ^ 0x637) + 3 * (v1 ^ 0x508) - 1375) * (v0 == 0)) ^ v1 ^ 0x7F)))();
}

uint64_t sub_100177794()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) - 1729931730 + ((v0 + 1039902712) & 0xC20456FD) + ((v0 - 875780956) & 0x34335DFB) - 2088;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 1652886757;
  BOOL v5 = v3 < 0x98E3562E;
  BOOL v6 = v3 > v4;
  if (v4 < 0x98E3562E != v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((240 * v6) ^ v0)))();
}

uint64_t sub_100177834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  LODWORD(a24) = v25;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (int)(((v26 + 868 + ((v26 + 1787091309) & 0x957B2677) - 1958) * (v27 == 0)) ^ v26)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           v28);
}

uint64_t sub_100177884()
{
  unsigned int v3 = v1 + 63784098;
  BOOL v4 = (v1 + 63784098) < 0x3A2B8DE7;
  unsigned int v5 = ((2 * (((v0 + 58) ^ 0x934368B1) + 2 * v1)) & 0x6FFFDEDC) + ((((v0 + 58) ^ 0x934368B1) + 2 * v1) ^ 0xB7FFEF6F);
  if (v4 != v5 - 2111070600 < 0x3A2B8DE7) {
    BOOL v6 = v5 - 2111070600 < 0x3A2B8DE7;
  }
  else {
    BOOL v6 = v5 - 2111070600 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * (((2 * v6) | (8 * v6)) ^ v0)))();
}

uint64_t sub_100177928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v32 = *(void *)(v31 - 152);
  *(void *)(v31 - 152) = v32;
  uint64_t v33 = *(void *)(v32 - 0x2A5C32E9989AD503);
  unsigned int v34 = ((v28 ^ 0xDFCEFE15) & (2 * a9)) + (a9 ^ 0xEFE77DFF) + 270041601;
  *(unsigned char *)(v33 + v34) = 0;
  *(unsigned char *)(v33 + v34 + 1) = 0;
  *(unsigned char *)(v33 + v34 + 2) = 0;
  *(unsigned char *)(v33 + v34 + 3) = 1;
  *v27 += 4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * (int)((v29 + (((v28 ^ 0x7CD) + 561505745) & 0xDE881EDA) - 1443) ^ ((v28 ^ 0x7CD) - 338166480) & 0xBE69F4EF ^ v28 ^ 0x7CD)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_100177B08()
{
  return (*(uint64_t (**)(void))(v2
                              + 8 * (int)((((v0 - 1152) ^ 0x746 ^ (v0 + 2074093803) & 0x845FD567) * (v1 != 0)) ^ v0)))();
}

uint64_t sub_100177B54()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) + 60653252;
  unsigned int v4 = *(_DWORD *)(v1 + 8) - 851495565;
  BOOL v5 = v3 < 0x39D7EBC;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x39D7EBC) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((v6 * ((v0 + 774) ^ 0x560)) ^ v0)))();
}

uint64_t sub_100177BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  HIDWORD(a24) = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (((((v25 == 0) ^ v27 ^ 0x7D) & 1) * ((v27 ^ 0x22B) - 1848)) ^ v27)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           v26);
}

uint64_t sub_100177C0C()
{
  unsigned int v3 = v1 + 724353512;
  BOOL v4 = (v1 + 724353512) < 0x618B0B29;
  unsigned int v5 = (((v0 - 1066) ^ 0x6FFFB89D) & (2 * (2 * v1 - 1824297618))) + ((2 * v1 - 1824297618) ^ 0xB7FFDDEB);
  if (v4 != v5 - 1450496706 < 0x618B0B29) {
    BOOL v6 = v5 - 1450496706 < 0x618B0B29;
  }
  else {
    BOOL v6 = v5 - 1450496706 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((188 * v6) ^ v0)))();
}

uint64_t sub_100177CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v36 = *(void *)(v35 - 152);
  uint64_t v37 = (v31 + 1721066143) & 0x996A9D2D;
  unint64_t v38 = a30 - ((2 * a30) & 0xF99431D3CA63CC58) + 0x7CCA18E9E531E62CLL;
  *(void *)(v35 - 152) = v36;
  uint64_t v39 = (unsigned char *)(*(void *)(v36 - 0x2A5C32E9989AD503)
                + (a9 ^ 0x7BAEB7BBF9DF2D9FLL)
                - 0x7BAEB7BBF9DF2D9FLL
                + ((v37 ^ 0x1F3BE5E1ALL) & (2 * a9)));
  unsigned char *v39 = HIBYTE(v38) ^ 0x7C;
  v39[1] = BYTE6(v38) ^ 0xCA;
  v39[2] = BYTE5(v38) ^ 0x18;
  v39[3] = BYTE4(v38) ^ 0xE9;
  v39[4] = ((a30 - ((2 * a30) & 0xCA63CC58) - 449714644) >> 24) ^ 0xE5;
  v39[5] = BYTE2(v38) ^ 0x31;
  v39[6] = BYTE1(v38) ^ 0xE6;
  v39[7] = v38 ^ 0x2C;
  *v30 += 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * (int)((v32 + v33 + v37 - 1317 - 1681) ^ (v37 - 1189) ^ v37)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_100177F20()
{
  *(void *)(v4 - 128) = 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v2 + v0 - 128) ^ (v2 + 782) ^ ((v0 - 64) | 0x30C)) * (v1 != 0)) ^ v0)))();
}

uint64_t sub_100177F7C()
{
  uint64_t v3 = (*(uint64_t (**)(void))(v1 + 8 * (v0 + 1493)))();
  uint64_t v4 = *(void (**)(void))(v1 + 8 * (v0 ^ 0xBA5));
  *(void *)(v2 - 208) = v3;
  v4();
  uint64_t v5 = (*(uint64_t (**)(void, void))(v1 + 8 * (v0 + 1459)))(*(void *)(v2 - 168), 0);
  *(void *)(v2 - 192) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * (((v5 == 0) * (((v0 - 2143211338) | 0x2A00C044) + 1438518261)) ^ v0)))();
}

uint64_t sub_100178034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v32 = v28 - 625;
  uint64_t v33 = (*(uint64_t (**)(void, uint64_t, void))(v29 + 8 * (v32 ^ 0x9DF)))(*(void *)(v30 - 168), a1, 0);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (int)(((v33 != 0) * (v32 ^ 0xAA41F49D ^ (v32 - 1438518427))) ^ v32));
  *(void *)(v30 - 192) = a1;
  return v34(v33, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_1001780B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  (*(void (**)(uint64_t, uint64_t))(v22 + 8 * (v20 ^ 0x8A1)))(a1, *(void *)(v21 + 8 * (v20 - 371)) - 12);
  (*(void (**)(uint64_t))(v22 + 8 * (v20 ^ 0x923)))(a1);
  (*(void (**)(uint64_t, void))(v22 + 8 * (v20 ^ 0x8BE)))(a1, *(void *)(v23 - 208));
  uint64_t v25 = (*(uint64_t (**)(void))(v22 + 8 * (v20 ^ 0x880)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8 * (((v25 == *(void *)(v21 + 8 * (v20 ^ 0x198))) * (v20 + 1126 + 5 * (v20 ^ 0x18C) - 694)) ^ v20)))(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_100178168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return (*(uint64_t (**)(void))(v29
                              + 8
                              * (int)(((a28 == (void)*(&off_100232F90 + (v28 ^ 0x85)) - 8)
                                     * (v28 ^ 0xAA41F1EA ^ ((v28 + 541156268) | 0x8A009004))) ^ v28)))();
}

uint64_t sub_1001781E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  (*(void (**)(uint64_t, void))(v29 + 8 * (v27 + 1946)))(a27, *(void *)(v30 - 208));
  uint64_t v31 = (*(uint64_t (**)(void))(v29 + 8 * (v27 + 1920)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (int)(((v31 == v28) * (((v27 - 254) ^ 0xFFFFFF26) + (v27 ^ 0x46A))) ^ v27)))(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_100178248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return (*(uint64_t (**)(void))(v30 + 8 * (((a28 != v29) * ((v28 + 254) ^ 0x190)) | v28)))();
}

uint64_t sub_10017829C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  (*(void (**)(uint64_t, void))(v29 + 8 * (v27 ^ 0x8BE)))(a27, *(void *)(v30 - 208));
  uint64_t v31 = (*(uint64_t (**)(void))(v29 + 8 * (v27 ^ 0x880)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (((v31 == v28) * (((v27 ^ 0x46A) - 710) ^ 0x1E8)) ^ v27)))(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_100178300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return (*(uint64_t (**)(void))(v30
                              + 8
                              * (int)((((((v28 + 1126639268) & 0xBCD8D7BB) - 1438518604) ^ 0xAA41F073) * (a28 == v29)) ^ v28)))();
}

uint64_t sub_100178364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  (*(void (**)(uint64_t, void))(v29 + 8 * (v27 + 1946)))(a27, *(void *)(v30 - 208));
  uint64_t v31 = (*(uint64_t (**)(void))(v29 + 8 * (v27 ^ 0x880)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (int)(((v31 == v28) * (((v27 + 333592173) & 0xEC1DCDF8 ^ 0xFFFFFA8C) + v27 - 252)) ^ v27)))(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1001783D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  return (*(uint64_t (**)(void))(v30 + 8 * ((((v28 + 252) ^ 0x75A) * (a28 == v29)) ^ v28)))();
}

uint64_t sub_100178434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  (*(void (**)(uint64_t, void))(v29 + 8 * (v27 + 1946)))(a27, *(void *)(v30 - 208));
  uint64_t v31 = (*(uint64_t (**)(void))(v29 + 8 * (v27 ^ 0x880)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (((v31 == v28) * (v27 + 1438521567 + v27 - 1438518604 - 3095)) ^ v27)))(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1001784B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 8 * (v28 ^ 0xCEE)))(a28, v29, v31 - 128);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8 * (((v32 == 0) * ((v28 + 68) ^ (v28 + 66))) | v28));
  *(void *)(v31 - 200) = 0x1A44E0EB4FC706ALL;
  return v33(v32, v34, v35, v36, v37, v38, v39, v40);
}

uint64_t sub_100178538()
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 ^ 0xF31)))(24, 4101018099);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8 * (((v3 == 0) * ((v0 + 156) ^ v0 ^ 0x96)) ^ v0));
  *(void *)(v2 - 200) = 0x1A44E0EB4FC706ALL;
  return v4(v3, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1001785C0(uint64_t a1)
{
  *(void *)(v3 - 184) = a1 + 0x1A44E0EB4FC706ALL;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1814571000;
  *(void *)(a1 + 12) = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 ^ 0xFA7)))(4096, 1358311088);
  *(void *)a1 = v5;
  return (*(uint64_t (**)(void))(v2
                              + 8 * (((((v1 - 107) ^ (v5 == 0)) & 1) * ((v1 ^ 0x664) - 178)) ^ v1)))();
}

uint64_t sub_100178648()
{
  *(_DWORD *)(v2 + 8) = v1 + 4096;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((*(void *)(v4 - 128) > (unint64_t)(v0
                                                                                          - 652
                                                                                          + v1
                                                                                          - 1814566904
                                                                                          - 693))
                                * ((v0 ^ 0x504) + 515)) ^ v0)))();
}

uint64_t sub_10017869C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8 * ((((v3 + 360) ^ 0x413) * (v4 != 0)) ^ v3)))(a1, a2, a3);
}

uint64_t sub_1001786D4@<X0>(int a1@<W8>)
{
  unsigned int v5 = v1 + v2 + a1;
  unsigned int v6 = (((2 * a1 + 665825296) << (v3 ^ 0x1C)) & 0xFD5FDFF8) + ((2 * a1 + 665825296) ^ 0x7EAFEFFC);
  if (v5 > 0x4762EDD != v6 + 2094653734 < 0xFB89D122) {
    BOOL v7 = v6 + 2094653734 < 0xFB89D122;
  }
  else {
    BOOL v7 = v6 + 2094653734 > v5 - 74854110;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8 * ((367 * v7) ^ v3 ^ 0x2B4)))(4250918904, 3984078844, 2094653734);
}

uint64_t sub_100178794()
{
  uint64_t v4 = *(uint64_t (**)(void))(v2 + 8 * (int)((((v0 - 95685618) & 0xAFF5FF6F ^ 0xAA41F451) * (v1 == 0)) | v0));
  *(void *)(v3 - 200) = 0x1A44E0EB4FC706ALL;
  return v4();
}

uint64_t sub_1001787F8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v24 = a1 - 200;
  (*(void (**)(uint64_t))(v22 + 8 * (a1 + 1438520241)))(v21);
  *(void *)(v23 - 200) = 0x1A44E0EB4FC706ALL;
  (*(void (**)(uint64_t))(v22 + 8 * (v24 + 1438520511)))(v20);
  (*(void (**)(uint64_t))(v22 + 8 * (int)(v24 ^ 0xAA41FD43)))(a20);
  return (*(uint64_t (**)(void))(v22 + 8 * ((74 * (*(void *)(v23 - 208) != 0)) | (v24 + 1438519375))))();
}

uint64_t sub_100178BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v33 = (*(uint64_t (**)(void))(v31 + 8 * v29))();
  uint64_t v34 = *(uint64_t (**)(uint64_t))(v31 + 8 * ((v28 - 510) ^ ((a28 == 0) | (4 * (a28 == 0)))));
  *(void *)(v32 - 192) = v30;
  return v34(v33);
}

uint64_t sub_100178BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  (*(void (**)(uint64_t))(v34 + 8 * (int)(v29 ^ 0xAA41FD43)))(a28);
  *(void *)(v35 - 192) = v30;
  if (v31 == -45004)
  {
    *(void *)(v35 - 184) = v33;
    *(void *)(v35 - 144) = 0;
    *(_DWORD *)(v35 - 132) = 0;
    uint64_t v43 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v34 + 18736))(**(unsigned int **)(v32 + 64), *(void *)v28, *(unsigned int *)(v28 + 12), v35 - 144, v35 - 132);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * ((1320 * ((v43 ^ 0x7FFFFEAB) - 899814434 + ((2 * v43) & 0xFFFFFD56) == 1516104332)) ^ 0x153)))(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
  else if (v31)
  {
    return sub_100179E90();
  }
  else
  {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * ((462 * (*(void *)(v35 - 200) != 0x1A44E0EB4FC706ALL)) ^ 0xED)))(*(void *)(v35 - 200), v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
}

uint64_t sub_100179314(uint64_t a1)
{
  int v3 = (v1 - 469144713) & 0x71B4A762;
  unsigned int v4 = *(_DWORD *)(a1 - 0x1A44E0EB4FC705ELL) + 2002279202;
  unsigned int v5 = ((v3 - 1420259747) & 0x54A76E93 ^ 0xB303737) + *(_DWORD *)(a1 - 0x1A44E0EB4FC7062);
  int v6 = (v4 < 0x77585B1E) ^ (v5 < 0x77585B1E);
  BOOL v7 = v4 > v5;
  if (v6) {
    BOOL v7 = v4 < 0x77585B1E;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((v7 * (v3 - 1702)) ^ v3)))();
}

uint64_t sub_1001793D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2 = v3 + 4;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((((a1 == a2) ^ (((v4 + 81) & 0x9F) - 82)) & 1)
                                     * ((v5 + ((v4 + 575506257) & 0xDDB2759F) - 1041) ^ (v5 - 22))) ^ (v4 + 575506257) & 0xDDB2759F)))();
}

uint64_t sub_1001794A0()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((*(void *)(*(void *)(v3 - 200) - 0x1A44E0EB4FC706ALL) == 0) ^ ((v0 & 0xC9) - 68)) & 1)
                                     * (v0 & 0x8E77A3C9 ^ (v1 + 905) ^ (v1 + 36))) ^ v0 & 0x8E77A3C9)))();
}

uint64_t sub_100179508@<X0>(int a1@<W8>)
{
  unsigned int v5 = (a1 + 171965627) | 0xA001F402;
  (*(void (**)(void))(v4 + 8 * (int)(v5 ^ (v3 + 2227))))();
  *int v1 = 0;
  *(_DWORD *)(v2 - 0x1A44E0EB4FC7062) = 1814571000;
  *(_DWORD *)(v2 - 0x1A44E0EB4FC705ELL) = 0;
  (*(void (**)(void *))(v4 + 8 * (int)(v5 ^ (v3 + 2227))))(v1);
  return sub_100179E90();
}

uint64_t sub_100179588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_DWORD *a30,int a31,int a32)
{
  uint64_t v37 = (*(uint64_t (**)(void))(v35 + 8 * (v34 ^ (v34 + 2227))))(*(void *)(v33 - 0x1A44E0EB4FC706ALL));
  *(void *)(v33 - 0x1A44E0EB4FC706ALL) = a22;
  *a30 = a32;
  *(void *)(v36 - 160) = v32;
  return (*(uint64_t (**)(uint64_t))(v35
                                            + 8
                                            * ((((((167 * (v34 ^ (v34 + 8)) - 1270) ^ 1) & 1) == 0)
                                              * (((167 * (v34 ^ (v34 + 8)) - 1304) | 0x41) ^ 9)) ^ (167
                                                                                                  * (v34 ^ (v34 + 8))))))(v37);
}

void sub_100179628()
{
  *(void *)(v1 - 176) = v0;
  JUMPOUT(0x10017965CLL);
}

uint64_t sub_1001796C4()
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((((v1 - 1476338727) | 0x2411404) ^ (v3 + 168)) * (v0 == v2)) ^ v1)))();
}

uint64_t sub_100179708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v6 = v3 - 524;
  unsigned int v7 = 5 * ((v3 - 344459283) & 0xBEC9F7EF ^ (v4 - 57));
  BOOL v9 = v2 > 7 && (unint64_t)(a1 - a2) > 0x1F;
  return (*(uint64_t (**)(void))(v5 + 8 * (int)(((v7 - 323) * v9) ^ v6)))();
}

uint64_t sub_10017975C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * ((213 * (v0 >= (v1 ^ 0x2EC ^ (v2 + 951) ^ ((v1 + 37868175) | 0xA8002040)))) ^ v1)))();
}

uint64_t sub_1001797AC@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1533 * ((v2 & 0xFFFFFFE0) - (unint64_t)(v4 + v3 - 157) == -2050)) ^ (v4 + v3 - 1401))))();
}

uint64_t sub_1001797FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *(_OWORD *)(a3 + a2 + 16);
  uint64_t v8 = (_OWORD *)(a1 + a2);
  *uint64_t v8 = *(_OWORD *)(a3 + a2);
  v8[1] = v7;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 == a2) * v5) ^ v4)))();
}

uint64_t sub_10017982C()
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v3 + ((v2 - 2109649952) | 0x2800A044) - 2214) * (v0 != v1)) | v2)))();
}

uint64_t sub_100179868()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((194 * (((v1 - 1707 - v2 + 1864 + ((v1 - 1952) | 0x319) + 1438517303) & v0) == 0)) ^ (v1 - 1707))))();
}

uint64_t sub_1001798B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + v2) = *(void *)(a2 + v2);
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((((v4 ^ 3 ^ (v5 + 941)) & v3) - 8 != v2) * ((((v4 ^ 3) - 828) | 0x201) - 602)) | v4 ^ 3)))();
}

uint64_t sub_100179900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 != v5) * v4) | v2)))();
}

uint64_t sub_100179928()
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 ^ (v3 + 469) ^ (v3 - 819)) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_100179954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a1 + v2) = *(unsigned char *)(a2 + v2);
  return (*(uint64_t (**)(void))(v6 + 8 * ((44 * (v2 + 1 == v3)) ^ (v5 + v4 - 1074))))();
}

uint64_t sub_100179988()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((((v3 + ((v1 + 117195770) & 0xF903BBFF) - 982) ^ (v3 + 26)) * (v0 != v2)) ^ v1)))();
}

uint64_t sub_1001799D4()
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 + v3 + ((v0 - 925) | 0x500) - 1337 - 225) * (v1 > 7)) ^ v0)))();
}

uint64_t sub_100179A10()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v1 ^ (v2 - 711) ^ (v2 - 13)) * (v0 > 0x1F)) ^ v1)))();
}

uint64_t sub_100179A40()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((247
                                * (v0 < ((v1 - 278529498) & 0xBADBF4E6 ^ (v2 + 950) ^ (v1 - 1783889306) & 0x6A53FBFA))) ^ (v1 + 300))))();
}

uint64_t sub_100179AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = (v4 + (v3 ^ (v6 + 210)) + 1518) & (v2 - 1);
  long long v9 = *(_OWORD *)(a2 + v8 - 15);
  long long v10 = *(_OWORD *)(a2 + v8 - 31);
  uint64_t v11 = a1 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((4 * ((v2 & 0xFFFFFFE0) == 32)) | (8 * ((v2 & 0xFFFFFFE0) == 32)) | (v5 + v3 - 1468))))();
}

void sub_100179B04()
{
}

uint64_t sub_100179B10()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v2 ^ (v0 == v1)) & 1) == 0) * (((v2 - 285) | 0x80) - 147)) ^ v2)))();
}

uint64_t sub_100179B44()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((39
                                * ((v0 & 0x18) == ((v1 - v2 + 2046) ^ 0xFFFFFFFF55BE0820)
                                                + (v1 + 729))) ^ v1)))();
}

uint64_t sub_100179B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 - 7 + (~v2 + v3)) = *(void *)(a2 - 7 + (~v2 + v3));
  return (*(uint64_t (**)(void))(v5 + 8 * (((v2 - (v3 & 0xFFFFFFF8) == -8) * ((v4 + 415) ^ 0x189)) ^ v4)))();
}

uint64_t sub_100179BE0(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  *(void *)(v6 + a3) = *(void *)(v5 + a3);
  return (*(uint64_t (**)(void))(v7 + 8 * (((a4 == 0) * a2) ^ v4)))();
}

uint64_t sub_100179C10()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v0 + v0 + 902 - 2685) * (v2 == v1)) ^ v0)))();
}

uint64_t sub_100179C40()
{
  return v0();
}

uint64_t sub_100179C48()
{
  uint64_t v1 = *(void *)(v0 - 176);
  *(_DWORD *)(v1 - 0x1A44E0EB4FC7062) = (*(_DWORD *)(v0 - 132) ^ 0xEE787FFD)
                                        + 2108663803
                                        + ((2 * *(_DWORD *)(v0 - 132)) & 0xDCF0FFFA);
  *(_DWORD *)(v1 - 0x1A44E0EB4FC705ELL) = 0;
  return sub_100179E30();
}

uint64_t sub_100179CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v6 = v2 - 1;
  *(unsigned char *)(a1 + v6) = *(unsigned char *)(a2 + v6);
  return (*(uint64_t (**)(void))(v5 + 8 * (((2 * (v6 != 0)) | (8 * (v6 != 0))) ^ (v4 + v3 - 763))))();
}

uint64_t sub_100179CE4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((v1 == 0x1A44E0EB4FC706ALL) ^ ((v0 | 0xAC) - 35)) & 1)
                                     * (((v0 | 0x1AC) - 1438518696) ^ 0xAA41F45E)) ^ (v0 | 0x1AC))))();
}

uint64_t sub_100179D48@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((((*(void *)(v1 - 0x1A44E0EB4FC706ALL) == 0) ^ (a1 + 58)) & 1)
                                     * ((a1 - 1100091773) & 0xEBD3FFF7 ^ (v2 + 859))) ^ a1)))();
}

uint64_t sub_100179DB0@<X0>(int a1@<W8>)
{
  int v5 = (a1 - 1572753863) | 0x8004042;
  (*(void (**)(void))(v4 + 8 * (v5 ^ (v3 + 2227))))();
  void *v2 = 0;
  *(_DWORD *)(v1 - 0x1A44E0EB4FC7062) = 1814571000;
  *(_DWORD *)(v1 - 0x1A44E0EB4FC705ELL) = 0;
  uint64_t v6 = (*(uint64_t (**)(void *))(v4 + 8 * (v5 ^ (v3 + 2227))))(v2);
  return sub_100179E30(v6);
}

uint64_t sub_100179E30()
{
  uint64_t v7 = (*(uint64_t (**)(void, void, void))(v5 + 8 * (v0 ^ (v4 + 2322))))(*(unsigned int *)*(&off_100232F90 + v1 + v0 - 2209), *(void *)(v6 - 144), *(unsigned int *)(v6 - 132));
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v5 + 8 * ((1989 * (v2 == 0)) ^ (v1 + v0 - 1689)));
  *(void *)(v6 - 200) = v3;
  return v8(v7);
}

uint64_t sub_100179E90()
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * (int)(((((v1 + 1500410679) & 0xFC4F9DEF) - 1379) * (v0 == 0)) ^ (v2 + v1 - 2108))))();
}

uint64_t sub_100179ED0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((((a1 - 1149634183) ^ (*v1 == 0)) & 1) == 0)
                                     * ((a1 - 1149634183) & 0xEEC7F55F ^ (v2 + 19))) ^ a1)))();
}

void sub_100179F1C()
{
  (*(void (**)(void))(v3 + 8 * (v1 ^ (v2 + 2227))))();
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v0 + 8) = 912148809;
  *(_DWORD *)(v0 + 12) = 0;
  JUMPOUT(0x100179F58);
}

uint64_t sub_100179F68()
{
  return v0;
}

void sub_100179FA8(id a1, void *a2)
{
  uint64_t v2 = (uint64_t)*(&off_100232F90
                + ((9 * ((dword_1002721C0 + dword_1002721E8) ^ 0x7D)) ^ byte_1001BA080[byte_1001BAAF0[(9 * ((dword_1002721C0 + dword_1002721E8) ^ 0x7D))] ^ 0xC0])
                - 30);
  uint64_t v3 = *(void *)(v2 - 4);
  uint64_t v4 = (uint64_t)*(&off_100232F90
                + (byte_1001BA5B8[(byte_1001BA198[(9 * ((dword_1002721C0 + v3) ^ 0x7D))
                                                                 - 8] ^ 0x19)
                                                 - 8] ^ (9 * ((dword_1002721C0 + v3) ^ 0x7D)))
                - 39);
  unint64_t v5 = (unint64_t)&v12[*(void *)(v4 - 4) ^ v3];
  uint64_t v6 = 1787074057 * v5 + 0x12143784A120E583;
  unint64_t v7 = 1787074057 * (v5 ^ 0xEDEBC87B5EDF1A7DLL);
  *(void *)(v2 - 4) = v6;
  *(void *)(v4 - 4) = v7;
  LOBYTE(v7) = 9 * ((v7 - *(_DWORD *)(v2 - 4)) ^ 0x7D);
  uint64_t v8 = (char *)*(&off_100232F90
               + ((9 * ((dword_1002721C0 + dword_1002721E8) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((dword_1002721C0 + dword_1002721E8) ^ 0x7D))] ^ 0xB1])
               - 189)
     - 4;
  uint64_t v9 = (*(uint64_t (**)(void *))&v8[8
                                            * (byte_1001BA8B4[(byte_1001BA490[v7] ^ 0x81)
                                                                             - 4] ^ v7)
                                            + 16984])(a2);
  unsigned __int8 v10 = 9 * ((*(_DWORD *)(v4 - 4) - *(_DWORD *)(v2 - 4)) ^ 0x7D);
  uint64_t v11 = *(void (**)(uint64_t))&v8[8
                                          * (byte_1001B9F84[(byte_1001BA9FC[v10 - 12] ^ 0x1A)
                                                                           - 4] ^ v10)
                                          + 16440];

  v11(v9);
}

void sub_10017A1A0()
{
  uint64_t v0 = (uint64_t)*(&off_100232F90
                + ((9 * ((dword_1002721C0 - qword_1002721F0) ^ 0x7D)) ^ byte_1001B9F80[byte_1001BA9F0[(9 * ((dword_1002721C0 - qword_1002721F0) ^ 0x7D))] ^ 0x92])
                - 204);
  unint64_t v1 = (unint64_t)&v4 ^ qword_1002721F0 ^ *(void *)(v0 - 4);
  unint64_t v2 = (1787074057 * v1) ^ 0xEDEBC87B5EDF1A7DLL;
  unint64_t v3 = 1787074057 * (v1 ^ 0xEDEBC87B5EDF1A7DLL);
  qword_1002721F0 = v2;
  *(void *)(v0 - 4) = v3;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10017A2BC()
{
  (*(void (**)(void))(v1 + 17912))();
  *(void *)(v0 + 8) = 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((127 * (*(void *)(v0 + 24) == 0)) ^ 0x827)))();
}

uint64_t sub_10017A318()
{
  *(_DWORD *)(v0 + 36) = 0;
  *(void *)uint64_t v0 = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8 * ((980 * ((v2 ^ 0xD7 ^ (*(void *)(v0 + 48) == 0)) & 1)) ^ v2)))();
}

uint64_t sub_10017A354@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((*(void *)(v1 + 64) == 0) * ((a1 + 3) ^ (a1 - 1169327030) ^ 0xBA4D845A)) ^ a1)))();
}

uint64_t sub_10017A394()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((127 * (*(void *)(v0 + 24) == 0)) ^ 0x827)))();
}

uint64_t sub_10017A3E0@<X0>(int a1@<W8>)
{
  unsigned int v3 = a1 + 1057;
  (*(void (**)(void))(v2 + 8 * (a1 ^ 0x902u)))();
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  *(void *)uint64_t v1 = 0;
  return (*(uint64_t (**)(void))(v2
                              + 8 * ((980 * ((v3 ^ 0xD7 ^ (*(void *)(v1 + 48) == 0)) & 1)) ^ v3)))();
}

uint64_t sub_10017A438()
{
  (*(void (**)(void))(v1 + 8 * (v2 + 737)))();
  *(void *)(v0 + 48) = 0;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((*(void *)(v0 + 64) == 0) * ((v2 - 466) ^ (v2 - 1169327499) ^ 0xBA4D845A)) ^ (v2 - 469))))();
}

uint64_t sub_10017A490()
{
  (*(void (**)(void))(v2 + 8 * (v0 + 1203)))();
  *(void *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 76) = 0;
  *(void *)(v1 + 40) = 0;
  return 0;
}

void sub_10017A4C4(void *a1)
{
  uint64_t v1 = [a1 debugDescription];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Starting Fido registration with context: %@", v4, v5, v6, v7, v8);
}

void sub_10017A548()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Starting Fido authentication with context: %@", v1, 0xCu);
}

void sub_10017A5BC(void *a1)
{
  uint64_t v1 = [a1 debugDescription];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Starting Fido authentication with context: %@", v4, v5, v6, v7, v8);
}

void sub_10017A644()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error starting fido auth: %@", v2, v3, v4, v5, v6);
}

void sub_10017A6AC(void *a1)
{
  uint64_t v1 = [a1 debugDescription];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Starting Fido recovery with context: %@", v4, v5, v6, v7, v8);
}

void sub_10017A734()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error authorizing fido auth: %@", v2, v3, v4, v5, v6);
}

void sub_10017A79C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error finishing fido auth: %@", v2, v3, v4, v5, v6);
}

void sub_10017A804(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 altDSID];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Follow up push message is for an altDSID not signed in to iCloud: %@", v4, 0xCu);
}

void sub_10017A898()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No body parameters in Follow Up response!", v2, v3, v4, v5, v6);
}

void sub_10017A8CC()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to synchronize local follow up state: %@", v1, 0xCu);
}

void sub_10017A940()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to clear existing follow ups: %@", v1, 0xCu);
}

void sub_10017A9B4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Detected an item without an identifier, invalid payload", v2, v3, v4, v5, v6);
}

void sub_10017A9E8()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Incoming notification was forced, keeping it!", v1, 2u);
}

void sub_10017AA28()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Existing item notification was previously dismissed, ignoring incoming notification", v1, 2u);
}

void sub_10017AA68()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Updating existing item with identifier: %@", v2, v3, v4, v5, v6);
}

void sub_10017AAD0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unknown action, ignoring...", v2, v3, v4, v5, v6);
}

void sub_10017AB04()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Pending Follow Up items matching tear down message id: %@", v2, v3, v4, v5, v6);
}

void sub_10017AB6C()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Pending Follow Up items: %@", v2, v3, v4, v5, v6);
}

void sub_10017ABD4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Converting key to hashed value", v1, 2u);
}

void sub_10017AC18(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Tried to commit without listVersion. Info:%@", (uint8_t *)&v2, 0xCu);
}

void sub_10017AC90(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017ACFC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017AD68(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017ADDC()
{
  uint64_t v0 = abort_report_np();
  sub_10017AE04(v0, v1, v2);
}

void sub_10017AE04(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "State of app %@: %d.", (uint8_t *)&v3, 0x12u);
}

void sub_10017AE8C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unable to obtain auditToken data for %@", (uint8_t *)&v3, 0xCu);
}

void sub_10017AF08(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Unable to determine bundle ID of client %@ using NSBundle API. Falling back to CF.", (uint8_t *)&v2, 0xCu);
}

void sub_10017AF80(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "ADIGenerateOTPCode succeeded!", v1, 2u);
}

void sub_10017AFC4(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = +[NSNumber numberWithInt:a1];
  int v4 = 138412290;
  __int16 v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "ADIGenerateOTPCode failed with error code %@", (uint8_t *)&v4, 0xCu);
}

void sub_10017B068(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing push token for circle request", v1, 2u);
}

void sub_10017B0AC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Got malformed \"%@\" configuration info!", v2, v3, v4, v5, v6);
}

void sub_10017B114()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Got insecure \"%@\" configuration info!", v2, v3, v4, v5, v6);
}

void sub_10017B17C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017B1F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017B26C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017B2E4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No DSID for auth server response. Could be bad.", v2, v3, v4, v5, v6);
}

void sub_10017B318()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No altDSID for auth server response. Could be bad.", v2, v3, v4, v5, v6);
}

void sub_10017B34C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid value for key is proximity auth eligible: %@", v2, v3, v4, v5, v6);
}

void sub_10017B3B4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid value for key primary email vetted: %@", v2, v3, v4, v5, v6);
}

void sub_10017B41C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid value for key Age of Majority: %@", v2, v3, v4, v5, v6);
}

void sub_10017B484()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid value for key authType: %@", v2, v3, v4, v5, v6);
}

void sub_10017B4EC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid value for key ut: %@", v2, v3, v4, v5, v6);
}

void sub_10017B554()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid/missing value for key acname: %@", v2, v3, v4, v5, v6);
}

void sub_10017B5BC(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v5, "Invalid type for key notificationEmail: %@", v6);
}

void sub_10017B64C(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v5, "Invalid type for key isNotificationEmailAvailable: %@", v6);
}

void sub_10017B6DC(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v5, "Invalid type for key orgName: %@", v6);
}

void sub_10017B76C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid value for key orgType: %@", v2, v3, v4, v5, v6);
}

void sub_10017B7D4(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v5, "Invalid type for key orgType: %@", v6);
}

void sub_10017B864()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Value for %@ is: %@", v2, 0x16u);
}

void sub_10017B8E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017B960(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017B9D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BA50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BAC8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412546;
  CFStringRef v4 = @"X-Apple-I-Device-Terms";
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Value for %@ is: %@", (uint8_t *)&v3, 0x16u);
}

void sub_10017BB58(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  CFStringRef v3 = @"X-Apple-I-Device-Terms";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid value value for %@ header: %@", (uint8_t *)&v2, 0x16u);
}

void sub_10017BBE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BC5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BCD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BD4C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BDC4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BE3C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017BEB4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Value for %@ is missing/invalid!", v2, v3, v4, v5, v6);
}

void sub_10017BF1C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to update master token", v2, v3, v4, v5, v6);
}

void sub_10017BF50()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Trying to update an auth response without an existing _masterToken. Trouble waiting down the line.", v2, v3, v4, v5, v6);
}

void sub_10017BF84()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Updating with secondary auth response: %@", v2, v3, v4, v5, v6);
}

void sub_10017BFEC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for DSID value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C054(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 648);
  int v3 = 138412546;
  uint64_t v4 = AKADPCohortHeaderKey;
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ = %@", (uint8_t *)&v3, 0x16u);
}

void sub_10017C0E8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for adpCohort value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C150()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for edpState value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C1B8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for passwordVersion value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C220()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for srpProtocol value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C288()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for srpSalt value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C2F0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid type for srpIteration value: %@", v2, v3, v4, v5, v6);
}

void sub_10017C358()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Ephermeral auth - Skipping metrics report.", v2, v3, v4, v5, v6);
}

void sub_10017C38C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Require shortLived token - Skipping metrics report.", v2, v3, v4, v5, v6);
}

void sub_10017C3C0()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "SIWA - Skipping metrics report.", v2, v3, v4, v5, v6);
}

void sub_10017C3F4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Not a HSA2 or MAID account - Skipping metrics report.", v2, v3, v4, v5, v6);
}

void sub_10017C428()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Secondary action required - Skipping metrics report", v2, v3, v4, v5, v6);
}

void sub_10017C45C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Password reset request already in progress, cannot perform another request at this time", v1, 2u);
}

void sub_10017C4A0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Context data is nil: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017C518(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Forgot password native takeover feature is not enable, so not presenting the view", v1, 2u);
}

void sub_10017C55C()
{
  sub_10001DAD4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Password reset result %@, error: %@", v1, 0x16u);
}

void sub_10017C5D4()
{
  sub_10001DAD4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Password reset alert handle (%@) interrupted with error: %@", v1, 0x16u);
}

void sub_10017C64C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ deallocated.", (uint8_t *)&v2, 0xCu);
}

void sub_10017C6C4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Approving device could not accept piggybacking session: %@", v2, v3, v4, v5, v6);
}

void sub_10017C72C()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "%@: Proximity check failed while handling push (%@)");
}

void sub_10017C794()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to process data with error: %@", v2, v3, v4, v5, v6);
}

void sub_10017C7FC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "%@: Proximity was not detected and is being enforced", v2, v3, v4, v5, v6);
}

void sub_10017C864(uint64_t *a1, void *a2, NSObject *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = [a2 payload];
  uint8_t v6 = [v5 clientInfo];
  int v7 = 138412546;
  uint64_t v8 = v4;
  __int16 v9 = 2112;
  unsigned __int8 v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Did process message using session: %@ - %@", (uint8_t *)&v7, 0x16u);
}

void sub_10017C92C(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = [a2 clientInfo];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  __int16 v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Will process message using session: %@ - %@", (uint8_t *)&v6, 0x16u);
}

void sub_10017C9E4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 accountPropertyForKey:@"DSID"];
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Initializing accept session for DSID: %@", v4, 0xCu);
}

void sub_10017CA80()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to grab a lock assertion: %@", v2, v3, v4, v5, v6);
}

void sub_10017CAE8()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "%@: Unable to start proximity scanner with nil presenceSID from pushPayload (%@)");
}

void sub_10017CB50(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Piggyback accepting controller has been released, proximity controller should have been invalidated", v1, 2u);
}

void sub_10017CB94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CC04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CC3C(uint64_t a1, NSObject *a2)
{
  int v2 = 136315138;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "DS:Problem getting the container from container manager, %s", (uint8_t *)&v2, 0xCu);
}

void sub_10017CCB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CCEC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CD24(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EDP Repair: Failed to check account state with error... %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017CD9C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CDD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CE0C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "EDP Repair: Starting for context: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017CE84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017CEBC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EDP Repair: Failed with error... %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017CF34(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not create store, this is bad, show error", v1, 2u);
}

void sub_10017CF78()
{
}

void sub_10017CFA0()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  sub_10017CFC4(v0);
}

void sub_10017CFC4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Successfully read push token from keychain.", v1, 2u);
}

void sub_10017D008(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Failed to read push token from keychain, returning nil. Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017D080(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Successfully wrote push token to keychain.", v1, 2u);
}

void sub_10017D0C4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Failed to write push token to keychain. Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017D13C(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) urlBagKey];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "Attempting to build request without a URL (urlBagKey: %@), bad things to come...", v5);
}

void sub_10017D1CC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Signing request with the security code", v2, v3, v4, v5, v6);
}

void sub_10017D200(void *a1, NSObject *a2)
{
  uint64_t v3 = objc_msgSend(a1, "ak_redactedCopy");
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a2, v4, "Request Body: %@", v5);
}

void sub_10017D28C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 allHTTPHeaderFields];
  uint64_t v4 = objc_msgSend(v3, "ak_redactedCopy");
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a2, v5, "Request Headers: %@", v6);
}

void sub_10017D330()
{
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, v0, v1, "Request: %@", v2);
}

void sub_10017D39C()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Failed to sign the request with error: %@", v2);
}

void sub_10017D408()
{
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, v0, v1, "%@: Cannot generate response dictionary for expected response type of UTF8String", v2);
}

void sub_10017D474()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "An error occurred performing request. Server message: %@", v2);
}

void sub_10017D4E0()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "No body parameters in fetch user info response!", v1, 2u);
}

void sub_10017D520()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "response type is JSON", v2, v3, v4, v5, v6);
}

void sub_10017D554()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Server returned no response, treating as success", v2, v3, v4, v5, v6);
}

void sub_10017D588(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 intValue];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Server request failed with error code: %i", (uint8_t *)v3, 8u);
}

void sub_10017D614()
{
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, v0, v1, "Response Body: %@", v2);
}

void sub_10017D680(void *a1, NSObject *a2)
{
  [a1 expectedResponseType];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v3, "Can't validate response for type: %lu", v4);
}

void sub_10017D700()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Invalid key %@ in server response: %@", v2, 0x16u);
}

void sub_10017D784()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Invalid native recovery server response detected", v2, v3, v4, v5, v6);
}

void sub_10017D7B8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to retrieve recovery data with error. %@", v2, v3, v4, v5, v6);
}

void sub_10017D820()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to fetch idMS completion url from provided info", v2, v3, v4, v5, v6);
}

void sub_10017D854()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "We determined that we should not be resuming server UI flow at this point.  There is nothing else for us to do here.", v1, 2u);
}

void sub_10017D894()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing identity token", v2, v3, v4, v5, v6);
}

void sub_10017D8C8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal or private access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_10017D8FC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Request to renew recovery token failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017D964()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "We failed to fetch basic auth URL, failing SRP... %@", v2, v3, v4, v5, v6);
}

void sub_10017D9CC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "MK was accepted, but we did not get expected data... failing", v2, v3, v4, v5, v6);
}

void sub_10017DA00()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to persist verifier with error: %@", v2, v3, v4, v5, v6);
}

void sub_10017DA68(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017DAD8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Recovery context is invalid...", v2, v3, v4, v5, v6);
}

uint64_t sub_10017DB0C()
{
  uint64_t v0 = abort_report_np();
  return sub_10017DB34(v0);
}

uint64_t sub_10017DB34()
{
  uint64_t v0 = abort_report_np();
  return sub_10017DB5C(v0);
}

uint64_t sub_10017DB5C()
{
  uint64_t v0 = abort_report_np();
  return sub_10017DB84(v0);
}

uint64_t sub_10017DB84()
{
  uint64_t v0 = abort_report_np();
  return sub_10017DBAC(v0);
}

uint64_t sub_10017DBAC()
{
  uint64_t v0 = abort_report_np();
  return sub_10017DBD4(v0);
}

uint64_t sub_10017DBD4()
{
  uint64_t v0 = abort_report_np();
  return sub_10017DBFC(v0);
}

void sub_10017DBFC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Nil account cannot possibly need a warm up!", v1, 2u);
}

void sub_10017DC40(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "CoreIDV performVerification failed with error: %@, Proceding to request", (uint8_t *)&v2, 0xCu);
}

void sub_10017DCB8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "CoreIDV getVerificationResult failed with error: %@, Proceding to request", (uint8_t *)&v2, 0xCu);
}

void sub_10017DD30()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal/Owner access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_10017DD64()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to verify enable walrus requirements with error: %@\nresponse: %@");
}

void sub_10017DDCC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to update walrus state - either status code is not OK or the response is nil.", v2, v3, v4, v5, v6);
}

void sub_10017DE00()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to update walrus state - no ADP status header found in response.", v2, v3, v4, v5, v6);
}

void sub_10017DE34()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to update walrus state with error: %@\nresponse: %@");
}

void sub_10017DE9C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Going in for BAA signing", v2, v3, v4, v5, v6);
}

void sub_10017DED0()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "BAA signing completed", v2, v3, v4, v5, v6);
}

void sub_10017DF04()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Not enough signing points for host signature. Bailing on host sign", v1, 2u);
}

void sub_10017DF44(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Going in for host BAA signing for key - %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017DFBC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "BAA signing completed for host", v2, v3, v4, v5, v6);
}

void sub_10017DFF0()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Nothing to sign. Early return.", v1, 2u);
}

void sub_10017E030(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to get the excluded VIPs list. Error - %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017E0A8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Finished reporting for BAA signing", v2, v3, v4, v5, v6);
}

void sub_10017E0DC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error getting sampling rate from config - %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017E154(os_log_t log)
{
  int v1 = 138412290;
  CFStringRef v2 = @"com.apple.authkit.baa.signing";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Reporting  %@ is not supported for non-prod environments", (uint8_t *)&v1, 0xCu);
}

void sub_10017E1DC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Account is missing an altDSID, skipping cleanup for account %@...", (uint8_t *)&v2, 0xCu);
}

void sub_10017E254()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to remove account %@. Error: %@");
}

void sub_10017E2C0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Exception caught during account cleanup: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10017E338()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to save account %@. Error: %@");
}

void sub_10017E3A4(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 144);
  int v5 = 138412802;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@: Failed to fetch attestation data for proxied auth context (%@) with error (%@)", (uint8_t *)&v5, 0x20u);
}

void sub_10017E444(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received error while getting current user's account: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10017E4BC(uint64_t a1)
{
  os_log_t v1 = [*(id *)(*(void *)(a1 + 48) + 144) proxiedDevice];
  sub_10002FC2C();
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "Unable to get proxied Anisette data for %@! Error: %@", v4, v5, v6, v7, v8);
}

void sub_10017E55C(uint64_t a1)
{
  os_log_t v1 = [*(id *)(*(void *)(a1 + 48) + 144) companionDevice];
  sub_10002FC2C();
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "Unable to get companion Anisette data for %@! Error: %@", v4, v5, v6, v7, v8);
}

uint64_t sub_10017E5FC()
{
  uint64_t v0 = abort_report_np();
  return sub_10017E624(v0);
}

uint64_t sub_10017E624()
{
  uint64_t v0 = abort_report_np();
  return sub_10017E64C(v0);
}

void sub_10017E64C()
{
}

void sub_10017E674()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Whoa! UI surrogate is checking in with an unexpected identifier %@.", v2);
}

void sub_10017E6E0()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "UI surrogate with ID %@ has already checked in.", v2);
}

void sub_10017E74C()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Context with identifier %@ has no registered UI surrogate.", v2);
}

void sub_10017E7B8(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4 = [a1 stringByAppendingString:a2];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a3, v5, "%@", v6);
}

void sub_10017E848(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 surrogateClient];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "Error: Attempted to clear surrogate that is no longer in progress with ID %@.", v5);
}

void sub_10017E8D4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 inheritanceContext];
  uint64_t v4 = [v3 altDSID];
  int v5 = 138412290;
  uint64_t v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not find heartbeat token for account %@", (uint8_t *)&v5, 0xCu);
}

void sub_10017E984(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 intValue];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Inheritance Server request failed with error code: %i", (uint8_t *)v3, 8u);
}

void sub_10017EA10(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "DS:Problem getting access to data container, sandbox consume handle returned %lld, show error", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_10017EA8C()
{
  uint64_t v0 = abort_report_np();
  return sub_10017EAB4(v0);
}

uint64_t sub_10017EAB4()
{
  return sub_10017EADC();
}

uint64_t sub_10017EADC()
{
  uint64_t v0 = abort_report_np();
  return sub_10017EB04(v0);
}

void sub_10017EB04()
{
}

void sub_10017EB2C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting anisette data - %@", v2, v3, v4, v5, v6);
}

void sub_10017EB94()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting attestations data - %@", v2, v3, v4, v5, v6);
}

void sub_10017EBFC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Virtual machine: BAA V1 is allowed.", v2, v3, v4, v5, v6);
}

void sub_10017EC30()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "DeviceIdentity is not supported. No BAA V1 headers.", v2, v3, v4, v5, v6);
}

void sub_10017EC64()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Not a virtual machine. No BAA V1 headers.", v2, v3, v4, v5, v6);
}

void sub_10017EC98()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AuthKit/VMBAA feature is on.", v2, v3, v4, v5, v6);
}

void sub_10017ECCC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AuthKit/VMBAA feature is off.", v2, v3, v4, v5, v6);
}

void sub_10017ED00()
{
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, v0, v1, "Evaluating traffic request for invocation: %@", v2);
}

void sub_10017ED6C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_10002460C((void *)&_mh_execute_header, a2, a3, "Adding traffic request to the pending signing request queue: %@", (uint8_t *)&v4);
}

void sub_10017EDE0(void *a1)
{
  uint64_t v1 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a1 count]);
  uint64_t v2 = +[NSNumber numberWithUnsignedInt:qos_class_self()];
  sub_100039794();
  sub_100039774((void *)&_mh_execute_header, v3, v4, "Processing pending signing requests: (%@); qos: %@",
    v5,
    v6,
    v7,
    v8,
    2u);
}

void sub_10017EEA8()
{
  uint64_t v0 = +[NSNumber numberWithUnsignedInt:qos_class_self()];
  sub_100039794();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Executing signing request: %@; qos: %@", v3, v4, v5, v6, 2u);
}

void sub_10017EF54()
{
  uint64_t v0 = +[NSNumber numberWithUnsignedInt:qos_class_self()];
  sub_100039794();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Executed signing request: %@; qos: %@", v3, v4, v5, v6, 2u);
}

void sub_10017F000()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Client requested that we attempt provisioning...", v2, v3, v4, v5, v6);
}

void sub_10017F034()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Skipping Anisette provisioning, per client request.", v2, v3, v4, v5, v6);
}

void sub_10017F068()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Anisette fetch retry succeeded!", v2, v3, v4, v5, v6);
}

void sub_10017F09C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch anisette data, attempting a one shot immediate retry... Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017F104()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Provisioning failed. No Anisette for you today! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017F16C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to get Anisette data even after provisioning was attempted. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017F1D4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Provisioning succeeded!", v2, v3, v4, v5, v6);
}

void sub_10017F208()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADIGetIDMSRouting failed! Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017F294(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uid_t v6 = geteuid();
  uint8_t v7 = +[AKDevice currentDevice];
  uint64_t v8 = [v7 localUserUUID];
  __int16 v9 = objc_msgSend(v8, "ak_truncatedCopy");
  int v10 = 138413058;
  uint64_t v11 = a1;
  __int16 v12 = 2112;
  uint64_t v13 = a2;
  __int16 v14 = 1024;
  uid_t v15 = v6;
  __int16 v16 = 2112;
  int v17 = v9;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Anisette Info: mid - %@ otp - %@ euid - %d localUserUUID %@", (uint8_t *)&v10, 0x26u);
}

void sub_10017F39C(uint64_t a1)
{
  uint64_t v1 = +[NSNumber numberWithUnsignedLongLong:a1];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "The DSID %@ is not provisioned for Anisette.", v4, v5, v6, v7, v8);
}

void sub_10017F42C()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADIOTPRequest failed. Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017F4B8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Looking for Anisette data...", v2, v3, v4, v5, v6);
}

void sub_10017F4EC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to create start-provisioning URL request!", v2, v3, v4, v5, v6);
}

void sub_10017F520(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 allHTTPHeaderFields];
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a2, v4, "Starting provisioning with headers: %@", v5);
}

void sub_10017F5AC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unexpected response class! %@", v2, v3, v4, v5, v6);
}

void sub_10017F614()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Start provisioning request failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017F67C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No response body for start provisioning request!", v2, v3, v4, v5, v6);
}

void sub_10017F6B0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No SPIM!", v2, v3, v4, v5, v6);
}

void sub_10017F6E4()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADIProvisioningStart failed. Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017F770()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to create end-provisioning URL request!", v2, v3, v4, v5, v6);
}

void sub_10017F7A4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 allHTTPHeaderFields];
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a2, v4, "End provisioning with headers: %@", v5);
}

void sub_10017F830()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unexpected response class! %@", v2, v3, v4, v5, v6);
}

void sub_10017F898()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "End provisioning request failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017F900()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No response body for end provisioning request", v2, v3, v4, v5, v6);
}

void sub_10017F934()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No routing info!", v2, v3, v4, v5, v6);
}

void sub_10017F968()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADIProvisioningEnd failed. Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017F9F4()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADISetIDMSRouting failed, Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017FA80()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No TK!", v2, v3, v4, v5, v6);
}

void sub_10017FAB4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No PTM!", v2, v3, v4, v5, v6);
}

void sub_10017FAE8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Anisette is already provisioned", v2, v3, v4, v5, v6);
}

void sub_10017FB1C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to get signing headers, error: %@", v2, v3, v4, v5, v6);
}

void sub_10017FB84()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to create sync-provisioning URL request!", v2, v3, v4, v5, v6);
}

void sub_10017FBB8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Sync provisioning request failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10017FC20()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No response body for sync request!", v2, v3, v4, v5, v6);
}

void sub_10017FC54()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADISetIDMSRouting failed! Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017FCE0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Server sync failed! Error Code: %@", v2, v3, v4, v5, v6);
}

void sub_10017FD48()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unexpected response format under Status key!", v2, v3, v4, v5, v6);
}

void sub_10017FD7C()
{
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, v0, v1, "Response status details: %@", v2);
}

void sub_10017FDE8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Client did not provide SIM data!", v2, v3, v4, v5, v6);
}

void sub_10017FE1C()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADISynchronize failed. Error: %@", v3, v4, v5, v6, v7);
}

void sub_10017FEA8()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "ADIGetIDMSRouting failed with error code: %@", v3, v4, v5, v6, v7);
}

void sub_10017FF34()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to clear last knownMID with error (%@)", v2, v3, v4, v5, v6);
}

void sub_10017FF9C()
{
  sub_100039768();
  uint64_t v0 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "Erase failed! Error: %@", v3, v4, v5, v6, v7);
}

void sub_100180028()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Nil value for startProvisioningURL!", v2, v3, v4, v5, v6);
}

void sub_10018005C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Nil value for endProvisioningURL!", v2, v3, v4, v5, v6);
}

void sub_100180090()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Nil value for syncAnisetteURL!", v2, v3, v4, v5, v6);
}

void sub_1001800C4(void *a1)
{
  uint64_t v1 = [a1 custodianContext];
  uint64_t v2 = [v1 altDSID];
  sub_100039748((void *)&_mh_execute_header, v3, v4, "Could not find heartbeat token for account %@", v5, v6, v7, v8, 2u);
}

void sub_100180164()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Setting request header for Custodian Sync Action", v1, 2u);
}

void sub_1001801A4(uint64_t a1, NSObject *a2)
{
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Custodian Recovery body for request: %{private}@", (uint8_t *)&v2, 0xCu);
}

void sub_10018021C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Custodian Recovery request is being created without a push token", v2, v3, v4, v5, v6);
}

void sub_100180250()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Custodian Initiation / Revocation request is being created without a custodian UUID", v2, v3, v4, v5, v6);
}

void sub_100180284()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Finalize custodian setup request is being created without a custodian UUID", v2, v3, v4, v5, v6);
}

void sub_1001802B8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Update recovery key request is being created without a wrappingKeyRKC", v2, v3, v4, v5, v6);
}

void sub_1001802EC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Update recovery key request is being created without a custodian UUID", v2, v3, v4, v5, v6);
}

void sub_100180320()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There is no altDSID in recovery feedback call, request will probably fail", v2, v3, v4, v5, v6);
}

void sub_100180354()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There was no custodian recovery session ID for embargo end feedback call, request will probably fail", v2, v3, v4, v5, v6);
}

void sub_100180388(void *a1)
{
  uint64_t v1 = [a1 custodianContext];
  sub_100039748((void *)&_mh_execute_header, v2, v3, "TrustedContactsDataSync body is being created without a last data sync timestamp for custodian context: %@", v4, v5, v6, v7, 2u);
}

void sub_100180410()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Token keychain fetch failed - unable to unarchive token data with error: %@", v1, 0xCu);
}

void sub_100180484()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Token keychain update failed - unable to generate archived data from token with error: %@", v1, 0xCu);
}

void sub_1001804F8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Token keychain update failed with error: %@.", v2, v3, v4, v5, v6);
}

void sub_100180560(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001805D0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100180640()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AKTokenManager keychainDescriptorService:%@", v2, v3, v4, v5, v6);
}

void sub_1001806A8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "AKUserInfoController finished fetchUserInfo after OS upgrade with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100180720(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) description];
  uint8_t v6 = [a2 description];
  int v7 = 138412546;
  uint64_t v8 = v5;
  __int16 v9 = 2112;
  int v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to update walrus web context %@ with error %@", (uint8_t *)&v7, 0x16u);
}

void sub_1001807E8(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Already sent AKCA event: %@", (uint8_t *)&v3, 0xCu);
}

void sub_100180864(uint64_t a1, NSObject *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2048;
  double v7 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Sending Report: %@ (time: %f)", (uint8_t *)&v4, 0x16u);
}

void sub_1001808EC(os_log_t log)
{
  int v1 = 136315394;
  uint64_t v2 = "-[AKProximityController dealloc]";
  __int16 v3 = 1024;
  int v4 = 43;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s (%d) called", (uint8_t *)&v1, 0x12u);
}

void sub_100180980(uint64_t a1)
{
  int v1 = [*(id *)(a1 + 32) engine];
  sub_10003EF24();
  sub_100039774((void *)&_mh_execute_header, v2, v3, "%@: Preparing proximity engine (%@)", v4, v5, v6, v7, v8);
}

void sub_100180A14(uint64_t a1)
{
  int v1 = [*(id *)(a1 + 32) engine];
  sub_10003EF24();
  sub_100039774((void *)&_mh_execute_header, v2, v3, "%@: Activating proximity engine (%@)", v4, v5, v6, v7, v8);
}

void sub_100180AA8(void *a1)
{
  int v1 = [a1 engine];
  sub_10003EF24();
  sub_100039774((void *)&_mh_execute_header, v2, v3, "%@: Invalidating proximity engine (%@)", v4, v5, v6, v7, v8);
}

void sub_100180B38()
{
  sub_100010824();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@: Failed to create engine timeout source", v1, 0xCu);
}

void sub_100180BAC(void *a1)
{
  [a1 timeout];
  sub_100039774((void *)&_mh_execute_header, v1, v2, "%@: Creating engine timeout source (%f s)", v3, v4, v5, v6, 2u);
}

void sub_100180C38()
{
  sub_100010824();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@: Encountered unexpected non-NULL engineTimeoutSource when attempting to schedule new timer", v1, 0xCu);
}

void sub_100180CAC()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "%@: Engine timeout source has been registered", v2, v3, v4, v5, v6);
}

void sub_100180D14()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "%@: Engine timeout source has been cancelled", v2, v3, v4, v5, v6);
}

void sub_100180D7C()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "%@: Engine timeout source event handler called", v2, v3, v4, v5, v6);
}

void sub_100180DE4()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "%@: Cancelling engine timeout source", v2, v3, v4, v5, v6);
}

void sub_100180E4C(uint64_t a1, void *a2, NSObject *a3)
{
  int v4 = 138412802;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  __int16 v8 = 2048;
  id v9 = [a2 state];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%@: Manager (%@) did update to state (%lu)", (uint8_t *)&v4, 0x20u);
}

void sub_100180F04()
{
  sub_10001DAD4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "%@: Manager (%@) reported that BLE is unsupported on this device", v1, 0x16u);
}

void sub_100180F7C()
{
  sub_10001DAD4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "%@: Manager (%@) reported that we are unauthorized to use BLE", v1, 0x16u);
}

void sub_100180FF4()
{
  sub_10001DAD4();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "%@: Proximity engine (%@) was activated");
}

void sub_10018105C()
{
  sub_10001DAD4();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "%@: Proximity engine (%@) was invalidated");
}

void sub_1001810C4()
{
  sub_10001DAD4();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "Session: %@ = %@");
}

void sub_10018112C()
{
  sub_1000409D4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "AuthorizationSessionManager - Client %@ lacks a bundle ID!", v1, 0xCu);
}

void sub_1001811A4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Created OSTransaction", v2, v3, v4, v5, v6);
}

void sub_1001811D8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Adding %@ to list of authenticating apps", v2, v3, v4, v5, v6);
}

void sub_100181240()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Authorization Session - Denying clearance for %@", v2, v3, v4, v5, v6);
}

void sub_1001812A8()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - should clear request: %@", v2, v3, v4, v5, v6);
}

void sub_100181328()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Removing %@ from authenticating list", v2, v3, v4, v5, v6);
}

void sub_100181390()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Nilled out OSTransaction", v2, v3, v4, v5, v6);
}

void sub_1001813C4()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Queued end authentication clearance block for %@", v2, v3, v4, v5, v6);
}

void sub_100181430()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Executing end authentication clearance block for %@", v2, v3, v4, v5, v6);
}

void sub_10018149C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Client bundle ID is nil.", v2, v3, v4, v5, v6);
}

void sub_1001814D0()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - No active request for %@", v2, v3, v4, v5, v6);
}

void sub_100181538()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Active request session timed out for %@", v2, v3, v4, v5, v6);
}

void sub_1001815A0()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - _continuationRequestIdentifier does not match the requestIdentifier", v2, v3, v4, v5, v6);
}

void sub_1001815D4()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "AuthorizationSessionManager - No active session for %@", v1, 0xCu);
}

void sub_100181648()
{
  sub_10001DAD4();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Setting user response %@\n for context - %@");
}

void sub_1001816B0()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "AuthorizationSessionManager - Getting user response for context - %@", v2, v3, v4, v5, v6);
}

uint64_t sub_100181718()
{
  return sub_100181740();
}

uint64_t sub_100181740()
{
  uint64_t v0 = abort_report_np();
  return sub_100181768(v0);
}

uint64_t sub_100181768()
{
  uint64_t v0 = abort_report_np();
  return sub_100181790(v0);
}

void sub_100181790()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Looing for Anisette data on IDS-paired device...", v1, 2u);
}

void sub_1001817D0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to obtain Anisette data from IDS-paired device: %@", v2, v3, v4, v5, v6);
}

void sub_100181838()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Paired device Anisette info: %@", v2, v3, v4, v5, v6);
}

void sub_1001818A0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error archiving request %@", v2, v3, v4, v5, v6);
}

void sub_100181908()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to obtain Attestation data from IDS-paired device: %@", v2, v3, v4, v5, v6);
}

void sub_100181970()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Proxied attestation fetch - %@", v2, v3, v4, v5, v6);
}

void sub_1001819D8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error deserializing attestation data: %@", v2, v3, v4, v5, v6);
}

void sub_100181A40()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_100181ABC()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_100181B38()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_100181BB4()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_100181C30(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a1];
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Preparing message with command %@...", v4, 0xCu);
}

void sub_100181CD0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "IDSService sendMessage method failed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100181D38()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Preparing reply to %@...", v2, v3, v4, v5, v6);
}

void sub_100181DA0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "IDSService sendMessage method failed to send reply. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100181E08()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "IDS callback did not provide a message identifier!", v2, v3, v4, v5, v6);
}

void sub_100181E3C()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Message with transport ID %@ could not be sent! %@", v2, 0x16u);
}

void sub_100181EC0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Incoming message lacks a valid AuthKit-assigned UUID. Replying to paired device will not be possible.", v2, v3, v4, v5, v6);
}

void sub_100181EF4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Incoming message lacks a valid command.", v2, v3, v4, v5, v6);
}

void sub_100181F28(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a1];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unknown command received %@!", v4, 0xCu);
}

void sub_100181FC8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error unarchiving request %@", v2, v3, v4, v5, v6);
}

void sub_100182030()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error while serializing attestation data %@", v2, v3, v4, v5, v6);
}

void sub_100182098()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Reply message lacks reply-to field.", v2, v3, v4, v5, v6);
}

void sub_1001820CC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to find pending completion block under ID: %@", v2, v3, v4, v5, v6);
}

void sub_100182134()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_1001821B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100182220()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_10018229C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to delete key: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100182314(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Trying to launch application with Scene Delegate", v1, 2u);
}

void sub_100182358(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = FBSOpenApplicationErrorCodeToString();
  v4[0] = 138412546;
  sub_100045C50();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to launch application: %@ with error: %@", (uint8_t *)v4, 0x16u);
}

void sub_1001823FC()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Context data is nil: %@", v1, 0xCu);
}

void sub_100182470()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Redirecting to AuthKitUIService, to present basic login UI with context: %@", v1, 0xCu);
}

void sub_1001824E4()
{
  v1[0] = 138412546;
  sub_100045C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unable to launch application: %@ with the error: %@", (uint8_t *)v1, 0x16u);
}

void sub_100182564()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Successfully launched process: %@", v1, 0xCu);
}

void sub_1001825D8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 presentationCompletion];
  id v4 = objc_retainBlock(v3);
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Call completion with authentication result with presentation completion: %@", v5, 0xCu);
}

void sub_100182680(id *a1)
{
  uint64_t v1 = [*a1 objectForKeyedSubscript:@"aps"];
  sub_100039748((void *)&_mh_execute_header, v2, v3, "alert parameters are not valid: %@", v4, v5, v6, v7, 2u);
}

void sub_100182714(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "AKPushMessage: Piggybacking requestor presenceSID was expected but not found (%@)", (uint8_t *)&v2, 0xCu);
}

void sub_10018278C(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 objectForKeyedSubscript:@"cmd"];
  int v4 = 138412546;
  CFStringRef v5 = @"cmd";
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid value for key %@ in push message: %@", (uint8_t *)&v4, 0x16u);
}

void sub_100182848()
{
  os_log_t v0 = +[NSNumber numberWithUnsignedInteger:0];
  sub_100039748((void *)&_mh_execute_header, v1, v2, "Push message has invalid command %@. Ignoring!", v3, v4, v5, v6, 2u);
}

void sub_1001828DC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Push message is missing a transaction ID. Ignoring!", v1, 2u);
}

void sub_100182920(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to fetch subscription info with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100182998(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = [v5 urlRequestProvider];
  int v7 = 138412802;
  __int16 v8 = v5;
  sub_100048BE8();
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@: Failed to build URL request using provider (%@) with error (%@)", (uint8_t *)&v7, 0x20u);
}

void sub_100182A50(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: Unable to reauthenticate with nil authenticationHandler", (uint8_t *)&v2, 0xCu);
}

void sub_100182AC8()
{
  sub_100048BFC();
  uint64_t v5 = v0;
  __int16 v6 = v1;
  uint64_t v7 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%@: Failed to execute URL request (%@) with 401 error (%@), will attempt to reauth and execute again", v4, 0x20u);
}

void sub_100182B50(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%@: Executing URL request (%@)", (uint8_t *)&v3, 0x16u);
}

void sub_100182BD8(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = [a1 additionalHeaders];
  int v7 = 138412802;
  __int16 v8 = a1;
  sub_100048BE8();
  uint64_t v9 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%@: Adding additional headers (%@) to URL request (%@)", (uint8_t *)&v7, 0x20u);
}

void sub_100182C88(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: Reauthenticate succeeded, attempting to execute URL request again", (uint8_t *)&v3, 0xCu);
}

void sub_100182D04()
{
  sub_100048BFC();
  uint64_t v3 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%@: Failed to reauthenticate with error (%@)", v2, 0x16u);
}

void sub_100182D84(void *a1)
{
  os_log_t v1 = [a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to save pcs auth context in keychain with error: %@", v4, v5, v6, v7, v8);
}

void sub_100182E08(void *a1)
{
  os_log_t v1 = [a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to update pcs auth context in keychain with error: %@", v4, v5, v6, v7, v8);
}

void sub_100182E8C(void *a1)
{
  os_log_t v1 = [a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to fetch pcs auth context from keychain with error: %@", v4, v5, v6, v7, v8);
}

void sub_100182F10(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Context expired and will be removed from keychain.", v1, 2u);
}

void sub_100182F54(void *a1)
{
  os_log_t v1 = [a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to unarchive data of class AKPCSAuthContext with error: %@", v4, v5, v6, v7, v8);
}

void sub_100182FD8(id *a1)
{
  os_log_t v1 = [*a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to archive data with error: %@", v4, v5, v6, v7, v8);
}

void sub_100183060(void *a1)
{
  os_log_t v1 = [a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to fetch keychain items with error: %@", v4, v5, v6, v7, v8);
}

void sub_1001830E4(void *a1)
{
  os_log_t v1 = [a1 description];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Failed to delete pcs credentials from keychain with error: %@", v4, v5, v6, v7, v8);
}

void sub_100183168()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_10018319C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No altDSID was provided.", v2, v3, v4, v5, v6);
}

void sub_1001831D0()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "No existing IDMS account for altDSID %@", v2, v3, v4, v5, v6);
}

void sub_100183238()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No DSID was provided.", v2, v3, v4, v5, v6);
}

void sub_10018326C()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "No existing IDMS account for DSID %@", v2, v3, v4, v5, v6);
}

void sub_1001832D4(NSObject *a1)
{
  uint64_t v2 = +[NSNumber numberWithInteger:0];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a1, v3, "Service type %@ is not valid.", v4);
}

void sub_100183370()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Exception caught: %@", v2, v3, v4, v5, v6);
}

void sub_1001833D8(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = +[NSNumber numberWithInteger:a1];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "Told to mark service %@ as not using account, but already not using!", v5);
}

void sub_100183474()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal/Private/Write access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_1001834A8()
{
  sub_1000654EC(__stack_chk_guard);
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to remove account %@. Error: %@");
}

void sub_100183510()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal/Private access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_100183544()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Fetching Device Info to get device restriction state", v2, v3, v4, v5, v6);
}

void sub_100183578()
{
  sub_1000654EC(__stack_chk_guard);
  int v2 = 141558274;
  uint64_t v3 = 1752392040;
  __int16 v4 = 2112;
  uint64_t v5 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to parse device info JSON for altDSID: %{mask.hash}@", (uint8_t *)&v2, 0x16u);
}

void sub_100183604(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100183674()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch device info with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001836DC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "fetchDeviceSafetyState set but AuthKit/DTO feature flag is not turned on", v2, v3, v4, v5, v6);
}

void sub_100183710()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch device list with error: %@", v2, v3, v4, v5, v6);
}

void sub_100183778()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "No devices found for context: %@", v2, v3, v4, v5, v6);
}

void sub_1001837E0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch devices with error: %@", v2, v3, v4, v5, v6);
}

void sub_100183848()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Device list cache updated with error - %@", v2, v3, v4, v5, v6);
}

void sub_1001838B0()
{
  sub_100065504();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x12u);
}

void sub_100183934()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Owner access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_100183968()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Owner/Internal access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_10018399C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "The provided URL response is not formatted as a final auth response.", v2, v3, v4, v5, v6);
}

void sub_1001839D0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No Apple ID was provided.", v2, v3, v4, v5, v6);
}

void sub_100183A04(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 username];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "No existing IDMS account for Apple ID: %@", v5);
}

void sub_100183A94()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Write access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_100183AC8()
{
  sub_1000654F8(__stack_chk_guard);
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Unable to update IDMS account %@. Error: %@");
}

void sub_100183B30()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Successfully updated IDMS account %@", v2, v3, v4, v5, v6);
}

void sub_100183B98()
{
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "AuthKit master token is missing! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100183C08()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit account altDSID is missing.", v2, v3, v4, v5, v6);
}

void sub_100183C3C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to get master token string value!", v2, v3, v4, v5, v6);
}

void sub_100183C70(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100183CE8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No body parameters in code validation response!", v2, v3, v4, v5, v6);
}

void sub_100183D1C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Validate-code request failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100183D84()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "A vetting token was not provided.", v2, v3, v4, v5, v6);
}

void sub_100183DB8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "altDSID was not provided.", v2, v3, v4, v5, v6);
}

void sub_100183DEC()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unusual ACAccount with nil username encountered: %@", v2, v3, v4, v5, v6);
}

void sub_100183E54()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Seems like our master token has expired.", v2, v3, v4, v5, v6);
}

void sub_100183E88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100183F00()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "An error occurred validating the code. Server message: %@", v2, v3, v4, v5, v6);
}

void sub_100183F68()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Request to validate vetting token failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100183FD0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "altDSID required but missing!", v2, v3, v4, v5, v6);
}

void sub_100184004()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch eligibility with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018406C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "No IdMS account found for altDSID: %@", v2, v3, v4, v5, v6);
}

void sub_1001840D4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "No IDMS account for Apple ID: %@", v2, v3, v4, v5, v6);
}

void sub_10018413C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal write access entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_100184170()
{
  sub_1000654EC(__stack_chk_guard);
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Sign out failed for account %@ with error: %@");
}

void sub_1001841D8()
{
  sub_100065528();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Unable to accept authentication request (%@) from unentitled client: %@");
}

void sub_100184248()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Overriding full UI context into silent preferred auth, silent is not supported...", v2, v3, v4, v5, v6);
}

void sub_10018427C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Overriding limited UI context into silent preferred auth", v2, v3, v4, v5, v6);
}

void sub_1001842B0()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Device Session ID: AuthKit account exists and is consented to telemetry collection, updating context... %@", v2, v3, v4, v5, v6);
}

void sub_100184318()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Silent auth did not provide results. Interactive auth not allowed. Stopping right now.", v2, v3, v4, v5, v6);
}

void sub_10018434C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "New proximity authentication detected, setting up proximity result analytics", v2, v3, v4, v5, v6);
}

void sub_100184380()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting account from context during auth: %@", v2, v3, v4, v5, v6);
}

void sub_1001843E8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Updating analytics with authentication results and broadcasting", v2, v3, v4, v5, v6);
}

void sub_10018441C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Client doesn't have sufficient permission to perform password reset", v2, v3, v4, v5, v6);
}

void sub_100184450()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Forgot password native takeover feature is not enable, so not executing the request", v2, v3, v4, v5, v6);
}

void sub_100184484()
{
  sub_100065514();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "We don't have a CK for %@ (Error: %@), so that's that.");
}

void sub_1001844F0()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Context did not provide a username and/or password or interaction requested.", v2, v3, v4, v5, v6);
}

void sub_100184524()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Interaction requested but network is unreachable, bailing...", v2, v3, v4, v5, v6);
}

void sub_100184558()
{
  sub_100065528();
  sub_100065504();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x20u);
}

void sub_1001845D8()
{
  sub_1000654D0();
  uint64_t v3 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%@: Attempting to perform interactive FedAuth with context (%@) for client (%@)", v2, 0x20u);
}

void sub_100184658()
{
  sub_1000654EC(__stack_chk_guard);
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "%@: Failed to obtain full UI capability for interactive FedAuth with error (%@)");
}

void sub_1001846C0()
{
  sub_1000654D0();
  uint64_t v3 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%@: Failed to perform interactive FedAuth for context (%@) with error (%@)", v2, 0x20u);
}

void sub_100184740(void *a1, void *a2)
{
  uint64_t v4 = [a1 username];
  uint64_t v5 = [a2 username];
  uint8_t v6 = [a1 _proxiedAppName];
  sub_1000654B0();
  sub_10006553C((void *)&_mh_execute_header, v7, v8, "Context provided username is different %@(context) vs %@(account) for client %@. Trusting AuthKit account username.", v9, v10, v11, v12, v13);
}

void sub_1001847FC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "No altDSID found on context. Checking DSID..", v2, v3, v4, v5, v6);
}

void sub_100184830()
{
  sub_1000409D4();
  __int16 v2 = 1024;
  int v3 = 1958;
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s (%d) called", v1, 0x12u);
}

void sub_1001848C0(uint64_t a1, NSObject *a2)
{
  int v3 = [*(id *)(a1 + 32) altDSID];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "No account names came back from IDMS for altDSID: %@", v5);
}

void sub_100184950()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Something bad happened! %@", v2, v3, v4, v5, v6);
}

void sub_1001849B8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to dismiss UI on client side! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100184A20()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to dismiss UI on client side even though auth is complete! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100184A88()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Passwordless auth failed: %@", v2, v3, v4, v5, v6);
}

void sub_100184AF0(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 authContext];
  uint64_t v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v4 serviceType]);
  uint8_t v6 = [a1 client];
  uint64_t v7 = [v6 name];
  uint64_t v8 = [a1 authContext];
  uint64_t v9 = [v8 _proxiedAppName];
  int v10 = 138412802;
  uint64_t v11 = v5;
  __int16 v12 = 2112;
  uint8_t v13 = v7;
  __int16 v14 = 2112;
  uid_t v15 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SRP auth attempted with an invalid context: %@ - %@ - %@", (uint8_t *)&v10, 0x20u);
}

void sub_100184C24()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Secondary action not supported", v2, v3, v4, v5, v6);
}

void sub_100184C58()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Appending underlying prompt reason as server UI (secondary action).", v2, v3, v4, v5, v6);
}

void sub_100184C8C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No username provided, this can't be good...", v2, v3, v4, v5, v6);
}

void sub_100184CC0()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Using client provided Apple ID.", v2, v3, v4, v5, v6);
}

void sub_100184CF4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Using server provided Apple ID.", v2, v3, v4, v5, v6);
}

void sub_100184D28()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Updating auth results for context: %@", v2, v3, v4, v5, v6);
}

void sub_100184D90()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to reach client to call shouldContinueWithAuthenticationResults", v2, v3, v4, v5, v6);
}

void sub_100184DC4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Force-failing auth, because client says to.", v2, v3, v4, v5, v6);
}

void sub_100184DF8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to check in with IDMS! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100184E60()
{
  sub_1000654EC(__stack_chk_guard);
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Fetching tokens for service IDs %@ failed. Error: %@");
}

void sub_100184EC8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "We have no token for these services: %@. This can't be good.", v2, v3, v4, v5, v6);
}

void sub_100184F30()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Cannot perform secondary auth action for non-interactive context.", v2, v3, v4, v5, v6);
}

void sub_100184F64()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Server response indicates fido auth is required.", v2, v3, v4, v5, v6);
}

void sub_100184F98()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Successfully obtained second-factor code: %@.", v2, v3, v4, v5, v6);
}

void sub_100185000()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to get second-factor. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185068()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Asking client to show alert for error: %@", v2, v3, v4, v5, v6);
}

void sub_1001850D0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unsupported prompt type encountered: %d", (uint8_t *)v3, 8u);
}

void sub_10018514C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 secondaryActionURLKey];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "There was no URL in the bag for key: %@", v5);
}

void sub_1001851D8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Request response is not of expected class! %@", v2, v3, v4, v5, v6);
}

void sub_100185240()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error starting fido auth flow: %@", v2, v3, v4, v5, v6);
}

void sub_1001852A8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Received Fido start auth with context: %@", v2, v3, v4, v5, v6);
}

void sub_100185310()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error presenting fido auth prompt: %@", v2, v3, v4, v5, v6);
}

void sub_100185378()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "There was no URL in the bag for key: %@", v2, v3, v4, v5, v6);
}

void sub_1001853E0()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Server says to show UI at URL key: %@", v2, v3, v4, v5, v6);
}

void sub_100185448()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "No master token available for silent auth on account %@.", v2, v3, v4, v5, v6);
}

void sub_1001854B0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) serviceIdentifiers];
  sub_100065514();
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Fetching tokens for service IDs %@ failed! Error: %@", v6, 0x16u);
}

void sub_100185558()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Asked to fetch service token without a serviceID!", v2, v3, v4, v5, v6);
}

void sub_10018558C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Asked to fetch service token without any master token data!", v2, v3, v4, v5, v6);
}

void sub_1001855C0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to create AppleIDAuthSupportTokenRef from exteral form. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185628()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "We failed to fetch basic auth URL, failing SRP... %@", v2, v3, v4, v5, v6);
}

void sub_100185690()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "AppleIDAuthSupportCopyAppTokensOptions failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001856F8(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 name];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "%@ does not have entitlements to persistRecoveryKey", v5);
}

void sub_100185788()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "iForgot reported success, but no username came back to akd.", v2, v3, v4, v5, v6);
}

void sub_1001857BC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "iForgot reported success, but no password came back to akd.", v2, v3, v4, v5, v6);
}

void sub_1001857F0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "iForgot flow failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185858()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There was no iForgot URL in the bag!", v2, v3, v4, v5, v6);
}

void sub_10018588C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Starting iForgot flow...", v2, v3, v4, v5, v6);
}

void sub_1001858C0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to find matching account for context! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185928()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There was no repair URL in the bag!", v2, v3, v4, v5, v6);
}

void sub_10018595C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Repair flow reported success, but no auth response came back to akd.", v2, v3, v4, v5, v6);
}

void sub_100185990()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "New Apple ID flow reported success, but no username came back to akd.", v2, v3, v4, v5, v6);
}

void sub_1001859C4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "New Apple ID flow reported success, but no password came back to akd.", v2, v3, v4, v5, v6);
}

void sub_1001859F8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "New Apple ID flow reported success, but no auth response came back to akd.", v2, v3, v4, v5, v6);
}

void sub_100185A2C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "New Apple ID flow failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185A94()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There was no creation URL in the bag!", v2, v3, v4, v5, v6);
}

void sub_100185AC8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Starting Child Account creation flow...", v2, v3, v4, v5, v6);
}

void sub_100185AFC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Starting Apple ID creation flow...", v2, v3, v4, v5, v6);
}

void sub_100185B30()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Change password flow reported success, but no username came back to akd.", v2, v3, v4, v5, v6);
}

void sub_100185B64()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Change password flow reported success, but no password came back to akd.", v2, v3, v4, v5, v6);
}

void sub_100185B98()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Change password flow failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185C00()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Change password flow started without account!", v2, v3, v4, v5, v6);
}

void sub_100185C34()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Could not find URL for changePassword!", v2, v3, v4, v5, v6);
}

void sub_100185C68()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Starting password change flow...", v2, v3, v4, v5, v6);
}

void sub_100185C9C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Password change flow authentication failed with error, but we'll try anyways: %@", v2, v3, v4, v5, v6);
}

void sub_100185D04()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to dismiss second factor UI %@", v2, v3, v4, v5, v6);
}

void sub_100185D6C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to dismiss client-side second-factor UI. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100185DD4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Server UI came back with error: %@", v2, v3, v4, v5, v6);
}

void sub_100185E3C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Failed to fetch device list from server. Missing entitlement.", v2, v3, v4, v5, v6);
}

void sub_100185E70()
{
  sub_100010824();
  sub_100065504();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x16u);
}

void sub_100185EEC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Delete device list cache is not supported.", v2, v3, v4, v5, v6);
}

void sub_100185F20()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Delete device list cache completed successfully.", v2, v3, v4, v5, v6);
}

void sub_100185F54()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Delete device list cache failed with error - %{private}@.", v2, v3, v4, v5, v6);
}

void sub_100185FBC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Client is not allow listed to access birthday!", v2, v3, v4, v5, v6);
}

void sub_100185FF0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Internal access and birthday entitlement required but missing!", v2, v3, v4, v5, v6);
}

void sub_100186024()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit account altDSID is missing.", v2, v3, v4, v5, v6);
}

void sub_100186058(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 domain];
  int v5 = 138543874;
  uint8_t v6 = v4;
  __int16 v7 = 2048;
  id v8 = [a1 code];
  __int16 v9 = 2112;
  int v10 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Authorization Endorser discovery client failed to activate. {errorDomain=%{public}@, errorCode=%ld, error=%@}", (uint8_t *)&v5, 0x20u);
}

void sub_10018611C()
{
}

void sub_100186148()
{
}

void sub_100186174()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "%@: Proximity is being enforced and was not detected by accepting device (escrow fallback is expected)", v2, v3, v4, v5, v6);
}

void sub_1001861DC()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Duplex session creation failure", v1, 2u);
}

void sub_10018621C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Requesting session processing failure: %@", v2, v3, v4, v5, v6);
}

void sub_100186284(void *a1, id *a2)
{
  uint64_t v3 = [a1 requestSession];
  uint64_t v4 = [*a2 payload];
  uint64_t v5 = [v4 clientInfo];
  sub_10006A194();
  sub_100039774((void *)&_mh_execute_header, v6, v7, "Did process message using session: %@ - %@", v8, v9, v10, v11, v12);
}

void sub_100186338(void *a1, void *a2)
{
  uint64_t v3 = [a1 requestSession];
  uint64_t v4 = [a2 clientInfo];
  sub_10006A194();
  sub_100039774((void *)&_mh_execute_header, v5, v6, "Will process message using session: %@ - %@", v7, v8, v9, v10, v11);
}

void sub_1001863DC()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Attempting to determine whether we should continue.", v1, 2u);
}

void sub_10018641C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 initialAuthResponse];
  uint64_t v4 = [v3 dsid];
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Initializing requesting session: %@", v5, 0xCu);
}

void sub_1001864C8()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Validating Code: %@", v1, 0xCu);
}

void sub_10018653C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Secret collection failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001865A4(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 debugDescription];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Didn't get a code with error: %@", v4, 0xCu);
}

void sub_10018663C()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%@: Unable to start proximity advertiser with nil presenceSID from pushPayload (%@)", v2, 0x16u);
}

void sub_1001866C0(void *a1, uint64_t a2, NSObject *a3)
{
  uint8_t v6 = [a1 proximityController];
  int v7 = 138412802;
  uint64_t v8 = a1;
  __int16 v9 = 2048;
  uint64_t v10 = a2;
  __int16 v11 = 2112;
  uint8_t v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%@: Determined proximity advertiser does not need to be stopped (circleStep: %lu, proximityController: %@)", (uint8_t *)&v7, 0x20u);
}

void sub_100186780()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "AKPiggybackRequestingController: Proximity controller has been invalidated", v1, 2u);
}

void sub_1001867C0()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "AKPiggybackRequestingController: Proximity controller is nil.", v1, 2u);
}

void sub_100186800(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Alert handle (%@) interrupted with error: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100186888(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error launching Preferences: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100186900(void *a1, NSObject *a2)
{
  uint64_t v3 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a1 serviceType]);
  int v4 = 138412290;
  __int16 v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid Apple ID service type %@. Falling back to iCloud.", (uint8_t *)&v4, 0xCu);
}

void sub_1001869AC(void *a1)
{
  os_log_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "No account found with given altDSID: %@, failing private email lookup", v4, v5, v6, v7, v8);
}

void sub_100186A30(void *a1)
{
  os_log_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "No valid account fount for altDSID: %@, failing hme fetch", v4, v5, v6, v7, v8);
}

void sub_100186AB4(void *a1)
{
  os_log_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Insufficient entitlement for altDSID: %@, failing hme context fetch", v4, v5, v6, v7, v8);
}

void sub_100186B38(void *a1)
{
  os_log_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "No valid account found for altDSID: %@, aborting register private email", v4, v5, v6, v7, v8);
}

void sub_100186BBC(void *a1)
{
  os_log_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Account not eligible to perform register Private Email - altDSID: %@", v4, v5, v6, v7, v8);
}

void sub_100186C40(void *a1)
{
  os_log_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Insufficient entitlement for altDSID: %@, aborting register private email", v4, v5, v6, v7, v8);
}

void sub_100186CC4()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "No altDSID in context: %@, failing hme context fetch", v2);
}

void sub_100186D30()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "No valid account found for context: %@, failing hme context fetch", v2);
}

void sub_100186D9C()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Updated context is nil for: %@, failing hme context fetch", v2);
}

void sub_100186E08()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Insufficient entitlement for context: %@, failing hme context fetch", v2);
}

void sub_100186E74()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "No account found with given altDSID: %@, failing private email lookup", v2);
}

void sub_100186EE0()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to fetch private emails for altDSID %@, error - %@");
}

void sub_100186F48()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Insufficient entitlement for altDSID: %@, aborting listAllPrivateEmails", v2);
}

void sub_100186FB4(os_log_t log)
{
  int v1 = 136315394;
  uint64_t v2 = "-[AKPrivateEmailDaemonService presentPrivateEmailUIForContext:completion:]";
  __int16 v3 = 1024;
  int v4 = 260;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s (%d) called", (uint8_t *)&v1, 0x12u);
}

void sub_100187048()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Unable to call back to client! Error: %@", v2);
}

void sub_1001870B4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Owner/Private access entitlement for removePrivateEmailKey SUCCESS", v2, v3, v4, v5, v6);
}

void sub_1001870E8()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Owner/Private access entitlement for removePrivateEmailKey error %@", v2);
}

void sub_100187154()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Owner/Private access entitlement present for removePrivateEmailKey!", v2, v3, v4, v5, v6);
}

void sub_100187188()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Owner/Private access entitlement required but missing for removePrivateEmailKey!", v2, v3, v4, v5, v6);
}

void sub_1001871BC(void *a1)
{
  uint64_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "No valid account found for altDSID: %@, aborting fetchSiwAHme", v4, v5, v6, v7, v8);
}

void sub_100187240()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to fetchSiwAHme. The URL is missing from the URL bag", v2, v3, v4, v5, v6);
}

void sub_100187274(void *a1)
{
  uint64_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Account not eligible to perform fetchSiwAHme - altDSID: %@", v4, v5, v6, v7, v8);
}

void sub_1001872F8(void *a1)
{
  uint64_t v1 = [a1 altDSID];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v2, v3, "Insufficient entitlement for altDSID: %@, aborting fetchSiwAHme", v4, v5, v6, v7, v8);
}

void sub_10018737C()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Performing Fetch SIWA HME", v1, 2u);
}

void sub_1001873BC()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to store fetched email (%@) error:%@");
}

void sub_100187424(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Not updating analytics event with nil account", v1, 2u);
}

void sub_100187468(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Received nil flowId in AKAppleIDAuthenticationContext", v1, 2u);
}

void sub_1001874AC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Error getting account from context during auth for telemetry: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100187524(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to get Anisette data for %@! Error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1001875B0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Denied access to Anisette data to non-internal client.", v2, v3, v4, v5, v6);
}

void sub_1001875E4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Denied access to set time adjustment to non-internal client.", v2, v3, v4, v5, v6);
}

void sub_100187618()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Denied access to reset anisette data to non-internal client.", v2, v3, v4, v5, v6);
}

void sub_10018764C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 reportData];
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Finish Aurora reporting for BAA attestation response. Reportdata - %@", v4, 0xCu);
}

void sub_1001876E0()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Attestation reporting is not supported for non-prod environments", v1, 2u);
}

void sub_100187720()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Denied access to post analytics data to non-internal client.", v2, v3, v4, v5, v6);
}

void sub_100187754()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid target %@ for fetching Anisette data.", v2, v3, v4, v5, v6);
}

void sub_1001877BC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid target %@ for fetching legacy Anisette data.", v2, v3, v4, v5, v6);
}

void sub_100187824()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid target %@ for provisioning Anisette data.", v2, v3, v4, v5, v6);
}

void sub_10018788C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Client lacks entitlement to provision Anisette!", v2, v3, v4, v5, v6);
}

void sub_1001878C0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid target %@ for resyncing Anisette data.", v2, v3, v4, v5, v6);
}

void sub_100187928()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Client lacks entitlement to resync Anisette info!", v2, v3, v4, v5, v6);
}

void sub_10018795C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid target %@ for erasing Anisette data.", v2, v3, v4, v5, v6);
}

void sub_1001879C4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Client lacks entitlement to erase Anisette provisioning!", v2, v3, v4, v5, v6);
}

void sub_1001879F8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Denied access to Signing data to non-entitled client.", v2, v3, v4, v5, v6);
}

void sub_100187A2C(uint64_t a1, NSObject *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[AKUserInfoController _fetchUserInformationWithContext:client:dataCenter:completion:]_block_invoke";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: Failed to fetch info with error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_100187AB8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Couldn't upgrade the stored protocol version - %@", v2, v3, v4, v5, v6);
}

void sub_100187B20()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "failed to clear DB on protocol change - %@", v2, v3, v4, v5, v6);
}

void sub_100187B88()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Not updating, since primary account does not match", v2, v3, v4, v5, v6);
}

void sub_100187BBC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Could not create service controller", v2, v3, v4, v5, v6);
}

void sub_100187BF0()
{
  sub_100010824();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "Starting to sync private emails list for %@\n%@");
}

void sub_100187C64()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to update from push notification, error=%@", v2, v3, v4, v5, v6);
}

void sub_100187CCC()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Update currentVersion=[%@]", v2, v3, v4, v5, v6);
}

void sub_100187D34()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Update passedVersion=[%@]", v2, v3, v4, v5, v6);
}

void sub_100187D9C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Sending Info Change Notification", v2, v3, v4, v5, v6);
}

void sub_100187DD0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Encountered error while revoking authorization database: %@", v2, v3, v4, v5, v6);
}

void sub_100187E38(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10003EF3C((void *)&_mh_execute_header, a2, a3, "We got an appListVersion with the user info new version: %@ \nold version: %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_100187EB4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "New beneficiaryInfo is different than the existing data. Calling AKBeneficiaryUpdater...", v2, v3, v4, v5, v6);
}

void sub_100187EE8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to fetch authorized application list with error: %@", v2, v3, v4, v5, v6);
}

void sub_100187F50()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to refresh because Nil altDSID", v2, v3, v4, v5, v6);
}

void sub_100187F84()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to refresh because account name list is nil/empty.", v2, v3, v4, v5, v6);
}

void sub_100187FB8()
{
  sub_1000448D4();
  int v2 = 1107;
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s (%d) called", v1, 0x12u);
}

void sub_100188040()
{
  sub_1000448D4();
  int v2 = 1144;
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s (%d) called", v1, 0x12u);
}

void sub_1001880C8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Mako account has reachable email addresses", v2, v3, v4, v5, v6);
}

void sub_1001880FC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing primary email verification state.", v2, v3, v4, v5, v6);
}

void sub_100188130()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Application is requesting email for this authorization fetching email properties from account", v2, v3, v4, v5, v6);
}

void sub_100188164()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Authorization requesting user information for request: %@", v2, v3, v4, v5, v6);
}

void sub_1001881CC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Refreshed device list successfully.", v2, v3, v4, v5, v6);
}

void sub_100188200()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to refresh device list with error: %{private}@", v2, v3, v4, v5, v6);
}

void sub_100188268()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Attempting to update birthday", v2, v3, v4, v5, v6);
}

void sub_10018829C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001882D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018830C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100188344(uint64_t a1, NSObject *a2)
{
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to refresh device list with error: %{private}@", (uint8_t *)&v2, 0xCu);
}

void sub_1001883BC(os_log_t log)
{
  int v1 = 136315394;
  int v2 = "-[AKProximityPiggybackEngine dealloc]";
  __int16 v3 = 1024;
  int v4 = 36;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s (%d) called", (uint8_t *)&v1, 0x12u);
}

void sub_100188450(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%@: Discovered peripheral (%@) with nil serviceID", (uint8_t *)&v3, 0x16u);
}

void sub_1001884D8(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  int v4 = 138412546;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Got unexpected combination, mappings=%@, hmeListVersion=%@", (uint8_t *)&v4, 0x16u);
}

void sub_100188564(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018859C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to save wrapped key in keychain with error:  %@", v2, v3, v4, v5, v6);
}

void sub_100188604(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018863C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to add wrapped keys to keychain: %@", v2, v3, v4, v5, v6);
}

void sub_1001886A4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to delete Keychain item: %@", v2, v3, v4, v5, v6);
}

void sub_10018870C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100188744(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4 = [a1 objectForKeyedSubscript:a2];
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Removing wrappedKey from beneficiaryInfo and adding it to beneficiaryUUIDWrappedKeyDictionary. For UUID: %@", v5, 0xCu);
}

uint64_t sub_1001887DC()
{
  uint64_t v0 = abort_report_np();
  return sub_100188804(v0);
}

uint64_t sub_100188804()
{
  uint64_t v0 = abort_report_np();
  return sub_10018882C(v0);
}

void sub_10018882C()
{
  uint64_t v0 = abort_report_np();
  sub_100188854(v0);
}

void sub_100188854(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Detected that we must sync with server", v1, 2u);
}

void sub_100188898(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to unpack private emails list. Got:%@", (uint8_t *)&v2, 0xCu);
}

void sub_100188910(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to clear Hide My Email database. Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100188988(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Deleting Hide My Email database", v1, 2u);
}

void sub_1001889CC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to fetch private emails list with error: %@\n%@", (uint8_t *)&v3, 0x16u);
}

void sub_100188A54()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Calling GS endpoint to start the Fido auth.", v2, v3, v4, v5, v6);
}

void sub_100188A88()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "We could not find an account, and the token is missing. Sending the requestas-is and hoping for the best.", v1, 2u);
}

void sub_100188AC8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error parsing fido auth parameters: %@", v2, v3, v4, v5, v6);
}

void sub_100188B30()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Creating Fido auth context with: %@", v1, 0xCu);
}

void sub_100188BA4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Parsing Fido auth context.", v2, v3, v4, v5, v6);
}

void sub_100188BD8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Calling GS endpoint to finish the Fido auth.", v2, v3, v4, v5, v6);
}

void sub_100188C0C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Creating server response from finish fido response.", v2, v3, v4, v5, v6);
}

void sub_100188C40()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error finishing fido auth flow: %@", v2, v3, v4, v5, v6);
}

void sub_100188CA8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Authorization List version matches the local authorization list version, skipping update", v1, 2u);
}

void sub_100188CEC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot store an authorization credential with nil teamID/bundleID", v1, 2u);
}

void sub_100188D30(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Attempted to store incorrect authorization type", v1, 2u);
}

void sub_100188D74(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 40);
  int v4 = 138412546;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Deleting application with clientID: %@ failed with error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_100188E04()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Revoking all applications failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_100188E6C()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch authorized all teams and applications with error: %@", v2, v3, v4, v5, v6);
}

void sub_100188ED4()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Fetching AMS app metadata failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_100188F3C()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Storing developer team failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_100188FA4()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Storing consented applications failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018900C(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  uint64_t v5 = *(void *)(*(void *)a2 + 40);
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = v5;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Storing AMS app metadata for bundle: %@ failed with error: %@", buf, 0x16u);
}

void sub_10018907C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 bundleId];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Storing data for bundle: %@", (uint8_t *)&v4, 0xCu);
}

void sub_100189118()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to revoke applications with error: %@", v2, v3, v4, v5, v6);
}

void sub_100189180()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch applications to be revoked with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001891E8()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch applications with error: %@, continuing with fetched applications if any...", v2, v3, v4, v5, v6);
}

void sub_100189250()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch authorized client IDs with error: %@, continuing with the fetched clients if any...", v2, v3, v4, v5, v6);
}

void sub_1001892B8()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Encountered error setting app list version: %@", v2, v3, v4, v5, v6);
}

void sub_100189320()
{
  sub_10007E4DC(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to update database version with error: %@", v2, v3, v4, v5, v6);
}

void sub_100189388(uint64_t a1, NSObject *a2)
{
  objc_opt_class();
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid configurationInfo identifiers type provided: %@", v3, 0xCu);
}

void sub_100189410()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing parameter altDSID!", v2, v3, v4, v5, v6);
}

void sub_100189444()
{
  v1[0] = 138412546;
  sub_100045C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Invalid key %@ in server response: %@", (uint8_t *)v1, 0x16u);
}

void sub_1001894C4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No body parameters in fetch configuration info response!", v2, v3, v4, v5, v6);
}

void sub_1001894F8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch configuration info with error: %@", v2, v3, v4, v5, v6);
}

void sub_100189560()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to encode configuration info!", v2, v3, v4, v5, v6);
}

void sub_100189594()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to serialize configuration info: %@", v2, v3, v4, v5, v6);
}

void sub_1001895FC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Invalid configurationInfo identifier provided: %@", v2, v3, v4, v5, v6);
}

void sub_100189664()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to set configuration info with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001896CC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Can't save configuration into a nil account", v2, v3, v4, v5, v6);
}

void sub_100189700()
{
  v1[0] = 138412546;
  sub_100045C50();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Invalid key %@ in server response: %@", (uint8_t *)v1, 0x16u);
}

void sub_100189780(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001897EC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100189858(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Server requested to switch URL but no URLSwitch data is available, Ignoring URL switch", v1, 2u);
}

void sub_10018989C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100189908(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100189940(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100189978(void *a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [a1 clientID];
  uint8_t v6 = [a2 teamID];
  int v7 = 138412546;
  uint8_t v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Transfer state stored in database with clientID: %@, teamID: %@", (uint8_t *)&v7, 0x16u);
}

void sub_100189A3C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100189A74(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Encountered error while fetching developer team: %@", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_100189AEC()
{
  uint64_t v0 = abort_report_np();
  return sub_100189B14(v0);
}

void sub_100189B14()
{
}

void sub_100189B3C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to create CFUserNotificationRef!", v2, v3, v4, v5, v6);
}

void sub_100189B70()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to create login code notification!", v2, v3, v4, v5, v6);
}

void sub_100189BA4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Attempted to show push message CFUserNotification on HomePod, AuthKit prompts aren't made for this!", v2, v3, v4, v5, v6);
}

void sub_100189BD8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Beginning reverse geocode...", v2, v3, v4, v5, v6);
}

void sub_100189C0C()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "locationName = \"%@\"", v1, 0xCu);
}

void sub_100189C80()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Reverse geocode results: (Locality: %@ - Administrative Area: %@)", v2, 0x16u);
}

void sub_100189D04()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Reverse geocode callback called", v2, v3, v4, v5, v6);
}

void sub_100189D38(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [*(id *)(*(void *)a1 + 8) messageId];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Attempted to tear down notification, but it was not found for identifier... %@", v4, 0xCu);
}

void sub_100189DD4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Suppressing password change prompt due to missing PRK", v2, v3, v4, v5, v6);
}

void sub_100189E08()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to create password change notification!", v2, v3, v4, v5, v6);
}

void sub_100189E3C()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Got authentication results back based on the prompt for notification: %@", v1, 0xCu);
}

void sub_100189EB0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Arming device for PCS auth is not supported for non primary account.", v1, 2u);
}

void sub_100189EF4(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) description];
  uint8_t v6 = [a2 description];
  int v7 = 138412546;
  uint8_t v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to arm device with context %@ with error %@", (uint8_t *)&v7, 0x16u);
}

void sub_100189FBC(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 context];
  uint64_t v4 = [v3 altDSID];
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not find heartbeat token for account %@", (uint8_t *)&v5, 0xCu);
}

void sub_10018A06C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Attaching continuation-token presence header", v1, 2u);
}

void sub_10018A0B0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Failed to attach continuation-token presence header due to account fetch error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018A128(void *a1)
{
  int v2 = [a1 domain];
  [a1 code];
  sub_10008B34C();
  sub_10008B370((void *)&_mh_execute_header, v3, v4, "Authorization Endorser client failed to activate. {errorDomain=%{public}@, errorCode=%ld, error=%@}", v5, v6, v7, v8, v9);
}

void sub_10018A1C0(void *a1)
{
  int v2 = [a1 domain];
  [a1 code];
  sub_10008B34C();
  sub_10008B370((void *)&_mh_execute_header, v3, v4, "StartAuthorization failed. {errorDomain=%{public}@, errorCode=%ld, error=%@}", v5, v6, v7, v8, v9);
}

void sub_10018A258(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to unarchive the credential request context. {error=%@, data=%@}", (uint8_t *)&v3, 0x16u);
}

void sub_10018A2E0(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 _requirePassword];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "_requirePassword property received as %i, setting to NO", (uint8_t *)v3, 8u);
}

void sub_10018A370(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to archive AKAuthorization object, failing authorization. {archiveError=%@}", (uint8_t *)&v2, 0xCu);
}

void sub_10018A3E8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error object won't be sent, failed to archive. {archiveError=%@}", (uint8_t *)&v2, 0xCu);
}

void sub_10018A460(void *a1)
{
  int v2 = [a1 domain];
  [a1 code];
  sub_10008B370((void *)&_mh_execute_header, v3, v4, "Rapport endorser authorization failed. {errorDomain=%{public}@, errorCode=%ld, error=%@}", v5, v6, v7, v8, 2u);
}

void sub_10018A518(void *a1, void *a2, NSObject *a3)
{
  uint64_t v6 = [a1 domain];
  id v7 = [a1 code];
  uint64_t v8 = [a2 endorseeDevice];
  uint8_t v9 = [a2 endorseeDevice];
  int v10 = 138544386;
  __int16 v11 = v6;
  __int16 v12 = 2048;
  id v13 = v7;
  __int16 v14 = 2112;
  uid_t v15 = a1;
  __int16 v16 = 2112;
  int v17 = v8;
  __int16 v18 = 2048;
  uint64_t v19 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error sending DidStartServerAuthorization Rapport event. {errorDomain=%{public}@, errorCode=%ld, error=%@, device=%@, device_ptr=%p}", (uint8_t *)&v10, 0x34u);
}

void sub_10018A624()
{
  sub_10001DAD4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to fetch UI capable context due to nil UI client (%@) or UI context (%@)", v1, 0x16u);
}

void sub_10018A69C()
{
  sub_10001DAD4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Successfully fetched UI capable context (%@) for UI client (%@)", v1, 0x16u);
}

void sub_10018A714()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch UI capable context with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018A77C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to call back to client! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018A7E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018A854()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Could not dismiss UI! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018A8BC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Request to show server UI came back with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018A924()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to tear down server UI! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018A98C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Native recovery failed! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018A9F4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to tear down native recovery UI! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018AA5C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Attempted to show UI on HomePod, AuthKit does not support HomePod UI!", v2, v3, v4, v5, v6);
}

void sub_10018AA90()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Context specifies that auth must be forced silent: %@", v2, v3, v4, v5, v6);
}

void sub_10018AAF8()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Allowing BG process %@ to perform proxied FG auth.", v1, 0xCu);
}

void sub_10018AB6C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Context %@ has AKAppleIDAuthenticationUICapabilityUnknown.", v2, v3, v4, v5, v6);
}

void sub_10018ABD4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "In Sync Bubble. UI is not supported.", v2, v3, v4, v5, v6);
}

void sub_10018AC08()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Client %@ is being permitted to run FG auth, because iCloud settings are inaccessible.", v2, v3, v4, v5, v6);
}

void sub_10018AC70()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Client %@ is not permitted to use _isProxyingForApp. Falling back to BG behavior.", v2, v3, v4, v5, v6);
}

void sub_10018ACD8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "In Buddy. UI is not supported.", v2, v3, v4, v5, v6);
}

void sub_10018AD0C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Showing alert failed, user notification is nil!", v2, v3, v4, v5, v6);
}

void sub_10018AD40(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018ADAC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018AE18(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018AE84(char a1, NSObject *a2)
{
  CFStringRef v2 = @"NO";
  if (a1) {
    CFStringRef v2 = @"YES";
  }
  int v3 = 138412290;
  CFStringRef v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "E+E: Context requested to verify MDM information : %@", (uint8_t *)&v3, 0xCu);
}

void sub_10018AF14(char a1, NSObject *a2)
{
  CFStringRef v2 = @"NO";
  if (a1) {
    CFStringRef v2 = @"YES";
  }
  int v3 = 138412290;
  CFStringRef v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "E+E: Account requested to verify MDM information : %@", (uint8_t *)&v3, 0xCu);
}

void sub_10018AFA4(uint64_t a1, uint64_t a2, os_log_t log)
{
  CFStringRef v3 = @"NO";
  if (a1) {
    CFStringRef v3 = @"YES";
  }
  int v4 = 134218242;
  uint64_t v5 = a2;
  __int16 v6 = 2112;
  CFStringRef v7 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "E+E: Finished Aquiring device state: %ld, and valid org token: %@", (uint8_t *)&v4, 0x16u);
}

void sub_10018B044()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Unable to respond to message with invalid id", v1, 2u);
}

void sub_10018B084(void *a1, NSObject *a2)
{
  CFStringRef v3 = [a1 altDSID];
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, a2, v4, "Unable to respond to message without AK account for altDSID %@", v5);
}

void sub_10018B110()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "No adsid found on the account. Won't delete tokens via AKTokenManager.", v1, 2u);
}

void sub_10018B150()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Unable to delete birthday from keychain due to error: %@.", v1, 0xCu);
}

void sub_10018B1C4(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_10001CF84((void *)&_mh_execute_header, a3, (uint64_t)a3, "Invalid service %@ for reporting", (uint8_t *)a2);
}

void sub_10018B214()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Unable to reset check in bit due to Accounts error: %{public}@", v2);
}

void sub_10018B280()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "We do not have any IDMS accounts to check in with.", v1, 2u);
}

void sub_10018B2C0(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = 134349570;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  __int16 v9 = 2114;
  uint64_t v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Liveness check-in %{public}lu failed for account %@ with error: %{public}@", (uint8_t *)&v5, 0x20u);
}

void sub_10018B35C()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Received response parameters: %@", v1, 0xCu);
}

void sub_10018B3D0()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Checking if device should report attested data", v1, 2u);
}

void sub_10018B410()
{
  sub_1000133F4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Failed to save nextLivenessNonce in the account", v1, 2u);
}

void sub_10018B450()
{
  sub_100010824();
  sub_10001CF84((void *)&_mh_execute_header, v0, v1, "Received error %@ while attesting the OS version", v2);
}

void sub_10018B4BC()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to send attested OS version with error: %@\nresponse: %@", v2, 0x16u);
}

void sub_10018B540(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot convert %@ to a non-nil string", (uint8_t *)&v2, 0xCu);
}

void sub_10018B5B8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to call back to notification handler! Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018B630(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to call back to state broadcast handler! Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018B6A8(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using QA Anisette DSID.", v1, 2u);
}

void sub_10018B6EC(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using some other non-prod Anisette DSID.", v1, 2u);
}

void sub_10018B730()
{
  sub_100010824();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "SQL Exec %@ failed with error %s.");
}

void sub_10018B7A8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Executing query: %@", v2, v3, v4, v5, v6);
}

void sub_10018B810()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Executing query: %s", v2, v3, v4, v5, v6);
}

void sub_10018B878(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Rows changed: %d", (uint8_t *)v2, 8u);
}

void sub_10018B8F0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Database corruption detected: %@", v2, v3, v4, v5, v6);
}

void sub_10018B958()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Database error detected: %@", v2, v3, v4, v5, v6);
}

void sub_10018B9C0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Wanted to migrate database, but migrator is nil!", v1, 2u);
}

void sub_10018BA04()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Database opened at path: %@", v2, v3, v4, v5, v6);
}

void sub_10018BA70()
{
  sub_100010824();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "%@: Failed to open file at path %@");
}

void sub_10018BAE8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localizedDescription];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to create database. Error: %@", v4, 0xCu);
}

void sub_10018BB7C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Creating path for database...", v1, 2u);
}

void sub_10018BBC0()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Attempting to open database at path: %@", v2, v3, v4, v5, v6);
}

void sub_10018BC2C()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Attempting to wipe database at path: %@", v2, v3, v4, v5, v6);
}

void sub_10018BC98()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Database %@ wiped...", v2, v3, v4, v5, v6);
}

void sub_10018BD04()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to wipe database with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018BD6C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Closed database with result: %d", (uint8_t *)v2, 8u);
}

void sub_10018BDE4()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Closing database at path: %@", v2, v3, v4, v5, v6);
}

void sub_10018BE50(char a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a1 & 1;
  __int16 v4 = 2112;
  uint64_t v5 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "MID Drifted! TTR filed with status - %d and error - %@", (uint8_t *)v3, 0x12u);
}

void sub_10018BEDC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Setting default MID Invalidated ttr config", v2, v3, v4, v5, v6);
}

void sub_10018BF10()
{
  sub_100010824();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "ttr-cfgs normalized mid drift ttrFrequency - %ld and  RandomNumber - %ld", v2, v3);
}

void sub_10018BF84()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Expected first time sign in anisette provision.", v2, v3, v4, v5, v6);
}

void sub_10018BFB8()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Unexpected MID drift will happen because we will provision even when previous MID is not null. Previous MID: %@", v1, 0xCu);
}

void sub_10018C02C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to clear last knownMID with error (%@)", v2, v3, v4, v5, v6);
}

void sub_10018C094()
{
  sub_100010824();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "MID Drifted! Previous MID: %@; New MID: %@");
}

void sub_10018C108()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "MID not available at the moment! Please check underlying ADI error for the reason.", v2, v3, v4, v5, v6);
}

void sub_10018C13C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Previous MID is null. There may be issues with keychain cache. This is not the first time sign in flow since we are not provisioning.", v2, v3, v4, v5, v6);
}

void sub_10018C170()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to set last knownMID with error (%@)", v2, v3, v4, v5, v6);
}

void sub_10018C1D8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to read keychain value for last known MID with error (%@)", v2, v3, v4, v5, v6);
}

void sub_10018C240(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018C278(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018C2B0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 debugDescription];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error while saving the account for sign out, %@", (uint8_t *)&v4, 0xCu);
}

void sub_10018C348(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018C380()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%@ deallocated", v1, 0xCu);
}

void sub_10018C3F4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There is no custodian UUID to start a custodian initiation request failing operation", v2, v3, v4, v5, v6);
}

void sub_10018C428()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing custodian setup token, abandoning idMS custodian setup.", v2, v3, v4, v5, v6);
}

void sub_10018C45C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed to start a custodian initiation request, but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018C490()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to initiate custodian setup with error: %@\nresponse: %@");
}

void sub_10018C4F8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing custodian UUID, abandoning custodian finalization.", v2, v3, v4, v5, v6);
}

void sub_10018C52C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing altDSID, abandoning custodian finalization.", v2, v3, v4, v5, v6);
}

void sub_10018C560()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed to finish a finalize custodianship request, but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018C594()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to finalize custodianship with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018C5FC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There is no custodian UUID to abort a setup request failing operation", v2, v3, v4, v5, v6);
}

void sub_10018C630()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed to abort a custodian setup request, but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018C664()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to abort custodian setup with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018C6CC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing custodian UUID, abandoning custodian recovery key update.", v2, v3, v4, v5, v6);
}

void sub_10018C700()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing altDSID, abandoning custodian recovery key update.", v2, v3, v4, v5, v6);
}

void sub_10018C734()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing wrappingKeyRKC, abandoning custodian recovery key update.", v2, v3, v4, v5, v6);
}

void sub_10018C768()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed to finish a custodian recovery key update request, but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018C79C()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to update recovery key with error: %@\nresponse: %@");
}

void sub_10018C804()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "We have an authKit account, request needs to be authenticated", v1, 2u);
}

void sub_10018C844()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Starting recovery request with context %@", v1, 0xCu);
}

void sub_10018C8B8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to start custodian account recovery with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018C920()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed to continue fetching the custodian configuration , but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018C954()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to start custodian recovery transaction with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018C9BC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to verify custodian recovery key with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018CA24()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Cannot fetch data recovery key without a session ID or recovery token, failing operation", v2, v3, v4, v5, v6);
}

void sub_10018CA58()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Cannot fetch data recovery key without an authenticated account, failing operation", v2, v3, v4, v5, v6);
}

void sub_10018CA8C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed to continue fetching the data recovery key , but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018CAC0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There is no altdsid to send embargo end transaction, failing operation", v2, v3, v4, v5, v6);
}

void sub_10018CAF4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Cannot send embargo end transaction without a session ID, failing operation", v2, v3, v4, v5, v6);
}

void sub_10018CB28()
{
  sub_10001DAD4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Sending embargo end notification feedback with to urlKey: %@ context: %@", v1, 0x16u);
}

void sub_10018CBA0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AuthKit Private entitlement needed but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018CBD4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to send embargo end feedback with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018CC3C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There is no owner or custodian information to start a transaction, failing operation", v2, v3, v4, v5, v6);
}

void sub_10018CC70()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Something really really bad happened, we don't have a push token to start a custodian request", v2, v3, v4, v5, v6);
}

void sub_10018CCA4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Cannot fetch data recovery key without a session ID, failing operation", v2, v3, v4, v5, v6);
}

void sub_10018CCD8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "There is no url for key AKURLBagKeyTrustedContactsDataSync in the URLBag. No op.", v2, v3, v4, v5, v6);
}

void sub_10018CD0C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing lastDataSyncTimestamp, abandoning IdMS performTrustedContactsDataSync.", v2, v3, v4, v5, v6);
}

void sub_10018CD40()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing altDSID, abandoning IdMS performTrustedContactsDataSync.", v2, v3, v4, v5, v6);
}

void sub_10018CD74()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Missing heartbeat token, abandoning IdMS performTrustedContactsDataSync.", v2, v3, v4, v5, v6);
}

void sub_10018CDA8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to performTrustedContactsDataSync due to AKCustodianDaemonService being released", v2, v3, v4, v5, v6);
}

void sub_10018CDDC()
{
  sub_10001DAD4();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Failed to performTrustedContactsDataSync with error: %@\nresponse: %@");
}

void sub_10018CE44(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error %@ creating access control for OS Bound RefKey", (uint8_t *)&v3, 0xCu);
}

void sub_10018CEC0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error %@ creating OS bound refKey", (uint8_t *)&v3, 0xCu);
}

void sub_10018CF3C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Created OS bound RefKey successfully", v1, 2u);
}

void sub_10018CF80()
{
  sub_10009C398();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Stored OS Bound refKey with error %d", v1, 8u);
}

void sub_10018CFF4()
{
  sub_10009C398();
  sub_10009C37C((void *)&_mh_execute_header, v0, v1, "Error %d storing OS Bound Key in the keychain", v2, v3, v4, v5, v6);
}

void sub_10018D05C()
{
  sub_10009C398();
  sub_10009C37C((void *)&_mh_execute_header, v0, v1, "Error %d getting OS bound key from keychain", v2, v3, v4, v5, v6);
}

void sub_10018D0C4()
{
  sub_10009C398();
  sub_10009C37C((void *)&_mh_execute_header, v0, v1, "Error %d deleting OS bound key from keychain", v2, v3, v4, v5, v6);
}

void sub_10018D12C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Missing required inputs. Skipping.", v2, v3, v4, v5, v6);
}

void sub_10018D160()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Token is nil. Let's delete the token.", v2, v3, v4, v5, v6);
}

void sub_10018D194()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager attempting to update token.", v2, v3, v4, v5, v6);
}

void sub_10018D1C8()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "AKTokenManager missing required inputs (tokenIdentifier). Skipping.", v1, 2u);
}

void sub_10018D208()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager missing required inputs (altDSID). Skipping.", v2, v3, v4, v5, v6);
}

void sub_10018D23C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "AKTokenManager fetching tokens for tokenIdentifier:%@ altDSID:%@", (uint8_t *)&v3, 0x16u);
}

void sub_10018D2C4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager attempting to fetch token.", v2, v3, v4, v5, v6);
}

void sub_10018D2F8(void *a1, NSObject *a2)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1[10] + 8) + 24);
  int v3 = *(unsigned __int8 *)(*(void *)(a1[12] + 8) + 24);
  int v4 = *(unsigned __int8 *)(*(void *)(a1[14] + 8) + 24);
  v5[0] = 67109632;
  v5[1] = v2;
  __int16 v6 = 1024;
  int v7 = v3;
  __int16 v8 = 1024;
  int v9 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "AKTokenManager: shouldUpdateCache:%d, shouldUpdateKeychain:%d, shouldUpdateAccountCredential:%d", (uint8_t *)v5, 0x14u);
}

void sub_10018D3A8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: token from Accounts has newer creation date. Picking this one.", v2, v3, v4, v5, v6);
}

void sub_10018D3DC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: Token creation time not enabled. Defaulting to choose token from account credential", v2, v3, v4, v5, v6);
}

void sub_10018D410()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: found token from account credential.", v2, v3, v4, v5, v6);
}

void sub_10018D444(uint64_t **a1, NSObject *a2)
{
  uint64_t v2 = **a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "AKTokenManager: error fetching from keychain: %@", (uint8_t *)&v3, 0xCu);
}

void sub_10018D4C4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: didn't find token in keychain.", v2, v3, v4, v5, v6);
}

void sub_10018D4F8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: token from keychain has newer creation date. Picking this one.", v2, v3, v4, v5, v6);
}

void sub_10018D52C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: found token in keychain.", v2, v3, v4, v5, v6);
}

void sub_10018D560()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: found token in cache.", v2, v3, v4, v5, v6);
}

void sub_10018D594()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: missing required inputs.", v2, v3, v4, v5, v6);
}

void sub_10018D5C8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "AKTokenManager: error deleting token: %@", (uint8_t *)&v3, 0xCu);
}

void sub_10018D644()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: attempting to delete token from keychain", v2, v3, v4, v5, v6);
}

void sub_10018D678()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: we received an Account, deleting from there as well.", v2, v3, v4, v5, v6);
}

void sub_10018D6AC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "AKTokenManager: Synchronizing Credential", v2, v3, v4, v5, v6);
}

void sub_10018D6E0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to fetch dataclass rules with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018D758(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing beneficiary setup short-lived token.", v1, 2u);
}

void sub_10018D79C()
{
  sub_10009E884();
  uint64_t v1 = [(id)sub_10009E878(v0) beneficiaryIdentifier];
  sub_10002FC2C();
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "Failed to setup beneficiary (%@) with error: %@", v4, v5, v6, v7, v8);
}

void sub_10018D828()
{
  sub_10009E884();
  uint64_t v1 = [(id)sub_10009E878(v0) beneficiaryIdentifier];
  sub_10002FC2C();
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "Failed to remove beneficiary (%@) with error: %@", v4, v5, v6, v7, v8);
}

void sub_10018D8B4()
{
  sub_10009E884();
  uint64_t v1 = [(id)sub_10009E878(v0) beneficiaryIdentifier];
  sub_10002FC2C();
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "Failed to update beneficiary (%@) with error: %@", v4, v5, v6, v7, v8);
}

void sub_10018D940(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Setting up Beneficiary Alias with context - \n%@", (uint8_t *)&v2, 0xCu);
}

void sub_10018D9B8()
{
  sub_10009E884();
  uint64_t v1 = [(id)sub_10009E878(v0) beneficiaryIdentifier];
  sub_10002FC2C();
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "Failed to setup beneficiary alias (%@) with error: %@", v4, v5, v6, v7, v8);
}

void sub_10018DA44(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to execute request with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018DABC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Starting to fetch URL bag... if necessary", v2, v3, v4, v5, v6);
}

void sub_10018DAF0()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Invoking bag traffic request: %@", v2, v3, v4, v5, v6);
}

void sub_10018DB58()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Bag fetch either timed out or was successful but there was no bag data!", v1, 2u);
}

void sub_10018DB98()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "URL Bag Response Body: %@", v2, v3, v4, v5, v6);
}

void sub_10018DC00()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "URL Bag Serialization Error: %@", v1, 0xCu);
}

void sub_10018DC74()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Bag fetch failed! Error: %@", v1, 0xCu);
}

void sub_10018DCE8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Finished processing pending URL bag requests, all done!", v2, v3, v4, v5, v6);
}

void sub_10018DD1C(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 pendingBagFetchRequests];
  uint64_t v5 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v4 count]);
  uint8_t v6 = [a1 pendingBagFetchRequests];
  int v7 = 138412546;
  uint8_t v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Processing pending (%@) URL bag requests: %@", (uint8_t *)&v7, 0x16u);
}

void sub_10018DE04()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Memory URL bag cache expired or not created for key: %@; last updated: %@",
    v2,
    0x16u);
}

void sub_10018DE88()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Memory URL bag cache miss for key: %@", v2, v3, v4, v5, v6);
}

void sub_10018DEF0()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "The URL bag was not in dictionary format!", v1, 2u);
}

void sub_10018DF30(int a1, NSObject *a2)
{
  v2[0] = 67174657;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Eligibilities check failed with error code: %{private}d", (uint8_t *)v2, 8u);
}

void sub_10018DFA8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to check in with IDMS! Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018E020()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "%@ deallocated", v2, v3, v4, v5, v6);
}

void sub_10018E088()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Perform Authorization cannot proceed because of error: %@", v2, v3, v4, v5, v6);
}

void sub_10018E0F0()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "Error performing auth request (%@): %@");
}

void sub_10018E15C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Completion was called with nil authorization and no error thrown, setting Error Unknown", v2, v3, v4, v5, v6);
}

void sub_10018E190()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Authorization Credential state not found with error:%@", v2, v3, v4, v5, v6);
}

void sub_10018E1F8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Daemon failed to return native takeover urls: %@", v2, v3, v4, v5, v6);
}

void sub_10018E260()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Daemon failed to return native take over urls for iForgot: %@", v2, v3, v4, v5, v6);
}

void sub_10018E2C8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Daemon is returning native takeover urls", v2, v3, v4, v5, v6);
}

void sub_10018E2FC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to revoke upgrade with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018E364()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch appleIDAuthorizeHTMLResponseURL %@", v2, v3, v4, v5, v6);
}

void sub_10018E3CC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Request for appleIDAuthorizeHTMLResponseURL failed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018E434()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Cannot fetch primary bundleID for nil primary account", v2, v3, v4, v5, v6);
}

void sub_10018E468()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Owner entitlement needed to continue fetching icon, but calling process doesn't have it", v2, v3, v4, v5, v6);
}

void sub_10018E49C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to establishing connection with notification center, client is missing required entitlement!", v2, v3, v4, v5, v6);
}

void sub_10018E4D0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Silent auth requested with an invalid context... bailing", v2, v3, v4, v5, v6);
}

void sub_10018E504()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Silent Request is not eligible for authorization", v2, v3, v4, v5, v6);
}

void sub_10018E538()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Authorization request missing proxied bundle identifier.", v2, v3, v4, v5, v6);
}

void sub_10018E56C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Proxied bundle identifier entitlement needed to continue saving authorization.", v2, v3, v4, v5, v6);
}

void sub_10018E5A0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No credential requests.", v2, v3, v4, v5, v6);
}

void sub_10018E5D4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No login choices available and we have a password request in credential requests.", v2, v3, v4, v5, v6);
}

void sub_10018E608()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AKAuthorizationValidator returned we cannot perform credential request but threw no error, setting error unknown", v2, v3, v4, v5, v6);
}

void sub_10018E63C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  CFStringRef v3 = @"NO";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "_getPresentationContextForRequestContext canPerformCredentialRequest returned %@ (with error %@)", (uint8_t *)&v2, 0x16u);
}

void sub_10018E6C8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "User information updated", v2, v3, v4, v5, v6);
}

void sub_10018E6FC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error fetching shared accounts - %@", v2, v3, v4, v5, v6);
}

void sub_10018E764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_msgSend((id)sub_1000AA180(a1, a2), "user");
  _DWORD *v3 = 138412290;
  void *v2 = v4;
  sub_1000AA160((void *)&_mh_execute_header, v5, v6, "setupLoginChoices: Adding safari credential choice - %@");
}

void sub_10018E7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_msgSend((id)sub_1000AA180(a1, a2), "user");
  _DWORD *v3 = 138412290;
  void *v2 = v4;
  sub_1000AA160((void *)&_mh_execute_header, v5, v6, "setupLoginChoices: Adding shared credential choice - %@");
}

void sub_10018E81C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "setupLoginChoices: Adding personal credential choice", v2, v3, v4, v5, v6);
}

void sub_10018E850()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "setupLoginChoices: No Personal credential found. Adding SIWA creation choice", v2, v3, v4, v5, v6);
}

void sub_10018E884(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 48) appID];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Fetching credentials with: %@", v4, v5, v6, v7, v8);
}

void sub_10018E90C(void *a1)
{
  [a1 count];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v1, v2, "getCredentials returned with %lu credentials", v3, v4, v5, v6, v7);
}

void sub_10018E984()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Authorization UI returned with userResponse - %@", v2, v3, v4, v5, v6);
}

void sub_10018E9EC(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 selectedRequest];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Attempted to authorize request of unsupported type %@", v4, 0xCu);
}

void sub_10018EA80()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "User response contains password, so add them to srp context", v2, v3, v4, v5, v6);
}

void sub_10018EAB4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Not Setting _shouldRequestToArmDeviceToAllowPCSKeyUpload, isFirstPartyWebLogin is NO", v2, v3, v4, v5, v6);
}

void sub_10018EAE8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Walrus Enabled, attaching arming info to SRP CPD", v2, v3, v4, v5, v6);
}

void sub_10018EB1C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Not Setting _shouldRequestToArmDeviceToAllowPCSKeyUpload, authKitAccount is nil", v2, v3, v4, v5, v6);
}

void sub_10018EB50()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "EDPEligible and isFirstPartyWebLogin. Continuing to check EDP Health...", v2, v3, v4, v5, v6);
}

void sub_10018EB84()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Not Setting _shouldRequestToArmDeviceToAllowPCSKeyUpload, isEDPEligible is NO", v2, v3, v4, v5, v6);
}

void sub_10018EBB8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018EC28(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018EC94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018ED04()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to update AuthKit account! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018ED6C()
{
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "User does not have access to the shared group - %@", v2, v3, v4, v5, v6);
}

void sub_10018EDD8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Constructed AKAuthorizationContext from the request & client - %@", v2, v3, v4, v5, v6);
}

void sub_10018EE40()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "An error occurred while fetching the share token.", v2, v3, v4, v5, v6);
}

void sub_10018EE74()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "There is no web session auth to save.", v2, v3, v4, v5, v6);
}

void sub_10018EEA8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error fetching AuthKitAccount %@", v2, v3, v4, v5, v6);
}

void sub_10018EF10()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Saved web session details. Error - %@", v2, v3, v4, v5, v6);
}

void sub_10018EF78()
{
  sub_1000409D4();
  __int16 v2 = 1024;
  int v3 = 1433;
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s (%d) called", v1, 0x12u);
}

void sub_10018F008()
{
  sub_10002CA48();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "shouldContinueWithRequest returning result %@ and error %@", v1, 0x16u);
}

void sub_10018F098(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018F108()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Processing of user response failed with an unknown error, likely invalid response...", v2, v3, v4, v5, v6);
}

void sub_10018F13C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to beginAuthorization - Client has proxy entitlement but is not setting either _proxiedClientBundleID or _proxiedClientTeamID", v2, v3, v4, v5, v6);
}

void sub_10018F170()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to beginAuthorization - Client is not entitled to _AKCredentialRequestContextBundleIdentifierProxyEntitlement", v2, v3, v4, v5, v6);
}

void sub_10018F1A4()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to beginAuthorization - Missing Entitlements.", v2, v3, v4, v5, v6);
}

void sub_10018F1D8()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "beginAuthorization - Error beginning session for context : %@\n Error - %@");
}

void sub_10018F244()
{
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "beginAuthorization - User Response is nil for context : %@", v2, v3, v4, v5, v6);
}

void sub_10018F2B0()
{
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "beginAuthorization - Error beginning session for context : %@", v2, v3, v4, v5, v6);
}

void sub_10018F31C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to continueAuthorization - Client has proxy entitlement but is not setting either _proxiedClientBundleID or _proxiedClientTeamID", v2, v3, v4, v5, v6);
}

void sub_10018F350()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Invalid context. Need to set _continuationRequestIdentifier", v2, v3, v4, v5, v6);
}

void sub_10018F384()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to continueAuthorization - Client is not entitled to _AKCredentialRequestContextBundleIdentifierProxyEntitlement", v2, v3, v4, v5, v6);
}

void sub_10018F3B8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to continueAuthorization - Missing Entitlements.", v2, v3, v4, v5, v6);
}

void sub_10018F3EC()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Invalid context. Need to set either _externalLocalAuthData or _externalAuthToken", v2, v3, v4, v5, v6);
}

void sub_10018F420()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "continueAuthorization - externalAuthToken was provided. Attaching to authorizationRequest.", v2, v3, v4, v5, v6);
}

void sub_10018F454()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "continueAuthorization - externalLocalAuthData was verified successfully", v2, v3, v4, v5, v6);
}

void sub_10018F488()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "continueAuthorization - Invalid Externalized LAContext", v2, v3, v4, v5, v6);
}

void sub_10018F4BC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "continueAuthorization - externalLocalAuthData was provided. Verifying...", v2, v3, v4, v5, v6);
}

void sub_10018F4F0()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "continueAuthorization - Error continuing session for context : %@\n Error - %@");
}

void sub_10018F55C()
{
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "continueAuthorization - authorization is nil for context : %@", v2, v3, v4, v5, v6);
}

void sub_10018F5C8()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "continueAuthorization - Error continuing session for context : %@ \n: error: %@");
}

void sub_10018F634()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to cancelAuthorization - Client has proxy entitlement but is not setting either _proxiedClientBundleID or _proxiedClientTeamID", v2, v3, v4, v5, v6);
}

void sub_10018F668()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to cancelAuthorization - Client is not entitled to _AKCredentialRequestContextBundleIdentifierProxyEntitlement", v2, v3, v4, v5, v6);
}

void sub_10018F69C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Unable to cancelAuthorization. Missing Entitlements.", v2, v3, v4, v5, v6);
}

void sub_10018F6D0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "cancelAuthorization - Error canceling the session: %@", v2, v3, v4, v5, v6);
}

void sub_10018F738(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 authContext];
  v4[0] = 67109120;
  v4[1] = [v3 _shouldRequestToArmDeviceToAllowPCSKeyUpload];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "_shouldRequestToArmDeviceToAllowPCSKeyUpload %d", (uint8_t *)v4, 8u);
}

void sub_10018F7D8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Client authenticated externally. Sending auth token in SRP.", v1, 2u);
}

void sub_10018F81C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Auth context is authorizing for a shared SIWA account but we don't the required share info to include in the SRP", v1, 2u);
}

void sub_10018F860(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 requestConfiguration];
  uint64_t v5 = [v4 request];
  uint8_t v6 = [a1 requestConfiguration];
  uint8_t v7 = [v6 request];
  uint8_t v8 = [v7 allHTTPHeaderFields];
  int v9 = 138412546;
  uint64_t v10 = v5;
  __int16 v11 = 2112;
  __int16 v12 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Showing server UI with request: %@, %@", (uint8_t *)&v9, 0x16u);
}

void sub_10018F960()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Server UI did not complete auth successfully! Error: %@", v2, v3, v4, v5, v6);
}

void sub_10018F9C8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Successfully handled server UI response!", v1, 2u);
}

void sub_10018FA0C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unknown action signal from server UI final response!", v1, 2u);
}

void sub_10018FA50()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed fetching phone information for server UI delegate: %@", v2, v3, v4, v5, v6);
}

void sub_10018FAB8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Context explicitly does not want GS tokens for server UI, moving on...", v1, 2u);
}

void sub_10018FAFC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to receive phone source info: %@", v2, v3, v4, v5, v6);
}

void sub_10018FB64()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch IDS certificate with error: %@", v2, v3, v4, v5, v6);
}

void sub_10018FBCC()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Finish reporting PAC event %@.", v1, 0xCu);
}

void sub_10018FC40()
{
  sub_100010824();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Begin reporting PAC event %@ with error: %@", v2, 0x16u);
}

void sub_10018FCC4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error communicating with client anisette service: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10018FD3C()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_10018FDB8()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_10018FE34()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_10018FEB0()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_10018FF2C()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_10018FFA8()
{
  sub_1000448D4();
  sub_1000448E8((void *)&_mh_execute_header, v0, v1, "%s (%d) called", v2, v3, v4, v5, v6);
}

void sub_100190024(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Migration logic not present (from: %i)", (uint8_t *)v2, 8u);
}

void sub_10019009C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Current schema version undefined!", v1, 2u);
}

void sub_1001900E0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Current store name undefined!", v1, 2u);
}

void sub_100190124(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 88) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_1001901AC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 80) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_100190234(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 72) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_1001902BC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 48) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_100190344(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 64) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_1001903CC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 40) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_100190454(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_1001904DC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 16) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_100190564(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 24) serviceName];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Resuming XPC listener for Mach service %@...", v4, v5, v6, v7, v8);
}

void sub_1001905EC()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
}

void sub_100190654()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Fatal error! Unknown XPC listener: %@", v1, 0xCu);
}

void sub_1001906C8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Received DTO status change notification, triggering liveness...", v2, v3, v4, v5, v6);
}

void sub_1001906FC()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "XPC event stream handler called with debug: %@", v2, v3, v4, v5, v6);
}

void sub_100190764()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Liveness performed for DTO status change notification", v2, v3, v4, v5, v6);
}

void sub_100190798()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Received device unlock notification - Skipping passkey status & enrollment checks since there is no primary authKit account", v2, v3, v4, v5, v6);
}

void sub_1001907CC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Received device unlock notification - Checking passkey status and enroll if eligible...", v2, v3, v4, v5, v6);
}

void sub_100190800()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Missing AKDaemonConnectionManager instance.", v2, v3, v4, v5, v6);
}

void sub_100190834()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Received device unlock notification - Skipping passkey keychain status checks since missing altDSID for primary iCloud account", v2, v3, v4, v5, v6);
}

void sub_100190868()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Failed to get passkey keychain status with error - %{private}@", v2, v3, v4, v5, v6);
}

void sub_1001908D0()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Passkeys cleanup completed successfully", v2, v3, v4, v5, v6);
}

void sub_100190904()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error occurred while saving sharingGroupLastNotificationDate to account", v1, 2u);
}

void sub_100190944()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Setting sharingGroupLastNotificationDate", v2, v3, v4, v5, v6);
}

void sub_100190978(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: No more requests to schedule", (uint8_t *)&v2, 0xCu);
}

void sub_1001909F0(uint64_t a1, NSObject *a2, double a3)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  double v6 = a3;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%@: Failed to create scheduler source (dispatchInterval: %.2f)", (uint8_t *)&v3, 0x16u);
}

void sub_100190A74()
{
  sub_1000B1660();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "%@: Scheduler source has been registered (dispatchInterval: %.2f)");
}

void sub_100190AE0()
{
  sub_1000B1660();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "%@: Scheduler source has been cancelled (dispatchInterval: %.2f)");
}

void sub_100190B4C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: Scheduler source (%@) fired, executing all eligible requests", (uint8_t *)&v3, 0x16u);
}

void sub_100190BD4(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v6 = [a2 request];
  uint64_t v7 = [a2 calculation];
  int v8 = 138412802;
  uint64_t v9 = a1;
  __int16 v10 = 2112;
  __int16 v11 = v6;
  __int16 v12 = 2112;
  id v13 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%@: Unable to execute request (%@) with calculation (%@)", (uint8_t *)&v8, 0x20u);
}

void sub_100190CAC(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 transactionID];
  __int16 v5 = [a1 teamID];
  uint64_t v6 = [a1 bundleID];
  int v7 = 138412802;
  int v8 = v4;
  __int16 v9 = 2112;
  __int16 v10 = v5;
  __int16 v11 = 2112;
  __int16 v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Sending request to revoke upgrade txID %@ for teamID/bundleID: %@/%@", (uint8_t *)&v7, 0x20u);
}

void sub_100190D8C()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Processing clearance request: %@", v2, v3, v4, v5, v6);
}

void sub_100190DF4()
{
  sub_1000409D4();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Client %@ lacks a bundle ID!", v1, 0xCu);
}

void sub_100190E6C()
{
  sub_1000B4040();
  qos_class_self();
  os_log_t v0 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_10002FC2C();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Queueing (traffic) end authenticated event block with qos %@ for %@", v3, v4, v5, v6, v7);
}

void sub_100190F08()
{
  sub_1000B4040();
  qos_class_self();
  os_log_t v0 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_1000B4028();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Queueing (clearence) end authenticated event block with qos %@ for %@", v3, v4, v5, v6, v7);
}

void sub_100190FA8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Removing %@ from authenticated request list", v2, v3, v4, v5, v6);
}

void sub_100191010()
{
  sub_1000B4040();
  qos_class_self();
  os_log_t v0 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_1000B4028();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Executing end authenticated event clearance block with qos %@ for %@", v3, v4, v5, v6, v7);
}

void sub_1001910B0()
{
  sub_1000B4040();
  qos_class_self();
  os_log_t v0 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_10002FC2C();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Queueing (traffic) end authentication block with qos %@ for %@", v3, v4, v5, v6, v7);
}

void sub_10019114C()
{
  sub_1000B4040();
  qos_class_self();
  os_log_t v0 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_1000B4028();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Queueing (clerence) end authentication clearance block with qos %@ for %@", v3, v4, v5, v6, v7);
}

void sub_1001911EC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Auth has ended with an error. Skipping queued context update.", v2, v3, v4, v5, v6);
}

void sub_100191220()
{
  sub_1000B4040();
  qos_class_self();
  os_log_t v0 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_1000B4028();
  sub_100039774((void *)&_mh_execute_header, v1, v2, "Executing end authentication clearance block with qos %@ for %@", v3, v4, v5, v6, v7);
}

void sub_1001912C0()
{
  sub_1000B4040();
  qos_class_self();
  uint64_t v1 = objc_msgSend((id)sub_1000B404C(), "numberWithUnsignedInt:");
  sub_1000B4028();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "No in progress daemon auth found with qos %@ for %@", v2, 0x16u);
}

void sub_100191370()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Removing %@ from authenticating list", v2, v3, v4, v5, v6);
}

void sub_1001913D8(void *a1)
{
  uint64_t v1 = [a1 clientBundleID];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Denying authenticated request clearance to client %@ due to pending authentications inflight...", v4, v5, v6, v7, v8);
}

void sub_10019145C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "No daemon authentication in progress, all clear!", v2, v3, v4, v5, v6);
}

void sub_100191490()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Clearing an authenticated request, request serialization is disabled.", v2, v3, v4, v5, v6);
}

void sub_1001914C4(void *a1)
{
  uint64_t v1 = [a1 clientBundleID];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Denying authentication clearance to client %@ due to pending surrogate auth...", v4, v5, v6, v7, v8);
}

void sub_100191548(void *a1)
{
  uint64_t v1 = [a1 clientBundleID];
  sub_100010824();
  sub_10001084C((void *)&_mh_execute_header, v2, v3, "Denying authentication clearance to client %@ due to pending authenticated request inflight...", v4, v5, v6, v7, v8);
}

void sub_1001915CC()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Clearing UI capable authentication.", v2, v3, v4, v5, v6);
}

void sub_100191600()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Clearing limited UI capable authentication.", v2, v3, v4, v5, v6);
}

void sub_100191634()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "No authentication in progress, all clear!", v2, v3, v4, v5, v6);
}

void sub_100191668()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Clearing silent authentication.", v2, v3, v4, v5, v6);
}

void sub_10019169C()
{
  os_log_t v0 = +[AKFeatureManager sharedManager];
  [v0 isAuthenticatedRequestSerializationEnabled];
  uint64_t v1 = +[AKFeatureManager sharedManager];
  [v1 isSilentAuthenticationRequestSerializationEnabled];
  sub_100039774((void *)&_mh_execute_header, v2, v3, "Serialization Feature Flag Summary - Request Serialization: %@, Silent Auth Serialization: %@", v4, v5, v6, v7, 2u);
}

void sub_100191784(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 authContext];
  uint64_t v4 = [v3 _identifier];
  sub_100010824();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Traffic Controller received unexpected SurrogateUI auth with ID %@. Ending processing early.", v5, 0xCu);
}

void sub_100191830()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Request cleared, invoking: (%@)", v2, v3, v4, v5, v6);
}

void sub_100191898(uint64_t a1)
{
  uint64_t v1 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 40) count]);
  sub_10002FC2C();
  sub_100039774((void *)&_mh_execute_header, v2, v3, "Request not cleared, adding to queue (%@) as pending: %@", v4, v5, v6, v7, v8);
}

void sub_100191940()
{
  sub_1000409D4();
  __int16 v5 = 2112;
  uint64_t v6 = v0;
  __int16 v7 = 2112;
  uint64_t v8 = v1;
  __int16 v9 = 2112;
  uint64_t v10 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting to process clearence request.  Pending requests: %@\nActive app requests: %@\nActive daemon requests: %@\nActive authenticated requests: %@", v4, 0x2Au);
}

void sub_1001919D8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Detected UI capable auth request: %@", v2, v3, v4, v5, v6);
}

void sub_100191A40()
{
  sub_1000B4040();
  uint64_t v3 = [v2 authContext];
  id v4 = [v3 _capabilityForUIDisplay];
  uint64_t v5 = [v1 authContext];
  int v6 = 134218240;
  id v7 = v4;
  __int16 v8 = 1024;
  unsigned int v9 = [v5 _performUIOutOfProcess];
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Denying clearance to AuthContext with display capability: %lu, out of process: %d", (uint8_t *)&v6, 0x12u);
}

void sub_100191B0C()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Denying clearance due to pending daemons: %@", v2, v3, v4, v5, v6);
}

void sub_100191B78()
{
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Attempting to determine foreground state for apps: %@", v2, v3, v4, v5, v6);
}

void sub_100191BE4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Denying clearance due to another foreground app performing authentication...", v2, v3, v4, v5, v6);
}

void sub_100191C18()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Adding %@ to list of authenticating apps", v2, v3, v4, v5, v6);
}

void sub_100191C80()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Adding %@ to list of authenticating daemons", v2, v3, v4, v5, v6);
}

void sub_100191CE8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Adding %@ to list of authenticated requests clients", v2, v3, v4, v5, v6);
}

void sub_100191D50()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "No pending requests found.", v2, v3, v4, v5, v6);
}

void sub_100191D84()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "No pending requests were eligible for clearance...", v2, v3, v4, v5, v6);
}

void sub_100191DB8()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Cleared a pending request: %@", v2, v3, v4, v5, v6);
}

void sub_100191E20(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Encountered error while fetching user information: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100191E98(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to clear stale devices from cache with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100191F10()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Birthday keychain fetch failed - unable to unarchive token data with error: %@", v1, 0xCu);
}

void sub_100191F84()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Failed to fetch accounts, unable to update birthday: %@.", v2, v3, v4, v5, v6);
}

void sub_100191FEC()
{
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Birthday keychain update failed - unable to generate archived data from token with error: %@", v1, 0xCu);
}

void sub_100192060()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Birthday keychain update failed with error: %@.", v2, v3, v4, v5, v6);
}

void sub_1001920C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_100192138()
{
  return sub_100192160();
}

uint64_t sub_100192160()
{
  uint64_t v0 = abort_report_np();
  return sub_100192188(v0);
}

uint64_t sub_100192188()
{
  return sub_1001921B0();
}

uint64_t sub_1001921B0()
{
  uint64_t v0 = abort_report_np();
  return sub_1001921D8(v0);
}

uint64_t sub_1001921D8()
{
  uint64_t v0 = abort_report_np();
  return sub_100192200(v0);
}

void sub_100192200()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Updating push delegates: %@", v2, v3, v4, v5, v6);
}

void sub_100192268()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Server is not providing an APS env override.", v2, v3, v4, v5, v6);
}

void sub_10019229C()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Current APS env matches server preference. %@", v2, v3, v4, v5, v6);
}

void sub_100192308()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "The server requested env (%@) is not valid!", v2, v3, v4, v5, v6);
}

void sub_100192370(void *a1, void *a2, NSObject *a3)
{
  uint64_t v5 = objc_msgSend(a1, "aaf_toHexString");
  uint8_t v6 = objc_msgSend(a2, "aaf_toHexString");
  int v7 = 138412546;
  __int16 v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "cachedToken: %@, publicToken: %@", (uint8_t *)&v7, 0x16u);
}

void sub_100192434()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Public token matches cached token, returning...", v2, v3, v4, v5, v6);
}

void sub_100192468(void *a1, NSObject *a2)
{
  uint64_t v3 = objc_msgSend(a1, "aaf_toHexString");
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "APS says we have a new public token! %@", v4, 0xCu);
}

void sub_1001924FC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Unable to convert public token to hex string: %@", v2, v3, v4, v5, v6);
}

void sub_100192564()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "APS connection %@ still returned nil for -publicToken!", v2, v3, v4, v5, v6);
}

void sub_1001925D0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Push message is not for the IDMS topic. Ignoring!", v2, v3, v4, v5, v6);
}

void sub_100192604()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "All queued push messages processed, we're done!", v2, v3, v4, v5, v6);
}

void sub_100192638()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Discarding message as ineligible: %@", v2, v3, v4, v5, v6);
}

void sub_1001926A0()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Attempting to process %@", v2, v3, v4, v5, v6);
}

void sub_100192708(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 altDSID];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Push message is for an unknown altDSID %@, suppressing...", v4, 0xCu);
}

void sub_10019279C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Push message requires posting a CFUserNotification and the device is in restricted sharing mode, suppressing...", v2, v3, v4, v5, v6);
}

void sub_1001927D0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Push message is only allowed for primary account, suppressing...", v2, v3, v4, v5, v6);
}

void sub_100192804()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Push message required a passcode but current device does not have one, suppressing...", v2, v3, v4, v5, v6);
}

void sub_100192838()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Password reset push message is only allowed for primary account iCloud account, suppressing...", v2, v3, v4, v5, v6);
}

void sub_10019286C()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to generate login code. Error: %@", v2, v3, v4, v5, v6);
}

void sub_1001928D4()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "An alert is already being presented for push ID %@. Skipping alert presentation.", v2, v3, v4, v5, v6);
}

void sub_10019293C()
{
  sub_1000654F8(__stack_chk_guard);
  sub_1000409D4();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Active login notification id: %@", v2, v3, v4, v5, v6);
}

void sub_1001929A4()
{
  sub_100010824();
  sub_1000133D8((void *)&_mh_execute_header, v0, v1, "Found matching iCloud account %@ for push.", v2, v3, v4, v5, v6);
}

void sub_100192A0C(uint64_t a1, NSObject *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[AKAuthModeController fetchAuthModeWithContext:client:completion:]_block_invoke";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: Failed to fetch info with error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_100192A98(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Internal/Private access entitlement required but missing!", v1, 2u);
}

void sub_100192ADC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Fetch user info returned apple managed account fetchError: %@", v2, v3, v4, v5, v6);
}

void sub_100192B44()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Fetch user info returned an unexpected error: %@", v2, v3, v4, v5, v6);
}

void sub_100192BAC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error saving AuthKit account after updating auth mode: %@.", v2, v3, v4, v5, v6);
}

void sub_100192C14()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error fetching AuthKit account %@. Skipping auth mode save.", v2, v3, v4, v5, v6);
}

void sub_100192C7C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting credential: %@ on account: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100192D04(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We got a PRK token from the server, but we have no passcode... discarding", v1, 2u);
}

void sub_100192D48(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Server auth response did not contain HB token!", v1, 2u);
}

void sub_100192D8C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No account credential found. Creating new credential.", v1, 2u);
}

void sub_100192DD0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "AuthKit account exists and is consented to telemetry collection, deviceSessionID: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100192E48(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to update AuthKit account! Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100192EC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100192EF8(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error binding sql statement with parameter: %@", (uint8_t *)&v3, 0xCu);
}

void sub_100192F74(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error binding sql statement with parameter: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100192FEC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100193024(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to save AIDA account! Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10019309C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Exception caught: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100193114(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 allHTTPHeaderFields];
  int v4 = 138412290;
  __int16 v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Request Headers for Education/Enterprise: %@", (uint8_t *)&v4, 0xCu);
}

void sub_1001931AC()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "%@: Failed to generate authentication parameters with error (%@)");
}

void sub_100193218()
{
  sub_10002CA48();
  sub_1000206D8((void *)&_mh_execute_header, v0, v1, "%@: Failed to configure SRP context with error (%@)");
}

void sub_100193284()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to get a controller", v2, v3, v4, v5, v6);
}

void sub_1001932B8()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Orphaned payload: %@", v2, v3, v4, v5, v6);
}

void sub_100193320(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100193390()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Presenting IP mismatch alert asking user to switch to same Wi-Fi on Windows", v2, v3, v4, v5, v6);
}

void sub_1001933C4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "IP mismatch alert - taking user to the Wi-Fi settings", v2, v3, v4, v5, v6);
}

void sub_1001933F8()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "IP mismatch alert - user canceled the alert", v2, v3, v4, v5, v6);
}

void sub_10019342C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Failed to populate push token", v2, v3, v4, v5, v6);
}

void sub_100193460()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Circle request failed with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001934C8()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Notifying the other side that we're really done", v2, v3, v4, v5, v6);
}

void sub_1001934FC()
{
  sub_100010824();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Received error response for circle (step 1) request: %@", v1, 0xCu);
}

void sub_100193570(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Global config fetch either timed out or was successful but there was no data!", v1, 2u);
}

void sub_1001935B4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Global config fetch failed! Error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10019362C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Global config fetch timed out, cancelling task: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1001936A8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "The config was not in dictionary format!", v1, 2u);
}

void sub_1001936EC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "There was an error parsing the config! %@", (uint8_t *)&v2, 0xCu);
}

void sub_100193764()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AltDSID in context is nil, couldn't fetch iCloud account for fetching iCSC health", v2, v3, v4, v5, v6);
}

void sub_100193798(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 context];
  uint64_t v4 = [v3 altDSID];
  sub_100010824();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Couldn't find iCloud account for altDSID: %@", v5, 0xCu);
}

void sub_100193844()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "OSBound RefKey is not available in keyChain...Can't send signed liveness nonce", v2, v3, v4, v5, v6);
}

void sub_100193878()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Check-in to server without any active services for account: %@", v2, v3, v4, v5, v6);
}

void sub_1001938E0()
{
  sub_1000133F4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Liveness is for the iTunes regulatory account. Fetching eligibility.", v1, 2u);
}

void sub_100193920()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to fetch follow up identifiers: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100193988()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting phone bundle information: %@", v2, v3, v4, v5, v6);
}

void sub_1001939F0()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "Ratchet state unexpectly found nil during liveness", v2, v3, v4, v5, v6);
}

void sub_100193A24()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "No push token available for check-in!", v2, v3, v4, v5, v6);
}

void sub_100193A58()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to update telemetry opt-in timestamp on account: %@", v2, v3, v4, v5, v6);
}

void sub_100193AC0()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to update telemetry opt-in on account: %@", v2, v3, v4, v5, v6);
}

void sub_100193B28(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100193B94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100193C00(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100193C6C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Context eligible for CK based SRP auth...", v2, v3, v4, v5, v6);
}

void sub_100193CA0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Context not eligible for SRP auth... %@", (uint8_t *)&v2, 0xCu);
}

void sub_100193D18()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Context eligible for PLT based SRP auth...", v2, v3, v4, v5, v6);
}

void sub_100193D4C()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Context eligible for MRK based SRP auth...", v2, v3, v4, v5, v6);
}

void sub_100193D80()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Context eligible for PW based SRP auth...", v2, v3, v4, v5, v6);
}

void sub_100193DB4(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 additionalHeaders];
  int v5 = 138412546;
  uint8_t v6 = a1;
  __int16 v7 = 2112;
  __int16 v8 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: Attaching additional headers (%@) to SRP request", (uint8_t *)&v5, 0x16u);
}

void sub_100193E64()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Client Bundle ID is available", v2, v3, v4, v5, v6);
}

void sub_100193E98(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = +[AKDevice currentDevice];
  int v5 = 138412546;
  uint8_t v6 = v4;
  __int16 v7 = 2112;
  uint64_t v8 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to get Attestation data for %@! Error: %@", (uint8_t *)&v5, 0x16u);
}

void sub_100193F50()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "SRP Context: AuthKit account fetch attempted with invalid context and we didn't check for DSID...", v1, 2u);
}

void sub_100193F90()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Calling DeviceIdentity to issue certs.", v2, v3, v4, v5, v6);
}

void sub_100193FC4()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Device Identity is not supported.", v2, v3, v4, v5, v6);
}

void sub_100193FF8(uint64_t a1, void *a2)
{
  [a2 count];
  sub_10002FC44((void *)&_mh_execute_header, v2, v3, "BIK(%@) or Certificates(%lu) not available", v4, v5, v6, v7, 2u);
}

void sub_100194088(char a1, NSObject *a2, uint64_t a3)
{
  CFStringRef v3 = @"NO";
  if (a1) {
    CFStringRef v3 = @"YES";
  }
  int v4 = 138412290;
  CFStringRef v5 = v3;
  sub_10002460C((void *)&_mh_execute_header, a2, a3, "Attestation matches cached value? - [%@]", (uint8_t *)&v4);
}

void sub_100194110()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting certs from DeviceIdentity: %@", v2, v3, v4, v5, v6);
}

void sub_100194178()
{
  sub_1000133F4();
  sub_10001CF9C((void *)&_mh_execute_header, v0, v1, "Device is not virtual machine. Host Device Identity is not supported.", v2, v3, v4, v5, v6);
}

void sub_1001941AC()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting signature from host: %@", v2, v3, v4, v5, v6);
}

void sub_100194214(void *a1, void *a2)
{
  [a1 length];
  [a2 count];
  sub_10002FC44((void *)&_mh_execute_header, v3, v4, "Invalid host signature(%lu) or certificates(%lu).", v5, v6, v7, v8, 0);
}

void sub_1001942B4(NSObject *a1)
{
  uint64_t v2 = sub_1000CC740();
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a1, v3, "OID %@ is missing in the certificate", v4);
}

void sub_100194340(NSObject *a1)
{
  uint64_t v2 = sub_1000CC740();
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a1, v3, "OID %@ is present in the certificate", v4);
}

void sub_1001943CC()
{
  os_log_t v0 = sub_1000CC740();
  sub_100010824();
  sub_10002FC44((void *)&_mh_execute_header, v1, v2, "Renewed DCRT also missing required OID:%@, returning error %ld", v3, v4, v5, v6, v7);
}

void sub_100194460()
{
  os_log_t v0 = sub_1000CC740();
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "Current DCRT missing required OID:%@, renew DCRT", v3, v4, v5, v6, v7);
}

void sub_1001944E4()
{
  sub_1000133F4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Neither received a certificate nor an error", v1, 2u);
}

void sub_100194524(void *a1)
{
  [a1 count];
  sub_100010824();
  sub_100039748((void *)&_mh_execute_header, v1, v2, "Expected 2 certificates. Received a total of %zd certificates for DCRT", v3, v4, v5, v6, v7);
}

void sub_10019459C(void *a1, NSObject *a2)
{
  [a1 count];
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, a2, v3, "Received a total of %zd DCRT", v4);
}

void sub_10019461C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Error getting DCRT from MobileActivation Engine: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100194684()
{
  sub_100010824();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "Added nonce %@ to RK with error %@");
}

void sub_1001946FC(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_10002460C((void *)&_mh_execute_header, a2, a3, "Retrieved DAK with error %@", (uint8_t *)&v4);
}

void sub_100194770(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_10002460C((void *)&_mh_execute_header, a2, a3, "Attested RK to DAK with error: %@", (uint8_t *)&v4);
}

void sub_1001947E4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Attested OS version wont be reported due to failure to create OS bound RefKey: %@", v2, v3, v4, v5, v6);
}

void sub_10019484C()
{
  sub_100010824();
  sub_10003EF3C((void *)&_mh_execute_header, v0, v1, "Created attestation data = %@ with error = %@");
}

void sub_1001948C0()
{
  sub_100010824();
  sub_10002460C((void *)&_mh_execute_header, v0, v1, "Created OS bound RefKey %@", v2);
}

void sub_10019492C(uint64_t a1, NSObject *a2)
{
  v2[0] = 67109632;
  v2[1] = 262080;
  __int16 v3 = 2048;
  uint64_t v4 = a1;
  __int16 v5 = 1024;
  int v6 = 525600;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Attempting to generate certificate data... (%dh/%luh/%dh)", (uint8_t *)v2, 0x18u);
}

void sub_1001949C8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Device is still not trusted, not performing auth.", v1, 2u);
}

void sub_100194A0C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100010830((void *)&_mh_execute_header, a2, a3, "Invalid request, cannot properly set RPAppSingInService flags. {requestContext=%@}", a5, a6, a7, a8, 2u);
}

void sub_100194A7C(void *a1)
{
  uint64_t v2 = [a1 domain];
  [a1 code];
  sub_10008B34C();
  sub_10008B370((void *)&_mh_execute_header, v3, v4, "Authorization Rapport Link Client failed to activate. {errorDomain=%{public}@, errorCode=%ld, error=%@}", v5, v6, v7, v8, v9);
}

void sub_100194B14()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Asked to perform authorization, but one is already in progress. {requestContext:%@}", v2, v3, v4, v5, v6);
}

void sub_100194B7C(void *a1)
{
  uint64_t v2 = [a1 domain];
  [a1 code];
  sub_10008B34C();
  sub_10008B370((void *)&_mh_execute_header, v3, v4, "AuthorizationRapportClient present UI failed. {errorDomain=%{public}@, errorCode=%ld, error=%@}", v5, v6, v7, v8, v9);
}

void sub_100194C14()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to archive the credential request context. {archiveError=%@}", v2, v3, v4, v5, v6);
}

void sub_100194C7C()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to unarchive authorization. {unarchiveError=%@}", v2, v3, v4, v5, v6);
}

void sub_100194CE4()
{
  sub_100010824();
  sub_100010830((void *)&_mh_execute_header, v0, v1, "Failed to unarchive error. {unarchiveError=%@}", v2, v3, v4, v5, v6);
}

void sub_100194D4C()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AKD received request for TTR on non-internal build, suppressing.", v2, v3, v4, v5, v6);
}

void sub_100194D80(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "The TTR request was missing a title - message was: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100194DF8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "AKD received push request to create TTR with title: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100194E70()
{
  sub_1000133F4();
  sub_1000133BC((void *)&_mh_execute_header, v0, v1, "AKD received request for TTR on non-internal build, ignoring.", v2, v3, v4, v5, v6);
}

void sub_100194EA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100194F10(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100194F7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100194FE8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%@: Last known MID not found in keychain (%@)", (uint8_t *)&v3, 0x16u);
}

void sub_100195070(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Plt upgrade enabled, plt can be sent for token upgrade", v1, 2u);
}

void sub_1001950B4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Plt upgrade enabled, attaching plt to token upgrade request", v1, 2u);
}

void sub_1001950F8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing URL bag entry for federated account, attempting IDP flow...", v1, 2u);
}

void sub_10019513C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No altDSID given, cannot proceed to sign out.", v1, 2u);
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1 = String.init(_:)(a1);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

NSValue __swiftcall CGSize._bridgeToObjectiveC()()
{
  return (NSValue)CGSize._bridgeToObjectiveC()();
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t AKConfigApplyOverride()
{
  return _AKConfigApplyOverride();
}

uint64_t AKErrorUnderlyingError()
{
  return _AKErrorUnderlyingError();
}

uint64_t AKSharedDevicePasscodePromptAlertMessageWithServiceType()
{
  return _AKSharedDevicePasscodePromptAlertMessageWithServiceType();
}

uint64_t AKStringFromServiceType()
{
  return _AKStringFromServiceType();
}

uint64_t AKTrustedContactSyncOperationFromIntegerValue()
{
  return _AKTrustedContactSyncOperationFromIntegerValue();
}

uint64_t AKUserNotificationCreate()
{
  return _AKUserNotificationCreate();
}

uint64_t AKUserNotificationResponseAction()
{
  return _AKUserNotificationResponseAction();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t AppleIDAuthSupportAuthenticate()
{
  return _AppleIDAuthSupportAuthenticate();
}

uint64_t AppleIDAuthSupportCopyAppTokensOptions()
{
  return _AppleIDAuthSupportCopyAppTokensOptions();
}

uint64_t AppleIDAuthSupportCopyProvidedData()
{
  return _AppleIDAuthSupportCopyProvidedData();
}

uint64_t AppleIDAuthSupportCopyToken()
{
  return _AppleIDAuthSupportCopyToken();
}

uint64_t AppleIDAuthSupportCreate()
{
  return _AppleIDAuthSupportCreate();
}

uint64_t AppleIDAuthSupportGetStatus()
{
  return _AppleIDAuthSupportGetStatus();
}

uint64_t AppleIDAuthSupportTokenCopyExternalizedVersion()
{
  return _AppleIDAuthSupportTokenCopyExternalizedVersion();
}

uint64_t AppleIDAuthSupportTokenCreateWithExternalizedVersion()
{
  return _AppleIDAuthSupportTokenCreateWithExternalizedVersion();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url)
{
  return _CFBundleCopyInfoDictionaryForURL(url);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

uint64_t CFPhoneNumberCreate()
{
  return _CFPhoneNumberCreate();
}

uint64_t CFPhoneNumberCreateString()
{
  return _CFPhoneNumberCreateString();
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesSynchronize(applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

uint64_t FBSOpenApplicationErrorCodeToString()
{
  return _FBSOpenApplicationErrorCodeToString();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t MCLockdownGetDeviceName()
{
  return _MCLockdownGetDeviceName();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MKBDeviceLockAssertion()
{
  return _MKBDeviceLockAssertion();
}

NSString *NSHomeDirectory(void)
{
  return _NSHomeDirectory();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return _NSStringFromProtocol(proto);
}

uint64_t PNCopyBestGuessNormalizedNumberForCountry()
{
  return _PNCopyBestGuessNormalizedNumberForCountry();
}

uint64_t SBSGetScreenLockStatus()
{
  return _SBSGetScreenLockStatus();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return _SecAccessControlCreateWithFlags(allocator, protection, flags, error);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

uint64_t SecCertificateCopyExtensionValue()
{
  return _SecCertificateCopyExtensionValue();
}

uint64_t SecCopyLastError()
{
  return _SecCopyLastError();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

uint64_t SecItemUpdateWithError()
{
  return _SecItemUpdateWithError();
}

uint64_t SecKeyCopySystemKey()
{
  return _SecKeyCopySystemKey();
}

uint64_t SecKeyCreateAttestation()
{
  return _SecKeyCreateAttestation();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return _SecKeyCreateRandomKey(parameters, error);
}

uint64_t SecKeySetParameter()
{
  return _SecKeySetParameter();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint32_t SecTaskGetCodeSignStatus(SecTaskRef task)
{
  return _SecTaskGetCodeSignStatus(task);
}

uint64_t _AKLogFido()
{
  return __AKLogFido();
}

uint64_t _AKLogHme()
{
  return __AKLogHme();
}

uint64_t _AKLogPasskey()
{
  return __AKLogPasskey();
}

uint64_t _AKLogSiwa()
{
  return __AKLogSiwa();
}

uint64_t _AKLogSystem()
{
  return __AKLogSystem();
}

uint64_t _AKLogSystemQuery()
{
  return __AKLogSystemQuery();
}

uint64_t _AKSignpostCreate()
{
  return __AKSignpostCreate();
}

uint64_t _AKSignpostGetNanoseconds()
{
  return __AKSignpostGetNanoseconds();
}

uint64_t _AKSignpostLogSystem()
{
  return __AKSignpostLogSystem();
}

uint64_t _AKTrafficLogSubsystem()
{
  return __AKTrafficLogSubsystem();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return __CFBundleCopyBundleURLForExecutableURL();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t container_copy_sandbox_token()
{
  return _container_copy_sandbox_token();
}

uint64_t container_error_copy_unlocalized_description()
{
  return _container_error_copy_unlocalized_description();
}

uint64_t container_get_path()
{
  return _container_get_path();
}

uint64_t container_query_create()
{
  return _container_query_create();
}

uint64_t container_query_get_last_error()
{
  return _container_query_get_last_error();
}

uint64_t container_query_get_single_result()
{
  return _container_query_get_single_result();
}

uint64_t container_query_operation_set_flags()
{
  return _container_query_operation_set_flags();
}

uint64_t container_query_set_class()
{
  return _container_query_set_class();
}

uint64_t container_query_set_persona_unique_string()
{
  return _container_query_set_persona_unique_string();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return _dispatch_block_create_with_qos_class(flags, qos_class, relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

uid_t geteuid(void)
{
  return _geteuid();
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return _mig_get_reply_port();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

uint64_t os_eligibility_get_all_domain_answers()
{
  return _os_eligibility_get_all_domain_answers();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath(pid, buffer, buffersize);
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob64(a1, a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_changes(sqlite3 *a1)
{
  return _sqlite3_changes(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_errcode(sqlite3 *db)
{
  return _sqlite3_errcode(db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return _sqlite3_expanded_sql(pStmt);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

void sqlite3_free(void *a1)
{
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return _sqlite3_last_insert_rowid(a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isClassType()
{
  return _swift_isClassType();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return _xpc_dictionary_apply(xdict, applier);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}

id objc_msgSend_DSID(void *a1, const char *a2, ...)
{
  return _[a1 DSID];
}

id objc_msgSend_DSIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "DSIDForAccount:");
}

id objc_msgSend_HTTPBody(void *a1, const char *a2, ...)
{
  return _[a1 HTTPBody];
}

id objc_msgSend_IDMSEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 IDMSEnvironment];
}

id objc_msgSend_IDMSEnvironmentFromBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IDMSEnvironmentFromBag:");
}

id objc_msgSend_IsFollowUpItemNotificationForced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IsFollowUpItemNotificationForced:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_MLBSerialNumber(void *a1, const char *a2, ...)
{
  return _[a1 MLBSerialNumber];
}

id objc_msgSend_PCSAuthContextForWebSessionIdentifier_serviceName_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "PCSAuthContextForWebSessionIdentifier:serviceName:completion:");
}

id objc_msgSend_ROMAddress(void *a1, const char *a2, ...)
{
  return _[a1 ROMAddress];
}

id objc_msgSend_SOSNeeded(void *a1, const char *a2, ...)
{
  return _[a1 SOSNeeded];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_UUIDWithNSUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDWithNSUUID:");
}

id objc_msgSend_XPCInterface(void *a1, const char *a2, ...)
{
  return _[a1 XPCInterface];
}

id objc_msgSend__AKAuthContextWithUsername_password_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_AKAuthContextWithUsername:password:");
}

id objc_msgSend__AKIDSCertificateFetchQueue(void *a1, const char *a2, ...)
{
  return _[a1 _AKIDSCertificateFetchQueue];
}

id objc_msgSend__acceptSessionForPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acceptSessionForPayload:error:");
}

id objc_msgSend__acceptingControllerForTransactionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_acceptingControllerForTransactionId:");
}

id objc_msgSend__accessibleWithKeychainAccessible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibleWithKeychainAccessible:");
}

id objc_msgSend__accountDisplayNameWithPresentationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountDisplayNameWithPresentationContext:");
}

id objc_msgSend__accountForAppleIDAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountForAppleIDAuthContext:");
}

id objc_msgSend__accountForContinuationWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountForContinuationWithContext:completion:");
}

id objc_msgSend__accountForContinuationWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountForContinuationWithContext:error:");
}

id objc_msgSend__activateEngine(void *a1, const char *a2, ...)
{
  return _[a1 _activateEngine];
}

id objc_msgSend__activePairedTinkerDevice(void *a1, const char *a2, ...)
{
  return _[a1 _activePairedTinkerDevice];
}

id objc_msgSend__activeSessionForContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeSessionForContext:client:");
}

id objc_msgSend__addAccountNameParameterToURL_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAccountNameParameterToURL:withContext:");
}

id objc_msgSend__addExperimentalFeaturesInfoToClientProvidedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addExperimentalFeaturesInfoToClientProvidedData:");
}

id objc_msgSend__addTemporaryDeveloperTeam_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addTemporaryDeveloperTeam:");
}

id objc_msgSend__addingAdditionalHeaders_forURLRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addingAdditionalHeaders:forURLRequest:");
}

id objc_msgSend__additionalInfoChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_additionalInfoChangedForAccount:userInformation:");
}

id objc_msgSend__adpCohortChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adpCohortChangedForAccount:userInformation:");
}

id objc_msgSend__akPCSAuthPushHandler(void *a1, const char *a2, ...)
{
  return _[a1 _akPCSAuthPushHandler];
}

id objc_msgSend__alignedInsertionCandidates_withExistingItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alignedInsertionCandidates:withExistingItems:");
}

id objc_msgSend__anisetteActionTargetForServerResponse_andContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_anisetteActionTargetForServerResponse:andContext:");
}

id objc_msgSend__anisetteHeadersFromAttestationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_anisetteHeadersFromAttestationData:");
}

id objc_msgSend__anisetteValidationQueue(void *a1, const char *a2, ...)
{
  return _[a1 _anisetteValidationQueue];
}

id objc_msgSend__annotateTransformationOfProperty_fromValue_toValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_annotateTransformationOfProperty:fromValue:toValue:");
}

id objc_msgSend__appIDForIOS(void *a1, const char *a2, ...)
{
  return _[a1 _appIDForIOS];
}

id objc_msgSend__appIDForMacOS(void *a1, const char *a2, ...)
{
  return _[a1 _appIDForMacOS];
}

id objc_msgSend__approvedCodeSigningIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 _approvedCodeSigningIdentifiers];
}

id objc_msgSend__armDeviceWithMessage_account_notificationResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_armDeviceWithMessage:account:notificationResult:");
}

id objc_msgSend__arrayValueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arrayValueForEntitlement:");
}

id objc_msgSend__attachAdditionalHeaders_toContextHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attachAdditionalHeaders:toContextHelper:");
}

id objc_msgSend__attemptBiometricOrPasscodeAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptBiometricOrPasscodeAuthWithContext:completion:");
}

id objc_msgSend__attemptIndex(void *a1, const char *a2, ...)
{
  return _[a1 _attemptIndex];
}

id objc_msgSend__attemptInteractiveAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptInteractiveAuthWithContext:completion:");
}

id objc_msgSend__attemptPasswordlessAuthAfterBiometricOrPasscodeValidationWithContext_promptType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptPasswordlessAuthAfterBiometricOrPasscodeValidationWithContext:promptType:completion:");
}

id objc_msgSend__attemptPasswordlessAuthOptionsWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptPasswordlessAuthOptionsWithContext:completion:");
}

id objc_msgSend__attemptPasswordlessAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptPasswordlessAuthWithContext:completion:");
}

id objc_msgSend__attestationDataForRequestData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attestationDataForRequestData:completion:");
}

id objc_msgSend__attestationWithDataCerts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attestationWithDataCerts:");
}

id objc_msgSend__attestationWithSecCertRefs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attestationWithSecCertRefs:");
}

id objc_msgSend__authKitAccount(void *a1, const char *a2, ...)
{
  return _[a1 _authKitAccount];
}

id objc_msgSend__authKitAccountForPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authKitAccountForPayload:");
}

id objc_msgSend__authKitAccountFromContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authKitAccountFromContext:");
}

id objc_msgSend__authModeErrorFromError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authModeErrorFromError:");
}

id objc_msgSend__authModeInfoFromResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authModeInfoFromResponse:");
}

id objc_msgSend__authSessionTimeoutInterval(void *a1, const char *a2, ...)
{
  return _[a1 _authSessionTimeoutInterval];
}

id objc_msgSend__authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithContext:completion:");
}

id objc_msgSend__authenticationContextForRevokingUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 _authenticationContextForRevokingUpgrade];
}

id objc_msgSend__authenticationParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticationParameters:");
}

id objc_msgSend__authenticationParametersForUsername_altDSID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticationParametersForUsername:altDSID:context:");
}

id objc_msgSend__authorizationAccessLevels(void *a1, const char *a2, ...)
{
  return _[a1 _authorizationAccessLevels];
}

id objc_msgSend__authorizationPropertiesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authorizationPropertiesChangedForAccount:userInformation:");
}

id objc_msgSend__baaCertOptions(void *a1, const char *a2, ...)
{
  return _[a1 _baaCertOptions];
}

id objc_msgSend__bagURLForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bagURLForAltDSID:");
}

id objc_msgSend__beginAppleIDCreationFlowWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginAppleIDCreationFlowWithContext:completion:");
}

id objc_msgSend__beginChangePasswordFlowWithAccount_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginChangePasswordFlowWithAccount:context:completion:");
}

id objc_msgSend__beginObservingLanguageChangeNotfication(void *a1, const char *a2, ...)
{
  return _[a1 _beginObservingLanguageChangeNotfication];
}

id objc_msgSend__beginObservingRegulatoryEligibilityChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 _beginObservingRegulatoryEligibilityChangeNotification];
}

id objc_msgSend__beginObservingSharingModePolicyChangeNotfication(void *a1, const char *a2, ...)
{
  return _[a1 _beginObservingSharingModePolicyChangeNotfication];
}

id objc_msgSend__beginServerDrivenSecondaryActionWithURLKey_context_initialAuthResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginServerDrivenSecondaryActionWithURLKey:context:initialAuthResponse:completion:");
}

id objc_msgSend__beginiForgotFlowWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginiForgotFlowWithContext:completion:");
}

id objc_msgSend__beneficiaryWrappedKeyKeychainDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 _beneficiaryWrappedKeyKeychainDescriptor];
}

id objc_msgSend__bindStatement_withParameter_atPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bindStatement:withParameter:atPosition:");
}

id objc_msgSend__birthDayKeychainDescriptorForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_birthDayKeychainDescriptorForAltDSID:");
}

id objc_msgSend__birthYearChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_birthYearChangedForAccount:userInformation:");
}

id objc_msgSend__bodyForAddAndRevokeCustodianRequest(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForAddAndRevokeCustodianRequest];
}

id objc_msgSend__bodyForBeneficiaryAliasEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForBeneficiaryAliasEndpoint];
}

id objc_msgSend__bodyForBeneficiaryEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForBeneficiaryEndpoint];
}

id objc_msgSend__bodyForCustodianUpdateRecoveryKeyRequest(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForCustodianUpdateRecoveryKeyRequest];
}

id objc_msgSend__bodyForEmbargoEndFeedback(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForEmbargoEndFeedback];
}

id objc_msgSend__bodyForFinalizeCustodianRequest(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForFinalizeCustodianRequest];
}

id objc_msgSend__bodyForRecoveryCircle(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForRecoveryCircle];
}

id objc_msgSend__bodyForTrustedContactsDataSync(void *a1, const char *a2, ...)
{
  return _[a1 _bodyForTrustedContactsDataSync];
}

id objc_msgSend__broadcastCredentialStateChange_forApplicationWithClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_broadcastCredentialStateChange:forApplicationWithClientID:");
}

id objc_msgSend__broadcastEmailChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 _broadcastEmailChangeNotification];
}

id objc_msgSend__buildApplicationAuthorizationController(void *a1, const char *a2, ...)
{
  return _[a1 _buildApplicationAuthorizationController];
}

id objc_msgSend__buildApplicationMetadataServiceForAltDSID_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildApplicationMetadataServiceForAltDSID:client:");
}

id objc_msgSend__buildSchemaVersion1(void *a1, const char *a2, ...)
{
  return _[a1 _buildSchemaVersion1];
}

id objc_msgSend__bundle(void *a1, const char *a2, ...)
{
  return _[a1 _bundle];
}

id objc_msgSend__bundleNonPluginKit(void *a1, const char *a2, ...)
{
  return _[a1 _bundleNonPluginKit];
}

id objc_msgSend__cacheFetchedPrivateEmail_keyAlreadyHashed_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheFetchedPrivateEmail:keyAlreadyHashed:error:completion:");
}

id objc_msgSend__cacheSecondFactor_codeCaptureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheSecondFactor:codeCaptureError:");
}

id objc_msgSend__cachedURLBagForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedURLBagForAltDSID:");
}

id objc_msgSend__calculateAndPersistDriftStatusForMID_anisetteFetchError_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateAndPersistDriftStatusForMID:anisetteFetchError:error:");
}

id objc_msgSend__callCompletionBlockWithAuthorization_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionBlockWithAuthorization:error:");
}

id objc_msgSend__callCompletionBlockWithEmail_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionBlockWithEmail:error:");
}

id objc_msgSend__callCompletionWithAuthorization_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionWithAuthorization:error:");
}

id objc_msgSend__callCompletionWithResults_password_additionalData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionWithResults:password:additionalData:error:");
}

id objc_msgSend__canProceedWithArmingForMessage_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canProceedWithArmingForMessage:account:");
}

id objc_msgSend__capabilityForUIDisplay(void *a1, const char *a2, ...)
{
  return _[a1 _capabilityForUIDisplay];
}

id objc_msgSend__capturedCodeString(void *a1, const char *a2, ...)
{
  return _[a1 _capturedCodeString];
}

id objc_msgSend__changePasswordAndAuthenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changePasswordAndAuthenticateWithContext:completion:");
}

id objc_msgSend__checkForProximityIfNeededWithCircleStep_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForProximityIfNeededWithCircleStep:completion:");
}

id objc_msgSend__checkForProximityWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForProximityWithCompletion:");
}

id objc_msgSend__checkFreshnessAndVerifyWithPassword_serverResponse_additionalData_secondaryActionError_context_newServerResponse_username_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkFreshnessAndVerifyWithPassword:serverResponse:additionalData:secondaryActionError:context:newServerResponse:username:completion:");
}

id objc_msgSend__checkInWithIDMSWithAccount_pushToken_event_reason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkInWithIDMSWithAccount:pushToken:event:reason:completion:");
}

id objc_msgSend__checkKeybagUnlockState(void *a1, const char *a2, ...)
{
  return _[a1 _checkKeybagUnlockState];
}

id objc_msgSend__checkScreenUnlockStateFromNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkScreenUnlockStateFromNotificationDictionary:");
}

id objc_msgSend__classWithKeychainClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classWithKeychainClass:");
}

id objc_msgSend__cleanUpCPIMBytes_provisioningContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpCPIMBytes:provisioningContext:");
}

id objc_msgSend__cleanupAccountsToRemove_accountsToSave_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupAccountsToRemove:accountsToSave:completion:");
}

id objc_msgSend__clearBirthDayForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearBirthDayForAltDSID:");
}

id objc_msgSend__clearCaptureState(void *a1, const char *a2, ...)
{
  return _[a1 _clearCaptureState];
}

id objc_msgSend__clearDeviceListCacheForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearDeviceListCacheForAltDSID:");
}

id objc_msgSend__clearDeviceListForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearDeviceListForAltDSID:");
}

id objc_msgSend__clearMutuallyExclusiveProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearMutuallyExclusiveProperties:");
}

id objc_msgSend__clearNextEligibleRequest(void *a1, const char *a2, ...)
{
  return _[a1 _clearNextEligibleRequest];
}

id objc_msgSend__clearNextEligibleRequestWithUpdateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearNextEligibleRequestWithUpdateBlock:");
}

id objc_msgSend__clearSessionState(void *a1, const char *a2, ...)
{
  return _[a1 _clearSessionState];
}

id objc_msgSend__clearSurrogate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSurrogate:");
}

id objc_msgSend__clientAnisetteService(void *a1, const char *a2, ...)
{
  return _[a1 _clientAnisetteService];
}

id objc_msgSend__clientAuthenticatedExternallyWithPassword(void *a1, const char *a2, ...)
{
  return _[a1 _clientAuthenticatedExternallyWithPassword];
}

id objc_msgSend__clientBundleIDForContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientBundleIDForContext:client:");
}

id objc_msgSend__clientForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clientForContext:");
}

id objc_msgSend__clientShouldAuthenticateExternally(void *a1, const char *a2, ...)
{
  return _[a1 _clientShouldAuthenticateExternally];
}

id objc_msgSend__codeSigningIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _codeSigningIdentifier];
}

id objc_msgSend__completeAuthenticationWithServiceTokens_tokenFetchError_altDSID_authenticationResults_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_completeAuthenticationWithServiceTokens:tokenFetchError:altDSID:authenticationResults:context:completion:");
}

id objc_msgSend__configURLRequestWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configURLRequestWithContext:");
}

id objc_msgSend__configureDeviceListCacheInBackgroundWithContext_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureDeviceListCacheInBackgroundWithContext:response:");
}

id objc_msgSend__configureLinkClientWithService_companionLinkClient_requestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureLinkClientWithService:companionLinkClient:requestContext:");
}

id objc_msgSend__connectionWithProtocol_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectionWithProtocol:forBundleID:");
}

id objc_msgSend__constructRequestProviderForClient_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constructRequestProviderForClient:altDSID:");
}

id objc_msgSend__continuationRequestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _continuationRequestIdentifier];
}

id objc_msgSend__continuationToken(void *a1, const char *a2, ...)
{
  return _[a1 _continuationToken];
}

id objc_msgSend__continueSRPContractWithAuthURL_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueSRPContractWithAuthURL:context:completion:");
}

id objc_msgSend__correlateContext_withAuthModeInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_correlateContext:withAuthModeInformation:");
}

id objc_msgSend__createAndPerformRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAndPerformRequest:completion:");
}

id objc_msgSend__createErrorWithMIDDriftUnderlyingError_anisetteFetchError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createErrorWithMIDDriftUnderlyingError:anisetteFetchError:");
}

id objc_msgSend__createNewAppleIDAndAuthenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createNewAppleIDAndAuthenticateWithContext:completion:");
}

id objc_msgSend__createProvisioningEndURLRequestWithCPIM_withPreviousTransactionID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createProvisioningEndURLRequestWithCPIM:withPreviousTransactionID:completion:");
}

id objc_msgSend__createProvisioningStartURLRequestWithPreviousTXID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createProvisioningStartURLRequestWithPreviousTXID:completion:");
}

id objc_msgSend__createProxAnalyticsForAuthenticationContextIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createProxAnalyticsForAuthenticationContextIfNeeded:");
}

id objc_msgSend__createSyncURLRequestWithMID_SRM_routingInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSyncURLRequestWithMID:SRM:routingInfo:completion:");
}

id objc_msgSend__credentialStateController(void *a1, const char *a2, ...)
{
  return _[a1 _credentialStateController];
}

id objc_msgSend__credentialStateDidChange_forApplicationWithClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_credentialStateDidChange:forApplicationWithClientID:");
}

id objc_msgSend__credentialStateForRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_credentialStateForRequestContext:");
}

id objc_msgSend__currentDataBaseError(void *a1, const char *a2, ...)
{
  return _[a1 _currentDataBaseError];
}

id objc_msgSend__dataBlockForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataBlockForKey:");
}

id objc_msgSend__databaseQueue(void *a1, const char *a2, ...)
{
  return _[a1 _databaseQueue];
}

id objc_msgSend__deactivate(void *a1, const char *a2, ...)
{
  return _[a1 _deactivate];
}

id objc_msgSend__decodeConfigurationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decodeConfigurationInfo:");
}

id objc_msgSend__decorateLoadDelegate_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decorateLoadDelegate:withContext:");
}

id objc_msgSend__decrementQueueSize(void *a1, const char *a2, ...)
{
  return _[a1 _decrementQueueSize];
}

id objc_msgSend__defaultMIDInvalidatedTTRConfig(void *a1, const char *a2, ...)
{
  return _[a1 _defaultMIDInvalidatedTTRConfig];
}

id objc_msgSend__deleteTokenWithIdentifer_altDSID_account_credential_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteTokenWithIdentifer:altDSID:account:credential:error:");
}

id objc_msgSend__deliverPushPayload_attachDuplexSession_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverPushPayload:attachDuplexSession:completion:");
}

id objc_msgSend__deliverPushPayload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverPushPayload:completion:");
}

id objc_msgSend__demoModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _demoModeEnabled];
}

id objc_msgSend__denyVirtualInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 _denyVirtualInterfaces];
}

id objc_msgSend__descriptor(void *a1, const char *a2, ...)
{
  return _[a1 _descriptor];
}

id objc_msgSend__determineUIAndPerformRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineUIAndPerformRequest:completion:");
}

id objc_msgSend__deviceListPropertiesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceListPropertiesChangedForAccount:userInformation:");
}

id objc_msgSend__deviceListProviderWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceListProviderWithContext:");
}

id objc_msgSend__digestForSigningWithBody_header_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_digestForSigningWithBody:header:");
}

id objc_msgSend__discoveredPeripheral_withServiceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoveredPeripheral:withServiceID:");
}

id objc_msgSend__dismissUI(void *a1, const char *a2, ...)
{
  return _[a1 _dismissUI];
}

id objc_msgSend__dispatchingAlgorithmForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchingAlgorithmForInfo:");
}

id objc_msgSend__displaySwitchWiFiAlert(void *a1, const char *a2, ...)
{
  return _[a1 _displaySwitchWiFiAlert];
}

id objc_msgSend__doURLSwitchWithServerResponse_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doURLSwitchWithServerResponse:context:completion:");
}

id objc_msgSend__edpRequestWithAltDSID_URLKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_edpRequestWithAltDSID:URLKey:completion:");
}

id objc_msgSend__edpRequestWithAltDSID_URLKey_serviceController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_edpRequestWithAltDSID:URLKey:serviceController:completion:");
}

id objc_msgSend__edpStateChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_edpStateChangedForAccount:userInformation:");
}

id objc_msgSend__eligibleCleanupAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _eligibleCleanupAccounts];
}

id objc_msgSend__endpoint(void *a1, const char *a2, ...)
{
  return _[a1 _endpoint];
}

id objc_msgSend__enrollPasskeyIfEligible(void *a1, const char *a2, ...)
{
  return _[a1 _enrollPasskeyIfEligible];
}

id objc_msgSend__ensureDesiredAPSEnvironmentIsInUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureDesiredAPSEnvironmentIsInUse:");
}

id objc_msgSend__errorFromResponseDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorFromResponseDictionary:");
}

id objc_msgSend__errorFromServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorFromServerResponse:");
}

id objc_msgSend__executeAllowingReauthentication_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeAllowingReauthentication:completion:");
}

id objc_msgSend__executeFetchAuthModeInfoWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeFetchAuthModeInfoWithContext:client:completion:");
}

id objc_msgSend__executeQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeQuery:");
}

id objc_msgSend__executeRequestWithContext_urlBagKey_shouldSignWithIdentityToken_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeRequestWithContext:urlBagKey:shouldSignWithIdentityToken:completion:");
}

id objc_msgSend__executeScheduledRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeScheduledRequest:");
}

id objc_msgSend__executeURLRequest_withSession_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_executeURLRequest:withSession:completion:");
}

id objc_msgSend__exemptedBundleIDsFromMandatoryUISecurityUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 _exemptedBundleIDsFromMandatoryUISecurityUpgrade];
}

id objc_msgSend__exitForSIGTERM(void *a1, const char *a2, ...)
{
  return _[a1 _exitForSIGTERM];
}

id objc_msgSend__externalAuthToken(void *a1, const char *a2, ...)
{
  return _[a1 _externalAuthToken];
}

id objc_msgSend__externalLocalAuthData(void *a1, const char *a2, ...)
{
  return _[a1 _externalLocalAuthData];
}

id objc_msgSend__extractWebSessionAuthorizationFromResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractWebSessionAuthorizationFromResponse:");
}

id objc_msgSend__federatedPayloadFromInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_federatedPayloadFromInfo:");
}

id objc_msgSend__fetchAllAuthorizedClientIDs(void *a1, const char *a2, ...)
{
  return _[a1 _fetchAllAuthorizedClientIDs];
}

id objc_msgSend__fetchAnisetteDataAndProvisionIfNecessary_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAnisetteDataAndProvisionIfNecessary:device:completion:");
}

id objc_msgSend__fetchAppMetadataForClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAppMetadataForClientID:");
}

id objc_msgSend__fetchApplicationsForTeamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchApplicationsForTeamID:");
}

id objc_msgSend__fetchAssociatedDomainsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAssociatedDomainsWithCompletionHandler:");
}

id objc_msgSend__fetchAuthContextWithUserResponse_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAuthContextWithUserResponse:client:completion:");
}

id objc_msgSend__fetchAuthModeInfoWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAuthModeInfoWithContext:completion:");
}

id objc_msgSend__fetchBagFromNetworkWithRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchBagFromNetworkWithRequest:completion:");
}

id objc_msgSend__fetchCredentialsForAssociatedDomains_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCredentialsForAssociatedDomains:completion:");
}

id objc_msgSend__fetchDeveloperTeamWithClientID_withAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDeveloperTeamWithClientID:withAltDSID:");
}

id objc_msgSend__fetchDeveloperTeamWithTeamID_withAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDeveloperTeamWithTeamID:withAltDSID:");
}

id objc_msgSend__fetchDeviceListWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDeviceListWithContext:completion:");
}

id objc_msgSend__fetchDeviceSafetyRestrictionStateForAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDeviceSafetyRestrictionStateForAltDSID:completion:");
}

id objc_msgSend__fetchIDSCertificateWithContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchIDSCertificateWithContext:completionHandler:");
}

id objc_msgSend__fetchMDMInformationFromDeviceManagementClient(void *a1, const char *a2, ...)
{
  return _[a1 _fetchMDMInformationFromDeviceManagementClient];
}

id objc_msgSend__fetchPhoneInformationWithAdditionalInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPhoneInformationWithAdditionalInfo:error:");
}

id objc_msgSend__fetchSafariCredentialsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSafariCredentialsWithCompletion:");
}

id objc_msgSend__fetchSurrogateForClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSurrogateForClientBundleID:");
}

id objc_msgSend__fetchSurrogateWithRegistrationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSurrogateWithRegistrationID:");
}

id objc_msgSend__fetchTVAppIcon(void *a1, const char *a2, ...)
{
  return _[a1 _fetchTVAppIcon];
}

id objc_msgSend__fetchTokensForServiceIDs_withUsername_altDSID_masterToken_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchTokensForServiceIDs:withUsername:altDSID:masterToken:context:completion:");
}

id objc_msgSend__fetchUserInformationForAltDSID_client_dataCenter_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUserInformationForAltDSID:client:dataCenter:completion:");
}

id objc_msgSend__fetchUserInformationWithContext_client_dataCenter_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUserInformationWithContext:client:dataCenter:completion:");
}

id objc_msgSend__finalizeStatement_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalizeStatement:error:");
}

id objc_msgSend__finishAnalyticsEvent_authenticationResults_authenticationContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishAnalyticsEvent:authenticationResults:authenticationContext:error:");
}

id objc_msgSend__finishProcessingPushPayload_withReplyContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishProcessingPushPayload:withReplyContext:completion:");
}

id objc_msgSend__formattedValueForPhoneNumber_countryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formattedValueForPhoneNumber:countryCode:");
}

id objc_msgSend__generateLoginCodeForAccount_withIncomingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateLoginCodeForAccount:withIncomingMessage:");
}

id objc_msgSend__generateSecret(void *a1, const char *a2, ...)
{
  return _[a1 _generateSecret];
}

id objc_msgSend__generateTTL(void *a1, const char *a2, ...)
{
  return _[a1 _generateTTL];
}

id objc_msgSend__getAttestationData_rk_dak_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getAttestationData:rk:dak:error:");
}

id objc_msgSend__getConfigsFromCache_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getConfigsFromCache:context:completion:");
}

id objc_msgSend__getDCRTWithContext_renewDCRT_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getDCRTWithContext:renewDCRT:completion:");
}

id objc_msgSend__getLocalAndSharedCredentialStateWithStateRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getLocalAndSharedCredentialStateWithStateRequest:completion:");
}

id objc_msgSend__getLocalCredentialStateWithStateRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getLocalCredentialStateWithStateRequest:completion:");
}

id objc_msgSend__getPresentationContextForRequestContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getPresentationContextForRequestContext:client:completion:");
}

id objc_msgSend__getSharedCredentialStateRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSharedCredentialStateRequest:completion:");
}

id objc_msgSend__grabLockAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _grabLockAssertion];
}

id objc_msgSend__handleAuthorizationDidFinishWithRequest_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAuthorizationDidFinishWithRequest:options:responseHandler:");
}

id objc_msgSend__handleBasicLoginUICompletionWithUsername_password_context_additionalData_collectionError_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBasicLoginUICompletionWithUsername:password:context:additionalData:collectionError:completion:");
}

id objc_msgSend__handleCheckInResponse_data_context_account_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCheckInResponse:data:context:account:error:completion:");
}

id objc_msgSend__handleCreateNewAppleIDError_withContext_andCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCreateNewAppleIDError:withContext:andCompletion:");
}

id objc_msgSend__handleCurrentDeviceTrustStatusChangedWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCurrentDeviceTrustStatusChangedWithPayload:");
}

id objc_msgSend__handleDatabaseFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDatabaseFailureError:");
}

id objc_msgSend__handleDidStartServerAuthorizationWithEvent_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDidStartServerAuthorizationWithEvent:options:");
}

id objc_msgSend__handleError_logMessage_withUIWorkBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleError:logMessage:withUIWorkBlock:");
}

id objc_msgSend__handleError_withServerResponse_context_andCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleError:withServerResponse:context:andCompletion:");
}

id objc_msgSend__handleFinishFidoResponse_data_context_recoveryToken_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFinishFidoResponse:data:context:recoveryToken:error:completion:");
}

id objc_msgSend__handleFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFoundDevice:");
}

id objc_msgSend__handleIdentityProviderResponsePayload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIdentityProviderResponsePayload:completion:");
}

id objc_msgSend__handleIncomingCommandMessage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIncomingCommandMessage:completion:");
}

id objc_msgSend__handleInvalidMasterTokenWithSubErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInvalidMasterTokenWithSubErrorCode:");
}

id objc_msgSend__handleKeychainSharingGroupUpdateNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handleKeychainSharingGroupUpdateNotification];
}

id objc_msgSend__handleMissingUsernameOrPasswordForContext_password_username_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMissingUsernameOrPasswordForContext:password:username:completion:");
}

id objc_msgSend__handlePasswordlessAuthResults_context_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePasswordlessAuthResults:context:error:completion:");
}

id objc_msgSend__handleRecoverCredentialsError_withContext_event_andCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRecoverCredentialsError:withContext:event:andCompletion:");
}

id objc_msgSend__handleResult_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleResult:forAccount:");
}

id objc_msgSend__handleRevokedApplicationsForVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRevokedApplicationsForVersion:");
}

id objc_msgSend__handleSecondFactorUICompletionWithCode_error_idmsData_piggybacking_initialAuthResponse_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSecondFactorUICompletionWithCode:error:idmsData:piggybacking:initialAuthResponse:context:completion:");
}

id objc_msgSend__handleStartAuthorizationWithResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStartAuthorizationWithResponse:");
}

id objc_msgSend__handleStartAuthorizingWithRequest_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStartAuthorizingWithRequest:options:responseHandler:");
}

id objc_msgSend__handleStartFidoAuthWithContext_fidoContext_serverResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStartFidoAuthWithContext:fidoContext:serverResponse:completion:");
}

id objc_msgSend__handleStartFidoResponse_data_context_recoveryToken_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStartFidoResponse:data:context:recoveryToken:error:completion:");
}

id objc_msgSend__handleSuccessfulVerificationForContext_withResults_serverResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSuccessfulVerificationForContext:withResults:serverResponse:completion:");
}

id objc_msgSend__handleVerificationCompletionForUsername_password_serverResponse_didShowServerUI_continuationData_error_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVerificationCompletionForUsername:password:serverResponse:didShowServerUI:continuationData:error:context:completion:");
}

id objc_msgSend__handleVerificationError_forContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVerificationError:forContext:completion:");
}

id objc_msgSend__handleVerificationError_withContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVerificationError:withContext:completion:");
}

id objc_msgSend__harvestCommonFieldsFromBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_harvestCommonFieldsFromBody:");
}

id objc_msgSend__harvestCommonFieldsFromResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_harvestCommonFieldsFromResponse:");
}

id objc_msgSend__harvestManagedAppleIDInfoFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_harvestManagedAppleIDInfoFromDictionary:");
}

id objc_msgSend__hasActiveAppAuths(void *a1, const char *a2, ...)
{
  return _[a1 _hasActiveAppAuths];
}

id objc_msgSend__hasActiveAuthenticatedRequests(void *a1, const char *a2, ...)
{
  return _[a1 _hasActiveAuthenticatedRequests];
}

id objc_msgSend__hasActiveDaemonAuths(void *a1, const char *a2, ...)
{
  return _[a1 _hasActiveDaemonAuths];
}

id objc_msgSend__hasPrimaryiCloudAccountForPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasPrimaryiCloudAccountForPayload:");
}

id objc_msgSend__hasSessionTimedOutForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasSessionTimedOutForRequest:");
}

id objc_msgSend__hasSharedAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _hasSharedAccounts];
}

id objc_msgSend__hashKeyIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hashKeyIfNecessary:");
}

id objc_msgSend__headersToSignFromRequestData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headersToSignFromRequestData:");
}

id objc_msgSend__helperServiceForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helperServiceForDevice:");
}

id objc_msgSend__hostSignData_signatureKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hostSignData:signatureKey:completion:");
}

id objc_msgSend__hostSignDataList_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hostSignDataList:completion:");
}

id objc_msgSend__httpDateFormatter(void *a1, const char *a2, ...)
{
  return _[a1 _httpDateFormatter];
}

id objc_msgSend__iconData(void *a1, const char *a2, ...)
{
  return _[a1 _iconData];
}

id objc_msgSend__iconName(void *a1, const char *a2, ...)
{
  return _[a1 _iconName];
}

id objc_msgSend__iconScale(void *a1, const char *a2, ...)
{
  return _[a1 _iconScale];
}

id objc_msgSend__iconSize(void *a1, const char *a2, ...)
{
  return _[a1 _iconSize];
}

id objc_msgSend__identifier(void *a1, const char *a2, ...)
{
  return _[a1 _identifier];
}

id objc_msgSend__identityAuthorizationPayload(void *a1, const char *a2, ...)
{
  return _[a1 _identityAuthorizationPayload];
}

id objc_msgSend__identityToken(void *a1, const char *a2, ...)
{
  return _[a1 _identityToken];
}

id objc_msgSend__idmsEDPTokenIdChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idmsEDPTokenIdChangedForAccount:userInformation:");
}

id objc_msgSend__ignoreShouldContinueProxy(void *a1, const char *a2, ...)
{
  return _[a1 _ignoreShouldContinueProxy];
}

id objc_msgSend__inMemoryTokensForAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inMemoryTokensForAccounts:");
}

id objc_msgSend__incrementAttemptsForContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_incrementAttemptsForContext:error:");
}

id objc_msgSend__incrementCounter(void *a1, const char *a2, ...)
{
  return _[a1 _incrementCounter];
}

id objc_msgSend__incrementQueueSize(void *a1, const char *a2, ...)
{
  return _[a1 _incrementQueueSize];
}

id objc_msgSend__initWithKeychain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithKeychain:");
}

id objc_msgSend__initiateAuthorizationWithRequestContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiateAuthorizationWithRequestContext:completion:");
}

id objc_msgSend__initiateEDPRepairForAuthenticationContext_authResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiateEDPRepairForAuthenticationContext:authResults:");
}

id objc_msgSend__initiatePiggybackingWithCleanSession_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiatePiggybackingWithCleanSession:withCompletion:");
}

id objc_msgSend__initiateRapportAuthorizationWithRequestContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initiateRapportAuthorizationWithRequestContext:completion:");
}

id objc_msgSend__insertScheduledRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertScheduledRequest:");
}

id objc_msgSend__internalCredentialStateForUserState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_internalCredentialStateForUserState:error:");
}

id objc_msgSend__interpolatedReason(void *a1, const char *a2, ...)
{
  return _[a1 _interpolatedReason];
}

id objc_msgSend__invalidate(void *a1, const char *a2, ...)
{
  return _[a1 _invalidate];
}

id objc_msgSend__invalidateScheduledRequest_withErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateScheduledRequest:withErrorCode:");
}

id objc_msgSend__invokeClearanceRequest_urlBag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invokeClearanceRequest:urlBag:error:");
}

id objc_msgSend__invokeTrafficRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invokeTrafficRequest:");
}

id objc_msgSend__isAppleBinary(void *a1, const char *a2, ...)
{
  return _[a1 _isAppleBinary];
}

id objc_msgSend__isAuthorizingForSharedSIWAAccount(void *a1, const char *a2, ...)
{
  return _[a1 _isAuthorizingForSharedSIWAAccount];
}

id objc_msgSend__isAuthorizingUsingSharedAccount(void *a1, const char *a2, ...)
{
  return _[a1 _isAuthorizingUsingSharedAccount];
}

id objc_msgSend__isBackgroundClient_eligibleForForegroundAuthenticationWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackgroundClient:eligibleForForegroundAuthenticationWithContext:");
}

id objc_msgSend__isBiometricRatchetStatusChangeDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBiometricRatchetStatusChangeDarwinNotification:");
}

id objc_msgSend__isCachedAttestation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCachedAttestation:");
}

id objc_msgSend__isCapableOfSilentAuthForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCapableOfSilentAuthForRequest:");
}

id objc_msgSend__isClientEntitledForAuthMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isClientEntitledForAuthMode:");
}

id objc_msgSend__isClientWaitingForSurrogateAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isClientWaitingForSurrogateAuth:");
}

id objc_msgSend__isDeviceScreenUnlockNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDeviceScreenUnlockNotification:");
}

id objc_msgSend__isEligibleForUpgradeFromPassword(void *a1, const char *a2, ...)
{
  return _[a1 _isEligibleForUpgradeFromPassword];
}

id objc_msgSend__isFetchingIconWithRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isFetchingIconWithRequestContext:");
}

id objc_msgSend__isFirstPartyLogin(void *a1, const char *a2, ...)
{
  return _[a1 _isFirstPartyLogin];
}

id objc_msgSend__isForcedEligibleForForegroundAuthentication(void *a1, const char *a2, ...)
{
  return _[a1 _isForcedEligibleForForegroundAuthentication];
}

id objc_msgSend__isForegroundAuthenticationInProgress(void *a1, const char *a2, ...)
{
  return _[a1 _isForegroundAuthenticationInProgress];
}

id objc_msgSend__isFullUICapabilityRequiredFor2FA(void *a1, const char *a2, ...)
{
  return _[a1 _isFullUICapabilityRequiredFor2FA];
}

id objc_msgSend__isInteractiveAuthRequiredForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInteractiveAuthRequiredForContext:");
}

id objc_msgSend__isKeychainSharingGroupUpdateDarwinNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isKeychainSharingGroupUpdateDarwinNotification:");
}

id objc_msgSend__isMatchingMIDDriftedErrorDictionary_ttrConfigMIDDriftedErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isMatchingMIDDriftedErrorDictionary:ttrConfigMIDDriftedErrors:");
}

id objc_msgSend__isOnInternalBuild(void *a1, const char *a2, ...)
{
  return _[a1 _isOnInternalBuild];
}

id objc_msgSend__isPCSAccessForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPCSAccessForContext:");
}

id objc_msgSend__isPasscodeChangeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPasscodeChangeNotification:");
}

id objc_msgSend__isPasswordPromptNecessaryForCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPasswordPromptNecessaryForCommand:");
}

id objc_msgSend__isPrimaryAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPrimaryAccount:");
}

id objc_msgSend__isPrimaryAccountAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPrimaryAccountAltDSID:");
}

id objc_msgSend__isProxyingForApp(void *a1, const char *a2, ...)
{
  return _[a1 _isProxyingForApp];
}

id objc_msgSend__isRapportLogin(void *a1, const char *a2, ...)
{
  return _[a1 _isRapportLogin];
}

id objc_msgSend__isSilentAppTransfer(void *a1, const char *a2, ...)
{
  return _[a1 _isSilentAppTransfer];
}

id objc_msgSend__isSubscriptionLogin(void *a1, const char *a2, ...)
{
  return _[a1 _isSubscriptionLogin];
}

id objc_msgSend__isTTRConfigMatchingMIDDriftedErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTTRConfigMatchingMIDDriftedErrors:");
}

id objc_msgSend__isTTREligibleForMIDDriftedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTTREligibleForMIDDriftedError:");
}

id objc_msgSend__isTouchIDRequiredForGrandSlamServiceTokenWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTouchIDRequiredForGrandSlamServiceTokenWithID:");
}

id objc_msgSend__isWebLogin(void *a1, const char *a2, ...)
{
  return _[a1 _isWebLogin];
}

id objc_msgSend__issueDCRT_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_issueDCRT:completion:");
}

id objc_msgSend__keepAlive(void *a1, const char *a2, ...)
{
  return _[a1 _keepAlive];
}

id objc_msgSend__keepLoginAliveWithContext_error_andCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keepLoginAliveWithContext:error:andCompletion:");
}

id objc_msgSend__keychainAccessibleWithAccessible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keychainAccessibleWithAccessible:");
}

id objc_msgSend__keychainClassWithClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keychainClassWithClass:");
}

id objc_msgSend__keychainItemForContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keychainItemForContext:error:");
}

id objc_msgSend__lastKnownMIDDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 _lastKnownMIDDescriptor];
}

id objc_msgSend__lastKnownMIDWithKeychainError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastKnownMIDWithKeychainError:");
}

id objc_msgSend__launchAppleIDSettingsForContext_withCheckinID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchAppleIDSettingsForContext:withCheckinID:");
}

id objc_msgSend__launchViewServiceWithUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchViewServiceWithUserInfo:");
}

id objc_msgSend__livenessEligibleAccounts(void *a1, const char *a2, ...)
{
  return _[a1 _livenessEligibleAccounts];
}

id objc_msgSend__localUserHasEmptyPassword(void *a1, const char *a2, ...)
{
  return _[a1 _localUserHasEmptyPassword];
}

id objc_msgSend__locationNameWithLatitude_longitude_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locationNameWithLatitude:longitude:completion:");
}

id objc_msgSend__loginAlertForAccount_latitude_longitude_message_resolvedBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loginAlertForAccount:latitude:longitude:message:resolvedBody:");
}

id objc_msgSend__loginAlertOptionsForAccount_latitude_longitude_message_resolvedBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loginAlertOptionsForAccount:latitude:longitude:message:resolvedBody:");
}

id objc_msgSend__loginHandlesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loginHandlesChangedForAccount:userInformation:");
}

id objc_msgSend__loginNotificationOptionsWithContext_isSilent_defaultButtonTitle_alternateButtonTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loginNotificationOptionsWithContext:isSilent:defaultButtonTitle:alternateButtonTitle:");
}

id objc_msgSend__machineSignDataList_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_machineSignDataList:completion:");
}

id objc_msgSend__managedAppleIDInfoChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_managedAppleIDInfoChangedForAccount:userInformation:");
}

id objc_msgSend__masterKey(void *a1, const char *a2, ...)
{
  return _[a1 _masterKey];
}

id objc_msgSend__masterKeyAsSecondFactor(void *a1, const char *a2, ...)
{
  return _[a1 _masterKeyAsSecondFactor];
}

id objc_msgSend__matchingServiceAccountForAuthKitAccount_service_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_matchingServiceAccountForAuthKitAccount:service:");
}

id objc_msgSend__message(void *a1, const char *a2, ...)
{
  return _[a1 _message];
}

id objc_msgSend__messageSupportsAlerts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_messageSupportsAlerts:");
}

id objc_msgSend__mhq_handleIncomingReplyMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mhq_handleIncomingReplyMessage:");
}

id objc_msgSend__migrateToSchemaVersion2(void *a1, const char *a2, ...)
{
  return _[a1 _migrateToSchemaVersion2];
}

id objc_msgSend__migrateToSchemaVersion3(void *a1, const char *a2, ...)
{
  return _[a1 _migrateToSchemaVersion3];
}

id objc_msgSend__migrateToSchemaVersion4(void *a1, const char *a2, ...)
{
  return _[a1 _migrateToSchemaVersion4];
}

id objc_msgSend__migrateToSchemaVersion5(void *a1, const char *a2, ...)
{
  return _[a1 _migrateToSchemaVersion5];
}

id objc_msgSend__monitorXPCEvents(void *a1, const char *a2, ...)
{
  return _[a1 _monitorXPCEvents];
}

id objc_msgSend__nativeAnisetteService(void *a1, const char *a2, ...)
{
  return _[a1 _nativeAnisetteService];
}

id objc_msgSend__newZStringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newZStringWithString:");
}

id objc_msgSend__nextClearedRequest(void *a1, const char *a2, ...)
{
  return _[a1 _nextClearedRequest];
}

id objc_msgSend__nextScheduledRequest(void *a1, const char *a2, ...)
{
  return _[a1 _nextScheduledRequest];
}

id objc_msgSend__normalizedMIDDriftedError_underlyingLevel_midDriftedErrorDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_normalizedMIDDriftedError:underlyingLevel:midDriftedErrorDict:");
}

id objc_msgSend__notificationDictionaryForClient_context_needFullUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationDictionaryForClient:context:needFullUI:");
}

id objc_msgSend__notificationResultFromButtonPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationResultFromButtonPressed:");
}

id objc_msgSend__notifyCredentialStateChange_forApplicationWithClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyCredentialStateChange:forApplicationWithClientID:");
}

id objc_msgSend__notifyDelegatesOfMessageActivation_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegatesOfMessageActivation:result:");
}

id objc_msgSend__notifyDelegatesOfMessageActivation_result_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegatesOfMessageActivation:result:payload:");
}

id objc_msgSend__notifyOfTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _notifyOfTimeout];
}

id objc_msgSend__notifyServerOfTeardownWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyServerOfTeardownWithContext:completion:");
}

id objc_msgSend__numberFormatter(void *a1, const char *a2, ...)
{
  return _[a1 _numberFormatter];
}

id objc_msgSend__optionalValueWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optionalValueWithString:");
}

id objc_msgSend__optionsForCreatingUserNotificationWithTitle_message_defaultButton_alternateButton_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_optionsForCreatingUserNotificationWithTitle:message:defaultButton:alternateButton:serviceType:");
}

id objc_msgSend__orderedDispatchingInfoKeys(void *a1, const char *a2, ...)
{
  return _[a1 _orderedDispatchingInfoKeys];
}

id objc_msgSend__pairedDeviceAnisetteService(void *a1, const char *a2, ...)
{
  return _[a1 _pairedDeviceAnisetteService];
}

id objc_msgSend__parseFailedServerResponse_withError_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseFailedServerResponse:withError:context:completion:");
}

id objc_msgSend__passcodeAuthPropertiesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passcodeAuthPropertiesChangedForAccount:userInformation:");
}

id objc_msgSend__passkeyPropertiesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passkeyPropertiesChangedForAccount:userInformation:");
}

id objc_msgSend__password(void *a1, const char *a2, ...)
{
  return _[a1 _password];
}

id objc_msgSend__passwordResetBackupToken(void *a1, const char *a2, ...)
{
  return _[a1 _passwordResetBackupToken];
}

id objc_msgSend__passwordResetToken(void *a1, const char *a2, ...)
{
  return _[a1 _passwordResetToken];
}

id objc_msgSend__passwordVersionChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passwordVersionChangedForAccount:userInformation:");
}

id objc_msgSend__performAuthenticationWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAuthenticationWithContext:completion:");
}

id objc_msgSend__performBlockWithClient_context_requireFullUICapability_allowRedirectToSettings_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performBlockWithClient:context:requireFullUICapability:allowRedirectToSettings:block:");
}

id objc_msgSend__performCommandForMessage_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCommandForMessage:forAccount:");
}

id objc_msgSend__performDeviceListRequestWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performDeviceListRequestWithContext:completion:");
}

id objc_msgSend__performFetchSiwAHmeRequestWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performFetchSiwAHmeRequestWithContext:completion:");
}

id objc_msgSend__performFidoStartAuthActionWithContext_serverResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performFidoStartAuthActionWithContext:serverResponse:completion:");
}

id objc_msgSend__performGrandslamEndpointActionWithContext_serverResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performGrandslamEndpointActionWithContext:serverResponse:completion:");
}

id objc_msgSend__performInsertQueryIntoVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performInsertQueryIntoVersion:");
}

id objc_msgSend__performInteractiveAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performInteractiveAuthWithContext:completion:");
}

id objc_msgSend__performInteractiveFederatedAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performInteractiveFederatedAuthWithContext:completion:");
}

id objc_msgSend__performLivenessCheckInForAllEligibleAccountsWithReason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performLivenessCheckInForAllEligibleAccountsWithReason:completion:");
}

id objc_msgSend__performLivenessCheckInForAllEligibleAccountsWithToken_reason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performLivenessCheckInForAllEligibleAccountsWithToken:reason:completion:");
}

id objc_msgSend__performPasskeyCleanupWithPasskeyValidator_authenticationController_accountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPasskeyCleanupWithPasskeyValidator:authenticationController:accountManager:");
}

id objc_msgSend__performPasswordlessSRPAuthWithAccount_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPasswordlessSRPAuthWithAccount:context:completion:");
}

id objc_msgSend__performPasswordlessSRPAuthWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPasswordlessSRPAuthWithContext:client:completion:");
}

id objc_msgSend__performPasswordlessSRPAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPasswordlessSRPAuthWithContext:completion:");
}

id objc_msgSend__performPostInstallWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPostInstallWithCompletion:");
}

id objc_msgSend__performRegisterRequestWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRegisterRequestWithContext:completion:");
}

id objc_msgSend__performRemoteCommand_argument_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRemoteCommand:argument:completion:");
}

id objc_msgSend__performRepairWithContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRepairWithContext:completionHandler:");
}

id objc_msgSend__performRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRequest:completion:");
}

id objc_msgSend__performRequestForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRequestForContext:completion:");
}

id objc_msgSend__performRequestWithContext_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRequestWithContext:responseHandler:");
}

id objc_msgSend__performRequestWithURL_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRequestWithURL:context:error:");
}

id objc_msgSend__performSRPAuthenticationWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSRPAuthenticationWithContext:completion:");
}

id objc_msgSend__performSRPAuthorizationForUserResponse_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSRPAuthorizationForUserResponse:client:completion:");
}

id objc_msgSend__performSafeSRPAuthenticationWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSafeSRPAuthenticationWithContext:completion:");
}

id objc_msgSend__performSecondaryActionWithServerResponse_context_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSecondaryActionWithServerResponse:context:client:completion:");
}

id objc_msgSend__performSecondaryActionWithServerResponse_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSecondaryActionWithServerResponse:context:completion:");
}

id objc_msgSend__performSilentRequest_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSilentRequest:withCompletion:");
}

id objc_msgSend__performSilentServiceTokenAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSilentServiceTokenAuthWithContext:completion:");
}

id objc_msgSend__performSilentTTRForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSilentTTRForRequest:completion:");
}

id objc_msgSend__performTokenUpgradeWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTokenUpgradeWithContext:completion:");
}

id objc_msgSend__performUIOutOfProcess(void *a1, const char *a2, ...)
{
  return _[a1 _performUIOutOfProcess];
}

id objc_msgSend__permitedProcessNamesToProxyInitialAuthWhiteList(void *a1, const char *a2, ...)
{
  return _[a1 _permitedProcessNamesToProxyInitialAuthWhiteList];
}

id objc_msgSend__permittedProcessNamesForInteractiveAuthOnLimitedContext(void *a1, const char *a2, ...)
{
  return _[a1 _permittedProcessNamesForInteractiveAuthOnLimitedContext];
}

id objc_msgSend__permittedProcessNamesToProxyAllowlist(void *a1, const char *a2, ...)
{
  return _[a1 _permittedProcessNamesToProxyAllowlist];
}

id objc_msgSend__persistGrandSlamServiceTokens_forAltDSID_DSID_appleID_forContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistGrandSlamServiceTokens:forAltDSID:DSID:appleID:forContext:error:");
}

id objc_msgSend__piggybackingApprovalEligibleChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_piggybackingApprovalEligibleChangedForAccount:userInformation:");
}

id objc_msgSend__postApplicationsListChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _postApplicationsListChangedNotification];
}

id objc_msgSend__postUserInfoChangedNotificationWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postUserInfoChangedNotificationWithPayload:");
}

id objc_msgSend__prepareRequestContext_forCredentialState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareRequestContext:forCredentialState:");
}

id objc_msgSend__prepareStatementForQuery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareStatementForQuery:error:");
}

id objc_msgSend__presentUI(void *a1, const char *a2, ...)
{
  return _[a1 _presentUI];
}

id objc_msgSend__presentUIWithControllerClassName_extraOptions_presentationServiceCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentUIWithControllerClassName:extraOptions:presentationServiceCompletion:");
}

id objc_msgSend__presenterQueue(void *a1, const char *a2, ...)
{
  return _[a1 _presenterQueue];
}

id objc_msgSend__printStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_printStatement:");
}

id objc_msgSend__processCachedUserInputWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCachedUserInputWithContext:completion:");
}

id objc_msgSend__processClearanceRequest_withClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processClearanceRequest:withClient:");
}

id objc_msgSend__processCodeEntryErrorWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCodeEntryErrorWithContext:completion:");
}

id objc_msgSend__processCredentialStateChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCredentialStateChanges:");
}

id objc_msgSend__processCredentialStateChanges_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCredentialStateChanges:completion:");
}

id objc_msgSend__processDictionary_addedPrivateEmails_removedPrivateEmails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processDictionary:addedPrivateEmails:removedPrivateEmails:");
}

id objc_msgSend__processEndProvisioningData_withResponse_error_previousTransactionId_cpimBytes_provisioningContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processEndProvisioningData:withResponse:error:previousTransactionId:cpimBytes:provisioningContext:completion:");
}

id objc_msgSend__processFetchCompletionForAltDSID_items_fetchError_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFetchCompletionForAltDSID:items:fetchError:completion:");
}

id objc_msgSend__processHandshakeWithContext_handshakeReply_andHandshakeError_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processHandshakeWithContext:handshakeReply:andHandshakeError:withCompletion:");
}

id objc_msgSend__processHideMyEmailForAltDSID_userInfo_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processHideMyEmailForAltDSID:userInfo:response:");
}

id objc_msgSend__processIncomingUserInformationForAltDSID_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processIncomingUserInformationForAltDSID:userInformation:");
}

id objc_msgSend__processMessageWithDelegates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processMessageWithDelegates:");
}

id objc_msgSend__processPendingCompletionsForPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processPendingCompletionsForPayload:");
}

id objc_msgSend__processPendingRequests(void *a1, const char *a2, ...)
{
  return _[a1 _processPendingRequests];
}

id objc_msgSend__processPiggybackPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processPiggybackPayload:");
}

id objc_msgSend__processProximityDetection_withReplyContext_forPushPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processProximityDetection:withReplyContext:forPushPayload:");
}

id objc_msgSend__processSyncAnisetteResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSyncAnisetteResponse:completion:");
}

id objc_msgSend__processUIIfNeededForError_circleStep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processUIIfNeededForError:circleStep:");
}

id objc_msgSend__processUserResponse_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processUserResponse:client:completion:");
}

id objc_msgSend__processValidationCodeSuccessResponse_authResponse_results_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processValidationCodeSuccessResponse:authResponse:results:completion:");
}

id objc_msgSend__processingTimeOut(void *a1, const char *a2, ...)
{
  return _[a1 _processingTimeOut];
}

id objc_msgSend__promptForAuthenticationPasswordForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_promptForAuthenticationPasswordForAccount:completion:");
}

id objc_msgSend__promptForChangePasswordForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_promptForChangePasswordForAccount:");
}

id objc_msgSend__promptForSecretWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_promptForSecretWithContext:completion:");
}

id objc_msgSend__provideServiceTokensIfRequiredForContext_authenticationResults_serverResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_provideServiceTokensIfRequiredForContext:authenticationResults:serverResponse:completion:");
}

id objc_msgSend__proxiedAppBundleID(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedAppBundleID];
}

id objc_msgSend__proxiedAppName(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedAppName];
}

id objc_msgSend__proxiedAssociatedDomains(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedAssociatedDomains];
}

id objc_msgSend__proxiedClientAppID(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedClientAppID];
}

id objc_msgSend__proxiedClientBundleID(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedClientBundleID];
}

id objc_msgSend__proxiedClientServiceID(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedClientServiceID];
}

id objc_msgSend__proxiedClientTeamID(void *a1, const char *a2, ...)
{
  return _[a1 _proxiedClientTeamID];
}

id objc_msgSend__publicAPSToken(void *a1, const char *a2, ...)
{
  return _[a1 _publicAPSToken];
}

id objc_msgSend__pushCommandsPostingCFUserNotification(void *a1, const char *a2, ...)
{
  return _[a1 _pushCommandsPostingCFUserNotification];
}

id objc_msgSend__queryDelegatesForSuppressAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryDelegatesForSuppressAction:");
}

id objc_msgSend__reauthenticateAndExecuteWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reauthenticateAndExecuteWithCompletion:");
}

id objc_msgSend__reauthenticateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reauthenticateWithCompletion:");
}

id objc_msgSend__receiveResponseFromNotification_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_receiveResponseFromNotification:handler:");
}

id objc_msgSend__recoverCredentialsAndAuthenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recoverCredentialsAndAuthenticateWithContext:completion:");
}

id objc_msgSend__recoveryContextFromServerInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recoveryContextFromServerInfo:error:");
}

id objc_msgSend__refreshApplicationInformationForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshApplicationInformationForAltDSID:");
}

id objc_msgSend__refreshAuthModeFromServerForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshAuthModeFromServerForContext:completion:");
}

id objc_msgSend__refreshAuthModeIfNecessaryForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshAuthModeIfNecessaryForContext:completion:");
}

id objc_msgSend__refreshDeviceListForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshDeviceListForAltDSID:");
}

id objc_msgSend__refreshFollowUpsWithIdmsInfo_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshFollowUpsWithIdmsInfo:context:completion:");
}

id objc_msgSend__refreshLocalAccountAndUpdateContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshLocalAccountAndUpdateContext:completion:");
}

id objc_msgSend__releaseAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _releaseAssertion];
}

id objc_msgSend__removeAcceptingControllerForTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAcceptingControllerForTransaction:");
}

id objc_msgSend__removeAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAccounts:");
}

id objc_msgSend__removeAllExpiredPCSCredentials(void *a1, const char *a2, ...)
{
  return _[a1 _removeAllExpiredPCSCredentials];
}

id objc_msgSend__removeAllRawPasswordCaches(void *a1, const char *a2, ...)
{
  return _[a1 _removeAllRawPasswordCaches];
}

id objc_msgSend__removeAuthenticationRequestForContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAuthenticationRequestForContext:client:");
}

id objc_msgSend__removeConnectionWithProtocol_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeConnectionWithProtocol:forBundleID:");
}

id objc_msgSend__removeCredentialWithDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCredentialWithDescriptor:");
}

id objc_msgSend__renewDCRTWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_renewDCRTWithContext:completion:");
}

id objc_msgSend__repairAppleIDWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repairAppleIDWithContext:completion:");
}

id objc_msgSend__replyToCommandMessageWithInternalID_didSucceed_returnData_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replyToCommandMessageWithInternalID:didSucceed:returnData:error:completion:");
}

id objc_msgSend__reportBAASigningForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportBAASigningForEvent:");
}

id objc_msgSend__reportPacTelemetryForEvent_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportPacTelemetryForEvent:context:error:");
}

id objc_msgSend__reportTokenWithTelemetryID_account_telemetryFlowID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reportTokenWithTelemetryID:account:telemetryFlowID:error:");
}

id objc_msgSend__reprovisionAnisetteWithServerResponse_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reprovisionAnisetteWithServerResponse:context:completion:");
}

id objc_msgSend__requestBodyForUpgradeRevokeContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestBodyForUpgradeRevokeContext:");
}

id objc_msgSend__requestProvider_client_dataCenter_urlBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestProvider:client:dataCenter:urlBagKey:");
}

id objc_msgSend__requestingControllerWithServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestingControllerWithServerResponse:");
}

id objc_msgSend__requirePassword(void *a1, const char *a2, ...)
{
  return _[a1 _requirePassword];
}

id objc_msgSend__resyncAnisetteWithServerResponse_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resyncAnisetteWithServerResponse:context:completion:");
}

id objc_msgSend__retrieveDAK_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveDAK:error:");
}

id objc_msgSend__safePerformSRPWithUserResponse_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_safePerformSRPWithUserResponse:client:completion:");
}

id objc_msgSend__safeTTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_safeTTL:");
}

id objc_msgSend__sanitizeContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizeContext:");
}

id objc_msgSend__sanitizedCopy(void *a1, const char *a2, ...)
{
  return _[a1 _sanitizedCopy];
}

id objc_msgSend__sanitizedCredentialStateForExternalClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizedCredentialStateForExternalClients:");
}

id objc_msgSend__saveAccount_userInfoDictionary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveAccount:userInfoDictionary:error:");
}

id objc_msgSend__saveAuthMode_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveAuthMode:withContext:");
}

id objc_msgSend__scheduleNextRequest(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleNextRequest];
}

id objc_msgSend__schemaVersion(void *a1, const char *a2, ...)
{
  return _[a1 _schemaVersion];
}

id objc_msgSend__securityKeysChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_securityKeysChangedForAccount:userInformation:");
}

id objc_msgSend__sendAnalyticsEvent_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAnalyticsEvent:withError:");
}

id objc_msgSend__sendAttestedOSVersionWithContext_attestationNonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAttestedOSVersionWithContext:attestationNonce:");
}

id objc_msgSend__sendAuthorizationDidFinishRequestWithAuthorization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAuthorizationDidFinishRequestWithAuthorization:");
}

id objc_msgSend__sendAuthorizationDidFinishRequestWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAuthorizationDidFinishRequestWithError:");
}

id objc_msgSend__sendDeviceCancelledReplyWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendDeviceCancelledReplyWithContext:");
}

id objc_msgSend__sendDidTapNotificationMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendDidTapNotificationMessage];
}

id objc_msgSend__sendPermissionRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPermissionRequestWithCompletion:");
}

id objc_msgSend__sendStartAuthorizationRequest(void *a1, const char *a2, ...)
{
  return _[a1 _sendStartAuthorizationRequest];
}

id objc_msgSend__sendTrustedDeviceListChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 _sendTrustedDeviceListChangeNotification];
}

id objc_msgSend__serverTimeAdjustment(void *a1, const char *a2, ...)
{
  return _[a1 _serverTimeAdjustment];
}

id objc_msgSend__serviceControllerWithProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serviceControllerWithProvider:");
}

id objc_msgSend__serviceIDForRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serviceIDForRequestContext:");
}

id objc_msgSend__sessionID(void *a1, const char *a2, ...)
{
  return _[a1 _sessionID];
}

id objc_msgSend__setAuthKitAccount_inUse_forService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAuthKitAccount:inUse:forService:completion:");
}

id objc_msgSend__setCheckInAllowedToValue_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCheckInAllowedToValue:forAccount:");
}

id objc_msgSend__setConnection_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConnection:forBundleID:");
}

id objc_msgSend__setCurrentSharingMode(void *a1, const char *a2, ...)
{
  return _[a1 _setCurrentSharingMode];
}

id objc_msgSend__setDataBlock_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDataBlock:forKey:");
}

id objc_msgSend__setDispatchingAlgorithm_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDispatchingAlgorithm:forInfo:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setHeartbeatToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHeartbeatToken:");
}

id objc_msgSend__setIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIdentityToken:");
}

id objc_msgSend__setLastKnownMID_keychainError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLastKnownMID:keychainError:");
}

id objc_msgSend__setMasterKeyAsSecondFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMasterKeyAsSecondFactor:");
}

id objc_msgSend__setMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setMessage:");
}

id objc_msgSend__setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPassword:");
}

id objc_msgSend__setPasswordEquivalentToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPasswordEquivalentToken:");
}

id objc_msgSend__setPreviousAccountInfoRefreshDate_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPreviousAccountInfoRefreshDate:forAccount:");
}

id objc_msgSend__setRemoteUIIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRemoteUIIdentityToken:");
}

id objc_msgSend__settingsPaneIDForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_settingsPaneIDForContext:");
}

id objc_msgSend__setupLoginChoicesForPresentationContext_sharedAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupLoginChoicesForPresentationContext:sharedAccounts:");
}

id objc_msgSend__setupServices(void *a1, const char *a2, ...)
{
  return _[a1 _setupServices];
}

id objc_msgSend__sharedAccount(void *a1, const char *a2, ...)
{
  return _[a1 _sharedAccount];
}

id objc_msgSend__sharedSIWAAccountGroupID(void *a1, const char *a2, ...)
{
  return _[a1 _sharedSIWAAccountGroupID];
}

id objc_msgSend__sharedSIWAAccountShareToken(void *a1, const char *a2, ...)
{
  return _[a1 _sharedSIWAAccountShareToken];
}

id objc_msgSend__shortLivedToken(void *a1, const char *a2, ...)
{
  return _[a1 _shortLivedToken];
}

id objc_msgSend__shouldAddBAAHeaders(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAddBAAHeaders];
}

id objc_msgSend__shouldAllowPCSKeyAccessForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAllowPCSKeyAccessForContext:");
}

id objc_msgSend__shouldBackgroundiCloudSignIn(void *a1, const char *a2, ...)
{
  return _[a1 _shouldBackgroundiCloudSignIn];
}

id objc_msgSend__shouldBroadcastForProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldBroadcastForProximity:");
}

id objc_msgSend__shouldBroadcastForProximityAuthOnly(void *a1, const char *a2, ...)
{
  return _[a1 _shouldBroadcastForProximityAuthOnly];
}

id objc_msgSend__shouldClearCKForFailedMagicAuthWithError_authContextHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldClearCKForFailedMagicAuthWithError:authContextHelper:");
}

id objc_msgSend__shouldClearLimitedUICapableAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldClearLimitedUICapableAuth:");
}

id objc_msgSend__shouldClearRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldClearRequest:");
}

id objc_msgSend__shouldClearUICapableAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldClearUICapableAuth:");
}

id objc_msgSend__shouldContinueAuthenticatingForUsername_password_serverResponse_didShowServerUI_continuationData_error_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldContinueAuthenticatingForUsername:password:serverResponse:didShowServerUI:continuationData:error:context:completion:");
}

id objc_msgSend__shouldContinueProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldContinueProcessing:");
}

id objc_msgSend__shouldEarlyReturnRequest_forCredentialState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldEarlyReturnRequest:forCredentialState:");
}

id objc_msgSend__shouldExcludeHostVIPForRequestData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldExcludeHostVIPForRequestData:completion:");
}

id objc_msgSend__shouldForcePrivateEmail(void *a1, const char *a2, ...)
{
  return _[a1 _shouldForcePrivateEmail];
}

id objc_msgSend__shouldForceUI(void *a1, const char *a2, ...)
{
  return _[a1 _shouldForceUI];
}

id objc_msgSend__shouldGetMDMInformationForAccount_accountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldGetMDMInformationForAccount:accountManager:");
}

id objc_msgSend__shouldGetMDMInformationForAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldGetMDMInformationForAuthContext:");
}

id objc_msgSend__shouldPostAnalyticsWithSamplingRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPostAnalyticsWithSamplingRate:");
}

id objc_msgSend__shouldProcessPushMessage_withAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldProcessPushMessage:withAccount:");
}

id objc_msgSend__shouldRefreshAccountAndUpdateContext(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRefreshAccountAndUpdateContext];
}

id objc_msgSend__shouldRequestToArmDeviceToAllowPCSKeyUpload(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRequestToArmDeviceToAllowPCSKeyUpload];
}

id objc_msgSend__shouldSendGrandSlamTokensForRemoteUI(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendGrandSlamTokensForRemoteUI];
}

id objc_msgSend__shouldSendIdentityTokenForRemoteUI(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendIdentityTokenForRemoteUI];
}

id objc_msgSend__shouldShowAlertForAuthModeError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowAlertForAuthModeError:");
}

id objc_msgSend__shouldSkipAccountUpdatesForAuthWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSkipAccountUpdatesForAuthWithContext:");
}

id objc_msgSend__shouldSkipAuthorizationUI(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSkipAuthorizationUI];
}

id objc_msgSend__shouldSkipBiometrics(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSkipBiometrics];
}

id objc_msgSend__shouldSkipInitialReachabilityCheck(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSkipInitialReachabilityCheck];
}

id objc_msgSend__shouldStartSatoriVerificationForRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldStartSatoriVerificationForRequestContext:");
}

id objc_msgSend__shouldUpdateConfigsForAltDSID_responseParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateConfigsForAltDSID:responseParameters:");
}

id objc_msgSend__shouldUpdateDatabaseToListVersion_withAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUpdateDatabaseToListVersion:withAltDSID:");
}

id objc_msgSend__shouldUseProxiedClientBundleIDForSRP(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseProxiedClientBundleIDForSRP];
}

id objc_msgSend__showAlertForLoginCodeValidationError_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAlertForLoginCodeValidationError:context:completion:");
}

id objc_msgSend__showAlertForLoginError_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAlertForLoginError:context:completion:");
}

id objc_msgSend__showAlertForVerificationError_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAlertForVerificationError:context:completion:");
}

id objc_msgSend__showBiometricOrPasscodeAuthWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showBiometricOrPasscodeAuthWithContext:completion:");
}

id objc_msgSend__showCode_body_title_footer_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showCode:body:title:footer:completion:");
}

id objc_msgSend__showContinueUsingUIWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showContinueUsingUIWithContext:completion:");
}

id objc_msgSend__showIdentityProviderUIFromResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showIdentityProviderUIFromResponse:completion:");
}

id objc_msgSend__showServerUIWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showServerUIWithContext:completion:");
}

id objc_msgSend__showServerUIWithURLRequest_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showServerUIWithURLRequest:context:completion:");
}

id objc_msgSend__showServerUIWithURLRequest_context_initialAuthResponse_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showServerUIWithURLRequest:context:initialAuthResponse:completion:");
}

id objc_msgSend__signRequestWithProvisioningHeaders_forUrlKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signRequestWithProvisioningHeaders:forUrlKey:");
}

id objc_msgSend__signWithBAAHeadersIfNeededForKey_withRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signWithBAAHeadersIfNeededForKey:withRequest:completion:");
}

id objc_msgSend__signWithProxiedDeviceHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signWithProxiedDeviceHeaders:");
}

id objc_msgSend__signatureForDataFields_withRefKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signatureForDataFields:withRefKey:error:");
}

id objc_msgSend__splitStringIntoChunks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_splitStringIntoChunks:");
}

id objc_msgSend__srpAuthContextHelperWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_srpAuthContextHelperWithContext:");
}

id objc_msgSend__srpProtocolChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_srpProtocolChangedForAccount:userInformation:");
}

id objc_msgSend__startChangePasswordFlowForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startChangePasswordFlowForAccount:");
}

id objc_msgSend__startFetchingIconForBundleID_size_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startFetchingIconForBundleID:size:scale:");
}

id objc_msgSend__startListeningForMessagesFromPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 _startListeningForMessagesFromPairedDevice];
}

id objc_msgSend__startMonitoringPushEvents(void *a1, const char *a2, ...)
{
  return _[a1 _startMonitoringPushEvents];
}

id objc_msgSend__startPasswordResetFlowForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPasswordResetFlowForAccount:");
}

id objc_msgSend__startProvisioningWithPreviousTransactionId_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startProvisioningWithPreviousTransactionId:completion:");
}

id objc_msgSend__startProximityControllerIfNeededWithPushPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startProximityControllerIfNeededWithPushPayload:");
}

id objc_msgSend__startProximityControllerWithPresenceSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startProximityControllerWithPresenceSID:");
}

id objc_msgSend__stepThroughRowsWithQuery_statement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stepThroughRowsWithQuery:statement:");
}

id objc_msgSend__stopObservingLanguageChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 _stopObservingLanguageChangeNotification];
}

id objc_msgSend__stopObservingRegulatoryEligibilityChangeNotification(void *a1, const char *a2, ...)
{
  return _[a1 _stopObservingRegulatoryEligibilityChangeNotification];
}

id objc_msgSend__stopObservingSharingModePolicyChangeNotfication(void *a1, const char *a2, ...)
{
  return _[a1 _stopObservingSharingModePolicyChangeNotfication];
}

id objc_msgSend__stopProximityController(void *a1, const char *a2, ...)
{
  return _[a1 _stopProximityController];
}

id objc_msgSend__stopProximityControllerIfNeededWithPushPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopProximityControllerIfNeededWithPushPayload:");
}

id objc_msgSend__stopWaitingForCheckInWithContext_andError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopWaitingForCheckInWithContext:andError:");
}

id objc_msgSend__storeConsentedApplication_teamID_listVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeConsentedApplication:teamID:listVersion:");
}

id objc_msgSend__storeDeveloperTeam_listVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeDeveloperTeam:listVersion:");
}

id objc_msgSend__strictlyUnarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_strictlyUnarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend__stringByAppendingBlameIfNecessary_withContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringByAppendingBlameIfNecessary:withContext:client:");
}

id objc_msgSend__stringValueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringValueForEntitlement:");
}

id objc_msgSend__syncAnisetteWithMIDData_srmData_routingInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncAnisetteWithMIDData:srmData:routingInfo:completion:");
}

id objc_msgSend__syncPrivateEmailsForAltDSID_client_userInformation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncPrivateEmailsForAltDSID:client:userInformation:completion:");
}

id objc_msgSend__synchronizeLocalFollowUpsWithServerPayload_altDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_synchronizeLocalFollowUpsWithServerPayload:altDSID:error:");
}

id objc_msgSend__systemEpochTime(void *a1, const char *a2, ...)
{
  return _[a1 _systemEpochTime];
}

id objc_msgSend__teardownPayloadWithPushMessage_isArmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_teardownPayloadWithPushMessage:isArmed:");
}

id objc_msgSend__timeIntervalWithAdjustment(void *a1, const char *a2, ...)
{
  return _[a1 _timeIntervalWithAdjustment];
}

id objc_msgSend__timeToLive_maxTTLInMins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeToLive:maxTTLInMins:");
}

id objc_msgSend__titleAndMessageForBadNetworkRelatedErrorWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleAndMessageForBadNetworkRelatedErrorWithCompletion:");
}

id objc_msgSend__titleAndMessageForError_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleAndMessageForError:context:completion:");
}

id objc_msgSend__tokenGenerationInfoForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenGenerationInfoForContext:");
}

id objc_msgSend__tokenKeychainDescriptorForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenKeychainDescriptorForContext:");
}

id objc_msgSend__tokenKeychainDescriptorWithIdentifier_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenKeychainDescriptorWithIdentifier:altDSID:");
}

id objc_msgSend__tokenWithName_forAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenWithName:forAccount:error:");
}

id objc_msgSend__tq_addContext_toAuthenticatingAppsforClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_addContext:toAuthenticatingAppsforClient:");
}

id objc_msgSend__tq_addContext_toAuthenticatingDaemonsforClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_addContext:toAuthenticatingDaemonsforClient:");
}

id objc_msgSend__tq_addContext_toAuthenticatingRequestsforClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_addContext:toAuthenticatingRequestsforClient:");
}

id objc_msgSend__tq_addContext_toRequestDictionary_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_addContext:toRequestDictionary:forClient:");
}

id objc_msgSend__tq_anisetteDataForDSID_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_anisetteDataForDSID:withError:");
}

id objc_msgSend__tq_anisetteDataWithRoutingInfoForLastKnownDSIDWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_anisetteDataWithRoutingInfoForLastKnownDSIDWithError:");
}

id objc_msgSend__tq_eraseAnisetteWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_eraseAnisetteWithCompletion:");
}

id objc_msgSend__tq_invokeAnisetteTrafficRequest_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_invokeAnisetteTrafficRequest:withCompletion:");
}

id objc_msgSend__tq_invokeRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_invokeRequest:completion:");
}

id objc_msgSend__tq_invokeTrafficRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_invokeTrafficRequest:");
}

id objc_msgSend__tq_legacyAnisetteDataForDSID_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_legacyAnisetteDataForDSID:withCompletion:");
}

id objc_msgSend__tq_provisionAnisetteWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_provisionAnisetteWithCompletion:");
}

id objc_msgSend__tq_syncAnisetteWithSIMData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tq_syncAnisetteWithSIMData:completion:");
}

id objc_msgSend__triggerTTRForMIDDriftedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerTTRForMIDDriftedError:");
}

id objc_msgSend__trustedContactOperationsByIDFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trustedContactOperationsByIDFromArray:");
}

id objc_msgSend__trustedContactPropertiesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trustedContactPropertiesChangedForAccount:userInformation:");
}

id objc_msgSend__trustedPhoneNumbersChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trustedPhoneNumbersChangedForAccount:userInformation:");
}

id objc_msgSend__unknownAuthModeInfo(void *a1, const char *a2, ...)
{
  return _[a1 _unknownAuthModeInfo];
}

id objc_msgSend__unsafe_InvalidateEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_InvalidateEngine");
}

id objc_msgSend__unsafe_addKeychainItem_shouldAttemptUpdate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_addKeychainItem:shouldAttemptUpdate:error:");
}

id objc_msgSend__unsafe_cancelEngineTimeoutSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_cancelEngineTimeoutSource");
}

id objc_msgSend__unsafe_cancelScheduler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_cancelScheduler");
}

id objc_msgSend__unsafe_closeDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_closeDatabase");
}

id objc_msgSend__unsafe_createDataBase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_createDataBase");
}

id objc_msgSend__unsafe_deleteKeychainItemWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_deleteKeychainItemWithDescriptor:error:");
}

id objc_msgSend__unsafe_executeNextScheduledRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_executeNextScheduledRequest");
}

id objc_msgSend__unsafe_fetchKeychainItemWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_fetchKeychainItemWithDescriptor:error:");
}

id objc_msgSend__unsafe_fetchKeychainItemsWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_fetchKeychainItemsWithDescriptor:error:");
}

id objc_msgSend__unsafe_openDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_openDatabase:");
}

id objc_msgSend__unsafe_presentMessage_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_presentMessage:forAccount:");
}

id objc_msgSend__unsafe_processPushMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_processPushMessage:");
}

id objc_msgSend__unsafe_resumeEngineTimeoutSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_resumeEngineTimeoutSource");
}

id objc_msgSend__unsafe_scheduleNextRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_scheduleNextRequest");
}

id objc_msgSend__unsafe_scheduleRequestWithDispatchInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_scheduleRequestWithDispatchInterval:");
}

id objc_msgSend__unsafe_schedulerSourceDidFire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_schedulerSourceDidFire");
}

id objc_msgSend__unsafe_showLoginNotificationWithCode_incomingMessage_piggy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_showLoginNotificationWithCode:incomingMessage:piggy:");
}

id objc_msgSend__unsafe_showNotificationForMessage_account_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_showNotificationForMessage:account:responseHandler:");
}

id objc_msgSend__unsafe_tearDownNotificationWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_tearDownNotificationWithID:");
}

id objc_msgSend__unsafe_teardownCurrentLoginNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_teardownCurrentLoginNotification");
}

id objc_msgSend__unsafe_updateCacheWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_updateCacheWithData:");
}

id objc_msgSend__unsafe_updateKeychainItemWithDescriptor_newItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_updateKeychainItemWithDescriptor:newItem:error:");
}

id objc_msgSend__unsafe_wipeDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsafe_wipeDatabase:");
}

id objc_msgSend__updateADPCohortWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateADPCohortWithRawValue:");
}

id objc_msgSend__updateAccount_withUserInformationResponse_modifyAliases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccount:withUserInformationResponse:modifyAliases:");
}

id objc_msgSend__updateAccountInUseForAccount_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccountInUseForAccount:withContext:");
}

id objc_msgSend__updateAccountInfoPropertiesForAccount_withServerResponse_userInfoDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccountInfoPropertiesForAccount:withServerResponse:userInfoDictionary:");
}

id objc_msgSend__updateAccountInformationWithResultsDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccountInformationWithResultsDictionary:");
}

id objc_msgSend__updateAltDSIDAndUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAltDSIDAndUsername:");
}

id objc_msgSend__updateAnalyticsEvent_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAnalyticsEvent:withError:");
}

id objc_msgSend__updateAppleAccountSecurityPropertiesForAccount_withServerResponse_userInfoDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAppleAccountSecurityPropertiesForAccount:withServerResponse:userInfoDictionary:");
}

id objc_msgSend__updateAuthKitAccount_withServerResponse_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAuthKitAccount:withServerResponse:context:error:");
}

id objc_msgSend__updateBeneficiaryPropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBeneficiaryPropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updateCacheWithBag_forAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCacheWithBag:forAltDSID:");
}

id objc_msgSend__updateChildPasscodePropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateChildPasscodePropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updateContext_serviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContext:serviceName:");
}

id objc_msgSend__updateContext_withPassword_forAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContext:withPassword:forAppleID:");
}

id objc_msgSend__updateContextWithCachedPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContextWithCachedPassword:");
}

id objc_msgSend__updateCredentialForSavedAIDAAccount_accountStore_withNewTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCredentialForSavedAIDAAccount:accountStore:withNewTokens:");
}

id objc_msgSend__updateCustodianPropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCustodianPropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updateDSIDWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDSIDWithRawValue:");
}

id objc_msgSend__updateDeviceListResponseWithDeviceInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDeviceListResponseWithDeviceInfo:completion:");
}

id objc_msgSend__updateDispatchingAlgorithmForInfo_withResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDispatchingAlgorithmForInfo:withResponse:");
}

id objc_msgSend__updateEDPStateWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEDPStateWithRawValue:");
}

id objc_msgSend__updateHeadersWithCompanionAnisetteData_clientProvidedData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHeadersWithCompanionAnisetteData:clientProvidedData:completion:");
}

id objc_msgSend__updateHeadersWithProxiedDeviceAnisetteData_clientProvidedData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHeadersWithProxiedDeviceAnisetteData:clientProvidedData:completion:");
}

id objc_msgSend__updateMaidPropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMaidPropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updatePasskeyKeychainStatusForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePasskeyKeychainStatusForAccount:");
}

id objc_msgSend__updatePasskeyPropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePasskeyPropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updatePasswordVersionWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePasswordVersionWithRawValue:");
}

id objc_msgSend__updatePrimaryApplicationsMetadataForAltDSID_metadataInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePrimaryApplicationsMetadataForAltDSID:metadataInfo:");
}

id objc_msgSend__updatePrivateEmailsWithInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePrivateEmailsWithInformation:");
}

id objc_msgSend__updateRefKeyWithNonce_context_refkey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRefKeyWithNonce:context:refkey:error:");
}

id objc_msgSend__updateRemainingPropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRemainingPropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updateSRPIterationWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSRPIterationWithRawValue:");
}

id objc_msgSend__updateSRPProtocolWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSRPProtocolWithRawValue:");
}

id objc_msgSend__updateSRPSaltWithRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSRPSaltWithRawValue:");
}

id objc_msgSend__updateSecurityLevelForAccount_withServerResponse_userInfoDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSecurityLevelForAccount:withServerResponse:userInfoDictionary:");
}

id objc_msgSend__updateTelemetryDeviceSessionIDForAccount_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTelemetryDeviceSessionIDForAccount:withContext:");
}

id objc_msgSend__updateTelemtryOptInForAccount_withWalrusStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTelemtryOptInForAccount:withWalrusStatus:");
}

id objc_msgSend__updateTokensForAccount_withServerResponse_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTokensForAccount:withServerResponse:context:");
}

id objc_msgSend__updateURLBagIfNecessaryFromHTTPCache_ignoreMemoryCache_altDSID_urlSwitchData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateURLBagIfNecessaryFromHTTPCache:ignoreMemoryCache:altDSID:urlSwitchData:completion:");
}

id objc_msgSend__updateUserConfigIfNecessaryForAltDSID_responseParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUserConfigIfNecessaryForAltDSID:responseParameters:");
}

id objc_msgSend__updateUserInfoPropertiesForAccount_withServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUserInfoPropertiesForAccount:withServerResponse:");
}

id objc_msgSend__updateWithRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithRequest:error:");
}

id objc_msgSend__updateWithValuesFromContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithValuesFromContext:");
}

id objc_msgSend__upgradeContext(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeContext];
}

id objc_msgSend__upgradeSecurityLevelWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeSecurityLevelWithContext:completion:");
}

id objc_msgSend__upgradeToSchemaVersion2(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion2];
}

id objc_msgSend__upgradeToSchemaVersion3(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion3];
}

id objc_msgSend__upgradeToSchemaVersion4(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion4];
}

id objc_msgSend__upgradeToSchemaVersion5(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion5];
}

id objc_msgSend__upgradeToSchemaVersion6(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion6];
}

id objc_msgSend__upgradeToSchemaVersion7(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion7];
}

id objc_msgSend__upgradeToSchemaVersion8(void *a1, const char *a2, ...)
{
  return _[a1 _upgradeToSchemaVersion8];
}

id objc_msgSend__urlAtKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlAtKey:");
}

id objc_msgSend__urlSession(void *a1, const char *a2, ...)
{
  return _[a1 _urlSession];
}

id objc_msgSend__useEpochTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 _useEpochTimestamp];
}

id objc_msgSend__useIDSDate(void *a1, const char *a2, ...)
{
  return _[a1 _useIDSDate];
}

id objc_msgSend__userConfigChangeNotificationDictionaryForAccount_configurationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userConfigChangeNotificationDictionaryForAccount:configurationInfo:");
}

id objc_msgSend__userInfoChangeNotificationDictionaryForAltDSID_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userInfoChangeNotificationDictionaryForAltDSID:userInformation:");
}

id objc_msgSend__validateAndProcessUserResponse_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAndProcessUserResponse:client:completion:");
}

id objc_msgSend__validateAppleIDAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAppleIDAuthContext:");
}

id objc_msgSend__validateAppleIDAuthContext_forAuthMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAppleIDAuthContext:forAuthMode:");
}

id objc_msgSend__validateAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAuthContext:");
}

id objc_msgSend__validateDataExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateDataExists:");
}

id objc_msgSend__validateDataForVerifyEnableWalrusAllowedRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateDataForVerifyEnableWalrusAllowedRequest:error:");
}

id objc_msgSend__validateDataForWalrusStateUpdateToServerRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateDataForWalrusStateUpdateToServerRequest:error:");
}

id objc_msgSend__validateErrorCode_withKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateErrorCode:withKey:");
}

id objc_msgSend__validateFederatedAppleIDAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateFederatedAppleIDAuthContext:");
}

id objc_msgSend__validateJSONResponseData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateJSONResponseData:error:");
}

id objc_msgSend__validateLoginCode_forAltDSID_masterToken_idmsData_authContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateLoginCode:forAltDSID:masterToken:idmsData:authContext:completion:");
}

id objc_msgSend__validateMachineID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateMachineID:");
}

id objc_msgSend__validateNativeAppleIDAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateNativeAppleIDAuthContext:");
}

id objc_msgSend__validateResponseBodyFormat(void *a1, const char *a2, ...)
{
  return _[a1 _validateResponseBodyFormat];
}

id objc_msgSend__validateSilentPreferredFederatedAppleIDAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateSilentPreferredFederatedAppleIDAuthContext:");
}

id objc_msgSend__verificationQueue(void *a1, const char *a2, ...)
{
  return _[a1 _verificationQueue];
}

id objc_msgSend__verificationSessionForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verificationSessionForReason:");
}

id objc_msgSend__verifyAccountTrustWithRequestContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyAccountTrustWithRequestContext:completion:");
}

id objc_msgSend__verifyClientInformationForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyClientInformationForRequest:completion:");
}

id objc_msgSend__verifyEntitlements(void *a1, const char *a2, ...)
{
  return _[a1 _verifyEntitlements];
}

id objc_msgSend__verifyEntitlementsForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyEntitlementsForRequest:");
}

id objc_msgSend__verifyUserID_forAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyUserID:forAltDSID:");
}

id objc_msgSend__verifyUsername_password_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifyUsername:password:context:completion:");
}

id objc_msgSend__waitForNotificationResponse_withIdentifier_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForNotificationResponse:withIdentifier:responseHandler:");
}

id objc_msgSend__waitForSurrogateCheckInWithContext_withUIWorkBlock_client_andCheckInID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForSurrogateCheckInWithContext:withUIWorkBlock:client:andCheckInID:");
}

id objc_msgSend__walrusPropertiesChangedForAccount_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_walrusPropertiesChangedForAccount:userInformation:");
}

id objc_msgSend_aaData(void *a1, const char *a2, ...)
{
  return _[a1 aaData];
}

id objc_msgSend_aaf_base64Padded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_base64Padded");
}

id objc_msgSend_aaf_dictionaryByAddingEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_dictionaryByAddingEntriesFromDictionary:");
}

id objc_msgSend_aaf_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_filter:");
}

id objc_msgSend_aaf_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_firstObjectPassingTest:");
}

id objc_msgSend_aaf_map_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_map:");
}

id objc_msgSend_aaf_toCompressedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_toCompressedData:");
}

id objc_msgSend_aaf_toHexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_toHexString");
}

id objc_msgSend_aaf_toUrlQueryString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_toUrlQueryString");
}

id objc_msgSend_aaf_urlEncoded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aaf_urlEncoded");
}

id objc_msgSend_absintheSigner(void *a1, const char *a2, ...)
{
  return _[a1 absintheSigner];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_ac_secureCodingError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ac_secureCodingError");
}

id objc_msgSend_acceptedDeviceTermsVersion(void *a1, const char *a2, ...)
{
  return _[a1 acceptedDeviceTermsVersion];
}

id objc_msgSend_acceptedTermsInfo(void *a1, const char *a2, ...)
{
  return _[a1 acceptedTermsInfo];
}

id objc_msgSend_accessKey(void *a1, const char *a2, ...)
{
  return _[a1 accessKey];
}

id objc_msgSend_accessKeyString(void *a1, const char *a2, ...)
{
  return _[a1 accessKeyString];
}

id objc_msgSend_accountAccessTelemetryOptInDateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountAccessTelemetryOptInDateForAccount:");
}

id objc_msgSend_accountAccessTelemetryOptInForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountAccessTelemetryOptInForAccount:");
}

id objc_msgSend_accountAliases(void *a1, const char *a2, ...)
{
  return _[a1 accountAliases];
}

id objc_msgSend_accountIsSignedIntoServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIsSignedIntoServices:");
}

id objc_msgSend_accountManager(void *a1, const char *a2, ...)
{
  return _[a1 accountManager];
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _[a1 accountName];
}

id objc_msgSend_accountPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertyForKey:");
}

id objc_msgSend_ackWithPayload_account_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ackWithPayload:account:completion:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateProximitySession_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateProximitySession:context:completion:");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithContext:");
}

id objc_msgSend_activateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithError:");
}

id objc_msgSend_activeAnisettDSIDFromCurrentIDMSEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 activeAnisettDSIDFromCurrentIDMSEnvironment];
}

id objc_msgSend_activeAnisettDSIDFromLastKnownIDMSEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 activeAnisettDSIDFromLastKnownIDMSEnvironment];
}

id objc_msgSend_activeBagFetchRequest(void *a1, const char *a2, ...)
{
  return _[a1 activeBagFetchRequest];
}

id objc_msgSend_activeCode(void *a1, const char *a2, ...)
{
  return _[a1 activeCode];
}

id objc_msgSend_activeHMECount(void *a1, const char *a2, ...)
{
  return _[a1 activeHMECount];
}

id objc_msgSend_activeServiceNamesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeServiceNamesForAccount:");
}

id objc_msgSend_activeSigningRequest(void *a1, const char *a2, ...)
{
  return _[a1 activeSigningRequest];
}

id objc_msgSend_activeiCloudPrivateEmailCountForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeiCloudPrivateEmailCountForAccount:");
}

id objc_msgSend_adamID(void *a1, const char *a2, ...)
{
  return _[a1 adamID];
}

id objc_msgSend_addConnection_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConnection:forBundleID:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExecutionBlock:");
}

id objc_msgSend_addFollowUpItems_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFollowUpItems:error:");
}

id objc_msgSend_addMDMInformationIfNecessaryToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMDMInformationIfNecessaryToRequest:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOrUpdateKeychainItem_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrUpdateKeychainItem:completion:");
}

id objc_msgSend_addOrUpdateKeychainItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrUpdateKeychainItem:error:");
}

id objc_msgSend_addServerAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addServerAdjustment:");
}

id objc_msgSend_addService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addService:");
}

id objc_msgSend_addedPrivateEmails(void *a1, const char *a2, ...)
{
  return _[a1 addedPrivateEmails];
}

id objc_msgSend_additionalHeaders(void *a1, const char *a2, ...)
{
  return _[a1 additionalHeaders];
}

id objc_msgSend_additionalInfo(void *a1, const char *a2, ...)
{
  return _[a1 additionalInfo];
}

id objc_msgSend_additionalInfoForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalInfoForAccount:");
}

id objc_msgSend_adjustedDeviceTime(void *a1, const char *a2, ...)
{
  return _[a1 adjustedDeviceTime];
}

id objc_msgSend_administrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 administrativeArea];
}

id objc_msgSend_adpCohort(void *a1, const char *a2, ...)
{
  return _[a1 adpCohort];
}

id objc_msgSend_adpCohortForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adpCohortForAccount:");
}

id objc_msgSend_ageOfMajority(void *a1, const char *a2, ...)
{
  return _[a1 ageOfMajority];
}

id objc_msgSend_ageOfMajorityForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOfMajorityForAccount:");
}

id objc_msgSend_aidaAccount(void *a1, const char *a2, ...)
{
  return _[a1 aidaAccount];
}

id objc_msgSend_akAction(void *a1, const char *a2, ...)
{
  return _[a1 akAction];
}

id objc_msgSend_ak_SHA256Data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_SHA256Data");
}

id objc_msgSend_ak_acceptedTermsInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_acceptedTermsInfo");
}

id objc_msgSend_ak_addAppProvidedContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addAppProvidedContext:");
}

id objc_msgSend_ak_addAppleIDHeaderWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addAppleIDHeaderWithValue:");
}

id objc_msgSend_ak_addAppleIDUserModeHeaderWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addAppleIDUserModeHeaderWithValue:");
}

id objc_msgSend_ak_addAttestationDataHeaders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addAttestationDataHeaders");
}

id objc_msgSend_ak_addAuthorizationHeaderWithIdentityToken_forAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addAuthorizationHeaderWithIdentityToken:forAltDSID:");
}

id objc_msgSend_ak_addAuthorizationHeaderWithServiceToken_forAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addAuthorizationHeaderWithServiceToken:forAltDSID:");
}

id objc_msgSend_ak_addCKRequestHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addCKRequestHeader");
}

id objc_msgSend_ak_addClientApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addClientApp:");
}

id objc_msgSend_ak_addClientBundleIDHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addClientBundleIDHeader:");
}

id objc_msgSend_ak_addClientInfoHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addClientInfoHeader");
}

id objc_msgSend_ak_addClientTimeHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addClientTimeHeader");
}

id objc_msgSend_ak_addContinutationKeyPresenceHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addContinutationKeyPresenceHeader:");
}

id objc_msgSend_ak_addCountryHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addCountryHeader");
}

id objc_msgSend_ak_addCustodianSyncActionHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addCustodianSyncActionHeader");
}

id objc_msgSend_ak_addDeviceMLBHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addDeviceMLBHeader");
}

id objc_msgSend_ak_addDeviceROMHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addDeviceROMHeader");
}

id objc_msgSend_ak_addDeviceSerialNumberHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addDeviceSerialNumberHeader");
}

id objc_msgSend_ak_addDeviceUDIDHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addDeviceUDIDHeader");
}

id objc_msgSend_ak_addExperimentModeHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addExperimentModeHeader");
}

id objc_msgSend_ak_addFeatureMaskHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addFeatureMaskHeader");
}

id objc_msgSend_ak_addFidoRecoveryTokenHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addFidoRecoveryTokenHeader:");
}

id objc_msgSend_ak_addHeaderForDCRT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addHeaderForDCRT:");
}

id objc_msgSend_ak_addHeaderForDeviceManagementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addHeaderForDeviceManagementState:");
}

id objc_msgSend_ak_addHeaderForMDMOrganizationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addHeaderForMDMOrganizationToken:");
}

id objc_msgSend_ak_addHeaderForSecurityCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addHeaderForSecurityCode:");
}

id objc_msgSend_ak_addHeaderForSourceAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addHeaderForSourceAltDSID:");
}

id objc_msgSend_ak_addInternalBuildHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addInternalBuildHeader");
}

id objc_msgSend_ak_addJSONRequestHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addJSONRequestHeader");
}

id objc_msgSend_ak_addLocalUserUUIDHashHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addLocalUserUUIDHashHeader");
}

id objc_msgSend_ak_addLocaleHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addLocaleHeader");
}

id objc_msgSend_ak_addPRKRequestHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addPRKRequestHeader");
}

id objc_msgSend_ak_addPasscodeAuthHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addPasscodeAuthHeader");
}

id objc_msgSend_ak_addPreviousTransactionIdHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addPreviousTransactionIdHeader:");
}

id objc_msgSend_ak_addProvisioningUDIDHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProvisioningUDIDHeader");
}

id objc_msgSend_ak_addProxiedAnisetteHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedAnisetteHeaders:");
}

id objc_msgSend_ak_addProxiedClientInfoHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedClientInfoHeader:");
}

id objc_msgSend_ak_addProxiedDeviceCountryHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedDeviceCountryHeader:");
}

id objc_msgSend_ak_addProxiedDeviceICSCIntentHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedDeviceICSCIntentHeader");
}

id objc_msgSend_ak_addProxiedDevicePRKRequestHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedDevicePRKRequestHeader");
}

id objc_msgSend_ak_addProxiedDeviceSerialNumberHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedDeviceSerialNumberHeader:");
}

id objc_msgSend_ak_addProxiedDeviceUDIDHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addProxiedDeviceUDIDHeader:");
}

id objc_msgSend_ak_addReAuthenticationHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addReAuthenticationHeader");
}

id objc_msgSend_ak_addRequestContextHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addRequestContextHeader:");
}

id objc_msgSend_ak_addSKUCountryHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addSKUCountryHeader");
}

id objc_msgSend_ak_addSeedBuildHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addSeedBuildHeader");
}

id objc_msgSend_ak_addShortLivedTokenHeaderWithIdentityToken_forAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addShortLivedTokenHeaderWithIdentityToken:forAltDSID:");
}

id objc_msgSend_ak_addTimeZoneHeaders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addTimeZoneHeaders");
}

id objc_msgSend_ak_addWalrusDeviceRegionHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_addWalrusDeviceRegionHeader");
}

id objc_msgSend_ak_allUnderlyingErrors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_allUnderlyingErrors");
}

id objc_msgSend_ak_analyticsEventWithContext_client_eventName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_analyticsEventWithContext:client:eventName:error:");
}

id objc_msgSend_ak_analyticsEventWithContext_eventName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_analyticsEventWithContext:eventName:error:");
}

id objc_msgSend_ak_analyticsEventWithEventName_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_analyticsEventWithEventName:account:error:");
}

id objc_msgSend_ak_analyticsEventWithEventName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_analyticsEventWithEventName:error:");
}

id objc_msgSend_ak_anisetteErrorWithCode_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_anisetteErrorWithCode:underlyingError:");
}

id objc_msgSend_ak_anisetteHeadersWithCompanionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_anisetteHeadersWithCompanionData:");
}

id objc_msgSend_ak_anisetteHeadersWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_anisetteHeadersWithData:");
}

id objc_msgSend_ak_arrayWithJSONResponseData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_arrayWithJSONResponseData:");
}

id objc_msgSend_ak_attestationErrorWithCode_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_attestationErrorWithCode:underlyingError:");
}

id objc_msgSend_ak_base64EncodedJsonFromObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_base64EncodedJsonFromObject:");
}

id objc_msgSend_ak_BOOLeanAsInteger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_BOOLeanAsInteger");
}

id objc_msgSend_ak_bucketWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_bucketWithSize:");
}

id objc_msgSend_ak_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_dateFromString:");
}

id objc_msgSend_ak_deviceListErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_deviceListErrorWithCode:");
}

id objc_msgSend_ak_dictionaryWithKeysFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_dictionaryWithKeysFromArray:");
}

id objc_msgSend_ak_errorByAppendingUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_errorByAppendingUserInfo:");
}

id objc_msgSend_ak_errorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_errorWithCode:");
}

id objc_msgSend_ak_errorWithCode_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_errorWithCode:underlyingError:");
}

id objc_msgSend_ak_errorWithCode_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_errorWithCode:userInfo:");
}

id objc_msgSend_ak_expiryDateFromServerDate_localDate_ttl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_expiryDateFromServerDate:localDate:ttl:");
}

id objc_msgSend_ak_generalErrorWithCode_errorDomain_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_generalErrorWithCode:errorDomain:underlyingError:");
}

id objc_msgSend_ak_isAuthenticationError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isAuthenticationError");
}

id objc_msgSend_ak_isAuthenticationErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isAuthenticationErrorWithCode:");
}

id objc_msgSend_ak_isIncompatibleDevicesError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isIncompatibleDevicesError");
}

id objc_msgSend_ak_isServiceError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isServiceError");
}

id objc_msgSend_ak_isSurrogateAuthAlreadyInProgressError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isSurrogateAuthAlreadyInProgressError");
}

id objc_msgSend_ak_isUnableToPromptError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isUnableToPromptError");
}

id objc_msgSend_ak_isUserCancelError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isUserCancelError");
}

id objc_msgSend_ak_isUserSkippedError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isUserSkippedError");
}

id objc_msgSend_ak_isUserTryAgainError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_isUserTryAgainError");
}

id objc_msgSend_ak_livenessErrorWithCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_livenessErrorWithCode:");
}

id objc_msgSend_ak_numberObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_numberObject");
}

id objc_msgSend_ak_proxiedAnisetteHeadersWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_proxiedAnisetteHeadersWithData:");
}

id objc_msgSend_ak_redactedCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_redactedCopy");
}

id objc_msgSend_ak_serverFriendlyString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_serverFriendlyString");
}

id objc_msgSend_ak_setBodyWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_setBodyWithParameters:");
}

id objc_msgSend_ak_setJSONBodyWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_setJSONBodyWithParameters:");
}

id objc_msgSend_ak_truncatedCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_truncatedCopy");
}

id objc_msgSend_ak_updateTelemetryIdWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_updateTelemetryIdWithAccount:");
}

id objc_msgSend_ak_updateWithAuthenticationResults_authContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_updateWithAuthenticationResults:authContext:error:");
}

id objc_msgSend_ak_wrappedAnisetteError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_wrappedAnisetteError:");
}

id objc_msgSend_ak_wrappedAnisetteError_underlyingADIErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ak_wrappedAnisetteError:underlyingADIErrorCode:");
}

id objc_msgSend_alertBody(void *a1, const char *a2, ...)
{
  return _[a1 alertBody];
}

id objc_msgSend_alertTitle(void *a1, const char *a2, ...)
{
  return _[a1 alertTitle];
}

id objc_msgSend_algorithmIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 algorithmIdentifier];
}

id objc_msgSend_aliases(void *a1, const char *a2, ...)
{
  return _[a1 aliases];
}

id objc_msgSend_aliasesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aliasesForAccount:");
}

id objc_msgSend_allAccountNames(void *a1, const char *a2, ...)
{
  return _[a1 allAccountNames];
}

id objc_msgSend_allAuthKitAccountsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAuthKitAccountsWithError:");
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHTTPHeaderFields];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allKeysForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeysForObject:");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allTokensForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allTokensForAccount:error:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowAuthenticationBeforeFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 allowAuthenticationBeforeFirstUnlock];
}

id objc_msgSend_allowPiggybacking(void *a1, const char *a2, ...)
{
  return _[a1 allowPiggybacking];
}

id objc_msgSend_allowPiggybackingPresence(void *a1, const char *a2, ...)
{
  return _[a1 allowPiggybackingPresence];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_altDSIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altDSIDForAccount:");
}

id objc_msgSend_altDSIDForAuthKitAccountRequestingAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 altDSIDForAuthKitAccountRequestingAuthorization];
}

id objc_msgSend_altDSIDforPrimaryiCloudAccount(void *a1, const char *a2, ...)
{
  return _[a1 altDSIDforPrimaryiCloudAccount];
}

id objc_msgSend_alternateButtonTitle(void *a1, const char *a2, ...)
{
  return _[a1 alternateButtonTitle];
}

id objc_msgSend_analyticsReporterWithTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsReporterWithTransport:");
}

id objc_msgSend_analyticsTransportRTCWithClientType_clientBundleId_clientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsTransportRTCWithClientType:clientBundleId:clientName:");
}

id objc_msgSend_anisetteDataForDevice_provisionIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anisetteDataForDevice:provisionIfNecessary:");
}

id objc_msgSend_anisetteDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anisetteDataWithError:");
}

id objc_msgSend_anisetteResyncData(void *a1, const char *a2, ...)
{
  return _[a1 anisetteResyncData];
}

id objc_msgSend_anonymousListener(void *a1, const char *a2, ...)
{
  return _[a1 anonymousListener];
}

id objc_msgSend_anticipateEscrowAttempt(void *a1, const char *a2, ...)
{
  return _[a1 anticipateEscrowAttempt];
}

id objc_msgSend_appDeveloperName(void *a1, const char *a2, ...)
{
  return _[a1 appDeveloperName];
}

id objc_msgSend_appID(void *a1, const char *a2, ...)
{
  return _[a1 appID];
}

id objc_msgSend_appIconForBundleID_size_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appIconForBundleID:size:completion:");
}

id objc_msgSend_appName(void *a1, const char *a2, ...)
{
  return _[a1 appName];
}

id objc_msgSend_appProvidedContext(void *a1, const char *a2, ...)
{
  return _[a1 appProvidedContext];
}

id objc_msgSend_appProvidedData(void *a1, const char *a2, ...)
{
  return _[a1 appProvidedData];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendRequestUrl_queryParameterNamed_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendRequestUrl:queryParameterNamed:value:");
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _[a1 appleID];
}

id objc_msgSend_appleIDAccountType(void *a1, const char *a2, ...)
{
  return _[a1 appleIDAccountType];
}

id objc_msgSend_appleIDAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDAccountWithAltDSID:");
}

id objc_msgSend_appleIDAccountWithAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDAccountWithAppleID:");
}

id objc_msgSend_appleIDAuthSupportCopyAppTokensWithMasterToken_authURL_serviceIds_authParams_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDAuthSupportCopyAppTokensWithMasterToken:authURL:serviceIds:authParams:error:");
}

id objc_msgSend_appleIDAuthSupportTokenCreateWithExternalizedVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDAuthSupportTokenCreateWithExternalizedVersion:error:");
}

id objc_msgSend_appleIDAuthorizationURLs(void *a1, const char *a2, ...)
{
  return _[a1 appleIDAuthorizationURLs];
}

id objc_msgSend_appleIDCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 appleIDCountryCode];
}

id objc_msgSend_appleIDCountryCodeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDCountryCodeForAccount:");
}

id objc_msgSend_appleIDSecurityLevel(void *a1, const char *a2, ...)
{
  return _[a1 appleIDSecurityLevel];
}

id objc_msgSend_appleIDUsername(void *a1, const char *a2, ...)
{
  return _[a1 appleIDUsername];
}

id objc_msgSend_appleOwnedDomains(void *a1, const char *a2, ...)
{
  return _[a1 appleOwnedDomains];
}

id objc_msgSend_applicationProxyForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationProxyForIdentifier:");
}

id objc_msgSend_applicationStateForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationStateForApplication:");
}

id objc_msgSend_apps(void *a1, const char *a2, ...)
{
  return _[a1 apps];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_argument(void *a1, const char *a2, ...)
{
  return _[a1 argument];
}

id objc_msgSend_armDeviceWithPCSAuthorizationContextForMessage_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "armDeviceWithPCSAuthorizationContextForMessage:completion:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_askToBuy(void *a1, const char *a2, ...)
{
  return _[a1 askToBuy];
}

id objc_msgSend_attestationDataForDevice_withRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attestationDataForDevice:withRequest:completion:");
}

id objc_msgSend_attestationDataForOSVersionWithContext_attestationNonce_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attestationDataForOSVersionWithContext:attestationNonce:completion:");
}

id objc_msgSend_attestationDataForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attestationDataForRequest:completion:");
}

id objc_msgSend_attestationHeaders(void *a1, const char *a2, ...)
{
  return _[a1 attestationHeaders];
}

id objc_msgSend_attestationSigner(void *a1, const char *a2, ...)
{
  return _[a1 attestationSigner];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authContext(void *a1, const char *a2, ...)
{
  return _[a1 authContext];
}

id objc_msgSend_authKitAccount(void *a1, const char *a2, ...)
{
  return _[a1 authKitAccount];
}

id objc_msgSend_authKitAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccount:");
}

id objc_msgSend_authKitAccountForSilentServiceToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountForSilentServiceToken:");
}

id objc_msgSend_authKitAccountRequestingAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 authKitAccountRequestingAuthorization];
}

id objc_msgSend_authKitAccountTypeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountTypeWithError:");
}

id objc_msgSend_authKitAccountWithAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithAltDSID:error:");
}

id objc_msgSend_authKitAccountWithAppleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithAppleID:error:");
}

id objc_msgSend_authKitAccountWithDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithDSID:");
}

id objc_msgSend_authKitBody(void *a1, const char *a2, ...)
{
  return _[a1 authKitBody];
}

id objc_msgSend_authKitBodyData(void *a1, const char *a2, ...)
{
  return _[a1 authKitBodyData];
}

id objc_msgSend_authMode(void *a1, const char *a2, ...)
{
  return _[a1 authMode];
}

id objc_msgSend_authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithContext:completion:");
}

id objc_msgSend_authenticatedRequest(void *a1, const char *a2, ...)
{
  return _[a1 authenticatedRequest];
}

id objc_msgSend_authenticationHandler(void *a1, const char *a2, ...)
{
  return _[a1 authenticationHandler];
}

id objc_msgSend_authenticationMode(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMode];
}

id objc_msgSend_authenticationModeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationModeForAccount:");
}

id objc_msgSend_authenticationParametersWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationParametersWithCompletion:");
}

id objc_msgSend_authenticationType(void *a1, const char *a2, ...)
{
  return _[a1 authenticationType];
}

id objc_msgSend_authenticatorData(void *a1, const char *a2, ...)
{
  return _[a1 authenticatorData];
}

id objc_msgSend_authkitAccount(void *a1, const char *a2, ...)
{
  return _[a1 authkitAccount];
}

id objc_msgSend_authorizationClientProvidesUI(void *a1, const char *a2, ...)
{
  return _[a1 authorizationClientProvidesUI];
}

id objc_msgSend_authorizationContextHelperWithContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationContextHelperWithContext:client:");
}

id objc_msgSend_authorizationContextWithUserResponse_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationContextWithUserResponse:client:");
}

id objc_msgSend_authorizationController(void *a1, const char *a2, ...)
{
  return _[a1 authorizationController];
}

id objc_msgSend_authorizationDaemonServiceWillProcessUserResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationDaemonServiceWillProcessUserResponse:");
}

id objc_msgSend_authorizationEndorserRapportClientDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationEndorserRapportClientDidFinish:");
}

id objc_msgSend_authorizationRequest(void *a1, const char *a2, ...)
{
  return _[a1 authorizationRequest];
}

id objc_msgSend_authorizationRequiresRapport(void *a1, const char *a2, ...)
{
  return _[a1 authorizationRequiresRapport];
}

id objc_msgSend_authorizationResponseValidator(void *a1, const char *a2, ...)
{
  return _[a1 authorizationResponseValidator];
}

id objc_msgSend_authorizationUsed(void *a1, const char *a2, ...)
{
  return _[a1 authorizationUsed];
}

id objc_msgSend_authorizationUsedForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationUsedForAccount:");
}

id objc_msgSend_authorizationUserInformationForRequest_shouldRequestUpdate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationUserInformationForRequest:shouldRequestUpdate:error:");
}

id objc_msgSend_authorizedAppListVersion(void *a1, const char *a2, ...)
{
  return _[a1 authorizedAppListVersion];
}

id objc_msgSend_authorizedApplicationsListVersion(void *a1, const char *a2, ...)
{
  return _[a1 authorizedApplicationsListVersion];
}

id objc_msgSend_authorizedRequest(void *a1, const char *a2, ...)
{
  return _[a1 authorizedRequest];
}

id objc_msgSend_baaAttestationHash(void *a1, const char *a2, ...)
{
  return _[a1 baaAttestationHash];
}

id objc_msgSend_baaConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 baaConfiguration];
}

id objc_msgSend_baaV1HeadersForRequestData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baaV1HeadersForRequestData:completion:");
}

id objc_msgSend_baaValidity(void *a1, const char *a2, ...)
{
  return _[a1 baaValidity];
}

id objc_msgSend_backingColor(void *a1, const char *a2, ...)
{
  return _[a1 backingColor];
}

id objc_msgSend_bagForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForAltDSID:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_beginAuthenticatedRequestWithContext_client_clearanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAuthenticatedRequestWithContext:client:clearanceHandler:");
}

id objc_msgSend_beginAuthenticationDataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAuthenticationDataTaskWithRequest:completionHandler:");
}

id objc_msgSend_beginAuthenticationWithClient_context_server_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAuthenticationWithClient:context:server:completion:");
}

id objc_msgSend_beginDataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDataTaskWithRequest:completionHandler:");
}

id objc_msgSend_beginFederatedAuthWithInitialResponse_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginFederatedAuthWithInitialResponse:completionHandler:");
}

id objc_msgSend_beginSessionWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginSessionWithContext:client:completion:");
}

id objc_msgSend_beginTransaction(void *a1, const char *a2, ...)
{
  return _[a1 beginTransaction];
}

id objc_msgSend_beneficiaryContacts(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryContacts];
}

id objc_msgSend_beneficiaryFirstName(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryFirstName];
}

id objc_msgSend_beneficiaryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryIdentifier];
}

id objc_msgSend_beneficiaryInfo(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryInfo];
}

id objc_msgSend_beneficiaryInfoForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beneficiaryInfoForAccount:");
}

id objc_msgSend_beneficiaryLastModified(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryLastModified];
}

id objc_msgSend_beneficiaryLastModifiedForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beneficiaryLastModifiedForAccount:");
}

id objc_msgSend_beneficiaryLastName(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryLastName];
}

id objc_msgSend_beneficiaryListVersion(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryListVersion];
}

id objc_msgSend_beneficiaryPassword(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryPassword];
}

id objc_msgSend_beneficiarySetupToken(void *a1, const char *a2, ...)
{
  return _[a1 beneficiarySetupToken];
}

id objc_msgSend_beneficiaryWrappedKey(void *a1, const char *a2, ...)
{
  return _[a1 beneficiaryWrappedKey];
}

id objc_msgSend_bindHandler(void *a1, const char *a2, ...)
{
  return _[a1 bindHandler];
}

id objc_msgSend_bindParameter_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindParameter:error:");
}

id objc_msgSend_bindParameters_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindParameters:error:");
}

id objc_msgSend_bindingFailure(void *a1, const char *a2, ...)
{
  return _[a1 bindingFailure];
}

id objc_msgSend_biometricAuth(void *a1, const char *a2, ...)
{
  return _[a1 biometricAuth];
}

id objc_msgSend_birthDay(void *a1, const char *a2, ...)
{
  return _[a1 birthDay];
}

id objc_msgSend_birthMonth(void *a1, const char *a2, ...)
{
  return _[a1 birthMonth];
}

id objc_msgSend_birthYear(void *a1, const char *a2, ...)
{
  return _[a1 birthYear];
}

id objc_msgSend_birthYearForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "birthYearForAccount:");
}

id objc_msgSend_bodyDataHash(void *a1, const char *a2, ...)
{
  return _[a1 bodyDataHash];
}

id objc_msgSend_bodySize(void *a1, const char *a2, ...)
{
  return _[a1 bodySize];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buildCredentialWithTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildCredentialWithTokens:");
}

id objc_msgSend_buildLoginCodeNotificationWithTitle_body_footer_loginCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildLoginCodeNotificationWithTitle:body:footer:loginCode:");
}

id objc_msgSend_buildReauthenticationContextFromContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildReauthenticationContextFromContext:error:");
}

id objc_msgSend_buildRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildRequestWithCompletion:");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIDs(void *a1, const char *a2, ...)
{
  return _[a1 bundleIDs];
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _[a1 bundleId];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cacheObject(void *a1, const char *a2, ...)
{
  return _[a1 cacheObject];
}

id objc_msgSend_calculation(void *a1, const char *a2, ...)
{
  return _[a1 calculation];
}

id objc_msgSend_calculationWithDate_counter_algorithm_relinquisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculationWithDate:counter:algorithm:relinquisher:");
}

id objc_msgSend_canAttestAge(void *a1, const char *a2, ...)
{
  return _[a1 canAttestAge];
}

id objc_msgSend_canAttestAgeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAttestAgeForAccount:");
}

id objc_msgSend_canBackgroundiCloudSignIn(void *a1, const char *a2, ...)
{
  return _[a1 canBackgroundiCloudSignIn];
}

id objc_msgSend_canBeBeneficiary(void *a1, const char *a2, ...)
{
  return _[a1 canBeBeneficiary];
}

id objc_msgSend_canBeBeneficiaryForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeBeneficiaryForAccount:");
}

id objc_msgSend_canBeCustodian(void *a1, const char *a2, ...)
{
  return _[a1 canBeCustodian];
}

id objc_msgSend_canBeCustodianForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeCustodianForAccount:");
}

id objc_msgSend_canHaveBeneficiary(void *a1, const char *a2, ...)
{
  return _[a1 canHaveBeneficiary];
}

id objc_msgSend_canHaveBeneficiaryForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canHaveBeneficiaryForAccount:");
}

id objc_msgSend_canHaveCustodian(void *a1, const char *a2, ...)
{
  return _[a1 canHaveCustodian];
}

id objc_msgSend_canHaveCustodianForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canHaveCustodianForAccount:");
}

id objc_msgSend_canOpenApplication_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canOpenApplication:reason:");
}

id objc_msgSend_canPerformAuthorizationRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformAuthorizationRequest:error:");
}

id objc_msgSend_canPerformCredentialRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformCredentialRequest:error:");
}

id objc_msgSend_canPerformRequestWithAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformRequestWithAccount:error:");
}

id objc_msgSend_canPresentRemoteUI(void *a1, const char *a2, ...)
{
  return _[a1 canPresentRemoteUI];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelDataTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDataTask:");
}

id objc_msgSend_captureCurrentValue(void *a1, const char *a2, ...)
{
  return _[a1 captureCurrentValue];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cdpAccountIsICDPEnabledForDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdpAccountIsICDPEnabledForDSID:");
}

id objc_msgSend_cdpAccountIsOTEnabledForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdpAccountIsOTEnabledForAltDSID:");
}

id objc_msgSend_challengeProviderWithContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "challengeProviderWithContext:client:");
}

id objc_msgSend_changePasswordURL(void *a1, const char *a2, ...)
{
  return _[a1 changePasswordURL];
}

id objc_msgSend_checkForLocaleChange(void *a1, const char *a2, ...)
{
  return _[a1 checkForLocaleChange];
}

id objc_msgSend_circleStep(void *a1, const char *a2, ...)
{
  return _[a1 circleStep];
}

id objc_msgSend_claimTokenString(void *a1, const char *a2, ...)
{
  return _[a1 claimTokenString];
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_cleanupPasskeysFromKeychainWithcompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupPasskeysFromKeychainWithcompletion:");
}

id objc_msgSend_cleanupStaleAccountsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupStaleAccountsWithCompletion:");
}

id objc_msgSend_clearAllTokensForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllTokensForAltDSID:");
}

id objc_msgSend_clearAllTokensForAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllTokensForAltDSID:error:");
}

id objc_msgSend_clearCache(void *a1, const char *a2, ...)
{
  return _[a1 clearCache];
}

id objc_msgSend_clearContinuationTokenIfSupportedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearContinuationTokenIfSupportedWithError:");
}

id objc_msgSend_clearDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDatabase:");
}

id objc_msgSend_clearDatabaseWithAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDatabaseWithAltDSID:error:");
}

id objc_msgSend_clearDatabaseWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDatabaseWithCompletionHandler:");
}

id objc_msgSend_clearDeviceListCacheWithContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDeviceListCacheWithContext:completionHandler:");
}

id objc_msgSend_clearDeviceRemovalReasonFromAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDeviceRemovalReasonFromAccount:");
}

id objc_msgSend_clearNotificationsForItem_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearNotificationsForItem:error:");
}

id objc_msgSend_clearSerializedMemoryCache(void *a1, const char *a2, ...)
{
  return _[a1 clearSerializedMemoryCache];
}

id objc_msgSend_clearStaleDevicesWithAccountManager_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearStaleDevicesWithAccountManager:completionHandler:");
}

id objc_msgSend_clearanceHandler(void *a1, const char *a2, ...)
{
  return _[a1 clearanceHandler];
}

id objc_msgSend_cliMode(void *a1, const char *a2, ...)
{
  return _[a1 cliMode];
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _[a1 client];
}

id objc_msgSend_clientAppBundleId(void *a1, const char *a2, ...)
{
  return _[a1 clientAppBundleId];
}

id objc_msgSend_clientBundleID(void *a1, const char *a2, ...)
{
  return _[a1 clientBundleID];
}

id objc_msgSend_clientData(void *a1, const char *a2, ...)
{
  return _[a1 clientData];
}

id objc_msgSend_clientErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 clientErrorCode];
}

id objc_msgSend_clientForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientForContext:");
}

id objc_msgSend_clientID(void *a1, const char *a2, ...)
{
  return _[a1 clientID];
}

id objc_msgSend_clientInfo(void *a1, const char *a2, ...)
{
  return _[a1 clientInfo];
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return _[a1 clientName];
}

id objc_msgSend_clientProvidedDataHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientProvidedDataHelper:");
}

id objc_msgSend_closeDatabase(void *a1, const char *a2, ...)
{
  return _[a1 closeDatabase];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _[a1 color];
}

id objc_msgSend_combinedAliasesAndReachableEmailsForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedAliasesAndReachableEmailsForAccount:");
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_commitChangesToCacheWithInformation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitChangesToCacheWithInformation:error:");
}

id objc_msgSend_companionDevice(void *a1, const char *a2, ...)
{
  return _[a1 companionDevice];
}

id objc_msgSend_companionDeviceAnisetteData(void *a1, const char *a2, ...)
{
  return _[a1 companionDeviceAnisetteData];
}

id objc_msgSend_companionKeyEnvelope(void *a1, const char *a2, ...)
{
  return _[a1 companionKeyEnvelope];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_concreteAuthenticationContext(void *a1, const char *a2, ...)
{
  return _[a1 concreteAuthenticationContext];
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _[a1 condition];
}

id objc_msgSend_configDataVersion(void *a1, const char *a2, ...)
{
  return _[a1 configDataVersion];
}

id objc_msgSend_configDataVersionForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configDataVersionForAccount:");
}

id objc_msgSend_configValue_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configValue:forAccount:");
}

id objc_msgSend_configurationInfo(void *a1, const char *a2, ...)
{
  return _[a1 configurationInfo];
}

id objc_msgSend_configurationParameters(void *a1, const char *a2, ...)
{
  return _[a1 configurationParameters];
}

id objc_msgSend_configurationValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationValueForKey:");
}

id objc_msgSend_configurationValueForKey_fromCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationValueForKey:fromCache:completion:");
}

id objc_msgSend_configureWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithParameters:");
}

id objc_msgSend_confirmReceiptForMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmReceiptForMessage:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_containingAppForPlugInWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containingAppForPlugInWithPid:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_contextForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForAltDSID:");
}

id objc_msgSend_contextFromSRPServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextFromSRPServerResponse:");
}

id objc_msgSend_contextFromSRPServerResponseWithShorterTTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextFromSRPServerResponseWithShorterTTL:");
}

id objc_msgSend_contextHelper(void *a1, const char *a2, ...)
{
  return _[a1 contextHelper];
}

id objc_msgSend_contextWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithAltDSID:");
}

id objc_msgSend_contextWithAuthResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithAuthResults:");
}

id objc_msgSend_contextWithIncomingPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithIncomingPayload:");
}

id objc_msgSend_continuationKey(void *a1, const char *a2, ...)
{
  return _[a1 continuationKey];
}

id objc_msgSend_continuationToken(void *a1, const char *a2, ...)
{
  return _[a1 continuationToken];
}

id objc_msgSend_continuationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuationToken:");
}

id objc_msgSend_continuationTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuationTokenForAccount:");
}

id objc_msgSend_continuationTokenForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuationTokenForAccount:error:");
}

id objc_msgSend_continueFetchingIconWithRequestContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueFetchingIconWithRequestContext:completion:");
}

id objc_msgSend_continueSessionWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSessionWithContext:client:completion:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_coverGlassColor(void *a1, const char *a2, ...)
{
  return _[a1 coverGlassColor];
}

id objc_msgSend_createAppleIDURL(void *a1, const char *a2, ...)
{
  return _[a1 createAppleIDURL];
}

id objc_msgSend_createBAASignatureForDataFields_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBAASignatureForDataFields:completion:");
}

id objc_msgSend_createChildAccountURL(void *a1, const char *a2, ...)
{
  return _[a1 createChildAccountURL];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createEDPLivenessDictionaryWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createEDPLivenessDictionaryWithContext:error:");
}

id objc_msgSend_createHostSignatureForData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createHostSignatureForData:completion:");
}

id objc_msgSend_createOSAttestationDataWithContext_attestationNonce_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createOSAttestationDataWithContext:attestationNonce:completion:");
}

id objc_msgSend_createOSVersionAttestationRefKeyWithContext_accessControl_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createOSVersionAttestationRefKeyWithContext:accessControl:error:");
}

id objc_msgSend_createUserNotificationOptionsWithTitle_body_lockScreenTitle_lockScreenBody_defaultButtonTitle_alternateButtonTitle_makeNoise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createUserNotificationOptionsWithTitle:body:lockScreenTitle:lockScreenBody:defaultButtonTitle:alternateButtonTitle:makeNoise:");
}

id objc_msgSend_createUserNotificationWithTitle_body_defaultButtonTitle_alternateButtonTitle_makeNoise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createUserNotificationWithTitle:body:defaultButtonTitle:alternateButtonTitle:makeNoise:");
}

id objc_msgSend_createUserNotificationWithTitle_body_lockScreenTitle_lockScreenBody_defaultButtonTitle_alternateButtonTitle_makeNoise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createUserNotificationWithTitle:body:lockScreenTitle:lockScreenBody:defaultButtonTitle:alternateButtonTitle:makeNoise:");
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return _[a1 credential];
}

id objc_msgSend_credentialForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForAccount:error:");
}

id objc_msgSend_credentialID(void *a1, const char *a2, ...)
{
  return _[a1 credentialID];
}

id objc_msgSend_credentialLocation(void *a1, const char *a2, ...)
{
  return _[a1 credentialLocation];
}

id objc_msgSend_credentialRequestContext(void *a1, const char *a2, ...)
{
  return _[a1 credentialRequestContext];
}

id objc_msgSend_credentialStateDidChange_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialStateDidChange:completion:");
}

id objc_msgSend_credentialStateDidChange_forApplicationWithClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialStateDidChange:forApplicationWithClientID:");
}

id objc_msgSend_credentialWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialWithError:");
}

id objc_msgSend_currentAuthorizationListVersionWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentAuthorizationListVersionWithAltDSID:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentDevice];
}

id objc_msgSend_currentDeviceAuthenticationModeForAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDeviceAuthenticationModeForAuthContext:");
}

id objc_msgSend_currentEmailListVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentEmailListVersion];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentPhoneUserSubscriptionSourceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPhoneUserSubscriptionSourceWithError:");
}

id objc_msgSend_currentProtocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentProtocolVersion];
}

id objc_msgSend_currentRachetState(void *a1, const char *a2, ...)
{
  return _[a1 currentRachetState];
}

id objc_msgSend_currentReachabilityStatus(void *a1, const char *a2, ...)
{
  return _[a1 currentReachabilityStatus];
}

id objc_msgSend_currentSchemaVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentSchemaVersion];
}

id objc_msgSend_currentServerTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 currentServerTimeInterval];
}

id objc_msgSend_custodianCodeConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 custodianCodeConfiguration];
}

id objc_msgSend_custodianContacts(void *a1, const char *a2, ...)
{
  return _[a1 custodianContacts];
}

id objc_msgSend_custodianContext(void *a1, const char *a2, ...)
{
  return _[a1 custodianContext];
}

id objc_msgSend_custodianEnabled(void *a1, const char *a2, ...)
{
  return _[a1 custodianEnabled];
}

id objc_msgSend_custodianEnabledForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "custodianEnabledForAccount:");
}

id objc_msgSend_custodianInfos(void *a1, const char *a2, ...)
{
  return _[a1 custodianInfos];
}

id objc_msgSend_custodianInfosForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "custodianInfosForAccount:");
}

id objc_msgSend_custodianLastModified(void *a1, const char *a2, ...)
{
  return _[a1 custodianLastModified];
}

id objc_msgSend_custodianLastModifiedForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "custodianLastModifiedForAccount:");
}

id objc_msgSend_custodianListVersion(void *a1, const char *a2, ...)
{
  return _[a1 custodianListVersion];
}

id objc_msgSend_custodianRecoveryToken(void *a1, const char *a2, ...)
{
  return _[a1 custodianRecoveryToken];
}

id objc_msgSend_custodianSessionID(void *a1, const char *a2, ...)
{
  return _[a1 custodianSessionID];
}

id objc_msgSend_custodianSetupToken(void *a1, const char *a2, ...)
{
  return _[a1 custodianSetupToken];
}

id objc_msgSend_custodianUUID(void *a1, const char *a2, ...)
{
  return _[a1 custodianUUID];
}

id objc_msgSend_dataCenterIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 dataCenterIdentifier];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _[a1 day];
}

id objc_msgSend_dcrtRenewalAttempted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dcrtRenewalAttempted:");
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return _[a1 deactivate];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decodedConfigurationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodedConfigurationInfo:");
}

id objc_msgSend_decodedRecoveryIdentityToken(void *a1, const char *a2, ...)
{
  return _[a1 decodedRecoveryIdentityToken];
}

id objc_msgSend_decodedRecoveryIdentityTokenString(void *a1, const char *a2, ...)
{
  return _[a1 decodedRecoveryIdentityTokenString];
}

id objc_msgSend_decodedRecoveryPET(void *a1, const char *a2, ...)
{
  return _[a1 decodedRecoveryPET];
}

id objc_msgSend_decodedRecoveryPETString(void *a1, const char *a2, ...)
{
  return _[a1 decodedRecoveryPETString];
}

id objc_msgSend_decorateWithCircleRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decorateWithCircleRequestContext:");
}

id objc_msgSend_decorateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decorateWithContext:");
}

id objc_msgSend_defaultButtonTitle(void *a1, const char *a2, ...)
{
  return _[a1 defaultButtonTitle];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultConfiguration];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delay(void *a1, const char *a2, ...)
{
  return _[a1 delay];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteBirthdayForAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteBirthdayForAltDSID:error:");
}

id objc_msgSend_deleteKeychainItemsForDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteKeychainItemsForDescriptor:error:");
}

id objc_msgSend_deleteOSVersionAttestationRefKey(void *a1, const char *a2, ...)
{
  return _[a1 deleteOSVersionAttestationRefKey];
}

id objc_msgSend_deleteTokenFromCacheWithIdentifer_altDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteTokenFromCacheWithIdentifer:altDSID:error:");
}

id objc_msgSend_deleteWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWithContext:");
}

id objc_msgSend_deleteWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteWithContext:error:");
}

id objc_msgSend_demoAccountForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "demoAccountForAccount:");
}

id objc_msgSend_dependentAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 dependentAltDSID];
}

id objc_msgSend_dependentAuthTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependentAuthTokenForAccount:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_desiredInternalTokens(void *a1, const char *a2, ...)
{
  return _[a1 desiredInternalTokens];
}

id objc_msgSend_destroyProvisioningSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destroyProvisioningSession:");
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return _[a1 deviceClass];
}

id objc_msgSend_deviceColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceColor];
}

id objc_msgSend_deviceEnclosureColor(void *a1, const char *a2, ...)
{
  return _[a1 deviceEnclosureColor];
}

id objc_msgSend_deviceIsAudioAccessory(void *a1, const char *a2, ...)
{
  return _[a1 deviceIsAudioAccessory];
}

id objc_msgSend_deviceList(void *a1, const char *a2, ...)
{
  return _[a1 deviceList];
}

id objc_msgSend_deviceListVersion(void *a1, const char *a2, ...)
{
  return _[a1 deviceListVersion];
}

id objc_msgSend_deviceListVersionForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceListVersionForAccount:");
}

id objc_msgSend_deviceManagedState(void *a1, const char *a2, ...)
{
  return _[a1 deviceManagedState];
}

id objc_msgSend_deviceMapFromResponseBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMapFromResponseBody:");
}

id objc_msgSend_deviceRegionRequired(void *a1, const char *a2, ...)
{
  return _[a1 deviceRegionRequired];
}

id objc_msgSend_deviceRequestContext(void *a1, const char *a2, ...)
{
  return _[a1 deviceRequestContext];
}

id objc_msgSend_deviceSafetyRestrictionReasonOverride(void *a1, const char *a2, ...)
{
  return _[a1 deviceSafetyRestrictionReasonOverride];
}

id objc_msgSend_deviceSpecificLocalizedStringWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceSpecificLocalizedStringWithKey:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryFromObject_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryFromObject:ofType:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didCancelRequesting(void *a1, const char *a2, ...)
{
  return _[a1 didCancelRequesting];
}

id objc_msgSend_didCircleTimeout(void *a1, const char *a2, ...)
{
  return _[a1 didCircleTimeout];
}

id objc_msgSend_didCompleteVerificationWithSuccess_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteVerificationWithSuccess:duration:");
}

id objc_msgSend_didCompleteWithAuthorization_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteWithAuthorization:error:");
}

id objc_msgSend_didCompleteWithSuccess_authorizationAlreadyComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteWithSuccess:authorizationAlreadyComplete:");
}

id objc_msgSend_didConfirmDeviceWasActivated(void *a1, const char *a2, ...)
{
  return _[a1 didConfirmDeviceWasActivated];
}

id objc_msgSend_didEscapeRequesting(void *a1, const char *a2, ...)
{
  return _[a1 didEscapeRequesting];
}

id objc_msgSend_didFinishAccepting(void *a1, const char *a2, ...)
{
  return _[a1 didFinishAccepting];
}

id objc_msgSend_didPerformVerificationWithSuccess_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPerformVerificationWithSuccess:duration:");
}

id objc_msgSend_didReceiveNewPublicToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveNewPublicToken:");
}

id objc_msgSend_didRespondToMessage_result_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRespondToMessage:result:payload:");
}

id objc_msgSend_didRespondToMessage_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRespondToMessage:withResult:");
}

id objc_msgSend_didSucceed(void *a1, const char *a2, ...)
{
  return _[a1 didSucceed];
}

id objc_msgSend_disableProximityAuth(void *a1, const char *a2, ...)
{
  return _[a1 disableProximityAuth];
}

id objc_msgSend_dismissBasicLoginUIForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissBasicLoginUIForContext:client:completion:");
}

id objc_msgSend_dismissBasicLoginUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissBasicLoginUIForContext:completion:");
}

id objc_msgSend_dismissKeepUsingUIForContext_client_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissKeepUsingUIForContext:client:withCompletion:");
}

id objc_msgSend_dismissKeepUsingUIForContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissKeepUsingUIForContext:withCompletion:");
}

id objc_msgSend_dismissNativeRecoveryUIForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissNativeRecoveryUIForContext:client:completion:");
}

id objc_msgSend_dismissNativeRecoveryUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissNativeRecoveryUIForContext:completion:");
}

id objc_msgSend_dismissProximityPairingUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissProximityPairingUIForContext:completion:");
}

id objc_msgSend_dismissSecondFactorUIForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissSecondFactorUIForContext:client:completion:");
}

id objc_msgSend_dismissSecondFactorUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissSecondFactorUIForContext:completion:");
}

id objc_msgSend_dismissServerProvidedUIForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissServerProvidedUIForContext:client:completion:");
}

id objc_msgSend_dismissServerProvidedUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissServerProvidedUIForContext:completion:");
}

id objc_msgSend_dispatchCounter(void *a1, const char *a2, ...)
{
  return _[a1 dispatchCounter];
}

id objc_msgSend_dispatchDate(void *a1, const char *a2, ...)
{
  return _[a1 dispatchDate];
}

id objc_msgSend_dispatchingInfo(void *a1, const char *a2, ...)
{
  return _[a1 dispatchingInfo];
}

id objc_msgSend_dispose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispose:");
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleFromColumn_inStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleFromColumn:inStatement:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _[a1 dsid];
}

id objc_msgSend_edpRequestWithAltDSID_URLKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edpRequestWithAltDSID:URLKey:completion:");
}

id objc_msgSend_edpState(void *a1, const char *a2, ...)
{
  return _[a1 edpState];
}

id objc_msgSend_edpStateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edpStateForAccount:");
}

id objc_msgSend_edpStateValueForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edpStateValueForAccount:");
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_eligibleForContinuationKeyAuthentication(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForContinuationKeyAuthentication];
}

id objc_msgSend_emailForContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emailForContext:error:");
}

id objc_msgSend_enableTransactions(void *a1, const char *a2, ...)
{
  return _[a1 enableTransactions];
}

id objc_msgSend_enclosureColor(void *a1, const char *a2, ...)
{
  return _[a1 enclosureColor];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encryptedPRKC(void *a1, const char *a2, ...)
{
  return _[a1 encryptedPRKC];
}

id objc_msgSend_endAuthenticatedRequestWithContext_client_clearanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAuthenticatedRequestWithContext:client:clearanceHandler:");
}

id objc_msgSend_endAuthenticationForAppleID_password_error_context_client_clearanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAuthenticationForAppleID:password:error:context:client:clearanceHandler:");
}

id objc_msgSend_endPointVIP(void *a1, const char *a2, ...)
{
  return _[a1 endPointVIP];
}

id objc_msgSend_endProvisioningWithSession_PTM_PTMLength_TK_TKLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endProvisioningWithSession:PTM:PTMLength:TK:TKLength:");
}

id objc_msgSend_endSessionWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionWithContext:client:completion:");
}

id objc_msgSend_endorseeDevice(void *a1, const char *a2, ...)
{
  return _[a1 endorseeDevice];
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return _[a1 endpoint];
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return _[a1 engine];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_environmentValueForKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentValueForKey:completion:");
}

id objc_msgSend_eraseAnisetteForContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseAnisetteForContext:withCompletion:");
}

id objc_msgSend_eraseAnisetteForDevice_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseAnisetteForDevice:completion:");
}

id objc_msgSend_eraseAnisetteWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseAnisetteWithCompletion:");
}

id objc_msgSend_eraseProvisioningForDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseProvisioningForDSID:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorDescriptionIncludingUnderlyingErrorsWithMaxDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorDescriptionIncludingUnderlyingErrorsWithMaxDepth:");
}

id objc_msgSend_errorDomain(void *a1, const char *a2, ...)
{
  return _[a1 errorDomain];
}

id objc_msgSend_errorFromServerResponseParameters_authenticationError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorFromServerResponseParameters:authenticationError:");
}

id objc_msgSend_errorMessage(void *a1, const char *a2, ...)
{
  return _[a1 errorMessage];
}

id objc_msgSend_errorMessageTitle(void *a1, const char *a2, ...)
{
  return _[a1 errorMessageTitle];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_escapeHatchURL(void *a1, const char *a2, ...)
{
  return _[a1 escapeHatchURL];
}

id objc_msgSend_event(void *a1, const char *a2, ...)
{
  return _[a1 event];
}

id objc_msgSend_eventDetails(void *a1, const char *a2, ...)
{
  return _[a1 eventDetails];
}

id objc_msgSend_executeFetchHmeListRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchHmeListRequestWithCompletion:");
}

id objc_msgSend_executeRequestWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequestWithCompletion:");
}

id objc_msgSend_executeWithResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithResponseHandler:");
}

id objc_msgSend_executor(void *a1, const char *a2, ...)
{
  return _[a1 executor];
}

id objc_msgSend_existingStatus(void *a1, const char *a2, ...)
{
  return _[a1 existingStatus];
}

id objc_msgSend_expectedResponseType(void *a1, const char *a2, ...)
{
  return _[a1 expectedResponseType];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expiryDate(void *a1, const char *a2, ...)
{
  return _[a1 expiryDate];
}

id objc_msgSend_extensionItemWithAppleIDAuthenticationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionItemWithAppleIDAuthenticationContext:");
}

id objc_msgSend_externalizedVersion(void *a1, const char *a2, ...)
{
  return _[a1 externalizedVersion];
}

id objc_msgSend_externalizedVersionString(void *a1, const char *a2, ...)
{
  return _[a1 externalizedVersionString];
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return _[a1 familyName];
}

id objc_msgSend_familyNameForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyNameForAccount:");
}

id objc_msgSend_federatedAuthRequestPayload(void *a1, const char *a2, ...)
{
  return _[a1 federatedAuthRequestPayload];
}

id objc_msgSend_federatedAuthSamlRequest(void *a1, const char *a2, ...)
{
  return _[a1 federatedAuthSamlRequest];
}

id objc_msgSend_federatedAuthURL(void *a1, const char *a2, ...)
{
  return _[a1 federatedAuthURL];
}

id objc_msgSend_federatedAuthURLWhiteList(void *a1, const char *a2, ...)
{
  return _[a1 federatedAuthURLWhiteList];
}

id objc_msgSend_fetchAccountsSharedWithCurrentUserWithClientID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountsSharedWithCurrentUserWithClientID:completionHandler:");
}

id objc_msgSend_fetchAllAccountsSharedByCurrentUserWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllAccountsSharedByCurrentUserWithCompletionHandler:");
}

id objc_msgSend_fetchAllPrivateEmailsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllPrivateEmailsWithError:");
}

id objc_msgSend_fetchAnisetteDataAndProvisionIfNecessary_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAnisetteDataAndProvisionIfNecessary:device:completion:");
}

id objc_msgSend_fetchAnisetteDataAndProvisionIfNecessary_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAnisetteDataAndProvisionIfNecessary:withCompletion:");
}

id objc_msgSend_fetchAnisetteDataForContext_provisionIfNecessary_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAnisetteDataForContext:provisionIfNecessary:withCompletion:");
}

id objc_msgSend_fetchAppInformationWithAltDSID_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAppInformationWithAltDSID:client:completion:");
}

id objc_msgSend_fetchAttestationDataForRequestData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAttestationDataForRequestData:completion:");
}

id objc_msgSend_fetchAuthModeWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAuthModeWithContext:client:completion:");
}

id objc_msgSend_fetchAuthorizationListVersionWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAuthorizationListVersionWithAltDSID:");
}

id objc_msgSend_fetchBirthDayForAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBirthDayForAltDSID:error:");
}

id objc_msgSend_fetchContextForWebSessionIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchContextForWebSessionIdentifier:completion:");
}

id objc_msgSend_fetchDeveloperTeamWithClientID_withAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeveloperTeamWithClientID:withAltDSID:completion:");
}

id objc_msgSend_fetchDeveloperTeamWithTeamID_withAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeveloperTeamWithTeamID:withAltDSID:completion:");
}

id objc_msgSend_fetchDeviceListWithContext_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceListWithContext:completionHandler:");
}

id objc_msgSend_fetchDeviceSafetyState(void *a1, const char *a2, ...)
{
  return _[a1 fetchDeviceSafetyState];
}

id objc_msgSend_fetchGlobalConfigURL(void *a1, const char *a2, ...)
{
  return _[a1 fetchGlobalConfigURL];
}

id objc_msgSend_fetchGlobalConfigUsingCachePolicy_context_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchGlobalConfigUsingCachePolicy:context:completion:");
}

id objc_msgSend_fetchIconBlock(void *a1, const char *a2, ...)
{
  return _[a1 fetchIconBlock];
}

id objc_msgSend_fetchKeychainItemWithDescriptor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeychainItemWithDescriptor:completion:");
}

id objc_msgSend_fetchKeychainItemsWithDescriptor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeychainItemsWithDescriptor:completion:");
}

id objc_msgSend_fetchMDMInformationIfNecessaryForAccount_accountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMDMInformationIfNecessaryForAccount:accountManager:");
}

id objc_msgSend_fetchMDMInformationIfNecessaryForAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMDMInformationIfNecessaryForAuthContext:");
}

id objc_msgSend_fetchPeerAttestationDataForContext_withRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPeerAttestationDataForContext:withRequest:completion:");
}

id objc_msgSend_fetchPeerAttestationDataForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPeerAttestationDataForRequest:completion:");
}

id objc_msgSend_fetchPrimaryApplicationInformationForAltDSID_appInformation_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPrimaryApplicationInformationForAltDSID:appInformation:client:completion:");
}

id objc_msgSend_fetchPrivateEmailWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPrivateEmailWithContext:completion:");
}

id objc_msgSend_fetchRealUserLikelihoodForRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRealUserLikelihoodForRequest:withCompletionHandler:");
}

id objc_msgSend_fetchSignInWithApplePrivateEmailWith_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSignInWithApplePrivateEmailWith:completionHandler:");
}

id objc_msgSend_fetchToken(void *a1, const char *a2, ...)
{
  return _[a1 fetchToken];
}

id objc_msgSend_fetchUICapableContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUICapableContext:client:completion:");
}

id objc_msgSend_fetchURLBagForAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchURLBagForAltDSID:completion:");
}

id objc_msgSend_fetchURLBagForAltDSID_fromCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchURLBagForAltDSID:fromCache:completion:");
}

id objc_msgSend_fetchUserConfigForAltDSID_client_dataCenter_forIdentifiers_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserConfigForAltDSID:client:dataCenter:forIdentifiers:completion:");
}

id objc_msgSend_fetchUserInfoForAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserInfoForAltDSID:completion:");
}

id objc_msgSend_fetchUserInformationForAltDSID_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserInformationForAltDSID:client:completion:");
}

id objc_msgSend_fetchUserInformationWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserInformationWithContext:client:completion:");
}

id objc_msgSend_fetchWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWithContext:");
}

id objc_msgSend_fetchWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWithContext:error:");
}

id objc_msgSend_fidoHandler(void *a1, const char *a2, ...)
{
  return _[a1 fidoHandler];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_finishFidoAuthWithResponse_client_context_recoveryToken_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishFidoAuthWithResponse:client:context:recoveryToken:completion:");
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return _[a1 firstName];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flushCacheForced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushCacheForced:");
}

id objc_msgSend_flushCachedPasswords(void *a1, const char *a2, ...)
{
  return _[a1 flushCachedPasswords];
}

id objc_msgSend_followUpProvider(void *a1, const char *a2, ...)
{
  return _[a1 followUpProvider];
}

id objc_msgSend_forceURLBagUpdateForAltDSID_urlSwitchData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceURLBagUpdateForAltDSID:urlSwitchData:completion:");
}

id objc_msgSend_forceUpdateBagWithUrlSwitchData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceUpdateBagWithUrlSwitchData:completion:");
}

id objc_msgSend_formattedUsernameFromUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedUsernameFromUsername:");
}

id objc_msgSend_forwardingEmail(void *a1, const char *a2, ...)
{
  return _[a1 forwardingEmail];
}

id objc_msgSend_forwardingEmailForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forwardingEmailForAccount:");
}

id objc_msgSend_frequency(void *a1, const char *a2, ...)
{
  return _[a1 frequency];
}

id objc_msgSend_fromURLCache(void *a1, const char *a2, ...)
{
  return _[a1 fromURLCache];
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _[a1 fullName];
}

id objc_msgSend_generateCheckinID(void *a1, const char *a2, ...)
{
  return _[a1 generateCheckinID];
}

id objc_msgSend_generateLoginCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateLoginCode:");
}

id objc_msgSend_generatePhoneAuthenticationSignatureOverData_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generatePhoneAuthenticationSignatureOverData:withCompletion:");
}

id objc_msgSend_generateRadarRequestFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateRadarRequestFor:");
}

id objc_msgSend_get3PRegulatoryOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "get3PRegulatoryOverride:");
}

id objc_msgSend_getApprovedSharedWebCredentialsEntriesSortedByHighestValueForAppWithAppID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getApprovedSharedWebCredentialsEntriesSortedByHighestValueForAppWithAppID:completionHandler:");
}

id objc_msgSend_getCredentialStateForClientID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCredentialStateForClientID:completion:");
}

id objc_msgSend_getCredentialStateForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCredentialStateForRequest:completion:");
}

id objc_msgSend_getCredentialsForAppWithAppID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCredentialsForAppWithAppID:completionHandler:");
}

id objc_msgSend_getCredentialsForAppWithAppID_externallyVerifiedAndApprovedSharedWebCredentialDomains_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCredentialsForAppWithAppID:externallyVerifiedAndApprovedSharedWebCredentialDomains:completionHandler:");
}

id objc_msgSend_getCurrentDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentDataSubscriptionContextSync:");
}

id objc_msgSend_getIDMSRoutingInfo_forDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIDMSRoutingInfo:forDSID:");
}

id objc_msgSend_getInternalCredentialStateForCredentialRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getInternalCredentialStateForCredentialRequestContext:");
}

id objc_msgSend_getManagementState(void *a1, const char *a2, ...)
{
  return _[a1 getManagementState];
}

id objc_msgSend_getManagementStateForMAID(void *a1, const char *a2, ...)
{
  return _[a1 getManagementStateForMAID];
}

id objc_msgSend_getMobileSubscriberHomeCountryList_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMobileSubscriberHomeCountryList:error:");
}

id objc_msgSend_getOrgTokenForMAID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOrgTokenForMAID:");
}

id objc_msgSend_getOrganizationToken(void *a1, const char *a2, ...)
{
  return _[a1 getOrganizationToken];
}

id objc_msgSend_getServerUILoadDelegateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getServerUILoadDelegateWithContext:completion:");
}

id objc_msgSend_getServerUILoadDelegateWithServerContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getServerUILoadDelegateWithServerContext:completion:");
}

id objc_msgSend_getSubscriptionInfoWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSubscriptionInfoWithError:");
}

id objc_msgSend_getUserDefaultVoiceSubscriptionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserDefaultVoiceSubscriptionContext:");
}

id objc_msgSend_getVerificationResultWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVerificationResultWithOptions:completion:");
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _[a1 givenName];
}

id objc_msgSend_givenNameForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "givenNameForAccount:");
}

id objc_msgSend_groupID(void *a1, const char *a2, ...)
{
  return _[a1 groupID];
}

id objc_msgSend_groupKitEligibility(void *a1, const char *a2, ...)
{
  return _[a1 groupKitEligibility];
}

id objc_msgSend_groupKitEligibilityForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupKitEligibilityForAccount:");
}

id objc_msgSend_handleResponseCode(void *a1, const char *a2, ...)
{
  return _[a1 handleResponseCode];
}

id objc_msgSend_handleResponseCode_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponseCode:altDSID:");
}

id objc_msgSend_handleResponseError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponseError:");
}

id objc_msgSend_hasBirthdayAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasBirthdayAccess];
}

id objc_msgSend_hasCheckedIn(void *a1, const char *a2, ...)
{
  return _[a1 hasCheckedIn];
}

id objc_msgSend_hasCompanionKeyEnvelopeAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasCompanionKeyEnvelopeAccess];
}

id objc_msgSend_hasInternalAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasInternalAccess];
}

id objc_msgSend_hasInternalEntitledAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasInternalEntitledAccess];
}

id objc_msgSend_hasInternalPrivateAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasInternalPrivateAccess];
}

id objc_msgSend_hasInternalPrivateEntitlementAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasInternalPrivateEntitlementAccess];
}

id objc_msgSend_hasMDM(void *a1, const char *a2, ...)
{
  return _[a1 hasMDM];
}

id objc_msgSend_hasMDMForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMDMForAccount:");
}

id objc_msgSend_hasModernRecoveryKey(void *a1, const char *a2, ...)
{
  return _[a1 hasModernRecoveryKey];
}

id objc_msgSend_hasModernRecoveryKeyForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasModernRecoveryKeyForAccount:");
}

id objc_msgSend_hasOwnerAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasOwnerAccess];
}

id objc_msgSend_hasPersonaAvailableForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPersonaAvailableForAltDSID:");
}

id objc_msgSend_hasPrimaryiCloudAccountForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrimaryiCloudAccountForAltDSID:");
}

id objc_msgSend_hasPrivateAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasPrivateAccess];
}

id objc_msgSend_hasPrivateSignedAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasPrivateSignedAccess];
}

id objc_msgSend_hasPublicAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasPublicAccess];
}

id objc_msgSend_hasRegisteredSurrogateForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRegisteredSurrogateForContext:");
}

id objc_msgSend_hasSOSActiveDevice(void *a1, const char *a2, ...)
{
  return _[a1 hasSOSActiveDevice];
}

id objc_msgSend_hasSOSActiveDeviceForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSOSActiveDeviceForAccount:");
}

id objc_msgSend_hasSelectedSharedAccountForLogin(void *a1, const char *a2, ...)
{
  return _[a1 hasSelectedSharedAccountForLogin];
}

id objc_msgSend_hasServerOnlyDeviceListAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasServerOnlyDeviceListAccess];
}

id objc_msgSend_hasSiwaAccountListAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasSiwaAccountListAccess];
}

id objc_msgSend_hasSiwaDefaultEntitlementAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasSiwaDefaultEntitlementAccess];
}

id objc_msgSend_hasSiwaEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 hasSiwaEntitlement];
}

id objc_msgSend_hasSiwaUnderageEntitlementAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasSiwaUnderageEntitlementAccess];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasUniqueDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 hasUniqueDeviceIdentifier];
}

id objc_msgSend_hasUsedAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 hasUsedAuthorization];
}

id objc_msgSend_hasWriteAccess(void *a1, const char *a2, ...)
{
  return _[a1 hasWriteAccess];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash:");
}

id objc_msgSend_hashedWrappingKeyRKC(void *a1, const char *a2, ...)
{
  return _[a1 hashedWrappingKeyRKC];
}

id objc_msgSend_headerSize(void *a1, const char *a2, ...)
{
  return _[a1 headerSize];
}

id objc_msgSend_headerValue(void *a1, const char *a2, ...)
{
  return _[a1 headerValue];
}

id objc_msgSend_headers(void *a1, const char *a2, ...)
{
  return _[a1 headers];
}

id objc_msgSend_hearbeatTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hearbeatTokenForAccount:");
}

id objc_msgSend_heartbeatToken(void *a1, const char *a2, ...)
{
  return _[a1 heartbeatToken];
}

id objc_msgSend_heartbeatTokenValue(void *a1, const char *a2, ...)
{
  return _[a1 heartbeatTokenValue];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_housingColor(void *a1, const char *a2, ...)
{
  return _[a1 housingColor];
}

id objc_msgSend_iCloudAccountForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudAccountForAltDSID:");
}

id objc_msgSend_iCloudAccountForAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudAccountForAppleID:");
}

id objc_msgSend_iForgotContinuationURL(void *a1, const char *a2, ...)
{
  return _[a1 iForgotContinuationURL];
}

id objc_msgSend_iForgotURL(void *a1, const char *a2, ...)
{
  return _[a1 iForgotURL];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identityToken(void *a1, const char *a2, ...)
{
  return _[a1 identityToken];
}

id objc_msgSend_identityTokenValue(void *a1, const char *a2, ...)
{
  return _[a1 identityTokenValue];
}

id objc_msgSend_idmsData(void *a1, const char *a2, ...)
{
  return _[a1 idmsData];
}

id objc_msgSend_idmsDataToken(void *a1, const char *a2, ...)
{
  return _[a1 idmsDataToken];
}

id objc_msgSend_idmsEDPTokenId(void *a1, const char *a2, ...)
{
  return _[a1 idmsEDPTokenId];
}

id objc_msgSend_idmsEDPTokenIdForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idmsEDPTokenIdForAccount:");
}

id objc_msgSend_idmsTokenWithBase64String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idmsTokenWithBase64String:");
}

id objc_msgSend_ignoreInternalTokens(void *a1, const char *a2, ...)
{
  return _[a1 ignoreInternalTokens];
}

id objc_msgSend_ignorePasswordCache(void *a1, const char *a2, ...)
{
  return _[a1 ignorePasswordCache];
}

id objc_msgSend_imageURLString(void *a1, const char *a2, ...)
{
  return _[a1 imageURLString];
}

id objc_msgSend_inActiveHMECount(void *a1, const char *a2, ...)
{
  return _[a1 inActiveHMECount];
}

id objc_msgSend_inProgressSurrogates(void *a1, const char *a2, ...)
{
  return _[a1 inProgressSurrogates];
}

id objc_msgSend_inactiveiCloudPrivateEmailCountForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inactiveiCloudPrivateEmailCountForAccount:");
}

id objc_msgSend_includeFamilyDevices(void *a1, const char *a2, ...)
{
  return _[a1 includeFamilyDevices];
}

id objc_msgSend_includeUntrustedDevices(void *a1, const char *a2, ...)
{
  return _[a1 includeUntrustedDevices];
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_informativeText(void *a1, const char *a2, ...)
{
  return _[a1 informativeText];
}

id objc_msgSend_inheritanceBeneficiarySetupToken(void *a1, const char *a2, ...)
{
  return _[a1 inheritanceBeneficiarySetupToken];
}

id objc_msgSend_inheritanceContext(void *a1, const char *a2, ...)
{
  return _[a1 inheritanceContext];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initWithAccount_accountManager_featureManager_configuration_device_cdpFactory_authenticationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:accountManager:featureManager:configuration:device:cdpFactory:authenticationController:");
}

id objc_msgSend_initWithAccountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountManager:");
}

id objc_msgSend_initWithAccountManager_webSessionPCSKeyProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountManager:webSessionPCSKeyProvider:");
}

id objc_msgSend_initWithAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountType:");
}

id objc_msgSend_initWithAddress_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:forKey:");
}

id objc_msgSend_initWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAltDSID:");
}

id objc_msgSend_initWithAltDSID_identityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAltDSID:identityToken:");
}

id objc_msgSend_initWithAltDSID_urlSwitchData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAltDSID:urlSwitchData:");
}

id objc_msgSend_initWithAppleID_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppleID:altDSID:");
}

id objc_msgSend_initWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributes:");
}

id objc_msgSend_initWithAuthenticatedServerRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAuthenticatedServerRequestContext:");
}

id objc_msgSend_initWithAuthorizationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAuthorizationController:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBase_maxQueueSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase:maxQueueSize:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCircleContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCircleContext:");
}

id objc_msgSend_initWithClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:");
}

id objc_msgSend_initWithClient_accountManager_localAccountsStorageController_sharedAccountsStorageController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:accountManager:localAccountsStorageController:sharedAccountsStorageController:");
}

id objc_msgSend_initWithClient_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:altDSID:");
}

id objc_msgSend_initWithClient_authenticationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:authenticationContext:");
}

id objc_msgSend_initWithClient_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:context:");
}

id objc_msgSend_initWithClient_passwordResetPresenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:passwordResetPresenter:");
}

id objc_msgSend_initWithClient_requestDispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:requestDispatcher:");
}

id objc_msgSend_initWithClient_signingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:signingBlock:");
}

id objc_msgSend_initWithConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:");
}

id objc_msgSend_initWithContainerPath_withSandboxToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerPath:withSandboxToken:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:client:");
}

id objc_msgSend_initWithContext_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:url:");
}

id objc_msgSend_initWithContext_urlBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:urlBagKey:");
}

id objc_msgSend_initWithContext_urlBagKey_shouldCacheResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:urlBagKey:shouldCacheResource:");
}

id objc_msgSend_initWithContext_urlBagKey_shouldCacheResource_accountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:urlBagKey:shouldCacheResource:accountManager:");
}

id objc_msgSend_initWithCredentialRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCredentialRequest:");
}

id objc_msgSend_initWithCredentialRequest_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCredentialRequest:connection:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDatabasePath_migrationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabasePath:migrationController:");
}

id objc_msgSend_initWithDate_counter_algorithm_relinquisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:counter:algorithm:relinquisher:");
}

id objc_msgSend_initWithDelay_maxQueueSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelay:maxQueueSize:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_queue_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:options:");
}

id objc_msgSend_initWithDescriptor_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDescriptor:value:");
}

id objc_msgSend_initWithDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceID:");
}

id objc_msgSend_initWithDeviceMID_serialNumber_restrictionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceMID:serialNumber:restrictionReason:");
}

id objc_msgSend_initWithDeviceManagedState_organizationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceManagedState:organizationToken:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDomain_authenticationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:authenticationContext:");
}

id objc_msgSend_initWithEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEngine:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithEventName_eventCategory_initData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventName:eventCategory:initData:");
}

id objc_msgSend_initWithFollowUpFactory_provider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFollowUpFactory:provider:");
}

id objc_msgSend_initWithIdentifier_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:altDSID:");
}

id objc_msgSend_initWithInfo_responder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInfo:responder:");
}

id objc_msgSend_initWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:");
}

id objc_msgSend_initWithKey_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:altDSID:");
}

id objc_msgSend_initWithKey_altDSID_clientAppBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:altDSID:clientAppBundleId:");
}

id objc_msgSend_initWithKey_altDSID_originType_originIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:altDSID:originType:originIdentifier:");
}

id objc_msgSend_initWithKeychainManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeychainManager:");
}

id objc_msgSend_initWithKeychainStorageController_keychainGroupManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeychainStorageController:keychainGroupManager:");
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLatitude:longitude:");
}

id objc_msgSend_initWithLiaison_client_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLiaison:client:delegate:");
}

id objc_msgSend_initWithListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListenerEndpoint:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMaxWait_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxWait:description:");
}

id objc_msgSend_initWithMediaServiceController_localStorageController_metadataService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMediaServiceController:localStorageController:metadataService:");
}

id objc_msgSend_initWithMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessage:");
}

id objc_msgSend_initWithName_tier_serviceUrl_httpHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:tier:serviceUrl:httpHeaders:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithObject_expiryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:expiryDate:");
}

id objc_msgSend_initWithPCSKeyProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPCSKeyProvider:");
}

id objc_msgSend_initWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:");
}

id objc_msgSend_initWithPasskeyValidator_authenticationController_accountManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPasskeyValidator:authenticationController:accountManager:");
}

id objc_msgSend_initWithPasskeyValidator_challengeProvider_credentialProvider_registrationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPasskeyValidator:challengeProvider:credentialProvider:registrationProvider:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPiggybackReporter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPiggybackReporter:");
}

id objc_msgSend_initWithPresenceSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPresenceSID:");
}

id objc_msgSend_initWithProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProxy:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:");
}

id objc_msgSend_initWithRequest_requestType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:requestType:");
}

id objc_msgSend_initWithRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestContext:");
}

id objc_msgSend_initWithRequestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestID:");
}

id objc_msgSend_initWithRequestProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestProvider:");
}

id objc_msgSend_initWithResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponse:error:");
}

id objc_msgSend_initWithResponseBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponseBody:");
}

id objc_msgSend_initWithResponseInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResponseInfo:");
}

id objc_msgSend_initWithSRPContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSRPContext:");
}

id objc_msgSend_initWithServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServerResponse:");
}

id objc_msgSend_initWithServerResponse_andDelegate_piggybackReporter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServerResponse:andDelegate:piggybackReporter:");
}

id objc_msgSend_initWithServerResponse_forAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServerResponse:forAppleID:");
}

id objc_msgSend_initWithServerResponse_responseBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServerResponse:responseBody:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithServiceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceController:");
}

id objc_msgSend_initWithServiceName_viewControllerClassName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:viewControllerClassName:");
}

id objc_msgSend_initWithSignInWithAppleAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSignInWithAppleAccount:");
}

id objc_msgSend_initWithStoreManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreManager:");
}

id objc_msgSend_initWithStoreManager_cdpFactory_accountManager_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreManager:cdpFactory:accountManager:client:");
}

id objc_msgSend_initWithStoreManager_sharedAccountsStorageController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreManager:sharedAccountsStorageController:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithStrongDeviceIdentifying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStrongDeviceIdentifying:");
}

id objc_msgSend_initWithTokens_accountManager_context_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokens:accountManager:context:altDSID:");
}

id objc_msgSend_initWithType_primary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:primary:");
}

id objc_msgSend_initWithUILiaison_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUILiaison:client:");
}

id objc_msgSend_initWithUILiaison_client_requestDispatcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUILiaison:client:requestDispatcher:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_contextHelper_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:contextHelper:completionHandler:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithURLRequestProvider_authenticationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLRequestProvider:authenticationHandler:completionHandler:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUrlBagKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUrlBagKey:");
}

id objc_msgSend_initWithUser_password_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUser:password:");
}

id objc_msgSend_initWithUser_site_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUser:site:");
}

id objc_msgSend_initWithWebSessionIdentifier_expiryDate_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWebSessionIdentifier:expiryDate:userInfo:");
}

id objc_msgSend_initialAuthResponse(void *a1, const char *a2, ...)
{
  return _[a1 initialAuthResponse];
}

id objc_msgSend_initialMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialMessage:");
}

id objc_msgSend_initiatePiggybackingWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initiatePiggybackingWithCompletion:");
}

id objc_msgSend_initiatingContext(void *a1, const char *a2, ...)
{
  return _[a1 initiatingContext];
}

id objc_msgSend_initiatingPassword(void *a1, const char *a2, ...)
{
  return _[a1 initiatingPassword];
}

id objc_msgSend_initiatingServerResponse(void *a1, const char *a2, ...)
{
  return _[a1 initiatingServerResponse];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_integratedCircuitCardIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 integratedCircuitCardIdentifier];
}

id objc_msgSend_internalFeaturesMaskValue(void *a1, const char *a2, ...)
{
  return _[a1 internalFeaturesMaskValue];
}

id objc_msgSend_internationalMobileEquipmentIdentity(void *a1, const char *a2, ...)
{
  return _[a1 internationalMobileEquipmentIdentity];
}

id objc_msgSend_internationalMobileEquipmentIdentity2(void *a1, const char *a2, ...)
{
  return _[a1 internationalMobileEquipmentIdentity2];
}

id objc_msgSend_invalidListVersionSupplied(void *a1, const char *a2, ...)
{
  return _[a1 invalidListVersionSupplied];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateWithError:");
}

id objc_msgSend_invalidationHandler(void *a1, const char *a2, ...)
{
  return _[a1 invalidationHandler];
}

id objc_msgSend_isAABrandingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAABrandingEnabled];
}

id objc_msgSend_isAcceptingPayload(void *a1, const char *a2, ...)
{
  return _[a1 isAcceptingPayload];
}

id objc_msgSend_isAccountNotProvisioned(void *a1, const char *a2, ...)
{
  return _[a1 isAccountNotProvisioned];
}

id objc_msgSend_isAccountsFrameworkAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAccountsFrameworkAvailable];
}

id objc_msgSend_isActivated(void *a1, const char *a2, ...)
{
  return _[a1 isActivated];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAnisetteReprovisioningRequired(void *a1, const char *a2, ...)
{
  return _[a1 isAnisetteReprovisioningRequired];
}

id objc_msgSend_isAnisetteResyncRequired(void *a1, const char *a2, ...)
{
  return _[a1 isAnisetteResyncRequired];
}

id objc_msgSend_isAppWithBundleIDForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppWithBundleIDForeground:");
}

id objc_msgSend_isAppleIDLoginEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAppleIDLoginEnabled];
}

id objc_msgSend_isAskToBuyForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAskToBuyForAccount:");
}

id objc_msgSend_isAuditLogin(void *a1, const char *a2, ...)
{
  return _[a1 isAuditLogin];
}

id objc_msgSend_isAuthenticatedRequestSerializationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAuthenticatedRequestSerializationEnabled];
}

id objc_msgSend_isBAASupportedForVirtualMachines(void *a1, const char *a2, ...)
{
  return _[a1 isBAASupportedForVirtualMachines];
}

id objc_msgSend_isBaaEnabledForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBaaEnabledForKey:");
}

id objc_msgSend_isBackgroundiCloudSignInEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isBackgroundiCloudSignInEnabled];
}

id objc_msgSend_isBuddyFinished(void *a1, const char *a2, ...)
{
  return _[a1 isBuddyFinished];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isConfiguredForTokenUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 isConfiguredForTokenUpgrade];
}

id objc_msgSend_isContextEligibleForBiometricOrPasscodeAuth(void *a1, const char *a2, ...)
{
  return _[a1 isContextEligibleForBiometricOrPasscodeAuth];
}

id objc_msgSend_isContextEligibleForPasscodeAuth(void *a1, const char *a2, ...)
{
  return _[a1 isContextEligibleForPasscodeAuth];
}

id objc_msgSend_isContextEligibleForSilentAuth(void *a1, const char *a2, ...)
{
  return _[a1 isContextEligibleForSilentAuth];
}

id objc_msgSend_isContextEligibleForSilentAuthCoercion(void *a1, const char *a2, ...)
{
  return _[a1 isContextEligibleForSilentAuthCoercion];
}

id objc_msgSend_isContextRequestingReauthForExistingService(void *a1, const char *a2, ...)
{
  return _[a1 isContextRequestingReauthForExistingService];
}

id objc_msgSend_isContextSecretValidForSRP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContextSecretValidForSRP:");
}

id objc_msgSend_isContinuityPush(void *a1, const char *a2, ...)
{
  return _[a1 isContinuityPush];
}

id objc_msgSend_isCustodianSyncAction(void *a1, const char *a2, ...)
{
  return _[a1 isCustodianSyncAction];
}

id objc_msgSend_isDTOEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDTOEnabled];
}

id objc_msgSend_isDataSeparatedAccountForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDataSeparatedAccountForAltDSID:");
}

id objc_msgSend_isDemoAccount(void *a1, const char *a2, ...)
{
  return _[a1 isDemoAccount];
}

id objc_msgSend_isDeviceInDiagnosticMode(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceInDiagnosticMode];
}

id objc_msgSend_isDeviceListCacheEnableDryMode(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceListCacheEnableDryMode];
}

id objc_msgSend_isDeviceListCacheEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceListCacheEnabled];
}

id objc_msgSend_isDeviceUnlockedSinceBoot(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceUnlockedSinceBoot];
}

id objc_msgSend_isDone(void *a1, const char *a2, ...)
{
  return _[a1 isDone];
}

id objc_msgSend_isEDPHealthyForCDPContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEDPHealthyForCDPContext:completion:");
}

id objc_msgSend_isEligibleForUpgradeFromPassword(void *a1, const char *a2, ...)
{
  return _[a1 isEligibleForUpgradeFromPassword];
}

id objc_msgSend_isEligibleToArmDeviceForPCSAuth(void *a1, const char *a2, ...)
{
  return _[a1 isEligibleToArmDeviceForPCSAuth];
}

id objc_msgSend_isEnabledForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabledForDataclass:");
}

id objc_msgSend_isEnforceMDMPolicyEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnforceMDMPolicyEnabled];
}

id objc_msgSend_isEphemeral(void *a1, const char *a2, ...)
{
  return _[a1 isEphemeral];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExemptedFromMandatoryUISecurityUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 isExemptedFromMandatoryUISecurityUpgrade];
}

id objc_msgSend_isExpired(void *a1, const char *a2, ...)
{
  return _[a1 isExpired];
}

id objc_msgSend_isFidoAuthRequired(void *a1, const char *a2, ...)
{
  return _[a1 isFidoAuthRequired];
}

id objc_msgSend_isFirstPartyApp(void *a1, const char *a2, ...)
{
  return _[a1 isFirstPartyApp];
}

id objc_msgSend_isFirstTimeLogin(void *a1, const char *a2, ...)
{
  return _[a1 isFirstTimeLogin];
}

id objc_msgSend_isForgotPasswordNativeTakeoverEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isForgotPasswordNativeTakeoverEnabled];
}

id objc_msgSend_isInCircle(void *a1, const char *a2, ...)
{
  return _[a1 isInCircle];
}

id objc_msgSend_isInRestrictedSharingMode(void *a1, const char *a2, ...)
{
  return _[a1 isInRestrictedSharingMode];
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return _[a1 isInternalBuild];
}

id objc_msgSend_isLegacyStudent(void *a1, const char *a2, ...)
{
  return _[a1 isLegacyStudent];
}

id objc_msgSend_isMDMInformationRequired(void *a1, const char *a2, ...)
{
  return _[a1 isMDMInformationRequired];
}

id objc_msgSend_isMIDDriftTTRDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isMIDDriftTTRDisabled];
}

id objc_msgSend_isMachineProvisioned_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMachineProvisioned:");
}

id objc_msgSend_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 isManagedAppleID];
}

id objc_msgSend_isManagedAppleIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManagedAppleIDForAccount:");
}

id objc_msgSend_isMdmInfoRequired(void *a1, const char *a2, ...)
{
  return _[a1 isMdmInfoRequired];
}

id objc_msgSend_isMemberOfGroupWithGroupID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfGroupWithGroupID:completion:");
}

id objc_msgSend_isMultiUserMode(void *a1, const char *a2, ...)
{
  return _[a1 isMultiUserMode];
}

id objc_msgSend_isNotificationEmailAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isNotificationEmailAvailable];
}

id objc_msgSend_isNotificationEmailAvailableForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNotificationEmailAvailableForAccount:");
}

id objc_msgSend_isPasscodeAuthEnabledForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPasscodeAuthEnabledForAccount:");
}

id objc_msgSend_isPasscodeResetRequired(void *a1, const char *a2, ...)
{
  return _[a1 isPasscodeResetRequired];
}

id objc_msgSend_isPasswordResetRequestInProgress(void *a1, const char *a2, ...)
{
  return _[a1 isPasswordResetRequestInProgress];
}

id objc_msgSend_isPermittedForInteractiveAuthOnLimitedContext(void *a1, const char *a2, ...)
{
  return _[a1 isPermittedForInteractiveAuthOnLimitedContext];
}

id objc_msgSend_isPermittedToAccessBirthday(void *a1, const char *a2, ...)
{
  return _[a1 isPermittedToAccessBirthday];
}

id objc_msgSend_isPermittedToProxy(void *a1, const char *a2, ...)
{
  return _[a1 isPermittedToProxy];
}

id objc_msgSend_isPermittedToProxyAuthorizationBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 isPermittedToProxyAuthorizationBundleIdentifier];
}

id objc_msgSend_isPermittedToProxyInitialAuth(void *a1, const char *a2, ...)
{
  return _[a1 isPermittedToProxyInitialAuth];
}

id objc_msgSend_isPltUpgradeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPltUpgradeEnabled];
}

id objc_msgSend_isPrimaryiCloudAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrimaryiCloudAccount:");
}

id objc_msgSend_isProtectedWithPasscode(void *a1, const char *a2, ...)
{
  return _[a1 isProtectedWithPasscode];
}

id objc_msgSend_isProxForAuthkitEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isProxForAuthkitEnabled];
}

id objc_msgSend_isProximityAuthEligible(void *a1, const char *a2, ...)
{
  return _[a1 isProximityAuthEligible];
}

id objc_msgSend_isProximityAuthEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProximityAuthEligible:");
}

id objc_msgSend_isProximityEligible(void *a1, const char *a2, ...)
{
  return _[a1 isProximityEligible];
}

id objc_msgSend_isRKVerification(void *a1, const char *a2, ...)
{
  return _[a1 isRKVerification];
}

id objc_msgSend_isRecoverableError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRecoverableError:");
}

id objc_msgSend_isRequestedFromOOPViewService(void *a1, const char *a2, ...)
{
  return _[a1 isRequestedFromOOPViewService];
}

id objc_msgSend_isRequestingPayload(void *a1, const char *a2, ...)
{
  return _[a1 isRequestingPayload];
}

id objc_msgSend_isRetryRequired(void *a1, const char *a2, ...)
{
  return _[a1 isRetryRequired];
}

id objc_msgSend_isSOSNeededForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSOSNeededForAccount:");
}

id objc_msgSend_isSecondaryActionRequired(void *a1, const char *a2, ...)
{
  return _[a1 isSecondaryActionRequired];
}

id objc_msgSend_isSecondaryActionURLGSEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 isSecondaryActionURLGSEndpoint];
}

id objc_msgSend_isSenior(void *a1, const char *a2, ...)
{
  return _[a1 isSenior];
}

id objc_msgSend_isServerUIRequired(void *a1, const char *a2, ...)
{
  return _[a1 isServerUIRequired];
}

id objc_msgSend_isSilent(void *a1, const char *a2, ...)
{
  return _[a1 isSilent];
}

id objc_msgSend_isSilentAuthenticationRequestSerializationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSilentAuthenticationRequestSerializationEnabled];
}

id objc_msgSend_isSiwaCredentialSharingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSiwaCredentialSharingEnabled];
}

id objc_msgSend_isSiwaEnabledForChildAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSiwaEnabledForChildAccount:");
}

id objc_msgSend_isSiwaForChildEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSiwaForChildEnabled];
}

id objc_msgSend_isSiwaInPasswordsFeatureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSiwaInPasswordsFeatureEnabled];
}

id objc_msgSend_isStrongDeviceIdentitySupported(void *a1, const char *a2, ...)
{
  return _[a1 isStrongDeviceIdentitySupported];
}

id objc_msgSend_isSurrogateAuthInProgressForClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSurrogateAuthInProgressForClientBundleID:");
}

id objc_msgSend_isTiburonU13Enabled(void *a1, const char *a2, ...)
{
  return _[a1 isTiburonU13Enabled];
}

id objc_msgSend_isTokenCacheEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTokenCacheEnabled];
}

id objc_msgSend_isTokenCreationTimeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTokenCreationTimeEnabled];
}

id objc_msgSend_isTracingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTracingEnabled];
}

id objc_msgSend_isTriggeredByNotification(void *a1, const char *a2, ...)
{
  return _[a1 isTriggeredByNotification];
}

id objc_msgSend_isURLResponse(void *a1, const char *a2, ...)
{
  return _[a1 isURLResponse];
}

id objc_msgSend_isURLSwitchingRequired(void *a1, const char *a2, ...)
{
  return _[a1 isURLSwitchingRequired];
}

id objc_msgSend_isUnderAgeOfMajority(void *a1, const char *a2, ...)
{
  return _[a1 isUnderAgeOfMajority];
}

id objc_msgSend_isUnderage(void *a1, const char *a2, ...)
{
  return _[a1 isUnderage];
}

id objc_msgSend_isUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 isUnlocked];
}

id objc_msgSend_isUpdateable(void *a1, const char *a2, ...)
{
  return _[a1 isUpdateable];
}

id objc_msgSend_isUsernameEditable(void *a1, const char *a2, ...)
{
  return _[a1 isUsernameEditable];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidEnvironment:");
}

id objc_msgSend_isValidMessage(void *a1, const char *a2, ...)
{
  return _[a1 isValidMessage];
}

id objc_msgSend_isVirtualMachine(void *a1, const char *a2, ...)
{
  return _[a1 isVirtualMachine];
}

id objc_msgSend_isWaitingForSettingsSurrogateAuth(void *a1, const char *a2, ...)
{
  return _[a1 isWaitingForSettingsSurrogateAuth];
}

id objc_msgSend_isWalrusEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isWalrusEnabled];
}

id objc_msgSend_isWebAccessEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isWebAccessEnabled];
}

id objc_msgSend_isYorktownEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isYorktownEnabled];
}

id objc_msgSend_itemAttributes(void *a1, const char *a2, ...)
{
  return _[a1 itemAttributes];
}

id objc_msgSend_itemClass(void *a1, const char *a2, ...)
{
  return _[a1 itemClass];
}

id objc_msgSend_itemIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 itemIdentifier];
}

id objc_msgSend_itemIdentifiersRequiringNotificationClearFromPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemIdentifiersRequiringNotificationClearFromPayload:");
}

id objc_msgSend_itemsForAltDSID_pushMessageInfo_fromIDMSPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemsForAltDSID:pushMessageInfo:fromIDMSPayload:");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyAndBundleIdAreHashed(void *a1, const char *a2, ...)
{
  return _[a1 keyAndBundleIdAreHashed];
}

id objc_msgSend_keyType(void *a1, const char *a2, ...)
{
  return _[a1 keyType];
}

id objc_msgSend_keychainItemForDescriptor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainItemForDescriptor:error:");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_lastDataSyncTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 lastDataSyncTimestamp];
}

id objc_msgSend_lastKnownIDMSEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownIDMSEnvironment];
}

id objc_msgSend_lastKnownLocale(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownLocale];
}

id objc_msgSend_lastKnownMID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKnownMID:");
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return _[a1 lastName];
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return _[a1 latitude];
}

id objc_msgSend_launchOutOfProcessAuthentication_surrogateID_withErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchOutOfProcessAuthentication:surrogateID:withErrorHandler:");
}

id objc_msgSend_launchSettingsForContext_withCheckinID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchSettingsForContext:withCheckinID:");
}

id objc_msgSend_legacyAnisetteDataForContext_DSID_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacyAnisetteDataForContext:DSID:withCompletion:");
}

id objc_msgSend_legacyAnisetteDataForDSID_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacyAnisetteDataForDSID:withCompletion:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return _[a1 linkType];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedDevicesWithRelationship:");
}

id objc_msgSend_livenessReason(void *a1, const char *a2, ...)
{
  return _[a1 livenessReason];
}

id objc_msgSend_loadDelegate(void *a1, const char *a2, ...)
{
  return _[a1 loadDelegate];
}

id objc_msgSend_localPresenceFound(void *a1, const char *a2, ...)
{
  return _[a1 localPresenceFound];
}

id objc_msgSend_localUserUUID(void *a1, const char *a2, ...)
{
  return _[a1 localUserUUID];
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _[a1 locale];
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 localeIdentifier];
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _[a1 locality];
}

id objc_msgSend_localizedAppName(void *a1, const char *a2, ...)
{
  return _[a1 localizedAppName];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNameForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedNameForContext:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringFromPersonNameComponents_style_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromPersonNameComponents:style:options:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockScreenBody(void *a1, const char *a2, ...)
{
  return _[a1 lockScreenBody];
}

id objc_msgSend_lockScreenTitle(void *a1, const char *a2, ...)
{
  return _[a1 lockScreenTitle];
}

id objc_msgSend_loginChoice(void *a1, const char *a2, ...)
{
  return _[a1 loginChoice];
}

id objc_msgSend_loginChoiceIndex(void *a1, const char *a2, ...)
{
  return _[a1 loginChoiceIndex];
}

id objc_msgSend_loginChoices(void *a1, const char *a2, ...)
{
  return _[a1 loginChoices];
}

id objc_msgSend_loginHandles(void *a1, const char *a2, ...)
{
  return _[a1 loginHandles];
}

id objc_msgSend_loginHandlesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginHandlesForAccount:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longitude(void *a1, const char *a2, ...)
{
  return _[a1 longitude];
}

id objc_msgSend_looksLikeiForgotURLKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "looksLikeiForgotURLKey:");
}

id objc_msgSend_lookupPrivateEmailWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookupPrivateEmailWithContext:completion:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_machAbsoluteTimeToTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "machAbsoluteTimeToTimeInterval:");
}

id objc_msgSend_machineID(void *a1, const char *a2, ...)
{
  return _[a1 machineID];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_makePrivateEmail(void *a1, const char *a2, ...)
{
  return _[a1 makePrivateEmail];
}

id objc_msgSend_managedOrganizationName(void *a1, const char *a2, ...)
{
  return _[a1 managedOrganizationName];
}

id objc_msgSend_managedOrganizationNameForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedOrganizationNameForAccount:");
}

id objc_msgSend_managedOrganizationType(void *a1, const char *a2, ...)
{
  return _[a1 managedOrganizationType];
}

id objc_msgSend_managedOrganizationTypeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedOrganizationTypeForAccount:");
}

id objc_msgSend_manifest(void *a1, const char *a2, ...)
{
  return _[a1 manifest];
}

id objc_msgSend_markAccountForSignOutForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAccountForSignOutForAltDSID:");
}

id objc_msgSend_masterKeyID(void *a1, const char *a2, ...)
{
  return _[a1 masterKeyID];
}

id objc_msgSend_masterToken(void *a1, const char *a2, ...)
{
  return _[a1 masterToken];
}

id objc_msgSend_masterTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "masterTokenForAccount:");
}

id objc_msgSend_matchHandler(void *a1, const char *a2, ...)
{
  return _[a1 matchHandler];
}

id objc_msgSend_maximumLoginAttempts(void *a1, const char *a2, ...)
{
  return _[a1 maximumLoginAttempts];
}

id objc_msgSend_mdmInformationRequiredForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mdmInformationRequiredForAccount:");
}

id objc_msgSend_messageFromTransportRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageFromTransportRepresentation:");
}

id objc_msgSend_messageId(void *a1, const char *a2, ...)
{
  return _[a1 messageId];
}

id objc_msgSend_migrateSchemaIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 migrateSchemaIfNecessary];
}

id objc_msgSend_mobileEquipmentIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 mobileEquipmentIdentifier];
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return _[a1 modelNumber];
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return _[a1 month];
}

id objc_msgSend_mostRecentlyUsedAuthKitAccount(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentlyUsedAuthKitAccount];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_needsCredentialRecovery(void *a1, const char *a2, ...)
{
  return _[a1 needsCredentialRecovery];
}

id objc_msgSend_needsNewAppleID(void *a1, const char *a2, ...)
{
  return _[a1 needsNewAppleID];
}

id objc_msgSend_needsNewChildAccount(void *a1, const char *a2, ...)
{
  return _[a1 needsNewChildAccount];
}

id objc_msgSend_needsPasswordChange(void *a1, const char *a2, ...)
{
  return _[a1 needsPasswordChange];
}

id objc_msgSend_needsRepair(void *a1, const char *a2, ...)
{
  return _[a1 needsRepair];
}

id objc_msgSend_needsSecurityUpgradeUI(void *a1, const char *a2, ...)
{
  return _[a1 needsSecurityUpgradeUI];
}

id objc_msgSend_newBagURLRequest(void *a1, const char *a2, ...)
{
  return _[a1 newBagURLRequest];
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_nextCalculation(void *a1, const char *a2, ...)
{
  return _[a1 nextCalculation];
}

id objc_msgSend_nextLivenessNonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextLivenessNonce:");
}

id objc_msgSend_nonce(void *a1, const char *a2, ...)
{
  return _[a1 nonce];
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _[a1 notification];
}

id objc_msgSend_notificationAction(void *a1, const char *a2, ...)
{
  return _[a1 notificationAction];
}

id objc_msgSend_notificationDictionaryWithTitle_message_defaultButton_alternateButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationDictionaryWithTitle:message:defaultButton:alternateButton:");
}

id objc_msgSend_notificationEmail(void *a1, const char *a2, ...)
{
  return _[a1 notificationEmail];
}

id objc_msgSend_notificationEmailForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationEmailForAccount:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForInfoDictionaryKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_openApplicationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleID:");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_openSensitiveURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:error:");
}

id objc_msgSend_openTransaction(void *a1, const char *a2, ...)
{
  return _[a1 openTransaction];
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_operatingSystems(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystems];
}

id objc_msgSend_operation(void *a1, const char *a2, ...)
{
  return _[a1 operation];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithArray:");
}

id objc_msgSend_organizationToken(void *a1, const char *a2, ...)
{
  return _[a1 organizationToken];
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_osVersionAttestationRefKey(void *a1, const char *a2, ...)
{
  return _[a1 osVersionAttestationRefKey];
}

id objc_msgSend_ownerAppleID(void *a1, const char *a2, ...)
{
  return _[a1 ownerAppleID];
}

id objc_msgSend_ownerCustodianAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 ownerCustodianAltDSID];
}

id objc_msgSend_ownerDevice(void *a1, const char *a2, ...)
{
  return _[a1 ownerDevice];
}

id objc_msgSend_parsableRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 parsableRepresentation];
}

id objc_msgSend_parse(void *a1, const char *a2, ...)
{
  return _[a1 parse];
}

id objc_msgSend_passcodeAuth(void *a1, const char *a2, ...)
{
  return _[a1 passcodeAuth];
}

id objc_msgSend_passcodeAuthEnabled(void *a1, const char *a2, ...)
{
  return _[a1 passcodeAuthEnabled];
}

id objc_msgSend_passkeyEligible(void *a1, const char *a2, ...)
{
  return _[a1 passkeyEligible];
}

id objc_msgSend_passkeyEligibleForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passkeyEligibleForAccount:");
}

id objc_msgSend_passkeyPresent(void *a1, const char *a2, ...)
{
  return _[a1 passkeyPresent];
}

id objc_msgSend_passkeyPresentForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passkeyPresentForAccount:");
}

id objc_msgSend_passkeysInKeychainCountForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passkeysInKeychainCountForAccount:");
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _[a1 password];
}

id objc_msgSend_passwordEquivalentToken(void *a1, const char *a2, ...)
{
  return _[a1 passwordEquivalentToken];
}

id objc_msgSend_passwordRequest(void *a1, const char *a2, ...)
{
  return _[a1 passwordRequest];
}

id objc_msgSend_passwordResetKey(void *a1, const char *a2, ...)
{
  return _[a1 passwordResetKey];
}

id objc_msgSend_passwordResetPresenter(void *a1, const char *a2, ...)
{
  return _[a1 passwordResetPresenter];
}

id objc_msgSend_passwordResetToken(void *a1, const char *a2, ...)
{
  return _[a1 passwordResetToken];
}

id objc_msgSend_passwordResetTokenBackupForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passwordResetTokenBackupForAccount:");
}

id objc_msgSend_passwordResetTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passwordResetTokenForAccount:");
}

id objc_msgSend_passwordResetTokenForAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passwordResetTokenForAccount:error:");
}

id objc_msgSend_passwordVersion(void *a1, const char *a2, ...)
{
  return _[a1 passwordVersion];
}

id objc_msgSend_passwordVersionForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passwordVersionForAccount:");
}

id objc_msgSend_passwordlessToken(void *a1, const char *a2, ...)
{
  return _[a1 passwordlessToken];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_payloadWithMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadWithMessage:");
}

id objc_msgSend_payloadWithResponseData_forCircleStep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadWithResponseData:forCircleStep:");
}

id objc_msgSend_pcsAuthDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 pcsAuthDescriptor];
}

id objc_msgSend_pendingAuthKitFollowUpPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingAuthKitFollowUpPayload:");
}

id objc_msgSend_pendingBGContext(void *a1, const char *a2, ...)
{
  return _[a1 pendingBGContext];
}

id objc_msgSend_pendingBagFetchRequests(void *a1, const char *a2, ...)
{
  return _[a1 pendingBagFetchRequests];
}

id objc_msgSend_pendingClientBundle(void *a1, const char *a2, ...)
{
  return _[a1 pendingClientBundle];
}

id objc_msgSend_pendingClientUIWork(void *a1, const char *a2, ...)
{
  return _[a1 pendingClientUIWork];
}

id objc_msgSend_pendingFollowUpItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingFollowUpItems:");
}

id objc_msgSend_pendingFollowUpWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingFollowUpWithCommand:");
}

id objc_msgSend_pendingFollowUpWithMessageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingFollowUpWithMessageId:");
}

id objc_msgSend_pendingSigningRequests(void *a1, const char *a2, ...)
{
  return _[a1 pendingSigningRequests];
}

id objc_msgSend_perform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "perform:");
}

id objc_msgSend_performAuthenticationRequestWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthenticationRequestWithContext:completion:");
}

id objc_msgSend_performAuthorization_companionLinkClient_advertisingService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthorization:companionLinkClient:advertisingService:completion:");
}

id objc_msgSend_performAuthorization_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthorization:completion:");
}

id objc_msgSend_performAuthorizationCheckInWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAuthorizationCheckInWithCompletion:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performCheckInForAccount_event_reason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCheckInForAccount:event:reason:completion:");
}

id objc_msgSend_performCircleRequestWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCircleRequestWithContext:completion:");
}

id objc_msgSend_performFetchPrimaryApplicationInformationForClientBundleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFetchPrimaryApplicationInformationForClientBundleID:completion:");
}

id objc_msgSend_performGlobalConfigUpdateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performGlobalConfigUpdateWithCompletion:");
}

id objc_msgSend_performInsertQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performInsertQuery:");
}

id objc_msgSend_performInsertQuery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performInsertQuery:error:");
}

id objc_msgSend_performLivenessCheckInForAllEligibleAccountsWithReason_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performLivenessCheckInForAllEligibleAccountsWithReason:completion:");
}

id objc_msgSend_performQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performQuery:");
}

id objc_msgSend_performQuery_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performQuery:error:");
}

id objc_msgSend_performQuery_rowHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performQuery:rowHandler:");
}

id objc_msgSend_performRegistrationRequestWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRegistrationRequestWithContext:completion:");
}

id objc_msgSend_performRegistrationWith_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRegistrationWith:completionHandler:");
}

id objc_msgSend_performSRPContractWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSRPContractWithContext:completion:");
}

id objc_msgSend_performSilentTTRFor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSilentTTRFor:completion:");
}

id objc_msgSend_performTransactionBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTransactionBlockAndWait:");
}

id objc_msgSend_performUIWorkWithSurrogateContext_uiWorkBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUIWorkWithSurrogateContext:uiWorkBlock:");
}

id objc_msgSend_performUnsafeVerificationWithUserID_withAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUnsafeVerificationWithUserID:withAltDSID:completion:");
}

id objc_msgSend_performVerificationWithAttributes_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performVerificationWithAttributes:completion:");
}

id objc_msgSend_performWithinPersonaForAccount_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithinPersonaForAccount:withBlock:");
}

id objc_msgSend_persistRecoveryKeyWithContext_authContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistRecoveryKeyWithContext:authContext:completion:");
}

id objc_msgSend_personaIDIfCurrentPersonaIsDataSeparated(void *a1, const char *a2, ...)
{
  return _[a1 personaIDIfCurrentPersonaIsDataSeparated];
}

id objc_msgSend_personaUniqueStringForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personaUniqueStringForAltDSID:");
}

id objc_msgSend_phoneAsAppleID(void *a1, const char *a2, ...)
{
  return _[a1 phoneAsAppleID];
}

id objc_msgSend_phoneAsAppleIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneAsAppleIDForAccount:");
}

id objc_msgSend_phoneBundleInfoWithAdditionalInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneBundleInfoWithAdditionalInfo:error:");
}

id objc_msgSend_phoneCertificate(void *a1, const char *a2, ...)
{
  return _[a1 phoneCertificate];
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumber];
}

id objc_msgSend_piggyback_handleEscapeHatchError_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggyback:handleEscapeHatchError:completion:");
}

id objc_msgSend_piggyback_handleVerificationWithError_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggyback:handleVerificationWithError:completion:");
}

id objc_msgSend_piggyback_promptForRandomCodeWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggyback:promptForRandomCodeWithCompletion:");
}

id objc_msgSend_piggyback_shouldContinueWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggyback:shouldContinueWithCompletion:");
}

id objc_msgSend_piggyback_validateSecurityCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggyback:validateSecurityCode:completion:");
}

id objc_msgSend_piggybackResultString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggybackResultString:");
}

id objc_msgSend_piggybackingApprovalEligible(void *a1, const char *a2, ...)
{
  return _[a1 piggybackingApprovalEligible];
}

id objc_msgSend_piggybackingApprovalEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "piggybackingApprovalEligible:");
}

id objc_msgSend_piggybackingContext(void *a1, const char *a2, ...)
{
  return _[a1 piggybackingContext];
}

id objc_msgSend_piggybackingForTrustedDevice(void *a1, const char *a2, ...)
{
  return _[a1 piggybackingForTrustedDevice];
}

id objc_msgSend_piggybackingIDMSPresenceOverride(void *a1, const char *a2, ...)
{
  return _[a1 piggybackingIDMSPresenceOverride];
}

id objc_msgSend_piggybackingLocalPresenceOverride(void *a1, const char *a2, ...)
{
  return _[a1 piggybackingLocalPresenceOverride];
}

id objc_msgSend_populateNotificationOptionsWithCommonKeys_makeNoise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateNotificationOptionsWithCommonKeys:makeNoise:");
}

id objc_msgSend_populateUnderlyingErrorsStartingWithRootError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateUnderlyingErrorsStartingWithRootError:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postNotificationName_object_userInfo_deliverImmediately_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:deliverImmediately:");
}

id objc_msgSend_prepare(void *a1, const char *a2, ...)
{
  return _[a1 prepare];
}

id objc_msgSend_prepareWithController_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithController:queue:");
}

id objc_msgSend_presenceCheckPassed(void *a1, const char *a2, ...)
{
  return _[a1 presenceCheckPassed];
}

id objc_msgSend_presenceFallbackApproved(void *a1, const char *a2, ...)
{
  return _[a1 presenceFallbackApproved];
}

id objc_msgSend_presenceMode(void *a1, const char *a2, ...)
{
  return _[a1 presenceMode];
}

id objc_msgSend_presenceSID(void *a1, const char *a2, ...)
{
  return _[a1 presenceSID];
}

id objc_msgSend_presentAuthorizationUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAuthorizationUIForContext:completion:");
}

id objc_msgSend_presentAuthorizationWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAuthorizationWithContext:client:completion:");
}

id objc_msgSend_presentBasicLoginUIForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentBasicLoginUIForContext:client:completion:");
}

id objc_msgSend_presentBasicLoginUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentBasicLoginUIForContext:completion:");
}

id objc_msgSend_presentBiometricOrPasscodeValidationForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentBiometricOrPasscodeValidationForContext:client:completion:");
}

id objc_msgSend_presentBiometricOrPasscodeValidationForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentBiometricOrPasscodeValidationForContext:completion:");
}

id objc_msgSend_presentFidoAuthForContext_fidoContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentFidoAuthForContext:fidoContext:client:completion:");
}

id objc_msgSend_presentFidoAuthForContext_fidoContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentFidoAuthForContext:fidoContext:completion:");
}

id objc_msgSend_presentKeepUsingUIForContext_appleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentKeepUsingUIForContext:appleID:completion:");
}

id objc_msgSend_presentKeepUsingUIForContext_client_appleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentKeepUsingUIForContext:client:appleID:completion:");
}

id objc_msgSend_presentLoginAlertForContext_client_withError_title_message_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentLoginAlertForContext:client:withError:title:message:completion:");
}

id objc_msgSend_presentLoginAlertForContext_withError_title_message_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentLoginAlertForContext:withError:title:message:completion:");
}

id objc_msgSend_presentLoginNotificationWithCode_piggy_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentLoginNotificationWithCode:piggy:completionHandler:");
}

id objc_msgSend_presentMessageWithAccount_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentMessageWithAccount:completionHandler:");
}

id objc_msgSend_presentNativeRecoveryUIForContext_recoveryContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentNativeRecoveryUIForContext:recoveryContext:client:completion:");
}

id objc_msgSend_presentNativeRecoveryUIForContext_recoveryContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentNativeRecoveryUIForContext:recoveryContext:completion:");
}

id objc_msgSend_presentPrivateEmailUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentPrivateEmailUIForContext:completion:");
}

id objc_msgSend_presentPrivateEmailWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentPrivateEmailWithContext:client:completion:");
}

id objc_msgSend_presentProximityBroadcastUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentProximityBroadcastUIForContext:completion:");
}

id objc_msgSend_presentProximityPairingUIForContext_verificationCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentProximityPairingUIForContext:verificationCode:completion:");
}

id objc_msgSend_presentProximityPinCodeUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentProximityPinCodeUIForContext:completion:");
}

id objc_msgSend_presentSecondFactorAlertForContext_client_withError_title_message_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentSecondFactorAlertForContext:client:withError:title:message:completion:");
}

id objc_msgSend_presentSecondFactorAlertForContext_withError_title_message_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentSecondFactorAlertForContext:withError:title:message:completion:");
}

id objc_msgSend_presentSecondFactorUIForContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentSecondFactorUIForContext:client:completion:");
}

id objc_msgSend_presentSecondFactorUIForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentSecondFactorUIForContext:completion:");
}

id objc_msgSend_presentServerProvidedUIForContext_client_withConfiguration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentServerProvidedUIForContext:client:withConfiguration:completion:");
}

id objc_msgSend_presentServerProvidedUIForContext_withConfiguration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentServerProvidedUIForContext:withConfiguration:completion:");
}

id objc_msgSend_presentWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithContext:completion:");
}

id objc_msgSend_presentationCompletion(void *a1, const char *a2, ...)
{
  return _[a1 presentationCompletion];
}

id objc_msgSend_presentationContextForRequestContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentationContextForRequestContext:client:");
}

id objc_msgSend_previousAccountInfoRefreshDateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousAccountInfoRefreshDateForAccount:");
}

id objc_msgSend_previousMessageId(void *a1, const char *a2, ...)
{
  return _[a1 previousMessageId];
}

id objc_msgSend_previouslySelectedEmail(void *a1, const char *a2, ...)
{
  return _[a1 previouslySelectedEmail];
}

id objc_msgSend_previouslyWantedPrivateEmail(void *a1, const char *a2, ...)
{
  return _[a1 previouslyWantedPrivateEmail];
}

id objc_msgSend_primaryAuthKitAccount(void *a1, const char *a2, ...)
{
  return _[a1 primaryAuthKitAccount];
}

id objc_msgSend_primaryClientID(void *a1, const char *a2, ...)
{
  return _[a1 primaryClientID];
}

id objc_msgSend_primaryEmail(void *a1, const char *a2, ...)
{
  return _[a1 primaryEmail];
}

id objc_msgSend_primaryEmailAddress(void *a1, const char *a2, ...)
{
  return _[a1 primaryEmailAddress];
}

id objc_msgSend_primaryEmailAddressForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryEmailAddressForAccount:");
}

id objc_msgSend_primaryEmailVetted(void *a1, const char *a2, ...)
{
  return _[a1 primaryEmailVetted];
}

id objc_msgSend_primaryiCloudAccount(void *a1, const char *a2, ...)
{
  return _[a1 primaryiCloudAccount];
}

id objc_msgSend_privateAttestationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 privateAttestationEnabled];
}

id objc_msgSend_privateAttestationEnabledForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateAttestationEnabledForAccount:");
}

id objc_msgSend_privateEmail(void *a1, const char *a2, ...)
{
  return _[a1 privateEmail];
}

id objc_msgSend_privateEmailAddress(void *a1, const char *a2, ...)
{
  return _[a1 privateEmailAddress];
}

id objc_msgSend_privateEmailCompletion(void *a1, const char *a2, ...)
{
  return _[a1 privateEmailCompletion];
}

id objc_msgSend_privateEmailListVersion(void *a1, const char *a2, ...)
{
  return _[a1 privateEmailListVersion];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processMessage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMessage:error:");
}

id objc_msgSend_processPushPayload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPushPayload:completion:");
}

id objc_msgSend_promptForAppleIDSettingsRedirectWithContext_client_needFullUI_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptForAppleIDSettingsRedirectWithContext:client:needFullUI:completion:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_protocol(void *a1, const char *a2, ...)
{
  return _[a1 protocol];
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 protocolVersion];
}

id objc_msgSend_provisionAnisetteForContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provisionAnisetteForContext:withCompletion:");
}

id objc_msgSend_provisionAnisetteWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provisionAnisetteWithCompletion:");
}

id objc_msgSend_proxiedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 proxiedAppleID];
}

id objc_msgSend_proxiedDevice(void *a1, const char *a2, ...)
{
  return _[a1 proxiedDevice];
}

id objc_msgSend_proxiedDeviceAnisetteData(void *a1, const char *a2, ...)
{
  return _[a1 proxiedDeviceAnisetteData];
}

id objc_msgSend_proximityController(void *a1, const char *a2, ...)
{
  return _[a1 proximityController];
}

id objc_msgSend_proximityEngine_managerDidUpdateState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityEngine:managerDidUpdateState:");
}

id objc_msgSend_proximityEngineDidActivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityEngineDidActivate:");
}

id objc_msgSend_proximityEngineDidInvalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityEngineDidInvalidate:");
}

id objc_msgSend_proxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyWithErrorHandler:");
}

id objc_msgSend_publicAPSTokenString(void *a1, const char *a2, ...)
{
  return _[a1 publicAPSTokenString];
}

id objc_msgSend_publicToken(void *a1, const char *a2, ...)
{
  return _[a1 publicToken];
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return _[a1 pushToken];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_queryString(void *a1, const char *a2, ...)
{
  return _[a1 queryString];
}

id objc_msgSend_queryWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWithString:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_rawAccountPassword(void *a1, const char *a2, ...)
{
  return _[a1 rawAccountPassword];
}

id objc_msgSend_rawState(void *a1, const char *a2, ...)
{
  return _[a1 rawState];
}

id objc_msgSend_reachabilityWithHostName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityWithHostName:");
}

id objc_msgSend_reachableEmailAddressesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachableEmailAddressesForAccount:");
}

id objc_msgSend_reachableEmails(void *a1, const char *a2, ...)
{
  return _[a1 reachableEmails];
}

id objc_msgSend_realToken(void *a1, const char *a2, ...)
{
  return _[a1 realToken];
}

id objc_msgSend_realUserVerificationData(void *a1, const char *a2, ...)
{
  return _[a1 realUserVerificationData];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_reauthenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reauthenticateWithContext:completion:");
}

id objc_msgSend_recordBuildVersion(void *a1, const char *a2, ...)
{
  return _[a1 recordBuildVersion];
}

id objc_msgSend_recordUserAcceptedAgreementVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordUserAcceptedAgreementVersion:");
}

id objc_msgSend_recoveryContextWithServerInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recoveryContextWithServerInfo:");
}

id objc_msgSend_recoverySessionID(void *a1, const char *a2, ...)
{
  return _[a1 recoverySessionID];
}

id objc_msgSend_recoveryStep(void *a1, const char *a2, ...)
{
  return _[a1 recoveryStep];
}

id objc_msgSend_recoveryToken(void *a1, const char *a2, ...)
{
  return _[a1 recoveryToken];
}

id objc_msgSend_refreshAccountUsernamesForAltDSID_dataCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAccountUsernamesForAltDSID:dataCenter:");
}

id objc_msgSend_refreshAccountUsernamesForAltDSID_withUserInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAccountUsernamesForAltDSID:withUserInformation:");
}

id objc_msgSend_refreshAuthMetadataWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAuthMetadataWithContext:completion:");
}

id objc_msgSend_refreshUrl(void *a1, const char *a2, ...)
{
  return _[a1 refreshUrl];
}

id objc_msgSend_registerEventID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerEventID:options:handler:");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_registerPrivateEmailWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPrivateEmailWithContext:completion:");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_registerService(void *a1, const char *a2, ...)
{
  return _[a1 registerService];
}

id objc_msgSend_registerUISurrogateContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUISurrogateContext:client:completion:");
}

id objc_msgSend_registrationProviderWithContext_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registrationProviderWithContext:client:");
}

id objc_msgSend_regulatoryEligibilities(void *a1, const char *a2, ...)
{
  return _[a1 regulatoryEligibilities];
}

id objc_msgSend_relinquish(void *a1, const char *a2, ...)
{
  return _[a1 relinquish];
}

id objc_msgSend_remoteAlertHandle(void *a1, const char *a2, ...)
{
  return _[a1 remoteAlertHandle];
}

id objc_msgSend_remoteListener(void *a1, const char *a2, ...)
{
  return _[a1 remoteListener];
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectInterface];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectProxy];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteObjectProxyWithProtocol_forBundleID_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithProtocol:forBundleID:errorHandler:");
}

id objc_msgSend_removalReason(void *a1, const char *a2, ...)
{
  return _[a1 removalReason];
}

id objc_msgSend_removeAccount_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAccount:withCompletionHandler:");
}

id objc_msgSend_removeAllCachedResponses(void *a1, const char *a2, ...)
{
  return _[a1 removeAllCachedResponses];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllPCSAuthCredential(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPCSAuthCredential];
}

id objc_msgSend_removeAllPasswordResetTokens(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPasswordResetTokens];
}

id objc_msgSend_removeAuthorizationForApplicationWithClientID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAuthorizationForApplicationWithClientID:completion:");
}

id objc_msgSend_removeContinuationTokenForAccount_telemetryFlowID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeContinuationTokenForAccount:telemetryFlowID:error:");
}

id objc_msgSend_removeFollowUpItems_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFollowUpItems:error:");
}

id objc_msgSend_removeFollowUpItemsWithIdentifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFollowUpItemsWithIdentifiers:error:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeMasterTokenForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMasterTokenForAccount:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removePasswordResetTokenForAccount_telemetryFlowID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePasswordResetTokenForAccount:telemetryFlowID:error:");
}

id objc_msgSend_removePrivateEmailForContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePrivateEmailForContext:error:");
}

id objc_msgSend_removePrivateEmailWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePrivateEmailWithContext:completion:");
}

id objc_msgSend_removeSharedAccountBelongingToCurrentUserWithClientID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSharedAccountBelongingToCurrentUserWithClientID:completionHandler:");
}

id objc_msgSend_removeWrappedKeyFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeWrappedKeyFrom:");
}

id objc_msgSend_removedPrivateEmails(void *a1, const char *a2, ...)
{
  return _[a1 removedPrivateEmails];
}

id objc_msgSend_renewRecoveryTokenURL(void *a1, const char *a2, ...)
{
  return _[a1 renewRecoveryTokenURL];
}

id objc_msgSend_renewRecoveryTokenWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renewRecoveryTokenWithContext:completion:");
}

id objc_msgSend_repairEDPStateForContext_authenticationResults_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repairEDPStateForContext:authenticationResults:completion:");
}

id objc_msgSend_repairEDPStateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repairEDPStateWithCompletion:");
}

id objc_msgSend_repairState(void *a1, const char *a2, ...)
{
  return _[a1 repairState];
}

id objc_msgSend_repairStateForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repairStateForAccount:");
}

id objc_msgSend_repairURL(void *a1, const char *a2, ...)
{
  return _[a1 repairURL];
}

id objc_msgSend_replyContextWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replyContextWithPayload:");
}

id objc_msgSend_replyPayload(void *a1, const char *a2, ...)
{
  return _[a1 replyPayload];
}

id objc_msgSend_replyToID(void *a1, const char *a2, ...)
{
  return _[a1 replyToID];
}

id objc_msgSend_replyWithContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replyWithContext:withCompletion:");
}

id objc_msgSend_reportAuthEventOfType_success_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportAuthEventOfType:success:error:");
}

id objc_msgSend_reportCriticalAuthTokensTelemetryForFlow_withTokenGenerationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportCriticalAuthTokensTelemetryForFlow:withTokenGenerationInfo:");
}

id objc_msgSend_reportData(void *a1, const char *a2, ...)
{
  return _[a1 reportData];
}

id objc_msgSend_reportFinalSignOutEventForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportFinalSignOutEventForAccount:completion:");
}

id objc_msgSend_reportPromptByClient_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportPromptByClient:withContext:");
}

id objc_msgSend_reportRegulatoryEligibilityStatusToIdMS(void *a1, const char *a2, ...)
{
  return _[a1 reportRegulatoryEligibilityStatusToIdMS];
}

id objc_msgSend_reportSignOutEventForService_account_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportSignOutEventForService:account:completion:");
}

id objc_msgSend_reqInterceptToken(void *a1, const char *a2, ...)
{
  return _[a1 reqInterceptToken];
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestBodyType(void *a1, const char *a2, ...)
{
  return _[a1 requestBodyType];
}

id objc_msgSend_requestConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 requestConfiguration];
}

id objc_msgSend_requestDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 requestDispatcher];
}

id objc_msgSend_requestForRecoveryCompletionWithContext_recoveredInfo_recoveryError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestForRecoveryCompletionWithContext:recoveredInfo:recoveryError:");
}

id objc_msgSend_requestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 requestIdentifier];
}

id objc_msgSend_requestMethod(void *a1, const char *a2, ...)
{
  return _[a1 requestMethod];
}

id objc_msgSend_requestOTPForDSID_outMID_outMIDSize_outOTP_outOTPSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestOTPForDSID:outMID:outMIDSize:outOTP:outOTPSize:");
}

id objc_msgSend_requestOptions(void *a1, const char *a2, ...)
{
  return _[a1 requestOptions];
}

id objc_msgSend_requestParentalPermission(void *a1, const char *a2, ...)
{
  return _[a1 requestParentalPermission];
}

id objc_msgSend_requestQosClass(void *a1, const char *a2, ...)
{
  return _[a1 requestQosClass];
}

id objc_msgSend_requestSession(void *a1, const char *a2, ...)
{
  return _[a1 requestSession];
}

id objc_msgSend_requestSilentTTRWithTitle_message_componentName_componentVersion_componentID_keywords_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSilentTTRWithTitle:message:componentName:componentVersion:componentID:keywords:completion:");
}

id objc_msgSend_requestSilentTTRWithTitle_message_keywords_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSilentTTRWithTitle:message:keywords:completion:");
}

id objc_msgSend_requestTapToRadarWithTitle_message_componentName_componentVersion_componentID_keywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTapToRadarWithTitle:message:componentName:componentVersion:componentID:keywords:");
}

id objc_msgSend_requestTapToRadarWithTitle_message_keywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTapToRadarWithTitle:message:keywords:");
}

id objc_msgSend_requestTime(void *a1, const char *a2, ...)
{
  return _[a1 requestTime];
}

id objc_msgSend_requestType(void *a1, const char *a2, ...)
{
  return _[a1 requestType];
}

id objc_msgSend_requestURL(void *a1, const char *a2, ...)
{
  return _[a1 requestURL];
}

id objc_msgSend_requestURLOverride(void *a1, const char *a2, ...)
{
  return _[a1 requestURLOverride];
}

id objc_msgSend_requestURLWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestURLWithCompletion:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestedCloudPartition(void *a1, const char *a2, ...)
{
  return _[a1 requestedCloudPartition];
}

id objc_msgSend_requestedScopes(void *a1, const char *a2, ...)
{
  return _[a1 requestedScopes];
}

id objc_msgSend_requireSigningHeaders(void *a1, const char *a2, ...)
{
  return _[a1 requireSigningHeaders];
}

id objc_msgSend_requiredOIDPresentInCertificates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiredOIDPresentInCertificates:");
}

id objc_msgSend_requiresPasscode(void *a1, const char *a2, ...)
{
  return _[a1 requiresPasscode];
}

id objc_msgSend_resetCompletion(void *a1, const char *a2, ...)
{
  return _[a1 resetCompletion];
}

id objc_msgSend_resetDeviceIdentityWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDeviceIdentityWithCompletion:");
}

id objc_msgSend_resetKeychainCacheWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetKeychainCacheWithError:");
}

id objc_msgSend_resolved(void *a1, const char *a2, ...)
{
  return _[a1 resolved];
}

id objc_msgSend_resourceLoadDelegate(void *a1, const char *a2, ...)
{
  return _[a1 resourceLoadDelegate];
}

id objc_msgSend_resourceLoadDelegateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceLoadDelegateWithContext:");
}

id objc_msgSend_resourceLoadDelegateWithContext_authResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceLoadDelegateWithContext:authResponse:");
}

id objc_msgSend_resourceURL(void *a1, const char *a2, ...)
{
  return _[a1 resourceURL];
}

id objc_msgSend_responseCode(void *a1, const char *a2, ...)
{
  return _[a1 responseCode];
}

id objc_msgSend_responseDictionaryWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseDictionaryWithData:error:");
}

id objc_msgSend_responseMessage(void *a1, const char *a2, ...)
{
  return _[a1 responseMessage];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retrieveRecoveryDataForServerContext_recoveryInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveRecoveryDataForServerContext:recoveryInfo:completion:");
}

id objc_msgSend_retryAuth(void *a1, const char *a2, ...)
{
  return _[a1 retryAuth];
}

id objc_msgSend_returnData(void *a1, const char *a2, ...)
{
  return _[a1 returnData];
}

id objc_msgSend_reverseGeocodeLocation_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseGeocodeLocation:completionHandler:");
}

id objc_msgSend_revokeAuthorizationForAllApplicationsWithAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revokeAuthorizationForAllApplicationsWithAltDSID:completion:");
}

id objc_msgSend_revokeAuthorizationForAllApplicationsWithAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revokeAuthorizationForAllApplicationsWithAltDSID:error:");
}

id objc_msgSend_revokeAuthorizationForApplicationWithClientID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revokeAuthorizationForApplicationWithClientID:completion:");
}

id objc_msgSend_revokeUpgradeWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revokeUpgradeWithContext:client:completion:");
}

id objc_msgSend_rowHandler(void *a1, const char *a2, ...)
{
  return _[a1 rowHandler];
}

id objc_msgSend_rtcAnalyticsReporter(void *a1, const char *a2, ...)
{
  return _[a1 rtcAnalyticsReporter];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_sandboxContainerForPersona_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sandboxContainerForPersona:");
}

id objc_msgSend_sanitiseInternalState(void *a1, const char *a2, ...)
{
  return _[a1 sanitiseInternalState];
}

id objc_msgSend_sanitizeContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sanitizeContext:");
}

id objc_msgSend_saveAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveAccount:error:");
}

id objc_msgSend_saveContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveContext:completion:");
}

id objc_msgSend_saveWrappedKeyInKeychain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveWrappedKeyInKeychain:");
}

id objc_msgSend_scanForPeripheralsWithServices_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanForPeripheralsWithServices:options:");
}

id objc_msgSend_scanUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUnsignedLongLong:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scheduledRequestWithCalculation_forRequest_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledRequestWithCalculation:forRequest:info:");
}

id objc_msgSend_scopes(void *a1, const char *a2, ...)
{
  return _[a1 scopes];
}

id objc_msgSend_secondaryActionMessage(void *a1, const char *a2, ...)
{
  return _[a1 secondaryActionMessage];
}

id objc_msgSend_secondaryActionURLKey(void *a1, const char *a2, ...)
{
  return _[a1 secondaryActionURLKey];
}

id objc_msgSend_secondaryBody(void *a1, const char *a2, ...)
{
  return _[a1 secondaryBody];
}

id objc_msgSend_secondaryBodyCDP(void *a1, const char *a2, ...)
{
  return _[a1 secondaryBodyCDP];
}

id objc_msgSend_secondaryFooter(void *a1, const char *a2, ...)
{
  return _[a1 secondaryFooter];
}

id objc_msgSend_secondaryTitle(void *a1, const char *a2, ...)
{
  return _[a1 secondaryTitle];
}

id objc_msgSend_secondaryTitleCDP(void *a1, const char *a2, ...)
{
  return _[a1 secondaryTitleCDP];
}

id objc_msgSend_secondaryToken(void *a1, const char *a2, ...)
{
  return _[a1 secondaryToken];
}

id objc_msgSend_securityCode(void *a1, const char *a2, ...)
{
  return _[a1 securityCode];
}

id objc_msgSend_securityKeys(void *a1, const char *a2, ...)
{
  return _[a1 securityKeys];
}

id objc_msgSend_securityKeysForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securityKeysForAccount:");
}

id objc_msgSend_securityLevelForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "securityLevelForAccount:");
}

id objc_msgSend_securityUpgradeContext(void *a1, const char *a2, ...)
{
  return _[a1 securityUpgradeContext];
}

id objc_msgSend_selectedAuthorizationEmailForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedAuthorizationEmailForAccount:");
}

id objc_msgSend_selectedEmail(void *a1, const char *a2, ...)
{
  return _[a1 selectedEmail];
}

id objc_msgSend_selectedPrivateEmailForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedPrivateEmailForAccount:");
}

id objc_msgSend_selectedRequest(void *a1, const char *a2, ...)
{
  return _[a1 selectedRequest];
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendEventID_event_destinationID_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEventID:event:destinationID:options:completion:");
}

id objc_msgSend_sendMessage_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendReport(void *a1, const char *a2, ...)
{
  return _[a1 sendReport];
}

id objc_msgSend_sendRequestID_request_destinationID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:destinationID:options:responseHandler:");
}

id objc_msgSend_sendUserInfoChangeNotificationWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendUserInfoChangeNotificationWithPayload:");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_serverCompatibleRequestBodyWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverCompatibleRequestBodyWithPayload:");
}

id objc_msgSend_serverExperimentalFeatures(void *a1, const char *a2, ...)
{
  return _[a1 serverExperimentalFeatures];
}

id objc_msgSend_serverExperimentalFeaturesForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverExperimentalFeaturesForAccount:");
}

id objc_msgSend_serverFriendlyDescription(void *a1, const char *a2, ...)
{
  return _[a1 serverFriendlyDescription];
}

id objc_msgSend_serverHandler(void *a1, const char *a2, ...)
{
  return _[a1 serverHandler];
}

id objc_msgSend_serverInfo(void *a1, const char *a2, ...)
{
  return _[a1 serverInfo];
}

id objc_msgSend_serverMachineId(void *a1, const char *a2, ...)
{
  return _[a1 serverMachineId];
}

id objc_msgSend_serverProvidedData(void *a1, const char *a2, ...)
{
  return _[a1 serverProvidedData];
}

id objc_msgSend_serverUIContext_processAdditionalData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverUIContext:processAdditionalData:completion:");
}

id objc_msgSend_serverUIContextFromResponse_authContext_urlRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverUIContextFromResponse:authContext:urlRequest:");
}

id objc_msgSend_serverVerifiableEncoding(void *a1, const char *a2, ...)
{
  return _[a1 serverVerifiableEncoding];
}

id objc_msgSend_serviceControllerForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceControllerForContext:");
}

id objc_msgSend_serviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serviceIdentifier];
}

id objc_msgSend_serviceIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 serviceIdentifiers];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_serviceToken(void *a1, const char *a2, ...)
{
  return _[a1 serviceToken];
}

id objc_msgSend_serviceTokens(void *a1, const char *a2, ...)
{
  return _[a1 serviceTokens];
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return _[a1 serviceType];
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 serviceWithDefaultShellEndpoint];
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _[a1 services];
}

id objc_msgSend_servicesUsingAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "servicesUsingAccount:");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return _[a1 sessionID];
}

id objc_msgSend_sessionWithInitialMessage_secretDelegate_circleDelegate_dsid_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithInitialMessage:secretDelegate:circleDelegate:dsid:error:");
}

id objc_msgSend_sessionWithSecretDelegate_dsid_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithSecretDelegate:dsid:error:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_set3PRegulatoryOverride_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set3PRegulatoryOverride:forAccount:");
}

id objc_msgSend_setADPCohort_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setADPCohort:forAccount:");
}

id objc_msgSend_setAccessGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessGroup:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccount_inUse_byService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:inUse:byService:");
}

id objc_msgSend_setAccountAccessTelemetryOptIn_forAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountAccessTelemetryOptIn:forAccount:error:");
}

id objc_msgSend_setAccountName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountName:");
}

id objc_msgSend_setAccountProperty_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountProperty:forKey:");
}

id objc_msgSend_setAccountRecoveryMasterKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccountRecoveryMasterKey:");
}

id objc_msgSend_setActiveBagFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveBagFetchRequest:");
}

id objc_msgSend_setActiveSigningRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveSigningRequest:");
}

id objc_msgSend_setActiveiCloudPrivateEmailCount_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveiCloudPrivateEmailCount:forAccount:");
}

id objc_msgSend_setAdamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdamID:");
}

id objc_msgSend_setAdditionalHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalHeaders:");
}

id objc_msgSend_setAdditionalInfo_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalInfo:forAccount:");
}

id objc_msgSend_setAdpCohort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdpCohort:");
}

id objc_msgSend_setAdvertisingService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertisingService:");
}

id objc_msgSend_setAgeOfMajority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgeOfMajority:");
}

id objc_msgSend_setAgeOfMajority_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgeOfMajority:forAccount:");
}

id objc_msgSend_setAlertBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlertBody:");
}

id objc_msgSend_setAlertTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlertTitle:");
}

id objc_msgSend_setAliases_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAliases:forAccount:");
}

id objc_msgSend_setAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltDSID:");
}

id objc_msgSend_setAltDSID_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltDSID:forAccount:");
}

id objc_msgSend_setAnalyticsReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsReport:");
}

id objc_msgSend_setAnticipateEscrowAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnticipateEscrowAttempt:");
}

id objc_msgSend_setAppBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBundleID:");
}

id objc_msgSend_setAppDeveloperName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppDeveloperName:");
}

id objc_msgSend_setAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppName:");
}

id objc_msgSend_setAppProvidedContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppProvidedContext:");
}

id objc_msgSend_setAppProvidedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppProvidedData:");
}

id objc_msgSend_setAppiTunesMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppiTunesMetadata:");
}

id objc_msgSend_setAppleIDAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleIDAuth:");
}

id objc_msgSend_setAppleIDCountryCode_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleIDCountryCode:forAccount:");
}

id objc_msgSend_setAppleIDSecurityLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleIDSecurityLevel:");
}

id objc_msgSend_setAppleIDUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppleIDUsername:");
}

id objc_msgSend_setApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApps:");
}

id objc_msgSend_setArgument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArgument:");
}

id objc_msgSend_setAskToBuy_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAskToBuy:forAccount:");
}

id objc_msgSend_setAttestationNonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttestationNonce:");
}

id objc_msgSend_setAttestedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttestedData:");
}

id objc_msgSend_setAuthContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthContext:");
}

id objc_msgSend_setAuthKitAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthKitAccount:");
}

id objc_msgSend_setAuthKitBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthKitBody:");
}

id objc_msgSend_setAuthKitBodyData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthKitBodyData:");
}

id objc_msgSend_setAuthMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthMode:");
}

id objc_msgSend_setAuthenticated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticated:");
}

id objc_msgSend_setAuthenticatedRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticatedRequest:");
}

id objc_msgSend_setAuthenticationDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationDelegate:");
}

id objc_msgSend_setAuthenticationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationMode:");
}

id objc_msgSend_setAuthenticationMode_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationMode:forAccount:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setAuthkitAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthkitAccount:");
}

id objc_msgSend_setAuthorizationRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizationRequest:");
}

id objc_msgSend_setAuthorizationResponseValidator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizationResponseValidator:");
}

id objc_msgSend_setAuthorizationUsed_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizationUsed:forAccount:");
}

id objc_msgSend_setAuthorizedRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizedRequest:");
}

id objc_msgSend_setBaaAttestationHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaaAttestationHash:");
}

id objc_msgSend_setBagProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBagProvider:");
}

id objc_msgSend_setBagUrlKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBagUrlKey:");
}

id objc_msgSend_setBeneficiary_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiary:forAccount:");
}

id objc_msgSend_setBeneficiaryAccountName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryAccountName:");
}

id objc_msgSend_setBeneficiaryAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryAltDSID:");
}

id objc_msgSend_setBeneficiaryInfo_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryInfo:forAccount:");
}

id objc_msgSend_setBeneficiaryLastModified_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryLastModified:forAccount:");
}

id objc_msgSend_setBeneficiaryListVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryListVersion:");
}

id objc_msgSend_setBeneficiaryListVersion_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryListVersion:forAccount:");
}

id objc_msgSend_setBeneficiaryOperationsByID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeneficiaryOperationsByID:");
}

id objc_msgSend_setBindHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBindHandler:");
}

id objc_msgSend_setBindingFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBindingFailure:");
}

id objc_msgSend_setBiometricAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBiometricAuth:");
}

id objc_msgSend_setBirthYear_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBirthYear:forAccount:");
}

id objc_msgSend_setBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleId:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setCanAttestAge_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanAttestAge:forAccount:");
}

id objc_msgSend_setCanBeBeneficiary_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanBeBeneficiary:forAccount:");
}

id objc_msgSend_setCanBeCustodian_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanBeCustodian:forAccount:");
}

id objc_msgSend_setCanHaveBeneficiary_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanHaveBeneficiary:forAccount:");
}

id objc_msgSend_setCanHaveCustodian_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanHaveCustodian:forAccount:");
}

id objc_msgSend_setCerts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCerts:");
}

id objc_msgSend_setCheckInAllowedForAllAccountsToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckInAllowedForAllAccountsToValue:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClearanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClearanceHandler:");
}

id objc_msgSend_setCliMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCliMode:");
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClient:");
}

id objc_msgSend_setClientAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientAppName:");
}

id objc_msgSend_setClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientBundleID:");
}

id objc_msgSend_setClientErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientErrorCode:");
}

id objc_msgSend_setClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientID:");
}

id objc_msgSend_setClientInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientInfo:");
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientName:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setCompanionDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompanionDevice:");
}

id objc_msgSend_setCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletion:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setComponentID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponentID:");
}

id objc_msgSend_setComponentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponentName:");
}

id objc_msgSend_setComponentVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponentVersion:");
}

id objc_msgSend_setCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCondition:");
}

id objc_msgSend_setConfigDataVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigDataVersion:");
}

id objc_msgSend_setConfigDataVersion_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigDataVersion:forAccount:");
}

id objc_msgSend_setConfigValue_forKey_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigValue:forKey:forAccount:");
}

id objc_msgSend_setConfigurationValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationValue:forKey:");
}

id objc_msgSend_setContainerPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerPath:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setContinuationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuationToken:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setCreateAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreateAppleID:");
}

id objc_msgSend_setCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreationDate:");
}

id objc_msgSend_setCredential_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCredential:");
}

id objc_msgSend_setCredential_forAccount_serviceID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCredential:forAccount:serviceID:error:");
}

id objc_msgSend_setCredentialItem_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCredentialItem:forKey:");
}

id objc_msgSend_setCredentialStorageOption_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCredentialStorageOption:forAccount:");
}

id objc_msgSend_setCurrentEmailListVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentEmailListVersion:error:");
}

id objc_msgSend_setCustodianEnabled_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianEnabled:forAccount:");
}

id objc_msgSend_setCustodianInfos_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianInfos:forAccount:");
}

id objc_msgSend_setCustodianLastModified_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianLastModified:forAccount:");
}

id objc_msgSend_setCustodianListVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianListVersion:");
}

id objc_msgSend_setCustodianListVersion_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianListVersion:forAccount:");
}

id objc_msgSend_setCustodianOperationsByID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianOperationsByID:");
}

id objc_msgSend_setCustodianRecoveryToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustodianRecoveryToken:");
}

id objc_msgSend_setDCRTRenewalAttempted_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDCRTRenewalAttempted:forAccount:");
}

id objc_msgSend_setDSID_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDSID:forAccount:");
}

id objc_msgSend_setDataCenterIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataCenterIdentifier:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDecodedRecoveryIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecodedRecoveryIdentityToken:");
}

id objc_msgSend_setDecodedRecoveryPET_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecodedRecoveryPET:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegates:");
}

id objc_msgSend_setDemoAccount_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDemoAccount:forAccount:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceClass:");
}

id objc_msgSend_setDeviceColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceColor:");
}

id objc_msgSend_setDeviceEnclosureColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceEnclosureColor:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceListVersion_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceListVersion:forAccount:");
}

id objc_msgSend_setDeviceRemovalReason_onAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceRemovalReason:onAccount:");
}

id objc_msgSend_setDeviceRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceRequestContext:");
}

id objc_msgSend_setDidDeactivateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidDeactivateBlock:");
}

id objc_msgSend_setDidSucceed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidSucceed:");
}

id objc_msgSend_setDsid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDsid:");
}

id objc_msgSend_setEDPState_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEDPState:forAccount:");
}

id objc_msgSend_setEdpState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdpState:");
}

id objc_msgSend_setEnableCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableCriticalReliability:");
}

id objc_msgSend_setEncryptedPRKC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptedPRKC:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvent:");
}

id objc_msgSend_setExecutor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExecutor:");
}

id objc_msgSend_setExistingStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExistingStatus:");
}

id objc_msgSend_setExpectedResponseType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectedResponseType:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtensionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensionIdentifier:");
}

id objc_msgSend_setFamilyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyName:");
}

id objc_msgSend_setFamilyName_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFamilyName:forAccount:");
}

id objc_msgSend_setFetchIconBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchIconBlock:");
}

id objc_msgSend_setFetchIconBlockForPresenter_withContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchIconBlockForPresenter:withContext:");
}

id objc_msgSend_setFido_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFido:forAccount:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFollowUpProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowUpProvider:");
}

id objc_msgSend_setForceFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceFetch:");
}

id objc_msgSend_setForceSilentAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceSilentAuth:");
}

id objc_msgSend_setForwardingEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForwardingEmail:");
}

id objc_msgSend_setForwardingEmail_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForwardingEmail:forAccount:");
}

id objc_msgSend_setFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrequency:");
}

id objc_msgSend_setFromURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromURLCache:");
}

id objc_msgSend_setGivenName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGivenName:");
}

id objc_msgSend_setGivenName_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGivenName:forAccount:");
}

id objc_msgSend_setGroupKitEligibility_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupKitEligibility:forAccount:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPContentType:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHasCheckedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasCheckedIn:");
}

id objc_msgSend_setHasMDM_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasMDM:forAccount:");
}

id objc_msgSend_setHasModernRecoveryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasModernRecoveryKey:");
}

id objc_msgSend_setHasModernRecoveryKey_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasModernRecoveryKey:forAccount:");
}

id objc_msgSend_setHasSOSActiveDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSOSActiveDevice:");
}

id objc_msgSend_setHasSOSActiveDevice_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSOSActiveDevice:forAccount:");
}

id objc_msgSend_setHasUsedAuthorization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUsedAuthorization:");
}

id objc_msgSend_setHeartbeatToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeartbeatToken:");
}

id objc_msgSend_setHeartbeatTokenValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeartbeatTokenValue:");
}

id objc_msgSend_setHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHost:");
}

id objc_msgSend_setHostBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostBundleID:");
}

id objc_msgSend_setHostSceneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostSceneID:");
}

id objc_msgSend_setIDMSRoutingInfo_forDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIDMSRoutingInfo:forDSID:");
}

id objc_msgSend_setIdMSEDPTokenId_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdMSEDPTokenId:forAccount:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentityToken:");
}

id objc_msgSend_setIdentityTokenValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentityTokenValue:");
}

id objc_msgSend_setIdmsDataToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdmsDataToken:");
}

id objc_msgSend_setIdmsEDPTokenId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdmsEDPTokenId:");
}

id objc_msgSend_setIgnoreInternalTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreInternalTokens:");
}

id objc_msgSend_setIgnoreMemoryCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreMemoryCache:");
}

id objc_msgSend_setInactiveiCloudPrivateEmailCount_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInactiveiCloudPrivateEmailCount:forAccount:");
}

id objc_msgSend_setIncludeUntrustedDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeUntrustedDevices:");
}

id objc_msgSend_setInformativeText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInformativeText:");
}

id objc_msgSend_setInheritanceContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInheritanceContext:");
}

id objc_msgSend_setInitialURLRequestKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialURLRequestKey:");
}

id objc_msgSend_setInitiatingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitiatingContext:");
}

id objc_msgSend_setInitiatingPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitiatingPassword:");
}

id objc_msgSend_setInitiatingServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitiatingServerResponse:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setInvisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvisible:");
}

id objc_msgSend_setInvocationReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvocationReason:");
}

id objc_msgSend_setIsEphemeral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEphemeral:");
}

id objc_msgSend_setIsMDMInformationRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMDMInformationRequired:");
}

id objc_msgSend_setIsNotificationEmailAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsNotificationEmailAvailable:");
}

id objc_msgSend_setIsNotificationEmailAvailable_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsNotificationEmailAvailable:forAccount:");
}

id objc_msgSend_setIsPasswordResetRequestInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPasswordResetRequestInProgress:");
}

id objc_msgSend_setIsProximityAuthEligible_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsProximityAuthEligible:forAccount:");
}

id objc_msgSend_setIsProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsProxy:");
}

id objc_msgSend_setIsSecondCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSecondCall:");
}

id objc_msgSend_setIsSenior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSenior:");
}

id objc_msgSend_setIsSiwaEnabled_forChildAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiwaEnabled:forChildAccount:");
}

id objc_msgSend_setIsSiwaForChildEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiwaForChildEnabled:");
}

id objc_msgSend_setIsUnderage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUnderage:");
}

id objc_msgSend_setIsUsernameEditable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUsernameEditable:");
}

id objc_msgSend_setItemAccessible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemAccessible:");
}

id objc_msgSend_setItemClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemClass:");
}

id objc_msgSend_setKeyAndBundleIdAreHashed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyAndBundleIdAreHashed:");
}

id objc_msgSend_setKeywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeywords:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLastKnownIDMSEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastKnownIDMSEnvironment:");
}

id objc_msgSend_setLastKnownLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastKnownLocale:");
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatitude:");
}

id objc_msgSend_setListVersionToVersion_withAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListVersionToVersion:withAltDSID:");
}

id objc_msgSend_setLivenessReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLivenessReason:");
}

id objc_msgSend_setLocalPresenceFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalPresenceFound:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLockScreenBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockScreenBody:");
}

id objc_msgSend_setLockScreenTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockScreenTitle:");
}

id objc_msgSend_setLoggedInServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoggedInServices:");
}

id objc_msgSend_setLoginChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoginChoice:");
}

id objc_msgSend_setLoginChoices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoginChoices:");
}

id objc_msgSend_setLoginHandles_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoginHandles:forAccount:");
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongitude:");
}

id objc_msgSend_setMDMInformationRequired_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMDMInformationRequired:forAccount:");
}

id objc_msgSend_setMachineID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMachineID:");
}

id objc_msgSend_setMakePrivateEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMakePrivateEmail:");
}

id objc_msgSend_setManagedOrganizationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedOrganizationName:");
}

id objc_msgSend_setManagedOrganizationName_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedOrganizationName:forAccount:");
}

id objc_msgSend_setManagedOrganizationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedOrganizationType:");
}

id objc_msgSend_setManagedOrganizationType_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManagedOrganizationType:forAccount:");
}

id objc_msgSend_setMarkedForSignOut_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkedForSignOut:forAccount:");
}

id objc_msgSend_setMatchHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMatchHandler:");
}

id objc_msgSend_setMaximumLoginAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumLoginAttempts:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNeedsCredentialRecovery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsCredentialRecovery:");
}

id objc_msgSend_setNeedsNewAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsNewAppleID:");
}

id objc_msgSend_setNeedsNewChildAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsNewChildAccount:");
}

id objc_msgSend_setNeedsPasswordChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsPasswordChange:");
}

id objc_msgSend_setNextLivenessNonce_nonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextLivenessNonce:nonce:");
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotification:");
}

id objc_msgSend_setNotificationEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationEmail:");
}

id objc_msgSend_setNotificationEmail_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationEmail:forAccount:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKey_expiresIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:expiresIn:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObject_forSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forSetting:");
}

id objc_msgSend_setOneTimePassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOneTimePassword:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrigin:");
}

id objc_msgSend_setOwnerCustodianAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwnerCustodianAltDSID:");
}

id objc_msgSend_setPasscodeAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeAuth:");
}

id objc_msgSend_setPasscodeAuth_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeAuth:forAccount:");
}

id objc_msgSend_setPasscodeAuthEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeAuthEnabled:");
}

id objc_msgSend_setPasscodeAuthEnabled_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeAuthEnabled:forAccount:");
}

id objc_msgSend_setPasscodeOnlyPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeOnlyPolicy:");
}

id objc_msgSend_setPasskeyEligible_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasskeyEligible:forAccount:");
}

id objc_msgSend_setPasskeyPresent_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasskeyPresent:forAccount:");
}

id objc_msgSend_setPasskeysInKeychainCount_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasskeysInKeychainCount:forAccount:");
}

id objc_msgSend_setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassword:");
}

id objc_msgSend_setPasswordRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordRequest:");
}

id objc_msgSend_setPasswordResetToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordResetToken:");
}

id objc_msgSend_setPasswordVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordVersion:");
}

id objc_msgSend_setPasswordVersion_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordVersion:forAccount:");
}

id objc_msgSend_setPasswordlessToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasswordlessToken:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPendingBGContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingBGContext:");
}

id objc_msgSend_setPendingClientBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingClientBundle:");
}

id objc_msgSend_setPendingClientUIWork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingClientUIWork:");
}

id objc_msgSend_setPhoneAsAppleID_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneAsAppleID:forAccount:");
}

id objc_msgSend_setPhoneCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneCertificate:");
}

id objc_msgSend_setPhoneInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneInformation:");
}

id objc_msgSend_setPhoneNumberCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneNumberCertificate:");
}

id objc_msgSend_setPiggybackingApprovalEligible_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPiggybackingApprovalEligible:forAccount:");
}

id objc_msgSend_setPiggybackingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPiggybackingContext:");
}

id objc_msgSend_setPresenceCheckPassed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresenceCheckPassed:");
}

id objc_msgSend_setPresentationCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationCompletion:");
}

id objc_msgSend_setPresentationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentationType:");
}

id objc_msgSend_setPreviousAccountInfoRefreshDate_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousAccountInfoRefreshDate:forAccount:");
}

id objc_msgSend_setPreviouslySelectedEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviouslySelectedEmail:");
}

id objc_msgSend_setPreviouslyWantedPrivateEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviouslyWantedPrivateEmail:");
}

id objc_msgSend_setPrimaryClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryClientID:");
}

id objc_msgSend_setPrimaryEmailAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryEmailAddress:");
}

id objc_msgSend_setPrimaryEmailAddress_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryEmailAddress:forAccount:");
}

id objc_msgSend_setPrivateAttestationEnabled_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateAttestationEnabled:forAccount:");
}

id objc_msgSend_setPrivateEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateEmail:");
}

id objc_msgSend_setPrivateEmail_keyAlreadyHashed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateEmail:keyAlreadyHashed:error:");
}

id objc_msgSend_setPrivateEmailCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateEmailCompletion:");
}

id objc_msgSend_setProtocolVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolVersion:error:");
}

id objc_msgSend_setProxiedAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxiedAltDSID:");
}

id objc_msgSend_setProxiedIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxiedIdentityToken:");
}

id objc_msgSend_setProximityController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProximityController:");
}

id objc_msgSend_setPushToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushToken:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueryString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryString:");
}

id objc_msgSend_setRadarDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadarDescription:");
}

id objc_msgSend_setRadarTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadarTitle:");
}

id objc_msgSend_setReachableEmailAddresses_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachableEmailAddresses:forAccount:");
}

id objc_msgSend_setReachableEmails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachableEmails:");
}

id objc_msgSend_setRealUserVerificationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealUserVerificationData:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRecoveryToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoveryToken:");
}

id objc_msgSend_setRefreshUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshUrl:");
}

id objc_msgSend_setRemoteAlertHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteAlertHandle:");
}

id objc_msgSend_setRemoteListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteListener:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRepairState_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepairState:forAccount:");
}

id objc_msgSend_setReplyToID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplyToID:");
}

id objc_msgSend_setRequestBodyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestBodyType:");
}

id objc_msgSend_setRequestConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestConfiguration:");
}

id objc_msgSend_setRequestTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestTime:");
}

id objc_msgSend_setRequestType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestType:");
}

id objc_msgSend_setRequestedScopes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestedScopes:");
}

id objc_msgSend_setRequiresTouchID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresTouchID:");
}

id objc_msgSend_setResetCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetCompletion:");
}

id objc_msgSend_setResourceLoadDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceLoadDelegate:");
}

id objc_msgSend_setResponseCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponseCode:");
}

id objc_msgSend_setRetryAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryAuth:");
}

id objc_msgSend_setReturnData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReturnData:");
}

id objc_msgSend_setRoutingInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoutingInfo:");
}

id objc_msgSend_setRowHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRowHandler:");
}

id objc_msgSend_setSOSNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSOSNeeded:");
}

id objc_msgSend_setSOSNeeded_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSOSNeeded:forAccount:");
}

id objc_msgSend_setSRPProtocol_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSRPProtocol:forAccount:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setScopes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScopes:");
}

id objc_msgSend_setSecondaryBodyCDP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryBodyCDP:");
}

id objc_msgSend_setSecondaryFooter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryFooter:");
}

id objc_msgSend_setSecondaryTitleCDP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryTitleCDP:");
}

id objc_msgSend_setSecurityCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecurityCode:");
}

id objc_msgSend_setSecurityKeys_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecurityKeys:forAccount:");
}

id objc_msgSend_setSecurityLevel_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecurityLevel:forAccount:");
}

id objc_msgSend_setSelectedAuthorizationEmail_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedAuthorizationEmail:forAccount:");
}

id objc_msgSend_setSelectedEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedEmail:");
}

id objc_msgSend_setSelectedPrivateEmail_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedPrivateEmail:forAccount:");
}

id objc_msgSend_setSelectedRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedRequest:");
}

id objc_msgSend_setServerExperimentalFeatures_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerExperimentalFeatures:forAccount:");
}

id objc_msgSend_setServerInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerInfo:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setServiceProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceProvider:");
}

id objc_msgSend_setServiceToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceToken:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setSessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionID:");
}

id objc_msgSend_setSharedMemorySpaceBagProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedMemorySpaceBagProvider:");
}

id objc_msgSend_setSharingGroupLastNotificationDate_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharingGroupLastNotificationDate:forAccount:");
}

id objc_msgSend_setShouldIgnoreTeamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIgnoreTeamID:");
}

id objc_msgSend_setShouldIgnoreUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIgnoreUserID:");
}

id objc_msgSend_setShouldOfferSecurityUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldOfferSecurityUpgrade:");
}

id objc_msgSend_setShouldPreventDismissAfterUserSkip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPreventDismissAfterUserSkip:");
}

id objc_msgSend_setShouldPromptForPasswordOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPromptForPasswordOnly:");
}

id objc_msgSend_setShouldProvisionIfNeccessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldProvisionIfNeccessary:");
}

id objc_msgSend_setShouldSendIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendIdentityToken:");
}

id objc_msgSend_setShouldSendPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendPhoneNumber:");
}

id objc_msgSend_setShouldSendSigningHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendSigningHeaders:");
}

id objc_msgSend_setShouldSkipSettingsLaunchAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSkipSettingsLaunchAlert:");
}

id objc_msgSend_setShouldSyncWithServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSyncWithServer:");
}

id objc_msgSend_setShouldUpdatePersistentServiceTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUpdatePersistentServiceTokens:");
}

id objc_msgSend_setSignInAllowsPCSKeyAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignInAllowsPCSKeyAccess:");
}

id objc_msgSend_setSignWithIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignWithIdentityToken:");
}

id objc_msgSend_setSlotID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSlotID:");
}

id objc_msgSend_setSrpProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSrpProtocol:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStrongDeviceIdentityMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrongDeviceIdentityMarker:");
}

id objc_msgSend_setSurrogateClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurrogateClient:");
}

id objc_msgSend_setSurrogateCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurrogateCompletion:");
}

id objc_msgSend_setSurrogateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurrogateContext:");
}

id objc_msgSend_setSurrogateManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurrogateManager:");
}

id objc_msgSend_setSurrogateRegistrationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurrogateRegistrationID:");
}

id objc_msgSend_setSynchronizable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynchronizable:");
}

id objc_msgSend_setSysBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSysBound:");
}

id objc_msgSend_setTeamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTeamID:");
}

id objc_msgSend_setTelemetryDeviceSessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTelemetryDeviceSessionID:");
}

id objc_msgSend_setTelemetryDeviceSessionID_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTelemetryDeviceSessionID:forAccount:");
}

id objc_msgSend_setTelemetryFlowID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTelemetryFlowID:");
}

id objc_msgSend_setThirdPartyRegulatoryOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThirdPartyRegulatoryOverride:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setToken_tokenID_account_credential_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:tokenID:account:credential:");
}

id objc_msgSend_setTokenExpiryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenExpiryDate:");
}

id objc_msgSend_setTransactionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionId:");
}

id objc_msgSend_setTransferState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransferState:");
}

id objc_msgSend_setTrustedPhoneNumbers_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrustedPhoneNumbers:forAccount:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUrlSwitchData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrlSwitchData:");
}

id objc_msgSend_setUseDataProtection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseDataProtection:");
}

id objc_msgSend_setUserAgeRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserAgeRange:");
}

id objc_msgSend_setUserAgeRange_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserAgeRange:forAccount:");
}

id objc_msgSend_setUserConfigForAltDSID_client_configurationInfo_forIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserConfigForAltDSID:client:configurationInfo:forIdentifier:completion:");
}

id objc_msgSend_setUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserID:");
}

id objc_msgSend_setUserIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserIdentifier:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInformation:");
}

id objc_msgSend_setUserIsSenior_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserIsSenior:forAccount:");
}

id objc_msgSend_setUserResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserResponse:");
}

id objc_msgSend_setUserSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserSelection:");
}

id objc_msgSend_setUserUnderage_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserUnderage:forAccount:");
}

id objc_msgSend_setUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsername:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValuesForKeysWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValuesForKeysWithDictionary:");
}

id objc_msgSend_setVerifiedPrimaryEmail_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerifiedPrimaryEmail:forAccount:");
}

id objc_msgSend_setWaitForReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitForReply:");
}

id objc_msgSend_setWaitForReplyTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitForReplyTimeout:");
}

id objc_msgSend_setWalrusEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWalrusEnabled:");
}

id objc_msgSend_setWalrusWebAccessEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWalrusWebAccessEnabled:");
}

id objc_msgSend_setWebAccessEnabled_forAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebAccessEnabled:forAccount:");
}

id objc_msgSend_setWhitelistedPathURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWhitelistedPathURLs:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setXpcEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcEndpoint:");
}

id objc_msgSend_set_attemptIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_attemptIndex:");
}

id objc_msgSend_set_clientAuthenticatedExternallyWithPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_clientAuthenticatedExternallyWithPassword:");
}

id objc_msgSend_set_clientShouldAuthenticateExternally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_clientShouldAuthenticateExternally:");
}

id objc_msgSend_set_denyVirtualInterfaces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_denyVirtualInterfaces:");
}

id objc_msgSend_set_externalAuthToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_externalAuthToken:");
}

id objc_msgSend_set_forceEligibleForForegroundAuthentication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_forceEligibleForForegroundAuthentication:");
}

id objc_msgSend_set_hasSharedAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_hasSharedAccounts:");
}

id objc_msgSend_set_iconData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_iconData:");
}

id objc_msgSend_set_iconScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_iconScale:");
}

id objc_msgSend_set_ignoreShouldContinueProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_ignoreShouldContinueProxy:");
}

id objc_msgSend_set_isAuthorizingForSharedSIWAAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_isAuthorizingForSharedSIWAAccount:");
}

id objc_msgSend_set_isRapportLogin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_isRapportLogin:");
}

id objc_msgSend_set_isSilentAppTransfer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_isSilentAppTransfer:");
}

id objc_msgSend_set_notifyOfTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_notifyOfTimeout:");
}

id objc_msgSend_set_performUIOutOfProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_performUIOutOfProcess:");
}

id objc_msgSend_set_proxiedAssociatedDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedAssociatedDomains:");
}

id objc_msgSend_set_proxiedClientAppID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedClientAppID:");
}

id objc_msgSend_set_proxiedClientAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedClientAppName:");
}

id objc_msgSend_set_proxiedClientBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedClientBundleID:");
}

id objc_msgSend_set_proxiedClientTeamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedClientTeamID:");
}

id objc_msgSend_set_proxiedDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedDeviceClass:");
}

id objc_msgSend_set_proxiedDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_proxiedDeviceName:");
}

id objc_msgSend_set_requirePassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_requirePassword:");
}

id objc_msgSend_set_sessionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sessionID:");
}

id objc_msgSend_set_sharedSIWAAccountGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sharedSIWAAccountGroupID:");
}

id objc_msgSend_set_sharedSIWAAccountShareToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sharedSIWAAccountShareToken:");
}

id objc_msgSend_set_shouldRequestToArmDeviceToAllowPCSKeyUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_shouldRequestToArmDeviceToAllowPCSKeyUpload:");
}

id objc_msgSend_set_shouldSendGrandSlamTokensForRemoteUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_shouldSendGrandSlamTokensForRemoteUI:");
}

id objc_msgSend_set_shouldSendIdentityTokenForRemoteUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_shouldSendIdentityTokenForRemoteUI:");
}

id objc_msgSend_set_shouldSkipAuthorizationUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_shouldSkipAuthorizationUI:");
}

id objc_msgSend_set_shouldUseProxiedClientBundleIDForSRP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_shouldUseProxiedClientBundleIDForSRP:");
}

id objc_msgSend_setupPasskeyWithContext_forced_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupPasskeyWithContext:forced:completion:");
}

id objc_msgSend_sfrManifest(void *a1, const char *a2, ...)
{
  return _[a1 sfrManifest];
}

id objc_msgSend_shareInfo(void *a1, const char *a2, ...)
{
  return _[a1 shareInfo];
}

id objc_msgSend_shareTokenForAccount_inGroup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareTokenForAccount:inGroup:error:");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedAccount(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccount];
}

id objc_msgSend_sharedAnisetteFreeURLSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedAnisetteFreeURLSession];
}

id objc_msgSend_sharedAuthKitFollowupManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedAuthKitFollowupManager];
}

id objc_msgSend_sharedAuthKitFollowupProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedAuthKitFollowupProvider];
}

id objc_msgSend_sharedAuthKitFollowupPushDelegate(void *a1, const char *a2, ...)
{
  return _[a1 sharedAuthKitFollowupPushDelegate];
}

id objc_msgSend_sharedBag(void *a1, const char *a2, ...)
{
  return _[a1 sharedBag];
}

id objc_msgSend_sharedBagService(void *a1, const char *a2, ...)
{
  return _[a1 sharedBagService];
}

id objc_msgSend_sharedCacheEnabledAnisetteFreeSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedCacheEnabledAnisetteFreeSession];
}

id objc_msgSend_sharedCacheEnabledURLSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedCacheEnabledURLSession];
}

id objc_msgSend_sharedCacheReliantAnisetteFreeSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedCacheReliantAnisetteFreeSession];
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 sharedConfiguration];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return _[a1 sharedController];
}

id objc_msgSend_sharedDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 sharedDispatcher];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedService(void *a1, const char *a2, ...)
{
  return _[a1 sharedService];
}

id objc_msgSend_sharedSigner(void *a1, const char *a2, ...)
{
  return _[a1 sharedSigner];
}

id objc_msgSend_sharedSigningService(void *a1, const char *a2, ...)
{
  return _[a1 sharedSigningService];
}

id objc_msgSend_sharedURLSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedURLSession];
}

id objc_msgSend_sharedURLSessionWithDenyVirtualInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 sharedURLSessionWithDenyVirtualInterfaces];
}

id objc_msgSend_sharedValidator(void *a1, const char *a2, ...)
{
  return _[a1 sharedValidator];
}

id objc_msgSend_shortLivedToken(void *a1, const char *a2, ...)
{
  return _[a1 shortLivedToken];
}

id objc_msgSend_shouldAllowClient_logging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAllowClient:logging:");
}

id objc_msgSend_shouldAllowDemoMode(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowDemoMode];
}

id objc_msgSend_shouldAllowExperimentalMode(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowExperimentalMode];
}

id objc_msgSend_shouldBeginProximityAuthentiation(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeginProximityAuthentiation];
}

id objc_msgSend_shouldCacheResource(void *a1, const char *a2, ...)
{
  return _[a1 shouldCacheResource];
}

id objc_msgSend_shouldCapturePromptBugForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCapturePromptBugForContext:");
}

id objc_msgSend_shouldContinueWithAuthenticationResults_error_forContextID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldContinueWithAuthenticationResults:error:forContextID:completion:");
}

id objc_msgSend_shouldContinueWithResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldContinueWithResponse:error:");
}

id objc_msgSend_shouldDisablePiggybacking(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisablePiggybacking];
}

id objc_msgSend_shouldEnableAttestationLogging(void *a1, const char *a2, ...)
{
  return _[a1 shouldEnableAttestationLogging];
}

id objc_msgSend_shouldEnableTestAccountMode(void *a1, const char *a2, ...)
{
  return _[a1 shouldEnableTestAccountMode];
}

id objc_msgSend_shouldFakeAuthSuccess(void *a1, const char *a2, ...)
{
  return _[a1 shouldFakeAuthSuccess];
}

id objc_msgSend_shouldHideCreateOption(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideCreateOption];
}

id objc_msgSend_shouldHideInternalBuildHeader(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideInternalBuildHeader];
}

id objc_msgSend_shouldIgnoreTeamID(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreTeamID];
}

id objc_msgSend_shouldIgnoreUserID(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreUserID];
}

id objc_msgSend_shouldOfferSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _[a1 shouldOfferSecurityUpgrade];
}

id objc_msgSend_shouldPerformSatoriWarmupVerificationForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPerformSatoriWarmupVerificationForAccount:");
}

id objc_msgSend_shouldPreventDismissAfterUserSkip(void *a1, const char *a2, ...)
{
  return _[a1 shouldPreventDismissAfterUserSkip];
}

id objc_msgSend_shouldProcessAdditionalServerUIData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldProcessAdditionalServerUIData:");
}

id objc_msgSend_shouldPromptForPasswordOnly(void *a1, const char *a2, ...)
{
  return _[a1 shouldPromptForPasswordOnly];
}

id objc_msgSend_shouldProvisionIfNeccessary(void *a1, const char *a2, ...)
{
  return _[a1 shouldProvisionIfNeccessary];
}

id objc_msgSend_shouldProxyAnisetteAction(void *a1, const char *a2, ...)
{
  return _[a1 shouldProxyAnisetteAction];
}

id objc_msgSend_shouldReportTokenGenerationMetricsWithTokenGenerationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldReportTokenGenerationMetricsWithTokenGenerationInfo:");
}

id objc_msgSend_shouldRequestConfigurationInfo(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestConfigurationInfo];
}

id objc_msgSend_shouldRequestRecoveryPET(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestRecoveryPET];
}

id objc_msgSend_shouldRequestShortLivedToken(void *a1, const char *a2, ...)
{
  return _[a1 shouldRequestShortLivedToken];
}

id objc_msgSend_shouldSendIdentityToken(void *a1, const char *a2, ...)
{
  return _[a1 shouldSendIdentityToken];
}

id objc_msgSend_shouldSendServerResponseForRecoveredInfo_withRecoveryError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendServerResponseForRecoveredInfo:withRecoveryError:");
}

id objc_msgSend_shouldSkipSettingsLaunchAlert(void *a1, const char *a2, ...)
{
  return _[a1 shouldSkipSettingsLaunchAlert];
}

id objc_msgSend_shouldSuppressPushMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSuppressPushMessage:");
}

id objc_msgSend_shouldSyncWithServer(void *a1, const char *a2, ...)
{
  return _[a1 shouldSyncWithServer];
}

id objc_msgSend_shouldUpdateAuthModeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateAuthModeForAccount:");
}

id objc_msgSend_shouldUpdatePersistentServiceTokens(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpdatePersistentServiceTokens];
}

id objc_msgSend_shouldUpdateSynchronouslyWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateSynchronouslyWith:");
}

id objc_msgSend_showAlert_primaryAction_altAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAlert:primaryAction:altAction:");
}

id objc_msgSend_showAlert_primaryAction_altAction_cancelAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAlert:primaryAction:altAction:cancelAction:");
}

id objc_msgSend_showAlertForError_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAlertForError:withCompletion:");
}

id objc_msgSend_showPigCode_withIncomingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPigCode:withIncomingMessage:");
}

id objc_msgSend_showProximityErrorForContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showProximityErrorForContext:completion:");
}

id objc_msgSend_showServerUIWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showServerUIWithContext:completion:");
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_signData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signData:completion:");
}

id objc_msgSend_signData_withKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signData:withKey:error:");
}

id objc_msgSend_signInPartitionForLivenessWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signInPartitionForLivenessWithAltDSID:");
}

id objc_msgSend_signInWithAppleSharedAccountGroupID(void *a1, const char *a2, ...)
{
  return _[a1 signInWithAppleSharedAccountGroupID];
}

id objc_msgSend_signRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signRequest:");
}

id objc_msgSend_signRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signRequest:error:");
}

id objc_msgSend_signRequestWithBasicHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signRequestWithBasicHeaders:");
}

id objc_msgSend_signRequestWithCommonHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signRequestWithCommonHeaders:");
}

id objc_msgSend_signWithBAAHeaders_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signWithBAAHeaders:completion:");
}

id objc_msgSend_signWithIdentityToken(void *a1, const char *a2, ...)
{
  return _[a1 signWithIdentityToken];
}

id objc_msgSend_signal(void *a1, const char *a2, ...)
{
  return _[a1 signal];
}

id objc_msgSend_signalFromServerResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalFromServerResponse:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_signatureForURLRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureForURLRequest:completionHandler:");
}

id objc_msgSend_signaturesForData_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signaturesForData:options:completion:");
}

id objc_msgSend_signingBlock(void *a1, const char *a2, ...)
{
  return _[a1 signingBlock];
}

id objc_msgSend_signingHeadersForRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signingHeadersForRequest:completion:");
}

id objc_msgSend_silentTapToRadarWithRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "silentTapToRadarWithRequest:completion:");
}

id objc_msgSend_site(void *a1, const char *a2, ...)
{
  return _[a1 site];
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return _[a1 slotID];
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sourceAltDSID(void *a1, const char *a2, ...)
{
  return _[a1 sourceAltDSID];
}

id objc_msgSend_srpIteration(void *a1, const char *a2, ...)
{
  return _[a1 srpIteration];
}

id objc_msgSend_srpProtocol(void *a1, const char *a2, ...)
{
  return _[a1 srpProtocol];
}

id objc_msgSend_srpProtocolForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "srpProtocolForAccount:");
}

id objc_msgSend_srpSalt(void *a1, const char *a2, ...)
{
  return _[a1 srpSalt];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startAdvertising_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAdvertising:");
}

id objc_msgSend_startAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 startAuthorization];
}

id objc_msgSend_startAuthorizationWithCompanionLinkClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAuthorizationWithCompanionLinkClient:");
}

id objc_msgSend_startCoordinatingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startCoordinatingBlock:");
}

id objc_msgSend_startFetchingIconWithRequestContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFetchingIconWithRequestContext:");
}

id objc_msgSend_startFidoAuthWithContext_recoveryToken_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFidoAuthWithContext:recoveryToken:client:completion:");
}

id objc_msgSend_startListeningForMessagesFromPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 startListeningForMessagesFromPairedDevice];
}

id objc_msgSend_startPiggybackingForServerResponse_context_password_username_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPiggybackingForServerResponse:context:password:username:completion:");
}

id objc_msgSend_startProvisioningWithDSID_SPIM_SPIMLength_outCPIM_outCPIMLength_outSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startProvisioningWithDSID:SPIM:SPIMLength:outCPIM:outCPIMLength:outSession:");
}

id objc_msgSend_startRequestSessionWithController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRequestSessionWithController:completion:");
}

id objc_msgSend_startWithDelegates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithDelegates:");
}

id objc_msgSend_startup(void *a1, const char *a2, ...)
{
  return _[a1 startup];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateControllerWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateControllerWithContext:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 stopAdvertising];
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return _[a1 stopScan];
}

id objc_msgSend_store(void *a1, const char *a2, ...)
{
  return _[a1 store];
}

id objc_msgSend_storeAuthorization_withAltDSID_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeAuthorization:withAltDSID:forClient:");
}

id objc_msgSend_storeForAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeForAltDSID:");
}

id objc_msgSend_storeLivenessNonce_nonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeLivenessNonce:nonce:");
}

id objc_msgSend_storeName(void *a1, const char *a2, ...)
{
  return _[a1 storeName];
}

id objc_msgSend_storeOSVersionAttestationRefKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeOSVersionAttestationRefKey:");
}

id objc_msgSend_storeProvider(void *a1, const char *a2, ...)
{
  return _[a1 storeProvider];
}

id objc_msgSend_stores(void *a1, const char *a2, ...)
{
  return _[a1 stores];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringFromColumn_inStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromColumn:inStatement:");
}

id objc_msgSend_stringRepresentationForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringRepresentationForService:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongDeviceIdentifying(void *a1, const char *a2, ...)
{
  return _[a1 strongDeviceIdentifying];
}

id objc_msgSend_strongDeviceIdentityMarker(void *a1, const char *a2, ...)
{
  return _[a1 strongDeviceIdentityMarker];
}

id objc_msgSend_subErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 subErrorCode];
}

id objc_msgSend_submitDispatchableRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitDispatchableRequest:");
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return _[a1 subscriptions];
}

id objc_msgSend_subscriptionsInUse(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionsInUse];
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_supportsPiggybacking(void *a1, const char *a2, ...)
{
  return _[a1 supportsPiggybacking];
}

id objc_msgSend_supportsPresence(void *a1, const char *a2, ...)
{
  return _[a1 supportsPresence];
}

id objc_msgSend_surrogateClient(void *a1, const char *a2, ...)
{
  return _[a1 surrogateClient];
}

id objc_msgSend_surrogateCompletion(void *a1, const char *a2, ...)
{
  return _[a1 surrogateCompletion];
}

id objc_msgSend_surrogateContext(void *a1, const char *a2, ...)
{
  return _[a1 surrogateContext];
}

id objc_msgSend_surrogateIDGenerator(void *a1, const char *a2, ...)
{
  return _[a1 surrogateIDGenerator];
}

id objc_msgSend_surrogateManager(void *a1, const char *a2, ...)
{
  return _[a1 surrogateManager];
}

id objc_msgSend_surrogateRegistrationID(void *a1, const char *a2, ...)
{
  return _[a1 surrogateRegistrationID];
}

id objc_msgSend_syncAnisetteForContext_withSIMData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncAnisetteForContext:withSIMData:completion:");
}

id objc_msgSend_syncAnisetteWithSIMData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncAnisetteWithSIMData:completion:");
}

id objc_msgSend_syncAnisetteWithSIMData_device_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncAnisetteWithSIMData:device:completion:");
}

id objc_msgSend_synchronizeFollowUpItemsForContext_authHandler_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeFollowUpItemsForContext:authHandler:completion:");
}

id objc_msgSend_synchronizeTokensForAllAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeTokensForAllAccounts:");
}

id objc_msgSend_synchronizeTokensForAltDSID_account_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeTokensForAltDSID:account:error:");
}

id objc_msgSend_synchronizeWithDSID_SIM_SIMLength_outMID_outMIDLength_outSRM_outSRMLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeWithDSID:SIM:SIMLength:outMID:outMIDLength:outSRM:outSRMLength:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_teamID(void *a1, const char *a2, ...)
{
  return _[a1 teamID];
}

id objc_msgSend_teams(void *a1, const char *a2, ...)
{
  return _[a1 teams];
}

id objc_msgSend_tearDown(void *a1, const char *a2, ...)
{
  return _[a1 tearDown];
}

id objc_msgSend_tearDownFollowUpsWithItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownFollowUpsWithItems:");
}

id objc_msgSend_tearDownLoginNotifications(void *a1, const char *a2, ...)
{
  return _[a1 tearDownLoginNotifications];
}

id objc_msgSend_teardownFollowUpWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownFollowUpWithContext:completion:");
}

id objc_msgSend_telemetryDeviceSessionID(void *a1, const char *a2, ...)
{
  return _[a1 telemetryDeviceSessionID];
}

id objc_msgSend_telemetryDeviceSessionIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "telemetryDeviceSessionIDForAccount:");
}

id objc_msgSend_telemetryFlowID(void *a1, const char *a2, ...)
{
  return _[a1 telemetryFlowID];
}

id objc_msgSend_telemetryOptInGracePeriodOverride(void *a1, const char *a2, ...)
{
  return _[a1 telemetryOptInGracePeriodOverride];
}

id objc_msgSend_thirdPartyRegulatoryOverride(void *a1, const char *a2, ...)
{
  return _[a1 thirdPartyRegulatoryOverride];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tokenCreationDateWithIdentifier_forAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenCreationDateWithIdentifier:forAccount:error:");
}

id objc_msgSend_tokenFromAuditToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenFromAuditToken:");
}

id objc_msgSend_tokenFromNSXPCConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenFromNSXPCConnection:");
}

id objc_msgSend_tokenIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 tokenIdentifier];
}

id objc_msgSend_tokenWithBase64String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithBase64String:");
}

id objc_msgSend_tokenWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithDictionary:");
}

id objc_msgSend_tokenWithExternalizedVersion_lifetime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithExternalizedVersion:lifetime:");
}

id objc_msgSend_tokenWithExternalizedVersionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithExternalizedVersionString:");
}

id objc_msgSend_tokenWithIdentifier_altDSID_forAccount_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithIdentifier:altDSID:forAccount:error:");
}

id objc_msgSend_tokenWithIdentifier_altDSID_forAccount_shouldSync_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithIdentifier:altDSID:forAccount:shouldSync:error:");
}

id objc_msgSend_tokenWithValue_lifetime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenWithValue:lifetime:");
}

id objc_msgSend_tokensById(void *a1, const char *a2, ...)
{
  return _[a1 tokensById];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_trafficQueue(void *a1, const char *a2, ...)
{
  return _[a1 trafficQueue];
}

id objc_msgSend_transactionID(void *a1, const char *a2, ...)
{
  return _[a1 transactionID];
}

id objc_msgSend_transactionId(void *a1, const char *a2, ...)
{
  return _[a1 transactionId];
}

id objc_msgSend_transferState(void *a1, const char *a2, ...)
{
  return _[a1 transferState];
}

id objc_msgSend_transportRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 transportRepresentation];
}

id objc_msgSend_triggerAutoBugCaptureWithSubType_andBundleID_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerAutoBugCaptureWithSubType:andBundleID:userInfo:");
}

id objc_msgSend_trustedPhoneNumbers(void *a1, const char *a2, ...)
{
  return _[a1 trustedPhoneNumbers];
}

id objc_msgSend_trustedPhoneNumbersForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trustedPhoneNumbersForAccount:");
}

id objc_msgSend_ttlInMinutes(void *a1, const char *a2, ...)
{
  return _[a1 ttlInMinutes];
}

id objc_msgSend_ttrConfigurationAtKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ttrConfigurationAtKey:");
}

id objc_msgSend_txnid(void *a1, const char *a2, ...)
{
  return _[a1 txnid];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeForMessageWithTransportRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeForMessageWithTransportRepresentation:");
}

id objc_msgSend_uiWorkQueue(void *a1, const char *a2, ...)
{
  return _[a1 uiWorkQueue];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_underlyingContext(void *a1, const char *a2, ...)
{
  return _[a1 underlyingContext];
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 underlyingErrors];
}

id objc_msgSend_uniqueDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueDeviceIdentifier];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unregisterObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterObserver:");
}

id objc_msgSend_unregisterUISurrogateForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterUISurrogateForContext:");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_updateAccountAccessTelemetryOptInTimestampForAccount_withOptIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAccountAccessTelemetryOptInTimestampForAccount:withOptIn:");
}

id objc_msgSend_updateAuthKitAccount_withServerResponse_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthKitAccount:withServerResponse:context:error:");
}

id objc_msgSend_updateAuthorizationListWithMetadataInfo_withAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthorizationListWithMetadataInfo:withAltDSID:");
}

id objc_msgSend_updateAuthorizationListWithMetadataInfo_withAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthorizationListWithMetadataInfo:withAltDSID:completion:");
}

id objc_msgSend_updateBirthdayForAltDSID_userInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBirthdayForAltDSID:userInformation:");
}

id objc_msgSend_updateBirthdayForAltDSID_userInformation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBirthdayForAltDSID:userInformation:error:");
}

id objc_msgSend_updateCacheWithContext_deviceListResponse_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCacheWithContext:deviceListResponse:completionHandler:");
}

id objc_msgSend_updateContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContext:completion:");
}

id objc_msgSend_updateGrandSlamServiceTokensWithRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGrandSlamServiceTokensWithRequest:error:");
}

id objc_msgSend_updateKeychainItem_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateKeychainItem:completion:");
}

id objc_msgSend_updateLastKnownMID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastKnownMID:error:");
}

id objc_msgSend_updatePrimaryAppsMetadataWithDeveloperTeams_forAltDSID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrimaryAppsMetadataWithDeveloperTeams:forAltDSID:completionHandler:");
}

id objc_msgSend_updateSatoriWarmUpTimestampForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSatoriWarmUpTimestampForAccount:");
}

id objc_msgSend_updateStateWithExternalAuthenticationResponse_forContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStateWithExternalAuthenticationResponse:forContext:completion:");
}

id objc_msgSend_updateToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateToken:");
}

id objc_msgSend_updateToken_identifier_altDSID_account_credential_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateToken:identifier:altDSID:account:credential:error:");
}

id objc_msgSend_updateUserConfigForAccount_configurationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserConfigForAccount:configurationInfo:");
}

id objc_msgSend_updateUserConfigForAltDSID_configurationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserConfigForAltDSID:configurationInfo:");
}

id objc_msgSend_updateUserInformationForAltDSID_userInformation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserInformationForAltDSID:userInformation:completion:");
}

id objc_msgSend_updateUserResponse_withContext_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserResponse:withContext:forClient:");
}

id objc_msgSend_updateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithContext:");
}

id objc_msgSend_updateWithContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithContext:error:");
}

id objc_msgSend_updateWithDeviceRestrictionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithDeviceRestrictionState:");
}

id objc_msgSend_updateWithHTTPURLResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithHTTPURLResponse:");
}

id objc_msgSend_updateWithSecondaryAuthenticationBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithSecondaryAuthenticationBody:");
}

id objc_msgSend_updateWithSecondaryAuthenticationResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithSecondaryAuthenticationResponse:");
}

id objc_msgSend_updateWithSecondaryAuthenticationResponse_shouldUpdateDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithSecondaryAuthenticationResponse:shouldUpdateDSID:");
}

id objc_msgSend_upgradeTokenWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upgradeTokenWithContext:completion:");
}

id objc_msgSend_upgradeUIURL(void *a1, const char *a2, ...)
{
  return _[a1 upgradeUIURL];
}

id objc_msgSend_uplevelAuthenticationForUIWithContext_client_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uplevelAuthenticationForUIWithContext:client:completion:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_urlAtKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlAtKey:");
}

id objc_msgSend_urlBagKey(void *a1, const char *a2, ...)
{
  return _[a1 urlBagKey];
}

id objc_msgSend_urlForKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlForKey:completion:");
}

id objc_msgSend_urlForKey_fromCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlForKey:fromCache:completion:");
}

id objc_msgSend_urlRequestProvider(void *a1, const char *a2, ...)
{
  return _[a1 urlRequestProvider];
}

id objc_msgSend_urlSwitchData(void *a1, const char *a2, ...)
{
  return _[a1 urlSwitchData];
}

id objc_msgSend_urlSwitchingData(void *a1, const char *a2, ...)
{
  return _[a1 urlSwitchingData];
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userAgeRange(void *a1, const char *a2, ...)
{
  return _[a1 userAgeRange];
}

id objc_msgSend_userAgeRangeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAgeRangeForAccount:");
}

id objc_msgSend_userChosenName(void *a1, const char *a2, ...)
{
  return _[a1 userChosenName];
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _[a1 userID];
}

id objc_msgSend_userIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 userIdentifier];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userInfoFromContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfoFromContext:");
}

id objc_msgSend_userInformation(void *a1, const char *a2, ...)
{
  return _[a1 userInformation];
}

id objc_msgSend_userInformationRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 userInformationRepresentation];
}

id objc_msgSend_userIsSeniorForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userIsSeniorForAccount:");
}

id objc_msgSend_userResponse(void *a1, const char *a2, ...)
{
  return _[a1 userResponse];
}

id objc_msgSend_userResponseWithContext_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userResponseWithContext:forClient:");
}

id objc_msgSend_userSelection(void *a1, const char *a2, ...)
{
  return _[a1 userSelection];
}

id objc_msgSend_userUnderAgeForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userUnderAgeForAccount:");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _[a1 username];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_validateEDPIdentitiesWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateEDPIdentitiesWithContext:completion:");
}

id objc_msgSend_validateExternalizedContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateExternalizedContext:error:");
}

id objc_msgSend_validateMID_anisetteFetchError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateMID:anisetteFetchError:");
}

id objc_msgSend_validateResponseData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateResponseData:error:");
}

id objc_msgSend_validateVettingTokenURL(void *a1, const char *a2, ...)
{
  return _[a1 validateVettingTokenURL];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_verifiedPrimaryEmailForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifiedPrimaryEmailForAccount:");
}

id objc_msgSend_verifier(void *a1, const char *a2, ...)
{
  return _[a1 verifier];
}

id objc_msgSend_verifyCacheSyncStatusFromResponse_context_accountManager_reporter_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyCacheSyncStatusFromResponse:context:accountManager:reporter:completionHandler:");
}

id objc_msgSend_verifyCredentialReason(void *a1, const char *a2, ...)
{
  return _[a1 verifyCredentialReason];
}

id objc_msgSend_verifyMasterKey_withContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyMasterKey:withContext:completion:");
}

id objc_msgSend_verifyRecoveryTransactionWithContext_verifySessionID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyRecoveryTransactionWithContext:verifySessionID:error:");
}

id objc_msgSend_vettedPrimaryEmail(void *a1, const char *a2, ...)
{
  return _[a1 vettedPrimaryEmail];
}

id objc_msgSend_wait(void *a1, const char *a2, ...)
{
  return _[a1 wait];
}

id objc_msgSend_waitForRemoteViewServiceWithContext_client_uiWorkBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForRemoteViewServiceWithContext:client:uiWorkBlock:");
}

id objc_msgSend_waitForReply(void *a1, const char *a2, ...)
{
  return _[a1 waitForReply];
}

id objc_msgSend_waitForReplyTimeout(void *a1, const char *a2, ...)
{
  return _[a1 waitForReplyTimeout];
}

id objc_msgSend_waitForSettingsWithContext_client_requireFullUICapability_allowRedirectToSettings_uiWorkBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForSettingsWithContext:client:requireFullUICapability:allowRedirectToSettings:uiWorkBlock:");
}

id objc_msgSend_waitUntilAllOperationsAreFinished(void *a1, const char *a2, ...)
{
  return _[a1 waitUntilAllOperationsAreFinished];
}

id objc_msgSend_waitUntilDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitUntilDate:");
}

id objc_msgSend_walrusContext(void *a1, const char *a2, ...)
{
  return _[a1 walrusContext];
}

id objc_msgSend_walrusEnabled(void *a1, const char *a2, ...)
{
  return _[a1 walrusEnabled];
}

id objc_msgSend_walrusStatusLiveValue(void *a1, const char *a2, ...)
{
  return _[a1 walrusStatusLiveValue];
}

id objc_msgSend_walrusWebAccessEnabled(void *a1, const char *a2, ...)
{
  return _[a1 walrusWebAccessEnabled];
}

id objc_msgSend_walrusWebAccessInfo(void *a1, const char *a2, ...)
{
  return _[a1 walrusWebAccessInfo];
}

id objc_msgSend_warmUpVerificationSessionWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "warmUpVerificationSessionWithCompletionHandler:");
}

id objc_msgSend_webAccessEnabled(void *a1, const char *a2, ...)
{
  return _[a1 webAccessEnabled];
}

id objc_msgSend_webAccessEnabledForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webAccessEnabledForAccount:");
}

id objc_msgSend_webAccessStatusLiveValue(void *a1, const char *a2, ...)
{
  return _[a1 webAccessStatusLiveValue];
}

id objc_msgSend_webSessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 webSessionIdentifier];
}

id objc_msgSend_webSessionUUID(void *a1, const char *a2, ...)
{
  return _[a1 webSessionUUID];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_wipeDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wipeDatabase:");
}

id objc_msgSend_wrappedKeyData(void *a1, const char *a2, ...)
{
  return _[a1 wrappedKeyData];
}

id objc_msgSend_wrappingKeyRKC(void *a1, const char *a2, ...)
{
  return _[a1 wrappingKeyRKC];
}

id objc_msgSend_xpcConnection(void *a1, const char *a2, ...)
{
  return _[a1 xpcConnection];
}