void sub_10000562C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t vars8;

  v2 = +[AKNativeAnisetteServiceTrafficManager sharedSigningService];
  v3 = [v2 activeSigningRequest];

  if (v3)
  {
    v4 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10017ED6C(a1, v4, v5);
    }

    v6 = +[AKNativeAnisetteServiceTrafficManager sharedSigningService];
    v7 = [v6 pendingSigningRequests];
    [v7 addObject:*(void *)(a1 + 32)];
  }
  else
  {
    v9 = *(void *)(a1 + 32);
    v8 = *(void **)(a1 + 40);
    _objc_msgSend(v8, "_tq_activateAndExecuteRequest:", v9);
  }
}

void sub_100005950(uint64_t a1)
{
  v2 = +[AKNativeAnisetteServiceTrafficManager sharedSigningService];
  [v2 setActiveSigningRequest:0];

  v3 = +[AKNativeAnisetteServiceTrafficManager sharedSigningService];
  v4 = [v3 pendingSigningRequests];

  if ([v4 count])
  {
    v5 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10017EDE0(v4);
    }

    v6 = [v4 firstObject];
    [v4 removeObjectAtIndex:0];
    dispatch_qos_class_t v7 = [v6 requestQosClass];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10000F9E0;
    v14[3] = &unk_100226C00;
    v14[4] = *(void *)(a1 + 32);
    id v15 = v6;
    id v8 = v6;
    v9 = (void (**)(dispatch_block_t, uint64_t, uint64_t, uint64_t, uint64_t))dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v7, 0, v14);
    v9[2](v9, v10, v11, v12, v13);
  }
}

void sub_100005AB4(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v16 = 0;
  id v5 = [v2 _calculateAndPersistDriftStatusForMID:v3 anisetteFetchError:v4 error:&v16];
  id v6 = v16;
  dispatch_qos_class_t v7 = +[AKConfiguration sharedConfiguration];
  id v8 = [v7 lastKnownIDMSEnvironment];

  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v5 == (id)2;
  }
  if (v9)
  {
    uint64_t v10 = +[NSError ak_generalErrorWithCode:-8019 errorDomain:AKAnisetteErrorDomain underlyingError:*(void *)(a1 + 48)];
    uint64_t v11 = [*(id *)(a1 + 32) _createErrorWithMIDDriftUnderlyingError:v10 anisetteFetchError:*(void *)(a1 + 48)];
    uint64_t v12 = +[AAFAnalyticsEvent ak_analyticsEventWithEventName:@"com.apple.authkit.midInvalidated" error:v11];
    uint64_t v13 = +[AKAnalyticsReporterRTC rtcAnalyticsReporter];
    [v13 sendEvent:v12];
    v14 = +[AKURLBag sharedBag];
    if ([v14 isMIDDriftTTRDisabled])
    {
    }
    else
    {
      unsigned int v15 = [*(id *)(a1 + 32) _isTTREligibleForMIDDriftedError:v11];

      if (v15) {
        [*(id *)(a1 + 32) _triggerTTRForMIDDriftedError:v11];
      }
    }
  }
}

void sub_100006164(uint64_t a1)
{
  [*(id *)(a1 + 32) addEntriesFromDictionary:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  [*(id *)(a1 + 32) addEntriesFromDictionary:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  v2 = +[AKDevice currentDevice];
  unsigned int v3 = [v2 isVirtualMachine];

  if (v3) {
    CFStringRef v4 = @"2";
  }
  else {
    CFStringRef v4 = @"1";
  }
  [*(id *)(a1 + 32) setValue:v4 forKey:@"x-apple-i-device-type"];
  id v5 = [objc_alloc((Class)AKAttestationData) initWithDictionary:*(void *)(a1 + 32)];
  id v6 = *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (!v6) {
    id v6 = *(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  }
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v8 = _AKSignpostLogSystem();
  BOOL v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 80);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v15) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "SignAndAttestation", "", (uint8_t *)&v15, 2u);
  }

  uint64_t v11 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 80);
    int v15 = 134218240;
    uint64_t v16 = v12;
    __int16 v17 = 2048;
    double v18 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:SignAndAttestation ", (uint8_t *)&v15, 0x16u);
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v13)
    {
      v14 = *(void (**)(void))(v13 + 16);
LABEL_16:
      v14();
    }
  }
  else if (v13)
  {
    v14 = *(void (**)(void))(v13 + 16);
    goto LABEL_16;
  }
}

void sub_100006534(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000A060;
  v8[3] = &unk_100227B58;
  id v6 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = v5;
  id v7 = v5;
  objc_msgSend(v6, "_tq_invokeAnisetteTrafficRequest:withCompletion:", a2, v8);
}

uint64_t sub_1000069E0(uint64_t a1, uint64_t a2)
{
  if (unint64_t)(a1 + 8) <= 6 && ((0x7Du >> (a1 + 8))) {
    __asm { BRAA            X8, X17 }
  }
  return 4294922295;
}

void sub_100006EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15, uint64_t a16, int a17, int a18)
{
  *(void *)(v21 - 208) = v18;
  v22 = *(void **)(v21 - 136);
  (*(void (**)(void))(v19 + 8 * (v20 ^ (v20 - 1871))))(*v22);
  void *v22 = a14;
  *a15 = a18;
  JUMPOUT(0x100006F38);
}

uint64_t sub_100006FA8@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((a1 * (v3 + (v1 ^ 0x335) + v4 + v1 - 687 - 981)) ^ v1)))();
}

uint64_t sub_100006FD8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (int)((((((v0 - 410) | 0x119) ^ 0xFFFFFE3A) + v0 - 132) * (v1 == 0)) ^ v0)))();
}

uint64_t sub_100007018()
{
  unsigned int v3 = ((v0 - 82150104) & 0x4E585D9) - 437759 + *(_DWORD *)(v1 + 12) - 1044;
  unsigned int v4 = *(_DWORD *)(v1 + 8) - 1123084877;
  BOOL v5 = v3 < 0xFFF95201;
  BOOL v6 = v3 > v4;
  if (v4 < 0xFFF95201 != v5) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((63 * !v6) ^ v0)))();
}

uint64_t sub_1000070A0@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v31 = *(void *)(v30 - 144);
  int v32 = v27 + 3;
  *(void *)(v30 - 144) = v31;
  uint64_t v33 = *(void *)(v31 - 0x3B66C28959A1DD8DLL);
  unsigned int v34 = ((2 * a9) & 0x7FAEFDDE) + (a9 ^ 0xBFD77EEF);
  *(unsigned char *)(v33 + v34 + (v32 ^ 0x40288008)) = -123;
  v34 += 1076396040;
  *(unsigned char *)(v33 + v34 + 266) = -2;
  *(unsigned char *)(v33 + v34 + 267) = 99;
  *(unsigned char *)(v33 + v34 + 268) = -80;
  *a1 += 4;
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (((v32 + 554792680) | 0x5E208106) ^ (v29 + 950) ^ v32)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_100007380()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((v1 - 1569420586) & 0x5D8B77FA) + ((v1 + 247399078) & 0xF140FEEF) - 1659)
                                     * (v0 == 0)) ^ (v1 + 1549))))();
}

uint64_t sub_1000073E0()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) - 1642909503;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 1529410671;
  BOOL v5 = v3 < 0x9E1330BD;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < (((v0 - 1000) | 0x234) ^ 0x9E132B7A) + 15 * (v0 ^ 0x395)) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((1050 * v6) ^ v0)))();
}

uint64_t sub_100007470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  HIDWORD(a25) = v25;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (((((v26 - 1367) | 0x40) ^ (v26 - 1313)) * (v27 != 0)) | v26)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_1000074B0()
{
  unsigned int v3 = v0 - 1793147892;
  BOOL v4 = (v0 - 1793147892) < 0xD808F856;
  unsigned int v5 = (((2 * v1) ^ 0xA5F7FD48) & (2 * (2 * v0 + 2049673060))) + ((2 * v0 + 2049673060) ^ 0x52FBFCFE);
  if (v4 != v5 - 2062746792 < 0xD808F856) {
    BOOL v6 = v5 - 2062746792 < 0xD808F856;
  }
  else {
    BOOL v6 = v5 - 2062746792 > v3;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((367 * v6) ^ v1)))();
}

uint64_t sub_100007558@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v30 = *(void *)(v29 - 144);
  int v31 = (v26 - 11) | 0x84;
  *(void *)(v29 - 144) = v30;
  uint64_t v32 = *(void *)(v30 - 0x3B66C28959A1DD8DLL);
  unsigned int v33 = (a9 ^ 0x6BDF3CEF) - 1809792925 + ((2 * a9) & 0xD7BE79DE);
  *(unsigned char *)(v32 + v33 + 686) = 0;
  *(unsigned char *)(v32 + v33 + v31) = 0;
  *(unsigned char *)(v32 + v33 + 688) = 0;
  *(unsigned char *)(v32 + v33 + 689) = 1;
  *a1 += 4;
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((v31 - 197) ^ (v28 + 143) ^ v31 ^ (v28 + 673) ^ v31)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_10000771C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((3 * (v0 ^ 0xB7) - 52) * (v1 == 0)) ^ v0)))();
}

uint64_t sub_100007758()
{
  unsigned int v3 = *(_DWORD *)(v1 + 12) + 1189778007;
  unsigned int v4 = *(_DWORD *)(v1 + 8) + 67130881;
  BOOL v5 = v3 < (v0 ^ 0x61Eu) + 1189777478;
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x46EA924F) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((49 * !v6) ^ v0)))();
}

uint64_t sub_1000077D8@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v30 = *(void *)(v29 - 144);
  uint64_t v31 = (v25 - 240);
  unint64_t v32 = v26 - ((v31 ^ 0xF99431D3CA63CD40) & (2 * v26)) + 0x7CCA18E9E531E62CLL;
  *(void *)(v29 - 144) = v30;
  unsigned int v33 = (unsigned char *)(*(void *)(v30 - 0x3B66C28959A1DD8DLL)
                + ((2 * a9) & 0x1F6BAFABALL)
                + (a9 ^ 0x67AF3FFFFB5D7D5DLL)
                - 0x67AF3FFFFB5D7D5DLL);
  *unsigned int v33 = HIBYTE(v32) ^ 0x7C;
  v33[1] = BYTE6(v32) ^ 0xCA;
  v33[2] = BYTE5(v32) ^ 0x18;
  v33[3] = BYTE4(v32) ^ 0xE9;
  v33[4] = ((v26 - ((v31 ^ 0xCA63CD40) & (2 * v26)) - 449714644) >> 24) ^ 0xE5;
  v33[5] = ((v26 - ((v31 ^ 0xCA63CD40) & (2 * v26)) - 449714644) >> 16) ^ 0x31;
  v33[6] = ((unsigned __int16)(v26 - ((v31 ^ 0xCD40) & (2 * v26)) - 6612) >> 8) ^ 0xE6;
  v33[7] = (v26 - ((v31 ^ 0x40) & (2 * v26)) + 44) ^ 0x2C;
  *a1 += 8;
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * (int)(v31 ^ (v28 - 233) ^ (v28 + 1628) ^ ((v31 - 279) | 0x61C) ^ v31)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_100007B30()
{
  *(void *)(v4 - 120) = 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((46 * (((v1 == 0) ^ (v3 + v0)) & 1)) ^ v0)))();
}

uint64_t sub_100007B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v32 = v28 ^ 0x5A8;
  uint64_t v33 = (*(uint64_t (**)(void))(v29 + 8 * ((v28 ^ 0x5A8) + 1387)))();
  (*(void (**)(uint64_t, char *, void, void))(v29 + 8 * (v32 ^ 0xB5F)))(v33, (char *)*(&off_100232F90 + (v32 ^ 0x3B3)) - 3, **(void **)(v31 - 136), *(unsigned int *)(*(void *)(v31 - 136) + 12));
  uint64_t v34 = (*(uint64_t (**)(void, void))(v29 + 8 * (v32 ^ 0xB49)))(*(void *)(v31 - 160), 0);
  *(void *)(v31 - 184) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (int)(((v34 == 0) * ((v32 + 2134898241) & 0xFFF1FF0F ^ (v30 + 2))) ^ v32)))(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_100007C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *(void *)(v29 - 192) = a1;
  uint64_t v30 = (*(uint64_t (**)(void, void, void))(v28 + 8 * (v27 + 1358)))(*(void *)(v29 - 160), *(void *)(v29 - 192), 0);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8 * (((((v30 == 0) ^ (v27 - 47)) & 1) * (((v27 + 2147219409) ^ 0x7FFBFA0C) - 268)) ^ (v27 - 247)));
  *(void *)(v29 - 184) = *(void *)(v29 - 192);
  return v31(v30, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_100007CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  (*(void (**)(uint64_t, char *))(v37 + 8 * (v36 ^ 0x8B8)))(a1, (char *)*(&off_100232F90 + v36 - 364) - 12);
  (*(void (**)(uint64_t))(v37 + 8 * (v36 + 1830)))(a1);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8 * (v36 ^ 0x8A7)))(a1, a36);
  uint64_t v39 = (void *)(*(uint64_t (**)(void))(v37 + 8 * (v36 + 1927)))();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * (int)(((v39 == *(&off_100232F90 + (v36 ^ 0x181))) * ((v36 + 497444452) & 0xE2599FFF ^ ((v36 ^ 0xA4) + 188))) ^ v36)))(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

uint64_t sub_100007D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return (*(uint64_t (**)(void))(v31
                              + 8
                              * (((a31 == (void)*(&off_100232F90 + v32 - 284) - 8)
                                * (5 * (v32 ^ 0x160) + ((v32 + 2133981144) ^ 0x7F31FEA1))) ^ v32)))();
}

uint64_t sub_100007E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  (*(void (**)(uint64_t, uint64_t))(v37 + 8 * (v38 ^ 0x8A7)))(a28, a36);
  uint64_t v39 = (*(uint64_t (**)(void))(v37 + 8 * (v38 ^ 0x899)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * (((v39 == v36) * ((((v38 - 1633085932) & 0x6156EF60) + 239) ^ 0x560)) ^ v38)))(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

uint64_t sub_100007E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return (*(uint64_t (**)(void))(v32
                              + 8
                              * ((((v33 ^ 0x7F31FE07) - 2133979208 + ((v33 - 8035729) & 0x7A97FF) - 2600) * (a31 == v31)) ^ v33)))();
}

uint64_t sub_100007EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  (*(void (**)(uint64_t, uint64_t))(v37 + 8 * (v38 + 1981)))(a28, a36);
  uint64_t v39 = (*(uint64_t (**)(void))(v37 + 8 * (v38 + 1955)))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * ((228 * (((v38 + 52) ^ (v39 == v36)) & 1)) ^ v38)))(v39, v40, v41, v42, v43, v44, v45, v46, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23);
}

uint64_t sub_100007F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 8 * (v33 + 295)))(a31, v32, v34 - 120);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * (((((v33 + 24) ^ (v35 == 0)) & 1) * ((v33 - 339) ^ 0x684)) ^ v33));
  *(void *)(v34 - 200) = 0x50417EF54FC55D4FLL;
  return v36(v35, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t sub_100007FC8()
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 + 623)))(24, 4101018099);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8 * (((v3 == 0) * (((v0 + 254851689) | 0x70013802) ^ 0x7F31FE07 ^ ((v0 - 658) | 0x330))) ^ v0));
  *(void *)(v2 - 200) = 0x50417EF54FC55D4FLL;
  return v4(v3, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100008064(uint64_t a1)
{
  *(void *)(v3 - 176) = a1 + 0x50417EF54FC55D4FLL;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 917342576;
  *(_DWORD *)(a1 + 12) = 437737774;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 ^ 0xE31)))(4096, 1358311088);
  *(void *)a1 = v5;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v1 - 1) ^ (v5 == 0)) & 1) * (((v1 - 1786) | 0x482) - 1212)) ^ v1)))();
}

uint64_t sub_1000080F8()
{
  *(_DWORD *)(v3 + 8) = v1 + 4096;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v0 + 37) ^ (*(void *)(v4 - 120) > (unint64_t)(v1 - 917338480))) & 1)
                                * ((v0 - 1038699979) & 0x3DE94D9F ^ 0x491)) ^ v0)))();
}

uint64_t sub_100008170@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  *(void *)(v28 - 200) = 0x50417EF54FC55D4FLL;
  *(void *)(v28 - 184) = *(void *)(v28 - 192);
  uint64_t v29 = *(void *)(v28 - 176);
  *(void *)(v28 - 176) = v29;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * (int)(((a16 <= *(void *)(v29 - 0x50417EF54FC55D4FLL)) * ((a8 & 0xBE1EC43B ^ 0x289) + 326 + 3 * (a8 & 0xBE1EC43B ^ 0x14C) - 1996)) ^ a8 & 0xBE1EC43B ^ 0x289)))(*(void *)(v29 - 0x50417EF54FC55D4FLL), a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, v29, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10000879C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void *)(v21 - 176);
  *(_DWORD *)(v22 - 0x50417EF54FC55D47) = (*(_DWORD *)(v21 - 120) ^ 0x3EFDEB73)
                                          - 139485699
                                          + ((2 * *(_DWORD *)(v21 - 120)) & 0x7DFBD6E6);
  *(_DWORD *)(v22 - 0x50417EF54FC55D43) = 437737774;
  *(void *)(v21 - 152) = v20;
  uint64_t v23 = *(void *)(v21 - 184);
  *(void *)(v21 - 200) = v22;
  *(void *)(v21 - 192) = v23;
  return sub_10000881C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_10000881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  *(_DWORD *)(v38 - 168) = v36;
  (*(void (**)(void))(v37 + 8 * (v36 ^ 0x7F31F002)))(*(void *)(v38 - 192));
  (*(void (**)(uint64_t))(v37 + 8 * (v36 ^ 0x7F31F002)))(a28);
  return (*(uint64_t (**)(void))(v37 + 8 * ((165 * (a36 != 0)) ^ (v36 - 2133980878))))();
}

uint64_t sub_100008894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v36 = (*(uint64_t (**)(void))(v33 + 8 * v34))();
  uint64_t v37 = *(uint64_t (**)(uint64_t))(v33 + 8 * ((v32 - 504) ^ ((2 * (a31 == 0)) | (8 * (a31 == 0)))));
  *(void *)(v35 - 184) = v31;
  return v37(v36);
}

uint64_t sub_1000088EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  (*(void (**)(uint64_t))(v34 + 8 * (*(_DWORD *)(v38 - 168) ^ v31)))(a31);
  uint64_t v39 = *(void *)(v38 - 136);
  *(void *)(v38 - 184) = v32;
  if (v35 == -45004)
  {
    *(void *)(v38 - 176) = v33;
    *(void *)(v38 - 128) = 0;
    *(_DWORD *)(v38 - 112) = 0;
    uint64_t v40 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v34 + 8 * (v37 ^ (v37 - 2278))))(*(unsigned int *)*(&off_100232F90 + (v37 ^ (v37 + 8))), *(void *)v39, *(unsigned int *)(v39 + 12), v38 - 128, v38 - 112);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * ((1119 * ((v40 ^ 0x4FDFFACD) - 92409924 + ((2 * v40) & 0x9FBFF59A) == 1516104332)) ^ (v36 + v37 - 1898))))(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  }
  else if (v35)
  {
    return sub_100009EB8();
  }
  else
  {
    return sub_10000989C();
  }
}

uint64_t sub_100008F7C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (int)(((((v0 - v1 + 2076) ^ 0xFFFFF1B0) + v0 - v1 + 2076) * (v3 == 0)) ^ v0)))();
}

uint64_t sub_100008FB0()
{
  (*(void (**)(uint64_t))(v1 + 8 * (v0 ^ (v3 - 1871))))(v2);
  return sub_10000982C();
}

uint64_t sub_100008FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_DWORD *a29,int a30,int a31)
{
  uint64_t v37 = (*(uint64_t (**)(void))(v32 + 8 * (v35 + v34)))(*(void *)(v31 - 0x50417EF54FC55D4FLL));
  *(void *)(v31 - 0x50417EF54FC55D4FLL) = a23;
  *a29 = a31;
  *(void *)(v36 - 152) = v33;
  return (*(uint64_t (**)(uint64_t))(v32
                                            + 8
                                            * ((117 * ((((v35 + v34 - 2228) ^ 0x42E) & 1) == 0)) ^ (v35 + v34 - 267))))(v37);
}

void sub_100009068()
{
  *(void *)(v1 - 168) = v0;
  JUMPOUT(0x10000909CLL);
}

uint64_t sub_1000090FC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((233 * (((v0 == 0) ^ (v1 + 58) & 0x7F) & 1)) ^ v1)))();
}

uint64_t sub_100009144()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((143 * ((v0 ^ (v1 < ((v0 + 2143287426) & 0xFF71FD5F ^ (v3 + 8)))) & 1)) ^ v0)))();
}

uint64_t sub_100009190()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((472
                                * (v1 >= (((v0 ^ 0x5D2) + 649353352) & 0xD94BA6C6 ^ 0xFFFFFFFF80CE015FLL)
                                       + (((v0 ^ 0x5D2) + 2134766672) & 0xFFF3FDBF))) ^ v0 ^ 0x5D2)))();
}

uint64_t sub_1000091FC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((46 * (v0 >= ((v1 + 86010557) | 0x7A118804u) - v3 + 32)) ^ v1)))();
}

uint64_t sub_100009244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = a2 + (v2 - 1);
  long long v8 = *(_OWORD *)(v7 - 31);
  uint64_t v9 = a1 + (v2 - 1);
  *(_OWORD *)(v9 - 15) = *(_OWORD *)(v7 - 15);
  *(_OWORD *)(v9 - 31) = v8;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v2 & 0xFFFFFFE0) == 32) * ((251 * (v3 ^ (v6 - 7))) ^ 0x2B8)) ^ (v5 + v3 - 1728))))();
}

void sub_1000092A8()
{
}

uint64_t sub_1000092B4()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v1 - 375861489) & 0x16672FFB) - 760) * (v0 != 0)) | v1)))();
}

uint64_t sub_1000092EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v7 = v2 > 7 && (unint64_t)(a1 - a2) > 0x1F;
  return (*(uint64_t (**)(void))(v4 + 8 * (((((v3 + 503442954) | 0x61300802) + ((v3 + 316) ^ (v5 - 877))) * v7) ^ v3)))();
}

uint64_t sub_10000933C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v0 > 0x1F) * (((v1 - 805) | 0x424) ^ 0x540)) ^ v1)))();
}

uint64_t sub_100009370@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((957
                                * (((((v3 + 1291863241) | 0x3231B007) - 82874673) & 0x85BE9E7F) - 1590 != (v2 & 0xFFFFFFE0))) ^ (v5 + ((v3 + 1291863241) | 0x3231B007) - 1811))))();
}

uint64_t sub_1000093EC()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((((v0 == v1) ^ (v4 + v2)) & 1) * (v2 - 1576)) ^ v2)))();
}

uint64_t sub_100009418()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((v1 - 576) | 0x120) ^ (v3 + 1584) ^ (v1 + 2142630713) & 0xFF7BFF77)
                                     * ((v0 & 0x18) == 0)) ^ (v1 - 543))))();
}

uint64_t sub_100009468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + v2) = *(void *)(a2 + v2);
  return (*(uint64_t (**)(void))(v5 + 8 * (((v2 - (v3 & 0xFFFFFFF8) == -8) * ((7 * (v4 ^ 0x55B)) ^ 0x8F)) ^ v4)))();
}

uint64_t sub_1000094BC(uint64_t a1, uint64_t a2)
{
  void *v3 = *v4;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8 * (((a2 == 0) * v5) ^ v2)))(a1, a2 + 8);
}

uint64_t sub_1000094E4()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v2 + 335607052) | 0x6B310100) ^ (v2 - 4719404) & 0x7F79F937 ^ 0x482) * (v0 == v1)) ^ v2)))();
}

uint64_t sub_100009538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a1 + v2) = *(unsigned char *)(a2 + v2);
  return (*(uint64_t (**)(void))(v5 + 8 * ((1482 * (v2 + 1 == v3)) ^ (v6 + v4 - 1598))))();
}

uint64_t sub_10000956C()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v0 == v1) ^ (v4 + v2 + 1)) & 1) * ((v2 - 515) ^ 0x4E3)) ^ v2)))();
}

uint64_t sub_1000095A4()
{
  return (*(uint64_t (**)(void))(v2
                              + 8 * ((407 * ((v0 & 0x18) == (((v1 + 588330028) | 0x5C20C001u) ^ 0x7F31F907))) ^ v1)))();
}

uint64_t sub_1000095F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 - 7 + ((((2 * (v4 ^ 0xF)) ^ 0x42E) - 879) ^ v2) + v3) = *(void *)(a2
                                                                                                 - 7
                                                                                                 + ((((2 * (v4 ^ 0xF)) ^ 0x42E) - 879) ^ v2)
                                                                                                 + v3);
  return (*(uint64_t (**)(void))(v5 + 8 * ((15 * ((v3 & 0xFFFFFFF8) - 8 != v2)) ^ v4 ^ 0xF)))();
}

void sub_100009650()
{
}

uint64_t sub_100009658()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (v2 ^ (v1 == v0))))();
}

uint64_t sub_100009678()
{
  return v0();
}

uint64_t sub_100009680()
{
  uint64_t v1 = *(void *)(v0 - 168);
  *(_DWORD *)(v1 - 0x50417EF54FC55D47) = (*(_DWORD *)(v0 - 112) ^ 0x76FDD9F0)
                                         - 1079005312
                                         + ((2 * *(_DWORD *)(v0 - 112)) & 0xEDFBB3E0);
  *(_DWORD *)(v1 - 0x50417EF54FC55D43) = 437737774;
  return sub_10000982C();
}

uint64_t sub_1000096F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v6 = v2 - 1;
  *(unsigned char *)(a1 + v6) = *(unsigned char *)(a2 + v6);
  return (*(uint64_t (**)(void))(v4 + 8 * ((v5 + v3 - 643) ^ (2 * (v6 != 0)))))();
}

uint64_t sub_10000971C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((v2 == 0x50417EF54FC55D4FLL) ^ (v0 ^ (v3 + 28))) & 1)
                                * ((v0 - 956) ^ 0x2F)) ^ v0)))();
}

uint64_t sub_100009768@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((a1 + 1244690586) | 0x35018005) - 2133981210)
                                * (*(void *)(v2 - 0x50417EF54FC55D4FLL) == 0)) ^ a1)))();
}

uint64_t sub_1000097C4()
{
  void *v2 = 0;
  *(_DWORD *)(v4 - 0x50417EF54FC55D47) = 917342576;
  *(_DWORD *)(v4 - 0x50417EF54FC55D43) = 437737774;
  uint64_t v5 = (*(uint64_t (**)(void *))(v3 + 8 * (v0 + v1)))(v2);
  return sub_10000982C(v5);
}

uint64_t sub_10000982C()
{
  uint64_t v6 = (*(uint64_t (**)(void, void, void))(v2 + 8 * (v0 ^ (v4 - 2286))))(*(unsigned int *)*(&off_100232F90 + (v0 ^ (v4 + 18))), *(void *)(v5 - 128), *(unsigned int *)(v5 - 112));
  BOOL v7 = *(uint64_t (**)(uint64_t))(v2 + 8 * ((417 * (v3 == 0)) ^ (v0 - 2133980316)));
  *(void *)(v5 - 200) = v1;
  return v7(v6);
}

uint64_t sub_10000989C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(v4 - 200) == 0x50417EF54FC55D4FLL) * ((v0 - v3 + 2195) ^ 0x97C)) ^ (v2 + v0 - 1993))))();
}

uint64_t sub_1000098EC()
{
  uint64_t v4 = *(void *)(v3 - 200);
  int v5 = *(_DWORD *)(v4 - 0x50417EF54FC55D47);
  LODWORD(v4) = *(_DWORD *)(v4 - 0x50417EF54FC55D43) + 68792889;
  BOOL v6 = v4 < 0x1E310B63;
  BOOL v7 = v4 > v5 - 410811917;
  if (v6 != v5 - 410811917 < ((v2 + v0 - 2195) ^ 0x6100F264u)) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((67 * (((v0 ^ (v2 - 1)) ^ v7) & 1)) ^ v0)))();
}

uint64_t sub_1000099A4@<X0>(int a1@<W8>)
{
  BOOL v6 = (void *)(*(void *)(v5 - 200) - 0x50417EF54FC55D4FLL);
  int v7 = (*(unsigned __int8 *)(*v6 + (a1 - 437737774)) << 24) | (*(unsigned __int8 *)(*v6
                                                                                                + (a1 - 437737773)) << 16) | (*(unsigned __int8 *)(*v6 + (a1 - 437737772)) << 8);
  int v8 = *(unsigned __int8 *)(*v6 + (a1 - 437737771));
  *uint64_t v1 = a1 + 4;
  if (!(v7 | v8)) {
    return (*(uint64_t (**)(void))(v2 + 8 * ((53 * (*(void *)(v5 - 200) == 0x50417EF54FC55D4FLL)) ^ (v3 + v4 + 20))))();
  }
  if ((v7 | v8) == 0xFFFF4FFB) {
    return (*(uint64_t (**)(void))(v2
  }
                                + 8
                                * (((*((void *)*(&off_100232F90 + (v4 ^ (v4 + 10))) + 1) == 0)
                                  * ((v3 + v4 - 374) ^ 0x725)) ^ (v3 + v4 - 771))))();
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((111 * ((v4 - 7) ^ 0x7F31F907)) ^ 0x360)
                                * (*(void *)(v5 - 200) == 0x50417EF54FC55D4FLL)) ^ (v3 + 2133980234))))();
}

uint64_t sub_100009E1C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((*v1 == 0) ^ (a1 ^ (v4 + 7))) & 1)
                                * (v3 + ((a1 + 907035900) | 0x4921B102) - 2232)) ^ a1)))();
}

void sub_100009E6C()
{
  (*(void (**)(void))(v4 + 8 * (v2 + v5)))();
  *uint64_t v1 = 0;
  _DWORD *v3 = 917342576;
  *int v0 = 437737774;
  (*(void (**)(void *))(v4 + 8 * (v2 + v5)))(v1);
  JUMPOUT(0x100009EB4);
}

uint64_t sub_100009EB8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((v3 + v1 - 1833) ^ (v0 == 0))))();
}

uint64_t sub_100009ED8()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((((v1 - v4 + 1445046535) | 0x29105000) ^ 0xFFFFFED2) + v1 - v4 + 1631 - v3 + 608)
                                     * (*v0 == 0)) ^ (v1 - v4 + 1631))))();
}

void sub_100009F2C()
{
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v0 + 8) = 1122647118;
  *(_DWORD *)(v0 + 12) = 0;
  JUMPOUT(0x100009F60);
}

uint64_t sub_10000A060(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v3();
}

void sub_10000A0B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017EB2C();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  uint64_t v8 = +[NSMutableURLRequest ak_anisetteHeadersWithData:v5];
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_10000A170(uint64_t a1)
{
  uint64_t v2 = _AKTrafficLogSubsystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10017EF54();
  }

  return [*(id *)(a1 + 40) _processPendingRequests];
}

void sub_10000A620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_10000AA88(uint64_t a1)
{
  __asm { BRAA            X9, X17 }
}

uint64_t sub_10000AAC4@<X0>(uint64_t a1@<X8>)
{
  return 0;
}

void sub_10000AAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v8 = v5 || a4 == 0 || a5 == 0;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10000AB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_DWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_DWORD *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  *a30 = 0;
  *a29 = 0;
  *a31 = 0;
  *a24 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, void *, void *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, void *, _DWORD *, void *, void *, void *, uint64_t, uint64_t))(v34 + 8 * ((59 * (a1 == 0)) ^ 0x2D1)))(a1, a2, a3, a4, 992817389, 3302152146, a7, a8, a9, a10, "com.apple.adid", &unk_100274528, &unk_10027452C, &unk_1002744D4, a15, a16, a17, a18, a19,
           a20,
           a21,
           &unk_100274530,
           a23,
           a24,
           a25,
           a1,
           a27,
           &unk_10027452C,
           a29,
           a30,
           a31,
           &unk_1002744D8,
           a33,
           a34);
}

uint64_t sub_10000AC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((38 * (v5 == (((v6 + 452984265) | 0x202D3005) ^ a5))) ^ v6)))();
}

uint64_t sub_10000ACBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v7 = v5 + 76;
  int v8 = v7 ^ (a5 + 665);
  BOOL v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8 * (v7 ^ 0xA60)))(24, 4101018099) == 0;
  return (*(uint64_t (**)(void))(v6 + 8 * ((v9 * (v8 - 992815150 + 134 * (v7 ^ 0x36E) - 2677)) ^ v7)))();
}

uint64_t sub_10000AD2C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1337481487;
  *(void *)(a1 + 12) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 + 1645)))(4096, 1358311088);
  *(void *)a1 = v4;
  return (*(uint64_t (**)(void))(v2 + 8 * (((v4 == 0) * ((v1 ^ 0x39B) - 200)) ^ v1)))();
}

uint64_t sub_10000AD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(v4 + 8) = v7 + 4096;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                         + 8
                                                                                         * (((((14
                                                                                              * ((v5 + 1727) ^ 0x7D5)) ^ 0x3F6)
                                                                                            - 783)
                                                                                           * (v4 == 0)) | (v5 + 1727))))(a1, a2, a3, a4, 992817389, 3302152146);
}

uint64_t sub_10000AE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  unsigned int v49 = *(_DWORD *)(v47 + 12) - 130544155;
  unsigned int v50 = *(_DWORD *)(v47 + 8) - 1468025646;
  BOOL v51 = v49 < 0xF8380DE1;
  BOOL v52 = v49 > v50;
  if (v51 != v50 < 0xF8380DE1) {
    unsigned __int8 v53 = v51;
  }
  else {
    unsigned __int8 v53 = v52;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8 * (((((5 * (v46 ^ 0x3D)) ^ v53) & 1) * (55 * (v46 ^ 0x31C) - 162)) ^ v46)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46);
}

void sub_10000AE94(int a1@<W8>)
{
  int v5 = (v2 - 81) | 0x86;
  uint64_t v6 = *(void *)(v3 - 0x53F82AF96D6B682ELL);
  unsigned int v7 = ((2 * a1) & 0x6FBFFBDE) + (a1 ^ 0x37DFFDEF);
  *(unsigned char *)(v6 + v7 + (v5 ^ 0xC82002FF)) = 0;
  v7 -= 937426414;
  *(unsigned char *)(v6 + v7) = 0;
  *(unsigned char *)(v6 + v7 + 1) = 0;
  *(unsigned char *)(v6 + v7 + 2) = 1;
  *v1 += 4;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_10000C694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 8 * ((45 * (a39 != 0x53F82AF96D6B682ELL)) ^ v49)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49);
}

uint64_t sub_10000C6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  unsigned int v53 = (v50 + 1211070133) & 0xB7D087FE;
  unsigned int v54 = *(_DWORD *)(v51 - 0x53F82AF96D6B6822) - 1322609147;
  unsigned int v55 = *(_DWORD *)(v51 - 0x53F82AF96D6B6826) + 1634876658;
  BOOL v56 = v54 < (((v53 ^ 0x7F8) - 1322611214) ^ (v53 + 91));
  BOOL v57 = v54 > v55;
  if (v56 != v55 < 0xB12A9601) {
    BOOL v58 = v56;
  }
  else {
    BOOL v58 = v57;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 8 * (int)((41 * v58) ^ v53)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50);
}

uint64_t sub_10000C790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  LODWORD(a43) = v51;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8 * (int)((((v52 - 850) ^ (a5 - 181) ^ (a5 + 17)) * (v53 == 0x53F82AF96D6B682ELL)) ^ v52)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51);
}

uint64_t sub_10000C7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v9 = ((2 * (a6 + v7 + 1620003779 + 2 * v6 - 1696)) & 0xFFF8B73C)
     + ((a6 + v7 + 1620003779 + 2 * v6 - 1696) ^ 0x7FFC5B9F)
     + 784619079;
  BOOL v10 = v9 < 0xAEC0B1E6;
  BOOL v11 = v9 > v6 + 1594382555;
  if ((v6 + 1594382555) < 0xAEC0B1E6 != v10) {
    BOOL v12 = v10;
  }
  else {
    BOOL v12 = v11;
  }
  return (*(uint64_t (**)(uint64_t))(v8 + 8 * ((28 * !v12) ^ (a6 + v7 - 981))))(784619079);
}

uint64_t sub_10000C88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  LODWORD(a43) = v52;
  uint64_t v62 = (*(uint64_t (**)(void, uint64_t))(v54 + 8 * (v55 + 619)))(v53 + ((v55 + 1719611453) & 0x9980C9F7) + ((v55 - 1632) | 0x22) - 2147245270, 1120292948);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8 * ((v62 == 0) ^ v55)))(v62, v56, v57, v58, 992817389, 3302152146, v59, v60, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52);
}

void sub_10000C91C()
{
}

uint64_t sub_10000C960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,_DWORD *a59,uint64_t a60)
{
  uint64_t v61 = (*(uint64_t (**)(void))(v60 + 8 * (a5 + a6)))(*(void *)(a57 - 0x53F82AF96D6B682ELL));
  *(void *)(a57 - 0x53F82AF96D6B682ELL) = a60;
  *a59 = a43;
  return sub_10000C9CC(v61);
}

uint64_t sub_10000C9CC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v5 = *(void *)(v2 - 0x53F82AF96D6B682ELL);
  unsigned int v6 = ((v1 << (((v3 - 55) & 0xD7) + 44)) & 0x7FAFFDFE) + (v1 ^ 0x3FD7FEFF) - 1071120127;
  *(unsigned char *)(v5 + v6 + 1) = -32;
  *(unsigned char *)(v5 + v6 + 2) = -76;
  *(unsigned char *)(v5 + v6) = -49;
  *(unsigned char *)(v5 + v6 + 3) = 106;
  *a1 += 4;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)((((((v3 + 1679218889) & 0x9BE923D7 ^ 0x786) & 1) == 0)
                                     * (13 * ((v3 + 1679218889) & 0x9BE923D7 ^ 0xB2) - 1280)) ^ (v3 + 1679218889) & 0x9BE923D7)))();
}

uint64_t sub_10000CAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8 * (((v54 & ~((17 * (v53 ^ 0x75C)) ^ (a39 == 0x53F82AF96D6B682ELL))) * ((v53 ^ 0x11E) - 1550)) ^ v53)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53);
}

uint64_t sub_10000CB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  unsigned int v57 = *(_DWORD *)(v55 - 0x53F82AF96D6B6822) + 58686617;
  unsigned int v58 = ((v54 + 1014413480) & 0xC389497F) - 1278797038 + *(_DWORD *)(v55 - 0x53F82AF96D6B6826);
  BOOL v59 = v57 < ((v54 + 866148595) & 0xCC5F9AFF) + 58686038;
  BOOL v60 = v57 > v58;
  if (v59 != v58 < 0x37F7C95) {
    BOOL v61 = v59;
  }
  else {
    BOOL v61 = v60;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 8 * ((50 * v61) | v54)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54);
}

uint64_t sub_10000CBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  HIDWORD(a48) = v55;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 8 * (int)(((((v57 == 0x53F82AF96D6B682ELL) ^ (v56 - 1)) & 1) * (a6 + (v56 ^ (a5 + 1964)) - 2002)) ^ v56)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55);
}

uint64_t sub_10000CC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v9 = ((2 * (2 * v6 + 1620004322)) & 0xFF73B31C) + ((2 * v6 + 1620004322) ^ 0xFFB9D98F) + 350686845;
  BOOL v10 = v9 < 0x14A0E80C;
  BOOL v11 = v9 > v6 - 991391999;
  if ((v6 - 991391999) < 0x14A0E80C != v10) {
    BOOL v12 = v10;
  }
  else {
    BOOL v12 = v11;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * ((2982 * v12) ^ (a6 + v7 - 1299))))();
}

uint64_t sub_10000CCE0@<X0>(int a1@<W8>)
{
  uint64_t v5 = *(void *)(v2 - 0x53F82AF96D6B682ELL);
  unsigned int v6 = ((2 * a1) & 0xD7BE7BFE) + (a1 ^ 0x6BDF3DFF) - 1809792749;
  *(unsigned char *)(v5 + v6 + v3 - 337) = 0;
  *(unsigned char *)(v5 + v6 + 239) = 0;
  *(unsigned char *)(v5 + v6 + 240) = 0;
  *(unsigned char *)(v5 + v6 + 241) = 1;
  *v1 += 4;
  return (*(uint64_t (**)(void))(v4 + 8 * ((((233 * ((v3 - 337) ^ 0xEC)) ^ 0x5D) + ((v3 - 517) | 0x501)) ^ (v3 - 337))))();
}

uint64_t sub_10000CED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 8 * (((a39 == 0x53F82AF96D6B682ELL) * (v57 ^ 0x59D ^ v57 ^ 0x13C ^ 0x491)) ^ v57)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

uint64_t sub_10000CF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  unsigned int v61 = (((v58 - 604) | 0x608) ^ 0x16946541) + *(_DWORD *)(v59 - 0x53F82AF96D6B6822);
  unsigned int v62 = *(_DWORD *)(v59 - 0x53F82AF96D6B6826) - 958658141;
  BOOL v63 = v61 < v58 + 378822243;
  BOOL v64 = v61 > v62;
  if (v63 != v62 < 0x169462B2) {
    BOOL v65 = v63;
  }
  else {
    BOOL v65 = v64;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 8 * ((753 * v65) ^ v58)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_10000CFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  LODWORD(a44) = v59;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8 * ((4085 * (((v61 == 0x53F82AF96D6B682ELL) ^ (v60 + 4)) & 1)) ^ v60)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59);
}

uint64_t sub_10000D028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unsigned int v9 = ((2 * (2 * v6 + 1620004322)) & 0x9F79FE9C)
     + ((2 * v6 + 1620004322) ^ 0x4FBCFF4F)
     + (((v7 & 0xFF3DBDED) - a5 + 1930) ^ 0x737EEADB);
  BOOL v10 = v9 < 0xC33BECA0;
  BOOL v11 = v9 > v6 + 1938002841;
  if ((v6 + 1938002841) < 0xC33BECA0 != v10) {
    BOOL v12 = v10;
  }
  else {
    BOOL v12 = v11;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * (int)((2057 * v12) ^ (a6 + (v7 & 0xFF3DBDED) - 2075))))();
}

uint64_t sub_10000D0DC@<X0>(_DWORD *a1@<X8>)
{
  int v6 = v3 ^ 0x764;
  unint64_t v7 = v5 - ((2 * v5) & 0xF99431D3CA63CC58) + 0x7CCA18E9E531E62CLL;
  uint64_t v8 = (unsigned char *)((((unint64_t)v1 << (v6 + 19)) & 0x1EFFD5FF2)
               + (v1 ^ 0x23FE2B3FF7FEAFF9)
               + *(void *)(v2 - 0x53F82AF96D6B682ELL)
               - 0x23FE2B3FF7FEAFF9);
  *uint64_t v8 = HIBYTE(v7) ^ 0x7C;
  v8[1] = BYTE6(v7) ^ 0xCA;
  v8[2] = BYTE5(v7) ^ 0x18;
  v8[3] = BYTE4(v7) ^ 0xE9;
  void v8[4] = ((v5 - ((2 * v5) & 0xCA63CC58) - 449714644) >> 24) ^ 0xE5;
  v8[5] = ((v5 - ((2 * v5) & 0xCA63CC58) - 449714644) >> 16) ^ 0x31;
  v8[6] = ((unsigned __int16)(v5 - ((2 * v5) & 0xCC58) - 6612) >> 8) ^ 0xE6;
  v8[7] = (v5 - ((2 * v5) & 0x58) + 44) ^ 0x2C;
  *a1 += 8;
  return (*(uint64_t (**)(void))(v4 + 8 * (int)((v6 + 1299785425) & 0xB286DD7B ^ 0x9E ^ v6)))();
}

uint64_t sub_10000D388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v40 + 8 * (int)(((a39 == 0x53F82AF96D6B682ELL) * ((v39 + 2072) ^ 0x3B2D39EB ^ (a5 + 1780) ^ (5 * ((v39 + 2072) ^ 0x861)))) ^ (v39 + 2072))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           0,
           a39);
}

uint64_t sub_10000D408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  int v64 = (v63 - 635) ^ (a5 + 888);
  (*(void (**)(void))(v62 + 8 * (v63 + 542)))();
  (*(void (**)(void))(v62 + 8 * (v63 ^ 0xFEA)))();
  uint64_t v71 = (*(uint64_t (**)(uint64_t, void))(v62 + 8 * (v63 ^ 0xFFC)))(a11, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8 * (((v71 != 0) * (v64 - 992815150 + ((v63 - 635) | 0x30) - 3430)) ^ v63)))(v71, v65, v66, v67, 992817389, 3302152146, v68, v69, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_10000D4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned __int8 v65 = v63 ^ (a5 + 104);
  uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v64 + 8 * (v63 ^ 0xDBC)))(a11, a1, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8 * ((((v65 ^ (v72 == 0)) & 1) * ((17 * (v63 ^ 0x4A5)) ^ 0x188)) ^ v63)))(v72, v66, v67, v68, 992817389, 3302152146, v69, v70, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

#error "10000D5F8: call analysis failed (funcsize=42)"

uint64_t sub_10000D5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = v8 - 1727;
  int v11 = 181 * ((v8 - 68324306) & 0x3F3FB3FF ^ (v5 - 3));
  BOOL v12 = v7 == *(void *)(v9 + 8 * (v10 - 493)) - 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                         + 8
                                                                                         * (((4
                                                                                            * ((v12 ^ v11) & 1)) & 0xF7 | (8 * ((v12 ^ v11) & 1))) ^ v10)))(a1, a2, a3, a4, a5, 3302152146);
}

uint64_t sub_10000D664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v31 = a6 + ((v30 + 1073689354) & 0xFB2DF8EF);
  uint64_t v32 = v27;
  (*(void (**)(uint64_t, uint64_t))(v29 + 8 * (v30 + 1081)))(a27, v28);
  BOOL v33 = (*(uint64_t (**)(void))(v29 + 8 * (v30 + 1055)))() == v32;
  return (*(uint64_t (**)(void))(v29 + 8 * ((v33 * (v31 - 1691)) ^ v30)))();
}

uint64_t sub_10000D6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (((a6 + ((v9 + 36444165) | 0x39011029) + 329) * (v8 == v7)) ^ (v9 - 1715))))();
}

uint64_t sub_10000D71C@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int v24 = a2 + 743;
  int v25 = ((a2 + 743) ^ 0x4F1) - a1 + 2237;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8 * ((a2 + 743) ^ 0xDDF)))(a21, v21);
  BOOL v26 = (*(uint64_t (**)(void))(v23 + 8 * (v24 + 1055)))() == v22;
  return (*(uint64_t (**)(void))(v23 + 8 * ((v26 * (v25 ^ 0x3B2D3E45 ^ (262 * (v24 ^ 0x4F1)))) ^ v24)))();
}

uint64_t sub_10000D7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((a6 + ((v9 + 957152885) | 0x220306C) - 2117) ^ (v9 - 423651853) & 0x19406CF3)
                                * (v8 == v7)) ^ v9)))();
}

uint64_t sub_10000D7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  (*(void (**)(uint64_t, uint64_t))(v29 + 8 * (v30 + 1081)))(a27, v27);
  BOOL v31 = (*(uint64_t (**)(void))(v29 + 8 * (v30 ^ 0xDE1u)))() == v28;
  return (*(uint64_t (**)(void))(v29 + 8 * ((v31 * ((v30 - 743) ^ 0x3EC)) ^ v30)))();
}

uint64_t sub_10000D874()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((((v3 + 992816865) ^ 0x3B2D33DB ^ (7 * (v3 ^ 0x2B9))) * (v2 == v1)) ^ v3)))();
}

uint64_t sub_10000D8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v32 = v31 ^ (v27 + 817);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8 * (v31 + 1081)))(a27, v28);
  BOOL v33 = (*(uint64_t (**)(void))(v30 + 8 * (v31 + 1055)))() == v29;
  return (*(uint64_t (**)(void))(v30 + 8 * ((v33 * (v32 ^ 0x3B2D3C34)) ^ v31)))();
}

uint64_t sub_10000D92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return sub_10000E280(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

void sub_10000D938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37)
{
  unint64_t v38 = STACK[0x208];
  (*(void (**)(void))(v37 + 8 * (a5 ^ (a5 + 1893))))(*(void *)(STACK[0x208]
                                                                                            - 0xE22A8927A3C9258));
  *(void *)(v38 - 0xE22A8927A3C9258) = STACK[0x218];
  *(_DWORD *)STACK[0x210] = a37;
  JUMPOUT(0x10000F088);
}

uint64_t sub_10000D9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(_DWORD *)(a47 - 0xE22A8927A3C9250) = (a38 ^ 0x7FDE7DAB) - 268964865 + ((2 * a38) & 0xFFBCFB56);
  *(_DWORD *)(a47 - 0xE22A8927A3C924CLL) = 1241410955;
  return sub_10000E280(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a65);
}

void sub_10000DA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,int a41)
{
  unint64_t v42 = STACK[0x220];
  (*(void (**)(void))(v41 + 8 * (a5 ^ (a5 + 1893))))(*(void *)(STACK[0x220]
                                                                                            - 0xE22A8927A3C9258));
  *(void *)(v42 - 0xE22A8927A3C9258) = STACK[0x230];
  *(_DWORD *)STACK[0x228] = a41;
  LODWORD(STACK[0x238]) = 0;
  JUMPOUT(0x10000B7A4);
}

uint64_t sub_10000DAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,unsigned int a47)
{
  *(_DWORD *)(a45 - 0xE22A8927A3C9250) = (a47 ^ 0x6FFEF9FE) - 2658388 + ((a6 + a5 - 537007299) & (2 * a47));
  *(_DWORD *)(a45 - 0xE22A8927A3C924CLL) = 1241410955;
  return sub_10000EA3C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47);
}

uint64_t sub_10000DB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v39 + 8 * (v38 - 992815063)))(v40, v41, &a38);
  STACK[0x200] = v42;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 8 * (((v42 != 0) * (v38 - 992813338)) ^ (v38 - 992815352))))(v42, v43, v44, v45, v46, 3302152146, v47, v48, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_10000DB50@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)((((v1 - 2050267004) ^ 0x85CB68A7 ^ (v1 - 2050267004) & 0x7A349774 ^ 7) * (a1 == 0)) ^ v1)))();
}

void sub_10000DB98(uint64_t a1@<X8>, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  (*(void (**)(uint64_t))(v27 + 8 * (v25 + 1347)))(a1);
  *BOOL v26 = 0;
  *a3 = 0;
  *(_DWORD *)(a25 + 40 * a18 + 36) = 0;
  JUMPOUT(0x10000DBE8);
}

uint64_t sub_10000DC18()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((((v2 == 0xE22A8927A3C9258) ^ (v0 + 88)) & 1)
                                     * ((v0 + 1563049628) & 0xA2D5BFFF ^ 0x50F)) ^ v0)))();
}

uint64_t sub_10000DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)(((a6 + ((a5 + ((v6 + 1668856151) & 0x9C8746BD) + 12583246) & 0xFF3FF7FD) - 2123)
                                     * (*(void *)(v8 - 0xE22A8927A3C9258) == 0)) ^ (v6 + 1668856151) & 0x9C8746BD)))();
}

uint64_t sub_10000DCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  *uint64_t v39 = 0;
  *(_DWORD *)(v42 - 0xE22A8927A3C9250) = 1876322730;
  *(_DWORD *)(v42 - 0xE22A8927A3C924CLL) = 1241410955;
  uint64_t v43 = (*(uint64_t (**)(void *))(v41 + 8 * (v40 + a6)))(v39);
  return (*(uint64_t (**)(uint64_t))(v41
                                            + 8
                                            * (((((v40 - 50) & 0x7F ^ (a39 == 0x53F82AF96D6B682ELL) ^ 0xEC) & 1)
                                              * (((v40 - 1036569394) & 0x29B9F7F) - 1193)) ^ (v40 - 1036569394) & 0x29B9F7F)))(v43);
}

uint64_t sub_10000DDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((*(void *)(v6 - 0x53F82AF96D6B682ELL) == 0) * ((v7 - 70 - a6 + 970) ^ (a5 - 7))) ^ (v7 - 70))))();
}

void sub_10000DE10()
{
  *uint64_t v1 = 0;
  *(_DWORD *)(v0 - 0x53F82AF96D6B6826) = 1337481487;
  *(_DWORD *)(v0 - 0x53F82AF96D6B6822) = 0;
  JUMPOUT(0x10000DE6CLL);
}

uint64_t sub_10000DEC0()
{
  int v4 = 171 * (v0 & 0xC35A7B7 ^ 0x303);
  uint64_t v5 = (*(uint64_t (**)(void))(v2 + 8 * ((v0 & 0xC35A7B7u) + 1465)))();
  void *v3 = 0;
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (int)((((v4 - 2050267004) ^ 0x85CB68A7 ^ (v4 - 2050267004) & 0x7A349774 ^ 7)
                                                   * (*v1 == 0)) ^ v4)))(v5);
}

void sub_10000DF3C()
{
}

uint64_t sub_10000DFBC()
{
  BOOL v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * ((v0 + 2029) ^ 0xEE6)))(24, 4101018099) == 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v3 * (((v2 + v0) ^ 0x3B2D3B26) + ((v0 + 2029) ^ 0x3F8))) ^ (v0 + 2029))))();
}

uint64_t sub_10000E02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1876322730;
  *(void *)(a1 + 12) = 1241410955;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8 * (v15 ^ 0xD1E)))(4096, 1358311088);
  *(void *)a1 = v17;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8 * (((v17 == 0) * (v15 - 696 + ((2 * v15) ^ 0xF3C) - 2110)) ^ v15)))(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_10000E0C4()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (int)(((((v3 + v2 + 5393845) & 0xFFADB0ED) - 992817348) * (v0 != 0)) ^ v2)))();
}

uint64_t sub_10000E108@<X0>(int a1@<W5>, int a2@<W8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (a2 - 349 + a1)))(v2);
  return sub_10000E280(v4);
}

uint64_t sub_10000E280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int v31 = a6 + v27;
  (*(void (**)(uint64_t))(v29 + 8 * (a6 + v27 + 70)))(v30);
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v29 + 8 * (v27 ^ 0x3B2D39E8)))(a27);
  return (*(uint64_t (**)(uint64_t))(v29 + 8 * ((27 * (v28 != 0)) | (v31 - 123))))(v32);
}

uint64_t sub_10000E2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  (*(void (**)(uint64_t))(v74 + 8 * v75))(v72);
  return (*(uint64_t (**)(void))(v74 + 8 * ((15 * (a72 != 0)) ^ (v73 - 1261))))();
}

uint64_t sub_10000E32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = (*(uint64_t (**)(void))(v7 + 8 * (a6 + v6 + 70)))();
  return (*(uint64_t (**)(uint64_t))(v7
                                            + 8
                                            * (((v8 == v6 - 992862393) * ((v6 - 992816798) ^ 0xF55)) ^ (v6 - 992815916))))(v9);
}

uint64_t sub_10000E38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47)
{
  unsigned int v50 = ((v48 + 992965294) & 0xFFFDBBEF) - a5 + 593;
  a34 = 0;
  a47 = 0;
  a45 = 0xE22A8927A3C9258;
  uint64_t v51 = (*(uint64_t (**)(void, void, void, uint64_t *, int *))(v47 + 8 * (v48 + 1751)))(**(unsigned int **)(v49 + 8 * (v48 - 583)), *(void *)(a39 - 0x53F82AF96D6B682ELL), *(unsigned int *)(a39 - 0x53F82AF96D6B6822), &a34, &a47);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * ((30 * ((v51 ^ 0x7F5DEF89) - 889193728 + ((2 * v51) & 0xFEBBDF12) != (v50 ^ 0x5A5DE8DD))) ^ v48)))(v51, v52, v53, v54, v55, v56, v57, v58, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t sub_10000E480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  BOOL v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v12 + 8 * (v11 ^ 0xB63)))(**(unsigned int **)(v15 + 8 * (v11 ^ 0x244)), a11, v13) == 0;
  return (*(uint64_t (**)(void))(v12 + 8 * ((v16 * (v14 + ((v11 + 941956527) | 0x30810ED) - 398)) ^ v11)))();
}

uint64_t sub_10000E4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47)
{
  int v53 = (*(uint64_t (**)(void, void, void, char *, int *))(v48 + 8 * (v47 ^ 0xB77)))(*v50, *v49, *v51, &a34, &a47);
  unsigned int v54 = (v53 ^ 0xEEDDEBCD) + 1535114940 + ((((v47 + 34340311) | 0x392130C5) ^ 0xE696E777) & (2 * v53));
  if (v54 == 1516104332) {
LABEL_6:
  }
    JUMPOUT(0x10000EA80);
  if (v54 != 1247668873)
  {
    int v57 = 2052531167 * (((v52 - 108) & 0xAC0229D1 | ~((v52 - 108) | 0xAC0229D1)) ^ 0x96776102);
    *(_DWORD *)(v52 - 104) = -1239432284 - v57;
    *(_DWORD *)(v52 - 100) = (v54 - ((2 * v54 + 725887726) & 0x25BEB83A) + 1216442772) ^ v57;
    (*(void (**)(uint64_t))(v48 + 18568))(v52 - 108);
    goto LABEL_6;
  }
  uint64_t v55 = *(uint64_t (**)(void))(v48
                            + 8
                            * ((110
                              * ((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 18520))(24, 4101018099) != 0)) ^ 0x1B2));
  return v55();
}

uint64_t sub_10000E928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(void))(v73 + 8 * ((15 * (a72 != 0)) ^ (v72 - 1261))))();
}

uint64_t sub_10000E968()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((v1 - 80777191) & 0x3FFDBEED ^ (v1 + 992816921)) * (v0 != 0)) ^ v1)))();
}

uint64_t sub_10000E9B0@<X0>(int a1@<W5>, int a2@<W8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (a2 + 1753 + a1)))(v2);
  return sub_10000EA3C(v4);
}

uint64_t sub_10000EA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,unsigned int a47)
{
  int v51 = v47 - a6 + 1682;
  uint64_t v52 = (*(uint64_t (**)(void, uint64_t, void))(v48 + 8 * (v47 ^ 0xB33)))(**(unsigned int **)(v50 + 8 * (v47 ^ 0x233)), a34, a47);
  return (*(uint64_t (**)(uint64_t))(v48
                                            + 8
                                            * (((v49 == 0)
                                              * (((v51 - 2130254574) & 0x43CBEAEE ^ 0x203)
                                               + ((v51 - 2130254574) & 0x43CBEAEE ^ 0x5D5)
                                               - 475)) ^ (v51 - 2130254574) & 0x43CBEAEE)))(v52);
}

uint64_t sub_10000EAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34
                                                                                                  + 8 * (((a33 == 0xE22A8927A3C9258) * ((13 * (v33 ^ 0x27A)) ^ (v33 + 854))) ^ v33)))(a1, a2, a3, a4, a5, a6, 3053556341);
}

uint64_t sub_10000EB48@<X0>(int a1@<W8>)
{
  unsigned int v3 = *(_DWORD *)(v2 - 0xE22A8927A3C924CLL) + 90537754;
  unsigned int v4 = *(_DWORD *)(v2 - 0xE22A8927A3C9250) - 544374025;
  BOOL v5 = v3 < ((a1 - 268) ^ 0x4F63EA3Eu);
  BOOL v6 = v3 > v4;
  if (v5 != v4 < 0x4F63ECA1) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v1 + 8 * ((!v6 * (a1 - 1956)) ^ a1)))();
}

uint64_t sub_10000EBE4@<X0>(int a1@<W6>, int a2@<W8>)
{
  uint64_t v6 = *(void *)(v5 - 0xE22A8927A3C9258);
  int v7 = (*(unsigned __int8 *)(v6 + (v3 + a1 + 1)) << (((a2 + 52) & 0xBF) + 113)) | (*(unsigned __int8 *)(v6 + (v3 + a1)) << (a2 + 109)) | (*(unsigned __int8 *)(v6 + (v3 + a1 + 2)) << 8) | *(unsigned __int8 *)(v6 + (v3 + a1 + 3));
  _DWORD *v2 = v3 + 4;
  return (*(uint64_t (**)(void))(v4 + 8 * ((1774 * (v7 == 0)) ^ (a2 - 1036))))();
}

uint64_t sub_10000EC78()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((((v0 + 230) ^ 0x7E8) + 818) ^ 0x68C) * (v2 == 0xE22A8927A3C9258)) ^ (v0 + 230))))();
}

uint64_t sub_10000ECC0()
{
  BOOL v4 = v0 - 1551494817 > (v1 + 2108560696);
  if ((v1 + 2108560696) < 0xED847EE2 != v0 - 1551494817 < ((v2 + 1063) ^ 0x10Bu) - 310085565) {
    BOOL v4 = v0 - 1551494817 < ((v2 + 1063) ^ 0x10Bu) - 310085565;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((242 * v4) ^ v2)))();
}

uint64_t sub_10000ED34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v33 = *(unsigned __int8 *)(v29 + (a7 + v28 + 6));
  *int v27 = v28 + 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8 * (v30 ^ (53 * (v32 != 0xE22A8927A3C9258)))))(53, v33, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10000EDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v12 = v10 + v9 + ((v8 + 897) ^ (a7 + 629));
  unsigned int v13 = v12 + 1862066372;
  unsigned int v14 = v7 - 14256479 + (v8 ^ 0x367);
  BOOL v15 = v12 > 0x91031F3B;
  BOOL v16 = v13 > v14;
  if (v14 < 0x6EFCE0C4 == v15) {
    BOOL v15 = v16;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((47 * !v15) ^ v8)))();
}

uint64_t sub_10000EE40(int a1)
{
  *int v1 = v2;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v4 == 0xE22A8927A3C9258) ^ (a1 - 80)) & 1)
                                * ((a1 + 1574) ^ 0x667)) ^ a1)))();
}

uint64_t sub_10000EE8C()
{
  BOOL v4 = v1 - 412460064 > (v0 - 1047371843);
  if ((v0 - 1047371843) < 0x3168C967 != v1 - 412460064 < ((v2 + 94) | 0x218u) + 828949192) {
    BOOL v4 = v1 - 412460064 < ((v2 + 94) | 0x218u) + 828949192;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((!v4 * (((v2 - 752) | 0x42) ^ 0x17E)) ^ v2)))();
}

uint64_t sub_10000EF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v39 = (*(unsigned __int8 *)(v34 + a7 + v35 + (v36 ^ 0x102u) - 121) << (((v36 - 111) | 0x12) - 6)) | (*(unsigned __int8 *)(v34 + (a7 + v35 + 1)) << 16) | (*(unsigned __int8 *)(v34 + (a7 + v35 + 2)) << 8) | *(unsigned __int8 *)(v34 + (a7 + v35 + 3));
  uint64_t v40 = (v35 + 4);
  *uint64_t v33 = v40;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8 * (v36 ^ (229 * (v38 != 0xE22A8927A3C9258)))))(v39, v40, 229, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33);
}

uint64_t sub_10000EFA4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v10 = a1 + a2 + a7;
  unsigned int v11 = v10 + 1495197972;
  unsigned int v12 = v7 - 381124815 + 3 * (v8 ^ 0x70D);
  BOOL v13 = v10 > 0xA6E116EB;
  int v14 = v13 ^ (v12 < 0x591EE914);
  BOOL v15 = v11 > v12;
  if (v14) {
    BOOL v15 = v13;
  }
  return (*(uint64_t (**)(void))(v9 + 8 * ((!v15 * ((v8 ^ 0x70D) + 26)) ^ v8)))();
}

void sub_10000F024(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  *uint64_t v23 = v24;
  LODWORD(STACK[0x23C]) = 0;
  *a23 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8 * (a1 + 352)))(v25, 925082483);
  JUMPOUT(0x10000F084);
}

uint64_t sub_10000F13C()
{
  LODWORD(STACK[0x23C]) = v0;
  return sub_10000DC18();
}

uint64_t sub_10000F14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v35 = (*(uint64_t (**)(void, uint64_t))(v34 + 8 * (v33 + 239)))(v32 - 2144798872 + 1103 * (v33 ^ 0x81Eu), 1120292948);
  STACK[0x230] = v35;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 8 * (((v35 == 0) * (v33 - 2013)) ^ v33)))(v35, v36, v37, v38, v39, 3302152146, v40, v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_10000F1B8()
{
  LODWORD(STACK[0x238]) = v2;
  return (*(uint64_t (**)(void))(v1 + 8 * (((((v3 ^ 0x959) + 102) ^ 0x216) * (v0 == 0)) ^ v3)))();
}

uint64_t sub_10000F1EC@<X0>(int a1@<W5>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8 * (int)(((*v2 == 0) * (((a2 - a1 + 1784) ^ 0xFFFFFFF6) + a2 + 992816934)) ^ a2)))();
}

uint64_t sub_10000F230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,unsigned int a47)
{
  *(void *)uint64_t v49 = 0;
  *(_DWORD *)(v49 + 8) = v52;
  *(_DWORD *)(v49 + 12) = v51;
  uint64_t v53 = (*(uint64_t (**)(uint64_t))(v50 + 8 * (v47 ^ (v48 + 1893))))(v49);
  return sub_10000EA3C(v53, v54, v55, v56, v57, -992815150, v58, v59, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47);
}

uint64_t sub_10000F2D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v30 = v28 + 133;
  uint64_t v31 = (*(uint64_t (**)(void, uint64_t))(v29 + 8 * (v28 + 432)))(((v28 - 1172) ^ 0x90089486) + a2, 1120292948);
  STACK[0x218] = v31;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8 * (((v31 == 0) * ((v30 ^ 0x7A9) - 56)) | v30)))(v31, v32, v33, v34, 992817389, 3302152146, v35, v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_10000F348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((a6 + (v8 ^ (a5 + 317)) + (v8 ^ 0x226) - 2449) * (v6 == 0)) ^ v8)))();
}

uint64_t sub_10000F380@<X0>(char a1@<W5>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((*v2 == 0) ^ (a2 - a1 - 34)) & 1)
                                * ((a2 - 8425460) & 0x3BADBFFF ^ 0x3B2D30E3)) | a2)))();
}

uint64_t sub_10000F3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  (*(void (**)(void))(v28 + 8 * (v27 + a6)))();
  *(void *)a23 = 0;
  *(_DWORD *)(a23 + 8) = a20;
  *(_DWORD *)(a23 + 12) = 1241410955;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v28 + 8 * (v27 ^ 0x3B2D3852)))(a23);
  return sub_10000E280(v29, v30, v31, v32, v33, -992815150, v34, v35, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

void sub_10000F770(uint64_t a1)
{
}

void sub_10000F778(uint64_t a1)
{
}

void sub_10000F780(uint64_t a1)
{
}

void sub_10000F788(uint64_t a1)
{
}

void sub_10000F790(uint64_t a1)
{
}

void sub_10000F798(uint64_t a1)
{
}

void sub_10000F7A0(uint64_t a1)
{
}

void sub_10000F7A8(uint64_t a1)
{
}

void sub_10000F7B0(uint64_t a1)
{
}

void sub_10000F7B8(uint64_t a1)
{
}

void sub_10000F7C0(uint64_t a1)
{
}

void sub_10000F7C8(uint64_t a1)
{
}

void sub_10000F7D0(uint64_t a1)
{
}

void sub_10000F7D8(uint64_t a1)
{
}

void sub_10000F7E0(uint64_t a1)
{
}

void sub_10000F7E8(uint64_t a1)
{
}

void sub_10000F7F0(uint64_t a1)
{
}

void sub_10000F7F8(uint64_t a1)
{
}

void sub_10000F800(uint64_t a1)
{
}

void sub_10000F808(uint64_t a1)
{
}

void sub_10000F810(uint64_t a1)
{
}

void sub_10000F818(uint64_t a1)
{
}

void sub_10000F820(uint64_t a1)
{
}

void sub_10000F828(uint64_t a1)
{
}

void sub_10000F830(uint64_t a1)
{
}

void sub_10000F838(uint64_t a1)
{
}

uint64_t sub_10000F840(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F850(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F860(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F870(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F880(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F890(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F8A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F8B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F8C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F8D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F8E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F8F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F900(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F910(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F920(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F930(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F940(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F950(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F960(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F970(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F980(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F990(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F9A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F9B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F9C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000F9D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id sub_10000F9E0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_activateAndExecuteRequest:", *(void *)(a1 + 40));
}

void sub_100010038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010054(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      uint64_t v9 = _AKLogFido();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10017A644();
      }

      (*((void (**)(void))a1[5] + 2))();
    }
    else
    {
      unsigned int v10 = [WeakRetained authorizationController];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000101B4;
      v11[3] = &unk_100226A08;
      id v12 = v8;
      id v13 = a1[4];
      id v14 = 0;
      id v15 = a1[5];
      [v10 performAuthenticationRequestWithContext:v5 completion:v11];
    }
  }
}

id sub_1000101B4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleGrandSlamFidoAuthorizationResponse:a2 context:*(void *)(a1 + 40) recoveryToken:0 error:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100010340(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10001035C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      uint64_t v9 = _AKLogFido();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10017A644();
      }

      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      unsigned int v10 = [WeakRetained authorizationController];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000104D0;
      v11[3] = &unk_100226A58;
      id v12 = v8;
      id v13 = a1[4];
      id v14 = a1[5];
      id v15 = 0;
      id v16 = a1[6];
      [v10 performAuthenticationRequestWithContext:v5 completion:v11];
    }
  }
}

id sub_1000104D0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleGrandSlamFidoAuthorizationResponse:a2 context:*(void *)(a1 + 40) recoveryToken:*(void *)(a1 + 48) error:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10001065C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if (v6)
  {
    uint64_t v7 = _AKLogFido();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017A79C();
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v10 = a1 + 40;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(v10 + 8);
    unsigned int v11 = [a2 serverProvidedData];
    (*(void (**)(uint64_t, uint64_t, void *, void))(v9 + 16))(v9, v8, v11, 0);
  }
}

void sub_100010830(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10001084C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100010900(id a1)
{
  qword_100272200 = objc_alloc_init(AKAuthorizationIconManager);

  _objc_release_x1();
}

void sub_100010CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010CF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = [WeakRetained _dataBlockForKey:*(void *)(a1 + 32)];
  if (v5)
  {
    id v6 = _os_activity_create((void *)&_mh_execute_header, "authkit/icon-fetching", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v6, &state);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100010E6C;
    v7[3] = &unk_100226B10;
    id v10 = v3;
    id v8 = WeakRetained;
    id v9 = *(id *)(a1 + 32);
    [v5 setCompletion:v7];

    os_activity_scope_leave(&state);
  }
  else
  {
    id v6 = +[NSError ak_errorWithCode:-7044];
    (*((void (**)(id, void, NSObject *))v3 + 2))(v3, 0, v6);
  }
}

void sub_100010E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

id sub_100010E6C(void *a1)
{
  (*(void (**)(void))(a1[6] + 16))();
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];

  return _[v2 _removeDataBlockForKey:v3];
}

void sub_100010FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100011120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_100011134(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)AKMediaServicesController);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001120C;
  v8[3] = &unk_100226B60;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v7 = v3;
  [v4 appIconForBundleID:v5 size:v6 completion:v8];
}

void sub_10001120C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3)
  {
    [v3 setScale:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = +[NSKeyedArchiver archivedDataWithRootObject:v6 requiringSecureCoding:1 error:0];
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_10001146C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];
}

id sub_10001154C(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 16);
  if (!v2)
  {
    uint64_t v3 = +[NSMutableDictionary dictionary];
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v2 = *(void **)(a1[4] + 16);
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];

  return [v2 setObject:v6 forKey:v7];
}

id sub_100011664(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_100011B00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  uint64_t v7 = +[NSArray ak_arrayWithJSONResponseData:a3];
  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) altDSID];
    [v8 _processFetchCompletionForAltDSID:v9 items:v7 fetchError:v6 completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10017A898();
    }

    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = +[NSError ak_errorWithCode:-7010];
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
  }
}

id sub_100012318(id a1, NSDictionary *a2)
{
  return [(NSDictionary *)a2 objectForKeyedSubscript:AKFollowUpPayloadIdentifierKey];
}

uint64_t sub_10001232C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 uniqueIdentifier];
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

id sub_100012374(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 uniqueIdentifier];
  id v4 = [v2 containsObject:v3];

  return v4;
}

uint64_t sub_1000123BC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 uniqueIdentifier];
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

void sub_10001268C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 uniqueIdentifier];

  if (v4)
  {
    uint64_t v5 = [v3 actions];
    if ([v5 count])
    {
      id v6 = [v3 informativeText];

      if (v6)
      {
        uint64_t v7 = *(void **)(a1 + 40);
LABEL_10:
        id v9 = [v3 uniqueIdentifier];
        [v7 setObject:v3 forKeyedSubscript:v9];

        goto LABEL_11;
      }
    }
    else
    {
    }
    uint64_t v7 = *(void **)(a1 + 32);
    goto LABEL_10;
  }
  id v8 = _AKLogSystem();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10017A9B4();
  }

LABEL_11:
}

void sub_100012768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 uniqueIdentifier];
  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
    if (v5
      && ([v3 notification], id v6 = objc_claimAutoreleasedReturnValue(), v6, v6))
    {
      uint64_t v7 = [v5 notification];

      if (v7)
      {
        id v8 = [v5 notification];
        id v9 = [v8 informativeText];
        id v10 = [v3 notification];
        [v10 setInformativeText:v9];

        uint64_t v11 = [v5 notification];
        id v12 = [v11 title];
        id v13 = [v3 notification];
        [v13 setTitle:v12];

        id v14 = [v5 notification];
        [v14 frequency];
        double v16 = v15;
        uint64_t v17 = [v3 notification];
        [v17 setFrequency:v16];

        uint64_t v18 = [v5 notification];
        uint64_t v19 = [v18 options];
        uint64_t v20 = [v3 notification];
        [v20 setOptions:v19];
      }
      else
      {
        [v3 setNotification:0];
      }
      int v24 = _AKLogSystem();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
        sub_10017AA68();
      }

      [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v4];
    }
    else
    {
      uint64_t v21 = [v3 notification];

      if (!v21)
      {
        uint64_t v22 = [*(id *)(a1 + 40) objectForKeyedSubscript:v4];
        if (v22)
        {
          if ([*(id *)(*(void *)(a1 + 48) + 8) IsFollowUpItemNotificationForced:v22])
          {
            uint64_t v23 = _AKLogSystem();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
              sub_10017A9E8();
            }
          }
          else
          {
            [v22 setNotification:0];
            uint64_t v23 = _AKLogSystem();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
              sub_10017AA28();
            }
          }
        }
      }
    }
  }
}

void sub_100013014(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [v8 userInfo];

  uint64_t v4 = v8;
  if (v3)
  {
    uint64_t v5 = [v8 userInfo];
    id v6 = [v5 objectForKeyedSubscript:@"txnid"];
    uint64_t v7 = v6;
    if (v6 && [v6 isEqualToString:*(void *)(a1 + 32)]) {
      [*(id *)(a1 + 40) addObject:v8];
    }

    uint64_t v4 = v8;
  }
}

void sub_1000131C4(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 userInfo];

  if (v3)
  {
    uint64_t v4 = [v7 userInfo];
    uint64_t v5 = [v4 objectForKeyedSubscript:@"cmd"];
    unsigned int v6 = [v5 unsignedIntValue];

    if (*(void *)(a1 + 40) == v6) {
      [*(id *)(a1 + 32) addObject:v7];
    }
  }
  else
  {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_1000133BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000133D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100013454(id a1)
{
  qword_100272210 = objc_opt_new();

  _objc_release_x1();
}

void sub_100013944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, char a20)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose((const void *)(v21 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_100013994(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
}

void sub_100013C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v20 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100013C98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
}

void sub_100014080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000140C0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_100014118(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10001442C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100014468(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_1000144C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_100014730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v19 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100014770(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
}

void sub_100015010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100015050(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *a3 = 1;
}

void sub_1000150A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000152F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v20 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100015334(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
}

void sub_1000155D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100015610(uint64_t a1, uint64_t a2)
{
  id v6 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v4 = +[AKSQLiteHelper stringFromColumn:1 inStatement:a2];
  if (v6)
  {
    id v5 = [objc_alloc((Class)AKPrivateEmail) initWithAddress:v6 forKey:v4];
    [*(id *)(a1 + 32) addObject:v5];
  }
}

void sub_1000156C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

uint64_t sub_100015F04()
{
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100272220;
  uint64_t v5 = qword_100272220;
  if (!qword_100272220)
  {
    long long v6 = *(_OWORD *)off_100226DF0;
    long long v7 = *(_OWORD *)&off_100226E00;
    v3[3] = _sl_dlopen();
    qword_100272220 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_100016014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001602C(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272220 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000160BC()
{
  uint64_t v0 = sub_100015F04();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_100016118()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272228;
  uint64_t v7 = qword_100272228;
  if (!qword_100272228)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000161FC;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000161FC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000161E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AKOwnerProxyClient *sub_1000161FC(uint64_t a1)
{
  sub_1000160BC();
  uint64_t result = (AKOwnerProxyClient *)objc_getClass("BSAuditToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272228 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10017ADDC();
    return [(AKOwnerProxyClient *)v3 initWithCredentialRequest:v5];
  }
  return result;
}

void sub_100016A14(id a1)
{
  id v3 = +[NSMutableSet setWithObjects:@"accountsd", @"backupd", @"aktool", @"askpermissiond", @"itunesstored", @"Preferences", @"StoreKitUIService", 0];
  [v3 addObject:@"appstored"];
  id v1 = [v3 copy];
  uint64_t v2 = (void *)qword_100272230;
  qword_100272230 = (uint64_t)v1;
}

void sub_100016B78(id a1)
{
  id v3 = +[NSMutableSet setWithObjects:@"aktool", @"askpermissiond", @"itunesstored", 0];
  [v3 addObject:@"appstored"];
  id v1 = [v3 copy];
  uint64_t v2 = (void *)qword_100272240;
  qword_100272240 = (uint64_t)v1;
}

void sub_100016CB4(id a1)
{
  qword_100272250 = +[NSSet setWithObjects:@"Carousel", 0];

  _objc_release_x1();
}

void sub_100016DBC(id a1)
{
  qword_100272260 = +[NSSet setWithObjects:@"com.apple.aktool", @"com.apple.internal.appleAccountSetupTool", 0];

  _objc_release_x1();
}

NSSecureCoding *__cdecl sub_100018568(id a1, NSString *a2, NSString *a3)
{
  SEL v4 = a2;
  id v5 = a3;
  id v6 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v5 options:0];

  if (v6)
  {
    id v12 = 0;
    uint64_t v7 = +[NSPropertyListSerialization propertyListWithData:v6 options:0 format:0 error:&v12];
    id v8 = v12;
    if (v8)
    {
      uint64_t v9 = _AKLogSystem();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10017B0AC();
      }
    }
    else
    {
      if ([v7 conformsToProtocol:&OBJC_PROTOCOL___NSSecureCoding])
      {
        id v10 = v7;
LABEL_13:

        goto LABEL_14;
      }
      uint64_t v9 = _AKLogSystem();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10017B114();
      }
    }

    id v10 = 0;
    goto LABEL_13;
  }
  id v8 = _AKLogSystem();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10017B0AC();
  }
  id v10 = 0;
LABEL_14:

  return (NSSecureCoding *)v10;
}

void sub_10001C254(id a1)
{
  qword_100272270 = (uint64_t)objc_alloc_init((Class)NSNumberFormatter);

  _objc_release_x1();
}

void sub_10001CF84(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10001CF9C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10001E07C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) replyContextWithPayload:*(void *)(a1 + 40)];
  id v7 = (id)v6;
  if (a2)
  {
    [*(id *)(a1 + 32) _processProximityDetection:a3 withReplyContext:v6 forPushPayload:*(void *)(a1 + 40)];
    uint64_t v6 = (uint64_t)v7;
  }
  [*(id *)(a1 + 32) _finishProcessingPushPayload:*(void *)(a1 + 40) withReplyContext:v6 completion:*(void *)(a1 + 48)];
}

void sub_10001EDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001EE10(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = WeakRetained;
  if (v8 && WeakRetained) {
    [WeakRetained processPushPayload:v8 completion:*(void *)(a1 + 32)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_10001F64C(uint64_t a1)
{
  [*(id *)(a1 + 32) _releaseAssertion];

  return +[NSXPCConnection endTransaction];
}

void sub_10001FC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_10001FCE8(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    id v5 = _AKSignpostLogSystem();
    uint64_t v6 = v5;
    os_signpost_id_t v7 = *(void *)(a1 + 40);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      int v9 = 67240192;
      LODWORD(v10) = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "PiggybackingDetectPresenceForAcceptController", " FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ", (uint8_t *)&v9, 8u);
    }

    id v8 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134218496;
      uint64_t v10 = *(void *)(a1 + 40);
      __int16 v11 = 2048;
      double v12 = (double)(unint64_t)Nanoseconds / 1000000000.0;
      __int16 v13 = 1026;
      int v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggybackingDetectPresenceForAcceptController  FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ", (uint8_t *)&v9, 0x1Cu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_10001FE68(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = _AKLogSystem();
  SEL v4 = v3;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = WeakRetained[9];
      int v6 = 138412546;
      os_signpost_id_t v7 = WeakRetained;
      __int16 v8 = 2112;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Proximity controller (%@) found a match", (uint8_t *)&v6, 0x16u);
    }

    [WeakRetained[10] setValue:&__kCFBooleanTrue];
    [WeakRetained[9] invalidate];
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_10017CB50(v4);
    }
  }
}

void sub_10001FF7C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained && ([WeakRetained[10] resolved] & 1) == 0)
  {
    SEL v4 = _AKLogSystem();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = v3[9];
      int v6 = 138412546;
      os_signpost_id_t v7 = v3;
      __int16 v8 = 2112;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Proximity controller (%@) has been invalidated and prox was not detected", (uint8_t *)&v6, 0x16u);
    }

    [v3[10] setValue:&__kCFBooleanFalse];
  }
}

uint64_t sub_100020238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100020408(void *a1)
{
  uint64_t v2 = a1 + 4;
  id v3 = [*(id *)(a1[4] + 80) value];
  unsigned int v4 = [v3 BOOLValue];

  id v5 = _AKLogSystem();
  int v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *v2;
      int v20 = 138412290;
      uint64_t v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Proximity has been detected", (uint8_t *)&v20, 0xCu);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_10017CB94((uint64_t)v2, v6, v8, v9, v10, v11, v12, v13);
  }

  [(id)a1[4] _stopProximityController];
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  double v15 = _AKSignpostLogSystem();
  double v16 = v15;
  os_signpost_id_t v17 = a1[6];
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    int v20 = 67240192;
    LODWORD(v21) = v4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, v17, "PiggybackingCheckPresenceForAcceptController", " FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ", (uint8_t *)&v20, 8u);
  }

  uint64_t v18 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 134218496;
    uint64_t v21 = a1[6];
    __int16 v22 = 2048;
    double v23 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    __int16 v24 = 1026;
    unsigned int v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggybackingCheckPresenceForAcceptController  FoundDevice=%{public,signpost.telemetry:number1,name=FoundDevice}d ", (uint8_t *)&v20, 0x1Cu);
  }

  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

void sub_1000206D8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1000208F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020C68(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = [v6 statusCode];
  uint64_t v9 = _AKLogSystem();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8 == (id)200)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "EDP request (urlKey=%@) succeeded! HTTP resposne=%@", (uint8_t *)&v16, 0x16u);
    }

    uint64_t v12 = *(void *)(a1 + 40);
    if (v12)
    {
      uint64_t v13 = *(void (**)(void))(v12 + 16);
LABEL_10:
      v13();
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = v14;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "EDP request (urlKey=%@) failed! HTTP resposne=%@", (uint8_t *)&v16, 0x16u);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      uint64_t v13 = *(void (**)(void))(v15 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1000210B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10017CE84(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_10017CEBC((uint64_t)v5, v7);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  if (v15) {
    (*(void (**)(uint64_t, uint64_t, id))(v15 + 16))(v15, a2, v5);
  }
}

uint64_t sub_10002121C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2 == 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "is EDP Healthy: %d", (uint8_t *)v6, 8u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

void sub_1000214B4(id a1)
{
  qword_100272280 = objc_alloc_init(AKAuthorizationStoreManager);

  _objc_release_x1();
}

id sub_1000217E8(void *a1, void *a2)
{
  return [a2 updateAuthorizationListWithMetadataInfo:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_1000218FC(void *a1, void *a2)
{
  return _[a2 updatePrimaryAppsWithAMSAppMetadata:a1[4] withAltDSID:a1[5] withCompletion:a1[6]];
}

id sub_100021A10(void *a1, void *a2)
{
  return [a2 storeAuthorization:a1[4] withAltDSID:a1[5] forClient:a1[6]];
}

id sub_100021B24(void *a1, void *a2)
{
  return [a2 fetchDeveloperTeamWithTeamID:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_100021C38(void *a1, void *a2)
{
  return [a2 fetchDeveloperTeamWithClientID:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_100021D4C(void *a1, void *a2)
{
  return [a2 performUnsafeVerificationWithUserID:a1[4] withAltDSID:a1[5] completion:a1[6]];
}

id sub_100021E64(uint64_t a1, void *a2)
{
  return [a2 revokeAuthorizationForApplicationWithClientID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

id sub_100021F78(uint64_t a1, void *a2)
{
  return _[a2 removeApplicationWithClientID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

id sub_10002205C(uint64_t a1, void *a2)
{
  return [a2 revokeAuthorizationForAllApplicationsWithAltDSID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

id sub_100022140(uint64_t a1, void *a2)
{
  return _[a2 fetchAllDeveloperTeamsAndApplicationsForAltDSID:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

id sub_100022224(uint64_t a1, void *a2)
{
  return _[a2 fetchAllPrimaryApplicationMetadataForAltDSID:*(void *)(a1 + 32) withCompletion:*(void *)(a1 + 40)];
}

void sub_100022360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100022378(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [a2 fetchAuthorizationListVersionWithAltDSID:*(void *)(a1 + 32)];

  return _objc_release_x1();
}

id sub_1000224A0(uint64_t a1, void *a2)
{
  return [a2 setListVersionToVersion:*(void *)(a1 + 32) withAltDSID:*(void *)(a1 + 40)];
}

id sub_100022568(uint64_t a1, void *a2)
{
  return [a2 clearDatabaseWithAltDSID:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
}

uint64_t sub_1000225E4()
{
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100272290;
  uint64_t v5 = qword_100272290;
  if (!qword_100272290)
  {
    long long v6 = *(_OWORD *)off_100227200;
    long long v7 = *(_OWORD *)&off_100227210;
    v3[3] = _sl_dlopen();
    qword_100272290 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1000226F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002270C(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272290 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10002279C()
{
  uint64_t v0 = sub_1000225E4();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_1000227F8()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272298;
  uint64_t v7 = qword_100272298;
  if (!qword_100272298)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000228DC;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000228DC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000228C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000228DC(uint64_t a1)
{
  sub_10002279C();
  Class result = objc_getClass("BYLicenseAgreement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272298 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10017CF78();
    return (Class)sub_100022934();
  }
  return result;
}

uint64_t sub_100022934()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002722A0;
  uint64_t v6 = qword_1002722A0;
  if (!qword_1002722A0)
  {
    id v1 = (void *)sub_10002279C();
    v4[3] = (uint64_t)dlsym(v1, "BYSetupAssistantNeedsToRun");
    qword_1002722A0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100022A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100022A24(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10002279C();
  Class result = dlsym(v2, "BYSetupAssistantNeedsToRun");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002722A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

AKPushTokenKeychainWrapper *sub_100022A74()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100022934();
  if (v0)
  {
    return (AKPushTokenKeychainWrapper *)v0();
  }
  else
  {
    sub_10017CFA0();
    return [(AKPushTokenKeychainWrapper *)v2 init];
  }
}

void sub_100023174(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v5];
    uint64_t v8 = [*(id *)(a1 + 32) client];
    uint64_t v9 = [v8 name];
    objc_msgSend(v7, "ak_addClientApp:", v9);

    uint64_t v10 = [*(id *)(a1 + 32) client];
    uint64_t v11 = [v10 bundleID];
    objc_msgSend(v7, "ak_addClientBundleIDHeader:", v11);

    uint64_t v12 = [*(id *)(a1 + 32) authKitBody];
    if (v12)
    {
      [v7 setHTTPMethod:@"POST"];
      if ([*(id *)(a1 + 32) requestBodyType] == (id)1)
      {
        objc_msgSend(v7, "ak_addJSONRequestHeader");
        objc_msgSend(v7, "ak_setJSONBodyWithParameters:", v12);
LABEL_14:
        uint64_t v17 = *(void **)(a1 + 32);
        id v31 = 0;
        unsigned __int8 v18 = [v17 signRequest:v7 error:&v31];
        id v19 = v31;
        int v20 = _AKLogSystem();
        uint64_t v21 = v20;
        if (v18)
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
            sub_10017D330();
          }

          __int16 v22 = _AKLogSystem();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
            sub_10017D28C(v7, v22);
          }

          if (v12)
          {
            double v23 = _AKLogSystem();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
              sub_10017D200(v12, v23);
            }
          }
          __int16 v24 = *(void **)(*(void *)(a1 + 32) + 72);
          if (v24)
          {
            if ([v24 deviceRegionRequired]) {
              objc_msgSend(v7, "ak_addWalrusDeviceRegionHeader");
            }
            if ([*(id *)(*(void *)(a1 + 32) + 72) isContextEligibleForPasscodeAuth]) {
              objc_msgSend(v7, "ak_addPasscodeAuthHeader");
            }
            unsigned int v25 = [*(id *)(*(void *)(a1 + 32) + 72) sourceAltDSID];

            if (v25)
            {
              uint64_t v26 = [*(id *)(*(void *)(a1 + 32) + 72) sourceAltDSID];
              objc_msgSend(v7, "ak_addHeaderForSourceAltDSID:", v26);
            }
            if ([*(id *)(*(void *)(a1 + 32) + 72) securityCode])
            {
              int v27 = _AKLogSystem();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
                sub_10017D1CC();
              }

              objc_msgSend(v7, "ak_addHeaderForSecurityCode:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "securityCode"));
            }
          }
          uint64_t v28 = *(void *)(a1 + 40);
          if (v28)
          {
            id v29 = [v7 copy];
            (*(void (**)(uint64_t, id, void))(v28 + 16))(v28, v29, 0);
          }
        }
        else
        {
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            sub_10017D39C();
          }

          uint64_t v30 = *(void *)(a1 + 40);
          if (v30) {
            (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v19);
          }
        }

        goto LABEL_41;
      }
      int v16 = [*(id *)(a1 + 32) serverCompatibleRequestBodyWithPayload:v12];
      objc_msgSend(v7, "ak_setBodyWithParameters:", v16);
    }
    else
    {
      uint64_t v15 = [*(id *)(a1 + 32) authKitBodyData];

      if (!v15)
      {
        [v7 setHTTPMethod:@"GET"];
        goto LABEL_14;
      }
      [v7 setHTTPMethod:@"POST"];
      int v16 = [*(id *)(a1 + 32) authKitBodyData];
      [v7 setHTTPBody:v16];
    }

    goto LABEL_14;
  }
  uint64_t v13 = _AKLogSystem();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_10017D13C(a1, v13);
  }

  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0, v6);
  }
LABEL_41:
}

void sub_10002460C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_100024BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100024C18(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    uint64_t v8 = _AKLogSystem();
    uint64_t v9 = v8;
    if (v6)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10017D7B8();
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Native recovery flow completed", buf, 2u);
    }

    uint64_t v12 = _AKLogSystem();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Native recovery flow: recoveredInfo %@", buf, 0xCu);
    }

    uint64_t v13 = (void *)WeakRetained[1];
    uint64_t v14 = [a1[4] authContext];
    uint64_t v15 = WeakRetained[2];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100024E78;
    v16[3] = &unk_100227278;
    id v17 = v5;
    id v18 = v6;
    id v19 = a1[5];
    id v20 = a1[4];
    uint64_t v21 = WeakRetained;
    id v22 = a1[6];
    [v13 dismissNativeRecoveryUIForContext:v14 client:v15 completion:v16];
  }
  else
  {
    id v10 = a1[6];
    uint64_t v11 = +[NSError ak_errorWithCode:-7001];
    (*((void (**)(id, void, void, void *))v10 + 2))(v10, 0, 0, v11);
  }
}

void sub_100024E78(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to process native recovery response", buf, 2u);
  }

  if (+[AKNativeAccountRecoveryController shouldSendServerResponseForRecoveredInfo:*(void *)(a1 + 32) withRecoveryError:*(void *)(a1 + 40)])
  {
    SEL v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "shouldSendServerResponseForRecoveredInfo is true", buf, 2u);
    }

    uint64_t v4 = +[AKNativeAccountRecoveryController requestForRecoveryCompletionWithContext:*(void *)(a1 + 48) recoveredInfo:*(void *)(a1 + 32) recoveryError:*(void *)(a1 + 40)];
    if (v4)
    {
      id v5 = [*(id *)(a1 + 56) initiatingServerResponse];
      id v6 = [*(id *)(a1 + 56) authContext];
      id v7 = +[AKDServerUIContext serverUIContextFromResponse:v5 authContext:v6 urlRequest:v4];

      uint64_t v8 = [*(id *)(a1 + 56) requestConfiguration];
      uint64_t v9 = [v8 resourceLoadDelegate];
      id v10 = [v7 requestConfiguration];
      [v10 setResourceLoadDelegate:v9];

      uint64_t v11 = _AKLogSystem();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = [v7 debugDescription];
        *(_DWORD *)buf = 138412290;
        double v23 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "responseContext: %@", buf, 0xCu);
      }
      uint64_t v13 = [[AKDServerUIController alloc] initWithLiaison:*(void *)(*(void *)(a1 + 64) + 8) client:*(void *)(*(void *)(a1 + 64) + 16) delegate:0];
      [(AKDServerUIController *)v13 showServerUIWithContext:v7 completion:*(void *)(a1 + 72)];
    }
    else
    {
      id v17 = _AKLogSystem();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_10017D820();
      }

      uint64_t v18 = *(void *)(a1 + 72);
      id v7 = +[NSError ak_errorWithCode:-7010];
      (*(void (**)(uint64_t, void, void, void *))(v18 + 16))(v18, 0, 0, v7);
    }
  }
  else
  {
    uint64_t v14 = *(void **)(*(void *)(a1 + 64) + 8);
    uint64_t v15 = [*(id *)(a1 + 56) authContext];
    uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 16);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000251C0;
    v19[3] = &unk_100227250;
    id v21 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 40);
    [v14 dismissServerProvidedUIForContext:v15 client:v16 completion:v19];

    uint64_t v4 = v21;
  }
}

void sub_1000251C0(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10017D854();
  }

  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = objc_msgSend(*(id *)(a1 + 32), "ac_secureCodingError");
  id v5 = +[NSError ak_errorWithCode:-7003 underlyingError:v4];
  (*(void (**)(uint64_t, void, void, void *))(v3 + 16))(v3, 0, 0, v5);
}

void sub_1000255E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (v7)
  {
    uint64_t v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10017D8FC();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v9 = [v6 statusCode];
    id v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = +[NSNumber numberWithInteger:v9];
      *(_DWORD *)buf = 138412290;
      id v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Renewal of recovery token came back with HTTP status code: %@", buf, 0xCu);
    }
    if (v9 == (id)200)
    {
      uint64_t v12 = [v6 allHeaderFields];
      uint64_t v13 = [v12 objectForKeyedSubscript:AKPETHeaderKey];

      if (v13)
      {
        uint64_t v19 = AKAuthenticationPasswordKey;
        id v20 = v13;
        uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      }
      else
      {
        uint64_t v14 = 0;
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      uint64_t v15 = _AKLogSystem();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = +[NSNumber numberWithInteger:v9];
        *(_DWORD *)buf = 138412290;
        id v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unexpected HTTP response code: %@", buf, 0xCu);
      }
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = +[NSError ak_errorWithCode:-7029];
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);
    }
  }
}

void sub_100025AA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [AKSRPRequest alloc];
    uint64_t v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    uint64_t v15 = sub_100025C0C;
    uint64_t v16 = &unk_1002272F0;
    uint64_t v8 = *(void *)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 56);
    id v9 = [(AKSRPRequest *)v7 initWithURL:v5 contextHelper:v8 completionHandler:&v13];
    objc_msgSend(*(id *)(*(void *)(a1 + 48) + 24), "submitDispatchableRequest:", v9, v13, v14, v15, v16);

    id v10 = v17;
LABEL_7:

    goto LABEL_8;
  }
  uint64_t v11 = _AKLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_10017D964();
  }

  uint64_t v12 = *(void *)(a1 + 56);
  if (v12)
  {
    id v10 = +[NSError ak_errorWithCode:-7005 underlyingError:v6];
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v10);
    goto LABEL_7;
  }
LABEL_8:
}

void sub_100025C0C(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = v8;
  if (a2)
  {
    id v10 = [*(id *)(a1 + 32) authContext];
    unsigned int v11 = [v10 isRKVerification];

    if (v11)
    {
      uint64_t v12 = _AKLogSystem();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "MK was accepted for RK Verification", v29, 2u);
      }

      uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      goto LABEL_9;
    }
    id v21 = [v7 serviceTokens];
    id v22 = [v21 objectForKeyedSubscript:@"com.apple.gs.idms.mrk"];
    uint64_t v15 = [v22 stringValue];

    double v23 = [v7 masterToken];
    id v20 = [v23 stringValue];

    id v24 = _AKLogSystem();
    unsigned int v25 = v24;
    if (v15 && v20)
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "MK was accepted", v29, 2u);
      }

      v30[0] = AKRecoveryIdentityTokenHeader;
      v30[1] = AKRecoveryMKValidationTokenHeader;
      v31[0] = v20;
      v31[1] = v15;
      uint64_t v26 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];
      int v27 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_10017D9CC();
      }

      uint64_t v28 = *(void *)(a1 + 40);
      uint64_t v26 = +[NSError ak_errorWithCode:-7018];
      int v27 = *(void (**)(void))(v28 + 16);
    }
    v27();

LABEL_27:
    goto LABEL_28;
  }
  if (v7 || !objc_msgSend(v8, "ak_isAuthenticationError"))
  {
    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v15 = v14;
    if (v9) {
      [v14 setObject:v9 forKeyedSubscript:NSUnderlyingErrorKey];
    }
    if ([v7 errorCode] == (id)-22447) {
      uint64_t v16 = -7028;
    }
    else {
      uint64_t v16 = -7018;
    }
    id v17 = [v7 errorMessage];

    if (v17)
    {
      id v18 = [v7 errorMessage];
      [v15 setObject:v18 forKeyedSubscript:NSLocalizedDescriptionKey];
    }
    uint64_t v19 = *(void *)(a1 + 40);
    id v20 = +[NSError errorWithDomain:AKAppleIDAuthenticationErrorDomain code:v16 userInfo:v15];
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v20);
    goto LABEL_27;
  }
  uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_9:
  v13();
LABEL_28:
}

void sub_10002615C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10017DA00();
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Verifier persisted", v9, 2u);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v8();
}

uint64_t sub_1000263B0()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_1002722A8;
  uint64_t v5 = qword_1002722A8;
  if (!qword_1002722A8)
  {
    long long v6 = *(_OWORD *)off_100227360;
    long long v7 = *(_OWORD *)&off_100227370;
    v3[3] = _sl_dlopen();
    qword_1002722A8 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1000264C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000264D8(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002722A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100026568()
{
  uint64_t v0 = sub_1000263B0();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_1000265C4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002722B0;
  uint64_t v7 = qword_1002722B0;
  if (!qword_1002722B0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000266A8;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000266A8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100026690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000266A8(uint64_t a1)
{
  sub_100026568();
  Class result = objc_getClass("FLFollowUpAction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002722B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017DB0C();
    return (Class)sub_100026700(v3);
  }
  return result;
}

id sub_100026700()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002722B8;
  uint64_t v7 = qword_1002722B8;
  if (!qword_1002722B8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000267E4;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000267E4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000267CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000267E4(uint64_t a1)
{
  sub_100026568();
  Class result = objc_getClass("FLFollowUpController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002722B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017DB34();
    return (Class)sub_10002683C(v3);
  }
  return result;
}

id sub_10002683C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002722C0;
  uint64_t v7 = qword_1002722C0;
  if (!qword_1002722C0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100026920;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100026920((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100026908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100026920(uint64_t a1)
{
  sub_100026568();
  Class result = objc_getClass("FLFollowUpItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002722C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017DB5C();
    return (Class)sub_100026978(v3);
  }
  return result;
}

id sub_100026978()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002722C8;
  uint64_t v7 = qword_1002722C8;
  if (!qword_1002722C8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100026A5C;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100026A5C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100026A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100026A5C(uint64_t a1)
{
  sub_100026568();
  Class result = objc_getClass("FLFollowUpNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002722C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017DB84();
    return (Class)sub_100026AB4(v3);
  }
  return result;
}

id sub_100026AB4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002722D0;
  uint64_t v7 = qword_1002722D0;
  if (!qword_1002722D0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100026B98;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100026B98((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100026B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100026B98(uint64_t a1)
{
  sub_100026568();
  Class result = objc_getClass("FLHSA2LoginNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002722D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017DBAC();
    return (Class)sub_100026BF0(v3);
  }
  return result;
}

id sub_100026BF0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002722D8;
  uint64_t v7 = qword_1002722D8;
  if (!qword_1002722D8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100026CD4;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100026CD4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100026CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100026CD4(uint64_t a1)
{
  sub_100026568();
  Class result = objc_getClass("FLHSA2PasswordResetNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002722D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017DBD4();
    return (Class)sub_100026D2C(v3);
  }
  return result;
}

uint64_t sub_100026D2C()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002722E0;
  uint64_t v6 = qword_1002722E0;
  if (!qword_1002722E0)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLGroupIdentifierAccount");
    qword_1002722E0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100026E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100026E1C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLGroupIdentifierAccount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002722E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100026E6C()
{
  uint64_t v0 = (void **)sub_100026D2C();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100026EA0();
  }
}

uint64_t sub_100026EA0()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002722E8;
  uint64_t v6 = qword_1002722E8;
  if (!qword_1002722E8)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLNotificationOptionForce");
    qword_1002722E8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100026F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100026F90(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLNotificationOptionForce");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002722E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100026FE0()
{
  uint64_t v0 = (void **)sub_100026EA0();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100027014();
  }
}

uint64_t sub_100027014()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002722F0;
  uint64_t v6 = qword_1002722F0;
  if (!qword_1002722F0)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLNotificationOptionSpringboardAlert");
    qword_1002722F0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000270EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100027104(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLNotificationOptionSpringboardAlert");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002722F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100027154()
{
  uint64_t v0 = (void **)sub_100027014();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100027188();
  }
}

uint64_t sub_100027188()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002722F8;
  uint64_t v6 = qword_1002722F8;
  if (!qword_1002722F8)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLNotificationOptionSpringboardAlertActionOnly");
    qword_1002722F8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100027260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100027278(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLNotificationOptionSpringboardAlertActionOnly");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002722F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000272C8()
{
  uint64_t v0 = (void **)sub_100027188();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_1000272FC();
  }
}

uint64_t sub_1000272FC()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272300;
  uint64_t v6 = qword_100272300;
  if (!qword_100272300)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLHSA2ActionChangePassword");
    qword_100272300 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000273D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000273EC(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLHSA2ActionChangePassword");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272300 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10002743C()
{
  uint64_t v0 = (void **)sub_1000272FC();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100027470();
  }
}

uint64_t sub_100027470()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272308;
  uint64_t v6 = qword_100272308;
  if (!qword_100272308)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLNotificationOptionExtensionForNotification");
    qword_100272308 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100027548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100027560(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLNotificationOptionExtensionForNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272308 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000275B0()
{
  uint64_t v0 = (void **)sub_100027470();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_1000275E4();
  }
}

uint64_t sub_1000275E4()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272310;
  uint64_t v6 = qword_100272310;
  if (!qword_100272310)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLNotificationOptionExtensionActions");
    qword_100272310 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000276BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000276D4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLNotificationOptionExtensionActions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272310 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100027724()
{
  uint64_t v0 = (void **)sub_1000275E4();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100027758();
  }
}

uint64_t sub_100027758()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272318;
  uint64_t v6 = qword_100272318;
  if (!qword_100272318)
  {
    id v1 = (void *)sub_100026568();
    v4[3] = (uint64_t)dlsym(v1, "FLNotificationOptionBannerAlert");
    qword_100272318 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100027830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100027848(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100026568();
  Class result = dlsym(v2, "FLNotificationOptionBannerAlert");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272318 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

AKSatoriController *sub_100027898()
{
  uint64_t v0 = (void **)sub_100027758();
  if (v0)
  {
    id v1 = *v0;
    return (AKSatoriController *)v1;
  }
  else
  {
    sub_10017CFA0();
    return [(AKSatoriController *)v3 initWithClient:v5];
  }
}

void sub_100027C10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  uint64_t v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finished verification warm up..", v11, 2u);
  }

  uint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    if (v6)
    {
      id v9 = +[NSError ak_errorWithCode:-7001 underlyingError:v6];
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
    }
    else
    {
      (*(void (**)(void, BOOL, void))(v8 + 16))(*(void *)(a1 + 56), a2 != 0, 0);
    }
  }
  id v10 = +[AKAccountManager sharedInstance];
  [v10 updateSatoriWarmUpTimestampForAccount:*(void *)(a1 + 32)];

  [*(id *)(a1 + 40) invalidate];
}

void sub_100027DF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if (v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10017DC40((uint64_t)v5, v6);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) didPerformVerificationWithSuccess:0 duration:mach_absolute_time() - *(void *)(a1 + 56)];
    [*(id *)(a1 + 40) invalidate];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    [*(id *)(*(void *)(a1 + 32) + 16) didPerformVerificationWithSuccess:1 duration:mach_absolute_time() - *(void *)(a1 + 56)];
    uint64_t v7 = mach_absolute_time();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100027F54;
    v9[3] = &unk_1002273B0;
    uint64_t v8 = *(void **)(a1 + 40);
    v9[4] = *(void *)(a1 + 32);
    uint64_t v12 = v7;
    id v10 = v8;
    id v11 = *(id *)(a1 + 48);
    [v10 getVerificationResultWithOptions:&__NSDictionary0__struct completion:v9];
  }
}

void sub_100027F54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017DCB8((uint64_t)v6, v7);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 16) didCompleteVerificationWithSuccess:v6 == 0 duration:mach_absolute_time() - *(void *)(a1 + 56)];
  [*(id *)(a1 + 40) invalidate];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10002845C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100028474(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0;
  id v7 = a3;
  id v8 = a2;

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002873C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10017DD64();
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);
  }
}

void sub_100028A00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10017DE34();
    }

    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);
    }
    goto LABEL_12;
  }
  if ([v7 statusCode] != (id)401)
  {
    id v15 = [v7 statusCode];
    if (v7)
    {
      if (v15 != (id)302)
      {
        uint64_t v16 = [v7 allHeaderFields];
        id v14 = [v16 objectForKeyedSubscript:@"X-Apple-AK-Advanced-ICloud-Data-Protection"];

        if (v14)
        {
          uint64_t v17 = *(void *)(a1 + 32);
          if (v17) {
            (*(void (**)(uint64_t, void))(v17 + 16))(v17, 0);
          }
        }
        else
        {
          id v18 = _AKLogSystem();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            sub_10017DE00();
          }

          uint64_t v19 = *(void *)(a1 + 32);
          if (v19)
          {
            id v20 = +[NSError ak_errorWithCode:-7010];
            (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);
          }
        }
        goto LABEL_11;
      }
    }
  }
  uint64_t v12 = _AKLogSystem();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_10017DDCC();
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13)
  {
    id v14 = +[NSError ak_errorWithCode:-7010];
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v14);
LABEL_11:
  }
LABEL_12:
}

void sub_100028D68(id a1)
{
  id v1 = [AKStrongDeviceIdentitySigner alloc];
  id v4 = (id)objc_opt_new();
  uint64_t v2 = [(AKStrongDeviceIdentitySigner *)v1 initWithStrongDeviceIdentifying:v4];
  uint64_t v3 = (void *)qword_100272320;
  qword_100272320 = (uint64_t)v2;
}

id sub_1000290D4(uint64_t a1, int a2)
{
  if (!a2) {
    return _[*(id *)(a1 + 32) _baaV1HeadersForRequestData:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  id result = *(id *)(a1 + 48);
  if (result) {
    return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0, 0);
  }
  return result;
}

void sub_1000296EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 240), 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100029730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000297CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100029868(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  if (!v4) {
    objc_storeStrong(v3, *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
  [*(id *)(a1 + 32) addEntriesFromDictionary:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  [*(id *)(a1 + 32) addEntriesFromDictionary:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v6 = _AKSignpostLogSystem();
  uint64_t v7 = v6;
  os_signpost_id_t v8 = *(void *)(a1 + 80);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    LOWORD(v13) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v8, "BAASigning", "", (uint8_t *)&v13, 2u);
  }

  uint64_t v9 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 80);
    int v13 = 134218240;
    uint64_t v14 = v10;
    __int16 v15 = 2048;
    double v16 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:BAASigning ", (uint8_t *)&v13, 0x16u);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    id v12 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v11 + 16))(v11, v12, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_100029B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100029B90(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = _AKLogSystem();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    sub_10017DED0();
  }

  if (a4)
  {
    uint64_t v13 = +[AAFAnalyticsEvent ak_analyticsEventWithEventName:@"com.apple.authkit.baa.signing.cached" error:0];
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    __int16 v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }
  if (v11)
  {
    id v16 = v11;
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) populateUnderlyingErrorsStartingWithRootError:v16];
    [*(id *)(a1 + 32) _updateAnalyticsEvent:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) withError:v16];
    uint64_t v17 = *(void **)(a1 + 40);
    id v18 = [v16 domain];
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@:%li", v18, [v16 code]);
  }
  else
  {
    if ([v9 count] == (id)2)
    {
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&__kCFBooleanTrue forKeyedSubscript:kAAFDidSucceed];
      id v18 = [v9 objectAtIndexedSubscript:0];
      uint64_t v19 = [v9 objectAtIndexedSubscript:1];
      id v20 = *(void **)(a1 + 40);
      id v21 = [v18 base64EncodedStringWithOptions:0];
      [v20 setValue:v21 forKey:AKRequestSigningHeaderSignatureKey];

      id v22 = *(void **)(a1 + 40);
      double v23 = [v19 base64EncodedStringWithOptions:0];
      [v22 setValue:v23 forKey:AKRequestSigningHeaderAltSignatureKey];

      id v24 = *(void **)(a1 + 40);
      unsigned int v25 = [v10 base64EncodedStringWithOptions:0];
      [v24 setValue:v25 forKey:AKRequestSigningHeaderAttestationKey];

      id v16 = 0;
      goto LABEL_11;
    }
    uint64_t v26 = AKAttestationErrorDomain;
    NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
    CFStringRef v34 = @"Correct number of signatures not found. This is unexpected.";
    int v27 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    uint64_t v28 = +[NSError errorWithDomain:v26 code:-10001 userInfo:v27];

    id v29 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    uint64_t v30 = kAAFDidSucceed;
    id v16 = v28;
    [v29 setObject:&__kCFBooleanFalse forKeyedSubscript:v30];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) populateUnderlyingErrorsStartingWithRootError:v16];
    uint64_t v17 = *(void **)(a1 + 40);
    id v18 = [v16 domain];
    id v31 = [v16 code];

    +[NSString stringWithFormat:@"%@:%li", v18, v31];
  uint64_t v19 = };
  [v17 setValue:v19 forKey:AKRequestSigningHeaderBAAErrorKey];
LABEL_11:

  [*(id *)(a1 + 32) _reportBAASigningForEvent:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  uint64_t v32 = *(void *)(a1 + 48);
  if (v32) {
    (*(void (**)(uint64_t, void, id))(v32 + 16))(v32, *(void *)(a1 + 40), v16);
  }
}

void sub_10002A2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10002A31C(uint64_t a1, void *a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v7 = obj;
  id v6 = a2;
  [*(id *)(a1 + 32) addEntriesFromDictionary:v6];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10002A3A4(uint64_t a1, void *a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v7 = obj;
  id v6 = a2;
  [*(id *)(a1 + 32) addEntriesFromDictionary:v6];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10002A42C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  if (!v4) {
    objc_storeStrong(v3, *(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
  }
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:AKRequestSigningHeaderHostAltSignatureKey];
  if ([v6 length] && objc_msgSend(*(id *)(a1 + 40), "isEqual:", *(void *)(a1 + 48))) {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:AKRequestSigningHeaderHostSignatureKey];
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, *(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  }
}

void sub_10002A788(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_10017DFBC();
  }

  id v11 = +[NSMutableDictionary dictionary];
  id v12 = *(void **)(a1 + 32);
  if (v9)
  {
    [v12 setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    [*(id *)(a1 + 32) populateUnderlyingErrorsStartingWithRootError:v9];
    [*(id *)(a1 + 40) _updateAnalyticsEvent:*(void *)(a1 + 32) withError:v9];
    uint64_t v13 = [v9 domain];
    uint64_t v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@:%li", v13, [v9 code]);
    [v11 setValue:v14 forKey:AKRequestSigningHeaderHostErrorsKey];
  }
  else
  {
    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:kAAFDidSucceed];
    __int16 v15 = [v7 base64EncodedStringWithOptions:0];
    [v11 setValue:v15 forKey:*(void *)(a1 + 48)];

    uint64_t v13 = [v8 base64EncodedStringWithOptions:0];
    [v11 setValue:v13 forKey:AKRequestSigningHeaderHostAttestationKey];
  }

  [*(id *)(a1 + 40) _reportBAASigningForEvent:*(void *)(a1 + 32)];
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v17 = _AKSignpostLogSystem();
  id v18 = v17;
  os_signpost_id_t v19 = *(void *)(a1 + 64);
  if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v26) = [v9 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v19, "VMHostBAASigning", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
  }

  id v20 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    double v21 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v22 = *(void *)(a1 + 64);
    unsigned int v23 = [v9 code];
    *(_DWORD *)buf = 134218496;
    uint64_t v26 = v22;
    __int16 v27 = 2048;
    double v28 = v21;
    __int16 v29 = 1026;
    unsigned int v30 = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:VMHostBAASigning  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
  }

  uint64_t v24 = *(void *)(a1 + 56);
  if (v24) {
    (*(void (**)(uint64_t, void *, id))(v24 + 16))(v24, v11, v9);
  }
}

void sub_10002B1C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017E030((uint64_t)v6, v7);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v17 objects:v23 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v18;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v18 != v11) {
            objc_enumerationMutation(v8);
          }
          if (objc_msgSend(*(id *)(a1 + 32), "hasSuffix:", *(void *)(*((void *)&v17 + 1) + 8 * i), (void)v17))
          {
            uint64_t v13 = +[AKConfiguration sharedConfiguration];
            id v14 = [v13 shouldEnableAttestationLogging];

            if (v14)
            {
              __int16 v15 = _AKLogSystem();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                id v16 = [*(id *)(a1 + 40) requestURL];
                *(_DWORD *)buf = 138412290;
                uint64_t v22 = v16;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Excluding from attestation based on config. URL - %@", buf, 0xCu);
              }
            }
            (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

            goto LABEL_19;
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v17 objects:v23 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_19:
  }
}

void sub_10002B47C(uint64_t a1)
{
  uint64_t v2 = +[AKURLBag sharedBag];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002B530;
  v4[3] = &unk_1002275C8;
  uint64_t v3 = *(void **)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 configurationValueForKey:@"baa-sign-sampling" fromCache:1 completion:v4];
}

void sub_10002B530(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10017E0DC((uint64_t)v5, v6);
    }
LABEL_8:

    goto LABEL_9;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldPostAnalyticsWithSamplingRate:", objc_msgSend(a2, "unsignedIntegerValue")))
  {
    id v6 = +[AKAnalyticsReporterRTC rtcAnalyticsReporter];
    [v6 sendEvent:*(void *)(a1 + 40)];
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10017E0A8();
    }

    goto LABEL_8;
  }
LABEL_9:
}

BOOL sub_10002BFBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 8) altDSIDForAccount:v3];
  id v5 = [v4 length];
  if (!v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10017E1DC((uint64_t)v3, v6);
    }
  }
  return v5 != 0;
}

id sub_10002C168(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _saveAccounts:*(void *)(a1 + 40) inMemoryTokens:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_10002C4F0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully removed account %@.", (uint8_t *)&v9, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_10017E254();
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 24));
}

void sub_10002C7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    uint64_t v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10017E2C0((uint64_t)v10, v11);
    }

    if (a10) {
      (*(void (**)(uint64_t))(a10 + 16))(a10);
    }

    objc_end_catch();
    JUMPOUT(0x10002C798);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002C890(uint64_t a1)
{
  id v1 = (id *)(a1 + 40);
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) altDSIDForAccount:*(void *)(a1 + 40)];
  id v3 = (void *)*((void *)*(v1 - 1) + 1);
  uint64_t v4 = [v1[1] objectForKeyedSubscript:v2];
  id v5 = [v3 buildCredentialWithTokens:v4];

  [*v1 setCredential:v5];
  id v6 = *v1;
  id v7 = (void *)*((void *)*(v1 - 1) + 1);
  id v13 = 0;
  unsigned __int8 v8 = [v7 saveAccount:v6 error:&v13];
  id v9 = v13;
  id v10 = _AKLogSystem();
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = *v1;
      *(_DWORD *)buf = 138412290;
      id v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully saved account %@.", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    sub_10017E338();
  }
}

void sub_10002CBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002CBFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _decrementQueueSize];
}

void sub_10002CEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002CED4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _decrementQueueSize];
}

void sub_10002D504(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 144) proxiedDevice];
    if (v7
      && (unsigned __int8 v8 = (void *)v7,
          [*(id *)(*(void *)(a1 + 32) + 144) appProvidedContext],
          id v9 = objc_claimAutoreleasedReturnValue(),
          v9,
          v8,
          v9))
    {
      id v10 = _AKLogSystem();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(v11 + 144);
        *(_DWORD *)buf = 138412546;
        uint64_t v23 = v11;
        __int16 v24 = 2112;
        uint64_t v25 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: Requesting attestation data for proxied auth context (%@)", buf, 0x16u);
      }

      id v13 = [AKAnisetteProvisioningService alloc];
      id v14 = [*(id *)(a1 + 32) client];
      id v15 = [(AKAnisetteProvisioningService *)v13 initWithClient:v14 context:*(void *)(*(void *)(a1 + 32) + 144)];

      id v16 = objc_alloc_init((Class)NSMutableURLRequest);
      long long v17 = [*(id *)(*(void *)(a1 + 32) + 144) proxiedDevice];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10002D764;
      v19[3] = &unk_100227788;
      void v19[4] = *(void *)(a1 + 32);
      id v20 = v5;
      id v21 = *(id *)(a1 + 40);
      [(AKAnisetteProvisioningService *)v15 attestationDataForDevice:v17 withRequest:v16 completion:v19];
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 40);
      id v15 = (AKAnisetteProvisioningService *)[v5 copy];
      (*(void (**)(uint64_t, AKAnisetteProvisioningService *, void))(v18 + 16))(v18, v15, 0);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10002D764(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem();
  unsigned __int8 v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017E3A4(a1, (uint64_t)v6, v8);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 144);
    int v18 = 138412802;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    id v21 = v5;
    __int16 v22 = 2112;
    uint64_t v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Fetched attestation data (%@) for proxied auth context (%@)", (uint8_t *)&v18, 0x20u);
  }

  uint64_t v11 = kAppleIDAuthSupportClientProvidedData;
  uint64_t v12 = [*(id *)(a1 + 40) objectForKeyedSubscript:kAppleIDAuthSupportClientProvidedData];
  id v13 = [v12 mutableCopy];

  id v14 = [v5 attestationHeaders];
  [v13 addEntriesFromDictionary:v14];

  id v15 = [v13 copy];
  [*(id *)(a1 + 40) setObject:v15 forKeyedSubscript:v11];

  uint64_t v16 = *(void *)(a1 + 48);
  id v17 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id, void))(v16 + 16))(v16, v17, 0);
}

void sub_10002DA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DA30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_131;
  }
  id v97 = v6;
  id v8 = [v5 mutableCopy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:kAppleIDAuthSupportClientProvidedData];
  id v12 = [v11 mutableCopy];

  id v13 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectForKeyedSubscript:kAppleIDAuthSupportAdditionalHeaders];
  id v14 = [v13 mutableCopy];

  if (!v14) {
    id v14 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v15 = +[AKAppleIDPushHelperService sharedService];
  uint64_t v16 = [v15 publicAPSTokenString];

  if (v16) {
    [v12 setObject:v16 forKeyedSubscript:AKRequestBodyPushTokenKey];
  }
  v98 = (void *)v16;
  id v17 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(*(void *)(a1 + 32) + 144) authenticationType]);
  [v12 setObject:v17 forKeyedSubscript:@"at"];
  int v18 = [v17 stringValue];
  [v14 setObject:v18 forKeyedSubscript:AKClientAuthenticationTypeHeader];

  uint64_t v19 = [*(id *)(*(void *)(a1 + 32) + 144) _identifier];
  __int16 v20 = [v19 UUIDString];
  [v12 setObject:v20 forKeyedSubscript:@"X-Apple-I-Request-UUID"];

  id v21 = [*(id *)(a1 + 32) authContext];
  __int16 v22 = [v21 _proxiedAppBundleID];

  if ([v22 length]) {
    [v14 setObject:v22 forKeyedSubscript:AKProxiedBundleIDHeader];
  }
  uint64_t v23 = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 144) supportsPiggybacking];
  __int16 v24 = _AKLogSystem();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v25 = @"YES";
    if (!v23) {
      CFStringRef v25 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v105 = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Context eligibility for piggybacking: %@", buf, 0xCu);
  }

  v96 = v22;
  if (v23)
  {
    uint64_t v26 = +[AKConfiguration sharedConfiguration];
    id v27 = [v26 shouldDisablePiggybacking];

    if (v27 == (id)1)
    {
      double v28 = _AKLogSystem();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        __int16 v29 = "Piggybacking forced disabled";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v29, buf, 2u);
      }
    }
    else
    {
      unsigned int v30 = +[AKDevice currentDevice];
      unsigned int v31 = [v30 isInCircle];

      if (v31)
      {
        double v28 = _AKLogSystem();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v29 = "Skipping piggybacking, already in circle";
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v32 = +[AKDevice currentDevice];
        unsigned int v33 = [v32 isInRestrictedSharingMode];

        if (!v33)
        {
          if (v98)
          {
            uint64_t v23 = 1;
            goto LABEL_29;
          }
          double v28 = _AKLogSystem();
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_28;
          }
          *(_WORD *)buf = 0;
          __int16 v29 = "Skipping piggybacking, missing push token";
          goto LABEL_27;
        }
        double v28 = _AKLogSystem();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          __int16 v29 = "Skipping piggybacking, user in restricted sharing mode";
          goto LABEL_27;
        }
      }
    }
LABEL_28:

    uint64_t v23 = 0;
  }
LABEL_29:
  uint64_t v34 = _AKLogSystem();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v35 = @"YES";
    if (!v23) {
      CFStringRef v35 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v105 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Client is eligible for piggybacking: %@", buf, 0xCu);
  }

  uint64_t v36 = +[NSNumber numberWithBool:v23];
  [v12 setObject:v36 forKeyedSubscript:@"pbe"];

  if ([*(id *)(*(void *)(a1 + 32) + 144) piggybackingForTrustedDevice])
  {
    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKPiggybackingForTrustedDevice];
    uint64_t v37 = _AKLogSystem();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Client has requested piggybacking approval", buf, 2u);
    }
  }
  if ([*(id *)(*(void *)(a1 + 32) + 144) isEphemeral]) {
    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKEphemeralAuthKey];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 144) shouldPromptForPasswordOnly])
  {
    uint64_t v38 = _AKLogSystem();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Client has requested password-only auth.", buf, 2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"X-Apple-Password-Only"];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 144) shouldRequestShortLivedToken])
  {
    uint64_t v39 = _AKLogSystem();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Client has requested a short-lived token.", buf, 2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKShortLivedTokenKey];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 144) shouldRequestRecoveryPET])
  {
    uint64_t v40 = _AKLogSystem();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Client has request a recovery PET.", buf, 2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"rpet"];
  }
  unsigned int v41 = [*(id *)(*(void *)(a1 + 32) + 144) shouldOfferSecurityUpgrade];
  uint64_t v42 = [*(id *)(a1 + 32) client];
  unsigned int v43 = [v42 isExemptedFromMandatoryUISecurityUpgrade];

  if (v43)
  {
    uint64_t v44 = _AKLogSystem();
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_WORD *)buf = 0;
    uint64_t v45 = "Client is exempt from mandatory UI security upgrade.";
    goto LABEL_66;
  }
  if ((([*(id *)(*(void *)(a1 + 32) + 144) shouldPromptForPasswordOnly] ^ 1 | v41) & 1) == 0)
  {
    uint64_t v44 = _AKLogSystem();
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_WORD *)buf = 0;
    uint64_t v45 = "Client is requesting password only auth. Security upgrade will not be offered.";
    goto LABEL_66;
  }
  if ((([*(id *)(*(void *)(a1 + 32) + 144) isEphemeral] ^ 1 | v41) & 1) == 0)
  {
    uint64_t v44 = _AKLogSystem();
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_67;
    }
    *(_WORD *)buf = 0;
    uint64_t v45 = "Client is requesting ephemeral auth. Security upgrade will not be offered.";
LABEL_66:
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 2u);
LABEL_67:

    if (v41) {
      goto LABEL_68;
    }
    goto LABEL_72;
  }
  if ([*(id *)(a1 + 32) canPresentRemoteUI])
  {
    uint64_t v46 = [*(id *)(*(void *)(a1 + 32) + 144) authKitAccount:0];

    if (!v46)
    {
      v94 = _AKLogSystem();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Client logging in for first time is using full AuthKit UI, security upgrade should be offered.", buf, 2u);
      }

      goto LABEL_68;
    }
  }
  if (v41)
  {
    int v47 = [*(id *)(*(void *)(a1 + 32) + 144) isAppleIDLoginEnabled];
    unsigned int v48 = [v47 BOOLValue];

    if (v48)
    {
      uint64_t v49 = _AKLogSystem();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Cannot offer HSA2 upgrade on device with Apple ID login enabled.", buf, 2u);
      }
      goto LABEL_71;
    }
LABEL_68:
    uint64_t v50 = _AKLogSystem();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Client has indicated that we should offer HSA 2.0 upgrade.", buf, 2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"X-Apple-Offer-Security-Upgrade"];
    uint64_t v49 = [*(id *)(*(void *)(a1 + 32) + 144) securityUpgradeContext];
    [v12 setObject:v49 forKeyedSubscript:AKAuthenticationSecurityUpgradeContextHeaderFieldKey];
LABEL_71:
  }
LABEL_72:
  if ([*(id *)(*(void *)(a1 + 32) + 144) isEphemeral])
  {
    int v51 = _AKLogSystem();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Performing ephemeral auth. Will not ask for ckgen or prkgen.", buf, 2u);
    }

    goto LABEL_117;
  }
  unsigned int v52 = [*(id *)(*(void *)(a1 + 32) + 144) _localUserHasEmptyPassword];
  if ((v52 & 1) == 0)
  {
    uint64_t v53 = _AKLogSystem();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v105 = @"YES";
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Sending prkgen: %@", buf, 0xCu);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKPasscodeIndicatorKey];
  }
  uint64_t v54 = [*(id *)(*(void *)(a1 + 32) + 144) desiredInternalTokens];
  unsigned int v55 = [v54 containsObject:AKAuthenticationInternalTokenCK];

  uint64_t v56 = _AKLogSystem();
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v57 = @"YES";
    if (!v55) {
      CFStringRef v57 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v105 = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "The client indicated support for ckgen: %@", buf, 0xCu);
  }

  uint64_t v58 = [*(id *)(*(void *)(a1 + 32) + 144) passwordlessToken];

  uint64_t v59 = _AKLogSystem();
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v60 = @"YES";
    if (!v58) {
      CFStringRef v60 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v105 = v60;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "The client provided a passwordlessToken: %@", buf, 0xCu);
  }

  uint64_t v61 = [*(id *)(a1 + 32) password];
  if (!v61)
  {
    uint64_t v62 = [*(id *)(*(void *)(a1 + 32) + 144) companionDevice];
    if (v62 | v58)
    {
      int v63 = (void *)v62;
    }
    else
    {
      unsigned int v55 = 0;
      int v63 = 0;
    }
  }
  uint64_t v64 = _AKLogSystem();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v65 = @"YES";
    if (!v55) {
      CFStringRef v65 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v105 = v65;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "ckgen supported: %@", buf, 0xCu);
  }

  if (!v55) {
    goto LABEL_117;
  }
  uint64_t v66 = *(id **)(a1 + 32);
  if (v52)
  {
    [v66[18] setAnticipateEscrowAttempt:0];
  }
  else
  {
    uint64_t v67 = [v66 _passwordResetBackupToken];

    [*(id *)(*(void *)(a1 + 32) + 144) setAnticipateEscrowAttempt:v67 == 0];
    if (!v67)
    {
      int v75 = 1;
      goto LABEL_111;
    }
  }
  uint64_t v68 = [*(id *)(a1 + 32) continuationToken:0];
  if (!v68) {
    goto LABEL_109;
  }
  uint64_t v69 = (void *)v68;
  uint64_t v70 = [*(id *)(a1 + 32) passwordResetToken];
  if (v70) {
    char v71 = 1;
  }
  else {
    char v71 = v52;
  }
  if ((v71 & 1) == 0)
  {

    goto LABEL_109;
  }
  int v72 = (void *)v70;
  uint64_t v73 = [*(id *)(*(void *)(a1 + 32) + 144) companionDevice];
  uint64_t v74 = v73 | v58;

  if (v74)
  {
LABEL_109:
    int v75 = 0;
LABEL_111:
    v76 = _AKLogSystem();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Will ask for ckgen.", buf, 2u);
    }

    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:AKContinutationKeyGenKey];
    if (v75)
    {
      v77 = _AKLogSystem();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Will ask to stash escrow PRK", buf, 2u);
      }

      [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"icscrec"];
    }
  }
LABEL_117:
  if ([*(id *)(*(void *)(a1 + 32) + 144) shouldRequestConfigurationInfo]) {
    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:@"fcd"];
  }
  v78 = *(void **)(*(void *)(a1 + 32) + 144);
  id v103 = 0;
  v79 = [v78 authKitAccount:&v103];
  id v80 = v103;
  if (v80)
  {
    v81 = _AKLogSystem();
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
      sub_10017E444((uint64_t)v80, v81);
    }
  }
  v82 = +[AKAccountManager sharedInstance];
  unsigned int v83 = [v82 accountAccessTelemetryOptInForAccount:v79];

  if (v83)
  {
    v84 = [*(id *)(*(void *)(a1 + 32) + 144) telemetryDeviceSessionID];

    if (v84)
    {
      v85 = [*(id *)(*(void *)(a1 + 32) + 144) telemetryDeviceSessionID];
      [v12 setObject:v85 forKeyedSubscript:@"X-Apple-I-Device-Session-Id"];
    }
    v86 = [*(id *)(*(void *)(a1 + 32) + 144) telemetryFlowID];

    if (v86)
    {
      v87 = [*(id *)(*(void *)(a1 + 32) + 144) telemetryFlowID];
      [v12 setObject:v87 forKeyedSubscript:@"X-Apple-I-Flow-Id"];
    }
  }
  v88 = [*(id *)(*(void *)(a1 + 32) + 144) sourceAltDSID];

  if (v88)
  {
    v89 = [*(id *)(*(void *)(a1 + 32) + 144) sourceAltDSID];
    [v14 setObject:v89 forKeyedSubscript:AKSourceAltDSIDHeaderKey];
  }
  v90 = *(void **)(a1 + 32);
  v99[0] = _NSConcreteStackBlock;
  v99[1] = 3221225472;
  v99[2] = sub_10002E9C8;
  v99[3] = &unk_100227800;
  v99[4] = v90;
  id v91 = v14;
  id v100 = v91;
  id v92 = v12;
  id v101 = v92;
  long long v95 = *(_OWORD *)(a1 + 40);
  id v93 = (id)v95;
  long long v102 = v95;
  [v90 _updateHeadersWithCompanionAnisetteData:v91 clientProvidedData:v92 completion:v99];

  uint64_t v7 = v97;
LABEL_131:
}

void sub_10002E9C8(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10002EAD8;
    v9[3] = &unk_1002277D8;
    v9[4] = v3;
    id v6 = v5;
    uint64_t v7 = *(void *)(a1 + 64);
    id v10 = v6;
    uint64_t v13 = v7;
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    [v3 _updateHeadersWithProxiedDeviceAnisetteData:v4 clientProvidedData:v6 completion:v9];
  }
  else
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v8();
  }
}

uint64_t sub_10002EAD8(uint64_t a1, int a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) clientProvidedDataHelper:*(void *)(a1 + 40)];
    id v3 = [*(id *)(a1 + 40) copy];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v3 forKeyedSubscript:kAppleIDAuthSupportClientProvidedData];

    id v4 = [*(id *)(a1 + 48) copy];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v4 forKeyedSubscript:kAppleIDAuthSupportAdditionalHeaders];
  }
  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v5();
}

void sub_10002EE10(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = +[NSMutableURLRequest ak_proxiedAnisetteHeadersWithData:a2];
    [*(id *)(a1 + 32) addEntriesFromDictionary:v6];
    [*(id *)(a1 + 40) addEntriesFromDictionary:v6];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017E4BC(a1);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10002F184(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = +[NSMutableURLRequest ak_anisetteHeadersWithCompanionData:a2];
    [*(id *)(a1 + 32) addEntriesFromDictionary:v6];
    [*(id *)(a1 + 40) addEntriesFromDictionary:v6];
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  }
  else
  {
    id v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10017E55C(a1);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    id v6 = +[NSError ak_generalErrorWithCode:-8026 errorDomain:AKAnisetteErrorDomain underlyingError:v5];
    uint64_t v7 = *(void (**)(void))(v9 + 16);
  }
  v7();
}

void sub_10002FC44(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_10003039C()
{
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100272330;
  uint64_t v5 = qword_100272330;
  if (!qword_100272330)
  {
    long long v6 = *(_OWORD *)off_100227900;
    long long v7 = *(_OWORD *)&off_100227910;
    v3[3] = _sl_dlopen();
    qword_100272330 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1000304AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000304C4(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272330 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100030554()
{
  uint64_t v0 = sub_10003039C();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_1000305B0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272338;
  uint64_t v7 = qword_100272338;
  if (!qword_100272338)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100030694;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100030694((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10003067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100030694(uint64_t a1)
{
  sub_100030554();
  Class result = objc_getClass("SFAutoFillFeatureManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272338 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017E5FC();
    return (Class)sub_1000306EC(v3);
  }
  return result;
}

id sub_1000306EC()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272340;
  uint64_t v7 = qword_100272340;
  if (!qword_100272340)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000307D0;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000307D0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000307B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000307D0(uint64_t a1)
{
  sub_100030554();
  Class result = objc_getClass("SFSafariCredential");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272340 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017E624();
    return (Class)sub_100030828(v3);
  }
  return result;
}

id sub_100030828()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272348;
  uint64_t v7 = qword_100272348;
  if (!qword_100272348)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10003090C;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_10003090C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000308F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AKAppleIDAuthenticationContext *sub_10003090C(uint64_t a1)
{
  sub_100030554();
  Class result = objc_getClass("SFSafariCredentialStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272348 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10017E64C();
    return [(AKAuthenticationSurrogateModel *)v3 surrogateContext];
  }
  return result;
}

void sub_100030D68(id *a1)
{
  if ([a1[4] _isClientWaitingForSurrogateAuth:a1[5]])
  {
    id v15 = +[NSString stringWithFormat:@"Out-of-process surrogate auth is already in progress for client %@.", a1[5]];
    id v2 = a1[4];
    uint64_t v3 = +[NSError ak_errorWithCode:-7045];
    [v2 _handleError:v3 logMessage:v15 withUIWorkBlock:a1[7]];
  }
  else
  {
    SEL v4 = [a1[4] surrogateIDGenerator];
    uint64_t v5 = [v4 generateCheckinID];

    [a1[4] _waitForSurrogateCheckInWithContext:a1[6] withUIWorkBlock:a1[7] client:a1[5] andCheckInID:v5];
    uint64_t v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [v5 UUIDString];
      *(_DWORD *)buf = 138412290;
      unsigned int v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Begin out-of-process authentication with surrogate ID %@", buf, 0xCu);
    }
    id v8 = a1[5];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1000310F4;
    v23[3] = &unk_100227928;
    id v24 = v8;
    id v9 = v5;
    id v10 = a1[4];
    id v25 = v9;
    id v26 = v10;
    id v27 = a1[6];
    id v28 = a1[7];
    id v11 = [v24 proxyWithErrorHandler:v23];
    objc_initWeak((id *)buf, a1[4]);
    id v12 = a1[6];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100031194;
    v16[3] = &unk_100227950;
    id v17 = a1[5];
    id v13 = v9;
    id v14 = a1[4];
    id v18 = v13;
    id v19 = v14;
    id v20 = a1[6];
    objc_copyWeak(&v22, (id *)buf);
    id v21 = a1[7];
    [v11 launchOutOfProcessAuthentication:v12 surrogateID:v13 withErrorHandler:v16];

    objc_destroyWeak(&v22);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1000310D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1000310F4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  id v6 = +[NSString stringWithFormat:@"XPC Error launching out-of-process authentication for client %@ with surrogate ID %@.", v3, v4];
  [*(id *)(a1 + 48) _stopWaitingForCheckInWithContext:*(void *)(a1 + 56) andError:v5];
  [*(id *)(a1 + 48) _handleError:v5 logMessage:v6 withUIWorkBlock:*(void *)(a1 + 64)];
}

void sub_100031194(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = +[NSString stringWithFormat:@"Failed to launch out-of-process authentication for client %@ with surrogate ID %@.", *(void *)(a1 + 32), *(void *)(a1 + 40)];
  if (v5)
  {
    [*(id *)(a1 + 48) _stopWaitingForCheckInWithContext:*(void *)(a1 + 56) andError:v5];
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    [WeakRetained _handleError:v5 logMessage:v3 withUIWorkBlock:*(void *)(a1 + 64)];
  }
}

void sub_100031344(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isWaitingForSettingsSurrogateAuth] & 1) != 0
    || [*(id *)(a1 + 32) _isClientWaitingForSurrogateAuth:*(void *)(a1 + 40)])
  {
    id v13 = +[NSString stringWithFormat:@"Settings surrogate auth is already in progress for client %@", *(void *)(a1 + 40)];
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = -7045;
LABEL_4:
    uint64_t v4 = +[NSError ak_errorWithCode:v3];
    [v2 _handleError:v4 logMessage:v13 withUIWorkBlock:*(void *)(a1 + 56)];

    return;
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    id v13 = +[NSString stringWithFormat:@"Redirecting to Settings for client %@ is not permitted for this call.", *(void *)(a1 + 40)];
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = -7027;
    goto LABEL_4;
  }
  id v5 = _AKLogSystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pausing Surrogate Queue to prompt for redirect...", (uint8_t *)buf, 2u);
  }

  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 56));
  id v6 = [*(id *)(a1 + 32) surrogateIDGenerator];
  uint64_t v7 = [v6 generateCheckinID];

  *(unsigned char *)(*(void *)(a1 + 32) + 40) = 1;
  [*(id *)(a1 + 32) _waitForSurrogateCheckInWithContext:*(void *)(a1 + 48) withUIWorkBlock:*(void *)(a1 + 56) client:*(void *)(a1 + 40) andCheckInID:v7];
  objc_initWeak(buf, *(id *)(a1 + 32));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 65);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10003160C;
  v14[3] = &unk_1002279A0;
  objc_copyWeak(&v19, buf);
  v14[4] = *(void *)(a1 + 32);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 56);
  id v12 = v7;
  id v17 = v12;
  [WeakRetained promptForAppleIDSettingsRedirectWithContext:v9 client:v10 needFullUI:v11 completion:v14];

  objc_destroyWeak(&v19);
  objc_destroyWeak(buf);
}

void sub_1000315F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_10003160C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (dispatch_object_t *)objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
  {
    id v8 = +[NSError ak_errorWithCode:-7001];
    *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
    [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v8];
    uint64_t v9 = +[NSString stringWithFormat:@"Lost reference to strongself during Settings redirect for client %@.", *(void *)(a1 + 48)];
    [0 _handleError:v8 logMessage:v9 withUIWorkBlock:*(void *)(a1 + 64)];

    goto LABEL_16;
  }
  if (v5)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
    [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v5];
    uint64_t v7 = +[NSString stringWithFormat:@"Failed to prompt for Settings redirect for client %@.", *(void *)(a1 + 48)];
    [(dispatch_object_t *)WeakRetained _handleError:v5 logMessage:v7 withUIWorkBlock:*(void *)(a1 + 64)];
  }
  else
  {
    if (a2)
    {
      uint64_t v10 = _AKLogSystem();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Taking user to Settings/System Preferences for auth UI...", buf, 2u);
      }

      if ([(dispatch_object_t *)WeakRetained _launchAppleIDSettingsForContext:*(void *)(a1 + 40) withCheckinID:*(void *)(a1 + 56)])goto LABEL_13; {
      uint64_t v7 = +[NSError ak_errorWithCode:-7015];
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
      [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v7];
      +[NSString stringWithFormat:@"Unable to launch Settings for client %@.", *(void *)(a1 + 48)];
    }
    else
    {
      uint64_t v7 = +[NSError ak_errorWithCode:-7003];
      *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
      [*(id *)(a1 + 32) _stopWaitingForCheckInWithContext:*(void *)(a1 + 40) andError:v7];
      +[NSString stringWithFormat:@"User canceled Settings redirect for client %@.", *(void *)(a1 + 48)];
    uint64_t v11 = };
    [(dispatch_object_t *)WeakRetained _handleError:v7 logMessage:v11 withUIWorkBlock:*(void *)(a1 + 64)];
  }
LABEL_13:
  id v12 = _AKLogSystem();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Resuming Surrogate Queue after prompt for redirect...", v13, 2u);
  }

  dispatch_resume(WeakRetained[7]);
LABEL_16:
}

void sub_10003194C(id *a1)
{
  uint64_t v2 = [a1[4] inProgressSurrogates];
  uint64_t v3 = [a1[5] _identifier];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  id v5 = [v4 surrogateContext];

  if (v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [v4 surrogateContext];
      id v8 = [v7 _identifier];
      *(_DWORD *)buf = 138412290;
      id v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "UI surrogate %@ registered.", buf, 0xCu);
    }
    uint64_t v9 = [v4 surrogateContext];
    [v9 _updateWithValuesFromContext:a1[5]];

    id WeakRetained = objc_loadWeakRetained((id *)a1[4] + 1);
    uint64_t v11 = [WeakRetained uiWorkQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100031BA4;
    block[3] = &unk_1002279F0;
    id v18 = a1[6];
    id v17 = v4;
    dispatch_async(v11, block);
  }
  else
  {
    id v12 = [a1[5] _identifier];
    id v13 = +[NSString stringWithFormat:@"UI surrogate %@ not registered. Unable to do UI work.", v12];

    id v14 = a1[4];
    id v15 = +[NSError ak_errorWithCode:-7014];
    [v14 _handleError:v15 logMessage:v13 withUIWorkBlock:a1[6]];
  }
}

void sub_100031BA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) surrogateClient];
  uint64_t v3 = [*(id *)(a1 + 32) surrogateContext];
  (*(void (**)(uint64_t, id, void *, void))(v2 + 16))(v2, v4, v3, 0);
}

void sub_100031D04(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _identifier];
  uint64_t v3 = [*(id *)(a1 + 40) _fetchSurrogateWithRegistrationID:v2];
  id v4 = v3;
  if (v3)
  {
    unsigned int v5 = [v3 hasCheckedIn];
    id v6 = _AKLogSystem();
    uint64_t v7 = v6;
    if (v5)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10017E6E0();
      }
    }
    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        uint64_t v17 = v8;
        __int16 v18 = 2112;
        id v19 = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "UI surrogate client %@ with surrogate ID %@ is checking in.", buf, 0x16u);
      }

      [v4 setSurrogateClient:*(void *)(a1 + 48)];
      [v4 setSurrogateContext:*(void *)(a1 + 32)];
      uint64_t v7 = [v4 pendingClientUIWork];
      uint64_t v9 = [v4 pendingBGContext];
      [v4 setPendingClientUIWork:0];
      [v4 setPendingBGContext:0];
      [v4 setHasCheckedIn:1];
      [v4 setSurrogateCompletion:*(void *)(a1 + 56)];
      if (v7)
      {
        if (v9)
        {
          uint64_t v10 = [v4 surrogateContext];
          [v10 _updateWithValuesFromContext:v9];
        }
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8));
        id v12 = [WeakRetained uiWorkQueue];
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_100031F74;
        v13[3] = &unk_1002279F0;
        id v15 = v7;
        id v14 = v4;
        dispatch_async(v12, v13);
      }
    }
  }
  else
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017E674();
    }
  }
}

void sub_100031F74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) surrogateClient];
  uint64_t v3 = [*(id *)(a1 + 32) surrogateContext];
  (*(void (**)(uint64_t, id, void *, void))(v2 + 16))(v2, v4, v3, 0);
}

uint64_t sub_1000326B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

uint64_t sub_1000344B8()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100272358;
  uint64_t v5 = qword_100272358;
  if (!qword_100272358)
  {
    long long v6 = *(_OWORD *)off_100227A48;
    long long v7 = *(_OWORD *)&off_100227A58;
    v3[3] = _sl_dlopen();
    qword_100272358 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1000345C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000345E0(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272358 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100034670()
{
  uint64_t v0 = sub_1000344B8();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_1000346CC()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272360;
  uint64_t v7 = qword_100272360;
  if (!qword_100272360)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000347B0;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000347B0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100034798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000347B0(uint64_t a1)
{
  sub_100034670();
  Class result = objc_getClass("KCJoiningAcceptAccountCircleDelegate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272360 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017EA8C();
    return (Class)sub_100034808(v3);
  }
  return result;
}

id sub_100034808()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272368;
  uint64_t v7 = qword_100272368;
  if (!qword_100272368)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000348EC;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_1000348EC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000348D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000348EC(uint64_t a1)
{
  sub_100034670();
  Class result = objc_getClass("KCAESGCMDuplexSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272368 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10017EAB4();
    return (Class)sub_100034944();
  }
  return result;
}

id sub_100034944()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272370;
  uint64_t v7 = qword_100272370;
  if (!qword_100272370)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100034A28;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100034A28((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100034A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100034A28(uint64_t a1)
{
  sub_100034670();
  Class result = objc_getClass("KCJoiningAcceptSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272370 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_10017EADC();
    return (Class)sub_100034A80(v3);
  }
  return result;
}

id sub_100034A80()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272378;
  uint64_t v7 = qword_100272378;
  if (!qword_100272378)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100034B64;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100034B64((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100034B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_AKExpiringCacheValue *sub_100034B64(uint64_t a1)
{
  sub_100034670();
  Class result = (_AKExpiringCacheValue *)objc_getClass("KCJoiningRequestSecretSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272378 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10017EB04();
    return [(_AKExpiringCacheValue *)v3 initWithObject:v5 expiryDate:v6];
  }
  return result;
}

id sub_100034E9C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
  if ([v2 isExpired])
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = [v2 cacheObject];
  }

  return v3;
}

id sub_100034FC4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_100035188(void *a1)
{
  return [*(id *)(a1[4] + 8) setObject:a1[5] forKey:a1[6]];
}

id sub_10003519C(uint64_t a1)
{
  return [*(id *)(a1 + 32) flushCacheForced:0];
}

id sub_1000353AC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) allKeys];
}

id sub_1000353B8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)];
}

void sub_100035438(id a1)
{
  id v1 = objc_alloc_init(AKNativeAnisetteServiceTrafficManager);
  uint64_t v2 = (void *)qword_100272380;
  qword_100272380 = (uint64_t)v1;

  id v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.akd.anisette", v5);
  SEL v4 = *(void **)(qword_100272380 + 24);
  *(void *)(qword_100272380 + 24) = v3;
}

void sub_10003551C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017EB94();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
  id v10 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000355D8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = +[AKNativeAnisetteServiceTrafficManager sharedSigningService];
    uint64_t v7 = [v6 trafficQueue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000356F8;
    v11[3] = &unk_100227BA8;
    uint64_t v8 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v8;
    dispatch_async(v7, v11);
  }
  else
  {
    uint64_t v9 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10017F104();
    }

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v5);
    }
  }
}

void sub_1000356F8(uint64_t a1)
{
  uint64_t v2 = _AKTrafficLogSubsystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10017F1D4();
  }

  dispatch_queue_t v3 = *(void **)(a1 + 32);
  id v8 = 0;
  SEL v4 = objc_msgSend(v3, "_tq_anisetteDataWithRoutingInfoForLastKnownDSIDWithError:", &v8);
  id v5 = v8;
  if (v5)
  {
    id v6 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10017F16C();
    }
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v4, v5);
  }
}

void sub_1000358C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100035978;
  v8[3] = &unk_100227BF8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v4;
  id v7 = v4;
  objc_msgSend(v5, "_tq_legacyAnisetteDataForDSID:withCompletion:", v6, v8);
}

uint64_t sub_100035978(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  dispatch_queue_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100035CD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100035D88;
  v7[3] = &unk_100227C20;
  id v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v6 = v4;
  objc_msgSend(v5, "_tq_provisionAnisetteWithCompletion:", v7);
}

uint64_t sub_100035D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  dispatch_queue_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100035EA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10017F520(v5, v8);
    }

    id v9 = +[AKURLSession sharedAnisetteFreeURLSession];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100036028;
    v14[3] = &unk_100227C70;
    id v10 = *(void **)(a1 + 40);
    v14[4] = *(void *)(a1 + 32);
    id v15 = v10;
    id v16 = *(id *)(a1 + 48);
    id v11 = [v9 beginDataTaskWithRequest:v5 completionHandler:v14];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017F4EC();
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      id v13 = +[NSError ak_anisetteErrorWithCode:-8005 underlyingError:v6];
      (*(void (**)(uint64_t, void, void *, void, void, void))(v12 + 16))(v12, 0, v13, 0, 0, 0);
    }
  }
}

id sub_100036028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _processStartProvisioningData:a2 withResponse:a3 error:a4 previousTransactionId:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_10003646C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_processStartProvisioningResponse:error:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_10003689C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10017F7A4(v5, v8);
    }

    id v9 = +[AKURLSession sharedAnisetteFreeURLSession];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100036A3C;
    v16[3] = &unk_100227CC0;
    id v10 = *(void **)(a1 + 40);
    void v16[4] = *(void *)(a1 + 32);
    id v17 = v10;
    int v19 = *(_DWORD *)(a1 + 64);
    long long v15 = *(_OWORD *)(a1 + 48);
    id v11 = (id)v15;
    long long v18 = v15;
    id v12 = [v9 beginDataTaskWithRequest:v5 completionHandler:v16];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017F770();
    }

    [*(id *)(a1 + 32) _cleanUpCPIMBytes:*(void *)(a1 + 56) provisioningContext:*(unsigned int *)(a1 + 64)];
    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      id v14 = +[NSError ak_anisetteErrorWithCode:-8005 underlyingError:v6];
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v14);
    }
  }
}

id sub_100036A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _processEndProvisioningData:a2 withResponse:a3 error:a4 previousTransactionId:*(void *)(a1 + 40) cpimBytes:*(void *)(a1 + 56) provisioningContext:*(unsigned int *)(a1 + 64) completion:*(void *)(a1 + 48)];
}

id sub_100036E9C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _endProvisioningWithPreviousTransactionId:*(void *)(a1 + 40) cpimData:a4 cpimBytes:a6 provisioningContext:a5 completion:*(void *)(a1 + 48)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_100036ECC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_processEndProvisioningResponse:error:cpimBytes:provisioningContext:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 64), *(unsigned int *)(a1 + 72), *(void *)(a1 + 56));
}

id sub_1000375D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _endProvisioningWithPreviousTransactionId:0 cpimData:a4 cpimBytes:a6 provisioningContext:a5 completion:*(void *)(a1 + 40)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000377B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000378C8;
    v9[3] = &unk_100227D88;
    id v10 = *(id *)(a1 + 32);
    [a2 enumerateKeysAndObjectsUsingBlock:v9];
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, 1, v5);
    }
  }
  else
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10017FB1C();
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v5);
    }
  }
}

id sub_1000378C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forHTTPHeaderField:a2];
}

void sub_1000379CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100037A84;
  v8[3] = &unk_100227C20;
  id v9 = *(id *)(a1 + 48);
  id v10 = v4;
  id v7 = v4;
  objc_msgSend(v5, "_tq_syncAnisetteWithSIMData:completion:", v6, v8);
}

uint64_t sub_100037A84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  dispatch_queue_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100037B90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = +[AKNativeAnisetteServiceTrafficManager sharedSigningService];
    uint64_t v8 = [v7 trafficQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100037CEC;
    block[3] = &unk_100227A18;
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(a1 + 40);
    id v16 = v9;
    uint64_t v17 = v10;
    id v18 = v11;
    dispatch_async(v8, block);

    id v12 = v16;
LABEL_7:

    goto LABEL_8;
  }
  uint64_t v13 = _AKLogSystem();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_10017FB84();
  }

  uint64_t v14 = *(void *)(a1 + 40);
  if (v14)
  {
    id v12 = +[NSError ak_anisetteErrorWithCode:-8005 underlyingError:v6];
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v12);
    goto LABEL_7;
  }
LABEL_8:
}

void sub_100037CEC(void *a1)
{
  uint64_t v2 = +[AKURLSession sharedAnisetteFreeURLSession];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100037DAC;
  v6[3] = &unk_100227DD8;
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[6];
  v6[4] = a1[5];
  id v7 = v4;
  id v5 = [v2 beginDataTaskWithRequest:v3 completionHandler:v6];
}

void sub_100037DAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10017FBB8();
    }
LABEL_10:

    uint64_t v14 = 0;
    goto LABEL_11;
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v12 = _AKLogSystem();
  uint64_t v10 = v12;
  if ((isKindOfClass & 1) == 0)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10017F830();
    }
    goto LABEL_10;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 statusCode]);
    int v15 = 138412290;
    id v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Sync provisioning response code: %@", (uint8_t *)&v15, 0xCu);
  }
  uint64_t v14 = +[AAFSerialization dictionaryFromObject:v7 ofType:@"application/x-plist"];
LABEL_11:
  [*(id *)(a1 + 32) _processSyncAnisetteResponse:v14 completion:*(void *)(a1 + 40)];
}

void sub_100038708(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleaning up ADI session objects...", v3, 2u);
  }

  if (*(void *)(a1 + 32)) {
    +[AKADIProxy dispose:](AKADIProxy, "dispose:");
  }
  if (*(void *)(a1 + 40)) {
    +[AKADIProxy dispose:](AKADIProxy, "dispose:");
  }
}

uint64_t sub_100038798(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if ((a2 & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v7);
  }

  return _objc_release_x2();
}

void sub_1000388E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100038994;
  v7[3] = &unk_100227C20;
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v4;
  id v6 = v4;
  objc_msgSend(v5, "_tq_eraseAnisetteWithCompletion:", v7);
}

uint64_t sub_100038994(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100038CA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x3032000000;
    int v19 = sub_10000F890;
    id v20 = sub_10000F798;
    id v21 = +[NSMutableURLRequest requestWithURL:v5];
    [(id)v17[5] setHTTPMethod:@"POST"];
    v22[0] = AKRequestHeadersKey;
    v22[1] = AKRequestBodyKey;
    v23[0] = &__NSDictionary0__struct;
    v23[1] = &__NSDictionary0__struct;
    id v7 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:2];
    objc_msgSend((id)v17[5], "ak_setBodyWithParameters:", v7);
    if (*(void *)(a1 + 32)) {
      objc_msgSend((id)v17[5], "ak_addPreviousTransactionIdHeader:");
    }
    uint64_t v8 = AKURLBagKeyStartProvisioning;
    [*(id *)(a1 + 40) _signRequestWithProvisioningHeaders:v17[5] forUrlKey:AKURLBagKeyStartProvisioning];
    uint64_t v9 = v17[5];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100038F28;
    v13[3] = &unk_100227E48;
    uint64_t v10 = *(void **)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    int v15 = &v16;
    [v10 _signWithBAAHeadersIfNeededForKey:v8 withRequest:v9 completion:v13];

    _Block_object_dispose(&v16, 8);
  }
  else
  {
    id v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100180028();
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v6);
    }
  }
}

void sub_100038F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100038F28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), 0);
  }
  return result;
}

void sub_100039068(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = +[NSMutableURLRequest requestWithURL:a2];
    [v6 setHTTPMethod:@"POST"];
    id v7 = [*(id *)(a1 + 32) base64EncodedStringWithOptions:0];
    v22[0] = &__NSDictionary0__struct;
    v21[0] = AKRequestHeadersKey;
    v21[1] = AKRequestBodyKey;
    CFStringRef v19 = @"cpim";
    id v20 = v7;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    v22[1] = v8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:2];

    objc_msgSend(v6, "ak_setBodyWithParameters:", v9);
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v6, "ak_addPreviousTransactionIdHeader:");
    }
    uint64_t v10 = AKURLBagKeyEndProvisioning;
    [*(id *)(a1 + 48) _signRequestWithProvisioningHeaders:v6 forUrlKey:AKURLBagKeyEndProvisioning];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000392A0;
    v16[3] = &unk_100227250;
    id v11 = *(void **)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    id v17 = v6;
    id v18 = v12;
    id v13 = v6;
    [v11 _signWithBAAHeadersIfNeededForKey:v10 withRequest:v13 completion:v16];
  }
  else
  {
    id v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10018005C();
    }

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15) {
      (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0, v5);
    }
  }
}

uint64_t sub_1000392A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0);
  }
  return result;
}

void sub_1000393E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = +[NSMutableURLRequest requestWithURL:a2];
    [v6 setHTTPMethod:@"POST"];
    [*(id *)(a1 + 32) _signRequestWithProvisioningHeaders:v6 forUrlKey:AKURLBagKeySyncAnisette];
    id v7 = [*(id *)(a1 + 40) base64EncodedStringWithOptions:0];
    uint64_t v8 = [*(id *)(a1 + 48) base64EncodedStringWithOptions:0];
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v10 = v9;
    if (v8) {
      [v9 setObject:v8 forKeyedSubscript:@"srm"];
    }
    if (v7) {
      [v10 setObject:v7 forKeyedSubscript:@"X-Apple-I-MD-M"];
    }
    if (*(void *)(a1 + 64))
    {
      id v11 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [v10 setObject:v11 forKeyedSubscript:@"X-Apple-I-MD-RINFO"];
    }
    v16[0] = AKRequestHeadersKey;
    v16[1] = AKRequestBodyKey;
    v17[0] = &__NSDictionary0__struct;
    v17[1] = v10;
    id v12 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
    objc_msgSend(v6, "ak_setBodyWithParameters:", v12);
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v6, 0);
    }
  }
  else
  {
    id v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100180090();
    }

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15) {
      (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0, v5);
    }
  }
}

void sub_100039748(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100039774(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

NSDictionary *__cdecl sub_10003AB04(id a1, AKTrustedContact *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:3];
  id v4 = [(AKTrustedContact *)v2 uuid];
  id v5 = [v4 UUIDString];
  [v3 setObject:v5 forKeyedSubscript:@"uuid"];

  id v6 = [(AKTrustedContact *)v2 hashedWrappingKeyRKC];
  [v3 setObject:v6 forKeyedSubscript:@"hashWrappingKeyRKC"];

  id v7 = [(AKTrustedContact *)v2 status];
  uint64_t v8 = +[NSNumber numberWithInteger:v7];
  [v3 setObject:v8 forKeyedSubscript:@"status"];

  return (NSDictionary *)v3;
}

void sub_10003CA8C(id a1)
{
  qword_100272390 = objc_alloc_init(AKPostInstallService);

  _objc_release_x1();
}

void sub_10003CBD8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  id v5 = _AKLogSystem();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (state != 2)
  {
    if (v6)
    {
      id v9 = +[NSNumber numberWithLong:state];
      *(_DWORD *)buf = 138412290;
      id v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity registration complete. State: %@.", buf, 0xCu);
    }
    goto LABEL_8;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity says os got upgraded, running Post Install Job", buf, 2u);
  }

  if (xpc_activity_set_state(v3, 4))
  {
    id v7 = (void *)os_transaction_create();
    uint64_t v8 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10003CD84;
    v10[3] = &unk_100226C00;
    id v11 = v3;
    id v12 = v7;
    id v5 = v7;
    [v8 _performPostInstallWithCompletion:v10];

LABEL_8:
  }
}

void sub_10003CD84(uint64_t a1)
{
  xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
  id v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "XPC activity for post install complete", v2, 2u);
  }
}

void sub_10003D1FC(uint64_t a1, int a2)
{
  id v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Satori Warmup for Post Install complete with result: %i", (uint8_t *)v5, 8u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003D2B4(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AKAppleIDCheckInHelperService finished performHeartbeatCheckIn after OS upgrade...", buf, 2u);
  }

  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10003D394;
  v5[3] = &unk_100226FB8;
  id v6 = *(id *)(a1 + 48);
  [v3 fetchUserInfoForAltDSID:v4 completion:v5];
}

void sub_10003D394(uint64_t a1)
{
}

uint64_t sub_10003D39C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10003D3B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003D4DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AKUserInfoController finished fetchUserInfo after OS upgrade...", v10, 2u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    sub_1001806A8((uint64_t)v6, v8);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
}

void sub_10003D6E4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v6) {
    [*(id *)(a1 + 32) _updateContext:v6 serviceName:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10003D9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003D9D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100180720(a1, v3, v5);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 32) description];
    int v9 = 138412290;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Walrus web context %@ updated successfully.", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;
}

void sub_10003DDCC(uint64_t a1, void *a2, void *a3)
{
  id v31 = a2;
  id v5 = a3;
  if (v31
    && ([*(id *)(a1 + 32) deviceRequestContext],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        v6))
  {
    id v7 = [objc_alloc((Class)NSURLComponents) initWithURL:v31 resolvingAgainstBaseURL:0];
    uint64_t v8 = +[NSMutableArray array];
    int v9 = [*(id *)(a1 + 32) deviceRequestContext];
    unsigned int v10 = [v9 includeUntrustedDevices];

    if (v10)
    {
      id v11 = +[NSURLQueryItem queryItemWithName:@"allDevices" value:AKTrueValue];
      [v8 addObject:v11];
    }
    id v12 = [*(id *)(a1 + 32) deviceRequestContext];
    unsigned int v13 = [v12 includeFamilyDevices];

    if (v13)
    {
      id v14 = +[NSURLQueryItem queryItemWithName:@"includeFamily" value:AKTrueValue];
      [v8 addObject:v14];
    }
    uint64_t v15 = [*(id *)(a1 + 32) deviceRequestContext];
    uint64_t v16 = [v15 services];
    id v17 = [v16 count];

    if (v17)
    {
      id v18 = [*(id *)(a1 + 32) deviceRequestContext];
      CFStringRef v19 = [v18 services];
      id v20 = [v19 componentsJoinedByString:@","];

      id v21 = +[NSURLQueryItem queryItemWithName:@"services" value:v20];
      [v8 addObject:v21];
    }
    id v22 = [*(id *)(a1 + 32) deviceRequestContext];
    uint64_t v23 = [v22 operatingSystems];
    id v24 = [v23 count];

    if (v24)
    {
      id v25 = [*(id *)(a1 + 32) deviceRequestContext];
      id v26 = [v25 operatingSystems];
      id v27 = [v26 componentsJoinedByString:@","];

      id v28 = +[NSURLQueryItem queryItemWithName:@"oses" value:v27];
      [v8 addObject:v28];
    }
    if ([v8 count]) {
      [v7 setQueryItems:v8];
    }
    uint64_t v29 = *(void *)(a1 + 40);
    unsigned int v30 = [v7 URL];
    (*(void (**)(uint64_t, void *, void))(v29 + 16))(v29, v30, 0);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10003E15C(id a1)
{
  id v1 = +[NSBundle mainBundle];
  id v5 = [v1 bundleIdentifier];

  uint64_t v2 = +[AAFAnalyticsTransportRTC analyticsTransportRTCWithClientType:&off_10023AFD8 clientBundleId:v5 clientName:@"com.apple.aaa.dnu"];
  uint64_t v3 = +[AAFAnalyticsReporter analyticsReporterWithTransport:v2];
  uint64_t v4 = (void *)qword_1002723A0;
  qword_1002723A0 = v3;
}

void sub_10003E430(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100180980(a1);
  }

  objc_msgSend(*(id *)(a1 + 32), "_unsafe_resumeEngineTimeoutSource");
  uint64_t v3 = [*(id *)(a1 + 32) engine];
  [v3 prepareWithController:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_10003E528(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100180A14(a1);
  }

  uint64_t v3 = [*(id *)(a1 + 32) engine];
  [v3 activate];
}

id sub_10003E610(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_InvalidateEngine");
}

void sub_10003E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003E6E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engine];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isActivated];
}

void sub_10003EA08(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100180CAC();
  }
}

void sub_10003EA60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100180D14();
  }
}

void sub_10003EAB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100180D7C();
  }

  objc_msgSend(WeakRetained, "_unsafe_InvalidateEngine");
}

id sub_10003EE8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_cancelEngineTimeoutSource");
}

void sub_10003EF3C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_10003F140(id a1)
{
  qword_1002723B0 = objc_alloc_init(AKAuthorizationSessionManager);

  _objc_release_x1();
}

void sub_10003F4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003F4C0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = _AKLogSiwa();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_1001810C4();
  }

  unsigned int v10 = [v8 sessionID];
  id v11 = [*(id *)(a1 + 32) _sessionID];
  unsigned int v12 = [v10 isEqualToString:v11];

  if (v12)
  {
    unsigned int v13 = _AKLogSiwa();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = [v8 sessionID];
      uint64_t v15 = [v8 client];
      int v19 = 138412546;
      id v20 = v14;
      __int16 v21 = 2112;
      id v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found an exising context with session ID(%@), %@", (uint8_t *)&v19, 0x16u);
    }
    uint64_t v16 = [v8 client];
    uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    *a4 = 1;
  }
}

void sub_10003F84C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) bundleID];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 40) _clientBundleIDForContext:*(void *)(a1 + 48) client:*(void *)(a1 + 32)];
    uint64_t v4 = [*(id *)(a1 + 40) _activeSessionForContext:*(void *)(a1 + 48) client:*(void *)(a1 + 32)];
    id v5 = _AKLogSiwa();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_1001812A8();
    }

    if (v4)
    {
      id v6 = _AKLogSiwa();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        sub_100181240();
      }

      uint64_t v7 = +[NSError ak_errorWithCode:-7071];
      uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
      int v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      unsigned int v12 = +[NSUUID UUID];
      unsigned int v13 = [v12 UUIDString];

      objc_msgSend(*(id *)(a1 + 48), "set_sessionID:", v13);
      id v14 = objc_alloc_init(AKAuthorizationSession);
      uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setSessionID:v13];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setCompletionHandler:*(void *)(a1 + 56)];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setContext:*(void *)(a1 + 48)];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setClientBundleID:v3];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setClient:*(void *)(a1 + 32)];
      uint64_t v17 = _AKLogSiwa();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        int v25 = 138412290;
        uint64_t v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AuthorizationSessionManager - Processing clearance request: %@", (uint8_t *)&v25, 0xCu);
      }

      int v19 = +[NSDate date];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setRequestTime:v19];

      id v20 = _AKLogSiwa();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        sub_1001811D8();
      }

      [*(id *)(*(void *)(a1 + 40) + 8) setObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) forKeyedSubscript:v3];
      if ([*(id *)(a1 + 48) _clientShouldAuthenticateExternally])
      {
        __int16 v21 = _AKLogSiwa();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          sub_1001811A4();
        }

        uint64_t v22 = os_transaction_create();
        uint64_t v23 = *(void *)(a1 + 40);
        id v24 = *(void **)(v23 + 32);
        *(void *)(v23 + 32) = v22;
      }
    }
  }
  else
  {
    unsigned int v10 = _AKLogSiwa();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      sub_10018112C();
    }

    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v3 = +[NSError ak_errorWithCode:-7074];
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v3);
  }
}

void sub_10003FBD8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    uint64_t v3 = [v2 completionHandler];
    v3[2](v3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
}

void sub_10003FD3C(uint64_t a1)
{
  id v2 = _AKLogSiwa();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1001813C4();
  }

  uint64_t v3 = [*(id *)(a1 + 40) _clientBundleIDForContext:*(void *)(a1 + 32) client:*(void *)(a1 + 48)];
  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 8) objectForKeyedSubscript:v3];
  id v5 = *(NSObject **)(*(void *)(a1 + 40) + 16);
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003FFA8;
    block[3] = &unk_100227BA8;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    dispatch_async(v5, block);
    if ([*(id *)(a1 + 32) _clientShouldAuthenticateExternally])
    {
      id v6 = _AKLogSiwa();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        sub_100181390();
      }

      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void **)(v7 + 32);
      *(void *)(v7 + 32) = 0;
    }
    int v9 = &v12;
    unsigned int v10 = _AKLogSiwa();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100181328();
    }

    [*(id *)(*(void *)(a1 + 40) + 8) removeObjectForKey:v3];
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10003FF40;
    v14[3] = &unk_100228040;
    int v9 = &v15;
    id v15 = *(id *)(a1 + 56);
    dispatch_sync(v5, v14);
  }
}

void sub_10003FF40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7099];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10003FFA8(uint64_t a1)
{
  id v2 = _AKLogSiwa();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100181430();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000403E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7074];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100040450(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7099];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000404BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7099];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100040528(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7098];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100040594(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) userResponse];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_1000409E0()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_1002723C0;
  uint64_t v5 = qword_1002723C0;
  if (!qword_1002723C0)
  {
    long long v6 = *(_OWORD *)off_100228230;
    long long v7 = *(_OWORD *)&off_100228240;
    v3[3] = _sl_dlopen();
    qword_1002723C0 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_100040AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100040B08(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002723C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100040B98()
{
  uint64_t v0 = sub_1000409E0();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_100040BF4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002723C8;
  uint64_t v7 = qword_1002723C8;
  if (!qword_1002723C8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100040CD8;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100040CD8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100040CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100040CD8(uint64_t a1)
{
  sub_100040B98();
  Class result = objc_getClass("IDSService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002723C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100181718();
    return (Class)sub_100040D30();
  }
  return result;
}

id sub_100040D30()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002723D0;
  uint64_t v7 = qword_1002723D0;
  if (!qword_1002723D0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100040E14;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100040E14((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100040DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100040E14(uint64_t a1)
{
  sub_100040B98();
  Class result = objc_getClass("IDSMessageContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002723D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_100181740();
    return (Class)sub_100040E6C(v3);
  }
  return result;
}

id sub_100040E6C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002723D8;
  uint64_t v7 = qword_1002723D8;
  if (!qword_1002723D8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100040F50;
    v3[3] = &unk_100226E40;
    v3[4] = &v4;
    sub_100040F50((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100040F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100040F50(uint64_t a1)
{
  sub_100040B98();
  Class result = objc_getClass("IDSDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002723D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_100181768();
    return (Class)sub_100040FA8(v3);
  }
  return result;
}

uint64_t sub_100040FA8()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002723E0;
  uint64_t v6 = qword_1002723E0;
  if (!qword_1002723E0)
  {
    id v1 = (void *)sub_100040B98();
    v4[3] = (uint64_t)dlsym(v1, "IDSDefaultPairedDevice");
    qword_1002723E0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100041080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100041098(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100040B98();
  Class result = dlsym(v2, "IDSDefaultPairedDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002723E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000410E8()
{
  uint64_t v0 = (void **)sub_100040FA8();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_10004111C();
  }
}

uint64_t sub_10004111C()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002723E8;
  uint64_t v6 = qword_1002723E8;
  if (!qword_1002723E8)
  {
    id v1 = (void *)sub_100040B98();
    v4[3] = (uint64_t)dlsym(v1, "IDSSendMessageOptionBypassDuetKey");
    qword_1002723E8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000411F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10004120C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100040B98();
  Class result = dlsym(v2, "IDSSendMessageOptionBypassDuetKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002723E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10004125C()
{
  uint64_t v0 = (void **)sub_10004111C();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100041290();
  }
}

uint64_t sub_100041290()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002723F0;
  uint64_t v6 = qword_1002723F0;
  if (!qword_1002723F0)
  {
    id v1 = (void *)sub_100040B98();
    v4[3] = (uint64_t)dlsym(v1, "IDSSendMessageOptionEnforceRemoteTimeoutsKey");
    qword_1002723F0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100041368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100041380(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100040B98();
  Class result = dlsym(v2, "IDSSendMessageOptionEnforceRemoteTimeoutsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002723F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000413D0()
{
  uint64_t v0 = (void **)sub_100041290();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100041404();
  }
}

uint64_t sub_100041404()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1002723F8;
  uint64_t v6 = qword_1002723F8;
  if (!qword_1002723F8)
  {
    id v1 = (void *)sub_100040B98();
    v4[3] = (uint64_t)dlsym(v1, "IDSSendMessageOptionTimeoutKey");
    qword_1002723F8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000414DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000414F4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100040B98();
  Class result = dlsym(v2, "IDSSendMessageOptionTimeoutKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002723F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100041544()
{
  uint64_t v0 = (void **)sub_100041404();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)+[_AKMessage typeForMessageWithTransportRepresentation:v5];
  }
}

void sub_100041DA0(id a1)
{
  qword_100272400 = objc_alloc_init(AKPeerIDSAnisetteService);

  _objc_release_x1();
}

void sub_10004200C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (v6)
  {
    uint64_t v8 = +[NSSet setWithObject:objc_opt_class()];
    int v9 = +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:v8 fromData:v6 error:0];

    unsigned int v10 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100181838();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v11 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001817D0();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100042258(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  int v9 = _AKLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109634;
    int v18 = a2;
    __int16 v19 = 2112;
    id v20 = v7;
    __int16 v21 = 2112;
    id v22 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Peer attestation fetch didSucceed:%d data:%@ error:%@", buf, 0x1Cu);
  }

  if (v7)
  {
    unsigned int v10 = +[NSSet setWithObject:objc_opt_class()];
    id v16 = 0;
    uint64_t v11 = +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:v10 fromData:v7 error:&v16];
    id v12 = v16;

    if (v12)
    {
      id v13 = _AKLogSystem();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_1001819D8();
      }
    }
    id v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      sub_100181970();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v15 = _AKTrafficLogSubsystem();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100181908();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t sub_10004254C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100042630(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100042714(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100042808(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    SEL v4 = +[NSSet setWithObject:objc_opt_class()];
    id v5 = +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:v4 fromData:v6 error:0];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100042AD4(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v31 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Command message ready for sending to to paired device: %@", buf, 0xCu);
  }

  SEL v4 = [*(id *)(a1 + 40) _activePairedTinkerDevice];
  if (!v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting paired device.", buf, 2u);
    }

    SEL v4 = sub_1000410E8();
  }
  id v6 = *(void **)(*(void *)(a1 + 40) + 8);
  id v7 = [*(id *)(a1 + 32) transportRepresentation];
  id v8 = +[NSSet setWithObject:v4];
  uint64_t v9 = *(void *)(a1 + 48);
  id v26 = 0;
  id v27 = 0;
  unsigned __int8 v10 = [v6 sendMessage:v7 toDestinations:v8 priority:300 options:v9 identifier:&v27 error:&v26];
  id v11 = v27;
  id v12 = v26;

  id v13 = _AKLogSystem();
  id v14 = v13;
  if (v10)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Message is on its way to paired device with transport ID: %@", buf, 0xCu);
    }

    id v15 = *(void **)(*(void *)(a1 + 40) + 24);
    id v16 = objc_retainBlock(*(id *)(a1 + 56));
    uint64_t v17 = [*(id *)(a1 + 32) identifier];
    [v15 setObject:v16 forKey:v17];

    int v18 = *(void **)(*(void *)(a1 + 40) + 32);
    id v19 = [*(id *)(a1 + 32) identifier];
    [v18 setObject:v19 forKey:v11];
  }
  else
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100181CD0();
    }

    if (v12)
    {
      NSErrorUserInfoKey v28 = NSUnderlyingErrorKey;
      id v29 = v12;
      id v20 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    }
    else
    {
      id v20 = 0;
    }
    __int16 v21 = dispatch_get_global_queue(21, 0);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100042E1C;
    v23[3] = &unk_1002279F0;
    id v22 = *(id *)(a1 + 56);
    id v24 = v20;
    id v25 = v22;
    id v19 = v20;
    dispatch_async(v21, v23);
  }
}

void sub_100042E1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = +[NSError errorWithDomain:AKAnisetteErrorDomain code:-8014 userInfo:*(void *)(a1 + 32)];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_100042F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100042FB4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 isActive])
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found active tinker device", v11, 2u);
    }

    uint64_t v8 = IDSCopyIDForDevice();
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    unsigned __int8 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    *a4 = 1;
  }
}

void sub_10004328C(uint64_t a1)
{
  id v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Will send reply message to paired device: %@", buf, 0xCu);
  }

  SEL v4 = *(void **)(*(void *)(a1 + 40) + 8);
  id v5 = [*(id *)(a1 + 32) transportRepresentation];
  id v6 = sub_1000410E8();
  id v7 = +[NSSet setWithObject:v6];
  uint64_t v8 = *(void *)(a1 + 48);
  id v14 = 0;
  id v15 = 0;
  id v9 = [v4 sendMessage:v5 toDestinations:v7 priority:300 options:v8 identifier:&v15 error:&v14];
  id v10 = v15;
  id v11 = v14;

  if ((v9 & 1) == 0)
  {
    id v12 = _AKLogSystem();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100181DA0();
    }
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if (v13) {
    (*(void (**)(uint64_t, id, id))(v13 + 16))(v13, v9, v11);
  }
}

uint64_t sub_100043694(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_1000438E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = nullsub_3;
  v9[3] = &unk_100228018;
  id v10 = *(id *)(a1 + 48);
  [v7 _replyToCommandMessageWithInternalID:v8 didSucceed:a2 returnData:a3 error:a4 completion:v9];
}

void sub_100043F9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = +[NSKeyedArchiver archivedDataWithRootObject:a2 requiringSecureCoding:1 error:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
}

uint64_t sub_10004404C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100044064(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10004407C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100044094(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = +[NSKeyedArchiver archivedDataWithRootObject:a2 requiringSecureCoding:1 error:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
}

void sub_100044144(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)AKAttestationData) initWithDictionary:v6];

  id v11 = 0;
  uint64_t v8 = +[NSKeyedArchiver archivedDataWithRootObject:v7 requiringSecureCoding:1 error:&v11];
  id v9 = v11;
  if (v9)
  {
    id v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100182030();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000444DC(uint64_t a1)
{
  id v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1001821B0(a1, v2, v3, v4, v5, v6, v7, v8);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = [*(id *)(a1 + 40) didSucceed];
  id v11 = [*(id *)(a1 + 40) returnData];
  id v12 = [*(id *)(a1 + 40) error];
  (*(void (**)(uint64_t, id, void *, void *))(v9 + 16))(v9, v10, v11, v12);
}

uint64_t sub_10004485C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_1000448E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

uint64_t start()
{
  uint64_t v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "akd is starting up...", buf, 2u);
  }

  id v2 = +[AKDaemonConnectionManager sharedInstance];
  [v2 start];

  uint64_t v3 = +[NSRunLoop mainRunLoop];
  [v3 run];

  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "akd is shutting down...", v6, 2u);
  }

  return 0;
}

void sub_1000451A4(uint64_t a1, uint64_t a2)
{
  id v3 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  [*(id *)(a1 + 32) addObject:v3];
}

void sub_100045918(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem();
  uint64_t v8 = v7;
  if (!v5 || v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001824E4();
    }

    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v8 = +[NSError ak_errorWithCode:-7034];
    [v9 _callCompletionWithResults:0 password:0 additionalData:0 error:v8];
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    sub_100182564();
  }
}

void sub_100047064(id a1)
{
  id v5 = +[AKFollowUpProviderFactory sharedAuthKitFollowupProvider];
  id v1 = objc_alloc_init((Class)AKFollowUpFactoryImpl);
  [v1 setExtensionIdentifier:AKFollowUpServerUIExtensionIdentifier];
  id v2 = [[AKFollowUpManager alloc] initWithFollowUpFactory:v1 provider:v5];
  id v3 = (void *)qword_100272410;
  qword_100272410 = (uint64_t)v2;

  uint64_t v4 = objc_alloc_init(AKFollowUpControllerServiceProviderImpl);
  [(id)qword_100272410 setServiceProvider:v4];
}

void sub_10004749C(id a1)
{
  qword_100272420 = objc_alloc_init(AKCarrierBundleUtilities);

  _objc_release_x1();
}

id sub_100047A68(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  uint64_t v4 = [*(id *)(a1 + 32) uuid];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_100047ED8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setResponseCode:", objc_msgSend(v10, "statusCode"));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 16))();
}

void sub_1000481BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [*(id *)(a1 + 32) _urlSession];
    objc_initWeak(&location, *(id *)(a1 + 32));
    uint64_t v8 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100048360;
    v10[3] = &unk_100228528;
    objc_copyWeak(&v13, &location);
    char v14 = *(unsigned char *)(a1 + 48);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v5;
    id v12 = *(id *)(a1 + 40);
    [v8 _executeURLRequest:v11 withSession:v7 completion:v10];

    objc_destroyWeak(&v13);
    objc_destroyWeak(&location);
  }
  else
  {
    id v9 = _AKLogSystem();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100182998(a1, (uint64_t)v6, v9);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100048344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048360(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!*(unsigned char *)(a1 + 64) || !objc_msgSend(v12, "ak_isAuthenticationErrorWithCode:", -7026))
  {
    uint64_t v16 = *(void *)(a1 + 48);
    if (!v16) {
      goto LABEL_10;
    }
    uint64_t v17 = *(void (**)(void))(v16 + 16);
LABEL_9:
    v17();
    goto LABEL_10;
  }
  char v14 = _AKLogSystem();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_100182AC8();
  }

  id v15 = [WeakRetained authenticationHandler];

  if (v15)
  {
    [WeakRetained _reauthenticateAndExecuteWithCompletion:*(void *)(a1 + 48)];
    goto LABEL_10;
  }
  int v18 = _AKLogSystem();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    sub_100182A50((uint64_t)WeakRetained, v18);
  }

  uint64_t v19 = *(void *)(a1 + 48);
  if (v19)
  {
    uint64_t v17 = *(void (**)(void))(v19 + 16);
    goto LABEL_9;
  }
LABEL_10:
}

void sub_100048628(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  objc_opt_class();
  id v10 = v8;
  if (objc_opt_isKindOfClass()) {
    id v11 = v10;
  }
  else {
    id v11 = 0;
  }

  id v12 = [*(id *)(a1 + 32) urlRequestProvider];
  id v20 = 0;
  unsigned int v13 = [v12 validateResponseData:v7 error:&v20];
  id v14 = v20;

  id v15 = [*(id *)(a1 + 32) urlRequestProvider];
  uint64_t v16 = [v15 responseDictionaryWithData:v7 error:0];

  if (v9)
  {
    if (v13)
    {
      id v17 = v9;
LABEL_11:
      int v18 = v17;
      goto LABEL_12;
    }
    uint64_t v19 = [v14 userInfo];
    int v18 = objc_msgSend(v9, "ak_errorByAppendingUserInfo:", v19);
  }
  else
  {
    if ((v13 & 1) == 0)
    {
      id v17 = v14;
      goto LABEL_11;
    }
    int v18 = 0;
  }
LABEL_12:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100048844(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_100182C88(a1, v7);
    }

    [*(id *)(a1 + 32) _executeAllowingReauthentication:0 completion:*(void *)(a1 + 40)];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100182D04();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_100048B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forHTTPHeaderField:a2];
}

void sub_100048C64(id a1)
{
  qword_100272430 = objc_alloc_init(AKWebSessionPCSKeyProvider);

  _objc_release_x1();
}

void sub_100048F34(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PCS auth context saved successfully in keychain.", v8, 2u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100182D84(v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100049188(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PCS auth context updated successfully in keychain.", v8, 2u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100182E08(v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000493A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 value];

  id v8 = _AKLogSystem();
  id v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Keychain item found for given auth context. Checking if it's still valid...", buf, 2u);
    }

    uint64_t v10 = objc_opt_class();
    id v11 = [v5 value];
    id v19 = 0;
    id v12 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v10 fromData:v11 error:&v19];
    id v13 = v19;

    if (v13)
    {
      id v14 = _AKLogSystem();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100182F54(v6);
      }

      id v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      if (![v12 isValid])
      {
        uint64_t v16 = _AKLogSystem();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          sub_100182F10(v16);
        }

        [*(id *)(a1 + 32) _removeAllExpiredPCSCredentials];
        uint64_t v17 = *(void *)(a1 + 40);
        int v18 = +[NSError errorWithDomain:AKWalrusErrorDomain code:-5002 userInfo:0];
        (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);

        goto LABEL_14;
      }
      id v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    v15();
LABEL_14:

    goto LABEL_15;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_100182E8C(v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_15:
}

void sub_100049648(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[AKKeychainItemDescriptor pcsAuthDescriptor];
  [v1 _removeCredentialWithDescriptor:v2];
}

id sub_100049848(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = *(void **)(v2 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1000498BC;
  v5[3] = &unk_1002285E8;
  void v5[4] = v2;
  return [v3 fetchKeychainItemsWithDescriptor:v1 completion:v5];
}

void sub_1000498BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100183060(v5);
    }
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100049988;
    v7[3] = &unk_1002285C0;
    void v7[4] = *(void *)(a1 + 32);
    [a2 enumerateObjectsUsingBlock:v7];
  }
}

void sub_100049988(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 value];

  if (v4)
  {
    uint64_t v5 = objc_opt_class();
    id v6 = [v3 value];
    id v11 = 0;
    id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v5 fromData:v6 error:&v11];
    id v8 = v11;

    if (!v8 && ([v7 isValid] & 1) == 0)
    {
      id v9 = +[AKKeychainItemDescriptor pcsAuthDescriptor];
      uint64_t v10 = [v7 webSessionIdentifier];
      [v9 setAccount:v10];

      [*(id *)(a1 + 32) _removeCredentialWithDescriptor:v9];
    }
  }
}

void sub_100049AA4(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = _AKLogSystem();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001830E4(v3);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "All pcs credentials deleted successfully from keychain.", v6, 2u);
  }
}

void sub_10004A04C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("AKAuthVerificationQueue", v3);
  uint64_t v2 = (void *)qword_100272440;
  qword_100272440 = (uint64_t)v1;
}

void sub_10004A1E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 allAccountNames];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10004A564(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) authKitAccountWithAltDSID:*(void *)(a1 + 40) error:0];
  if (v2)
  {
    [*(id *)(a1 + 32) _setAuthKitAccount:v2 inUse:*(unsigned __int8 *)(a1 + 64) forService:*(void *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001831D0();
    }

    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = +[NSError ak_errorWithCode:-7023];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
}

void sub_10004A780(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) authKitAccountWithDSID:*(void *)(a1 + 40)];
  if (v2)
  {
    [*(id *)(a1 + 32) _setAuthKitAccount:v2 inUse:*(unsigned __int8 *)(a1 + 64) forService:*(void *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10018326C();
    }

    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = +[NSError ak_errorWithCode:-7023];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
  }
}

void sub_10004AC2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    uint64_t v4 = _AKLogSystem();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100183370();
    }

    id v5 = [v3 userInfo];
    id v6 = +[NSError errorWithDomain:AKAppleIDAuthenticationErrorDomain code:-7001 userInfo:v5];
    (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0, v6);

    objc_end_catch();
    JUMPOUT(0x10004ABA8);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004AD00(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Removing unusued IDMS account %@...", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 24) store];
  id v5 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10004AE48;
  v6[3] = &unk_100227BD0;
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  [v4 removeAccount:v7 withCompletionHandler:v6];
}

void sub_10004AE48(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully removed account %@.", (uint8_t *)&v9, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_1001834A8();
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10004B080(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 dictionaryRepresentation];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10004B234(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = [a2 userInformationRepresentation];
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }
}

void sub_10004B400(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 userInformationRepresentation];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

uint64_t sub_10004B610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004B71C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if ([*(id *)(a1 + 40) _shouldShowAlertForAuthModeError:v7])
  {
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10004B81C;
    v10[3] = &unk_1002286F8;
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = a3;
    id v11 = v7;
    [v8 _showAlertForLoginError:v11 context:v9 completion:v10];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

uint64_t sub_10004B81C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[6], a1[7], a1[4]);
}

void sub_10004BA08(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem();
  id v11 = v10;
  if (!v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 141558274;
      uint64_t v32 = 1752392040;
      __int16 v33 = 2112;
      uint64_t v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Fetched device info for %{mask.hash}@", buf, 0x16u);
    }

    uint64_t v14 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
    if (v14)
    {
      id v30 = 0;
      id v15 = [objc_alloc((Class)AKDeviceSafetyRestrictionState) initWithResponse:v14 error:&v30];
      id v16 = v30;
      if (v16 || !v15)
      {
        id v20 = _AKLogSystem();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_100183604(v20, v21, v22, v23, v24, v25, v26, v27);
        }

        uint64_t v28 = *(void *)(a1 + 40);
        if (v28)
        {
          id v29 = +[NSError ak_deviceListErrorWithCode:-14005];
          (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0, v29);
        }
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 40);
        if (v17) {
          (*(void (**)(uint64_t, id, void))(v17 + 16))(v17, v15, 0);
        }
      }
    }
    else
    {
      int v18 = _AKLogSystem();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100183578();
      }

      uint64_t v19 = *(void *)(a1 + 40);
      if (!v19) {
        goto LABEL_23;
      }
      id v16 = +[NSError ak_deviceListErrorWithCode:-14005];
      (*(void (**)(uint64_t, void, id))(v19 + 16))(v19, 0, v16);
    }

LABEL_23:
    goto LABEL_24;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_100183674();
  }

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v9);
  }
LABEL_24:
}

void sub_10004BE80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100183710();
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      id v9 = *(void (**)(void))(v8 + 16);
LABEL_8:
      v9();
    }
  }
  else
  {
    [*(id *)(a1 + 32) updateWithDeviceRestrictionState:v5];
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10)
    {
      id v9 = *(void (**)(void))(v10 + 16);
      goto LABEL_8;
    }
  }
}

void sub_10004C128(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100183710();
    }

    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v9 = *(void (**)(void))(v8 + 16);
LABEL_10:
      v9();
    }
  }
  else if ([*(id *)(a1 + 32) fetchDeviceSafetyState])
  {
    [*(id *)(a1 + 40) _updateDeviceListResponseWithDeviceInfo:v5 completion:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      id v9 = *(void (**)(void))(v10 + 16);
      goto LABEL_10;
    }
  }
}

void sub_10004C1F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[AKFeatureManager sharedManager];
  if (([v7 isAuthenticatedRequestSerializationEnabled] & 1) == 0)
  {

LABEL_6:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_7;
  }
  uint64_t v8 = +[AKFeatureManager sharedManager];
  unsigned int v9 = [v8 isSilentAuthenticationRequestSerializationEnabled];

  if (!v9 || !objc_msgSend(v6, "ak_isAuthenticationErrorWithCode:", -7026)) {
    goto LABEL_6;
  }
  id v10 = [objc_alloc((Class)AKAppleIDAuthenticationContext) initWithAuthenticatedServerRequestContext:*(void *)(a1 + 32)];
  [v10 setAuthenticationType:1];
  objc_msgSend(v10, "set_ignoreShouldContinueProxy:", 1);
  id v11 = *(void **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10004C368;
  v12[3] = &unk_1002287C0;
  v12[4] = v11;
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 48);
  [v11 authenticateWithContext:v10 completion:v12];

LABEL_7:
}

void sub_10004C368(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    id v5 = (void *)a1[4];
    [v5 _performDeviceListRequestWithContext:v3 completion:v4];
  }
  else
  {
    uint64_t v6 = a1[6];
    id v7 = +[NSError ak_errorWithCode:-7026 underlyingError:a3];
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v7);
  }
}

void sub_10004C4D8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _deviceListProviderWithContext:*(void *)(a1 + 40)];
  uint64_t v3 = [[AKServiceControllerImpl alloc] initWithRequestProvider:v2];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10004C5B8;
  v5[3] = &unk_100228838;
  uint64_t v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  [(AKServiceControllerImpl *)v3 executeRequestWithCompletion:v5];
}

void sub_10004C5B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  unsigned int v9 = *(void **)(a1 + 40);
  id v10 = *(void **)(v8 + 40);
  uint64_t v11 = *(void *)(v8 + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004C6C0;
  v14[3] = &unk_100228810;
  void v14[4] = v8;
  id v15 = v9;
  id v16 = v7;
  id v17 = v6;
  id v18 = *(id *)(a1 + 48);
  id v12 = v6;
  id v13 = v7;
  [v10 endAuthenticatedRequestWithContext:v15 client:v11 clearanceHandler:v14];
}

id sub_10004C6C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleDeviceListResponseRequestContext:*(void *)(a1 + 40) responseError:*(void *)(a1 + 48) responseData:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10004CB10(uint64_t *a1)
{
  if ([(id)a1[4] type] == (id)3
    && [*(id *)(a1[5] + 8) hasServerOnlyDeviceListAccess])
  {
    id v6 = +[AKDeviceListStoreManager sharedManager];
    [v6 updateCacheWithContext:a1[4] deviceListResponse:a1[6] completionHandler:&stru_100228878];
  }
  else
  {
    id v6 = +[AKDeviceListStoreManager sharedManager];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[4];
    uint64_t v4 = +[AKAccountManager sharedInstance];
    id v5 = +[AKAnalyticsReporterRTC rtcAnalyticsReporter];
    [v6 verifyCacheSyncStatusFromResponse:v2 context:v3 accountManager:v4 reporter:v5 completionHandler:&stru_100228898];
  }
}

void sub_10004CC0C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = _AKLogSystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100183848();
  }
}

void sub_10004CC60(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1001838B0();
  }
}

uint64_t sub_10004D284(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10004D404(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004D698(void *a1)
{
  if ([*(id *)(a1[4] + 8) hasInternalAccess])
  {
    id v5 = [[AKDServerUIController alloc] initWithClient:*(void *)(a1[4] + 8)];
    [(AKDServerUIController *)v5 getServerUILoadDelegateWithContext:a1[5] completion:a1[6]];
  }
  else
  {
    uint64_t v2 = _AKLogSystem();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100183168();
    }

    uint64_t v3 = a1[6];
    uint64_t v4 = +[NSError ak_errorWithCode:-7026];
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
  }
}

void sub_10004D9B0(uint64_t a1)
{
  uint64_t v2 = _AKSignpostLogSystem();
  os_signpost_id_t v3 = _AKSignpostCreate();
  uint64_t v5 = v4;

  id v6 = _AKSignpostLogSystem();
  id v7 = v6;
  unint64_t v8 = v3 - 1;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, v3, "UpdateStateWithAuthResponse", " enableTelemetry=YES ", buf, 2u);
  }

  unsigned int v9 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    os_signpost_id_t v56 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BEGIN [%lld]: UpdateStateWithAuthResponse  enableTelemetry=YES ", buf, 0xCu);
  }

  if (([*(id *)(*(void *)(a1 + 32) + 8) hasWriteAccess] & 1) == 0)
  {
    uint64_t v21 = _AKLogSystem();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_100183A94();
    }

    id v14 = +[NSError ak_errorWithCode:-7026];
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    uint64_t v23 = _AKSignpostLogSystem();
    uint64_t v24 = v23;
    if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
    {
      unsigned int v25 = [(AKAuthenticationServerResponse *)v14 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v25;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_INTERVAL_END, v3, "UpdateStateWithAuthResponse", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    uint64_t v26 = _AKSignpostLogSystem();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
LABEL_33:
    unsigned int v35 = [(AKAuthenticationServerResponse *)v14 code];
    *(_DWORD *)buf = 134218496;
    os_signpost_id_t v56 = v3;
    __int16 v57 = 2048;
    double v58 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    __int16 v59 = 1026;
    unsigned int v60 = v35;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:UpdateStateWithAuthResponse  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
LABEL_34:

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_35;
  }
  if (!+[AKAppleIDServerResourceLoadDelegate signalFromServerResponse:*(void *)(a1 + 40)])
  {
    uint64_t v27 = _AKLogSystem();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_10018399C();
    }

    id v14 = +[NSError ak_errorWithCode:-7010];
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    uint64_t v28 = _AKSignpostLogSystem();
    id v29 = v28;
    if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v28))
    {
      unsigned int v30 = [(AKAuthenticationServerResponse *)v14 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v30;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, v3, "UpdateStateWithAuthResponse", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    uint64_t v26 = _AKSignpostLogSystem();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  id v10 = [*(id *)(a1 + 48) username];

  if (!v10)
  {
    id v31 = _AKLogSystem();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_1001839D0();
    }

    id v14 = +[NSError ak_errorWithCode:-7022];
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    uint64_t v32 = _AKSignpostLogSystem();
    __int16 v33 = v32;
    if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
    {
      unsigned int v34 = [(AKAuthenticationServerResponse *)v14 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v34;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_INTERVAL_END, v3, "UpdateStateWithAuthResponse", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    uint64_t v26 = _AKSignpostLogSystem();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v11 = [AKAuthenticationServerResponse alloc];
  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = [*(id *)(a1 + 48) username];
  id v14 = [(AKAuthenticationServerResponse *)v11 initWithServerResponse:v12 forAppleID:v13];

  id v15 = *(void **)(*(void *)(a1 + 32) + 24);
  id v16 = [*(id *)(a1 + 48) username];
  id v17 = [v15 authKitAccountWithAppleID:v16 error:0];

  if (v17) {
    goto LABEL_10;
  }
  uint64_t v36 = [(AKAuthenticationServerResponse *)v14 appleID];

  if (!v36) {
    goto LABEL_38;
  }
  uint64_t v37 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v38 = [(AKAuthenticationServerResponse *)v14 appleID];
  id v17 = [v37 authKitAccountWithAppleID:v38 error:0];

  if (v17)
  {
LABEL_10:
    id v18 = _AKLogSystem();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      os_signpost_id_t v56 = (os_signpost_id_t)v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating IDMS account %@ with external server auth response...", buf, 0xCu);
    }

    uint64_t v19 = [(id)objc_opt_class() _verificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004E220;
    block[3] = &unk_1002288C0;
    void block[4] = *(void *)(a1 + 32);
    id v49 = v17;
    uint64_t v50 = v14;
    id v51 = *(id *)(a1 + 48);
    os_signpost_id_t v53 = v3;
    uint64_t v54 = v5;
    id v52 = *(id *)(a1 + 56);
    id v20 = v17;
    dispatch_async(v19, block);
  }
  else
  {
LABEL_38:
    uint64_t v39 = _AKLogSystem();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      sub_100183A04((id *)(a1 + 48), v39);
    }

    id v20 = +[NSError ak_errorWithCode:-7023];
    uint64_t v40 = _AKSignpostGetNanoseconds();
    unsigned int v41 = _AKSignpostLogSystem();
    uint64_t v42 = v41;
    if (v8 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
    {
      unsigned int v43 = [v20 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v56) = v43;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_INTERVAL_END, v3, "UpdateStateWithAuthResponse", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    uint64_t v44 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v45 = [v20 code];
      *(_DWORD *)buf = 134218496;
      os_signpost_id_t v56 = v3;
      __int16 v57 = 2048;
      double v58 = (double)(unint64_t)v40 / 1000000000.0;
      __int16 v59 = 1026;
      unsigned int v60 = v45;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:UpdateStateWithAuthResponse  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
    }

    uint64_t v46 = *(void *)(a1 + 56);
    int v47 = +[NSError ak_errorWithCode:-7023];
    (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0, v47);
  }
LABEL_35:
}

void sub_10004E220(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  id v45 = 0;
  [v4 _updateAuthKitAccount:v2 withServerResponse:v5 context:v6 error:&v45];
  id v7 = v45;
  unint64_t v8 = _AKLogSystem();
  unsigned int v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100183AC8();
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    sub_100183B30();
  }

  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v11 = _AKSignpostLogSystem();
  uint64_t v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 72);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    unsigned int v14 = [v7 code];
    *(_DWORD *)buf = 67240192;
    LODWORD(v48) = v14;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "UpdateStateWithAuthResponse", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
  }

  id v15 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    double v16 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v17 = *(void *)(a1 + 72);
    unsigned int v18 = [v7 code];
    *(_DWORD *)buf = 134218496;
    uint64_t v48 = v17;
    __int16 v49 = 2048;
    double v50 = v16;
    __int16 v51 = 1026;
    unsigned int v52 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:UpdateStateWithAuthResponse  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
  }

  uint64_t v19 = [*(id *)(a1 + 48) serviceTokens];
  id v20 = [v19 count];
  uint64_t v21 = _AKLogSystem();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if (v20)
  {
    id v39 = v7;
    if (v22)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "External auth response contains GS service tokens. Will persist those...", buf, 2u);
    }

    uint64_t v23 = [v19 allKeys];
    id v24 = objc_alloc_init((Class)NSMutableDictionary);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v25 = v23;
    id v26 = [v25 countByEnumeratingWithState:&v41 objects:v46 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v42;
      do
      {
        for (i = 0; i != v27; i = (char *)i + 1)
        {
          if (*(void *)v42 != v28) {
            objc_enumerationMutation(v25);
          }
          uint64_t v30 = *(void *)(*((void *)&v41 + 1) + 8 * i);
          id v31 = objc_msgSend(v19, "objectForKeyedSubscript:", v30, v39);
          uint64_t v32 = [v31 stringValue];
          [v24 setObject:v32 forKeyedSubscript:v30];
        }
        id v27 = [v25 countByEnumeratingWithState:&v41 objects:v46 count:16];
      }
      while (v27);
    }

    __int16 v33 = *(void **)(a1 + 32);
    unsigned int v34 = [*(id *)(a1 + 48) altDSID];
    unsigned int v35 = [*(id *)(a1 + 48) dsid];
    uint64_t v36 = [*(id *)(a1 + 48) appleID];
    uint64_t v37 = *(void *)(a1 + 56);
    id v40 = 0;
    [v33 _persistGrandSlamServiceTokens:v24 forAltDSID:v34 DSID:v35 appleID:v36 forContext:v37 error:&v40];
    id v38 = v40;
    id v7 = v39;

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    if (v22)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "No GS service tokens to update. Done.", buf, 2u);
    }

    (*(void (**)(void, BOOL, id))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v7 == 0, v7);
  }
}

void sub_10004EB24()
{
  objc_end_catch();
  _Block_object_dispose(&v0, 8);
  _Block_object_dispose(&v1, 8);
  JUMPOUT(0x10004EB58);
}

void sub_10004EB30()
{
}

void sub_10004EB60(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 24) store];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v2 credentialForAccount:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

uint64_t sub_10004EBEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004EEC0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!v8)
  {
    id v10 = +[AAFSerialization dictionaryFromObject:a3 ofType:@"application/x-plist"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v17 = _AKLogSystem();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_100183CE8();
      }

      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v11 = +[NSError ak_errorWithCode:-7010];
      (*(void (**)(uint64_t, void, void, id, void *))(v18 + 16))(v18, 0, 0, v7, v11);
      goto LABEL_22;
    }
    uint64_t v11 = [v10 objectForKeyedSubscript:@"ec"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v19 = _AKLogSystem();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100183C70(v19, v20, v21, v22, v23, v24, v25, v26);
      }

      uint64_t v27 = *(void *)(a1 + 32);
      uint64_t v28 = +[NSError ak_errorWithCode:-7010];
      (*(void (**)(uint64_t, void, void, id, void *))(v27 + 16))(v27, 0, 0, v7, v28);

      goto LABEL_22;
    }
    if ([v11 integerValue])
    {
      if ([v11 integerValue] != (id)-21669)
      {
LABEL_22:

        goto LABEL_23;
      }
      uint64_t v12 = _AKLogSystem();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Code is invalid!", v30, 2u);
      }

      uint64_t v13 = *(void *)(a1 + 32);
      unsigned int v14 = *(void (**)(uint64_t, uint64_t, void *, id, void))(v13 + 16);
      uint64_t v15 = 0;
      double v16 = 0;
    }
    else
    {
      id v29 = _AKLogSystem();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Code is valid!", buf, 2u);
      }

      uint64_t v13 = *(void *)(a1 + 32);
      unsigned int v14 = *(void (**)(uint64_t, uint64_t, void *, id, void))(v13 + 16);
      uint64_t v15 = 1;
      double v16 = v10;
    }
    v14(v13, v15, v16, v7, 0);
    goto LABEL_22;
  }
  unsigned int v9 = _AKLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_100183D1C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_23:
}

void sub_10004F7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10004F878(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 24) store];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v2 credentialForAccount:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10004F904(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!v8)
  {
    id v10 = [a3 statusCode];
    uint64_t v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = +[NSNumber numberWithInteger:v10];
      *(_DWORD *)buf = 138412290;
      unsigned int v55 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Code validation completed with HTTP status code: %@", buf, 0xCu);
    }
    if (v10 != (id)200)
    {
      if (v10 == (id)401)
      {
        uint64_t v13 = _AKLogSystem();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
          sub_100183E54();
        }

        unsigned int v14 = [*(id *)(a1 + 32) username];

        if (v14)
        {
          uint64_t v15 = AKAppleIDAuthenticationErrorDomain;
          uint64_t v52 = AKAuthenticationUsernameKey;
          double v16 = [*(id *)(a1 + 32) username];
          os_signpost_id_t v53 = v16;
          uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
          uint64_t v18 = +[NSError errorWithDomain:v15 code:-7058 userInfo:v17];
        }
        else
        {
          id v29 = _AKLogSystem();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            sub_100183DEC();
          }

          uint64_t v18 = +[NSError ak_errorWithCode:-7058];
        }
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, v18);
      }
      else
      {
        uint64_t v26 = _AKLogSystem();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = +[NSNumber numberWithInteger:v10];
          *(_DWORD *)buf = 138412290;
          unsigned int v55 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Unexpected HTTP response code: %@", buf, 0xCu);
        }
        uint64_t v28 = *(void *)(a1 + 40);
        uint64_t v18 = +[NSError ak_errorWithCode:-7029];
        (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0, v18);
      }
      goto LABEL_42;
    }
    uint64_t v19 = +[AAFSerialization dictionaryFromObject:v7 ofType:@"application/x-plist"];
    uint64_t v18 = v19;
    if (!v19)
    {
      uint64_t v30 = _AKLogSystem();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_100183CE8();
      }

      uint64_t v31 = *(void *)(a1 + 40);
      uint64_t v21 = +[NSError ak_errorWithCode:-7010];
      (*(void (**)(uint64_t, void, void *))(v31 + 16))(v31, 0, v21);
      goto LABEL_41;
    }
    uint64_t v20 = [v19 objectForKeyedSubscript:@"ec"];
    uint64_t v21 = v20;
    if (v20)
    {
      if (![v20 integerValue])
      {
        long long v42 = _AKLogSystem();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Server says vetting token is valid.", buf, 2u);
        }

        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, void))(v23 + 16);
        uint64_t v25 = 1;
        goto LABEL_36;
      }
      if ([v21 integerValue] == (id)-23017)
      {
        uint64_t v22 = _AKLogSystem();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Server says vetting token is invalid.", buf, 2u);
        }

        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, void))(v23 + 16);
        uint64_t v25 = 0;
LABEL_36:
        v24(v23, v25, 0);
LABEL_41:

LABEL_42:
        goto LABEL_43;
      }
      long long v41 = +[AKServerErrorGenerator errorFromServerResponseParameters:v18 authenticationError:-7057];
      long long v43 = _AKLogSystem();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        sub_100183F00();
      }

      id v44 = [v21 integerValue];
      id v45 = [v41 userInfo];
      uint64_t v46 = +[NSError errorWithDomain:@"IDMS" code:v44 userInfo:v45];

      uint64_t v47 = AKAppleIDAuthenticationErrorDomain;
      NSErrorUserInfoKey v50 = NSUnderlyingErrorKey;
      __int16 v51 = v46;
      uint64_t v48 = +[NSDictionary dictionaryWithObjects:&v51 forKeys:&v50 count:1];
      __int16 v49 = +[NSError errorWithDomain:v47 code:-7057 userInfo:v48];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      uint64_t v32 = _AKLogSystem();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        sub_100183E88(v32, v33, v34, v35, v36, v37, v38, v39);
      }

      uint64_t v40 = *(void *)(a1 + 40);
      long long v41 = +[NSError ak_errorWithCode:-7010];
      (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0, v41);
    }

    goto LABEL_41;
  }
  unsigned int v9 = _AKLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_100183F68();
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_43:
}

BOOL sub_10005003C(id a1, ACAccount *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = +[AKAccountManager sharedInstance];
  id v5 = [v4 securityLevelForAccount:v3];

  return v5 != (id)5;
}

void sub_100050260(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = _AKLogSystem();
  unsigned int v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100184004();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) altDSID];
      int v14 = 138412290;
      uint64_t v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetched eligibility state for %@", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v11 = +[AAFSerialization dictionaryFromObject:v6 ofType:@"application/x-plist"];
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = [v11 objectForKeyedSubscript:@"isHSA2Eligible"];
    (*(void (**)(uint64_t, id, void))(v12 + 16))(v12, [v13 BOOLValue], 0);
  }
}

uint64_t sub_10005064C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_1000508E0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

void sub_100050EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100050ECC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sign out succeeded for account %@", (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100184170();
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    id v10 = v5;
    id v7 = *(NSObject **)(v9 + 40);
    *(void *)(v9 + 40) = v10;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100051544(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 40) _finishAnalyticsEvent:*(void *)(a1 + 48) authenticationResults:v7 authenticationContext:*(void *)(a1 + 56) error:v5];
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_1000515C8(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleared to begin auth with context %@!", buf, 0xCu);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1000516FC;
  v6[3] = &unk_1002287C0;
  void v6[4] = v5;
  id v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v5 _authenticateWithContext:v7 completion:v6];
}

void sub_1000516FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:AKAuthenticationUsernameKey];
  id v8 = [v5 objectForKeyedSubscript:AKAuthenticationRawPasswordKey];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 40);
  int v11 = *(void **)(v9 + 40);
  uint64_t v12 = *(void *)(v9 + 8);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100051854;
  v16[3] = &unk_1002288E8;
  id v17 = v10;
  id v13 = *(id *)(a1 + 48);
  id v19 = v6;
  id v20 = v13;
  id v18 = v5;
  id v14 = v6;
  id v15 = v5;
  [v11 endAuthenticationForAppleID:v7 password:v8 error:v14 context:v17 client:v12 clearanceHandler:v16];
}

uint64_t sub_100051854(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleared to end auth with context %@.", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100051C14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Security upgrade flow completed with error - %@", buf, 0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v9);
    }
  }
  else
  {
    uint64_t v12 = *(void **)(a1 + 32);
    id v13 = [*(id *)(a1 + 40) username];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100051DD8;
    v18[3] = &unk_100228A18;
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = *(void **)(a1 + 40);
    id v21 = v15;
    v18[4] = v16;
    id v19 = v17;
    id v20 = v7;
    [v12 _shouldContinueAuthenticatingForUsername:v13 password:0 serverResponse:v20 didShowServerUI:1 continuationData:0 error:0 context:v14 completion:v18];
  }
}

void sub_100051DD8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = _AKLogSystem();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v10)
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Should continue with results. Update account with results and proceed.", v12, 2u);
    }

    [*(id *)(a1 + 32) _handleSuccessfulVerificationForContext:*(void *)(a1 + 40) withResults:v7 serverResponse:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Should not continue. Calling completion with just error.", buf, 2u);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v8);
    }
  }
}

void sub_100052040(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 32) _capabilityForUIDisplay] == (id)1
     || [*(id *)(a1 + 32) _capabilityForUIDisplay] == (id)4)
    && objc_msgSend(v6, "ak_isServiceError"))
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = 0;
      id v8 = "Passwordless authentication failed due to service error, bailing...";
      id v9 = (uint8_t *)&v16;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
  }
  else if ([v6 code] == (id)-7061)
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = 0;
      id v8 = "Passwordless authentication failed due to proxy failure, bailing...";
      id v9 = (uint8_t *)&v15;
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v10 = [v6 userInfo];
    uint64_t v11 = [v10 objectForKeyedSubscript:AKAuthenticationDidPerformInteractiveAuth];
    unsigned int v12 = [v11 BOOLValue];

    if (v12)
    {
      id v7 = _AKLogSystem();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v14 = 0;
        id v8 = "Passwordless authentication resulted in a failed interactive flow, bailing...";
        id v9 = (uint8_t *)&v14;
        goto LABEL_15;
      }
    }
    else
    {
      if ([v6 code] != (id)-7034)
      {
        [*(id *)(a1 + 40) _handlePasswordlessAuthResults:v5 context:*(void *)(a1 + 32) error:v6 completion:*(void *)(a1 + 48)];
        goto LABEL_17;
      }
      id v7 = _AKLogSystem();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v13 = 0;
        id v8 = "Passwordless authentication force failed by client, bailing...";
        id v9 = (uint8_t *)&v13;
        goto LABEL_15;
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
LABEL_17:
}

void sub_100052564(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "ak_isUserCancelError"))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v10 = NSUnderlyingErrorKey;
    uint64_t v11 = v7;
    id v8 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    uint64_t v9 = objc_msgSend(v6, "ak_errorByAppendingUserInfo:", v8);

    id v6 = (id)v9;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10005301C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Password reset completion received in akd.", v9, 2u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_1000532B4(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((unint64_t)(a2 - 1) > 1)
  {
    uint64_t v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Biometric/Passcode Validation failed with error %@. We need password auth flow...", buf, 0xCu);
    }

    if ([v5 code] == (id)-7003)
    {
      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      if ([v5 code] == (id)-7068) {
        [a1[5] _setPassword:0];
      }
      [a1[4] _attemptInteractiveAuthWithContext:a1[5] completion:a1[6]];
    }
  }
  else
  {
    id v7 = a1[4];
    id v6 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100053470;
    v9[3] = &unk_100228A68;
    uint64_t v12 = a2;
    void v9[4] = v7;
    id v10 = v6;
    id v11 = a1[6];
    [v7 _attemptPasswordlessAuthAfterBiometricOrPasscodeValidationWithContext:v10 promptType:a2 completion:v9];
  }
}

void sub_100053470(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = [a2 mutableCopy];
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7 == 1)
  {
    uint64_t v8 = &AKAuthenticationDidPerformBiometricAuth;
  }
  else
  {
    if (v7 != 2) {
      goto LABEL_6;
    }
    uint64_t v8 = &AKAuthenticationDidPerformPasscodeAuth;
  }
  [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:*v8];
LABEL_6:
  [*(id *)(a1 + 32) _handlePasswordlessAuthResults:v6 context:*(void *)(a1 + 40) error:v9 completion:*(void *)(a1 + 48)];
}

void sub_10005366C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  if ([v6 isSecondaryActionRequired])
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Token upgrade requires secondary action.", buf, 2u);
    }

    id v9 = *(void **)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000537D8;
    v12[3] = &unk_100228AB8;
    v12[4] = v9;
    id v13 = v8;
    id v14 = *(id *)(a1 + 56);
    [v9 _performSecondaryActionWithServerResponse:v6 context:v13 completion:v12];
  }
  else
  {
    id v10 = *(void **)(a1 + 40);
    id v11 = [*(id *)(a1 + 48) username];
    [v10 _handleVerificationCompletionForUsername:v11 password:0 serverResponse:v6 didShowServerUI:0 continuationData:0 error:v5 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_1000537D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = a4;
  id v9 = a2;
  id v10 = [v7 username];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000538C8;
  v12[3] = &unk_100228318;
  uint64_t v11 = *(void *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  [v6 _handleVerificationCompletionForUsername:v10 password:0 serverResponse:v9 didShowServerUI:1 continuationData:0 error:v8 context:v11 completion:v12];
}

void sub_1000538C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = AKAuthenticationDidPerformInteractiveAuth;
  id v10 = &__kCFBooleanTrue;
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  id v8 = objc_msgSend(v5, "ak_errorByAppendingUserInfo:", v7);

  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v8);
}

void sub_100053A84(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "ak_isUserCancelError"))
  {
    uint64_t v7 = (void (**)(id, void, void *))a1[6];
    if (v7)
    {
      uint64_t v26 = AKAuthenticationDidPerformInteractiveAuth;
      uint64_t v27 = &__kCFBooleanTrue;
      id v8 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      uint64_t v9 = objc_msgSend(v6, "ak_errorByAppendingUserInfo:", v8);
      v7[2](v7, 0, v9);
    }
    goto LABEL_22;
  }
  id v10 = [v6 domain];
  uint64_t v11 = AKAppleIDAuthenticationErrorDomain;
  if (![v10 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

LABEL_8:
    id v13 = [v6 domain];
    if ([v13 isEqualToString:v11])
    {
      id v14 = [v6 code];

      if (v14 == (id)-7119)
      {
        [a1[4] setUsername:0];
        [a1[4] setReason:0];
        goto LABEL_11;
      }
    }
    else
    {
    }
    uint64_t v16 = [a1[4] serviceIdentifiers];
    if (v16)
    {
      id v17 = (void *)v16;
      id v18 = [a1[4] _password];
      BOOL v19 = v18 == 0;

      if (!v5)
      {
        if (!v18)
        {
          [a1[5] _performSilentServiceTokenAuthWithContext:a1[4] completion:a1[6]];
          goto LABEL_22;
        }
LABEL_21:
        [a1[5] _performPasswordlessSRPAuthWithContext:a1[4] completion:a1[6]];
        goto LABEL_22;
      }
    }
    else
    {
      if (!v5) {
        goto LABEL_21;
      }
      BOOL v19 = 0;
    }
    id v20 = a1[4];
    id v21 = a1[5];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_100053D38;
    v22[3] = &unk_100228B08;
    BOOL v25 = v19;
    v22[4] = v21;
    id v23 = v20;
    id v24 = a1[6];
    [v21 _performPasswordlessSRPAuthWithAccount:v5 context:v23 completion:v22];

    goto LABEL_22;
  }
  id v12 = [v6 code];

  if (v12 != (id)-7065) {
    goto LABEL_8;
  }
LABEL_11:
  __int16 v15 = (void (**)(id, void, id))a1[6];
  if (v15) {
    v15[2](v15, 0, v6);
  }
LABEL_22:
}

void sub_100053D38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v6)
  {
    id v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_9:
    v12();
    goto LABEL_10;
  }
  id v8 = [v6 userInfo];
  uint64_t v9 = [v8 objectForKeyedSubscript:AKAuthenticationDidPerformInteractiveAuth];
  unsigned __int8 v10 = [v9 BOOLValue];

  if (!*(unsigned char *)(a1 + 56) || (v10 & 1) != 0)
  {
    id v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_9;
  }
  uint64_t v11 = _AKLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Will attempt silent auth since the context is asking for service tokens.", v13, 2u);
  }

  [*(id *)(a1 + 32) _performSilentServiceTokenAuthWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
LABEL_10:
}

void sub_100054270(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"NO";
    if (a2) {
      CFStringRef v7 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    CFStringRef v20 = v7;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client decision to keep using: %@. Error: %@", buf, 0x16u);
  }

  id v8 = [v5 domain];
  if (![v8 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_9;
  }
  id v9 = [v5 code];

  if (v9 != (id)-7027)
  {
LABEL_9:
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(void **)(v10 + 48);
    uint64_t v13 = *(void *)(v10 + 8);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100054458;
    v14[3] = &unk_100228B58;
    id v15 = v5;
    id v17 = *(id *)(a1 + 56);
    char v18 = a2;
    id v16 = *(id *)(a1 + 48);
    [v12 dismissKeepUsingUIForContext:v11 client:v13 withCompletion:v14];

    goto LABEL_10;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_10:
}

void sub_100054458(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100054A4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 && [*(id *)(a1 + 32) authenticationType] == (id)2)
  {
    CFStringRef v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "One shot at non-interactive failed, handling failure...", buf, 2u);
    }

    id v8 = *(void **)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100054B9C;
    v10[3] = &unk_1002287C0;
    void v10[4] = v9;
    id v11 = v8;
    id v12 = *(id *)(a1 + 48);
    [v9 _handleVerificationError:v6 forContext:v11 completion:v10];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100054B9C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 code] == (id)-7017) {
    [*(id *)(a1 + 32) _recoverCredentialsAndAuthenticateWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100054CEC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to refresh context locally with error: %@", buf, 0xCu);
    }

    CFStringRef v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100054E34;
    v9[3] = &unk_1002270A8;
    id v10 = *(id *)(a1 + 48);
    [v7 _refreshAuthModeIfNecessaryForContext:v8 completion:v9];
  }
}

void sub_100054E34(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to refresh context remotely with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100054FD0(id *a1)
{
  if (![a1[4] _shouldBroadcastForProximityAuthOnly])
  {
    uint64_t v9 = [a1[4] username];
    if (v9)
    {
      id v10 = (void *)v9;
      if ([a1[4] authenticationType] == (id)3)
      {

LABEL_11:
        id v12 = _AKLogSystem();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Client is asking for username only auth and provided a username... lets see how this goes", buf, 2u);
        }

        id v13 = a1[4];
        id v14 = a1[5];
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        void v31[2] = sub_10005535C;
        v31[3] = &unk_1002287C0;
        v31[4] = v14;
        id v32 = v13;
        id v33 = a1[6];
        [v14 _performInteractiveFederatedAuthWithContext:v32 completion:v31];

        id v15 = v32;
LABEL_27:

        return;
      }
      id v11 = [a1[4] authenticationMode];

      if (v11 == (id)2) {
        goto LABEL_11;
      }
    }
    id v16 = _AKLogSystem();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Collecting user credentials...", buf, 2u);
    }

    if ([a1[4] disableProximityAuth])
    {
      id v17 = _AKLogSystem();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Client is asking to disable proximity based authentication...", buf, 2u);
      }
    }
    if ([a1[5] _shouldBroadcastForProximity:a1[4]])
    {
      id v19 = a1[4];
      char v18 = a1[5];
      CFStringRef v20 = (void *)v18[7];
      uint64_t v21 = v18[1];
      id v22 = (objc_class *)sub_1000B60FC();
      if (v22) {
        id v22 = (objc_class *)sub_1000B644C();
      }
      id v23 = objc_alloc_init(v22);
      [v20 beginAuthenticationWithClient:v21 context:v19 server:v23 completion:a1[6]];
    }
    else
    {
      id v23 = _AKLogSystem();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Skipping proximity based auth..", buf, 2u);
      }
    }

    id v25 = a1[4];
    id v24 = a1[5];
    uint64_t v26 = (void *)v24[6];
    uint64_t v27 = v24[1];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100055410;
    v28[3] = &unk_100228BA8;
    v28[4] = v24;
    id v29 = v25;
    id v30 = a1[6];
    [v26 presentBasicLoginUIForContext:v29 client:v27 completion:v28];

    id v15 = v29;
    goto LABEL_27;
  }
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is asking for proximity based authentication...", buf, 2u);
  }

  id v4 = a1[4];
  uint64_t v3 = a1[5];
  id v5 = (void *)v3[7];
  uint64_t v6 = v3[1];
  int v7 = (objc_class *)sub_1000B60FC();
  if (v7) {
    int v7 = (objc_class *)sub_1000B644C();
  }
  id v8 = objc_alloc_init(v7);
  [v5 beginAuthenticationWithClient:v6 context:v4 server:v8 completion:a1[6]];
}

void sub_10005535C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "One shot at passwordless auth failed, handling failure...", v6, 2u);
    }

    [*(id *)(a1 + 32) _handleVerificationError:v4 forContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_100055410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _handleBasicLoginUICompletionWithUsername:a2 password:a3 context:*(void *)(a1 + 40) additionalData:a4 collectionError:a5 completion:*(void *)(a1 + 48)];
}

void sub_10005568C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 code] != (id)-7045)
  {
    uint64_t v9 = _AKLogSystem();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100184658();
    }

    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v4);
    }
  }
  else
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_1001845D8();
    }

    int v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v8 = v7[1];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000557F0;
    v11[3] = &unk_1002287C0;
    void v11[4] = v7;
    id v12 = v6;
    id v13 = *(id *)(a1 + 48);
    [v7 _performPasswordlessSRPAuthWithContext:v12 client:v8 completion:v11];
  }
}

void sub_1000557F0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = _AKLogSystem();
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001846C0();
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    int v12 = 138412546;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Successfully performed interactive FedAuth for context (%@)", (uint8_t *)&v12, 0x16u);
  }

  uint64_t v11 = a1[6];
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
}

void sub_100055EDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v26) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Account info fetch failed. Skipping validation.", (uint8_t *)&v26, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v8 = [v5 allAccountNames];
    if ([v8 count])
    {
      uint64_t v9 = [*(id *)(a1 + 32) username];
      unsigned int v10 = [v8 containsObject:v9];

      uint64_t v11 = _AKLogSystem();
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        if (v12)
        {
          uint64_t v13 = [*(id *)(a1 + 32) username];
          __int16 v14 = [*(id *)(a1 + 32) altDSID];
          int v26 = 138412546;
          uint64_t v27 = v13;
          __int16 v28 = 2112;
          id v29 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Username %@ is valid for altDSID: %@", (uint8_t *)&v26, 0x16u);
        }
      }
      else
      {
        if (v12)
        {
          uint64_t v15 = [*(id *)(a1 + 32) username];
          id v16 = [*(id *)(a1 + 32) altDSID];
          id v17 = [v5 userInformationRepresentation];
          char v18 = [v17 accountName];
          int v26 = 138412802;
          uint64_t v27 = v15;
          __int16 v28 = 2112;
          id v29 = v16;
          __int16 v30 = 2112;
          uint64_t v31 = v18;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Username %@ is not valid for altDSID: %@. Setting username to %@", (uint8_t *)&v26, 0x20u);
        }
        id v19 = *(void **)(a1 + 32);
        uint64_t v11 = [v5 userInformationRepresentation];
        CFStringRef v20 = [v11 accountName];
        [v19 setUsername:v20];
      }
    }
    else
    {
      uint64_t v11 = _AKLogSystem();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1001848C0(a1, v11);
      }
    }

    uint64_t v21 = [v5 userInformationRepresentation];
    id v22 = [v21 authMode];

    id v23 = [v5 userInformationRepresentation];
    id v24 = [v23 isMdmInfoRequired];
    uint64_t v25 = [v24 BOOLValue];

    objc_msgSend(*(id *)(a1 + 40), "_correlateContext:withAuthModeInformation:", *(void *)(a1 + 32), v22, v25);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100056584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_correlateContext:withAuthModeInformation:", *(void *)(a1 + 40), a2, a3);
    id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v4();
  }
  else
  {
    id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v6();
  }
}

void sub_100056DD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(v7 + 48);
  uint64_t v10 = *(void *)(v7 + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100056EC0;
  v14[3] = &unk_100228C48;
  id v11 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v11;
  id v15 = v5;
  id v12 = v6;
  id v13 = v5;
  [v9 dismissBasicLoginUIForContext:v8 client:v10 completion:v14];
}

void sub_100056EC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001849B8();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100056F38(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = v5;
  if (v5 && (objc_msgSend(v5, "ak_isUserCancelError") & 1) == 0) {
    [*(id *)(a1 + 32) _showAlertForVerificationError:v6 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100056FC8(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = v5;
  if (!v5) {
    goto LABEL_7;
  }
  id v7 = [v5 domain];
  if ([v7 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    if ([v6 code] == (id)-7003)
    {

LABEL_7:
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_9;
    }
    id v8 = [v6 code];

    if (v8 == (id)-7043) {
      goto LABEL_7;
    }
  }
  else
  {
  }
  [*(id *)(a1 + 32) _showAlertForVerificationError:v6 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
LABEL_9:
}

void sub_1000570B8(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (objc_msgSend(v5, "ak_isUserTryAgainError"))
  {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  else
  {
    id v7 = [v5 domain];
    if ([v7 isEqualToString:AKAppleIDAuthenticationErrorDomain])
    {
      unsigned int v8 = [*(id *)(a1 + 32) _keepAlive];

      if (v8)
      {
        [*(id *)(a1 + 40) _keepLoginAliveWithContext:*(void *)(a1 + 32) error:v5 andCompletion:*(void *)(a1 + 48)];
        goto LABEL_9;
      }
    }
    else
    {
    }
    uint64_t v6 = *(void *)(a1 + 56);
  }
  (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v9, v5);
LABEL_9:
}

void sub_10005718C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id v12 = _AKLogSystem();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Asking client to dismiss basic login UI. SRP Success.", buf, 2u);
    }

    id v10 = [v5 mutableCopy];
    [v10 addEntriesFromDictionary:*(void *)(a1 + 32)];
    id v11 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_12;
  }
  unsigned int v8 = [v6 domain];
  if (![v8 isEqual:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_14;
  }
  if ([v7 code] != (id)-7033 && objc_msgSend(v7, "code") != (id)-7003)
  {
    unsigned __int8 v15 = objc_msgSend(v7, "ak_isIncompatibleDevicesError");

    if (v15) {
      goto LABEL_6;
    }
LABEL_14:
    __int16 v14 = *(void **)(a1 + 40);
    id v13 = *(void **)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1000573DC;
    v16[3] = &unk_1002287C0;
    void v16[4] = v14;
    id v17 = v13;
    id v18 = *(id *)(a1 + 64);
    [v14 _handleVerificationError:v7 forContext:v17 completion:v16];

    goto LABEL_15;
  }

LABEL_6:
  id v9 = _AKLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Asking client to dismiss basic login UI. SRP Passthrough.", buf, 2u);
  }

  id v10 = [v5 mutableCopy];
  [v10 addEntriesFromDictionary:*(void *)(a1 + 32)];
  [v10 setObject:&__kCFBooleanTrue forKeyedSubscript:AKAuthenticationDidPerformInteractiveAuth];
  id v11 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_12:
  v11();

LABEL_15:
}

void sub_1000573DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 code] == (id)-7017)
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Initiating credential recovery", buf, 2u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v10 = *(void **)(v8 + 48);
    uint64_t v11 = *(void *)(v8 + 8);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100057530;
    v12[3] = &unk_1002286A8;
    void v12[4] = v8;
    id v13 = v9;
    id v14 = *(id *)(a1 + 48);
    [v10 dismissBasicLoginUIForContext:v13 client:v11 completion:v12];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100057530(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100184A20();
    }
  }
  [*(id *)(a1 + 32) _recoverCredentialsAndAuthenticateWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100057848(id *a1)
{
  if ([a1[4] authenticationType] == (id)3)
  {
    id v2 = a1[4];
    id v3 = a1[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100057980;
    v7[3] = &unk_1002287C0;
    void v7[4] = v3;
    id v8 = v2;
    id v9 = a1[6];
    [v3 _performPasswordlessSRPAuthWithContext:v8 completion:v7];
  }
  else
  {
    id v4 = _AKLogSystem();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Username was not valid for passwordless auth, requesting more information", v6, 2u);
    }

    id v5 = +[NSError ak_errorWithCode:-7012];
    [a1[5] _showAlertForVerificationError:v5 context:a1[4] completion:a1[6]];
  }
}

void sub_100057980(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "One shot at passwordless auth failed, handling failure...", v6, 2u);
    }

    [*(id *)(a1 + 32) _handleVerificationError:v4 forContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100057C50(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  id v13 = _AKLogSystem();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Another attempt at getting basic login info has completed!", v14, 2u);
  }

  [*(id *)(a1 + 32) _handleBasicLoginUICompletionWithUsername:v12 password:v11 context:*(void *)(a1 + 40) additionalData:v10 collectionError:v9 completion:*(void *)(a1 + 48)];
}

void sub_100058AB0(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[4];
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting to show login error: %@", (uint8_t *)&v9, 0xCu);
  }

  [*(id *)(a1[5] + 48) presentLoginAlertForContext:a1[6] client:*(void *)(a1[5] + 8) withError:a1[4] title:v6 message:v5 completion:a1[7]];
}

void sub_100058E58(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 allowPiggybacking])
  {
    id v7 = [v5 secondaryActionMessage];
    if (v7)
    {
      [a1[4] _setMessage:v7];
    }
    else
    {
      id v12 = +[NSBundle bundleWithIdentifier:@"com.apple.AuthKit"];
      id v13 = [v12 localizedStringForKey:@"ENTER_VERIFICATION_CODE_PIG" value:&stru_100233250 table:@"Localizable"];
      [a1[4] _setMessage:v13];
    }
    id v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Starting piggybacking session", buf, 2u);
    }

    [a1[5] startPiggybackingForServerResponse:v5 context:a1[4] password:a1[6] username:a1[7] completion:a1[8]];
  }
  else if (v6 || ![v5 isSecondaryActionRequired])
  {
    [a1[5] _handleVerificationCompletionForUsername:a1[7] password:a1[6] serverResponse:v5 didShowServerUI:0 continuationData:0 error:v6 context:a1[4] completion:a1[8]];
  }
  else
  {
    uint64_t v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Looks like we're dealing with an HSA account.", buf, 2u);
    }

    id v10 = a1[4];
    id v9 = a1[5];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1000590DC;
    v16[3] = &unk_100228D38;
    id v17 = v5;
    int8x16_t v15 = *((int8x16_t *)a1 + 2);
    id v11 = (id)v15.i64[0];
    int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
    id v19 = a1[7];
    id v20 = a1[6];
    id v21 = a1[8];
    [v9 _performSecondaryActionWithServerResponse:v17 context:v10 completion:v16];
  }
}

void sub_1000590DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unsigned int v10 = [*(id *)(a1 + 32) isSecondaryActionURLGSEndpoint];
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  if (v10)
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1000592A8;
    v24[3] = &unk_100228D10;
    v24[4] = v12;
    uint64_t v13 = *(void *)(a1 + 48);
    id v25 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 64);
    id v27 = *(id *)(a1 + 48);
    id v28 = *(id *)(a1 + 72);
    [v12 _performGrandslamEndpointActionWithContext:v13 serverResponse:v11 completion:v24];

    id v14 = v25;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    id v17 = *(void **)(a1 + 48);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000592EC;
    v20[3] = &unk_1002287C0;
    id v18 = v17;
    uint64_t v19 = *(void *)(a1 + 40);
    id v21 = v18;
    uint64_t v22 = v19;
    id v23 = *(id *)(a1 + 72);
    [v12 _checkFreshnessAndVerifyWithPassword:v15 serverResponse:v11 additionalData:v8 secondaryActionError:v9 context:v18 newServerResponse:v7 username:v16 completion:v20];

    id v14 = v21;
  }
}

id sub_1000592A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:*(void *)(a1 + 40) password:*(void *)(a1 + 48) serverResponse:a2 didShowServerUI:1 continuationData:0 error:a3 context:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000592EC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  +[AKCAAuthEventReporter reportAuthEventOfType:AKAuthEventType_SECOND_FACTOR_SERVER_UI success:v9 != 0 error:v5];
  id v6 = [v5 domain];
  if ([v6 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    unsigned int v7 = [*(id *)(a1 + 32) _keepAlive];

    if (v7)
    {
      [*(id *)(a1 + 40) _keepLoginAliveWithContext:*(void *)(a1 + 32) error:v5 andCompletion:*(void *)(a1 + 48)];
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v5);
  }
LABEL_7:
}

void sub_10005974C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [*(id *)(a1 + 32) authKitAccount];
  uint64_t v8 = [v7 username];
  if (v8)
  {
    id v9 = [v7 username];
  }
  else
  {
    id v9 = *(id *)(a1 + 40);
  }
  unsigned int v10 = v9;

  if (v6)
  {
    uint64_t v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100184A88();
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    goto LABEL_27;
  }
  if ([v5 allowPiggybacking]
    && [*(id *)(a1 + 48) piggybackingForTrustedDevice])
  {
    id v12 = [v5 secondaryActionMessage];
    if (v12)
    {
      [*(id *)(a1 + 48) _setMessage:v12];
    }
    else
    {
      id v27 = +[NSBundle bundleWithIdentifier:@"com.apple.AuthKit"];
      id v28 = [v27 localizedStringForKey:@"ENTER_VERIFICATION_CODE_PIG" value:&stru_100233250 table:@"Localizable"];
      [*(id *)(a1 + 48) _setMessage:v28];
    }
    id v29 = _AKLogSystem();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Starting piggybacking approval session for repair flow", buf, 2u);
    }

    [*(id *)(a1 + 56) startPiggybackingForServerResponse:v5 context:*(void *)(a1 + 48) password:0 username:*(void *)(a1 + 40) completion:*(void *)(a1 + 72)];
    goto LABEL_27;
  }
  uint64_t v13 = [v5 federatedAuthURL];

  if (v13)
  {
    uint64_t v15 = *(void *)(a1 + 48);
    id v14 = *(void **)(a1 + 56);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100059BA8;
    v35[3] = &unk_100228D60;
    uint64_t v16 = *(void *)(a1 + 64);
    id v17 = *(id *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 56);
    id v38 = v17;
    v35[4] = v18;
    id v36 = v10;
    id v37 = *(id *)(a1 + 48);
    [v14 _performSecondaryActionWithServerResponse:v5 context:v15 client:v16 completion:v35];

    uint64_t v19 = v38;
LABEL_16:

    goto LABEL_27;
  }
  if ([v5 isSecondaryActionURLGSEndpoint])
  {
    uint64_t v21 = *(void *)(a1 + 48);
    id v20 = *(void **)(a1 + 56);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    void v30[2] = sub_100059DA4;
    v30[3] = &unk_100228D10;
    v30[4] = v20;
    id v31 = v10;
    id v32 = 0;
    id v33 = *(id *)(a1 + 48);
    id v34 = *(id *)(a1 + 72);
    [v20 _performGrandslamEndpointActionWithContext:v21 serverResponse:v5 completion:v30];

    uint64_t v19 = v31;
    goto LABEL_16;
  }
  id v22 = [*(id *)(a1 + 48) authenticationMode];
  if (v7 || v22 != (id)2)
  {
    [*(id *)(a1 + 56) _handleVerificationCompletionForUsername:v10 password:0 serverResponse:v5 didShowServerUI:0 continuationData:0 error:0 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 72)];
  }
  else
  {
    id v23 = _AKLogSystem();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 48) username];
      *(_DWORD *)buf = 138412290;
      uint64_t v40 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No continuation capable IDMS account found for Apple ID: %@", buf, 0xCu);
    }
    uint64_t v25 = *(void *)(a1 + 72);
    id v26 = +[NSError ak_errorWithCode:-7023];
    (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0, v26);
  }
LABEL_27:
}

void sub_100059BA8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if ([v7 code] == (id)-7013)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100059CB0;
    v11[3] = &unk_100228318;
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    [v8 _handleVerificationCompletionForUsername:v9 password:0 serverResponse:v6 didShowServerUI:1 continuationData:0 error:v7 context:v10 completion:v11];

    id v7 = v12;
  }
}

void sub_100059CB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = AKAuthenticationDidPerformInteractiveAuth;
  uint64_t v10 = &__kCFBooleanTrue;
  id v5 = a3;
  id v6 = a2;
  id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  uint64_t v8 = objc_msgSend(v5, "ak_errorByAppendingUserInfo:", v7);

  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v8);
}

void sub_100059DA4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100059E60;
  v7[3] = &unk_100228318;
  id v8 = *(id *)(a1 + 64);
  [v3 _handleVerificationCompletionForUsername:v4 password:0 serverResponse:a2 didShowServerUI:1 continuationData:0 error:v5 context:v6 completion:v7];
}

void sub_100059E60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = AKAuthenticationDidPerformInteractiveAuth;
  uint64_t v10 = &__kCFBooleanTrue;
  id v5 = a3;
  id v6 = a2;
  id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  id v8 = objc_msgSend(v5, "ak_errorByAppendingUserInfo:", v7);

  (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v6, v8);
}

id sub_10005A180(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performSafeSRPAuthenticationWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10005A4B8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) == 0)
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    goto LABEL_5;
  }
  if (*(void *)(a1 + 32))
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
LABEL_5:
    v8();
    goto LABEL_7;
  }
  [*(id *)(a1 + 40) _handleSuccessfulVerificationForContext:*(void *)(a1 + 48) withResults:v9 serverResponse:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
LABEL_7:
}

void sub_10005B968(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100184D90();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = +[NSError ak_errorWithCode:-7061 underlyingError:v3];

  (*(void (**)(uint64_t, void, void, void *))(v5 + 16))(v5, 0, 0, v6);
}

void sub_10005BA04(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if ((a2 & 1) == 0)
  {
    id v12 = v6;
    if (!v12)
    {
      id v14 = _AKLogSystem();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100184DC4();
      }

      id v12 = +[NSError ak_errorWithCode:-7034];
    }
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_11;
  }
  id v7 = _AKLogSystem();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unable to auth with IDMS but client says to suppress error and continue.", v15, 2u);
    }

    uint64_t v9 = AKAppleIDAuthenticationErrorDomain;
    uint64_t v10 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v16 = NSUnderlyingErrorKey;
    uint64_t v17 = v10;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    id v12 = +[NSError errorWithDomain:v9 code:-7033 userInfo:v11];

    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_11:
    v13();

    goto LABEL_12;
  }
  if (v8)
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Will continue handling successful auth...", v15, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_12:
}

void sub_10005BD2C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _authKitAccountFromContext:*(void *)(a1 + 40)];
  if (v2
    && ![*(id *)(a1 + 32) _shouldSkipAccountUpdatesForAuthWithContext:*(void *)(a1 + 40)])
  {
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating AK account...", buf, 2u);
    }

    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v14 = 0;
    unsigned int v7 = [v5 _updateAuthKitAccount:v2 withServerResponse:v4 context:v6 error:&v14];
    id v8 = v14;
    if (v7)
    {
      uint64_t v9 = _AKLogSystem();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Will check in with IDMS about push registration...", v13, 2u);
      }

      uint64_t v10 = +[AKAppleIDCheckInHelperService sharedService];
      [v10 performCheckInForAccount:v2 event:AKPostDataEventLiveness reason:5 completion:&stru_100228E20];

      [*(id *)(a1 + 32) _provideServiceTokensIfRequiredForContext:*(void *)(a1 + 40) authenticationResults:*(void *)(a1 + 48) serverResponse:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = +[NSError ak_errorWithCode:-7001 underlyingError:v8];
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 16))(v11, 0, v12);

      id v8 = (id)v12;
    }
  }
  else
  {
    [*(id *)(a1 + 32) _provideServiceTokensIfRequiredForContext:*(void *)(a1 + 40) authenticationResults:*(void *)(a1 + 48) serverResponse:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }
}

void sub_10005BEDC(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4 = a3;
  id v5 = _AKLogSystem();
  uint64_t v6 = v5;
  if (a2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully checked in with IDMS.", v7, 2u);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_100184DF8();
  }
}

void sub_10005C5F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = _AKLogSystem();
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100184E60();
    }

    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = [*(id *)(a1 + 48) serviceTokens];
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = v9;
    id v16 = v10;
    id v17 = v6;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v20 = 138412290;
      uint64_t v21 = v18;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fetching tokens for service IDs %@ succeeded!", (uint8_t *)&v20, 0xCu);
    }

    uint64_t v19 = [*(id *)(a1 + 48) serviceTokens];
    id v10 = [v19 mutableCopy];

    [v10 setValuesForKeysWithDictionary:v5];
    uint64_t v15 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    id v16 = v10;
    id v17 = 0;
  }
  [v15 _completeAuthenticationWithServiceTokens:v16 tokenFetchError:v17 altDSID:v11 authenticationResults:v12 context:v13 completion:v14];
}

NSString *__cdecl sub_10005C9A8(id a1, NSString *a2, AKToken *a3)
{
  return (NSString *)[(AKToken *)a3 stringValue];
}

void sub_10005D048(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [v8 domain];
  if ([v9 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v10 = [v8 code];

    if (v10 == (id)-7038)
    {
      uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_6;
    }
  }
  else
  {
  }
  uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_6:
  v11();
}

uint64_t sub_10005D134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005D384(uint64_t a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = v11;
  if (v11 || (a2 & 1) == 0)
  {
    if (!v11)
    {
      id v12 = +[NSError ak_errorWithCode:-7036];
    }
    if (*(unsigned char *)(a1 + 72))
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      uint64_t v13 = _AKLogSystem();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_100185068();
      }

      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_10005D530;
      v16[3] = &unk_100228F00;
      void v16[4] = v14;
      id v17 = *(id *)(a1 + 48);
      char v21 = *(unsigned char *)(a1 + 72);
      id v18 = *(id *)(a1 + 56);
      id v19 = *(id *)(a1 + 40);
      id v20 = *(id *)(a1 + 64);
      [v14 _showAlertForLoginCodeValidationError:v12 context:v15 completion:v16];
    }
  }
  else
  {
    [*(id *)(a1 + 32) _processValidationCodeSuccessResponse:v10 authResponse:*(void *)(a1 + 56) results:v9 completion:*(void *)(a1 + 64)];
  }
}

id sub_10005D530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleSecondFactorUICompletionWithCode:a2 error:a3 idmsData:*(void *)(a1 + 40) piggybacking:*(unsigned __int8 *)(a1 + 72) initialAuthResponse:*(void *)(a1 + 48) context:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10005D77C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = +[NSBundle bundleWithIdentifier:@"com.apple.AuthKit"];
  id v6 = [v5 localizedStringForKey:@"CODE_INVALID_TITLE" value:&stru_100233250 table:@"Localizable"];

  [*(id *)(a1[4] + 48) presentSecondFactorAlertForContext:a1[5] client:*(void *)(a1[4] + 8) withError:a1[6] title:v6 message:v4 completion:a1[7]];
}

void sub_10005D8FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend(v6, "ak_isUserCancelError"))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v22 = AKAuthenticationDidPerformInteractiveAuth;
    id v23 = &__kCFBooleanTrue;
    id v8 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    id v9 = objc_msgSend(v6, "ak_errorByAppendingUserInfo:", v8);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v9);

LABEL_15:
    goto LABEL_16;
  }
  id v10 = [v6 domain];
  if (![v10 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {

    goto LABEL_7;
  }
  id v11 = [v6 code];

  if (v11 != (id)-7065)
  {
LABEL_7:
    id v12 = [*(id *)(a1 + 32) username];
    id v8 = [*(id *)(a1 + 40) _srpAuthContextHelperWithContext:*(void *)(a1 + 32)];
    [v8 setAuthKitAccount:v5];
    objc_msgSend(v8, "setPasscodeAuthEnabled:", objc_msgSend(*(id *)(a1 + 32), "isContextEligibleForPasscodeAuth"));
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13 == 1)
    {
      [v8 setBiometricAuth:1];
    }
    else if (v13 == 2)
    {
      [v8 setPasscodeAuth:1];
    }
    else
    {
      uint64_t v14 = _AKLogSystem();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1001850D0((uint64_t *)(a1 + 56), v14);
      }
    }
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10005DB98;
    v18[3] = &unk_100228F50;
    uint64_t v15 = *(void **)(a1 + 40);
    id v21 = *(id *)(a1 + 48);
    id v16 = *(void **)(a1 + 32);
    v18[4] = *(void *)(a1 + 40);
    id v19 = v12;
    id v20 = v16;
    id v17 = v12;
    [v15 _performSRPAuthenticationWithContext:v8 completion:v18];

    goto LABEL_15;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_16:
}

void sub_10005DB98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100184A88();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:*(void *)(a1 + 40) password:0 serverResponse:a2 didShowServerUI:0 continuationData:0 error:0 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

id sub_10005DED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _handleGrandslamResponse:a3 data:a2 error:a4 serverResponse:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10005E364(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10005E388(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      id v9 = _AKLogFido();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100185240();
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      [WeakRetained _handleStartFidoAuthWithContext:*(void *)(a1 + 32) fidoContext:v5 serverResponse:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
    }
  }
}

void sub_10005E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005E5D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v6)
    {
      id v9 = _AKLogFido();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100185310();
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      id v10 = [WeakRetained fidoHandler];
      [v10 finishFidoAuthWithResponse:v5 client:v8[1] context:*(void *)(a1 + 32) recoveryToken:0 completion:*(void *)(a1 + 40)];
    }
  }
}

void sub_10005E9D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v11 = _AKSignpostLogSystem();
  id v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 40);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    int v18 = 67240192;
    LODWORD(v19) = [v7 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "ServerDrivenSecondaryAction", " Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v18, 8u);
  }

  uint64_t v14 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    double v15 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v16 = *(void *)(a1 + 40);
    unsigned int v17 = [v7 code];
    int v18 = 134218496;
    uint64_t v19 = v16;
    __int16 v20 = 2048;
    double v21 = v15;
    __int16 v22 = 1026;
    unsigned int v23 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:ServerDrivenSecondaryAction  Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v18, 0x1Cu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005EEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005EF0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412546;
    id v14 = v7;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Retrieved recovery data for server. Server Response: %@ and recoveryData: %@", (uint8_t *)&v13, 0x16u);
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005F2FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001854B0(a1, (uint64_t)v6, v8);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(a1 + 32) serviceIdentifiers];
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fetching tokens for service IDs %@ succeeded.", (uint8_t *)&v10, 0xCu);
    }
    [*(id *)(a1 + 40) _completeAuthenticationWithServiceTokens:v5 tokenFetchError:0 altDSID:*(void *)(a1 + 48) authenticationResults:0 context:*(void *)(a1 + 32) completion:*(void *)(a1 + 56)];
  }
}

void sub_10005F96C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10005FC28;
    v20[3] = &unk_100229040;
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 64);
    void v20[4] = *(void *)(a1 + 40);
    uint64_t v25 = v8;
    id v21 = v5;
    id v22 = *(id *)(a1 + 48);
    id v23 = *(id *)(a1 + 32);
    id v24 = *(id *)(a1 + 56);
    long long v26 = *(_OWORD *)(a1 + 72);
    [v7 authenticationParametersWithCompletion:v20];
  }
  else
  {
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    int v10 = _AKSignpostLogSystem();
    uint64_t v11 = v10;
    os_signpost_id_t v12 = *(void *)(a1 + 72);
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v28) = [v6 code];
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v12, "FetchGrandslamTokens", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    int v13 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      double v14 = (double)(unint64_t)Nanoseconds / 1000000000.0;
      uint64_t v15 = *(void *)(a1 + 72);
      unsigned int v16 = [v6 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v28 = v15;
      __int16 v29 = 2048;
      double v30 = v14;
      __int16 v31 = 1026;
      unsigned int v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchGrandslamTokens  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
    }

    CFRelease(*(CFTypeRef *)(a1 + 64));
    unsigned int v17 = _AKLogSystem();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_100185628();
    }

    uint64_t v18 = *(void *)(a1 + 56);
    if (v18)
    {
      uint64_t v19 = +[NSError ak_errorWithCode:-7005 underlyingError:v6];
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v19);
    }
  }
}

void sub_10005FC28(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  uint64_t v5 = a1[5];
  id v6 = *(void **)(a1[4] + 16);
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[6];
  id v62 = a3;
  id v9 = a3;
  int v10 = [v6 appleIDAuthSupportCopyAppTokensWithMasterToken:v7 authURL:v5 serviceIds:v8 authParams:a2 error:&v62];
  id v11 = v62;

  CFRelease((CFTypeRef)v4[9]);
  if (!v11)
  {
    id v57 = objc_msgSend(objc_alloc((Class)NSMutableDictionary), "initWithCapacity:", objc_msgSend((id)v4[6], "count"));
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    id v30 = (id)v4[6];
    id v31 = [v30 countByEnumeratingWithState:&v58 objects:v63 count:16];
    if (v31)
    {
      id v32 = v31;
      unsigned int v55 = v4;
      os_signpost_id_t v56 = 0;
      char v33 = 0;
      uint64_t v34 = *(void *)v59;
      do
      {
        for (i = 0; i != v32; i = (char *)i + 1)
        {
          if (*(void *)v59 != v34) {
            objc_enumerationMutation(v30);
          }
          uint64_t v36 = *(void *)(*((void *)&v58 + 1) + 8 * i);
          id v37 = objc_msgSend(v10, "objectForKeyedSubscript:", v36, v55, v56);
          if (v37)
          {
            id v38 = +[AKToken tokenWithDictionary:v37];
            [v57 setObject:v38 forKeyedSubscript:v36];
            char v33 = 1;
          }
          else
          {
            id v38 = _AKLogSystem();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v65 = v36;
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Unable to find info for token with ID: %@", buf, 0xCu);
            }
          }
        }
        id v32 = [v30 countByEnumeratingWithState:&v58 objects:v63 count:16];
      }
      while (v32);

      id v4 = v55;
      id v11 = v56;
      if (v33)
      {
        uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
        uint64_t v40 = _AKSignpostLogSystem();
        long long v41 = v40;
        os_signpost_id_t v42 = v55[10];
        if (v42 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v40))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_INTERVAL_END, v42, "FetchGrandslamTokens", "", buf, 2u);
        }

        long long v43 = _AKSignpostLogSystem();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = v55[10];
          *(_DWORD *)buf = 134218240;
          uint64_t v65 = v44;
          __int16 v66 = 2048;
          double v67 = (double)(unint64_t)Nanoseconds / 1000000000.0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchGrandslamTokens ", buf, 0x16u);
        }

        uint64_t v45 = v55[8];
        if (v45) {
          (*(void (**)(uint64_t, id, void))(v45 + 16))(v45, v57, 0);
        }
        goto LABEL_41;
      }
    }
    else
    {
    }
    uint64_t v28 = +[NSError ak_errorWithCode:-7007];
    uint64_t v46 = _AKSignpostGetNanoseconds();
    uint64_t v47 = _AKSignpostLogSystem();
    uint64_t v48 = v47;
    os_signpost_id_t v49 = v4[10];
    if (v49 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
    {
      unsigned int v50 = [v28 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v65) = v50;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v48, OS_SIGNPOST_INTERVAL_END, v49, "FetchGrandslamTokens", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    __int16 v51 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v52 = v4[10];
      unsigned int v53 = [v28 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v65 = v52;
      __int16 v66 = 2048;
      double v67 = (double)(unint64_t)v46 / 1000000000.0;
      __int16 v68 = 1026;
      unsigned int v69 = v53;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchGrandslamTokens  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
    }

    uint64_t v54 = v4[8];
    if (v54) {
      (*(void (**)(uint64_t, void, void *))(v54 + 16))(v54, 0, v28);
    }
    goto LABEL_40;
  }
  os_signpost_id_t v12 = _AKLogSystem();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_100185690();
  }

  int v13 = [v11 userInfo];
  double v14 = [v13 objectForKeyedSubscript:kAppleIDAuthSupportStatus];

  id v57 = v14;
  uint64_t v15 = [v14 objectForKeyedSubscript:@"ec"];
  id v16 = [v15 integerValue];

  if (v16 == (id)-22411)
  {
    unsigned int v17 = +[AKAccountManager sharedInstance];
    uint64_t v18 = [(id)v4[7] authKitAccount];
    [v17 removeMasterTokenForAccount:v18];
  }
  if (v4[8])
  {
    uint64_t v19 = _AKSignpostGetNanoseconds();
    __int16 v20 = _AKSignpostLogSystem();
    id v21 = v20;
    os_signpost_id_t v22 = v4[10];
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
    {
      unsigned int v23 = [v11 code];
      *(_DWORD *)buf = 67240192;
      LODWORD(v65) = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v22, "FetchGrandslamTokens", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    id v24 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = v4[10];
      unsigned int v26 = [v11 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v65 = v25;
      __int16 v66 = 2048;
      double v67 = (double)(unint64_t)v19 / 1000000000.0;
      __int16 v68 = 1026;
      unsigned int v69 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchGrandslamTokens  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
    }

    uint64_t v27 = v4[8];
    uint64_t v28 = objc_msgSend(v11, "ac_secureCodingError");
    __int16 v29 = +[NSError ak_errorWithCode:-7007 underlyingError:v28];
    (*(void (**)(uint64_t, void, void *))(v27 + 16))(v27, 0, v29);

LABEL_40:
  }
LABEL_41:
}

void sub_10006090C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v11 = _AKSignpostLogSystem();
  os_signpost_id_t v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 56);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v39) = [v9 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "iForgot", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
  }

  double v14 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    double v15 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v16 = *(void *)(a1 + 56);
    unsigned int v17 = [v9 code];
    *(_DWORD *)buf = 134218496;
    uint64_t v39 = v16;
    __int16 v40 = 2048;
    double v41 = v15;
    __int16 v42 = 1026;
    unsigned int v43 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:iForgot  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
  }

  uint64_t v18 = +[AAFAnalyticsEvent ak_analyticsEventWithContext:*(void *)(a1 + 32) client:*(void *)(*(void *)(a1 + 40) + 8) eventName:@"com.apple.authkit.accountRecoveryFinish" error:v9];
  if (!v9)
  {
    uint64_t v19 = [v8 objectForKeyedSubscript:AKAuthenticationUsernameKey];
    if (!v19)
    {
      uint64_t v19 = [*(id *)(a1 + 32) username];
    }
    __int16 v20 = [v8 objectForKeyedSubscript:AKAuthenticationPasswordKey];
    if ([v19 length])
    {
      if ([v20 length])
      {
        id v21 = _AKLogSystem();
        BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          if (v22)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "iForgot succeeded, and we have a new auth server response!", buf, 2u);
          }

          [*(id *)(a1 + 40) _sendAnalyticsEvent:v18 withError:0];
          unsigned int v23 = *(void **)(a1 + 32);
          id v24 = *(void **)(a1 + 40);
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_100060DC0;
          v35[3] = &unk_1002287C0;
          v35[4] = v24;
          id v36 = v23;
          id v37 = *(id *)(a1 + 48);
          [v24 _handleVerificationCompletionForUsername:v19 password:v20 serverResponse:v7 didShowServerUI:1 continuationData:0 error:0 context:v36 completion:v35];

          uint64_t v25 = v36;
        }
        else
        {
          if (v22)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "iForgot succeeded, but we do not have a new auth server response. Doing SRP auth...", buf, 2u);
          }

          [*(id *)(a1 + 40) _sendAnalyticsEvent:v18 withError:0];
          id v30 = *(void **)(a1 + 32);
          id v31 = *(void **)(a1 + 40);
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          v32[2] = sub_100060E3C;
          v32[3] = &unk_1002287C0;
          v32[4] = v31;
          id v33 = v30;
          id v34 = *(id *)(a1 + 48);
          [v31 _verifyUsername:v19 password:v20 context:v33 completion:v32];

          uint64_t v25 = v33;
        }

        goto LABEL_27;
      }
      uint64_t v28 = _AKLogSystem();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_1001857BC();
      }

      uint64_t v27 = -7012;
    }
    else
    {
      unsigned int v26 = _AKLogSystem();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100185788();
      }

      uint64_t v27 = -7022;
    }
    __int16 v29 = +[NSError ak_errorWithCode:v27];
    [*(id *)(a1 + 40) _handleRecoverCredentialsError:v29 withContext:*(void *)(a1 + 32) event:v18 andCompletion:*(void *)(a1 + 48)];

LABEL_27:
    goto LABEL_28;
  }
  [*(id *)(a1 + 40) _handleRecoverCredentialsError:v9 withContext:*(void *)(a1 + 32) event:v18 andCompletion:*(void *)(a1 + 48)];
LABEL_28:
}

void sub_100060DC0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) _initiateEDPRepairForAuthenticationContext:*(void *)(a1 + 40) authResults:v7];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_100060E3C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) _initiateEDPRepairForAuthenticationContext:*(void *)(a1 + 40) authResults:v7];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_100061264(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [v8 domain];
  if ([v9 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v10 = [v8 code];

    if (v10 == (id)-7038)
    {
      id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_6:
  v11();
}

void sub_10006178C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = [v9 domain];
  if ([v10 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v11 = [v9 code];

    if (v11 == (id)-7038)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_12;
    }
  }
  else
  {
  }
  id v12 = _AKLogSystem();
  os_signpost_id_t v13 = v12;
  if (v7)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Repair flow succeeded, and we have a new auth server response!", buf, 2u);
    }

    double v14 = *(void **)(a1 + 32);
    double v15 = [*(id *)(a1 + 40) username];
    [v14 _handleVerificationCompletionForUsername:v15 password:0 serverResponse:v7 didShowServerUI:1 continuationData:0 error:v9 context:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10018595C();
    }

    uint64_t v16 = *(void *)(a1 + 56);
    unsigned int v17 = +[NSError ak_errorWithCode:-7010];
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v17);
  }
LABEL_12:
}

void sub_100061B34(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v11 = _AKSignpostLogSystem();
  id v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 56);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v31) = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "CreateNewAppleID", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
  }

  double v14 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    id v31 = *(void **)(a1 + 56);
    __int16 v32 = 2048;
    double v33 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    __int16 v34 = 1026;
    int v35 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:CreateNewAppleID  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
  }

  if (!v9)
  {
    uint64_t v18 = [v7 acceptedDeviceTermsVersion];
    if (v18)
    {
      uint64_t v19 = _AKLogSystem();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v31 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Calling recordUserAcceptedAgreementVersion with %@", buf, 0xCu);
      }

      if (sub_1000225E4()) {
        id v20 = sub_1000227F8();
      }
      else {
        id v20 = 0;
      }
      objc_msgSend(v20, "recordUserAcceptedAgreementVersion:", objc_msgSend(v18, "unsignedIntegerValue"));
    }
    id v21 = [v8 objectForKeyedSubscript:AKAuthenticationUsernameKey];
    BOOL v22 = [v8 objectForKeyedSubscript:AKAuthenticationPasswordKey];
    if ([v21 length])
    {
      if ([v22 length])
      {
        unsigned int v23 = _AKLogSystem();
        id v24 = v23;
        if (v7)
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "New Apple ID creation succeeded, and we have a new auth server response!", buf, 2u);
          }

          [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:v21 password:v22 serverResponse:v7 didShowServerUI:1 continuationData:0 error:0 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
          goto LABEL_35;
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_1001859F8();
        }

        unsigned int v26 = *(void **)(a1 + 32);
        uint64_t v27 = -7010;
      }
      else
      {
        uint64_t v28 = _AKLogSystem();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          sub_1001859C4();
        }

        unsigned int v26 = *(void **)(a1 + 32);
        uint64_t v27 = -7012;
      }
    }
    else
    {
      uint64_t v25 = _AKLogSystem();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100185990();
      }

      unsigned int v26 = *(void **)(a1 + 32);
      uint64_t v27 = -7022;
    }
    __int16 v29 = +[NSError ak_errorWithCode:v27];
    [v26 _handleCreateNewAppleIDError:v29 withContext:*(void *)(a1 + 40) andCompletion:*(void *)(a1 + 48)];

LABEL_35:
    goto LABEL_36;
  }
  double v15 = [v9 domain];
  if ([v15 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v16 = [v9 code];

    if (v16 == (id)-7038)
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = +[NSError ak_errorWithCode:-7043];
      (*(void (**)(uint64_t, id, void *))(v17 + 16))(v17, v8, v18);
LABEL_36:

      goto LABEL_37;
    }
  }
  else
  {
  }
  [*(id *)(a1 + 32) _handleCreateNewAppleIDError:v9 withContext:*(void *)(a1 + 40) andCompletion:*(void *)(a1 + 48)];
LABEL_37:
}

void sub_100062398(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    id v11 = [v8 objectForKeyedSubscript:AKAuthenticationUsernameKey];
    id v12 = [v8 objectForKeyedSubscript:AKAuthenticationPasswordKey];
    if ([v11 length])
    {
      if ([v12 length])
      {
        os_signpost_id_t v13 = _AKLogSystem();
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          if (v14)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Change password flow succeeded, and we have a new auth server response!", buf, 2u);
          }

          [*(id *)(a1 + 32) _handleVerificationCompletionForUsername:v11 password:v12 serverResponse:v7 didShowServerUI:1 continuationData:0 error:0 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
        }
        else
        {
          if (v14)
          {
            *(_WORD *)id v20 = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Change password flow succeeded, but we do not have a new auth server response. Doing SRP auth...", v20, 2u);
          }

          [*(id *)(a1 + 32) _verifyUsername:v11 password:v12 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
        }
        goto LABEL_18;
      }
      uint64_t v18 = _AKLogSystem();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100185B64();
      }

      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = -7012;
    }
    else
    {
      double v15 = _AKLogSystem();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_100185B30();
      }

      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = -7022;
    }
    uint64_t v19 = +[NSError ak_errorWithCode:v17];
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v19);

LABEL_18:
    goto LABEL_19;
  }
  id v10 = _AKLogSystem();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_100185B98();
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_19:
}

void sub_10006282C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100185C9C();
    }
  }
  [*(id *)(a1 + 32) setNeedsPasswordChange:1];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = +[NSMutableURLRequest requestWithURL:*(void *)(a1 + 40)];
  id v8 = +[AKDServerUIContext serverUIContextFromResponse:0 authContext:v6 urlRequest:v7];

  id v9 = -[AKDServerUIController initWithLiaison:client:delegate:]([AKDServerUIController alloc], "initWithLiaison:client:delegate:", *(void *)(*(void *)(a1 + 48) + 48), *(void *)(*(void *)(a1 + 48) + 8));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10006297C;
  v10[3] = &unk_100228EB0;
  id v11 = *(id *)(a1 + 56);
  [(AKDServerUIController *)v9 showServerUIWithContext:v8 completion:v10];
}

void sub_10006297C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [v8 domain];
  if ([v9 isEqual:AKAppleIDAuthenticationErrorDomain])
  {
    id v10 = [v8 code];

    if (v10 == (id)-7038)
    {
      id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_6:
  v11();
}

void sub_100062D00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Piggybacking finished with error: %@", (uint8_t *)&v8, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100062EB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000630BC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 48);
    id v7 = [*(id *)(a1 + 40) initiatingContext];
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000631C8;
    v9[3] = &unk_100228C48;
    id v12 = *(id *)(a1 + 48);
    id v10 = v5;
    id v11 = 0;
    [v6 dismissSecondFactorUIForContext:v7 client:v8 completion:v9];
  }
}

void sub_1000631C8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100185D04();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100063398(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 && a2)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) initiatingContext];
    uint64_t v8 = [*(id *)(a1 + 40) initialAuthResponse];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000634B0;
    v9[3] = &unk_100229158;
    id v11 = *(id *)(a1 + 48);
    id v10 = v5;
    [v6 _handleSuccessfulVerificationForContext:v7 withResults:v10 serverResponse:v8 completion:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_1000634B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10006364C(id *a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100185D6C();
    }
  }
  id v7 = [a1[4] initiatingContext];
  uint64_t v8 = [v7 username];
  id v9 = [a1[4] initiatingPassword];
  id v10 = [a1[4] initialAuthResponse];
  id v11 = [a1[4] initiatingContext];
  [v11 setServiceType:7];

  id v12 = [v7 altDSID];
  os_signpost_id_t v13 = +[AKURLBag bagForAltDSID:v12];
  BOOL v14 = [v13 escapeHatchURL];

  if (v14)
  {
    id v15 = [objc_alloc((Class)NSMutableURLRequest) initWithURL:v14];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10006389C;
    v19[3] = &unk_1002291A8;
    id v16 = a1[5];
    id v24 = a1[6];
    id v17 = v7;
    id v18 = a1[5];
    id v20 = v17;
    id v21 = v18;
    id v22 = v8;
    id v23 = v9;
    [v16 _showServerUIWithURLRequest:v15 context:v17 initialAuthResponse:v10 completion:v19];
  }
  else
  {
    id v15 = +[NSError ak_errorWithCode:-7005];
    if ([v7 _keepAlive]) {
      [a1[5] _keepLoginAliveWithContext:v7 error:v15 andCompletion:a1[6]];
    }
    else {
      (*((void (**)(void))a1[6] + 2))();
    }
  }
}

void sub_10006389C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if ((objc_msgSend(v7, "ak_isUserSkippedError") & 1) != 0
    || objc_msgSend(v7, "ak_isUserTryAgainError"))
  {
    uint64_t v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100185DD4();
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    goto LABEL_15;
  }
  id v9 = [v7 domain];
  if ([v9 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    unsigned int v10 = [*(id *)(a1 + 32) _keepAlive];

    if (v10)
    {
      id v11 = _AKLogSystem();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100185DD4();
      }

      [*(id *)(a1 + 40) _keepLoginAliveWithContext:*(void *)(a1 + 32) error:v7 andCompletion:*(void *)(a1 + 64)];
      goto LABEL_15;
    }
  }
  else
  {
  }
  id v12 = _AKLogSystem();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Piggybacking escape hatch server UI finished, with error: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 40) _handleVerificationCompletionForUsername:*(void *)(a1 + 48) password:*(void *)(a1 + 56) serverResponse:v6 didShowServerUI:1 continuationData:0 error:v7 context:*(void *)(a1 + 32) completion:*(void *)(a1 + 64)];
LABEL_15:
}

void sub_100064124(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleared to begin device list fetch with context %@!", buf, 0xCu);
  }

  id v4 = [AKDeviceListRequester alloc];
  id v5 = +[AKDeviceListStoreManager sharedManager];
  id v6 = objc_opt_new();
  id v7 = +[AKAccountManager sharedInstance];
  uint64_t v8 = [(AKDeviceListRequester *)v4 initWithStoreManager:v5 cdpFactory:v6 accountManager:v7 client:*(void *)(*(void *)(a1 + 40) + 8)];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000642E4;
  v11[3] = &unk_1002287E8;
  int8x16_t v10 = *(int8x16_t *)(a1 + 32);
  id v9 = (id)v10.i64[0];
  int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
  id v13 = *(id *)(a1 + 48);
  [(AKDeviceListRequester *)v8 fetchDeviceListWithContext:v9 completionHandler:v11];
}

void sub_1000642E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_100185E70();
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  int8x16_t v10 = *(void **)(v8 + 40);
  uint64_t v11 = *(void *)(v8 + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100064418;
  v15[3] = &unk_1002288E8;
  id v16 = v9;
  id v12 = *(id *)(a1 + 48);
  id v18 = v6;
  id v19 = v12;
  id v17 = v5;
  id v13 = v6;
  id v14 = v5;
  [v10 endAuthenticatedRequestWithContext:v16 client:v11 clearanceHandler:v15];
}

uint64_t sub_100064418(void *a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleared to end device list fetch with context %@.", (uint8_t *)&v5, 0xCu);
  }

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[5], a1[6]);
  }
  return result;
}

void sub_10006468C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412803;
    uint64_t v10 = v8;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 2113;
    id v14 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Delete device list cache completed for context - %@ with status - %d and error - %{private}@.", (uint8_t *)&v9, 0x1Cu);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v5);
  }
}

void sub_1000648A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSystem();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v5) {
      sub_100185F54();
    }

    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      uint64_t v7 = *(void (**)(void))(v6 + 16);
LABEL_10:
      v7();
    }
  }
  else
  {
    if (v5) {
      sub_100185F20();
    }

    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      uint64_t v7 = *(void (**)(void))(v8 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1000654EC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1000654F8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10006553C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

void sub_1000657C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  _Unwind_Resume(a1);
}

void sub_1000657EC(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleFoundDevice:v3];
}

void sub_100065848(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v5 = _AKLogSiwa();
  uint64_t v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100186058(v3, v6);
    }

    [WeakRetained deactivate];
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Authorization Endorser AppSignIn discovery activated.", v7, 2u);
    }
  }
}

void sub_1000664F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v55 - 176), 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_100066534(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v8 = _AKSignpostLogSystem();
  int v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    int v15 = 67240192;
    LODWORD(v16) = [v5 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "PiggybackingRequestingInitiateSession", " Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v15, 8u);
  }

  __int16 v11 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v13 = *(void *)(a1 + 40);
    unsigned int v14 = [v5 code];
    int v15 = 134218496;
    uint64_t v16 = v13;
    __int16 v17 = 2048;
    double v18 = v12;
    __int16 v19 = 1026;
    unsigned int v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggybackingRequestingInitiateSession  Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v15, 0x1Cu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000666E0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100066770;
  v3[3] = &unk_100226FB8;
  id v4 = *(id *)(a1 + 48);
  [v1 _promptForSecretWithContext:v2 completion:v3];
}

id sub_100066770(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Handshake code prompt finished", v4, 2u);
  }

  [*(id *)(a1 + 32) lock];
  [*(id *)(a1 + 32) signal];
  return [*(id *)(a1 + 32) unlock];
}

uint64_t sub_1000667F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100066804(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = _AKLogSystem();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v9) {
      goto LABEL_7;
    }
    *(_DWORD *)__int16 v19 = 138412290;
    *(void *)&void v19[4] = v7;
    os_signpost_id_t v10 = "Handshake request failed with error: %@";
    __int16 v11 = v8;
    uint32_t v12 = 12;
  }
  else
  {
    if (!v9) {
      goto LABEL_7;
    }
    *(_WORD *)__int16 v19 = 0;
    os_signpost_id_t v10 = "Handshake request finished";
    __int16 v11 = v8;
    uint32_t v12 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, v19, v12);
LABEL_7:

  if (v6) {
    [*(id *)(a1 + 32) _startProximityControllerIfNeededWithPushPayload:v6];
  }
  unsigned int v13 = objc_msgSend(v7, "ak_isAuthenticationErrorWithCode:", -7064, *(_OWORD *)v19);
  if (v13 & 1) != 0 || ([v6 isURLResponse])
  {
    unsigned int v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (v13) {
        CFStringRef v15 = @"YES";
      }
      else {
        CFStringRef v15 = @"NO";
      }
      unsigned int v16 = [v6 isURLResponse];
      *(_DWORD *)__int16 v19 = 138412802;
      if (v16) {
        CFStringRef v17 = @"YES";
      }
      else {
        CFStringRef v17 = @"NO";
      }
      *(void *)&void v19[4] = v15;
      *(_WORD *)&v19[12] = 2112;
      *(void *)&v19[14] = v17;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Handshake request not being marked as completed (isCancellation: %@, isURLResponse: %@) with reply: %@", v19, 0x20u);
    }
  }
  else
  {
    double v18 = _AKLogSystem();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int16 v19 = 138412290;
      *(void *)&void v19[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Marking handshake request as completed with reply: %@", v19, 0xCu);
    }

    [*(id *)(a1 + 40) lock];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
    [*(id *)(a1 + 40) signal];
    [*(id *)(a1 + 40) unlock];
  }
}

id sub_100066A68(uint64_t a1)
{
  [*(id *)(a1 + 32) lock];
  *(void *)&long long v2 = 138413058;
  long long v19 = v2;
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
    {
      if (*(void *)(v3 + 88)) {
        break;
      }
    }
    unsigned __int8 v4 = objc_msgSend(*(id *)(v3 + 104), "ak_isUserTryAgainError", v19);
    uint64_t v3 = *(void *)(a1 + 40);
    if (v4) {
      break;
    }
    id v5 = *(void **)(v3 + 104);
    if (v5)
    {
      unsigned int v6 = objc_msgSend(v5, "ak_isUserTryAgainError");
      uint64_t v3 = *(void *)(a1 + 40);
      if (!v6) {
        break;
      }
    }
    if (*(void *)(v3 + 112)) {
      break;
    }
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void **)(a1 + 40);
      uint64_t v9 = v8[11];
      int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
      uint64_t v11 = v8[13];
      LODWORD(v8) = v8[14] != 0;
      *(_DWORD *)buf = v19;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      uint64_t v23 = v11;
      __int16 v24 = 1024;
      int v25 = v10;
      __int16 v26 = 1024;
      int v27 = (int)v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Waiting for handshake condition with state: %@ - %@ - %d - %d", buf, 0x22u);
    }

    [*(id *)(a1 + 32) wait];
    uint32_t v12 = _AKLogSystem();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = *(void **)(a1 + 40);
      uint64_t v14 = v13[11];
      int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
      uint64_t v16 = v13[13];
      LODWORD(v13) = v13[14] != 0;
      *(_DWORD *)buf = v19;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      uint64_t v23 = v16;
      __int16 v24 = 1024;
      int v25 = v15;
      __int16 v26 = 1024;
      int v27 = (int)v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Finished waiting for handshake condition with state: %@ - %@ - %d - %d", buf, 0x22u);
    }

    if (*(void *)(*(void *)(a1 + 40) + 88) && !*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
    {
      CFStringRef v17 = _AKLogSystem();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Code entered, but no handshake has been completed", buf, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
  if ((objc_msgSend(*(id *)(v3 + 104), "ak_isUserTryAgainError", v19) & 1) != 0
    || objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "ak_isUserCancelError"))
  {
    [*(id *)(a1 + 48) cancel];
  }
  [*(id *)(a1 + 40) _processHandshakeWithContext:*(void *)(a1 + 56) handshakeReply:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) andHandshakeError:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) withCompletion:*(void *)(a1 + 72)];
  return [*(id *)(a1 + 32) unlock];
}

id sub_100067134(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processHandshakeWithContext:*(void *)(a1 + 40) handshakeReply:0 andHandshakeError:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 56)];
}

void sub_100067148(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"NO";
    if (a2) {
      CFStringRef v7 = @"YES";
    }
    int v8 = 138412546;
    CFStringRef v9 = v7;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Piggybacking completion with final process response: %@ - %@", (uint8_t *)&v8, 0x16u);
  }

  [*(id *)(a1 + 32) _processHandshakeWithContext:*(void *)(a1 + 40) handshakeReply:*(void *)(a1 + 48) andHandshakeError:v5 withCompletion:*(void *)(a1 + 56)];
}

void sub_100067648(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  unsigned int v6 = _AKSignpostLogSystem();
  CFStringRef v7 = v6;
  os_signpost_id_t v8 = *(void *)(a1 + 40);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    int v13 = 67240192;
    LODWORD(v14) = [v4 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v8, "PiggybackingRequestingProcessPushPayload", " Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v13, 8u);
  }

  CFStringRef v9 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v11 = *(void *)(a1 + 40);
    unsigned int v12 = [v4 code];
    int v13 = 134218496;
    uint64_t v14 = v11;
    __int16 v15 = 2048;
    double v16 = v10;
    __int16 v17 = 1026;
    unsigned int v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggybackingRequestingProcessPushPayload  Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v13, 0x1Cu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000677E0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 32);
  if (v2[11])
  {
    uint64_t v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User entered a new code after verificaiton failure", buf, 2u);
    }

    if ([*(id *)(a1 + 40) code] == (id)-7036) {
      return [*(id *)(a1 + 32) _deliverPushPayload:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    }
  }
  else
  {
    if (v2[14])
    {
      id v5 = _AKLogSystem();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User succesfully escaped after verification failure", v13, 2u);
      }

      unsigned int v6 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
      return (id)v6();
    }
    uint64_t v7 = v2[13];
    os_signpost_id_t v8 = _AKLogSystem();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        *(_WORD *)unsigned int v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "User escaped with erro after verification failure", v12, 2u);
      }

      uint64_t v10 = *(void *)(a1 + 56);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "We failed to handle verification, passing through the failure", v11, 2u);
    }
  }
  uint64_t v10 = *(void *)(a1 + 56);
LABEL_18:
  unsigned int v6 = *(uint64_t (**)(void))(v10 + 16);
  return (id)v6();
}

void sub_100068390(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v7 = _AKSignpostLogSystem();
  os_signpost_id_t v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 40);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    int v15 = 67240192;
    LODWORD(v16) = [v5 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "PiggybackingRequestingReplyWithContext", " Error=%{public,signpost.telemetry:number1,name=Error}d ", (uint8_t *)&v15, 8u);
  }

  uint64_t v10 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v12 = *(void *)(a1 + 40);
    unsigned int v13 = [v5 code];
    int v15 = 134218496;
    uint64_t v16 = v12;
    __int16 v17 = 2048;
    double v18 = v11;
    __int16 v19 = 1026;
    unsigned int v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggybackingRequestingReplyWithContext  Error=%{public,signpost.telemetry:number1,name=Error}d ", (uint8_t *)&v15, 0x1Cu);
  }

  uint64_t v14 = *(void *)(a1 + 32);
  if (v14) {
    (*(void (**)(uint64_t, uint64_t, id))(v14 + 16))(v14, a2, v5);
  }
}

void sub_10006852C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v6) {
    [*(id *)(a1 + 32) processPushPayload:v6 completion:*(void *)(a1 + 40)];
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100068864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100068888(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  os_signpost_id_t v8 = *(void **)(v7 + 112);
  *(void *)(v7 + 112) = v5;
  id v9 = v5;

  uint64_t v10 = _AKLogSystem();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    id v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Should continue came back with error: %@", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v6;
  id v13 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100068DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100068E18(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = _AKLogSystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Login code validated", v9, 2u);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4 == 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v4;
  id v8 = v4;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100068FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) _cacheSecondFactor:a2 codeCaptureError:a3];
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);

  return [v4 _processCachedUserInputWithContext:v5 completion:v6];
}

void sub_10006922C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v8 = _AKSignpostLogSystem();
  id v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 56);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    int v16 = 67240192;
    LODWORD(v17) = [v6 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "PiggyCodeCollect", " Error=%{public,signpost.telemetry:number1,name=Error}d ", (uint8_t *)&v16, 8u);
  }

  uint64_t v11 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v13 = *(void *)(a1 + 56);
    unsigned int v14 = [v6 code];
    int v16 = 134218496;
    uint64_t v17 = v13;
    __int16 v18 = 2048;
    double v19 = v12;
    __int16 v20 = 1026;
    unsigned int v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggyCodeCollect  Error=%{public,signpost.telemetry:number1,name=Error}d ", (uint8_t *)&v16, 0x1Cu);
  }

  if (v6)
  {
    uint64_t v15 = _AKLogSystem();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10018653C();
    }
  }
  [*(id *)(a1 + 32) _cacheSecondFactor:v5 codeCaptureError:v6];
  [*(id *)(a1 + 32) _processCachedUserInputWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10006958C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a3;
  if (objc_msgSend((id)v7, "ak_isUserSkippedError"))
  {
    id v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "User wants to continue using current piggybacking session", v15, 2u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    os_signpost_id_t v10 = *(void **)(v9 + 96);
    *(void *)(v9 + 96) = 0;

    [*(id *)(a1 + 32) _promptForSecretWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    if (v6 | v7)
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 104), a3);
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 112), a2);
      if (*(void *)(*(void *)(a1 + 32) + 112))
      {
        uint64_t v11 = AKAuthEventType_SECOND_FACTOR_PIGGYBACK_ESCAPE_SMS_SUCCESS;
        uint64_t v12 = 1;
        unint64_t v13 = 0;
      }
      else
      {
        uint64_t v11 = AKAuthEventType_SECOND_FACTOR_PIGGYBACK_ESCAPE_FAILURE;
        uint64_t v12 = 0;
        unint64_t v13 = v7;
      }
      +[AKCAAuthEventReporter reportAuthEventOfType:v11 success:v12 error:v13];
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(void))(v14 + 16))();
    }
  }
}

void sub_100069844(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v7) {
    [*(id *)(*(void *)(a1 + 32) + 24) didEscapeRequesting];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_100069EC8(id a1)
{
  uint64_t v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
    sub_100186780();
  }
}

uint64_t sub_10006B9B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10006C1D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogHme();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100187048();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = +[NSError ak_errorWithCode:-7061];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
}

void sub_10006CA78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogHme();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Presented UI! (%@, %@)", (uint8_t *)&v8, 0x16u);
  }

  [*(id *)(a1 + 32) _cacheFetchedPrivateEmail:v5 keyAlreadyHashed:0 error:v6 completion:*(void *)(a1 + 48)];
}

void sub_10006DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006DC74(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    int v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100187524(a1, (uint64_t)v7, v8);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_10006F130(uint64_t a1)
{
  qword_100272450 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_10006F574(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int16 v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100187A2C((uint64_t)v9, v11);
    }
    uint64_t v12 = 0;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v13 = [*(id *)(a1 + 32) altDSID];
      int v21 = 138412290;
      __int16 v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Fetched user info for %@", (uint8_t *)&v21, 0xCu);
    }
    id v11 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/x-plist"];
    uint64_t v12 = [[AKAppleIDUserInformationResponse alloc] initWithResponseBody:v11];
    uint64_t v14 = *(void **)(a1 + 40);
    uint64_t v15 = [*(id *)(a1 + 32) altDSID];
    [v14 _updateUserConfigIfNecessaryForAltDSID:v15 responseParameters:v11];

    int v16 = *(void **)(a1 + 40);
    uint64_t v17 = [*(id *)(a1 + 32) altDSID];
    [v16 _processIncomingUserInformationForAltDSID:v17 userInformation:v12];

    __int16 v18 = *(void **)(a1 + 40);
    double v19 = [*(id *)(a1 + 32) altDSID];
    [v18 _syncPrivateEmailsForAltDSID:v19 client:*(void *)(a1 + 48) userInformation:v12 completion:0];
  }
  uint64_t v20 = *(void *)(a1 + 56);
  if (v20) {
    (*(void (**)(uint64_t, AKAppleIDUserInformationResponse *, id))(v20 + 16))(v20, v12, v9);
  }
}

void sub_10006F7F0(id a1, AKAppleIDUserInformationResponse *a2, NSError *a3)
{
}

void sub_10006F9CC(id a1, NSDictionary *a2, NSError *a3)
{
  id v3 = a3;
  id v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updated user configs with error %@", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_1000700C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100071938(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _refreshDeviceListForAccount:*(void *)(a1 + 40)];
}

void sub_1000721C4(uint64_t a1)
{
  long long v2 = (id *)(a1 + 32);
  if ([*(id *)(a1 + 32) isEqualToString:@"0"])
  {
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "IDMS sent reset key to revoke authorization Database", buf, 2u);
    }

    id v4 = objc_opt_new();
    uint64_t v5 = *(void *)(a1 + 40);
    id v14 = 0;
    [v4 revokeAuthorizationForAllApplicationsWithAltDSID:v5 error:&v14];
    id v6 = v14;

    id v7 = _AKLogSystem();
    id v8 = v7;
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100187DD0();
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Authorization database revoked successfully", v13, 2u);
    }
  }
  else
  {
    id v9 = objc_opt_new();
    id v6 = [v9 currentAuthorizationListVersionWithAltDSID:*(void *)(a1 + 40)];

    __int16 v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100187E38(v2, (uint64_t)v6, v10);
    }

    if (*v2)
    {
      id v11 = *v2;
      uint64_t v12 = v11;
      if (v6 && [v11 isEqual:v6])
      {
      }
      else
      {

        [*(id *)(a1 + 48) _refreshApplicationInformationForAltDSID:*(void *)(a1 + 40)];
      }
    }
  }
}

int64_t sub_100072804(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_opt_class();
  objc_opt_class();
  id v6 = v4;
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }

  uint64_t v8 = AKInformationCustodianUuidKey;
  id v9 = [v7 objectForKeyedSubscript:AKInformationCustodianUuidKey];
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }

  objc_opt_class();
  objc_opt_class();
  id v11 = v5;
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }

  id v13 = [v12 objectForKeyedSubscript:v8];
  if (objc_opt_isKindOfClass()) {
    id v14 = v13;
  }
  else {
    id v14 = 0;
  }

  id v15 = [v10 compare:v14];
  return (int64_t)v15;
}

int64_t sub_100072984(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  objc_opt_class();
  objc_opt_class();
  id v6 = v4;
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }

  uint64_t v8 = AKInformationBeneficiaryUuidKey;
  id v9 = [v7 objectForKeyedSubscript:AKInformationBeneficiaryUuidKey];
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }

  objc_opt_class();
  objc_opt_class();
  id v11 = v5;
  if (objc_opt_isKindOfClass()) {
    id v12 = v11;
  }
  else {
    id v12 = 0;
  }

  id v13 = [v12 objectForKeyedSubscript:v8];
  if (objc_opt_isKindOfClass()) {
    id v14 = v13;
  }
  else {
    id v14 = 0;
  }

  id v15 = [v10 compare:v14];
  return (int64_t)v15;
}

void sub_100072F2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = objc_opt_new();
    [v7 updateAuthorizationListWithMetadataInfo:v5 withAltDSID:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100187EE8();
    }
  }
}

void sub_10007489C(id a1, AKDeviceListResponse *a2, NSError *a3)
{
  id v3 = a3;
  id v4 = _AKLogSystem();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100188200();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    sub_1001881CC();
  }
}

void sub_100075090(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v4 = +[AKAccountManager sharedInstance];
  id v2 = [v1 initWithAccountManager:v4];
  id v3 = (void *)qword_100272460;
  qword_100272460 = (uint64_t)v2;
}

void sub_100075534(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"sn"];
  id v4 = [v8 objectForKeyedSubscript:@"sn"];
  unsigned int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    id v6 = *(void **)(a1 + 40);
    id v7 = [v8 objectForKeyedSubscript:@"mid"];
    [v6 addObject:v7];
  }
}

void sub_1000755F8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) altDSID];
  [v1 _refreshDeviceListForAltDSID:v2];
}

void sub_1000758A4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) altDSID];
  [v1 _clearDeviceListForAltDSID:v2];
}

void sub_100075ACC(id a1, AKDeviceListResponse *a2, NSError *a3)
{
  id v3 = a3;
  id v4 = _AKLogSystem();
  unsigned int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100188344((uint64_t)v3, v5);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    sub_10018830C(v5, v6, v7, v8, v9, v10, v11, v12);
  }
}

void sub_100075C64(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412803;
    uint64_t v9 = v7;
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 2113;
    id v13 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Clear device list cache completed for context - %@ with status - %d and error - %{private}@", (uint8_t *)&v8, 0x1Cu);
  }
}

void sub_100077410(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  id v4 = v3;
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  id v6 = [v5 mutableCopy];
  uint64_t v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_100188564(v7, v8, v9, v10, v11, v12, v13, v14);
  }

  [v6 removeObjectForKey:AKInformationBeneficiaryWrappedKeyKey];
  [*(id *)(a1 + 32) addObject:v6];
}

void sub_1000777C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  id v4 = v3;
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  id v6 = [v5 mutableCopy];
  uint64_t v7 = _AKLogSystem();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  uint64_t v9 = AKInformationBeneficiaryUuidKey;
  if (v8) {
    sub_100188744(v6, AKInformationBeneficiaryUuidKey, v7);
  }

  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = AKInformationBeneficiaryWrappedKeyKey;
  uint64_t v12 = [v6 objectForKeyedSubscript:AKInformationBeneficiaryWrappedKeyKey];
  uint64_t v13 = [v6 objectForKeyedSubscript:v9];
  [v10 setValue:v12 forKey:v13];

  [v6 removeObjectForKey:v11];
  [*(id *)(a1 + 40) addObject:v6];
}

uint64_t sub_100077970()
{
  uint64_t v2 = 0;
  id v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100272470;
  uint64_t v5 = qword_100272470;
  if (!qword_100272470)
  {
    long long v6 = *(_OWORD *)off_1002297D0;
    long long v7 = *(_OWORD *)&off_1002297E0;
    v3[3] = _sl_dlopen();
    qword_100272470 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_100077A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100077A98(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272470 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100077B28()
{
  uint64_t v0 = sub_100077970();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_100077B84()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272478;
  uint64_t v7 = qword_100272478;
  if (!qword_100272478)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100077C68;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_100077C68((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100077C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100077C68(uint64_t a1)
{
  sub_100077B28();
  Class result = objc_getClass("RPCompanionLinkClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272478 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1001887DC();
    return (Class)sub_100077CC0(v3);
  }
  return result;
}

id sub_100077CC0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272480;
  uint64_t v7 = qword_100272480;
  if (!qword_100272480)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100077DA4;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_100077DA4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100077D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100077DA4(uint64_t a1)
{
  sub_100077B28();
  Class result = objc_getClass("RPCompanionLinkDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272480 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_100188804();
    return (Class)sub_100077DFC(v3);
  }
  return result;
}

uint64_t sub_100077DFC()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272488;
  uint64_t v6 = qword_100272488;
  if (!qword_100272488)
  {
    id v1 = (void *)sub_100077B28();
    v4[3] = (uint64_t)dlsym(v1, "RPDestinationIdentifierDirectPeer");
    qword_100272488 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100077ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100077EEC(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100077B28();
  Class result = dlsym(v2, "RPDestinationIdentifierDirectPeer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272488 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100077F3C()
{
  uint64_t v0 = (void **)sub_100077DFC();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100077F70();
  }
}

uint64_t sub_100077F70()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272490;
  uint64_t v6 = qword_100272490;
  if (!qword_100272490)
  {
    id v1 = (void *)sub_100077B28();
    v4[3] = (uint64_t)dlsym(v1, "RPOptionAllowUnauthenticated");
    qword_100272490 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100078048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100078060(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100077B28();
  Class result = dlsym(v2, "RPOptionAllowUnauthenticated");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272490 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000780B0()
{
  uint64_t v0 = (void **)sub_100077F70();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_1000780E4();
  }
}

uint64_t sub_1000780E4()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272498;
  uint64_t v6 = qword_100272498;
  if (!qword_100272498)
  {
    id v1 = (void *)sub_100077B28();
    v4[3] = (uint64_t)dlsym(v1, "RPOptionTimeoutSeconds");
    qword_100272498 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000781BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000781D4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100077B28();
  Class result = dlsym(v2, "RPOptionTimeoutSeconds");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272498 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100078224()
{
  uint64_t v0 = (void **)sub_1000780E4();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_100078258();
  }
}

id sub_100078258()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002724A0;
  uint64_t v7 = qword_1002724A0;
  if (!qword_1002724A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10007833C;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_10007833C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100078324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AKPrivateEmailServiceController *sub_10007833C(uint64_t a1)
{
  sub_100077B28();
  Class result = (AKPrivateEmailServiceController *)objc_getClass("RPAppSignInService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002724A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10018882C();
    return [(AKPrivateEmailServiceController *)v3 initWithClient:v5 altDSID:v6];
  }
  return result;
}

void sub_10007850C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001889CC((uint64_t)v10, (uint64_t)v7, v11);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v12 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
    uint64_t v13 = [[AKPrivateEmailInformation alloc] initWithResponseBody:v12];
    if ([(AKPrivateEmailInformation *)v13 invalidListVersionSupplied])
    {
      uint64_t v14 = _AKLogHme();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_100188988(v14);
      }

      id v15 = +[AKPrivateEmailStoreManager sharedInstance];
      id v27 = 0;
      [v15 clearDatabase:&v27];
      id v10 = v27;
      if (v10)
      {
        int v16 = _AKLogHme();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          sub_100188910((uint64_t)v10, v16);
        }

        id v17 = v10;
      }
    }
    else
    {
      id v10 = 0;
    }
    __int16 v18 = +[AKPrivateEmailStoreManager sharedInstance];
    id v26 = 0;
    unsigned __int8 v19 = [v18 commitChangesToCacheWithInformation:v13 error:&v26];
    id v20 = v26;
    if ((v19 & 1) == 0)
    {
      id v21 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
      __int16 v22 = _AKLogHme();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_100188898((uint64_t)v21, v22);
      }

      id v23 = v20;
      id v10 = v23;
    }
    if ([(AKPrivateEmailInformation *)v13 shouldSyncWithServer]
      && !*(unsigned char *)(*(void *)(a1 + 32) + 48))
    {
      __int16 v24 = _AKLogHme();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
        sub_100188854(v24);
      }

      int v25 = [[AKPrivateEmailServiceController alloc] initWithClient:*(void *)(*(void *)(a1 + 32) + 32) altDSID:*(void *)(*(void *)(a1 + 32) + 40)];
      [(AKPrivateEmailServiceController *)v25 setIsSecondCall:1];
      [(AKPrivateEmailServiceController *)v25 executeFetchHmeListRequestWithCompletion:*(void *)(a1 + 40)];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_100078C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100078C38(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v10 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleStartFidoResponse:v11 data:v7 context:*(void *)(a1 + 32) recoveryToken:*(void *)(a1 + 40) error:v8 completion:*(void *)(a1 + 48)];
  }
}

void sub_100079198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000791BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v10 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleFinishFidoResponse:v11 data:v7 context:*(void *)(a1 + 32) recoveryToken:*(void *)(a1 + 40) error:v8 completion:*(void *)(a1 + 48)];
  }
}

void sub_100079740(uint64_t a1, void *a2)
{
  id v3 = a2;
  SEL v4 = [v3 apps];
  id v5 = [v4 allKeys];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10007980C;
  v6[3] = &unk_100229848;
  id v7 = *(id *)(a1 + 32);
  [v5 enumerateObjectsUsingBlock:v6];

  [*(id *)(a1 + 40) _storeDeveloperTeam:v3 listVersion:*(void *)(a1 + 48)];
}

void sub_10007980C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  unsigned int v4 = objc_msgSend(v3, "containsObject:");
  id v5 = *(void **)(a1 + 32);
  if (v4) {
    [v5 removeObject:v6];
  }
  else {
    [v5 addObject:v6];
  }
}

id sub_100079994(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_storePrimaryAppAMSMetadata:");
}

void sub_100079BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100079C28(uint64_t a1, uint64_t a2)
{
  id v8 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  unsigned int v4 = +[AKSQLiteHelper stringFromColumn:1 inStatement:a2];
  id v5 = +[AKSQLiteHelper stringFromColumn:2 inStatement:a2];
  id v6 = +[AKSQLiteHelper stringFromColumn:3 inStatement:a2];
  id v7 = objc_alloc_init((Class)AKAppiTunesMetadata);
  [v7 setBundleId:v8];
  [v7 setAppName:v4];
  [v7 setAppDeveloperName:v5];
  [v7 setAdamID:v6];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v7];
}

void sub_100079D3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007A468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10007A4B8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = +[AKSQLiteHelper stringFromColumn:1 inStatement:a2];
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
      *a3 = 1;
    }
  }
}

void sub_10007A564(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10007A91C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    *a3 = 1;
  }
}

void sub_10007A984(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007AC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10007AC5C(uint64_t a1, uint64_t a2)
{
  id v3 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3 != 0;
}

void sub_10007ACB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_10007AFAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007B31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_10007B360(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007B66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, char a18)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_10007B6B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007BABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  objc_destroyWeak(v39);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_10007BB1C(uint64_t a1, uint64_t a2)
{
  id v7 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v4 = +[AKSQLiteHelper stringFromColumn:1 inStatement:a2];
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:2 inStatement:a2];
  id v6 = objc_alloc_init((Class)AKDeveloperTeam);
  [v6 setTeamID:v7];
  [v6 setUserIdentifier:v4];
  [v6 setPrivateEmail:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v6];
}

void sub_10007BC00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007BEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10007BF40(uint64_t a1, uint64_t a2)
{
  id v7 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  uint64_t v4 = +[AKSQLiteHelper stringFromColumn:1 inStatement:a2];
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:2 inStatement:a2];
  id v6 = +[AKSQLiteHelper stringFromColumn:3 inStatement:a2];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setBundleId:v7];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAppName:v4];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAppDeveloperName:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setAdamID:v6];
}

void sub_10007C050(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v28 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10007C424(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007C498(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  id v6 = a3;
  id v7 = [v5 teamID];
  [v4 _storeConsentedApplication:v6 teamID:v7 listVersion:a1[6]];
}

void sub_10007C884(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Block_object_dispose((const void *)(v2 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10007C8B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007CC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_10007CC64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007D06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10007D0C0(uint64_t a1, uint64_t a2)
{
  id v3 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  [*(id *)(a1 + 32) addObject:v3];
}

void sub_10007D124(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007D198(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007D4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10007D52C(uint64_t a1, sqlite3_stmt *a2)
{
  id v18 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  id v17 = +[AKSQLiteHelper stringFromColumn:1 inStatement:a2];
  uint64_t v3 = [v17 componentsSeparatedByString:@","];
  id v15 = +[NSNumber numberWithLongLong:sqlite3_column_int64(a2, 2)];
  uint64_t v4 = +[AKSQLiteHelper stringFromColumn:3 inStatement:a2];
  uint64_t v5 = +[AKSQLiteHelper stringFromColumn:4 inStatement:a2];
  id v6 = +[AKSQLiteHelper stringFromColumn:5 inStatement:a2];
  id v7 = +[AKSQLiteHelper doubleFromColumn:6 inStatement:a2];
  id v8 = +[AKSQLiteHelper stringFromColumn:7 inStatement:a2];
  [v7 doubleValue];
  uint64_t v9 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:");
  id v10 = objc_alloc_init((Class)AKConsentedApplication);
  [v10 setClientID:v18];
  objc_msgSend(v10, "setState:", objc_msgSend(v15, "integerValue"));
  [v10 setTransferState:v4];
  id v11 = (void *)v3;
  [v10 setScopes:v3];
  [v10 setPrimaryClientID:v5];
  if (v6) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = (void *)AKAuthorizationCredentialOriginUnknown;
  }
  [v10 setOrigin:v12];
  [v10 setCreationDate:v9];
  [v10 setClientName:v8];
  uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v14 = [v10 clientID];
  [v13 setObject:v10 forKeyedSubscript:v14];
}

void sub_10007D784(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007D7F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v6 = [v4 clientID];
  uint64_t v5 = [*(id *)(a1 + 32) _fetchAppMetadataForClientID:v6];
  [v4 setAppiTunesMetadata:v5];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v4 forKeyedSubscript:v6];
}

void sub_10007DB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DB78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];
  if (v3) {
    [*(id *)(a1 + 32) addObject:v3];
  }

  return _objc_release_x1();
}

void sub_10007DBE4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007DDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10007DDF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained executor];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10007DE9C;
  v5[3] = &unk_100229938;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  [v3 performQuery:v4 rowHandler:v5];
}

uint64_t sub_10007DE9C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = +[AKSQLiteHelper stringFromColumn:0 inStatement:a2];

  return _objc_release_x1();
}

void sub_10007E0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_10007E0D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007E324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E358(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sqlite3_bind_int(a2, 1, *(_DWORD *)(a1 + 40));
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = +[NSError errorWithDomain:AKSQLErrorDomain code:-6004 userInfo:0];
    return _objc_release_x1();
  }
  return result;
}

void sub_10007E3DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = [WeakRetained executor];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  [v3 performInsertQuery:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_10007E4DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_10007F1A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10007F3CC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _sanitizeContext:*(void *)(a1 + 40)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10007F4F4(uint64_t a1)
{
}

void sub_10007F5A0(uint64_t a1)
{
}

void sub_10007F69C(uint64_t a1)
{
}

void sub_10007F748(uint64_t a1)
{
}

void sub_10007F818(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Transformed %@ (%@)", (uint8_t *)&v9, 0x20u);
  }
}

uint64_t sub_100080034(uint64_t a1)
{
  qword_1002724A8 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_100080398(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if (!v6)
  {
    int v9 = +[AAFSerialization dictionaryFromObject:a3 ofType:@"application/x-plist"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      __int16 v13 = _AKLogSystem();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_1001894C4();
      }

      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v10 = +[NSError ak_errorWithCode:-7010];
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v10);
      goto LABEL_17;
    }
    uint64_t v10 = [v9 objectForKeyedSubscript:@"ec"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      __int16 v11 = [*(id *)(a1 + 32) _decodeConfigurationInfo:v9];
      if (!v11)
      {
        uint64_t v17 = *(void *)(a1 + 48);
        id v18 = +[NSError ak_errorWithCode:-7010];
        (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);

        goto LABEL_16;
      }
      [*(id *)(a1 + 32) updateUserConfigForAltDSID:*(void *)(a1 + 40) configurationInfo:v11];
      id v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    }
    else
    {
      id v15 = _AKLogSystem();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_100189444();
      }

      uint64_t v16 = *(void *)(a1 + 48);
      __int16 v11 = +[NSError ak_errorWithCode:-7010];
      id v12 = *(void (**)(void))(v16 + 16);
    }
    v12();
LABEL_16:

LABEL_17:
    goto LABEL_18;
  }
  id v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1001894F8();
  }

  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = +[NSError ak_errorWithCode:-7029 underlyingError:v6];
  (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
LABEL_18:
}

void sub_10008098C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = _AKLogSystem();
  id v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100189664();
    }

    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = +[NSError ak_errorWithCode:-7029 underlyingError:v5];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set configuration info completed for %@", (uint8_t *)&v11, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100081628(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) _continueSRPContractWithAuthURL:a2 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100189780((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      uint64_t v14 = +[NSError ak_errorWithCode:-7005 underlyingError:v5];
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v14);
    }
  }
}

void sub_1000817F0(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Successful SRP!", v12, 2u);
    }

    uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    if (v7 || !objc_msgSend(v8, "ak_isAuthenticationError"))
    {
      [*(id *)(a1 + 32) _parseFailedServerResponse:v7 withError:v9 context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
      goto LABEL_10;
    }
    uint64_t v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v11();
LABEL_10:
}

void sub_100081E70(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = dispatch_get_global_queue(25, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100081F58;
  block[3] = &unk_100229A50;
  char v14 = a2;
  id v7 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v11 = v7;
  id v8 = *(id *)(a1 + 48);
  id v12 = v5;
  id v13 = v8;
  id v9 = v5;
  dispatch_async(v6, block);
}

id sub_100081F58(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = _AKLogSystem();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Anisette resync was successful. Retrying auth...", (uint8_t *)&v7, 2u);
    }

    return [*(id *)(a1 + 32) performSRPContractWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 56)];
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Anisette resync failed. Error: %@", (uint8_t *)&v7, 0xCu);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1000821EC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = dispatch_get_global_queue(25, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000822D4;
  block[3] = &unk_100229A50;
  char v14 = a2;
  int v7 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v11 = v7;
  id v8 = *(id *)(a1 + 48);
  id v12 = v5;
  id v13 = v8;
  id v9 = v5;
  dispatch_async(v6, block);
}

id sub_1000822D4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = _AKLogSystem();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Anisette erase was successful. Retrying auth...", (uint8_t *)&v7, 2u);
    }

    return [*(id *)(a1 + 32) performSRPContractWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 56)];
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Anisette erase failed. Error: %@", (uint8_t *)&v7, 0xCu);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1000825C8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = _AKLogSystem();
  int v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "URLSwitching was successfull retrying SRP With new url", v14, 2u);
    }

    [*(id *)(a1 + 32) performSRPContractWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10018989C((uint64_t)v5, v7, v8, v9, v10, v11, v12, v13);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100083530(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unsigned __int8 v6 = [*(id *)(a1 + 32) _isCapableOfSilentAuthForRequest:*(void *)(a1 + 40)];
  if (a2 == 2 || (v6 & 1) != 0)
  {
    [*(id *)(a1 + 32) _sanitizedCredentialStateForExternalClients:a2];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    int v7 = _AKLogSiwa();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "This device is not trusted, returning 'REVOKED' credential state", v10, 2u);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = +[NSError ak_errorWithCode:-7084];
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
}

void sub_10008398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000839AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = [*(id *)(a1 + 32) _internalCredentialStateForUserState:a2 error:a3];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100083B4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 _sanitizedCredentialStateForExternalClients:a2];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100084164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000841C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  else {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100084244(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
  else {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100084F8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = _AKLogSiwa();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error fetching shared credentials - %@", buf, 0xCu);
    }
    goto LABEL_4;
  }
  if (v5)
  {
    id v9 = [v5 count];
    int v7 = _AKLogSiwa();
    BOOL v10 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 134217984;
        id v33 = [v5 count];
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Application has a shared credential(s) (count - %lu)", buf, 0xCu);
      }

      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id obj = v5;
      id v11 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v28;
        while (2)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v28 != v13) {
              objc_enumerationMutation(obj);
            }
            id v15 = *(void **)(*((void *)&v27 + 1) + 8 * i);
            uint64_t v16 = [v15 userID];
            uint64_t v17 = [*(id *)(a1 + 32) userID];
            unsigned int v18 = [v16 isEqualToString:v17];

            unsigned __int8 v19 = [v15 teamID];
            id v20 = [*(id *)(a1 + 32) teamID];
            unsigned int v21 = [v19 isEqualToString:v20];

            if (v21) {
              BOOL v22 = v18 == 0;
            }
            else {
              BOOL v22 = 1;
            }
            if (!v22)
            {
              id v23 = _AKLogSiwa();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                int v25 = "Application has a shared credential with matching teamID and userID";
                goto LABEL_36;
              }
              goto LABEL_37;
            }
            if (v21 && [*(id *)(a1 + 32) shouldIgnoreUserID])
            {
              id v23 = _AKLogSiwa();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                int v25 = "Application has a shared credential but userID match is being ignored.";
                goto LABEL_36;
              }
LABEL_37:

              goto LABEL_38;
            }
            if ([*(id *)(a1 + 32) shouldIgnoreTeamID]
              && [*(id *)(a1 + 32) shouldIgnoreUserID])
            {
              id v23 = _AKLogSiwa();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                int v25 = "Application has a shared credential but both userID & teamID match are being ignored.";
LABEL_36:
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v25, buf, 2u);
              }
              goto LABEL_37;
            }
          }
          id v12 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }
LABEL_38:

      uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      goto LABEL_39;
    }
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Application has no shared credentials", buf, 2u);
    }
LABEL_4:

    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_39:
    v8();
  }
}

void sub_1000855A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000855C0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _AKLogSiwa();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100189A74((uint64_t)v7, v8);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

void sub_1000857E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085808(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    uint64_t v8 = _AKLogSiwa();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100189A74((uint64_t)v7, v8);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

void sub_100085A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100085A60(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t sub_10008605C()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_1002724B8;
  uint64_t v5 = qword_1002724B8;
  if (!qword_1002724B8)
  {
    long long v6 = *(_OWORD *)off_100229B88;
    long long v7 = *(_OWORD *)&off_100229B98;
    v3[3] = _sl_dlopen();
    qword_1002724B8 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_10008616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100086184(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002724B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100086214()
{
  uint64_t v0 = sub_10008605C();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_100086270()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002724C0;
  uint64_t v7 = qword_1002724C0;
  if (!qword_1002724C0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100086354;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_100086354((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10008633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100086354(uint64_t a1)
{
  sub_100086214();
  Class result = objc_getClass("CLGeocoder");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002724C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_100189AEC();
    return (Class)sub_1000863AC(v3);
  }
  return result;
}

id sub_1000863AC()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002724C8;
  uint64_t v7 = qword_1002724C8;
  if (!qword_1002724C8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100086490;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_100086490((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100086478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AKPushMessageNotificationPresenter *sub_100086490(uint64_t a1)
{
  sub_100086214();
  Class result = (AKPushMessageNotificationPresenter *)objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002724C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100189B14();
    return [(AKPushMessageNotificationPresenter *)v3 initWithMessage:v5];
  }
  return result;
}

void sub_1000865B0(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.authkit.pushPresenterQueue", v3);
  uint64_t v2 = (void *)qword_1002724D0;
  qword_1002724D0 = (uint64_t)v1;
}

void sub_100086B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100086B3C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _handleResult:a2 forAccount:*(void *)(a1 + 40)];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    SEL v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_100086BA0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100086C00(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    CFRelease(*(CFTypeRef *)(a1 + 56));
    if (a2 == 1
      && [WeakRetained _isPasswordPromptNecessaryForCommand:*(void *)(a1 + 64)])
    {
      id v5 = _AKLogSystem();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notification requires authentication prompt.", v6, 2u);
      }

      [WeakRetained _promptForAuthenticationPasswordForAccount:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

uint64_t sub_10008706C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100087198(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Dismissed code notification.", v3, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t sub_1000873F8(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16) = *(void *)(result + 40);
  return result;
}

uint64_t sub_100087404(uint64_t a1, uint64_t a2)
{
  id v4 = [(id)objc_opt_class() _presenterQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000874BC;
  block[3] = &unk_100226FB8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_sync(v4, block);

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

uint64_t sub_1000874BC(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16) = 0;
  return result;
}

void sub_100087AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100189D04();
  }

  id v5 = [v3 firstObject];

  if (v5)
  {
    uint64_t v6 = [v5 locality];
    uint64_t v7 = [v5 administrativeArea];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v8 = _AKLogSystem();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_100189C80();
  }

  if (v6 && v7)
  {
    id v9 = +[NSBundle bundleWithIdentifier:@"com.apple.AuthKit"];
    BOOL v10 = [v9 localizedStringForKey:@"APPLE_ID_LOCALE_AND_ADMINISTRATIVE_AREA_FORMAT" value:&stru_100233250 table:@"Localizable"];
    id v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, v6, v7);

    goto LABEL_16;
  }
  if (v6)
  {
    id v12 = v6;
LABEL_15:
    id v11 = v12;
    goto LABEL_16;
  }
  if (v7)
  {
    id v12 = v7;
    goto LABEL_15;
  }
  id v11 = 0;
LABEL_16:
  uint64_t v13 = _AKLogSystem();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_100189C0C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008842C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t v2 = *(__CFUserNotification **)(*(void *)(a1 + 32) + 16);
  if (v2)
  {
    CFUserNotificationCancel(v2);
    *(void *)(*(void *)v1 + 16) = 0;
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(*(void *)v1 + 8) messageId];
      int v7 = 138412290;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Torn down notification with ID: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100189D38(v1, v3);
    }
  }

  id v5 = +[NSNotificationCenter defaultCenter];
  uint64_t v6 = [*(id *)(*(void *)v1 + 8) messageId];
  [v5 postNotificationName:@"AKNotificationNameTornDown" object:v6];
}

uint64_t sub_10008873C(uint64_t a1)
{
  CFOptionFlags responseFlags = 0;
  CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(a1 + 48), 0.0, &responseFlags);
  uint64_t v2 = AKUserNotificationResponseAction();
  id v3 = _AKLogSystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = +[NSNumber numberWithUnsignedLong:v2];
    *(_DWORD *)buf = 138412290;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notification responded: %@", buf, 0xCu);
  }
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [*(id *)(a1 + 32) _notificationResultFromButtonPressed:v2]);
}

id sub_100088BD4(uint64_t a1, uint64_t a2)
{
  CFRelease(*(CFTypeRef *)(a1 + 48));
  if (a2 == 1) {
    [*(id *)(a1 + 32) _startChangePasswordFlowForAccount:*(void *)(a1 + 40)];
  }

  return +[NSXPCConnection endTransaction];
}

void sub_100088FB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100189E3C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000896BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSystem();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100189EF4(a1, v3, v5);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = [*(id *)(a1 + 32) description];
    int v9 = 138412290;
    BOOL v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device armed with context %@ successfully.", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = [*(id *)(a1 + 40) _teardownPayloadWithPushMessage:*(void *)(a1 + 48) isArmed:v3 == 0];
  (*(void (**)(uint64_t, BOOL, void *))(v7 + 16))(v7, v3 == 0, v8);
}

void sub_10008A144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A160(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (v3)
  {
    uint64_t v6 = _AKLogSiwa();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10018A128(v3);
    }

    [v5 _deactivate];
  }
  else
  {
    [WeakRetained _sendStartAuthorizationRequest];
  }
}

void sub_10008A3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A414(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v9 = WeakRetained;
  if (v7)
  {
    BOOL v10 = [v7 domain];
    if ([v10 isEqualToString:AKAppleIDAuthenticationErrorDomain])
    {
      id v11 = [v7 code];

      if (v11 == (id)-7071)
      {
        id v12 = _AKLogSiwa();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Ignoring StartAuthorization another endorser is already handling it.", v13, 2u);
        }
LABEL_10:

        [v9 _deactivate];
        goto LABEL_11;
      }
    }
    else
    {
    }
    id v12 = _AKLogSiwa();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10018A1C0(v7);
    }
    goto LABEL_10;
  }
  [WeakRetained _handleStartAuthorizationWithResponse:v6];
LABEL_11:
}

void sub_10008A818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A83C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (v8) {
    [WeakRetained _sendAuthorizationDidFinishRequestWithAuthorization:v8];
  }
  else {
    [WeakRetained _sendAuthorizationDidFinishRequestWithError:v5];
  }
}

void sub_10008AB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008AB38(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v9 = _AKLogSiwa();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = [WeakRetained endorseeDevice];
    id v11 = [WeakRetained endorseeDevice];
    int v12 = 138413058;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    __int16 v18 = 2048;
    unsigned __int8 v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received AuthorizationDidFinish response. {response=%@, error=%@, device=%@, device_ptr=%p}", (uint8_t *)&v12, 0x2Au);
  }
  [WeakRetained _deactivate];
}

void sub_10008AEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008AF28(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v9 = _AKLogSiwa();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = [WeakRetained endorseeDevice];
    id v11 = [WeakRetained endorseeDevice];
    int v12 = 138413058;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    __int16 v18 = 2048;
    unsigned __int8 v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received AuthorizationDidFinish response. {response=%@, error=%@, device=%@, device_ptr=%p}", (uint8_t *)&v12, 0x2Au);
  }
  [WeakRetained _deactivate];
}

void sub_10008B1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B208(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v5 = _AKLogSiwa();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10018A518(v3, WeakRetained, v5);
    }
  }
}

void sub_10008B370(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_10008B3E4(id a1)
{
  uint64_t v1 = objc_alloc_init(AKAuthenticationUILiaison);
  uint64_t v2 = qword_1002724E0;
  qword_1002724E0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10008B57C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018A714();
    }

    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      int v12 = *(void (**)(void))(v11 + 16);
LABEL_12:
      v12();
    }
  }
  else
  {
    id v13 = _AKLogSystem();
    __int16 v14 = v13;
    if (v7 && v8)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_10018A69C();
      }

      uint64_t v15 = *(void *)(a1 + 32);
      if (v15)
      {
        int v12 = *(void (**)(void))(v15 + 16);
        goto LABEL_12;
      }
    }
    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10018A624();
      }

      uint64_t v16 = *(void *)(a1 + 32);
      if (v16)
      {
        uint64_t v17 = +[NSError ak_errorWithCode:-7013];
        (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
      }
    }
  }
}

void sub_10008B7B8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008B898;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 40);
    id v8 = [a2 proxyWithErrorHandler:v9];
    [v8 presentKeepUsingUIForContext:v7 appleID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_10008B898(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008B9C4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008BAA4;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 32);
    id v8 = [a2 proxyWithErrorHandler:v9];
    [v8 dismissKeepUsingUIForContext:v7 withCompletion:*(void *)(a1 + 32)];
  }
}

void sub_10008BAA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008BC74(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008BDC0;
    v13[3] = &unk_100229E58;
    id v8 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v8;
    id v9 = [a2 proxyWithErrorHandler:v13];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008BEE4;
    v11[3] = &unk_100229EA8;
    id v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    [v9 presentBasicLoginUIForContext:v7 completion:v11];
  }
}

void sub_10008BDC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10008BE7C;
  v6[3] = &unk_100227BA8;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_10008BE7C(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10018A7E4(a1, v2, v3, v4, v5, v6, v7, v8);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008BEE4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008C00C;
  block[3] = &unk_100229E80;
  id v14 = *(id *)(a1 + 40);
  id v23 = v12;
  id v24 = v14;
  id v20 = v9;
  id v21 = v10;
  id v22 = v11;
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  id v18 = v9;
  dispatch_async(v13, block);
}

uint64_t sub_10008C00C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_10008C0DC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008C218;
    v11[3] = &unk_100228DD8;
    id v12 = *(id *)(a1 + 32);
    uint64_t v8 = [a2 proxyWithErrorHandler:v11];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008C290;
    v9[3] = &unk_1002270A8;
    id v10 = *(id *)(a1 + 32);
    [v8 dismissBasicLoginUIForContext:v7 completion:v9];
  }
}

void sub_10008C218(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A854();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008C290(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10018A854();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008C43C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10008C5A8;
    v14[3] = &unk_100229E58;
    void v14[4] = *(void *)(a1 + 32);
    id v15 = *(id *)(a1 + 64);
    uint64_t v8 = [a2 proxyWithErrorHandler:v14];
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10008C6CC;
    v12[3] = &unk_100229EA8;
    void v12[4] = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    [v8 presentLoginAlertForContext:v7 withError:v9 title:v10 message:v11 completion:v12];
  }
}

void sub_10008C5A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10008C664;
  v6[3] = &unk_100227BA8;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_10008C664(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10018A7E4(a1, v2, v3, v4, v5, v6, v7, v8);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008C6CC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008C7F4;
  block[3] = &unk_100229E80;
  id v14 = *(id *)(a1 + 40);
  id v23 = v12;
  id v24 = v14;
  id v20 = v9;
  id v21 = v10;
  id v22 = v11;
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  id v18 = v9;
  dispatch_async(v13, block);
}

uint64_t sub_10008C7F4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_10008C8F4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008C9D4;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 32);
    uint64_t v8 = [a2 proxyWithErrorHandler:v9];
    [v8 presentSecondFactorUIForContext:v7 completion:*(void *)(a1 + 32)];
  }
}

void sub_10008C9D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008CB30(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008CC10;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 32);
    uint64_t v8 = [a2 proxyWithErrorHandler:v9];
    [v8 dismissSecondFactorUIForContext:v7 completion:*(void *)(a1 + 32)];
  }
}

void sub_10008CC10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008CDE0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008CEC4;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 56);
    uint64_t v8 = [a2 proxyWithErrorHandler:v9];
    [v8 presentSecondFactorAlertForContext:v7 withError:*(void *)(a1 + 32) title:*(void *)(a1 + 40) message:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_10008CEC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008D1D8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v12 = a2;
  id v9 = a3;
  id v10 = a4;
  [*(id *)(a1 + 32) _sendAnalyticsEvent:a5 withError:v10];
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id, id))(v11 + 16))(v11, v12, v9, v10);
  }
}

void sub_10008D278(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, id, void))(v10 + 16))(v10, 0, 0, v9, *(void *)(a1 + 32));
    }
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10008D40C;
    v16[3] = &unk_100229F48;
    id v18 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    uint64_t v11 = [v7 proxyWithErrorHandler:v16];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008D490;
    v13[3] = &unk_100229F70;
    uint64_t v12 = *(void *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    [v11 presentServerProvidedUIForContext:v8 withConfiguration:v12 completion:v13];
  }
}

void sub_10008D40C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, void, void, id, void))(v5 + 16))(v5, 0, 0, v3, *(void *)(a1 + 32));
  }
}

void sub_10008D490(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018A8BC();
    }
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id, id, void))(v11 + 16))(v11, v7, v8, v9, *(void *)(a1 + 32));
  }
}

void sub_10008D5F4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008D730;
    v11[3] = &unk_100228DD8;
    id v12 = *(id *)(a1 + 32);
    id v8 = [a2 proxyWithErrorHandler:v11];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008D7A8;
    v9[3] = &unk_1002270A8;
    id v10 = *(id *)(a1 + 32);
    [v8 dismissServerProvidedUIForContext:v7 completion:v9];
  }
}

void sub_10008D730(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008D7A8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10018A924();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008DA28(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v9 = a2;
  id v7 = a3;
  [*(id *)(a1 + 32) _sendAnalyticsEvent:a4 withError:v7];
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
  }
}

void sub_10008DAB4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id, void))(v10 + 16))(v10, 0, v9, *(void *)(a1 + 32));
    }
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10008DC44;
    v16[3] = &unk_100229F48;
    id v18 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 32);
    uint64_t v11 = [v7 proxyWithErrorHandler:v16];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10008DCC4;
    v13[3] = &unk_100229158;
    uint64_t v12 = *(void *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    [v11 presentNativeRecoveryUIForContext:v8 recoveryContext:v12 completion:v13];
  }
}

void sub_10008DC44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, void, id, void))(v5 + 16))(v5, 0, v3, *(void *)(a1 + 32));
  }
}

void sub_10008DCC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018A98C();
    }
  }
  id v8 = _AKLogSystem();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "presentNativeRecoveryUIForContext did succeed. Recovered info: %@ and error: %@", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id, void))(v9 + 16))(v9, v5, v6, *(void *)(a1 + 32));
  }
}

void sub_10008DE9C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008DFD8;
    v11[3] = &unk_100228DD8;
    id v12 = *(id *)(a1 + 32);
    id v8 = [a2 proxyWithErrorHandler:v11];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008E050;
    v9[3] = &unk_1002270A8;
    id v10 = *(id *)(a1 + 32);
    [v8 dismissNativeRecoveryUIForContext:v7 completion:v9];
  }
}

void sub_10008DFD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008E050(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10018A9F4();
    }
  }
  id v7 = _AKLogSystem();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "dismissNativeRecoveryUIForContext did succeed.", v8, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008E1D0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008E2B0;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 32);
    id v8 = [a2 proxyWithErrorHandler:v9];
    [v8 presentBiometricOrPasscodeValidationForContext:v7 completion:*(void *)(a1 + 32)];
  }
}

void sub_10008E2B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008E408(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008E4E8;
    v9[3] = &unk_100228DD8;
    id v10 = *(id *)(a1 + 40);
    id v8 = [a2 proxyWithErrorHandler:v9];
    [v8 presentFidoAuthForContext:v7 fidoContext:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_10008E4E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogFido();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008E624(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
  }
}

void sub_10008E7EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
  }
}

void sub_10008E940(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
  }
}

void sub_10008EA80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
  }
}

void sub_10008EBC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v3);
  }
}

void sub_10008ECD4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = _AKLogSystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }
}

void sub_10008EDAC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = _AKLogSystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }
}

void sub_10008F454(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7014];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_10008F4C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7014];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_10008F534(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7014];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

void sub_10008F5A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7044];
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0, 0, v2);
}

uint64_t sub_10008F614(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void sub_100090864(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    unsigned __int8 v6 = [*(id *)(a1 + 32) needsCredentialRecovery];
    id v7 = [*(id *)(a1 + 40) _notificationDictionaryForClient:*(void *)(a1 + 48) context:*(void *)(a1 + 32) needFullUI:*(unsigned __int8 *)(a1 + 64)];
    id v8 = +[AKAlertHandler sharedInstance];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100090AB4;
    v20[3] = &unk_10022A050;
    unsigned __int8 v22 = v6;
    id v21 = *(id *)(a1 + 56);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100090AD4;
    v17[3] = &unk_10022A050;
    unsigned __int8 v19 = v6;
    id v18 = *(id *)(a1 + 56);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100090AEC;
    v15[3] = &unk_100228040;
    id v16 = *(id *)(a1 + 56);
    unsigned __int8 v9 = [v8 showAlert:v7 primaryAction:v20 altAction:v17 cancelAction:v15];

    if ((v9 & 1) == 0)
    {
      id v10 = _AKLogSystem();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_10018AD0C();
      }

      uint64_t v11 = *(void *)(a1 + 56);
      id v12 = +[NSError ak_errorWithCode:-7013];
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13)
    {
      id v14 = +[NSError ak_errorWithCode:-7013 underlyingError:v5];
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v14);
    }
  }
}

uint64_t sub_100090AB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100090AD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100090AEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7003];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100090CD8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10018AE18((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
    }

    objc_end_catch();
    JUMPOUT(0x100090CA0);
  }
  _Unwind_Resume(exception_object);
}

void sub_100091090(id a1)
{
  uint64_t v1 = objc_alloc_init(AKAppleIDCheckInHelperService);
  uint64_t v2 = qword_1002724F0;
  qword_1002724F0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100091180(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _setCheckInAllowedToValue:*(unsigned __int8 *)(a1 + 40) forAccount:a2];
}

uint64_t sub_100091294(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000913C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = +[AKAppleIDPushHelperService sharedService];
  uint64_t v5 = [v4 publicAPSTokenString];
  uint64_t v6 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000914BC;
  v8[3] = &unk_100227250;
  uint64_t v7 = *(void *)(a1 + 72);
  id v10 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 56);
  [v2 _checkInWithIDMSWithAccount:v3 pushToken:v5 event:v6 reason:v7 completion:v8];
}

uint64_t sub_1000914BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100091A68(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Will notify IDMS about teardown response...", buf, 2u);
  }

  id v3 = [*(id *)(a1 + 32) mutableCopy];
  uint64_t v4 = +[AKDevice currentDevice];
  id v5 = [v4 isProtectedWithPasscode];

  uint64_t v6 = +[NSNumber numberWithBool:v5];
  [v3 setObject:v6 forKeyedSubscript:AKPasscodeIndicatorKey];

  id v7 = objc_alloc_init((Class)AKAppleIDAuthenticationContext);
  uint64_t v8 = +[AKAccountManager sharedInstance];
  id v9 = [v8 altDSIDForAccount:*(void *)(a1 + 40)];
  [v7 setAltDSID:v9];

  id v10 = [AKGrandSlamRequestProvider alloc];
  uint64_t v11 = [(AKURLRequestProviderImpl *)v10 initWithContext:v7 urlBagKey:AKURLBagKeyNotificationAck];
  id v12 = [v3 copy];
  [(AKURLRequestProviderImpl *)v11 setAuthKitBody:v12];

  [(AKGrandSlamRequestProvider *)v11 setAuthenticatedRequest:1];
  uint64_t v13 = [*(id *)(a1 + 48) _serviceControllerWithProvider:v11];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100091C74;
  v14[3] = &unk_100228748;
  id v16 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 56);
  [v13 executeRequestWithCompletion:v14];
}

void sub_100091C74(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (v8)
    {
      uint64_t v10 = 0;
      id v11 = v8;
    }
    else
    {
      uint64_t v10 = 1;
      id v11 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, v10, v11);
  }
}

void sub_100091E1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  id v5 = _AKLogSystem();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (state != 2)
  {
    if (v6)
    {
      uint64_t v9 = +[NSNumber numberWithLong:state];
      *(_DWORD *)buf = 138412290;
      id v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity registration complete. State: %@.", buf, 0xCu);
    }
    goto LABEL_8;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity says that it's time run the liveness heartbeat check-in!", buf, 2u);
  }

  if (xpc_activity_set_state(v3, 4))
  {
    id v7 = (void *)os_transaction_create();
    id v8 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100091FCC;
    v10[3] = &unk_100226C00;
    id v11 = v3;
    id v12 = v7;
    id v5 = v7;
    [v8 _performLivenessCheckInForAllEligibleAccountsWithReason:1 completion:v10];

LABEL_8:
  }
}

void sub_100091FCC(uint64_t a1)
{
  xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
  uint64_t v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "XPC activity for liveness heartbeat check-in completed!", v2, 2u);
  }
}

void sub_10009220C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_10009222C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = +[AKFeatureManager sharedManager];
  unsigned int v6 = [v5 isDeviceListCacheEnableDryMode];

  if (v6)
  {
    id v7 = dispatch_get_global_queue(9, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000923E4;
    block[3] = &unk_100226C00;
    id v8 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v16 = v8;
    dispatch_async(v7, block);
  }
  uint64_t v9 = +[AKAccountManager sharedInstance];
  uint64_t v10 = [v9 altDSIDForAccount:*(void *)(a1 + 40)];

  id v11 = +[AKFeatureManager sharedManager];
  unsigned int v12 = [v11 isTokenCacheEnabled];

  if (v12)
  {
    if (v10)
    {
      uint64_t v13 = +[AKTokenManager sharedInstance];
      uint64_t v14 = 0;
      [v13 deleteTokenFromCacheWithIdentifer:0 altDSID:v10 error:&v14];
    }
    else
    {
      uint64_t v13 = _AKLogSystem();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_10018B110();
      }
    }
  }
  [*(id *)(a1 + 32) _clearBirthDayForAltDSID:v10];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_1000923E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearDeviceListCacheForAccount:*(void *)(a1 + 40)];
}

void sub_100092718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_10009274C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000928FC(void *a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Done with account cleanup", v6, 2u);
  }

  id v3 = (void *)a1[5];
  id v4 = +[AKAppleIDPushHelperService sharedService];
  id v5 = [v4 publicAPSTokenString];
  [v3 _performLivenessCheckInForAllEligibleAccountsWithToken:v5 reason:a1[7] completion:a1[6]];
}

void sub_100092CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,os_activity_scope_state_s state)
{
}

void sub_100092CE8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = _AKLogSystem();
  id v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 134349314;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Liveness check-in %{public}lu succeeded for account %@.", (uint8_t *)&v10, 0x16u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_10018B2C0(a1, (uint64_t)v5, v7);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

BOOL sub_100092E44(id a1, ACAccount *a2, unint64_t a3)
{
  id v3 = [(ACAccount *)a2 accountPropertyForKey:@"com.apple.ak.checkin-allowed"];
  unsigned __int8 v4 = [v3 BOOLValue];

  return v4;
}

void sub_1000930AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_1000930C4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v8 = a2;
  id v7 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    +[AKAppleIDCheckInHelperService _setCheckInAllowedToValue:0 forAccount:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) _handleCheckInResponse:v8 data:v7 context:*(void *)(a1 + 48) account:*(void *)(a1 + 32) error:0 completion:*(void *)(a1 + 56)];
  }
}

void sub_100093724(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  int v10 = v9;
  if (v8 && v7 && !v9)
  {
    uint64_t v11 = [AKAttestationDataProvider alloc];
    __int16 v12 = [(AKURLRequestProviderImpl *)v11 initWithContext:*(void *)(a1 + 32) urlBagKey:AKURLBagKeyAttestedOSVersion];
    [(AKAttestationDataProvider *)v12 setAttestationNonce:*(void *)(a1 + 40)];
    [(AKAttestationDataProvider *)v12 setAttestedData:v7];
    [(AKAttestationDataProvider *)v12 setCerts:v8];
    uint64_t v13 = [[AKServiceControllerImpl alloc] initWithRequestProvider:v12];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100093A18;
    v23[3] = &unk_10022A1C8;
    long long v25 = *(_OWORD *)(a1 + 56);
    id v24 = *(id *)(a1 + 48);
    [(AKServiceControllerImpl *)v13 executeRequestWithCompletion:v23];
  }
  else
  {
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    id v15 = _AKSignpostLogSystem();
    id v16 = v15;
    os_signpost_id_t v17 = *(void *)(a1 + 56);
    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v27) = [v10 code];
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_END, v17, "OSVersionAttestation", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
    }

    id v18 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      double v19 = (double)(unint64_t)Nanoseconds / 1000000000.0;
      uint64_t v20 = *(void *)(a1 + 56);
      unsigned int v21 = [v10 code];
      *(_DWORD *)buf = 134218496;
      uint64_t v27 = v20;
      __int16 v28 = 2048;
      double v29 = v19;
      __int16 v30 = 1026;
      unsigned int v31 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:OSVersionAttestation  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
    }

    unsigned __int8 v22 = _AKLogSystem();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_10018B450();
    }

    [*(id *)(a1 + 48) setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    [*(id *)(a1 + 48) populateUnderlyingErrorsStartingWithRootError:v10];
    __int16 v12 = +[AKAnalyticsReporterRTC rtcAnalyticsReporter];
    [(AKAttestationDataProvider *)v12 sendEvent:*(void *)(a1 + 48)];
  }
}

void sub_100093A18(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v9 = _AKSignpostLogSystem();
  int v10 = v9;
  os_signpost_id_t v11 = *(void *)(a1 + 40);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    int v19 = 67240192;
    LODWORD(v20) = [v7 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v11, "OSVersionAttestation", " Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v19, 8u);
  }

  __int16 v12 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    double v13 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint64_t v14 = *(void *)(a1 + 40);
    unsigned int v15 = [v7 code];
    int v19 = 134218496;
    uint64_t v20 = v14;
    __int16 v21 = 2048;
    double v22 = v13;
    __int16 v23 = 1026;
    unsigned int v24 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:OSVersionAttestation  Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v19, 0x1Cu);
  }

  id v16 = *(void **)(a1 + 32);
  if (v7)
  {
    [v16 populateUnderlyingErrorsStartingWithRootError:v7];
    [*(id *)(a1 + 32) setObject:&__kCFBooleanFalse forKeyedSubscript:kAAFDidSucceed];
    os_signpost_id_t v17 = _AKLogSystem();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_10018B4BC();
    }
  }
  else
  {
    [v16 setObject:&__kCFBooleanTrue forKeyedSubscript:kAAFDidSucceed];
  }
  id v18 = +[AKAnalyticsReporterRTC rtcAnalyticsReporter];
  [v18 sendEvent:*(void *)(a1 + 32)];
}

void sub_100093F04(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412803;
    uint64_t v9 = v7;
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 2113;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clear device list cache completed for context - %@ with status - %d and error - %{private}@", (uint8_t *)&v8, 0x1Cu);
  }
}

void sub_1000943F4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v5);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _processCredentialStateChanges:v7 completion:*(void *)(a1 + 40)];
  }
}

id sub_1000944EC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _processCredentialStateChanges:a2];
}

void sub_100094658(void *a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  id v6 = a3;
  [v4 _credentialStateDidChange:0 forApplicationWithClientID:v5];
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100094800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100094818(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) _processCredentialStateChanges:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000948EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  signed int v6 = [a2 intValue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100094990;
  v7[3] = &unk_10022A248;
  void v7[4] = *(void *)(a1 + 32);
  void v7[5] = v6;
  [v5 enumerateObjectsUsingBlock:v7];
}

id sub_100094990(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _credentialStateDidChange:*(void *)(a1 + 40) forApplicationWithClientID:a2];
}

void sub_100094A64(void *a1, void *a2)
{
  id v3 = objc_msgSend(a2, "aaf_map:", &stru_10022A2B0);
  unsigned __int8 v4 = +[NSSet setWithArray:v3];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100094B60;
  v8[3] = &unk_10022A300;
  id v5 = (void *)a1[4];
  void v8[4] = a1[5];
  id v6 = v4;
  id v9 = v6;
  [v5 enumerateKeysAndObjectsUsingBlock:v8];
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v7, 1, 0);
  }
}

id sub_100094B58(id a1, AKSignInWithAppleAccount *a2)
{
  return [(AKSignInWithAppleAccount *)a2 clientID];
}

void sub_100094B60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  signed int v6 = [a2 intValue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100094C18;
  v8[3] = &unk_10022A2D8;
  uint64_t v7 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  uint64_t v10 = v6;
  id v9 = v7;
  [v5 enumerateObjectsUsingBlock:v8];
}

id sub_100094C18(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _credentialStateDidChange:*(void *)(a1 + 48) forApplicationWithClientID:a2 clientIDsInKeychain:*(void *)(a1 + 40)];
}

void sub_100094F38(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = _AKLogSiwa();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10018B5B8((uint64_t)v2, v3);
  }
}

void sub_100094F8C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  signed int v6 = _AKLogSiwa();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = @"NO";
    int v9 = 138412802;
    if (a2) {
      CFStringRef v8 = @"YES";
    }
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    CFStringRef v12 = v8;
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Client (%@) was notified %@ with error %@", (uint8_t *)&v9, 0x20u);
  }
}

id sub_100095154(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _broadcastCredentialStateChange:*(void *)(a1 + 48) forApplicationWithClientID:*(void *)(a1 + 40) withHandlerBundleID:a2];
}

void sub_1000952A0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = _AKLogSiwa();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10018B630((uint64_t)v2, v3);
  }
}

id sub_100095900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }

  return +[NSXPCConnection endTransaction];
}

id sub_1000959FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }

  return +[NSXPCConnection endTransaction];
}

void sub_100095A90(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.authkit.itemstorequeue", v3);
  uint64_t v2 = (void *)qword_100272500;
  qword_100272500 = (uint64_t)v1;
}

uint64_t sub_100095DC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100096594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000965B8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  unsigned __int8 v4 = objc_msgSend(v2, "_unsafe_openDatabase:", &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v4;
}

void sub_100096A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100096AB0(uint64_t a1)
{
  dispatch_queue_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v2 + 40);
  objc_msgSend(v1, "_unsafe_wipeDatabase:", &obj);
  objc_storeStrong((id *)(v2 + 40), obj);
}

id sub_100096C58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_closeDatabase");
}

uint64_t sub_100096E84(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_100272510;
  qword_100272510 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_1000972D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1000972F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _removeConnectionWithProtocol:*(void *)(a1 + 32) forBundleID:*(void *)(a1 + 40)];
}

void sub_100097344(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];
  if (!v3)
  {
    id v3 = +[NSMutableDictionary dictionary];
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "setObject:forKey:");
  }
  uint64_t v2 = NSStringFromProtocol(*(Protocol **)(a1 + 48));
  [v3 setObject:*(void *)(a1 + 56) forKey:v2];
}

void sub_1000974C0(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];
  uint64_t v2 = NSStringFromProtocol(*(Protocol **)(a1 + 48));
  [v3 removeObjectForKey:v2];
  if (![v3 count]) {
    [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
  }
}

id sub_100097644(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];
  id v3 = NSStringFromProtocol(*(Protocol **)(a1 + 48));
  unsigned __int8 v4 = [v2 objectForKey:v3];

  return v4;
}

void sub_10009779C(id a1)
{
  id v1 = objc_alloc_init(AKMIDValidator);
  uint64_t v2 = qword_100272520;
  qword_100272520 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000977D8(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.akd.anisette.validate", v3);
  uint64_t v2 = (void *)qword_100272530;
  qword_100272530 = (uint64_t)v1;
}

void sub_100097970(id a1, BOOL a2, NSError *a3)
{
  unsigned __int8 v4 = a3;
  id v5 = _AKLogSystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_10018BE50(a2, (uint64_t)v4, v5);
  }
}

id sub_100097CC4(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSMutableDictionary dictionaryWithDictionary:a2];
  objc_opt_class();
  id v4 = [v3 objectForKeyedSubscript:@"percentage"];
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  uint64_t v6 = (uint64_t)[v5 integerValue];
  if ((v6 & (unint64_t)~(v6 >> 63)) >= 0x64) {
    unint64_t v7 = 100;
  }
  else {
    unint64_t v7 = v6 & ~(v6 >> 63);
  }
  uint32_t v8 = arc4random_uniform(0x65u);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v10 = _AKLogSystem();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_10018BF10();
  }

  [v3 setObject:0 forKeyedSubscript:@"percentage"];
  if (v7 >= v9) {
    id v11 = [v3 isEqualToDictionary:*(void *)(a1 + 32)];
  }
  else {
    id v11 = 0;
  }

  return v11;
}

uint64_t sub_100098360(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_100272540;
  qword_100272540 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_10009891C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    id v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018C490();
    }
    CFStringRef v12 = 0;
LABEL_11:

    goto LABEL_12;
  }
  __int16 v13 = *(void **)(a1 + 32);
  id v22 = 0;
  unsigned int v14 = [v13 validateResponseData:v8 error:&v22];
  id v10 = v22;
  if (v14)
  {
    id v11 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
    unsigned int v15 = _AKLogSystem();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [*(id *)(a1 + 40) custodianUUID];
      *(_DWORD *)buf = 138412802;
      unsigned int v24 = v16;
      __int16 v25 = 2112;
      id v26 = v7;
      __int16 v27 = 2112;
      __int16 v28 = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Successfully initiated custodian setup for custodianUUID %@\nresponse: %@\ndata: %@", buf, 0x20u);
    }
    os_signpost_id_t v17 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
    CFStringRef v12 = objc_opt_new();
    id v18 = [v17 objectForKeyedSubscript:@"encryptedPRKC"];
    if ([v18 length])
    {
      id v19 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v18 options:0];
      [v12 setEncryptedPRKC:v19];
    }
    uint64_t v20 = [v17 objectForKeyedSubscript:@"ownerCustodianAltDSID"];
    [v12 setOwnerCustodianAltDSID:v20];

    goto LABEL_11;
  }
  CFStringRef v12 = 0;
LABEL_12:
  uint64_t v21 = *(void *)(a1 + 48);
  if (v21) {
    (*(void (**)(uint64_t, void *, id))(v21 + 16))(v21, v12, v10);
  }
}

void sub_100098DE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    id v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018C594();
    }
    goto LABEL_11;
  }
  CFStringRef v12 = *(void **)(a1 + 32);
  id v19 = 0;
  unsigned int v13 = [v12 validateResponseData:v8 error:&v19];
  id v10 = v19;
  unsigned int v14 = _AKLogSystem();
  id v11 = v14;
  if (!v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10018C594();
    }
LABEL_11:

    uint64_t v18 = *(void *)(a1 + 48);
    if (v18)
    {
      os_signpost_id_t v17 = *(void (**)(void))(v18 + 16);
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = [*(id *)(a1 + 40) custodianUUID];
    *(_DWORD *)buf = 138412546;
    uint64_t v21 = v15;
    __int16 v22 = 2112;
    id v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully finalize custodianship for custodianUUID %@, response: %@", buf, 0x16u);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16)
  {
    os_signpost_id_t v17 = *(void (**)(void))(v16 + 16);
LABEL_13:
    v17();
  }
LABEL_14:
}

void sub_1000991E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    id v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018C664();
    }
    goto LABEL_11;
  }
  CFStringRef v12 = *(void **)(a1 + 32);
  id v19 = 0;
  unsigned int v13 = [v12 validateResponseData:v8 error:&v19];
  id v10 = v19;
  unsigned int v14 = _AKLogSystem();
  id v11 = v14;
  if (!v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10018C664();
    }
LABEL_11:

    uint64_t v18 = *(void *)(a1 + 48);
    if (v18)
    {
      os_signpost_id_t v17 = *(void (**)(void))(v18 + 16);
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = [*(id *)(a1 + 40) custodianUUID];
    *(_DWORD *)buf = 138412546;
    uint64_t v21 = v15;
    __int16 v22 = 2112;
    id v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully aborted custodian setup for custodianUUID %@, response: %@", buf, 0x16u);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16)
  {
    os_signpost_id_t v17 = *(void (**)(void))(v16 + 16);
LABEL_13:
    v17();
  }
LABEL_14:
}

void sub_10009960C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018C79C();
    }

    uint64_t v12 = *(void *)(a1 + 40);
    if (v12)
    {
      unsigned int v13 = *(void (**)(void))(v12 + 16);
LABEL_10:
      v13();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = [*(id *)(a1 + 32) custodianUUID];
      int v16 = 138412546;
      os_signpost_id_t v17 = v14;
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully updated recovery key for custodianUUID %@, response: %@", (uint8_t *)&v16, 0x16u);
    }
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      unsigned int v13 = *(void (**)(void))(v15 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1000999E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000999FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018C8B8();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = [*(id *)(a1 + 32) ownerAppleID];
      int v16 = 138412546;
      os_signpost_id_t v17 = v12;
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully started an account recovery for account %@, response: %@", (uint8_t *)&v16, 0x16u);
    }
    uint64_t v13 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
    id v11 = *(NSObject **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }

  uint64_t v15 = *(void *)(a1 + 40);
  if (v15) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v9);
  }
}

void sub_100099E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100099E44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018C954();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully started an account recovery transaction, response: %@", (uint8_t *)&v13, 0xCu);
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), v9);
  }
}

void sub_10009A130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009A150(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018C9BC();
    }

    uint64_t v12 = *(void *)(a1 + 32);
    if (v12)
    {
      int v13 = *(void (**)(void))(v12 + 16);
LABEL_19:
      v13();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v54 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Call to fetch custodian recovery token returned with response: %@", buf, 0xCu);
    }

    id v14 = [v7 statusCode];
    uint64_t v15 = _AKLogSystem();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = +[NSNumber numberWithInteger:v14];
      *(_DWORD *)buf = 138412290;
      id v54 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Vetting validation completed with HTTP status code: %@", buf, 0xCu);
    }
    if (v14 == (id)200)
    {
      os_signpost_id_t v17 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
      __int16 v18 = v17;
      if (v17)
      {
        id v19 = [v17 objectForKeyedSubscript:AKErrorStatusCodeKey];
        if ([v19 integerValue])
        {
          uint64_t v20 = _AKLogSystem();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            sub_10017D588(v19, v20);
          }

          uint64_t v21 = +[NSError ak_errorWithCode:-7029];
          uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
          id v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;

          uint64_t v24 = *(void *)(a1 + 32);
          if (v24) {
            (*(void (**)(uint64_t, void, void))(v24 + 16))(v24, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
          }
        }
        else
        {
          __int16 v34 = [v7 allHeaderFields];
          int v35 = [v34 objectForKeyedSubscript:AKCustodianRecoveryTokenKey];
          id v36 = [v34 objectForKeyedSubscript:AKAltDSIDHeaderKey];
          id v37 = +[AKToken tokenWithBase64String:v35];
          if (v37 && [v36 length])
          {
            uint64_t v52 = v35;
            uint64_t v38 = [v37 stringValue];
            uint64_t v39 = v36;
            __int16 v40 = (void *)v38;
            __int16 v51 = v39;
            double v41 = +[NSString stringWithFormat:@"%@:%@", v39, v38];

            unsigned int v50 = v41;
            __int16 v42 = [v41 dataUsingEncoding:4];
            unsigned int v43 = v42;
            uint64_t v44 = *(void *)(a1 + 32);
            if (v44)
            {
              uint64_t v45 = [v42 base64EncodedStringWithOptions:0];
              (*(void (**)(uint64_t, void *, void))(v44 + 16))(v44, v45, 0);
            }
            id v36 = v51;
            int v35 = v52;
          }
          else
          {
            uint64_t v46 = +[NSError ak_errorWithCode:-7010];
            uint64_t v47 = *(void *)(*(void *)(a1 + 40) + 8);
            uint64_t v48 = *(void **)(v47 + 40);
            *(void *)(v47 + 40) = v46;

            uint64_t v49 = *(void *)(a1 + 32);
            if (v49) {
              (*(void (**)(uint64_t, void, void))(v49 + 16))(v49, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
            }
          }
        }
      }
      else
      {
        double v29 = _AKLogSystem();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          sub_100183CE8();
        }

        uint64_t v30 = +[NSError ak_errorWithCode:-7010];
        uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v32 = *(void **)(v31 + 40);
        *(void *)(v31 + 40) = v30;

        uint64_t v33 = *(void *)(a1 + 32);
        if (v33) {
          (*(void (**)(uint64_t, void, void))(v33 + 16))(v33, 0, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
        }
      }
    }
    else
    {
      uint64_t v25 = +[NSError ak_errorWithCode:-7029];
      uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 8);
      __int16 v27 = *(void **)(v26 + 40);
      *(void *)(v26 + 40) = v25;

      uint64_t v28 = *(void *)(a1 + 32);
      if (v28)
      {
        int v13 = *(void (**)(void))(v28 + 16);
        goto LABEL_19;
      }
    }
  }
}

void sub_10009A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009A908(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018C8B8();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a1[4];
      int v16 = 138412546;
      uint64_t v17 = v12;
      __int16 v18 = 2112;
      id v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successfully fetched data recovery key for account with altDSID %@, response: %@", (uint8_t *)&v16, 0x16u);
    }

    uint64_t v13 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
    uint64_t v14 = *(void *)(a1[6] + 8);
    id v11 = *(NSObject **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }

  uint64_t v15 = a1[5];
  if (v15) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, *(void *)(*(void *)(a1[6] + 8) + 40), v9);
  }
}

void sub_10009ACF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = _AKLogSystem();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018CBD4();
    }

    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      (*(void (**)(uint64_t, id))(v12 + 16))(v12, v9);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138412290;
      id v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Embargo end feedback call returned with response: %@", (uint8_t *)&v18, 0xCu);
    }

    id v13 = [v7 statusCode];
    uint64_t v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = +[NSNumber numberWithInteger:v13];
      int v18 = 138412290;
      id v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Embargo end feedback completed with HTTP status code: %@", (uint8_t *)&v18, 0xCu);
    }
    uint64_t v16 = *(void *)(a1 + 32);
    if (v13 == (id)200)
    {
      if (v16) {
        (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
      }
    }
    else if (v16)
    {
      uint64_t v17 = +[NSError ak_errorWithCode:-7029];
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
    }
  }
}

void sub_10009B4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10009B514(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v11 = WeakRetained;
  if (v9)
  {
    uint64_t v12 = WeakRetained;
    id v13 = _AKLogSystem();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10018CDDC();
    }
LABEL_4:
    id v14 = 0;
    goto LABEL_23;
  }
  if (!WeakRetained)
  {
    uint64_t v12 = 0;
    id v13 = _AKLogSystem();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10018CDA8();
    }
    goto LABEL_4;
  }
  id v13 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
  uint64_t v15 = _AKLogSystem();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v37 = v7;
    __int16 v38 = 2112;
    uint64_t v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Successfully performed TrustedContactsDataSync\nresponse: %@\ndata: %@", buf, 0x16u);
  }

  id v33 = v8;
  uint64_t v16 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
  id v14 = objc_alloc_init((Class)AKTrustedContactsSyncResult);
  objc_opt_class();
  id v17 = [v16 objectForKeyedSubscript:@"custodianListVersion"];
  if (objc_opt_isKindOfClass()) {
    id v35 = v17;
  }
  else {
    id v35 = 0;
  }

  objc_opt_class();
  id v18 = [v16 objectForKeyedSubscript:@"beneficiaryListVersion"];
  if (objc_opt_isKindOfClass()) {
    id v32 = v18;
  }
  else {
    id v32 = 0;
  }

  objc_opt_class();
  id v19 = [v16 objectForKeyedSubscript:@"custodianUUIDs"];
  if (objc_opt_isKindOfClass()) {
    id v20 = v19;
  }
  else {
    id v20 = 0;
  }

  objc_opt_class();
  id v21 = [v16 objectForKeyedSubscript:@"beneficiaryUUIDs"];
  id v34 = v7;
  if (objc_opt_isKindOfClass()) {
    id v22 = v21;
  }
  else {
    id v22 = 0;
  }
  uint64_t v30 = v22;

  uint64_t v31 = v20;
  id v23 = [v11 _trustedContactOperationsByIDFromArray:v20];
  uint64_t v12 = v11;
  uint64_t v24 = [v11 _trustedContactOperationsByIDFromArray:v22];
  [v14 setCustodianListVersion:v35];
  [v14 setBeneficiaryListVersion:v32];
  [v14 setCustodianOperationsByID:v23];
  [v14 setBeneficiaryOperationsByID:v24];
  uint64_t v25 = *(void **)(a1 + 32);
  uint64_t v26 = [v14 custodianListVersion];
  [v25 setCustodianListVersion:v26 forAccount:*(void *)(a1 + 40)];

  __int16 v27 = *(void **)(a1 + 32);
  uint64_t v28 = [v14 beneficiaryListVersion];
  [v27 setBeneficiaryListVersion:v28 forAccount:*(void *)(a1 + 40)];

  [*(id *)(a1 + 32) saveAccount:*(void *)(a1 + 40) error:0];
  id v8 = v33;
  id v7 = v34;
LABEL_23:

  uint64_t v29 = *(void *)(a1 + 48);
  if (v29) {
    (*(void (**)(uint64_t, id, id))(v29 + 16))(v29, v14, v9);
  }
}

void sub_10009C37C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_10009C3F8(id a1)
{
  id v1 = objc_alloc_init(AKTokenManager);
  uint64_t v2 = qword_100272550;
  qword_100272550 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10009C6F0(void *a1)
{
  id v3 = [[AKTokenRequestContext alloc] initWithIdentifier:a1[4] altDSID:a1[5]];
  [(AKTokenRequestContext *)v3 setToken:a1[6]];
  [*(id *)(a1[7] + 24) updateWithContext:v3];
  [*(id *)(a1[7] + 32) updateWithContext:v3 error:a1[10]];
  uint64_t v2 = +[AKAccountManager sharedInstance];
  [v2 setToken:a1[6] tokenID:a1[4] account:a1[8] credential:a1[9]];
}

void sub_10009CB6C(uint64_t a1)
{
  uint64_t v2 = [[AKTokenRequestContext alloc] initWithIdentifier:*(void *)(a1 + 32) altDSID:*(void *)(a1 + 40)];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 48) + 24) fetchWithContext:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    uint64_t v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10018D560();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  }
  uint64_t v7 = [*(id *)(*(void *)(a1 + 48) + 32) fetchWithContext:v2 error:*(void *)(a1 + 120)];
  uint64_t v8 = *(void *)(*(void *)(a1 + 88) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  id v11 = _AKLogSystem();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
  if (v10)
  {
    if (v12) {
      sub_10018D52C();
    }

    id v13 = +[AKFeatureManager sharedManager];
    unsigned int v14 = [v13 isTokenCreationTimeEnabled];

    if (v14)
    {
      uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      if (!v15) {
        goto LABEL_13;
      }
      uint64_t v16 = [v15 creationDate];
      if (!v16) {
        goto LABEL_13;
      }
      id v17 = (void *)v16;
      id v18 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) creationDate];
      id v19 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) creationDate];
      id v20 = [v18 compare:v19];

      if (v20 != (id)1)
      {
        uint64_t v22 = *(void *)(a1 + 96);
      }
      else
      {
LABEL_13:
        id v21 = _AKLogSystem();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          sub_10018D4F8();
        }

        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40));
        uint64_t v22 = *(void *)(a1 + 80);
      }
      *(unsigned char *)(*(void *)(v22 + 8) + 24) = 1;
    }
    else
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40));
    }
  }
  else
  {
    if (v12) {
      sub_10018D4C4();
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 1;
    if (*(void *)(a1 + 120))
    {
      id v23 = _AKLogSystem();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        sub_10018D444((uint64_t **)(a1 + 120), v23);
      }
    }
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v24 = +[AKAccountManager sharedInstance];
    uint64_t v25 = [v24 _tokenWithName:*(void *)(a1 + 32) forAccount:*(void *)(a1 + 56) error:*(void *)(a1 + 120)];
    uint64_t v26 = *(void *)(*(void *)(a1 + 104) + 8);
    __int16 v27 = *(void **)(v26 + 40);
    *(void *)(v26 + 40) = v25;

    if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40))
    {
      uint64_t v28 = _AKLogSystem();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        sub_10018D410();
      }

      uint64_t v29 = +[AKFeatureManager sharedManager];
      unsigned int v30 = [v29 isTokenCreationTimeEnabled];

      if (v30)
      {
        uint64_t v31 = +[AKAccountManager sharedInstance];
        id v32 = [v31 tokenCreationDateWithIdentifier:*(void *)(a1 + 32) forAccount:*(void *)(a1 + 56) error:0];

        id v33 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        if (!v33) {
          goto LABEL_33;
        }
        if (v32)
        {
          uint64_t v34 = [v33 creationDate];
          if (v34)
          {
            id v35 = (void *)v34;
            id v36 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) creationDate];
            id v37 = [v32 compare:v36];

            if (v37 == (id)1)
            {
LABEL_33:
              __int16 v38 = _AKLogSystem();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
                sub_10018D3A8();
              }

              uint64_t v39 = +[AKToken tokenWithValue:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) lifetime:0];
              uint64_t v40 = *(void *)(*(void *)(a1 + 72) + 8);
              double v41 = *(void **)(v40 + 40);
              *(void *)(v40 + 40) = v39;
            }
          }
        }
      }
      else
      {
        __int16 v42 = _AKLogSystem();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
          sub_10018D3DC();
        }

        uint64_t v43 = +[AKToken tokenWithValue:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) lifetime:0];
        uint64_t v44 = *(void *)(*(void *)(a1 + 72) + 8);
        uint64_t v45 = *(void **)(v44 + 40);
        *(void *)(v44 + 40) = v43;
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 128) && *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    uint64_t v46 = _AKLogSystem();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
      sub_10018D2F8((void *)a1, v46);
    }

    uint64_t v47 = [[AKTokenRequestContext alloc] initWithIdentifier:*(void *)(a1 + 32) altDSID:*(void *)(a1 + 40)];
    [(AKTokenRequestContext *)v47 setToken:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)) {
      [*(id *)(*(void *)(a1 + 48) + 24) updateWithContext:v47];
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24)) {
      [*(id *)(*(void *)(a1 + 48) + 32) updateWithContext:v47 error:*(void *)(a1 + 120)];
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
    {
      uint64_t v48 = +[AKAccountManager sharedInstance];
      uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      uint64_t v50 = *(void *)(a1 + 32);
      __int16 v51 = *(void **)(a1 + 56);
      uint64_t v52 = [v51 credentialWithError:*(void *)(a1 + 120)];
      [v48 setToken:v49 tokenID:v50 account:v51 credential:v52];
    }
  }
}

void sub_10009D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009D610(void *a1)
{
  uint64_t v2 = [[AKTokenRequestContext alloc] initWithIdentifier:a1[4] altDSID:a1[5]];
  uint64_t v3 = *(void **)(a1[6] + 24);
  if (a1[4])
  {
    [v3 deleteWithContext:v2];
    [*(id *)(a1[6] + 32) deleteWithContext:v2 error:a1[9]];
  }
  else
  {
    [v3 clearAllTokensForAltDSID:a1[5]];
    [*(id *)(a1[6] + 32) clearAllTokensForAltDSID:a1[5] error:a1[9]];
  }
  if (*(void *)(*(void *)(a1[8] + 8) + 40))
  {
    uint64_t v4 = _AKLogSystem();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10018D678();
    }

    id v5 = +[AKAccountManager sharedInstance];
    [v5 setToken:0 tokenID:a1[4] account:*(void *)(*(void *)(a1[8] + 8) + 40) credential:a1[7]];
  }
}

void sub_10009DD64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018D6E0((uint64_t)v6, v7);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v6);
  }
}

void sub_10009DF48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018D79C();
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
  }
}

void sub_10009E0AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018D828();
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
  }
}

void sub_10009E210(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018D8B4();
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
  }
}

void sub_10009E3A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem();
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018D9B8();
    }
    id v9 = 0;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully setup Beneficiary Alias\nresponse: %@", (uint8_t *)&v12, 0xCu);
    }

    id v9 = objc_alloc_init((Class)AKBeneficiaryAliasSetupResult);
    uint64_t v10 = [v5 objectForKeyedSubscript:@"beneficiaryADSID"];
    [v9 setBeneficiaryAltDSID:v10];

    uint64_t v8 = [v5 objectForKeyedSubscript:@"beneficiaryAccountName"];
    [v9 setBeneficiaryAccountName:v8];
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v9, v6);
  }
}

void sub_10009E6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009E6DC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018DA44((uint64_t)v9, v10);
    }

    id v11 = v9;
  }
  else
  {
    int v12 = (void *)a1[4];
    id v19 = 0;
    unsigned int v13 = [v12 validateResponseData:v8 error:&v19];
    id v11 = v19;
    if (v13)
    {
      unsigned int v14 = _AKLogSystem();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully executed the request with response: %@", buf, 0xCu);
      }

      uint64_t v15 = +[AAFSerialization dictionaryFromObject:v8 ofType:@"application/json"];
      uint64_t v16 = *(void *)(a1[6] + 8);
      id v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
    }
  }
  uint64_t v18 = a1[5];
  if (v18) {
    (*(void (**)(uint64_t, void, id))(v18 + 16))(v18, *(void *)(*(void *)(a1[6] + 8) + 40), v11);
  }
}

uint64_t sub_10009E878(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10009EAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009EAE8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3 = sqlite3_column_text(a2, 0);
  if (v3)
  {
    id v4 = +[NSString stringWithUTF8String:v3];
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 intValue];
  }
}

void sub_10009EC88(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 40) stringFromColumn:1 inStatement:a2];
  if (v4)
  {
    id v9 = v4;
    id v5 = [*(id *)(a1 + 40) stringFromColumn:2 inStatement:a2];
    id v6 = v5;
    if (v5)
    {
      id v7 = v5;
    }
    else
    {
      id v7 = +[NSNull null];
    }
    id v8 = v7;

    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v9];
    id v4 = v9;
  }
}

void sub_10009EFF0(id a1)
{
  id v1 = objc_alloc_init(AKURLBagService);
  uint64_t v2 = (void *)qword_100272560;
  qword_100272560 = (uint64_t)v1;

  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.authkit.urlbag.trafficQueue", v3);
  id v5 = *(void **)(qword_100272560 + 8);
  *(void *)(qword_100272560 + 8) = v4;

  id v8 = dispatch_queue_attr_make_with_autorelease_frequency((dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v6 = dispatch_queue_create("com.apple.authkit.urlbag.clearanceQueue", v8);
  id v7 = *(void **)(qword_100272560 + 16);
  *(void *)(qword_100272560 + 16) = v6;
}

uint64_t sub_10009F370(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_queue_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  uint64_t v5 = objc_opt_new();
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 56);
  *(void *)(v6 + 56) = v5;

  return _objc_release_x1(v5, v7);
}

void sub_10009F764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10009F798(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10009FB34(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9
    && +[AKAccountManager isAccountsFrameworkAvailable])
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018DC74();
    }

    uint64_t v11 = *(void *)(a1 + 48);
    objc_msgSend(v9, "ac_secureCodingError");
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    unsigned int v13 = +[NSError ak_errorWithCode:-7005 underlyingError:v12];
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v13);

    goto LABEL_26;
  }
  if (v7)
  {
    id v12 = v8;
    unsigned int v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [v12 allHeaderFields];
      *(_DWORD *)buf = 138412290;
      id v32 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "URL Bag response headers: %@", buf, 0xCu);
    }
    id v30 = 0;
    uint64_t v16 = +[NSPropertyListSerialization propertyListWithData:v7 options:0 format:0 error:&v30];
    id v17 = v30;
    if (v16)
    {
      uint64_t v18 = _AKLogSystem();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v32 = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "URL Bag Fetched! %@", buf, 0xCu);
      }

      if ([*(id *)(a1 + 32) fromURLCache]) {
        goto LABEL_25;
      }
      id v19 = [*(id *)(a1 + 32) context];
      id v20 = [v19 altDSID];

      if (!v20)
      {
        id v21 = +[AKConfiguration sharedConfiguration];
        objc_msgSend(v21, "setLastKnownIDMSEnvironment:", +[AKURLBag IDMSEnvironmentFromBag:](AKURLBag, "IDMSEnvironmentFromBag:", v16));
      }
      uint64_t v22 = *(void **)(a1 + 40);
      id v23 = [*(id *)(a1 + 32) context];
      uint64_t v24 = [v23 altDSID];
      [v22 _updateCacheWithBag:v16 forAltDSID:v24];
    }
    else
    {
      if (![v7 length])
      {
LABEL_25:
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

        goto LABEL_26;
      }
      id v27 = objc_alloc((Class)NSString);
      id v28 = v7;
      id v23 = objc_msgSend(v27, "initWithBytes:length:encoding:", objc_msgSend(v28, "bytes"), objc_msgSend(v28, "length"), 4);
      uint64_t v29 = _AKLogSystem();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_10018DC00();
      }

      uint64_t v24 = _AKLogSystem();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
        sub_10018DB98();
      }
    }

    goto LABEL_25;
  }
  uint64_t v25 = _AKLogSystem();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
    sub_10018DB58();
  }

  uint64_t v26 = *(void *)(a1 + 48);
  id v12 = +[NSError ak_errorWithCode:-7005];
  (*(void (**)(uint64_t, void, id))(v26 + 16))(v26, 0, v12);
LABEL_26:
}

void sub_1000A0194(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v8 = _AKSignpostLogSystem();
  id v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v13) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "FetchURLBag", "", (uint8_t *)&v13, 2u);
  }

  uint64_t v11 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    int v13 = 134218240;
    uint64_t v14 = v12;
    __int16 v15 = 2048;
    double v16 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchURLBag ", (uint8_t *)&v13, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A0310(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(AKBagTrafficClearanceRequest);
  uint64_t v3 = +[AKURLBagFetchContext contextWithAltDSID:*(void *)(a1 + 32)];
  [(AKBagTrafficClearanceRequest *)v2 setContext:v3];

  [(AKBagTrafficClearanceRequest *)v2 setFromURLCache:*(unsigned __int8 *)(a1 + 64)];
  [(AKBagTrafficClearanceRequest *)v2 setIgnoreMemoryCache:*(unsigned __int8 *)(a1 + 65)];
  [(AKBagTrafficClearanceRequest *)v2 setUrlSwitchData:*(void *)(a1 + 40)];
  [(AKBagTrafficClearanceRequest *)v2 setClearanceHandler:*(void *)(a1 + 56)];
  dispatch_queue_t v4 = *(void **)(a1 + 48);
  if (*(unsigned char *)(a1 + 64))
  {
    id v5 = [(AKBagTrafficClearanceRequest *)v2 context];
    id v6 = [v5 altDSID];
    id v7 = [v4 _cachedURLBagForAltDSID:v6];

    id v8 = *(void **)(a1 + 48);
    if (v7)
    {
      [v8 _invokeClearanceRequest:v2 urlBag:v7 error:0];
    }
    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1000A052C;
      v14[3] = &unk_10022A730;
      void v14[4] = v8;
      __int16 v15 = v2;
      [v8 _fetchBagFromNetworkWithRequest:v15 completion:v14];
    }
  }
  else
  {
    id v9 = [*(id *)(a1 + 48) activeBagFetchRequest];

    os_signpost_id_t v10 = *(void **)(a1 + 48);
    if (v9)
    {
      uint64_t v11 = [v10 pendingBagFetchRequests];
      [v11 addObject:v2];
    }
    else
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1000A0540;
      v12[3] = &unk_10022A730;
      void v12[4] = v10;
      int v13 = v2;
      objc_msgSend(v10, "_tq_invokeRequest:completion:", v13, v12);
    }
  }
}

id sub_1000A052C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _invokeClearanceRequest:*(void *)(a1 + 40) urlBag:a2 error:a3];
}

void sub_1000A0540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) _invokeClearanceRequest:*(void *)(a1 + 40) urlBag:a2 error:a3];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A05D4;
  block[3] = &unk_100226FB8;
  void block[4] = v4;
  dispatch_async(v5, block);
}

id sub_1000A05D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_processPendingRequests");
}

void sub_1000A06C0(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invoking clearance for bag request %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 32) clearanceHandler];
  v4[2](v4, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1000A08D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) _invokeClearanceRequest:*(void *)(a1 + 40) urlBag:a2 error:a3];
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A096C;
  block[3] = &unk_100226FB8;
  void block[4] = v4;
  dispatch_async(v5, block);
}

id sub_1000A096C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_tq_processPendingRequests");
}

uint64_t sub_1000A0A90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000A0B80(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length]) {
    uint64_t v2 = *(__CFString **)(a1 + 32);
  }
  else {
    uint64_t v2 = @"AKSharedBag";
  }
  uint64_t v3 = v2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:v3];
  int v5 = v4;
  if (v4 && ([v4 timeIntervalSinceNow], v6 < 86400.0))
  {
    id v7 = [*(id *)(*(void *)(a1 + 40) + 56) objectForKeyedSubscript:v3];
    if (v7) {
      goto LABEL_13;
    }
    id v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10018DE88();
    }
  }
  else
  {
    id v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10018DE04();
    }
    id v7 = 0;
  }

LABEL_13:

  return v7;
}

void sub_1000A0DD8(void *a1)
{
  id v2 = [*(id *)(a1[4] + 56) mutableCopy];
  [v2 setObject:a1[6] forKeyedSubscript:a1[5]];
  id v3 = [v2 copy];
  uint64_t v4 = a1[4];
  int v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = v3;

  id v6 = [*(id *)(a1[4] + 32) mutableCopy];
  id v7 = +[NSDate date];
  [v6 setObject:v7 forKeyedSubscript:a1[5]];

  id v8 = [v6 copy];
  uint64_t v9 = a1[4];
  os_signpost_id_t v10 = *(void **)(v9 + 32);
  *(void *)(v9 + 32) = v8;

  uint64_t v11 = _AKLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = a1[5];
    uint64_t v13 = *(void *)(a1[4] + 32);
    int v14 = 138412546;
    uint64_t v15 = v13;
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "URL bag cache updated %@ for key: %@", (uint8_t *)&v14, 0x16u);
  }
}

uint64_t sub_1000A12FC(uint64_t a1, uint64_t a2, xpc_object_t xuint)
{
  if (xuint)
  {
    int v5 = +[NSNumber numberWithUnsignedLongLong:xpc_uint64_get_value(xuint)];
  }
  else
  {
    int v5 = &off_10023B110;
  }
  id v6 = +[NSString stringWithFormat:@"%s", a2];
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];

  return 1;
}

void sub_1000A14A4(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4 = a3;
  int v5 = _AKLogSystem();
  id v6 = v5;
  if (a2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully checked in with IDMS.", v7, 2u);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_10018DFA8((uint64_t)v4, v6);
  }
}

void sub_1000A1A58(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _AKLogSiwa();
  int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018E088();
    }

    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = a1[4];
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Attempting to authorize request: %@", buf, 0xCu);
    }

    if ([a1[4] _isWebLogin]) {
      unsigned int v7 = [a1[4] _isFirstPartyLogin];
    }
    else {
      unsigned int v7 = 0;
    }
    if (([*((id *)a1[5] + 6) authorizationClientProvidesUI] & 1) != 0
      || ([a1[4] _isEligibleForUpgradeFromPassword] | v7) == 1)
    {
      id v8 = [a1[4] copy];
      uint64_t v9 = a1[5];
      os_signpost_id_t v10 = (void *)v9[11];
      v9[11] = v8;
    }
    uint64_t v11 = [[AKCATiburonRequestReporter alloc] initWithRequestContext:a1[4]];
    uint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    uint64_t v17 = sub_1000A1C6C;
    uint64_t v18 = &unk_10022A848;
    id v19 = v11;
    id v20 = a1[4];
    id v12 = a1[6];
    id v21 = a1[5];
    id v22 = v12;
    uint64_t v13 = v11;
    int v14 = objc_retainBlock(&v15);
    objc_msgSend(a1[5], "_createAndPerformRequest:completion:", a1[4], v14, v15, v16, v17, v18);
  }
}

void sub_1000A1C6C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [a1[4] didCompleteWithAuthorization:v5 error:v6];
  [a1[4] sendReport];
  if (v5)
  {
    unsigned int v7 = [v5 authorizedRequest];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      uint64_t v9 = [v5 authorizedRequest];
      os_signpost_id_t v10 = [v9 _sanitizedCopy];
      [v5 setAuthorizedRequest:v10];
    }
    uint64_t v11 = (void (*)(void))*((void *)a1[7] + 2);
    goto LABEL_13;
  }
  if (!v6)
  {
    id v12 = _AKLogSiwa();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10018E15C();
    }

    id v6 = +[NSError ak_errorWithCode:-7001];
  }
  uint64_t v13 = _AKLogSiwa();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_10018E0F0();
  }

  if ([a1[5] _shouldSkipAuthorizationUI])
  {
    uint64_t v11 = (void (*)(void))*((void *)a1[7] + 2);
LABEL_13:
    v11();
    goto LABEL_14;
  }
  uint64_t v18 = [a1[6] client];
  id v19 = [v18 bundleID];

  if (v19)
  {
    id v20 = [v6 userInfo];
    id v21 = [v20 mutableCopy];
    id v22 = v21;
    if (v21)
    {
      id v23 = v21;
    }
    else
    {
      id v23 = +[NSMutableDictionary dictionary];
    }
    id v24 = v23;

    uint64_t v25 = [a1[6] client];
    uint64_t v26 = [v25 bundleID];
    [v24 setObject:v26 forKey:AKClientBundleIDKey];

    id v27 = [v6 domain];
    id v28 = [v6 code];
    id v29 = [v24 copy];
    uint64_t v30 = +[NSError errorWithDomain:v27 code:v28 userInfo:v29];

    id v6 = (id)v30;
  }
  uint64_t v31 = +[AKAlertHandler sharedInstance];
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1000A2014;
  v34[3] = &unk_100228C48;
  id v37 = a1[7];
  id v35 = 0;
  id v6 = v6;
  id v36 = v6;
  [v31 showAlertForError:v6 withCompletion:v34];

LABEL_14:
  id v15 = a1[5];
  int v14 = a1[6];
  uint64_t v16 = (void *)v14[3];
  uint64_t v17 = v14[6];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1000A202C;
  v32[3] = &unk_10022A820;
  id v33 = v15;
  [v16 endSessionWithContext:v33 client:v17 completion:v32];
}

uint64_t sub_1000A2014(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000A202C(uint64_t a1)
{
  id v2 = _AKLogSiwa();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Authorization ended for requestContext: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000A2240(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = _AKLogSiwa();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10018E190();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A2484(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A2638(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = sub_10000F9A0;
  uint64_t v17 = sub_10000F820;
  id v18 = +[NSSet setWithArray:v5];
  if (v14[5])
  {
    unsigned int v7 = +[AKURLBag sharedBag];
    uint64_t v8 = AKURLBagKeyForgotPasswordWebURL;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000A2800;
    v10[3] = &unk_10022A8C0;
    id v12 = &v13;
    id v11 = *(id *)(a1 + 32);
    [v7 urlForKey:v8 fromCache:1 completion:v10];
  }
  else
  {
    uint64_t v9 = _AKLogSiwa();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10018E1F8();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  _Block_object_dispose(&v13, 8);
}

void sub_1000A27E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A2800(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    unsigned int v7 = [a2 absoluteString];
    uint64_t v8 = [v6 setByAddingObject:v7];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    os_signpost_id_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    id v11 = _AKLogSiwa();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      sub_10018E2C8();
    }
  }
  else
  {
    id v11 = _AKLogSiwa();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      sub_10018E260();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A2B7C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSiwa();
  unsigned int v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Revoke upgrade completed successfully.", v8, 2u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_10018E2FC();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A2C3C(uint64_t a1, int a2)
{
  if (a2)
  {
    id v5 = objc_alloc_init(AKApplicationAuthorizationController);
    uint64_t v3 = [*(id *)(a1 + 32) bundleID];
    [(AKApplicationAuthorizationController *)v5 removeAuthorizationForApplicationWithClientID:v3 completion:*(void *)(a1 + 40)];
  }
  else
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
  }
}

void sub_1000A2EC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = _AKLogSiwa();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10018E3CC();
    }

    id v12 = 0;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v7 statusCode]);
      int v14 = 138412290;
      uint64_t v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "appleIDAuthorizeHTMLResponseURL response code: %@", (uint8_t *)&v14, 0xCu);
    }
    id v12 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A4038(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000A4060(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x2020000000;
  char v23 = 0;
  id v7 = *(os_unfair_lock_s **)(a1 + 32);
  id v8 = v7 + 2;
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 3221225472;
  int v14 = sub_1000A41A4;
  uint64_t v15 = &unk_10022A910;
  uint64_t v9 = *(void *)(a1 + 48);
  id v18 = &v20;
  uint64_t v19 = v9;
  uint64_t v16 = v7;
  id v10 = v5;
  id v17 = v10;
  id v11 = &v12;
  os_unfair_lock_lock(v8);
  v14((uint64_t)v11);

  os_unfair_lock_unlock(v8);
  objc_msgSend(*(id *)(a1 + 40), "didCompleteWithSuccess:authorizationAlreadyComplete:", v6 == 0, *((unsigned __int8 *)v21 + 24), v12, v13);
  [*(id *)(a1 + 40) sendReport];

  _Block_object_dispose(&v20, 8);
}

void sub_1000A418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A41A4(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
}

void sub_1000A41C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000A42C8;
  v12[3] = &unk_10022A960;
  id v13 = v5;
  long long v11 = *(_OWORD *)(a1 + 40);
  id v8 = (id)v11;
  long long v15 = v11;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  os_unfair_lock_lock(v7);
  sub_1000A42C8((uint64_t)v12);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_1000A42C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) credential];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

id sub_1000A4CB4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _requestUserAuthorizationForContext:a2 completion:*(void *)(a1 + 40)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000A57D0(id a1, AKAppleIDUserInformationResponse *a2, NSError *a3)
{
  uint64_t v3 = _AKLogSiwa();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10018E6C8();
  }
}

void sub_1000A5814(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7)
  {
    id v8 = _AKLogSiwa();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10018E6FC();
    }
  }
  else if (v6)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 112), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000A58AC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 80), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000A6380(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSiwa();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_10018E90C(v3);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A6540(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A673C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSiwa();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10018E984();
  }

  id v8 = [*(id *)(a1 + 32) credentialRequestContext];
  unsigned int v9 = [v8 _clientShouldAuthenticateExternally];

  id v10 = *(void **)(a1 + 40);
  if (v9)
  {
    long long v11 = (void *)v10[3];
    id v12 = [*(id *)(a1 + 32) credentialRequestContext];
    [v11 updateUserResponse:v5 withContext:v12 forClient:*(void *)(*(void *)(a1 + 40) + 48)];

    (*((void (**)(id, void, void))v6 + 2))(v6, 0, 0);
  }
  else
  {
    [v10 _validateAndProcessUserResponse:v5 client:v10[6] completion:v6];
  }
}

uint64_t sub_1000A6834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A6AF8(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) authorizationContextHelperWithContext:a2 client:*(void *)(a1 + 40)];
  id v4 = [*(id *)(a1 + 48) rawAccountPassword];

  if (v4)
  {
    id v5 = _AKLogSiwa();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10018EA80();
    }

    id v6 = [*(id *)(a1 + 48) rawAccountPassword];
    [v3 setPassword:v6];
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A6C3C;
  v8[3] = &unk_100228AE0;
  void v8[4] = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 64);
  [v7 performSRPContractWithContext:v3 completion:v8];
}

id sub_1000A6C3C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return _[*(id *)(a1 + 32) _completeAuthorizationWithServerResponse:a2 userResponse:*(void *)(a1 + 40) client:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

uint64_t sub_1000A6FF8(uint64_t a1, uint64_t a2)
{
  id v4 = _AKLogSiwa();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_10018EC94(a2, v4, v5, v6, v7, v8, v9, v10);
  }

  if (a2) {
    objc_msgSend(*(id *)(a1 + 32), "set_shouldRequestToArmDeviceToAllowPCSKeyUpload:", 1);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A7670(uint64_t a1, int a2)
{
  id v4 = _AKLogSiwa();
  uint64_t v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User has access to the shared group", v8, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018ED6C();
    }

    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = +[NSError ak_errorWithCode:-7026];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
  }
}

void sub_1000A7F58(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = _AKLogSiwa();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10018EF10();
  }
}

void sub_1000A8124(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSiwa();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10018A77C();
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = +[NSError ak_errorWithCode:-7061];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
}

void sub_1000A85AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 didCompleteWithAuthorization:v7 error:v6];
  [*(id *)(a1 + 32) sendReport];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000A8D78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _AKLogSiwa();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018F1D8();
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "beginAuthorization - Attempting to authorize request: %@", buf, 0xCu);
    }

    if ([*(id *)(*(void *)(a1 + 40) + 48) authorizationClientProvidesUI])
    {
      id v7 = [*(id *)(a1 + 32) copy];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v8 + 88);
      *(void *)(v8 + 88) = v7;
    }
    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = *(void **)(a1 + 40);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000A8F20;
    v15[3] = &unk_10022AB58;
    id v12 = v10;
    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = *(void **)(a1 + 48);
    id v16 = v12;
    uint64_t v17 = v13;
    id v18 = v14;
    [v11 _createAndPerformRequest:v12 completion:v15];
  }
}

void sub_1000A8F20(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = _AKLogSiwa();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10018F2B0();
    }

    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v9 = *(void **)(v7 + 24);
    uint64_t v10 = *(void *)(v7 + 48);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000A9138;
    v20[3] = &unk_100229F48;
    id v22 = *(id *)(a1 + 48);
    id v21 = v4;
    [v9 endSessionWithContext:v8 client:v10 completion:v20];

    id v11 = v22;
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "beginAuthorization completed", buf, 2u);
    }

    id v11 = [*(id *)(*(void *)(a1 + 40) + 24) userResponseWithContext:*(void *)(a1 + 32) forClient:*(void *)(*(void *)(a1 + 40) + 48)];
    if (v11)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      id v12 = _AKLogSiwa();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10018F244();
      }

      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      long long v15 = *(void **)(v13 + 24);
      uint64_t v16 = *(void *)(v13 + 48);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1000A9150;
      v17[3] = &unk_100228DD8;
      id v18 = *(id *)(a1 + 48);
      [v15 endSessionWithContext:v14 client:v16 completion:v17];
    }
  }
}

uint64_t sub_1000A9138(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1000A9150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError ak_errorWithCode:-7089];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000A94BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSiwa();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10018F4F0();
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_28;
  }
  uint64_t v8 = [*(id *)(a1 + 32) _externalLocalAuthData];

  if (!v8)
  {
    uint64_t v14 = [*(id *)(a1 + 32) _externalAuthToken];

    long long v15 = _AKLogSiwa();
    uint64_t v16 = v15;
    if (v14)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_10018F420();
      }

      uint64_t v13 = [v5 selectedRequest];
      objc_msgSend(v13, "set_clientAuthenticatedExternallyWithPassword:", 1);
      uint64_t v17 = [*(id *)(a1 + 32) _externalAuthToken];
      objc_msgSend(v13, "set_externalAuthToken:", v17);

      goto LABEL_15;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10018F3EC();
    }

    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = -7044;
LABEL_27:
    uint64_t v26 = +[NSError ak_errorWithCode:v25];
    (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v26);

    goto LABEL_28;
  }
  uint64_t v9 = _AKLogSiwa();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_10018F4BC();
  }

  uint64_t v10 = [*(id *)(a1 + 32) _externalLocalAuthData];
  unsigned __int8 v11 = +[AKLAContextValidator validateExternalizedContext:v10 error:0];

  id v12 = _AKLogSiwa();
  uint64_t v13 = v12;
  if ((v11 & 1) == 0)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10018F488();
    }

    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = -7068;
    goto LABEL_27;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
    sub_10018F454();
  }
LABEL_15:

  id v18 = _AKLogSiwa();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v32 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "continueAuthorization - Attempting to resume authorization for request: %@", buf, 0xCu);
  }

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1000A983C;
  v28[3] = &unk_10022AB58;
  int8x16_t v27 = *(int8x16_t *)(a1 + 32);
  id v20 = (id)v27.i64[0];
  int8x16_t v29 = vextq_s8(v27, v27, 8uLL);
  id v30 = *(id *)(a1 + 48);
  id v21 = objc_retainBlock(v28);
  unsigned int v22 = [*(id *)(a1 + 32) _shouldSkipAuthorizationUI];
  char v23 = *(void **)(a1 + 40);
  if (v22) {
    [v23 _performSilentRequest:*(void *)(a1 + 32) withCompletion:v21];
  }
  else {
    [v23 _validateAndProcessUserResponse:v5 client:v23[6] completion:v21];
  }

LABEL_28:
}

void sub_1000A983C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)a1[5];
  uint64_t v8 = a1[4];
  uint64_t v9 = *(void **)(v8 + 24);
  uint64_t v10 = *(void *)(v8 + 48);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000A9A14;
  v18[3] = &unk_10022A820;
  id v19 = v7;
  [v9 endSessionWithContext:v19 client:v10 completion:v18];
  unsigned __int8 v11 = _AKLogSiwa();
  id v12 = v11;
  if (v6)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10018F5C8();
    }

    uint64_t v13 = *(void (**)(void))(a1[6] + 16);
    goto LABEL_9;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "continueAuthorization completed", v17, 2u);
  }

  if (v5)
  {
    uint64_t v13 = *(void (**)(void))(a1[6] + 16);
LABEL_9:
    v13();
    goto LABEL_10;
  }
  uint64_t v14 = _AKLogSiwa();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_10018F55C();
  }

  uint64_t v15 = a1[6];
  uint64_t v16 = +[NSError ak_errorWithCode:-7001];
  (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v16);

LABEL_10:
}

void sub_1000A9A14(uint64_t a1)
{
  id v2 = _AKLogSiwa();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "continueAuthorization - Authorization ended for requestContext: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000A9DA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = _AKLogSiwa();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10018F6D0();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "cancelAuthorization - Successfully canceled session", v6, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AA144(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_1000AA160(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

uint64_t sub_1000AA180(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000AA2C0(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v93 = kAppleIDAuthSupportClientProvidedData;
  int v4 = objc_msgSend(v3, "objectForKeyedSubscript:");
  id v5 = [v4 mutableCopy];

  uint64_t v6 = +[NSNumber numberWithDouble:AKTiburonTimeoutIntervalForRequest];
  [v3 setObject:v6 forKeyedSubscript:kAppleIDAuthSupportOptionTimeoutIntervalForRequest];

  uint64_t v7 = +[NSNumber numberWithDouble:AKTiburonTimeoutIntervalForResource];
  [v3 setObject:v7 forKeyedSubscript:kAppleIDAuthSupportOptionTimeoutIntervalForResource];

  uint64_t v94 = a1;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = (id *)(a1 + 32);
  uint64_t v10 = [*(id *)(v9 + 128) request];
  unsigned __int8 v11 = [v10 userIdentifier];

  if (v11)
  {
    id v12 = [*((id *)*v8 + 16) request];
    uint64_t v13 = [v12 userIdentifier];
    [v5 setObject:v13 forKeyedSubscript:@"uid"];
  }
  uint64_t v14 = [*((id *)*v8 + 16) request];
  uint64_t v15 = [v14 requestedScopes];

  uint64_t v16 = objc_opt_new();
  if ([v15 count])
  {
    [v5 setObject:v15 forKeyedSubscript:@"scopes"];
    uint64_t v17 = [*((id *)*v8 + 16) userSelection];
    if (v17 && [v15 containsObject:AKAuthorizationScopeEmail])
    {
      id v18 = [v17 userInformation];
      id v19 = [v18 selectedEmail];

      if (v19)
      {
        id v20 = [v17 userInformation];
        id v21 = [v20 selectedEmail];
        [v16 setObject:v21 forKeyedSubscript:@"selectedEmail"];
      }
      unsigned int v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v17 makePrivateEmail]);
      [v16 setObject:v22 forKeyedSubscript:@"privateEmail"];
    }
  }
  char v23 = [*((id *)*v8 + 16) request];
  unsigned int v24 = [v23 isEligibleForUpgradeFromPassword];

  if (v24) {
    [v16 setObject:AKAuthorizationCredentialOriginPassword forKeyedSubscript:@"origin"];
  }
  if ([*((id *)*v8 + 16) _isAuthorizingForSharedSIWAAccount])
  {
    uint64_t v25 = [*((id *)*v8 + 16) _sharedSIWAAccountShareToken];
    if (v25
      && (uint64_t v26 = (void *)v25,
          [*((id *)*v8 + 16) _sharedSIWAAccountGroupID],
          int8x16_t v27 = objc_claimAutoreleasedReturnValue(),
          v27,
          v26,
          v27))
    {
      id v28 = _AKLogSiwa();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Authorizing for shared SIWA account. Adding additional share info in SRP request", buf, 2u);
      }

      int8x16_t v29 = [*((id *)*v8 + 16) _sharedSIWAAccountShareToken];
      [v16 setObject:v29 forKeyedSubscript:@"shared_token"];

      id v30 = [*((id *)*v8 + 16) _sharedSIWAAccountGroupID];
      [v16 setObject:v30 forKeyedSubscript:@"group_id"];
    }
    else
    {
      id v30 = _AKLogSiwa();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_10018F81C(v30);
      }
    }
  }
  uint64_t v31 = [v16 allKeys];
  id v32 = [v31 count];

  if (v32) {
    [v5 setObject:v16 forKeyedSubscript:@"upd"];
  }
  id v33 = [*((id *)*v8 + 16) request];
  uint64_t v34 = [v33 transactionID];
  id v35 = [v34 UUIDString];

  if (v35) {
    [v5 setObject:v35 forKeyedSubscript:AKTransactionId];
  }
  id v36 = [*((id *)*v8 + 16) clientID];

  if (v36)
  {
    id v37 = objc_alloc_init((Class)NSMutableDictionary);
    __int16 v38 = [*((id *)*v8 + 16) clientID];
    [v37 setObject:v38 forKeyedSubscript:@"client_id"];

    uint64_t v39 = [*((id *)*v8 + 16) clientID];
    [v3 setObject:v39 forKeyedSubscript:kAppleIDAuthSupportAppleIClientID];

    uint64_t v40 = [*((id *)*v8 + 16) teamID];

    if (v40)
    {
      double v41 = [*((id *)*v8 + 16) teamID];
      [v37 setObject:v41 forKeyedSubscript:@"team_id"];

      __int16 v42 = [*((id *)*v8 + 16) teamID];
      [v3 setObject:v42 forKeyedSubscript:kAppleIDAuthSupportAppleITeamID];
    }
    uint64_t v43 = [*((id *)*v8 + 16) request];
    uint64_t v44 = [v43 userIdentifier];

    if (v44)
    {
      uint64_t v45 = [*((id *)*v8 + 16) request];
      uint64_t v46 = [v45 userIdentifier];
      [v37 setObject:v46 forKeyedSubscript:@"uid"];
    }
    id v47 = [v37 copy];
    [v5 setObject:v47 forKeyedSubscript:@"amd"];
  }
  uint64_t v48 = [*((id *)*v8 + 16) request];
  uint64_t v49 = [v48 state];

  if (v49)
  {
    uint64_t v50 = [*((id *)*v8 + 16) request];
    __int16 v51 = [v50 state];
    [v5 setObject:v51 forKeyedSubscript:@"state"];
  }
  uint64_t v52 = [*((id *)*v8 + 16) realUserVerificationData];

  if (v52)
  {
    unsigned int v53 = [*((id *)*v8 + 16) realUserVerificationData];
    [v5 setObject:v53 forKeyedSubscript:@"claim"];
  }
  id v54 = [*((id *)*v8 + 16) request];
  uint64_t v55 = [v54 state];

  if (v55)
  {
    os_signpost_id_t v56 = [*((id *)*v8 + 16) appProvidedData];

    if (v56)
    {
      id v57 = [*((id *)*v8 + 16) appProvidedData];
      id v58 = [v57 mutableCopy];
    }
    else
    {
      id v58 = objc_alloc_init((Class)NSMutableDictionary);
    }
    long long v59 = [*((id *)*v8 + 16) request];
    long long v60 = [v59 state];
    [v58 setObject:v60 forKeyedSubscript:@"state"];

    id v61 = [v58 copy];
    [*((id *)*v8 + 16) setAppProvidedData:v61];
  }
  id v62 = [*((id *)*v8 + 16) request];
  int v63 = [v62 nonce];

  if (v63)
  {
    uint64_t v64 = [*((id *)*v8 + 16) appProvidedData];

    if (v64)
    {
      uint64_t v65 = [*((id *)*v8 + 16) appProvidedData];
      id v66 = [v65 mutableCopy];
    }
    else
    {
      id v66 = objc_alloc_init((Class)NSMutableDictionary);
    }
    double v67 = [*((id *)*v8 + 16) request];
    __int16 v68 = [v67 nonce];
    [v66 setObject:v68 forKeyedSubscript:@"nonce"];

    id v69 = [v66 copy];
    [*((id *)*v8 + 16) setAppProvidedData:v69];
  }
  id v70 = [*((id *)*v8 + 16) request];
  if ([v70 _isSilentAppTransfer])
  {
    char v71 = [*((id *)*v8 + 16) request];
    int v72 = [v71 userIdentifier];

    if (!v72) {
      goto LABEL_52;
    }
    uint64_t v73 = [*((id *)*v8 + 16) appProvidedData];

    if (v73)
    {
      uint64_t v74 = [*((id *)*v8 + 16) appProvidedData];
      id v70 = [v74 mutableCopy];
    }
    else
    {
      id v70 = objc_alloc_init((Class)NSMutableDictionary);
    }
    int v75 = [*((id *)*v8 + 16) request];
    v76 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v75 _isSilentAppTransfer]);
    [v70 setObject:v76 forKeyedSubscript:@"silent_app_transfer"];

    id v77 = [v70 copy];
    [*((id *)*v8 + 16) setAppProvidedData:v77];
  }
LABEL_52:
  v78 = [*v8 authContext];
  v79 = [v78 appProvidedData];

  if (v79)
  {
    id v80 = [*v8 authContext];
    v81 = [v80 appProvidedData];
    [v5 setObject:v81 forKeyedSubscript:@"apd"];
  }
  v82 = [*v8 authContext];
  unsigned int v83 = [v82 _clientAuthenticatedExternallyWithPassword];

  if (v83)
  {
    v84 = _AKLogSiwa();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG)) {
      sub_10018F7D8(v84);
    }

    v85 = [*v8 authContext];
    v86 = [v85 _externalAuthToken];
    [v5 setObject:v86 forKeyedSubscript:@"subscriptionToken"];
  }
  v87 = _AKLogSiwa();
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG)) {
    sub_10018F738(v8, v87);
  }

  v88 = [*v8 authContext];
  unsigned int v89 = [v88 _shouldRequestToArmDeviceToAllowPCSKeyUpload];

  if (v89) {
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:@"PCSKeysArmedEligible"];
  }
  id v90 = [v5 copy];
  [v3 setObject:v90 forKeyedSubscript:v93];

  uint64_t v91 = *(void *)(v94 + 40);
  id v92 = [v3 copy];
  (*(void (**)(uint64_t, id, void))(v91 + 16))(v91, v92, 0);
}

void sub_1000AB1C4(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.authkit.IDSFetchQueue", v3);
  id v2 = (void *)qword_100272570;
  qword_100272570 = (uint64_t)v1;
}

void sub_1000AB3BC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = [*(id *)(a1 + 32) requestConfiguration];
    [v3 setResourceLoadDelegate:v4];

    [*(id *)(a1 + 40) _showServerUIWithContext:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000AB5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AB5F4(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 8);
  unsigned __int8 v11 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_21;
  }
  if (v9)
  {
    id v12 = [v9 domain];
    if ([v12 isEqual:AKAppleIDAuthenticationErrorDomain])
    {
      id v13 = [v9 code];

      if (v13 == (id)-7038)
      {
        uint64_t v14 = _AKLogSystem();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Server UI has been skipped.", buf, 2u);
        }
LABEL_12:

LABEL_13:
        uint64_t v16 = 0;
        goto LABEL_14;
      }
    }
    else
    {
    }
    uint64_t v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10018F960();
    }
    goto LABEL_12;
  }
  id v15 = objc_loadWeakRetained(WeakRetained + 2);
  if ([v15 shouldProcessAdditionalServerUIData:v8])
  {
    [v15 serverUIContext:a1[4] processAdditionalData:v8 completion:a1[7]];

    id v9 = 0;
    goto LABEL_21;
  }
  id v20 = [a1[4] requestConfiguration];
  id v21 = [v20 requestType];

  if (v21)
  {
  }
  else
  {
    id v9 = [a1[5] _errorFromServerResponse:v7];

    if (v9) {
      goto LABEL_13;
    }
  }
  unsigned int v22 = _AKLogSystem();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Looks like we're done with server UI!", buf, 2u);
  }

  char v23 = [a1[4] initiatingServerResponse];
  unsigned int v24 = [v23 isUpdateable];

  id v25 = a1[4];
  if (!v24)
  {
    id v28 = [v25 requestConfiguration];
    id v29 = [v28 requestType];

    if (!v29)
    {
      id v30 = _AKLogSystem();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "We do not have an initial auth response to update. Creating one now!", buf, 2u);
      }

      uint64_t v31 = [v8 objectForKeyedSubscript:AKAuthenticationUsernameKey];
      if (!v31)
      {
        uint64_t v31 = [a1[6] username];
      }
      id v32 = [[AKAuthenticationServerResponse alloc] initWithServerResponse:v7 forAppleID:v31];
      [a1[4] setInitiatingServerResponse:v32];
    }
    goto LABEL_35;
  }
  uint64_t v26 = [v25 initiatingServerResponse];
  unsigned __int8 v27 = [v26 updateWithSecondaryAuthenticationResponse:v7];

  if (v27)
  {
LABEL_35:
    id v9 = 0;
    goto LABEL_13;
  }
  uint64_t v16 = +[NSError ak_errorWithCode:-7021];
  id v9 = 0;
LABEL_14:
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1000ABA68;
  v33[3] = &unk_10022AC78;
  id v9 = v9;
  id v34 = v9;
  id v38 = a1[7];
  id v35 = a1[4];
  id v36 = v8;
  id v17 = v16;
  id v37 = v17;
  id v18 = objc_retainBlock(v33);
  if ([a1[4] shouldPreventDismissAfterUserSkip] && objc_msgSend(v9, "code") == (id)-7038)
  {
    ((void (*)(void *, uint64_t, void))v18[2])(v18, 1, 0);
  }
  else
  {
    id v19 = _AKLogSystem();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Asking client to dismiss any presented server UI...", buf, 2u);
    }

    [v11[1] dismissServerProvidedUIForContext:a1[6] client:v11[3] completion:v18];
  }

LABEL_21:
}

void sub_1000ABA68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = [v5 domain];
    if ([v6 isEqual:AKAppleIDAuthenticationErrorDomain])
    {
      id v7 = [*(id *)(a1 + 32) code];

      if (v7 == (id)-7038)
      {
        uint64_t v8 = *(void *)(a1 + 64);
        id v9 = [*(id *)(a1 + 40) initiatingServerResponse];
        (*(void (**)(uint64_t, void *, void, void))(v8 + 16))(v8, v9, *(void *)(a1 + 48), *(void *)(a1 + 32));
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
    }
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (!v10)
    {
      id v13 = _AKLogSystem();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_10018F9C8(v13);
      }

      uint64_t v14 = *(void *)(a1 + 64);
      id v9 = [*(id *)(a1 + 40) initiatingServerResponse];
      (*(void (**)(uint64_t, void *, void, void))(v14 + 16))(v14, v9, *(void *)(a1 + 48), 0);
      goto LABEL_13;
    }
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 48);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 16))(v11, 0, v12, v10);
LABEL_14:
}

void sub_1000ABEE8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = a3;
  [v8 setPhoneNumberCertificate:a2];
  uint64_t v10 = *(void **)(a1 + 40);
  id v17 = 0;
  uint64_t v11 = [v10 _fetchPhoneInformationWithAdditionalInfo:v9 error:&v17];

  id v12 = v17;
  [*(id *)(a1 + 32) setPhoneInformation:v11];

  if (v12)
  {
    id v13 = _AKLogSystem();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10018FA50();
    }
  }
  uint64_t v14 = *(void **)(a1 + 40);
  id v15 = [*(id *)(a1 + 48) authContext];
  [v14 _reportPacTelemetryForEvent:@"com.apple.authkit.pac.subscriptionInfo" context:v15 error:v12];

  if (v7)
  {
    uint64_t v16 = _AKLogSystem();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failed to fetch IDS cert info: %@", buf, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000AC1BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = a3;
  [v8 setPhoneNumberCertificate:a2];
  uint64_t v10 = *(void **)(a1 + 40);
  id v15 = 0;
  uint64_t v11 = [v10 _fetchPhoneInformationWithAdditionalInfo:v9 error:&v15];

  id v12 = v15;
  [*(id *)(a1 + 32) setPhoneInformation:v11];

  if (v12)
  {
    id v13 = _AKLogSystem();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10018FA50();
    }
  }
  [*(id *)(a1 + 40) _reportPacTelemetryForEvent:@"com.apple.authkit.pac.subscriptionInfo" context:*(void *)(a1 + 48) error:v12];
  if (v7)
  {
    uint64_t v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to fetch IDS cert info: %@", buf, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000ACB5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v8 = _AKSignpostLogSystem();
  id v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 64);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v29) = [v5 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "FetchIDSPhoneCertificate", " Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 8u);
  }

  uint64_t v11 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    id v13 = *(void **)(a1 + 64);
    unsigned int v14 = [v5 code];
    *(_DWORD *)buf = 134218496;
    id v29 = v13;
    __int16 v30 = 2048;
    double v31 = v12;
    __int16 v32 = 1026;
    unsigned int v33 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchIDSPhoneCertificate  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x1Cu);
  }

  if (v5)
  {
    id v15 = _AKLogSystem();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_10018FB64();
    }
  }
  [*(id *)(a1 + 32) _reportPacTelemetryForEvent:@"com.apple.authkit.pac.signature" context:*(void *)(a1 + 40) error:v5];
  uint64_t v16 = *(void **)(a1 + 48);
  id v25 = 0;
  id v17 = [v16 currentPhoneUserSubscriptionSourceWithError:&v25];
  id v18 = v25;
  id v19 = [v6 serverVerifiableEncoding];

  id v20 = [v19 dataUsingEncoding:4];

  id v21 = [v20 base64EncodedStringWithOptions:0];
  unsigned int v22 = _AKLogSystem();
  char v23 = (AKCarrierBundlePhoneCertificate *)v22;
  if (v18)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_10018FAFC();
    }
    unsigned int v24 = 0;
  }
  else
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      id v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, &v23->super, OS_LOG_TYPE_DEFAULT, "Creating bundle certificate for source: %ld", buf, 0xCu);
    }

    char v23 = objc_alloc_init(AKCarrierBundlePhoneCertificate);
    [(AKCarrierBundlePhoneCertificate *)v23 setPhoneCertificate:v21];
    [(AKCarrierBundlePhoneCertificate *)v23 setSlotID:v17];
    CFStringRef v26 = @"PhoneCertificate";
    unsigned __int8 v27 = v23;
    unsigned int v24 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
  }

  [*(id *)(a1 + 32) _reportPacTelemetryForEvent:@"com.apple.authkit.pac.subscriptionSource" context:*(void *)(a1 + 40) error:v18];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000AD114(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = _AKLogSystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10018FCC4((uint64_t)v2, v3);
  }
}

id sub_1000AD78C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) migrateSchemaFromVersion:*(void *)(a1 + 40)];
}

void sub_1000AD958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AD980(uint64_t a1, sqlite3_stmt *a2)
{
  id v3 = sqlite3_column_text(a2, 0);
  if (v3)
  {
    id v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    id v5 = +[NSString stringWithUTF8String:v3];
    [v4 addObject:v5];
  }
}

void sub_1000ADCCC(id a1)
{
  dispatch_queue_t v1 = objc_alloc_init(AKDaemonConnectionManager);
  uint64_t v2 = qword_100272580;
  qword_100272580 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000AE0F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AE238(id a1)
{
  id v1 = +[AKGlobalConfigService sharedInstance];
  [v1 checkForLocaleChange];
}

void sub_1000AE7F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSString stringWithUTF8String:xpc_dictionary_get_string(v3, _xpc_event_key_name)];
  id v5 = _AKLogSystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1001906FC();
  }

  id v6 = +[NSString stringWithUTF8String:"com.apple.mobile.keybagd.lock_status"];
  unsigned int v7 = [v4 isEqual:v6];

  uint64_t v8 = *(void **)(a1 + 32);
  if (!v7)
  {
    if ([v8 _isPasscodeChangeNotification:v4])
    {
      id v9 = +[AKDevice currentDevice];
      unsigned __int8 v10 = [v9 isProtectedWithPasscode];

      if (v10) {
        goto LABEL_21;
      }
      uint64_t v11 = _AKLogSystem();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Current device is not protected with a passcode, clearing PRK tokens...", (uint8_t *)&v20, 2u);
      }

      double v12 = +[AKAccountManager sharedInstance];
      [v12 removeAllPasswordResetTokens];

      id v13 = +[AKAppleIDCheckInHelperService sharedService];
      [v13 performLivenessCheckInForAllEligibleAccountsWithReason:4 completion:&stru_10022AD80];

      unsigned int v14 = +[AKAccountManager sharedInstance];
      [v14 _removeAllRawPasswordCaches];

      id v15 = +[AKAuthenticationTrafficController sharedInstance];
      [v15 flushCachedPasswords];
    }
    else
    {
      unsigned int v16 = [*(id *)(a1 + 32) _isDeviceScreenUnlockNotification:v4];
      id v17 = *(void **)(a1 + 32);
      if (v16)
      {
        [v17 _checkScreenUnlockStateFromNotificationDictionary:v3];
        goto LABEL_21;
      }
      if ([v17 _isBiometricRatchetStatusChangeDarwinNotification:v4])
      {
        id v18 = _AKLogSystem();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          sub_1001906C8();
        }

        id v19 = +[NSNotificationCenter defaultCenter];
        [v19 postNotificationName:AKBiometricRatchetStateDidChangeNotification object:0];

        id v15 = +[AKAppleIDCheckInHelperService sharedService];
        [v15 performLivenessCheckInForAllEligibleAccountsWithReason:7 completion:&stru_10022ADA0];
      }
      else
      {
        if ([*(id *)(a1 + 32) _isKeychainSharingGroupUpdateDarwinNotification:v4])
        {
          [*(id *)(a1 + 32) _handleKeychainSharingGroupUpdateNotification];
          goto LABEL_21;
        }
        id v15 = _AKLogSystem();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 138412290;
          id v21 = v3;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "No special handling for XPC event: %@", (uint8_t *)&v20, 0xCu);
        }
      }
    }

    goto LABEL_21;
  }
  [v8 _checkKeybagUnlockState];
LABEL_21:
}

void sub_1000AEB00(id a1)
{
  id v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
    sub_100190764();
  }
}

void sub_1000AEB44(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[NSString stringWithUTF8String:xpc_dictionary_get_string(v2, _xpc_event_key_name)];
  unsigned int v4 = [v3 isEqualToString:@"AppSignInEndorser"];
  id v5 = _AKLogSystem();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v8 = 138412290;
      id v9 = v2;
      unsigned int v7 = "Ignoring event that will be handled by companionauthd: %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v8, 0xCu);
    }
  }
  else if (v6)
  {
    int v8 = 138412290;
    id v9 = v2;
    unsigned int v7 = "No special handling for Rapport matching event: %@";
    goto LABEL_6;
  }
}

uint64_t sub_1000AEFDC()
{
  uint64_t v0 = _AKLogSystem();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Notified of language change. Will exit when all clear.", v2, 2u);
  }

  return xpc_transaction_exit_clean();
}

void sub_1000AF0EC(id a1)
{
  id v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "akd is exiting due to SIGTERM", v2, 2u);
  }

  exit(0);
}

id sub_1000AF1EC()
{
  uint64_t v0 = _AKLogSystem();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Handling eligiblity darwin notification.", v2, 2u);
  }

  return +[AKRegulatoryEligibilityHandler reportRegulatoryEligibilityStatusToIdMS];
}

void sub_1000AF648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AF664(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (a2)
    {
      id v5 = _AKLogSystem();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned int v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Passkey setup completed successfully.", v7, 2u);
      }
    }
    [WeakRetained _updatePasskeyKeychainStatusForAccount:*(void *)(a1 + 32)];
    [WeakRetained _performPasskeyCleanupWithPasskeyValidator:*(void *)(a1 + 40) authenticationController:WeakRetained[13] accountManager:*(void *)(a1 + 48)];
  }
  else
  {
    BOOL v6 = _AKLogPasskey();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_100190800();
    }
  }
}

void sub_1000AF74C(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    unsigned int v4 = _AKLogPasskey();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_100190868();
    }
  }
  else
  {
    id v5 = +[AKAccountManager sharedInstance];
    unsigned int v4 = [v5 altDSIDforPrimaryiCloudAccount];

    if (!v4)
    {
      unsigned int v4 = _AKLogPasskey();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        sub_100190834();
      }
    }
  }
}

void sub_1000AF898(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    id v3 = _AKLogPasskey();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_1001908D0();
    }
  }
}

uint64_t sub_1000AFD70(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_100272590;
  qword_100272590 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

id sub_1000B0060(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_scheduleNextRequest");
}

void sub_1000B04B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100190A74();
  }
}

void sub_1000B051C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100190AE0();
  }
}

void sub_1000B0584(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = _AKLogSystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    id v6 = WeakRetained;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@: Scheduler source event handler called (dispatchInterval: %.2f)", (uint8_t *)&v5, 0x16u);
  }

  objc_msgSend(WeakRetained, "_unsafe_schedulerSourceDidFire");
}

void sub_1000B0A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B0A68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v5 = _AKLogSystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 32) request];
    int v17 = 138412802;
    id v18 = WeakRetained;
    __int16 v19 = 2112;
    id v20 = v3;
    __int16 v21 = 2112;
    unsigned int v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Handling dispatching response (%@) for executed request (%@)", (uint8_t *)&v17, 0x20u);
  }
  objc_opt_class();
  id v7 = [v3 objectForKeyedSubscript:@"ec"];
  if (objc_opt_isKindOfClass()) {
    id v8 = v7;
  }
  else {
    id v8 = 0;
  }

  id v9 = [v8 integerValue];
  unsigned __int8 v10 = _AKLogSystem();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9 == (id)-80040)
  {
    if (v11)
    {
      double v12 = [*(id *)(a1 + 32) info];
      int v17 = 138412546;
      id v18 = WeakRetained;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: Updating algorithm for dispatching info (%@)", (uint8_t *)&v17, 0x16u);
    }
    id v13 = [*(id *)(a1 + 32) info];
    [WeakRetained _updateDispatchingAlgorithmForInfo:v13 withResponse:v3];
  }
  else
  {
    if (v11)
    {
      unsigned int v14 = [*(id *)(a1 + 32) info];
      int v17 = 138412546;
      id v18 = WeakRetained;
      __int16 v19 = 2112;
      id v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@: Removing algorithm for dispatching info (%@)", (uint8_t *)&v17, 0x16u);
    }
    id v13 = [*(id *)(a1 + 32) info];
    [WeakRetained _setDispatchingAlgorithm:0 forInfo:v13];
  }

  id v15 = [*(id *)(a1 + 32) request];
  [v15 handleResponseCode];

  unsigned int v16 = [*(id *)(a1 + 32) calculation];
  [v16 relinquish];
}

void sub_1000B1404(id a1)
{
  v4[0] = @"capp";
  v4[1] = @"papp";
  v4[2] = @"svct";
  id v1 = +[NSArray arrayWithObjects:v4 count:3];
  uint64_t v2 = +[NSOrderedSet orderedSetWithArray:v1];
  id v3 = (void *)qword_1002725A0;
  qword_1002725A0 = v2;
}

void sub_1000B17FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Revoke request came back with error: %@", (uint8_t *)&v7, 0xCu);
  }

  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v5 == 0, v5);
}

void sub_1000B1C90(id a1)
{
  id v1 = objc_alloc_init(AKAuthenticationTrafficController);
  uint64_t v2 = qword_1002725B0;
  qword_1002725B0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000B1F10(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) bundleID];

  if (!v2)
  {
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_100190DF4();
    }
  }
  if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AKPasswordAuthenticationContext]&& objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &OBJC_PROTOCOL___AKAuthenticationContext_Internal))
  {
    [*(id *)(a1 + 48) _updateContextWithCachedPassword:*(void *)(a1 + 40)];
  }
  uint64_t v4 = [*(id *)(a1 + 32) bundleID];
  id v5 = (void *)v4;
  id v6 = @"com.apple.ak.unknown";
  if (v4) {
    id v6 = (__CFString *)v4;
  }
  int v7 = v6;

  id v8 = objc_alloc_init(AKTrafficClearenceRequest);
  [(AKTrafficClearenceRequest *)v8 setClearanceHandler:*(void *)(a1 + 56)];
  [(AKTrafficClearenceRequest *)v8 setContext:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AKAuthenticationContext_Internal])-[AKTrafficClearenceRequest setAuthContext:](v8, "setAuthContext:", *(void *)(a1 + 40)); {
  [(AKTrafficClearenceRequest *)v8 setClientBundleID:v7];
  }
  id v9 = _AKLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_100190D8C();
  }

  [*(id *)(a1 + 48) _processClearanceRequest:v8 withClient:*(void *)(a1 + 32)];
}

void sub_1000B2188(id *a1)
{
  uint64_t v2 = [a1[4] bundleID];
  id v3 = (void *)v2;
  uint64_t v4 = @"com.apple.ak.unknown";
  if (v2) {
    uint64_t v4 = (__CFString *)v2;
  }
  id v5 = v4;

  id v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_100190FA8();
  }

  int v7 = [*((id *)a1[5] + 8) objectForKeyedSubscript:v5];
  [v7 removeObject:a1[6]];

  [a1[5] _clearNextEligibleRequest];
  id v8 = _AKLogSystem();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_100190F08();
  }

  id v9 = *((void *)a1[5] + 2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000B22F0;
  v10[3] = &unk_100227BA8;
  id v11 = a1[6];
  id v12 = a1[7];
  dispatch_async(v9, v10);
}

uint64_t sub_1000B22F0(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100191010();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000B24D8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  [*(id *)(a1 + 32) _removeAuthenticationRequestForContext:*(void *)(a1 + 40) client:*(void *)(a1 + 48)];
  id v3 = [*v2 username];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 56);

    if (v4)
    {
      id v5 = +[NSString _newZStringWithString:*(void *)(a1 + 56)];
      id v6 = *(void **)(*(void *)(a1 + 32) + 8);
      int v7 = [*(id *)(a1 + 40) username];
      [v6 setObject:v5 forKey:v7 expiresIn:300.0];
    }
  }
  id v8 = [*(id *)(a1 + 32) surrogateManager];
  unsigned int v9 = [v8 hasRegisteredSurrogateForContext:*(void *)(a1 + 40)];

  if (v9)
  {
    unsigned __int8 v10 = [*(id *)(a1 + 32) surrogateManager];
    [v10 unregisterUISurrogateForContext:*(void *)(a1 + 40)];

    id v11 = _AKLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Surrogate auth flow is complete!", buf, 2u);
    }
  }
  id v12 = *(void **)(a1 + 32);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000B274C;
  v20[3] = &unk_10022AEE0;
  id v13 = *(id *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 32);
  id v21 = v13;
  uint64_t v22 = v14;
  id v23 = *(id *)(a1 + 56);
  id v24 = *(id *)(a1 + 72);
  [v12 _clearNextEligibleRequestWithUpdateBlock:v20];
  id v15 = _AKLogSystem();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    sub_10019114C();
  }

  unsigned int v16 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1000B2804;
  v17[3] = &unk_100227BA8;
  id v18 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 80);
  dispatch_async(v16, v17);
}

void sub_1000B274C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1[4])
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_1001911EC();
    }
  }
  else
  {
    id v6 = [v3 context];
    unsigned int v7 = [v6 conformsToProtocol:&OBJC_PROTOCOL___AKPasswordAuthenticationContext];

    if (v7)
    {
      id v8 = (void *)a1[5];
      unsigned int v9 = [v4 context];
      [v8 _updateContext:v9 withPassword:a1[6] forAppleID:a1[7]];
    }
  }
}

uint64_t sub_1000B2804(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100191220();
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000B2A00(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 48)];

  uint64_t v4 = _AKLogSystem();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = +[NSNumber numberWithUnsignedInt:qos_class_self()];
      uint64_t v7 = *(void *)(a1 + 48);
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Daemon auth now requires UI with qos %@ for %@", (uint8_t *)&v12, 0x16u);
    }
    id v8 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
    [v8 removeObject:*(void *)(a1 + 48)];

    objc_msgSend(*(id *)(a1 + 32), "_tq_addContext:toAuthenticatingAppsforClient:", *(void *)(a1 + 48), *(void *)(a1 + 40));
    [*(id *)(a1 + 32) _clearNextEligibleRequest];
    uint64_t v9 = *(void *)(a1 + 56);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001912C0();
    }

    uint64_t v10 = *(void *)(a1 + 56);
    if (v10)
    {
      id v11 = +[NSError ak_errorWithCode:-7121];
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
    }
  }
}

void sub_1000B3250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B3268(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 count];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1000B35C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B35E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 count]
    && +[AKClient isAppWithBundleIDForeground:v5])
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_100191BE4();
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1000B37CC(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = +[NSNumber numberWithUnsignedInt:qos_class_self()];
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invoking traffic request with qos %@ for %@", (uint8_t *)&v6, 0x16u);
  }
  id v5 = [*(id *)(a1 + 32) clearanceHandler];
  v5[2]();
}

id sub_1000B3CD0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _shouldClearRequest:a2];
}

uint64_t sub_1000B404C()
{
  return v0;
}

void sub_1000B40AC(id a1)
{
  id v1 = objc_alloc_init(AKAuthorizationListUpdateService);
  uint64_t v2 = qword_1002725C0;
  qword_1002725C0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000B4260(uint64_t a1, void *a2)
{
  unsigned int v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  id v5 = _AKLogSystem();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (state != 2)
  {
    if (v6)
    {
      uint64_t v9 = +[NSNumber numberWithLong:state];
      *(_DWORD *)buf = 138412290;
      __int16 v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity registration complete. State: %@.", buf, 0xCu);
    }
    goto LABEL_8;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "XPC activity says that it's time to update user information", buf, 2u);
  }

  if (xpc_activity_set_state(v3, 4))
  {
    uint64_t v7 = (void *)os_transaction_create();
    __int16 v8 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000B4410;
    v10[3] = &unk_100226BD8;
    void v10[4] = v8;
    id v11 = v3;
    id v12 = v7;
    id v5 = v7;
    [v8 performAuthorizationCheckInWithCompletion:v10];

LABEL_8:
  }
}

void sub_1000B4410(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "XPC activity for fetch user information complete", buf, 2u);
  }

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B44F4;
  void v4[3] = &unk_100226C00;
  unsigned int v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v3 performGlobalConfigUpdateWithCompletion:v4];
}

BOOL sub_1000B44F4(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "XPC activity for fetch global config complete", v4, 2u);
  }

  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
}

void sub_1000B47E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Succesfully fetched user information for altDSID: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100191E20((uint64_t)v5, v7);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1000B48D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearStaleCachedDevices];
}

uint64_t sub_1000B48D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000B4A2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B4AA4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = _AKLogSystem();
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100191E98((uint64_t)v2, v4);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Succesfully cleared stale devices from cache", v5, 2u);
  }
}

void sub_1000B5364(id a1)
{
  id v1 = objc_alloc_init(AKKeychainManager);
  uint64_t v2 = qword_1002725D0;
  qword_1002725D0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000B5464(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0;
  objc_msgSend(v2, "_unsafe_addKeychainItem:shouldAttemptUpdate:error:", v3, 0, &v5);
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000B559C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0;
  objc_msgSend(v2, "_unsafe_addKeychainItem:shouldAttemptUpdate:error:", v3, 1, &v5);
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000B56D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) descriptor];
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = 0;
  objc_msgSend(v2, "_unsafe_updateKeychainItemWithDescriptor:newItem:error:", v3, v4, &v6);
  id v5 = v6;

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000B5820(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v6 = 0;
  uint64_t v4 = objc_msgSend(v2, "_unsafe_fetchKeychainItemWithDescriptor:error:", v3, &v6);
  id v5 = v6;
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000B595C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v6 = 0;
  uint64_t v4 = objc_msgSend(v2, "_unsafe_fetchKeychainItemsWithDescriptor:error:", v3, &v6);
  id v5 = v6;
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000B5A98(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0;
  objc_msgSend(v2, "_unsafe_deleteKeychainItemWithDescriptor:error:", v3, &v5);
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_1000B60FC()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_1002725E0;
  uint64_t v5 = qword_1002725E0;
  if (!qword_1002725E0)
  {
    long long v6 = *(_OWORD *)off_10022B000;
    long long v7 = *(_OWORD *)&off_10022B010;
    v3[3] = _sl_dlopen();
    qword_1002725E0 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1000B620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6224(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002725E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000B62B4()
{
  uint64_t v0 = sub_1000B60FC();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_1000B6310()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002725E8;
  uint64_t v7 = qword_1002725E8;
  if (!qword_1002725E8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B63F4;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_1000B63F4((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000B63DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000B63F4(uint64_t a1)
{
  sub_1000B62B4();
  Class result = objc_getClass("SKSetupServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002725E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100192138();
    return (Class)sub_1000B644C();
  }
  return result;
}

id sub_1000B644C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002725F0;
  uint64_t v7 = qword_1002725F0;
  if (!qword_1002725F0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B6530;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_1000B6530((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000B6518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000B6530(uint64_t a1)
{
  sub_1000B62B4();
  Class result = objc_getClass("SKSetupAppleIDSignInServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002725F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_100192160();
    return (Class)sub_1000B6588(v3);
  }
  return result;
}

id sub_1000B6588()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1002725F8;
  uint64_t v7 = qword_1002725F8;
  if (!qword_1002725F8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B666C;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_1000B666C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000B6654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000B666C(uint64_t a1)
{
  sub_1000B62B4();
  Class result = objc_getClass("SKEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1002725F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100192188();
    return (Class)sub_1000B66C4();
  }
  return result;
}

id sub_1000B66C4()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272600;
  uint64_t v7 = qword_100272600;
  if (!qword_100272600)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B67A8;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_1000B67A8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000B6790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000B67A8(uint64_t a1)
{
  sub_1000B62B4();
  Class result = objc_getClass("SKAuthenticationPresentEvent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272600 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1001921B0();
    return (Class)sub_1000B6800(v3);
  }
  return result;
}

uint64_t sub_1000B6800()
{
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_100272608;
  uint64_t v5 = qword_100272608;
  if (!qword_100272608)
  {
    long long v6 = *(_OWORD *)off_10022B020;
    long long v7 = *(_OWORD *)&off_10022B030;
    v3[3] = _sl_dlopen();
    qword_100272608 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1000B6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6928(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272608 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000B69B8()
{
  uint64_t v0 = sub_1000B6800();
  if (!v0)
  {
    uint64_t v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id sub_1000B6A14()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100272610;
  uint64_t v7 = qword_100272610;
  if (!qword_100272610)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B6AF8;
    v3[3] = &unk_100226E40;
    void v3[4] = &v4;
    sub_1000B6AF8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000B6AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000B6AF8(uint64_t a1)
{
  sub_1000B69B8();
  Class result = objc_getClass("APSConnection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100272610 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = sub_1001921D8();
    return (Class)sub_1000B6B50(v3);
  }
  return result;
}

uint64_t sub_1000B6B50()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272618;
  uint64_t v6 = qword_100272618;
  if (!qword_100272618)
  {
    id v1 = (void *)sub_1000B69B8();
    void v4[3] = (uint64_t)dlsym(v1, "APSEnvironmentProduction");
    qword_100272618 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B6C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000B6C40(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000B69B8();
  Class result = dlsym(v2, "APSEnvironmentProduction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272618 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000B6C90()
{
  uint64_t v0 = (void **)sub_1000B6B50();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return (id)sub_1000B6CC4();
  }
}

uint64_t sub_1000B6CC4()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100272620;
  uint64_t v6 = qword_100272620;
  if (!qword_100272620)
  {
    id v1 = (void *)sub_1000B69B8();
    void v4[3] = (uint64_t)dlsym(v1, "APSEnvironmentDevelopment");
    qword_100272620 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B6D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000B6DB4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000B69B8();
  Class result = dlsym(v2, "APSEnvironmentDevelopment");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272620 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000B6E04()
{
  uint64_t v0 = (void **)sub_1000B6CC4();
  if (v0)
  {
    id v1 = *v0;
    return v1;
  }
  else
  {
    sub_10017CFA0();
    return +[AKAppleIDPushHelperService sharedService];
  }
}

void sub_1000B6E8C(id a1)
{
  id v1 = objc_alloc_init(AKAppleIDPushHelperService);
  uint64_t v2 = qword_100272628;
  qword_100272628 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000B728C(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Push service starting...", v10, 2u);
  }

  uint64_t v3 = sub_1000B6800();
  if (v3)
  {
    SEL v4 = sub_1000B6C90();
  }
  else
  {
    SEL v4 = 0;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), v4);
  if (v3) {

  }
  uint64_t v5 = (objc_class *)sub_1000B6800();
  if (v5) {
    uint64_t v5 = (objc_class *)sub_1000B6A14();
  }
  id v6 = [[v5 alloc] initWithEnvironmentName:*(void *)(*(void *)(a1 + 32) + 24) namedDelegatePort:@"com.apple.ak.aps" queue:&_dispatch_main_q];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v6;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "setDelegate:");
  int v9 = [*(id *)(*(void *)(a1 + 32) + 80) allObjects];
  [*(id *)(*(void *)(a1 + 32) + 16) _setEnabledTopics:v9];
}

void sub_1000B73B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v5 = _AKSignpostLogSystem();
  id v6 = v5;
  os_signpost_id_t v7 = *(void *)(a1 + 40);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    LOWORD(v10) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "APSTokenEnvironment", "", (uint8_t *)&v10, 2u);
  }

  uint64_t v8 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = 134218240;
    uint64_t v11 = v9;
    __int16 v12 = 2048;
    double v13 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:APSTokenEnvironment ", (uint8_t *)&v10, 0x16u);
  }

  [*(id *)(a1 + 32) _ensureDesiredAPSEnvironmentIsInUse:v3];
}

id sub_1000B7CD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processPushMessage:*(void *)(a1 + 40)];
}

void sub_1000B7DB0(uint64_t a1)
{
  id v1 = (void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)(a1 + 40);
  unsigned int v3 = [*(id *)(a1 + 32) isEqualToString:*(void *)(*(void *)(a1 + 40) + 24)];
  SEL v4 = _AKLogSystem();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_10019229C();
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*v2 + 24);
      uint64_t v7 = *v1;
      int v21 = 138412546;
      uint64_t v22 = v6;
      __int16 v23 = 2112;
      uint64_t v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Active APS env (%@) does not match server-requested env (%@).", (uint8_t *)&v21, 0x16u);
    }

    uint64_t v8 = (void *)sub_1000B6800();
    if (v8) {
      uint64_t v8 = sub_1000B6A14();
    }
    unsigned __int8 v9 = [v8 isValidEnvironment:*v1];
    int v10 = _AKLogSystem();
    uint64_t v5 = v10;
    if (v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(*v2 + 24);
        int v21 = 138412290;
        uint64_t v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Shutting down APS connection with env %@...", (uint8_t *)&v21, 0xCu);
      }

      [*(id *)(*v2 + 16) setDelegate:0];
      [*(id *)(*v2 + 16) shutdown];
      __int16 v12 = _AKLogSystem();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *v1;
        int v21 = 138412290;
        uint64_t v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Starting new APS connection with env %@...", (uint8_t *)&v21, 0xCu);
      }

      __int16 v14 = (objc_class *)sub_1000B6800();
      if (v14) {
        __int16 v14 = (objc_class *)sub_1000B6A14();
      }
      id v15 = [[v14 alloc] initWithEnvironmentName:*v1 namedDelegatePort:@"com.apple.ak.aps" queue:&_dispatch_main_q];
      unsigned int v16 = *(void **)(*v2 + 16);
      *(void *)(*v2 + 16) = v15;

      objc_msgSend(*(id *)(*v2 + 16), "setDelegate:");
      int v17 = [*(id *)(*v2 + 80) allObjects];
      [*(id *)(*v2 + 16) _setEnabledTopics:v17];

      id v18 = (void *)*v1;
      uint64_t v19 = *v2;
      id v20 = v18;
      uint64_t v5 = *(NSObject **)(v19 + 24);
      *(void *)(v19 + 24) = v20;
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_100192308();
    }
  }
}

void sub_1000B87A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B87D0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 16) publicToken];
  uint64_t v4 = *(void *)(v2[1] + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = objc_alloc_init(AKPushTokenKeychainWrapper);
  [(AKPushTokenKeychainWrapper *)v6 updateToken:*(void *)(*(void *)(v2[1] + 8) + 40)];
  if (!*(void *)(*v2 + 16) || *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*v2 + 16);
      int v17 = 138412290;
      uint64_t v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Skipping waiting for push token with connection: %@", (uint8_t *)&v17, 0xCu);
    }
LABEL_5:

    goto LABEL_6;
  }
  unsigned __int8 v9 = _AKLogSystem();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*v2 + 16);
    int v17 = 138412290;
    uint64_t v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "No APS public token at the moment for connection %@. Waiting for a new one...", (uint8_t *)&v17, 0xCu);
  }

  uint64_t v11 = *(NSObject **)(*v2 + 32);
  dispatch_time_t v12 = dispatch_time(0, (uint64_t)(AKTimeout * 1000000000.0));
  dispatch_semaphore_wait(v11, v12);
  uint64_t v13 = _AKLogSystem();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v17) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Wait for APS public token is over!", (uint8_t *)&v17, 2u);
  }

  uint64_t v14 = [*(id *)(*(void *)(a1 + 32) + 16) publicToken];
  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  [(AKPushTokenKeychainWrapper *)v6 updateToken:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100192564();
    }
    goto LABEL_5;
  }
LABEL_6:
}

void sub_1000B8C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1000B8C50(uint64_t a1)
{
  uint64_t v2 = [[AKPushMessage alloc] initWithMessage:*(void *)(a1 + 32)];
  objc_msgSend(*(id *)(a1 + 40), "_unsafe_processPushMessage:", v2);
}

void sub_1000B9064(id a1, NSDictionary *a2, NSError *a3)
{
}

void sub_1000B94BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _AKLogSystem();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 134217984;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User interacted with alert - %lul.", (uint8_t *)&v8, 0xCu);
  }

  if (a2 != 1)
  {
    if (a2 == 2)
    {
      uint64_t v5 = _AKLogSystem();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
LABEL_16:

        return;
      }
      LOWORD(v8) = 0;
      uint64_t v6 = "Notification torn down by server!";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v8, 2u);
      goto LABEL_16;
    }
LABEL_11:
    [*(id *)(a1 + 32) _notifyDelegatesOfMessageActivation:*(void *)(a1 + 40) result:a2];
    if (a2)
    {
      [*(id *)(a1 + 32) _performCommandForMessage:*(void *)(a1 + 40) forAccount:*(void *)(a1 + 48)];
      return;
    }
    uint64_t v5 = _AKLogSystem();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    LOWORD(v8) = 0;
    uint64_t v6 = "User dismissed notification. Nothing further to do.";
    goto LABEL_15;
  }
  if (![*(id *)(a1 + 32) _canProceedWithArmingForMessage:*(void *)(a1 + 40) account:*(void *)(a1 + 48)])goto LABEL_11; {
  uint64_t v7 = _AKLogSystem();
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "User accepted PCS arming push, begin device arming.", (uint8_t *)&v8, 2u);
  }

  [*(id *)(a1 + 32) _armDeviceWithMessage:*(void *)(a1 + 40) account:*(void *)(a1 + 48) notificationResult:1];
}

id sub_1000B9754(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = _AKLogSystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PCS arming completed, notifying delegates of results.", v7, 2u);
  }

  [*(id *)(a1 + 32) _notifyDelegatesOfMessageActivation:*(void *)(a1 + 40) result:1 payload:v4];
  return [*(id *)(a1 + 32) _performCommandForMessage:*(void *)(a1 + 40) forAccount:*(void *)(a1 + 48)];
}

void sub_1000B9B84(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = _AKLogSystem();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10019286C();
    }

    uint64_t v6 = +[NSBundle bundleWithIdentifier:@"com.apple.AuthKit"];
    uint64_t v7 = [v6 localizedStringForKey:@"LOGIN_CODE_ALERT_TITLE_FAILED" value:&stru_100233250 table:@"Localizable"];

    int v8 = [*v2 localizedDescription];
    uint64_t v9 = +[NSBundle bundleWithIdentifier:@"com.apple.AuthKit"];
    uint64_t v10 = [v9 localizedStringForKey:@"LOGIN_CODE_ALERT_OK_BUTTON" value:&stru_100233250 table:@"Localizable"];
    uint64_t v11 = +[AKPushMessageNotificationPresenter createUserNotificationWithTitle:v7 body:v8 defaultButtonTitle:v10 alternateButtonTitle:0 makeNoise:0];

    if (v11)
    {
      CFUserNotificationReceiveResponse(v11, 0.0, 0);
      CFRelease(v11);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)dispatch_time_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Will display login code notification...", v12, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_unsafe_showLoginNotificationWithCode:incomingMessage:piggy:", *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
  }
}

id sub_1000B9E38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_showLoginNotificationWithCode:incomingMessage:piggy:", *(void *)(a1 + 40), *(void *)(a1 + 48), 1);
}

id sub_1000B9EC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unsafe_teardownCurrentLoginNotification");
}

void sub_1000B9FFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 96);
  *(void *)(v1 + 96) = 0;
}

void sub_1000BA81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1000BA8D4;
  v6[3] = &unk_10022A158;
  void v6[4] = v4;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = a2;
  dispatch_async(v5, v6);
}

id sub_1000BA8D4(void *a1)
{
  [*(id *)(a1[4] + 64) removeObjectForKey:a1[5]];
  (*(void (**)(void))(a1[6] + 16))();

  return +[NSXPCConnection endTransaction];
}

void sub_1000BB01C(id a1)
{
  uint64_t v1 = objc_alloc_init(AKBAATimeProvider);
  uint64_t v2 = qword_100272640;
  qword_100272640 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000BB654(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = _AKLogSystem();
  uint64_t v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100192A0C((uint64_t)v7, v9);
    }

    uint64_t v10 = *(void *)(a1 + 48);
    id v11 = [*(id *)(a1 + 32) _unknownAuthModeInfo];
    uint64_t v13 = v12;
    uint64_t v14 = [*(id *)(a1 + 32) _authModeErrorFromError:v7];
    (*(void (**)(uint64_t, id, uint64_t, void *))(v10 + 16))(v10, v11, v13, v14);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [*(id *)(a1 + 40) username];
      int v18 = 138412290;
      uint64_t v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetched authMode for %@", (uint8_t *)&v18, 0xCu);
    }
    id v16 = [*(id *)(a1 + 32) _authModeInfoFromResponse:v6];
    objc_msgSend(*(id *)(a1 + 32), "_saveAuthMode:withContext:", v16, v17, *(void *)(a1 + 40));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000BDF2C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    if (([WeakRetained _bindStatement:a2 withParameter:*(void *)(a1 + 32) atPosition:1] & 1) == 0)
    {
      [v5 setBindingFailure:1];
      id v6 = _AKLogSystem();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100192EF8((uint64_t *)(a1 + 32), v6);
      }

      if (*(void *)(a1 + 48))
      {
        **(void **)(a1 + 48) = +[NSError errorWithDomain:AKSQLErrorDomain code:-6004 userInfo:0];
      }
    }
  }
  else
  {
    uint64_t v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100192EC0(v5, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

void sub_1000BE0F8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000BE1C0;
    v14[3] = &unk_10022B198;
    uint64_t v15 = WeakRetained;
    uint64_t v16 = a2;
    uint64_t v17 = *(void *)(a1 + 48);
    [v5 enumerateObjectsUsingBlock:v14];
    id v6 = v15;
  }
  else
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100192EC0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

void sub_1000BE1C0(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  id v7 = a2;
  if (([*(id *)(a1 + 32) _bindStatement:*(void *)(a1 + 40) withParameter:v7 atPosition:(a3 + 1)] & 1) == 0)
  {
    [*(id *)(a1 + 32) setBindingFailure:1];
    *a4 = 1;
    uint64_t v8 = _AKLogSystem();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100192F74((uint64_t)v7, v8);
    }

    if (*(void *)(a1 + 48))
    {
      **(void **)(a1 + 48) = +[NSError errorWithDomain:AKSQLErrorDomain code:-6004 userInfo:0];
    }
  }
}

id sub_1000BE774(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateWithRequest:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
}

void sub_1000BEF90(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v21;
    *(void *)&long long v4 = 138412546;
    long long v18 = v4;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7, v18);
        if (v8)
        {
          uint64_t v9 = _AKLogSystem();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v25 = v7;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updating token for service with ID %@...", buf, 0xCu);
          }

          id v10 = objc_alloc_init((Class)ACAccountCredential);
          uint64_t v11 = [v8 stringValue];
          [v10 setToken:v11];

          uint64_t v12 = [v8 expirationDate];
          [v10 setTokenExpiryDate:v12];

          if ([*(id *)(a1 + 40) _isTouchIDRequiredForGrandSlamServiceTokenWithID:v7])
          {
            uint64_t v13 = _AKLogSystem();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v25 = v7;
              _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GS service token with ID %@ marked as requiring TouchID.", buf, 0xCu);
            }

            [v10 setRequiresTouchID:1];
          }
          uint64_t v14 = *(void **)(a1 + 48);
          uint64_t v15 = *(void *)(a1 + 56);
          id v19 = 0;
          [v14 setCredential:v10 forAccount:v15 serviceID:v7 error:&v19];
          id v16 = v19;
          if (v16)
          {
            uint64_t v17 = _AKLogSystem();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v18;
              uint64_t v25 = v7;
              __int16 v26 = 2112;
              id v27 = v16;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to update token for %@ in keychain. Error: %@", buf, 0x16u);
            }
          }
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v3);
  }
}

void sub_1000BF258(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = _AKLogSystem();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10019309C((uint64_t)v2, v3);
    }

    objc_end_catch();
    JUMPOUT(0x1000BF21CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0074(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _AKLogSystem();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Successfully generated authentication parameters... generating SRP context!", (uint8_t *)&v17, 0xCu);
    }

    id v10 = objc_alloc_init(AKSRPContext);
    uint64_t v11 = [(AKSRPContext *)v10 configureWithParameters:v5];
    uint64_t v12 = _AKLogSystem();
    uint64_t v13 = v12;
    if (v11)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100193218();
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v15 = +[NSError ak_errorWithCode:-7004 underlyingError:v11];
      (*(void (**)(uint64_t, void, void, void *))(v14 + 16))(v14, 0, 0, v15);
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v16;
        __int16 v19 = 2112;
        long long v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@: Performing SRP request with context (%@)", (uint8_t *)&v17, 0x16u);
      }

      [*(id *)(a1 + 32) _performRequestWithContext:v10 responseHandler:*(void *)(a1 + 40)];
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001931AC();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 16))();
  }
}

void sub_1000C0424(uint64_t a1)
{
  uint64_t v12 = 0;
  unsigned int v2 = [(id)objc_opt_class() _performRequestWithURL:*(void *)(*(void *)(a1 + 32) + 48) context:*(void *)(a1 + 40) error:&v12];
  id v3 = [*(id *)(a1 + 40) status];
  long long v4 = [v3 objectForKeyedSubscript:@"hsc"];
  [*(id *)(a1 + 32) setResponseCode:v4];

  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [*(id *)(a1 + 40) status];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  uint64_t v7 = [[AKAuthenticationServerResponse alloc] initWithSRPContext:*(void *)(a1 + 40)];
  uint64_t v8 = [*(id *)(a1 + 32) _tokenGenerationInfoForContext:*(void *)(a1 + 40)];
  [(AKAuthenticationServerResponse *)v7 reportCriticalAuthTokensTelemetryForFlow:1 withTokenGenerationInfo:v8];

  uint64_t v9 = v12;
  if (v2) {
    id v10 = 0;
  }
  else {
    id v10 = v12;
  }
  id v11 = v10;
  if ((v2 & 1) == 0) {

  }
  (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 16))();
}

id sub_1000C0B88()
{
  id v0 = objc_alloc_init((Class)objc_opt_class());
  uint64_t v1 = (void *)qword_100272648;
  qword_100272648 = (uint64_t)v0;

  uint64_t v2 = +[NSMutableDictionary dictionary];
  id v3 = *(void **)(qword_100272648 + 16);
  *(void *)(qword_100272648 + 16) = v2;

  uint64_t v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = *(void **)(qword_100272648 + 8);
  *(void *)(qword_100272648 + 8) = v4;

  id v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v7 = dispatch_queue_create("com.apple.authkit.piggybacking-request", v6);
  uint64_t v8 = *(void **)(qword_100272648 + 32);
  *(void *)(qword_100272648 + 32) = v7;

  uint64_t v9 = objc_opt_new();
  id v10 = *(void **)(qword_100272648 + 40);
  *(void *)(qword_100272648 + 40) = v9;

  id v11 = *(void **)(qword_100272648 + 40);

  return _[v11 setQualityOfService:17];
}

void sub_1000C0D14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C1614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = _AKLogSystem();
  id v6 = v5;
  if (a3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v33) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Accepting session finished successfully", (uint8_t *)&v33, 2u);
    }

    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    uint64_t v8 = _AKSignpostLogSystem();
    uint64_t v9 = v8;
    os_signpost_id_t v10 = *(void *)(a1 + 48);
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      LOWORD(v33) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "PiggybackingProcessPushPayload", "", (uint8_t *)&v33, 2u);
    }

    id v11 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      int v33 = 134218240;
      uint64_t v34 = v12;
      __int16 v35 = 2048;
      double v36 = (double)(unint64_t)Nanoseconds / 1000000000.0;
      uint64_t v13 = "END [%lld] %fs:PiggybackingProcessPushPayload ";
      uint64_t v14 = v11;
      uint32_t v15 = 22;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v33, v15);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100193320(v6, v16, v17, v18, v19, v20, v21, v22);
    }

    uint64_t v23 = _AKSignpostGetNanoseconds();
    uint64_t v24 = _AKSignpostLogSystem();
    uint64_t v25 = v24;
    os_signpost_id_t v26 = *(void *)(a1 + 48);
    if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
    {
      int v33 = 67240192;
      LODWORD(v34) = [0 code];
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_INTERVAL_END, v26, "PiggybackingProcessPushPayload", " Error=%{public,signpost.telemetry:number1,name=Error}d ", (uint8_t *)&v33, 8u);
    }

    id v11 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      double v27 = (double)(unint64_t)v23 / 1000000000.0;
      uint64_t v28 = *(void *)(a1 + 48);
      unsigned int v29 = [0 code];
      int v33 = 134218496;
      uint64_t v34 = v28;
      __int16 v35 = 2048;
      double v36 = v27;
      __int16 v37 = 1026;
      unsigned int v38 = v29;
      uint64_t v13 = "END [%lld] %fs:PiggybackingProcessPushPayload  Error=%{public,signpost.telemetry:number1,name=Error}d ";
      uint64_t v14 = v11;
      uint32_t v15 = 28;
      goto LABEL_16;
    }
  }

  __int16 v30 = +[AKAppleIDPushHelperService sharedService];
  [v30 tearDownLoginNotifications];

  double v31 = *(void **)(a1 + 32);
  __int16 v32 = [*(id *)(a1 + 40) transactionId];
  [v31 _removeAcceptingControllerForTransaction:v32];
}

void sub_1000C1B34(id a1)
{
  uint64_t v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
    sub_1001933C4();
  }

  uint64_t v2 = +[LSApplicationWorkspace defaultWorkspace];
  id v3 = +[NSURL URLWithString:@"prefs:root=WIFI"];
  [v2 openSensitiveURL:v3 withOptions:0];
}

void sub_1000C1BC0(id a1)
{
  uint64_t v1 = _AKLogSystem();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG)) {
    sub_1001933F8();
  }
}

void sub_1000C1D70(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = [*(id *)(a1 + 40) transactionId];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    [v4 setPayload:*(void *)(a1 + 40)];
    uint64_t v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Processing pending reply!", v9, 2u);
    }

    id v6 = [v4 condition];
    [v6 lock];

    dispatch_queue_t v7 = [v4 condition];
    [v7 signal];

    uint64_t v8 = [v4 condition];
    [v8 unlock];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1000C1FA4(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    uint64_t v8 = [[AKCAPiggybackReporter alloc] initWithRequestID:a1[5]];
    uint64_t v5 = [[AKPiggybackAcceptingController alloc] initWithPiggybackReporter:v8];
    uint64_t v6 = *(void *)(a1[6] + 8);
    dispatch_queue_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [*(id *)(a1[4] + 8) setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:a1[5]];
  }
}

id sub_1000C2124(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1000C21F0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained _stopProximityController];

  objc_storeWeak((id *)(*(void *)(a1 + 32) + 24), 0);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000C2CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,id location)
{
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v46 - 176), 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v46 - 224));
  _Unwind_Resume(a1);
}

void sub_1000C2DA8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = +[AKAppleIDPushHelperService sharedService];
  [v6 setEnableCriticalReliability:0];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000C2E40(id a1, NSHTTPURLResponse *a2, NSData *a3, NSError *a4)
{
  uint64_t v4 = a4;
  if (v4)
  {
    id v5 = _AKLogSystem();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100193460();
    }
  }
}

void sub_1000C2E98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v4 = [*(id *)(a1 + 40) payload];
  uint64_t v3 = [v4 transactionId];
  [v2 setObject:v1 forKeyedSubscript:v3];
}

void sub_1000C2F10(uint64_t a1)
{
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v66 = _os_activity_create((void *)&_mh_execute_header, "authkit/circle-operation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v66, &state);
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) payload];
    *(_DWORD *)buf = 138412290;
    CFStringRef v72 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting circle operation with context: %@", buf, 0xCu);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  [*(id *)(a1 + 40) lock];
  while (([WeakRetained isCancelled] & 1) == 0
       && !*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
  {
    id v4 = [*(id *)(a1 + 48) payload];
    if (v4)
    {

      break;
    }
    [*(id *)(a1 + 56) timeIntervalSinceNow];
    if (v5 <= 0.0) {
      break;
    }
    uint64_t v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if ([WeakRetained isCancelled]) {
        CFStringRef v7 = @"YES";
      }
      else {
        CFStringRef v7 = @"NO";
      }
      [*(id *)(a1 + 56) timeIntervalSinceNow];
      id v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      *(_DWORD *)buf = 138412802;
      CFStringRef v72 = v7;
      __int16 v73 = 2112;
      double v74 = *(double *)&v8;
      __int16 v75 = 2112;
      uint64_t v76 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Waiting... %@ - (%@) - %@", buf, 0x20u);
    }
    os_signpost_id_t v10 = *(void **)(a1 + 40);
    id v11 = +[NSDate dateWithTimeIntervalSinceNow:1.0];
    [v10 waitUntilDate:v11];
  }
  [*(id *)(a1 + 40) unlock];
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(NSObject **)(v12 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000C39E0;
  block[3] = &unk_100226C00;
  void block[4] = v12;
  id v69 = *(id *)(a1 + 32);
  dispatch_sync(v13, block);
  if ([WeakRetained isCancelled])
  {
    uint64_t v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint32_t v15 = [*(id *)(a1 + 32) payload];
      *(_DWORD *)buf = 138412290;
      CFStringRef v72 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Cancelled piggybacking request: %@", buf, 0xCu);
    }
    uint64_t v16 = +[NSError ak_errorWithCode:-7064];
    uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
    uint64_t v18 = _AKSignpostLogSystem();
    uint64_t v19 = v18;
    os_signpost_id_t v20 = *(void *)(a1 + 112);
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
    {
      CFStringRef v21 = *(const __CFString **)(a1 + 72);
      unsigned int v22 = [v16 code];
      *(_DWORD *)buf = 138543618;
      CFStringRef v72 = v21;
      __int16 v73 = 1026;
      LODWORD(v74) = v22;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, v20, "PiggyCircleRequest", " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x12u);
    }

    uint64_t v23 = _AKSignpostLogSystem();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v24 = *(const __CFString **)(a1 + 112);
      uint64_t v25 = *(void *)(a1 + 72);
      unsigned int v26 = [v16 code];
      *(_DWORD *)buf = 134218754;
      CFStringRef v72 = v24;
      __int16 v73 = 2048;
      double v74 = (double)(unint64_t)Nanoseconds / 1000000000.0;
      __int16 v75 = 2114;
      uint64_t v76 = v25;
      __int16 v77 = 1026;
      unsigned int v78 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x26u);
    }

    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
LABEL_24:

    goto LABEL_32;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
  {
    [*(id *)(a1 + 56) timeIntervalSinceNow];
    if (v37 >= 0.0)
    {
      uint64_t v55 = _AKLogSystem();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        os_signpost_id_t v56 = [*(id *)(a1 + 32) payload];
        id v57 = [*(id *)(a1 + 48) payload];
        *(_DWORD *)buf = 138412546;
        CFStringRef v72 = v56;
        __int16 v73 = 2112;
        double v74 = *(double *)&v57;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Circle request (%@) completed with response: %@", buf, 0x16u);
      }
      uint64_t v58 = _AKSignpostGetNanoseconds();
      long long v59 = _AKSignpostLogSystem();
      long long v60 = v59;
      os_signpost_id_t v61 = *(void *)(a1 + 112);
      if (v61 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v59))
      {
        CFStringRef v62 = *(const __CFString **)(a1 + 72);
        *(_DWORD *)buf = 138543618;
        CFStringRef v72 = v62;
        __int16 v73 = 1026;
        LODWORD(v74) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, OS_SIGNPOST_INTERVAL_END, v61, "PiggyCircleRequest", " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x12u);
      }

      int v63 = _AKSignpostLogSystem();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218754;
        uint64_t v64 = *(void *)(a1 + 72);
        CFStringRef v72 = *(const __CFString **)(a1 + 112);
        __int16 v73 = 2048;
        double v74 = (double)(unint64_t)v58 / 1000000000.0;
        __int16 v75 = 2114;
        uint64_t v76 = v64;
        __int16 v77 = 1026;
        unsigned int v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x26u);
      }

      uint64_t v65 = *(void *)(a1 + 88);
      uint64_t v16 = [*(id *)(a1 + 48) payload];
      (*(void (**)(uint64_t, void *, void))(v65 + 16))(v65, v16, 0);
    }
    else
    {
      unsigned int v38 = _AKLogSystem();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = [*(id *)(a1 + 32) payload];
        *(_DWORD *)buf = 138412290;
        CFStringRef v72 = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Timeout for piggybacking request: %@", buf, 0xCu);
      }
      if ([*(id *)(a1 + 32) _notifyOfTimeout])
      {
        [*(id *)(a1 + 80) didCircleTimeout];
        uint64_t v40 = _AKLogSystem();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          sub_1001934C8();
        }

        [*(id *)(a1 + 32) setWaitForReply:0];
        double v41 = [*(id *)(a1 + 32) payload];
        [v41 setClientErrorCode:-9002];

        id v42 = [*(id *)(a1 + 64) performCircleRequestWithContext:*(void *)(a1 + 32) completion:0];
      }
      uint64_t v16 = +[NSError ak_errorWithCode:-7029];
      uint64_t v43 = _AKSignpostGetNanoseconds();
      uint64_t v44 = _AKSignpostLogSystem();
      uint64_t v45 = v44;
      os_signpost_id_t v46 = *(void *)(a1 + 112);
      if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v44))
      {
        CFStringRef v47 = *(const __CFString **)(a1 + 72);
        unsigned int v48 = [v16 code];
        *(_DWORD *)buf = 138543618;
        CFStringRef v72 = v47;
        __int16 v73 = 1026;
        LODWORD(v74) = v48;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_INTERVAL_END, v46, "PiggyCircleRequest", " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x12u);
      }

      uint64_t v49 = _AKSignpostLogSystem();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v50 = *(const __CFString **)(a1 + 112);
        uint64_t v51 = *(void *)(a1 + 72);
        unsigned int v52 = [v16 code];
        *(_DWORD *)buf = 134218754;
        CFStringRef v72 = v50;
        __int16 v73 = 2048;
        double v74 = (double)(unint64_t)v43 / 1000000000.0;
        __int16 v75 = 2114;
        uint64_t v76 = v51;
        __int16 v77 = 1026;
        unsigned int v78 = v52;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x26u);
      }

      uint64_t v53 = *(void *)(a1 + 88);
      id v54 = +[NSError ak_errorWithCode:-7029];
      (*(void (**)(uint64_t, void, void *))(v53 + 16))(v53, 0, v54);
    }
    goto LABEL_24;
  }
  uint64_t v27 = _AKSignpostGetNanoseconds();
  uint64_t v28 = _AKSignpostLogSystem();
  unsigned int v29 = v28;
  os_signpost_id_t v30 = *(void *)(a1 + 112);
  if (v30 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v28))
  {
    CFStringRef v31 = *(const __CFString **)(a1 + 72);
    unsigned int v32 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) code];
    *(_DWORD *)buf = 138543618;
    CFStringRef v72 = v31;
    __int16 v73 = 1026;
    LODWORD(v74) = v32;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, v30, "PiggyCircleRequest", " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x12u);
  }

  int v33 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v34 = *(const __CFString **)(a1 + 112);
    uint64_t v35 = *(void *)(a1 + 72);
    unsigned int v36 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) code];
    *(_DWORD *)buf = 134218754;
    CFStringRef v72 = v34;
    __int16 v73 = 2048;
    double v74 = (double)(unint64_t)v27 / 1000000000.0;
    __int16 v75 = 2114;
    uint64_t v76 = v35;
    __int16 v77 = 1026;
    unsigned int v78 = v36;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggyCircleRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", buf, 0x26u);
  }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
LABEL_32:

  os_activity_scope_leave(&state);
}

void sub_1000C3944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

void sub_1000C39E0(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = [*(id *)(a1 + 40) payload];
  uint64_t v2 = [v3 transactionId];
  [v1 removeObjectForKey:v2];
}

void sub_1000C3A48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  uint64_t v9 = _AKSignpostLogSystem();
  os_signpost_id_t v10 = v9;
  os_signpost_id_t v11 = *(void *)(a1 + 80);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    uint64_t v12 = *(void **)(a1 + 32);
    int v27 = 138543618;
    id v28 = v12;
    __int16 v29 = 1026;
    LODWORD(v30) = [v7 code];
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v11, "PiggyExecuteRequest", " CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v27, 0x12u);
  }

  uint64_t v13 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(double *)&uint64_t v14 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    uint32_t v15 = *(void **)(a1 + 80);
    uint64_t v16 = *(void **)(a1 + 32);
    unsigned int v17 = [v7 code];
    int v27 = 134218754;
    id v28 = v15;
    __int16 v29 = 2048;
    uint64_t v30 = v14;
    __int16 v31 = 2114;
    unsigned int v32 = v16;
    __int16 v33 = 1026;
    unsigned int v34 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:PiggyExecuteRequest  CircleStep=%{public,signpost.telemetry:string2,name=CircleStep}@  Error=%{public,signpost.telemetry:number2,name=Error}d ", (uint8_t *)&v27, 0x26u);
  }

  uint64_t v18 = [*(id *)(a1 + 40) payload];
  id v19 = [v18 circleStep];

  if (v7)
  {
    os_signpost_id_t v20 = _AKLogSystem();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_100193460();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a4);
    [*(id *)(a1 + 48) _processUIIfNeededForError:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) circleStep:v19];
    [*(id *)(a1 + 56) lock];
    [*(id *)(a1 + 56) signal];
    [*(id *)(a1 + 56) unlock];
  }
  if (!v19)
  {
    CFStringRef v21 = _AKLogSystem();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412290;
      id v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Received response for circle (step 0) request: %@", (uint8_t *)&v27, 0xCu);
    }

    unsigned int v22 = +[AKCircleRequestPayload payloadWithResponseData:v6 forCircleStep:0];
    uint64_t v23 = [v22 presenceSID];

    CFStringRef v24 = _AKLogSystem();
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      if (v25)
      {
        unsigned int v26 = [v22 presenceSID];
        int v27 = 138412802;
        id v28 = v22;
        __int16 v29 = 2160;
        uint64_t v30 = 1752392040;
        __int16 v31 = 2112;
        unsigned int v32 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Circle (step 0) response payload (%@) received with presenceSID (%{mask.hash}@)", (uint8_t *)&v27, 0x20u);
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      if (v25)
      {
        int v27 = 138412290;
        id v28 = v22;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Circle (step 0) response payload (%@) does not contain presenceSID, ignoring response", (uint8_t *)&v27, 0xCu);
      }
    }
  }
}

void sub_1000C3FB0(id a1)
{
  uint64_t v1 = objc_alloc_init(AKGlobalConfigService);
  uint64_t v2 = qword_100272660;
  qword_100272660 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000C41DC(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetched global config after locale change.", v4, 2u);
  }

  id v3 = +[AKConfiguration sharedConfiguration];
  [v3 setLastKnownLocale:*(void *)(a1 + 32)];
}

void sub_1000C473C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t Nanoseconds = _AKSignpostGetNanoseconds();
  id v8 = _AKSignpostLogSystem();
  uint64_t v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 40);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v13) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, v10, "FetchGlobalConfig", "", (uint8_t *)&v13, 2u);
  }

  os_signpost_id_t v11 = _AKSignpostLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    int v13 = 134218240;
    uint64_t v14 = v12;
    __int16 v15 = 2048;
    double v16 = (double)(unint64_t)Nanoseconds / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs:FetchGlobalConfig ", (uint8_t *)&v13, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000C48B8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  if (v6 && !v7) {
    goto LABEL_5;
  }
  if ([*(id *)(a1 + 40) isRecoverableError:v7])
  {
    if (v6)
    {
LABEL_5:
      id v8 = objc_msgSend(*(id *)(a1 + 48), "_unsafe_updateCacheWithData:", v6);
      uint64_t v9 = *(void *)(a1 + 48);
      os_signpost_id_t v10 = *(NSObject **)(v9 + 8);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1000C4A74;
      v18[3] = &unk_100226C00;
      void v18[4] = v9;
      id v19 = v8;
      id v11 = v8;
      dispatch_async(v10, v18);
      (*(void (**)(void, id, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v11, 0, v12, v13);

      goto LABEL_12;
    }
    __int16 v15 = _AKLogSystem();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_100193570(v15);
    }

    uint64_t v16 = *(void *)(a1 + 56);
    unsigned int v17 = +[NSError ak_errorWithCode:-7005];
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v17);
  }
  else
  {
    uint64_t v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001935B4((uint64_t)v7, v14);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
LABEL_12:
}

void sub_1000C4A74(uint64_t a1)
{
}

id sub_1000C4A80(uint64_t a1)
{
  uint64_t v2 = _AKLogSystem();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10019362C(a1, v2);
  }

  return [*(id *)(a1 + 40) cancelDataTask:*(void *)(a1 + 32)];
}

void sub_1000C6BB0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = +[AKPrivateEmailStoreManager sharedInstance];
  id v7 = [v6 currentEmailListVersion];
  id v8 = v7;
  if (v10 && v7 && ([v7 isEqualToString:AKPrivateEmailInitialVersion] & 1) == 0)
  {
    uint64_t v9 = [*(id *)(a1 + 32) appendRequestUrl:v10 queryParameterNamed:AKPrivateEmailListVersionKey value:v8];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000C7880(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
    }
  }
  else
  {
    id v7 = [v9 objectForKeyedSubscript:AKAuthenticationPasswordKey];
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);
    }
  }
}

void sub_1000C7A6C(id a1)
{
  byte_100272668 = MGGetBoolAnswer();
}

uint64_t sub_1000C7C7C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_100272678;
  qword_100272678 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_1000C7E80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = _AKLogSystem();
  id v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100193B28((uint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v28 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetched app info for %@", buf, 0xCu);
    }

    unsigned int v17 = +[AAFSerialization dictionaryFromObject:v6 ofType:@"application/x-plist"];
    id v18 = [objc_alloc((Class)AKApplicationMetadataInfo) initWithResponseInfo:v17];
    id v19 = [*(id *)(a1 + 40) _buildApplicationAuthorizationController];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1000C8098;
    v23[3] = &unk_100229298;
    int8x16_t v22 = *(int8x16_t *)(a1 + 32);
    id v20 = (id)v22.i64[0];
    int8x16_t v24 = vextq_s8(v22, v22, 8uLL);
    id v25 = v18;
    id v26 = *(id *)(a1 + 48);
    id v21 = v18;
    [v19 updateAuthorizationListWithMetadataInfo:v21 withAltDSID:v20 completion:v23];
  }
}

uint64_t sub_1000C8098(uint64_t a1)
{
  uint64_t v2 = +[AKFeatureManager sharedManager];
  unsigned int v3 = [v2 isSiwaInPasswordsFeatureEnabled];

  if (v3) {
    [*(id *)(a1 + 32) _updatePrimaryApplicationsMetadataForAltDSID:*(void *)(a1 + 40) metadataInfo:*(void *)(a1 + 48)];
  }
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v4();
}

void sub_1000C82E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _AKLogSystem();
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100193B94((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fetched Primary application bundle id for %@", (uint8_t *)&v17, 0xCu);
    }

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v15();
}

void sub_1000C8514(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = _AKLogSystem();
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100193C00((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully updated primary app metadata", v11, 2u);
  }
}

void sub_1000C9ABC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6
    || ([v5 attestationHeaders],
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        id v11 = [v10 count],
        v10,
        !v11))
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100193E98((uint64_t)v6, v7);
    }

    uint64_t v8 = (void (**)(id, void, id))a1[8];
    id v9 = +[NSError ak_generalErrorWithCode:-8001 errorDomain:AKAnisetteErrorDomain underlyingError:v6];
    v8[2](v8, 0, v9);
  }
  else
  {
    uint64_t v12 = [a1[4] _anisetteHeadersFromAttestationData:v5];
    uint64_t v13 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000C9CA0;
    block[3] = &unk_10022AF08;
    id v15 = a1[5];
    id v16 = v5;
    id v17 = a1[6];
    id v18 = v12;
    id v19 = a1[4];
    id v20 = a1[7];
    id v21 = a1[8];
    id v9 = v12;
    dispatch_async(v13, block);
  }
}

void sub_1000C9CA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) attestationHeaders];
  [v2 addEntriesFromDictionary:v3];

  [*(id *)(a1 + 48) addEntriesFromDictionary:*(void *)(a1 + 56)];
  id v4 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
  id v5 = [v4 uniqueDeviceIdentifier];

  if (v5)
  {
    id v6 = _AKLogSystem();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Context has provieded UDID for proxied device.", v36, 2u);
    }

    uint64_t v7 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
    uint64_t v8 = [v7 uniqueDeviceIdentifier];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"X-Mme-Proxied-Device-Id"];

    id v9 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
    uint64_t v10 = [v9 uniqueDeviceIdentifier];
    [*(id *)(a1 + 48) setObject:v10 forKeyedSubscript:@"X-Mme-Proxied-Device-Id"];
  }
  id v11 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
  uint64_t v12 = [v11 color];

  if (v12)
  {
    uint64_t v13 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
    uint64_t v14 = [v13 color];
    [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:@"pdc"];
  }
  id v15 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
  id v16 = [v15 enclosureColor];

  if (v16)
  {
    id v17 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
    id v18 = [v17 enclosureColor];
    [*(id *)(a1 + 32) setObject:v18 forKeyedSubscript:@"pdec"];
  }
  id v19 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
  id v20 = [v19 locale];

  if (v20)
  {
    id v21 = [*(id *)(*(void *)(a1 + 64) + 112) proxiedDevice];
    int8x16_t v22 = [v21 locale];
    uint64_t v23 = [v22 localeIdentifier];
    [*(id *)(a1 + 32) setObject:v23 forKeyedSubscript:@"ploc"];
  }
  int8x16_t v24 = [*(id *)(*(void *)(a1 + 64) + 112) companionDevice];
  id v25 = [v24 uniqueDeviceIdentifier];

  if (v25)
  {
    id v26 = [*(id *)(*(void *)(a1 + 64) + 112) companionDevice];
    int v27 = [v26 uniqueDeviceIdentifier];
    [*(id *)(a1 + 32) setObject:v27 forKeyedSubscript:@"X-Mme-Companion-Device-Id"];

    uint64_t v28 = [*(id *)(*(void *)(a1 + 64) + 112) companionDevice];
    __int16 v29 = [v28 uniqueDeviceIdentifier];
    [*(id *)(a1 + 72) setObject:v29 forKeyedSubscript:@"X-Mme-Companion-Device-Id"];
  }
  uint64_t v30 = [*(id *)(*(void *)(a1 + 64) + 112) appProvidedContext];

  if (v30)
  {
    __int16 v31 = [*(id *)(*(void *)(a1 + 64) + 112) appProvidedContext];
    [*(id *)(a1 + 32) setObject:v31 forKeyedSubscript:AKAppProvidedContextKey];
  }
  id v32 = [*(id *)(a1 + 32) copy];
  [*(id *)(a1 + 72) setObject:v32 forKeyedSubscript:kAppleIDAuthSupportClientProvidedData];

  id v33 = [*(id *)(a1 + 48) copy];
  [*(id *)(a1 + 72) setObject:v33 forKeyedSubscript:kAppleIDAuthSupportAdditionalHeaders];

  uint64_t v34 = *(void *)(a1 + 80);
  id v35 = [*(id *)(a1 + 72) copy];
  (*(void (**)(uint64_t, id, void))(v34 + 16))(v34, v35, 0);
}

void sub_1000CA5A0(uint64_t a1)
{
  id v1 = *(id **)(a1 + 32);
  id v2 = [v1[14] altDSID];
  [v1 _clearDeviceListCacheForAltDSID:v2];
}

void sub_1000CA738(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412803;
    uint64_t v9 = v7;
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 2113;
    id v13 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Clear device list cache completed for context - %@ with status - %d and error - %{private}@", (uint8_t *)&v8, 0x1Cu);
  }
}

void sub_1000CB5B8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v9 = 0;
  __int16 v10 = &v9;
  uint64_t v11 = 0x2020000000;
  id v5 = (void (*)(void, id, id))off_100272690;
  __int16 v12 = off_100272690;
  if (!off_100272690)
  {
    id v6 = (void *)sub_1000CE024();
    v10[3] = (uint64_t)dlsym(v6, "DeviceIdentityIssueClientCertificateWithCompletion");
    off_100272690 = (_UNKNOWN *)v10[3];
    id v5 = (void (*)(void, id, id))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (!v5)
  {
    sub_10017CFA0();
    int v8 = v7;
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  v5(0, v3, v4);
}

void sub_1000CB6E0(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = _AKLogSystem();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100194110();
    }

    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, void, id))(v10 + 16))(v10, 0, 0, 0, v8);
    }
    goto LABEL_21;
  }
  if (a2 && [v7 count] == (id)2)
  {
    uint64_t v11 = [*(id *)(a1 + 32) _attestationWithSecCertRefs:v7];
    char v12 = [*(id *)(a1 + 32) _isCachedAttestation:v11];
    id v13 = _AKLogSystem();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      sub_100194088(v12, v13, v14);
    }

    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    id v24 = 0;
    id v17 = [v15 _signatureForDataFields:v16 withRefKey:a2 error:&v24];
    id v18 = v24;
    CFRelease(a2);
    uint64_t v19 = *(void *)(a1 + 48);
    if (v18)
    {
      if (v19)
      {
        id v20 = *(void (**)(void))(v19 + 16);
LABEL_19:
        v20();
      }
    }
    else if (v19)
    {
      id v20 = *(void (**)(void))(v19 + 16);
      goto LABEL_19;
    }

    goto LABEL_21;
  }
  id v21 = _AKLogSystem();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    sub_100193FF8((uint64_t)a2, v7);
  }

  uint64_t v22 = *(void *)(a1 + 48);
  if (v22)
  {
    uint64_t v23 = +[NSError errorWithDomain:AKGenericErrorDomain code:-17001 userInfo:0];
    (*(void (**)(uint64_t, void, void, void, void *))(v22 + 16))(v22, 0, 0, 0, v23);
  }
LABEL_21:
}

void sub_1000CBD2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9 || ![v7 length])
  {
    uint64_t v10 = _AKLogSystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001941AC();
    }

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      (*(void (**)(uint64_t, void, void, id))(v11 + 16))(v11, 0, 0, v9);
    }
  }
  else
  {
    if ([v7 length] && objc_msgSend(v8, "count") == (id)2)
    {
      char v12 = [*(id *)(a1 + 32) _attestationWithSecCertRefs:v8];
      uint64_t v13 = *(void *)(a1 + 40);
      if (v13) {
        (*(void (**)(uint64_t, id, void *, void))(v13 + 16))(v13, v7, v12, 0);
      }
      goto LABEL_15;
    }
    uint64_t v14 = _AKLogSystem();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100194214(v7, v8);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      char v12 = +[NSError errorWithDomain:AKAttestationErrorDomain code:-10001 userInfo:0];
      (*(void (**)(uint64_t, void, void, void *))(v15 + 16))(v15, 0, 0, v12);
LABEL_15:
    }
  }
}

void sub_1000CBFA4(uint64_t a1)
{
  [*(id *)(a1 + 32) setBaaAttestationHash:*(void *)(a1 + 40)];
  id v2 = +[AKConfiguration sharedConfiguration];
  [v2 setStrongDeviceIdentityMarker:*(void *)(a1 + 40)];
}

void sub_1000CC21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000CC23C()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)qword_1002726A8;
  uint64_t v9 = qword_1002726A8;
  if (!qword_1002726A8)
  {
    id v1 = (void *)sub_1000CE024();
    v7[3] = (uint64_t)dlsym(v1, "kMAOptionsBAAKeychainAccessGroup");
    qword_1002726A8 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v0)
  {
    sub_10017CFA0();
    id v5 = v4;
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  id v2 = *v0;

  return v2;
}

id sub_1000CC344()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)qword_1002726B0;
  uint64_t v9 = qword_1002726B0;
  if (!qword_1002726B0)
  {
    id v1 = (void *)sub_1000CE024();
    v7[3] = (uint64_t)dlsym(v1, "kMAOptionsBAAKeychainLabel");
    qword_1002726B0 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v0)
  {
    sub_10017CFA0();
    id v5 = v4;
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  id v2 = *v0;

  return v2;
}

void sub_1000CC44C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BAA certs deleted for AuthKit label. Error: {%@}", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v5);
  }
}

id sub_1000CC740()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)qword_1002726C0;
  uint64_t v9 = qword_1002726C0;
  if (!qword_1002726C0)
  {
    id v1 = (void *)sub_1000CE024();
    v7[3] = (uint64_t)dlsym(v1, "kMAOptionsBAAOIDKeyUsageProperties");
    qword_1002726C0 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v0)
  {
    sub_10017CFA0();
    id v5 = v4;
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  id v2 = *v0;

  return v2;
}

void sub_1000CCAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CCD5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _AKLogSystem();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10019461C();
    }

    [*(id *)(a1 + 32) _sendAnalyticsEvent:*(void *)(a1 + 40) withError:v6];
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      uint64_t v9 = *(void (**)(void))(v8 + 16);
LABEL_6:
      v9();
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  uint64_t v10 = _AKLogSystem();
  uint64_t v11 = v10;
  if (!v5)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001944E4();
    }

    uint64_t v16 = -10006;
    goto LABEL_20;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_10019459C(v5, v11);
  }

  if ([v5 count] != (id)2)
  {
    id v17 = _AKLogSystem();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_100194524(v5);
    }

    uint64_t v16 = -10007;
LABEL_20:
    id v18 = +[NSError ak_attestationErrorWithCode:v16 underlyingError:0];
    [*(id *)(a1 + 32) _sendAnalyticsEvent:*(void *)(a1 + 40) withError:v18];
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19) {
      (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v18);
    }

    goto LABEL_23;
  }
  unsigned __int8 v12 = [*(id *)(a1 + 32) requiredOIDPresentInCertificates:v5];
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  if ((v12 & 1) == 0)
  {
    id v20 = +[NSError ak_attestationErrorWithCode:-10012 underlyingError:0];
    [v13 _sendAnalyticsEvent:v14 withError:v20];

    [*(id *)(a1 + 32) _renewDCRTWithContext:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    goto LABEL_23;
  }
  [*(id *)(a1 + 32) _sendAnalyticsEvent:*(void *)(a1 + 40) withError:0];
  uint64_t v15 = *(void *)(a1 + 56);
  if (v15)
  {
    uint64_t v9 = *(void (**)(void))(v15 + 16);
    goto LABEL_6;
  }
LABEL_23:
}

void sub_1000CD318(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      (*(void (**)(uint64_t, void, void, id))(v7 + 16))(v7, 0, 0, v6);
    }
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 32) _attestationWithSecCertRefs:v5];
    uint64_t v9 = *(void *)(a1 + 40);
    id v34 = 0;
    uint64_t v10 = +[AKSecureKey createOSVersionAttestationRefKeyWithContext:v9 accessControl:0 error:&v34];
    id v11 = v34;
    unsigned __int8 v12 = _AKLogSystem();
    uint64_t v13 = v12;
    if (v10)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        sub_1001948C0();
      }

      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v16 = *(void **)(a1 + 32);
      id v33 = 0;
      [v16 _updateRefKeyWithNonce:v14 context:v15 refkey:v10 error:&v33];
      id v17 = v33;
      if (v17)
      {
        CFRelease(v10);
        uint64_t v18 = *(void *)(a1 + 56);
        if (v18) {
          (*(void (**)(uint64_t, void, void, id))(v18 + 16))(v18, 0, 0, v17);
        }
      }
      else
      {
        id v20 = *(void **)(a1 + 32);
        uint64_t v21 = *(void *)(a1 + 40);
        id v32 = 0;
        id v22 = [v20 _retrieveDAK:v21 error:&v32];
        id v23 = v32;
        if (v23)
        {
          CFRelease(v10);
          uint64_t v24 = *(void *)(a1 + 56);
          if (v24) {
            (*(void (**)(uint64_t, void, void, id))(v24 + 16))(v24, 0, 0, v23);
          }
        }
        else
        {
          id v25 = *(void **)(a1 + 32);
          uint64_t v26 = *(void *)(a1 + 40);
          id v31 = 0;
          int v27 = [v25 _getAttestationData:v26 rk:v10 dak:v22 error:&v31];
          id v30 = v31;
          CFRelease(v10);
          if (v22) {
            CFRelease(v22);
          }
          uint64_t v28 = _AKLogSystem();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
            sub_10019484C();
          }

          uint64_t v29 = *(void *)(a1 + 56);
          if (v29) {
            (*(void (**)(uint64_t, void *, void *, id))(v29 + 16))(v29, v27, v8, v30);
          }
        }
      }
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1001947E4();
      }

      uint64_t v19 = *(void *)(a1 + 56);
      if (v19) {
        (*(void (**)(uint64_t, void, void, id))(v19 + 16))(v19, 0, 0, v11);
      }
    }
  }
}

void sub_1000CDC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000CDFD4(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  Class result = dlsym(v2, "DeviceIdentityIssueClientCertificateWithCompletion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_100272690 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000CE024()
{
  v3[0] = 0;
  if (!qword_100272698)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_1000CE124;
    void v3[4] = &unk_1002295D0;
    void v3[5] = v3;
    long long v4 = off_10022B588;
    uint64_t v5 = 0;
    qword_100272698 = _sl_dlopen();
  }
  uint64_t v0 = qword_100272698;
  id v1 = (void *)v3[0];
  if (!qword_100272698)
  {
    id v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_1000CE124()
{
  uint64_t result = _sl_dlopen();
  qword_100272698 = result;
  return result;
}

void *sub_1000CE198(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "DeviceIdentityCreateHostSignatureWithCompletion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1002726A0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE1E8(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAKeychainAccessGroup");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE238(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAKeychainLabel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE288(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAADeleteExistingKeysAndCerts");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE2D8(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAOIDKeyUsageProperties");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE328(uint64_t a1)
{
  id v2 = (void *)sub_1000CE378();
  uint64_t result = dlsym(v2, "kMAOptionsIgnoreExistingDCRT");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000CE378()
{
  v3[0] = 0;
  if (!qword_1002726D0)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_1000CE478;
    void v3[4] = &unk_1002295D0;
    void v3[5] = v3;
    long long v4 = off_10022B5A0;
    uint64_t v5 = 0;
    qword_1002726D0 = _sl_dlopen();
  }
  uint64_t v0 = qword_1002726D0;
  id v1 = (void *)v3[0];
  if (!qword_1002726D0)
  {
    id v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_1000CE478()
{
  uint64_t result = _sl_dlopen();
  qword_1002726D0 = result;
  return result;
}

void *sub_1000CE4EC(uint64_t a1)
{
  id v2 = (void *)sub_1000CE378();
  uint64_t result = dlsym(v2, "MAEIssueDCRTWithCompletion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1002726D8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE53C(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAOIDDeviceOSInformation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE58C(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAOIDDeviceIdentifiers");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE5DC(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAOIDUCRTDeviceIdentifiers");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE62C(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAIgnoreExistingKeychainItems");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1002726F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE67C(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAValidity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272700 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000CE6CC(uint64_t a1)
{
  id v2 = (void *)sub_1000CE024();
  uint64_t result = dlsym(v2, "kMAOptionsBAAOIDSToInclude");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100272708 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000CEA08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000CEA24(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v5 = WeakRetained;
  if (WeakRetained && a2)
  {
    [WeakRetained performAuthorization:*(void *)(a1 + 32) companionLinkClient:*(void *)(a1 + 40) advertisingService:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else
  {
    id v6 = _AKLogSiwa();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_1001949C8(v6);
    }

    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = +[NSError ak_errorWithCode:-7090];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
}

uint64_t sub_1000CEC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    long long v4 = +[LSApplicationWorkspace defaultWorkspace];
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) bundleID];
    [v4 openApplicationWithBundleID:v5];
  }
  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

void sub_1000CF018(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 112));
  _Unwind_Resume(a1);
}

void sub_1000CF074(uint64_t a1)
{
  uint64_t v2 = _AKLogSiwa();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Authorization Rapport Link Client invalidated", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidate];
}

void sub_1000CF0F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _handleStartAuthorizingWithRequest:v9 options:v8 responseHandler:v7];
}

void sub_1000CF180(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _handleAuthorizationDidFinishWithRequest:v9 options:v8 responseHandler:v7];
}

void sub_1000CF20C(uint64_t a1, void *a2, void *a3)
{
  long long v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _handleDidStartServerAuthorizationWithEvent:v6 options:v5];
}

void sub_1000CF284(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  if (v3)
  {
    id v5 = _AKLogSiwa();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100194A7C(v3);
    }

    id v6 = +[NSError ak_errorWithCode:-7069];
    [WeakRetained _callCompletionWithAuthorization:0 error:v6];
  }
  else
  {
    id v6 = a1[4];
    id v7 = [WeakRetained[2] bundleID];
    [v6 setAppBundleID:v7];

    id v9 = a1[5];
    id v8 = a1 + 5;
    uint64_t v10 = [v9 authorizationRequest];
    if (v10
      && (id v11 = (void *)v10,
          [*v8 passwordRequest],
          unsigned __int8 v12 = objc_claimAutoreleasedReturnValue(),
          v12,
          v11,
          v12))
    {
      uint64_t v13 = 3;
    }
    else
    {
      uint64_t v14 = [*v8 authorizationRequest];

      if (v14)
      {
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v15 = [*v8 passwordRequest];

        if (v15)
        {
          uint64_t v13 = 2;
        }
        else
        {
          uint64_t v16 = _AKLogSiwa();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_100194A0C((uint64_t)v8, v16, v17, v18, v19, v20, v21, v22);
          }

          uint64_t v13 = 0;
        }
      }
    }
    [v6 setFlags:v13];
    [WeakRetained setAdvertisingService:v6];
    [v6 activate];
    id v23 = _AKLogSiwa();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Authorization Rapport activated, and AppSignIn is advertising.", (uint8_t *)v24, 2u);
    }
  }
}

void sub_1000CF988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CF9B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v4)
  {
    id v6 = _AKLogSiwa();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100194B7C(v4);
    }
  }
  [WeakRetained _callCompletionWithAuthorization:0 error:v4];
}

void sub_1000CFDA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56);
  id v7 = 0;
  id v3 = +[NSKeyedArchiver archivedDataWithRootObject:v2 requiringSecureCoding:1 error:&v7];
  id v4 = v7;
  if (v3)
  {
    CFStringRef v8 = @"CredentialRequest";
    id v9 = v3;
    id v5 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v6 = _AKLogSiwa();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100194C14();
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    [*(id *)(a1 + 32) _callCompletionWithAuthorization:0 error:v4];
  }
}

uint64_t sub_1000CFEEC(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "set_proxiedAssociatedDomains:", a2);
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1000D02E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * (void)v9), "domain", (void)v13);
        [v4 addObject:v10];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  unsigned __int8 v12 = [v4 allObjects];
  (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
}

void sub_1000D05BC(id a1)
{
  id v1 = objc_alloc_init(AKTTRController);
  uint64_t v2 = qword_100272710;
  qword_100272710 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D0CA0(id a1, NSDictionary *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = _AKLogSystem();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed launch of tap-to-radar with result: %@, error: %@", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t sub_1000D120C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    if (!v4) {
      goto LABEL_7;
    }
    id v5 = *(void (**)(void))(v4 + 16);
  }
  else
  {
    if (!v4) {
      goto LABEL_7;
    }
    id v5 = *(void (**)(void))(v4 + 16);
  }
  v5();
LABEL_7:

  return _objc_release_x2();
}

void sub_1000D1478(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [v7 domain];
  if ([v8 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    id v9 = [v7 code];

    if (v9 == (id)-7052)
    {
      uint64_t v10 = _AKLogSystem();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Upgrade Token requires server UI.", v23, 2u);
      }

      goto LABEL_12;
    }
  }
  else
  {
  }
  if (!v7)
  {
LABEL_12:
    uint64_t v19 = [AKAuthenticationServerResponse alloc];
    uint64_t v20 = [*(id *)(a1 + 32) username];
    uint64_t v21 = [(AKAuthenticationServerResponse *)v19 initWithServerResponse:v6 forAppleID:v20];

    uint64_t v22 = *(void *)(a1 + 40);
    if (v22) {
      (*(void (**)(uint64_t, AKAuthenticationServerResponse *, void))(v22 + 16))(v22, v21, 0);
    }

    goto LABEL_15;
  }
  uint64_t v11 = _AKLogSystem();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_100194EA4((uint64_t)v7, v11, v12, v13, v14, v15, v16, v17);
  }

  uint64_t v18 = *(void *)(a1 + 40);
  if (v18) {
    (*(void (**)(uint64_t, void, id))(v18 + 16))(v18, 0, v7);
  }
LABEL_15:
}

void sub_1000D184C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _AKLogSystem();
  uint64_t v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100194F7C((uint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }

    uint64_t v18 = *(void *)(a1 + 32);
    if (v18)
    {
      uint64_t v19 = *(void (**)(void))(v18 + 16);
LABEL_10:
      v19();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Successful Upgrade Token!", v21, 2u);
    }

    uint64_t v20 = *(void *)(a1 + 32);
    if (v20)
    {
      uint64_t v19 = *(void (**)(void))(v20 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1000D27E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v10 = a4;
  id v5 = [v10 domain];
  if ([v5 isEqualToString:AKAppleIDAuthenticationErrorDomain])
  {
    id v6 = [v10 code];

    if (v6 == (id)-7038)
    {
      [*(id *)(a1 + 32) _showIdentityProviderUIFromResponse:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
      goto LABEL_8;
    }
  }
  else
  {
  }
  unsigned int v7 = objc_msgSend(v10, "ak_isUserCancelError");
  uint64_t v8 = *(void *)(a1 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t, void, void, id))(v8 + 16))(v8, 0, 0, v10);
  }
  else
  {
    id v9 = +[NSError ak_errorWithCode:-7019 underlyingError:v10];
    (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0, 0, v9);
  }
LABEL_8:
}

void sub_1000D2B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000D2C40;
    v7[3] = &unk_100228EB0;
    id v6 = *(void **)(a1 + 32);
    id v8 = *(id *)(a1 + 40);
    [v6 _handleIdentityProviderResponsePayload:a3 completion:v7];
  }
}

uint64_t sub_1000D2C40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D2E9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = a2;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    unsigned int v7 = +[AAFSerialization dictionaryFromObject:a3 ofType:@"application/x-plist"];
    id v8 = [[AKAuthenticationServerResponse alloc] initWithServerResponse:v9 responseBody:v7];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t sub_1000D30F0(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000D70C8(&qword_10026FD50);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v39 = sub_1000D78F8(v10, (uint64_t)qword_1002744A8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting passkey verification.", v13, 2u);
    swift_slowDealloc();
  }

  id v14 = [a1 appProvidedData];
  if (v14)
  {
    uint64_t v15 = v14;
    double v37 = a1;
    uint64_t v38 = v6;
    sub_1000D70C8(&qword_1002705D0);
    uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = *(void **)(v2 + 16);
    id v18 = [v17 requestProvider];
    type metadata accessor for AppleIDPasskeyRequestProvider();
    uint64_t v19 = swift_dynamicCastClass();
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      swift_unknownObjectRetain();
      sub_1000F6140(v16);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v20 setAuthKitBody:isa];
      swift_unknownObjectRelease();

      uint64_t v22 = a2;
      uint64_t v23 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v22, v38);
      unint64_t v24 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      unint64_t v25 = (v8 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v26 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v26 + v24, v9, v23);
      *(void *)(v26 + v25) = v3;
      int v27 = v37;
      *(void *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v37;
      aBlock[4] = sub_1000D79F0;
      aBlock[5] = v26;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001435F8;
      aBlock[3] = &unk_10022B8E0;
      uint64_t v28 = _Block_copy(aBlock);
      swift_retain();
      id v29 = v27;
      swift_release();
      [v17 executeRequestWithCompletion:v28];
      _Block_release(v28);
      return swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unsigned int v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to verify passkey. Request provider type mismatch.", v36, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    uint64_t v41 = -12007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v41 = aBlock[0];
  }
  else
  {
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to verify passkey. Missing required parameters.", v33, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    uint64_t v41 = -120012;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v41 = aBlock[0];
  }
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1000D3854(void *a1, void *aBlock, uint64_t a3)
{
  v3[3] = a1;
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  return _swift_task_switch(sub_1000D38E4, 0, 0);
}

uint64_t sub_1000D38E4()
{
  id v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = sub_1000D70C8((uint64_t *)&unk_10026FD40);
  void *v2 = v0;
  v2[1] = sub_1000D39EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000021, 0x80000001001C2930, sub_1000D78CC, v1, v3);
}

uint64_t sub_1000D39EC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000D3BD0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000D3B08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D3B08()
{
  swift_release();
  sub_1000D70C8(&qword_1002705D0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000D3BD0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, void, void *))v2)[2](v2, 0, v1);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000D3C8C()
{
  return _swift_deallocClassInstance(v0, 32, 7);
}

void sub_1000D3CCC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12 = sub_1000D70C8(&qword_10026FD50);
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  __chkstk_darwin(v12);
  uint64_t v59 = v14;
  if (a3 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v16 = [self dictionaryFromObject:isa ofType:@"application/json"];
  swift_unknownObjectRelease();
  if (!v16) {
    goto LABEL_10;
  }
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v63 + 1) = v18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v17 + 16) && (unint64_t v19 = sub_10014A078((uint64_t)&v65), (v20 & 1) != 0))
  {
    sub_1000D7C68(*(void *)(v17 + 56) + 32 * v19, (uint64_t)&v63);
  }
  else
  {
    long long v63 = 0u;
    long long v64 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000D7ADC((uint64_t)&v65);
  uint64_t v21 = *((void *)&v64 + 1);
  sub_1000D7CD4((uint64_t)&v63, &qword_10026FD58);
  if (v21)
  {
LABEL_10:
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_1002744A8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_15;
    }
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    uint64_t v26 = "Failed to verify passkey. Missing response.";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, v25, 2u);
    swift_slowDealloc();
LABEL_15:

    type metadata accessor for AppleIDPasskeyError(0);
    uint64_t v27 = -12007;
LABEL_16:
    *(void *)&long long v63 = v27;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *(void *)&long long v63 = v65;
    CheckedContinuation.resume(throwing:)();
    return;
  }
  uint64_t v58 = a7;
  if (!a1)
  {
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    goto LABEL_32;
  }
  id v28 = [a1 allHeaderFields];
  uint64_t v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v61 + 1) = v30;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v29 + 16) && (unint64_t v31 = sub_10014A078((uint64_t)&v65), (v32 & 1) != 0))
  {
    sub_1000D7C68(*(void *)(v29 + 56) + 32 * v31, (uint64_t)&v61);
  }
  else
  {
    long long v61 = 0u;
    long long v62 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000D7ADC((uint64_t)&v65);
  if (!*((void *)&v62 + 1))
  {
    uint64_t v57 = a6;
    id v33 = [a1 allHeaderFields];
    uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v35 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v60 = v35;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v34 + 16))
    {
      unint64_t v36 = sub_10014A078((uint64_t)&v65);
      if (v37)
      {
        sub_1000D7C68(*(void *)(v34 + 56) + 32 * v36, (uint64_t)&v63);
      }
      else
      {
        long long v63 = 0u;
        long long v64 = 0u;
      }
    }
    else
    {
      long long v63 = 0u;
      long long v64 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1000D7ADC((uint64_t)&v65);
LABEL_32:
    sub_1000D7CD4((uint64_t)&v61, &qword_10026FD58);
    if (!*((void *)&v64 + 1)) {
      goto LABEL_24;
    }
    goto LABEL_33;
  }
  sub_1000D7CC4(&v61, &v63);
  if (!*((void *)&v64 + 1))
  {
LABEL_24:
    sub_1000D7CD4((uint64_t)&v63, &qword_10026FD58);
LABEL_38:
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_1000D78F8(v52, (uint64_t)qword_1002744A8);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to verify passkeys. Missing GS token.", v55, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    uint64_t v27 = -120014;
    goto LABEL_16;
  }
LABEL_33:
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_38;
  }
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v39 = [self tokenWithBase64String:v38];

  if (!v39)
  {
LABEL_46:
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_1000D78F8(v56, (uint64_t)qword_1002744A8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_15;
    }
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    uint64_t v26 = "Failed to verify passkeys. Base64 decoding GS token failed.";
    goto LABEL_14;
  }
  id v40 = [v39 stringValue];
  if (!v40)
  {
    uint64_t v41 = v39;
LABEL_45:

    goto LABEL_46;
  }
  uint64_t v41 = v40;
  id v42 = [v39 name];
  if (!v42)
  {

    goto LABEL_45;
  }
  uint64_t v43 = v42;
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v45;

  sub_1000D70C8((uint64_t *)&unk_10026FD60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001B81D0;
  uint64_t v47 = v57;
  *(void *)(inited + 32) = v44;
  *(void *)(inited + 40) = v47;
  *(void *)(inited + 48) = v41;
  unint64_t v48 = sub_100143144(inited);
  uint64_t v49 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))((char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v12);
  unint64_t v50 = (*(unsigned __int8 *)(v49 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v48;
  (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v51 + v50, (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  sub_1000D4710(v58, a1, (void (*)(void))sub_1000D7C00, v51);
  swift_release();
}

uint64_t sub_1000D44FC(uint64_t a1)
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_1002744A8);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_1000D7D70();
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    sub_100158C6C(v6, v8, (uint64_t *)&v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished passkey verification with result %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v10 = sub_1000F68B0(a1);
  sub_1000D70C8(&qword_10026FD50);
  return CheckedContinuation.resume(returning:)();
}

void sub_1000D4710(void *a1, void *a2, void (*a3)(void), uint64_t a4)
{
  sub_1000D70C8((uint64_t *)&unk_100270030);
  ((void (*)(void))__chkstk_darwin)();
  v109 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v110 = *(void *)(v10 - 8);
  uint64_t v111 = v10;
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v13 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v108 = (char *)&v102 - v14;
  uint64_t v15 = *(void **)(v4 + 24);
  NSString v16 = [a1 altDSID];
  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v112 = [v15 authKitAccountWithAltDSID:v16];

  if (v112)
  {
    if (objc_msgSend(v15, "edpStateValueForAccount:") == (id)1)
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      uint64_t v106 = sub_1000D78F8(v17, (uint64_t)qword_1002744A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        char v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "_isEDPEligible: YES", v20, 2u);
        swift_slowDealloc();
      }

      if (a2)
      {
        id v21 = [a2 allHeaderFields];
        uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        *(void *)&long long v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v120 + 1) = v23;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v22 + 16) && (unint64_t v24 = sub_10014A078((uint64_t)&v114), (v25 & 1) != 0))
        {
          sub_1000D7C68(*(void *)(v22 + 56) + 32 * v24, (uint64_t)&v120);
        }
        else
        {
          long long v120 = 0u;
          long long v121 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_1000D7ADC((uint64_t)&v114);
        if (*((void *)&v121 + 1))
        {
          sub_1000D7CC4(&v120, &v122);
          if (!*((void *)&v123 + 1))
          {
LABEL_29:
            sub_1000D7CD4((uint64_t)&v122, &qword_10026FD58);
            goto LABEL_43;
          }
LABEL_37:
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_43:
            uint64_t v57 = Logger.logObject.getter();
            os_log_type_t v58 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v57, v58))
            {
              uint64_t v59 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v59 = 0;
              Swift::String v60 = "Did not receive wscUUID in passkey verification response";
LABEL_68:
              _os_log_impl((void *)&_mh_execute_header, v57, v58, v60, v59, 2u);
              swift_slowDealloc();
              goto LABEL_69;
            }
            goto LABEL_69;
          }
          uint64_t v47 = v114;
          unint64_t v46 = v115;
          swift_bridgeObjectRetain_n();
          unint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.debug.getter();
          BOOL v50 = os_log_type_enabled(v48, v49);
          uint64_t v103 = v47;
          if (v50)
          {
            v107 = a3;
            uint64_t v51 = swift_slowAlloc();
            uint64_t v105 = a4;
            uint64_t v52 = (uint8_t *)v51;
            uint64_t v114 = swift_slowAlloc();
            *(_DWORD *)uint64_t v52 = 136315138;
            long long v102 = v52 + 4;
            swift_bridgeObjectRetain();
            *(void *)&long long v122 = sub_100158C6C(v47, v46, &v114);
            a3 = v107;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "Received wscUUID in passkey verification response - %s", v52, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            a4 = v105;
            swift_slowDealloc();

            unint64_t v104 = v46;
            if (a2) {
              goto LABEL_40;
            }
          }
          else
          {

            swift_bridgeObjectRelease_n();
            unint64_t v104 = v46;
            if (a2)
            {
LABEL_40:
              id v53 = [a2 allHeaderFields];
              uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              *(void *)&long long v120 = 1702125892;
              *((void *)&v120 + 1) = 0xE400000000000000;
              AnyHashable.init<A>(_:)();
              if (*(void *)(v54 + 16) && (unint64_t v55 = sub_10014A078((uint64_t)&v114), (v56 & 1) != 0))
              {
                sub_1000D7C68(*(void *)(v54 + 56) + 32 * v55, (uint64_t)&v120);
              }
              else
              {
                long long v120 = 0u;
                long long v121 = 0u;
              }
              swift_bridgeObjectRelease();
              sub_1000D7ADC((uint64_t)&v114);
              if (*((void *)&v121 + 1))
              {
                sub_1000D7CC4(&v120, &v122);
                if (!*((void *)&v123 + 1))
                {
LABEL_50:
                  swift_bridgeObjectRelease();
                  long long v61 = &qword_10026FD58;
                  long long v62 = (char *)&v122;
LABEL_65:
                  sub_1000D7CD4((uint64_t)v62, v61);
LABEL_66:
                  uint64_t v57 = Logger.logObject.getter();
                  os_log_type_t v58 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v57, v58))
                  {
                    uint64_t v59 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)uint64_t v59 = 0;
                    Swift::String v60 = "Missing/unparsable Date in Response";
                    goto LABEL_68;
                  }
LABEL_69:

                  a3();
                  return;
                }
LABEL_57:
                if ((swift_dynamicCast() & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_66;
                }
                uint64_t v67 = v114;
                unint64_t v68 = v115;
                id v69 = self;
                NSString v70 = String._bridgeToObjectiveC()();
                id v71 = objc_msgSend(v69, "ak_dateFromPasskeyVerificationDateString:", v70);

                if (v71)
                {
                  uint64_t v105 = v67;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v73 = v110;
                  uint64_t v72 = v111;
                  double v74 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
                  unint64_t v75 = v68;
                  uint64_t v76 = v109;
                  v74(v109, v13, v111);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v76, 0, 1, v72);
                  uint64_t v77 = v73;
                  unsigned int v78 = v76;
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v76, 1, v72) != 1)
                  {
                    v74(v108, v76, v72);
                    swift_bridgeObjectRetain();
                    v79 = Logger.logObject.getter();
                    os_log_type_t v80 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v79, v80))
                    {
                      v107 = a3;
                      v81 = (uint8_t *)swift_slowAlloc();
                      uint64_t v114 = swift_slowAlloc();
                      *(_DWORD *)v81 = 136315138;
                      swift_bridgeObjectRetain();
                      *(void *)&long long v122 = sub_100158C6C(v105, v75, &v114);
                      a3 = v107;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease_n();
                      _os_log_impl((void *)&_mh_execute_header, v79, v80, "HTTP Date from passkey verification response - %s", v81, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                    }
                    uint64_t v82 = v103;
                    sub_1000D70C8(&qword_10026FD70);
                    uint64_t inited = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_1001B81D0;
                    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    *(void *)(inited + 40) = v84;
                    sub_1000D70C8(&qword_10026FD78);
                    uint64_t v85 = swift_initStackObject();
                    *(_OWORD *)(v85 + 16) = xmmword_1001B81E0;
                    *(void *)(v85 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    *(void *)(v85 + 40) = v86;
                    *(void *)(v85 + 72) = &type metadata for String;
                    unint64_t v87 = v104;
                    *(void *)(v85 + 48) = v82;
                    *(void *)(v85 + 56) = v87;
                    *(void *)(v85 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    *(void *)(v85 + 88) = v88;
                    unsigned int v89 = v108;
                    Date.timeIntervalSince1970.getter();
                    *(void *)(v85 + 120) = &type metadata for Double;
                    *(void *)(v85 + 96) = v90;
                    *(void *)(v85 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    *(void *)(v85 + 136) = v91;
                    *(void *)(v85 + 168) = &type metadata for Int;
                    *(void *)(v85 + 144) = 10;
                    *(void *)(inited + 48) = sub_100143000(v85);
                    unint64_t v92 = sub_100143138(inited);
                    sub_1000F64F8(v92);
                    swift_bridgeObjectRelease();
                    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    id v94 = [self contextFromSRPServerResponseWithShorterTTL:isa];

                    uint64_t v95 = v111;
                    if (v94)
                    {
                      id v96 = [self sharedInstance];
                      uint64_t v97 = swift_allocObject();
                      *(void *)(v97 + 16) = a3;
                      *(void *)(v97 + 24) = a4;
                      v118 = sub_1000D7D68;
                      uint64_t v119 = v97;
                      uint64_t v114 = (uint64_t)_NSConcreteStackBlock;
                      uint64_t v115 = 1107296256;
                      v116 = sub_1000D59FC;
                      v117 = &unk_10022B958;
                      v98 = _Block_copy(&v114);
                      swift_retain();
                      swift_release();
                      [v96 saveContext:v94 completion:v98];
                      _Block_release(v98);
                    }
                    else
                    {
                      v99 = Logger.logObject.getter();
                      os_log_type_t v100 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v99, v100))
                      {
                        id v101 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)id v101 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v99, v100, "There is no web session auth to save.", v101, 2u);
                        swift_slowDealloc();
                      }

                      a3();
                    }
                    (*(void (**)(char *, uint64_t))(v110 + 8))(v89, v95);
                    return;
                  }
                }
                else
                {
                  unsigned int v78 = v109;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v109, 1, 1, v111);
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                long long v61 = (uint64_t *)&unk_100270030;
                long long v62 = v78;
                goto LABEL_65;
              }
              id v63 = [a2 allHeaderFields];
              uint64_t v64 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              v113._countAndFlagsBits = 1702125924;
              v113._object = (void *)0xE400000000000000;
              AnyHashable.init<A>(_:)();
              if (*(void *)(v64 + 16) && (unint64_t v65 = sub_10014A078((uint64_t)&v114), (v66 & 1) != 0))
              {
                sub_1000D7C68(*(void *)(v64 + 56) + 32 * v65, (uint64_t)&v122);
              }
              else
              {
                long long v122 = 0u;
                long long v123 = 0u;
              }
              swift_bridgeObjectRelease();
              sub_1000D7ADC((uint64_t)&v114);
LABEL_56:
              sub_1000D7CD4((uint64_t)&v120, &qword_10026FD58);
              if (!*((void *)&v123 + 1)) {
                goto LABEL_50;
              }
              goto LABEL_57;
            }
          }
          long long v120 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          long long v123 = 0u;
          goto LABEL_56;
        }
        id v41 = [a2 allHeaderFields];
        uint64_t v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::String v43 = String.lowercased()();
        swift_bridgeObjectRelease();
        Swift::String v113 = v43;
        AnyHashable.init<A>(_:)();
        if (*(void *)(v42 + 16) && (unint64_t v44 = sub_10014A078((uint64_t)&v114), (v45 & 1) != 0))
        {
          sub_1000D7C68(*(void *)(v42 + 56) + 32 * v44, (uint64_t)&v122);
        }
        else
        {
          long long v122 = 0u;
          long long v123 = 0u;
        }
        swift_bridgeObjectRelease();
        sub_1000D7ADC((uint64_t)&v114);
      }
      else
      {
        long long v120 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v123 = 0u;
      }
      sub_1000D7CD4((uint64_t)&v120, &qword_10026FD58);
      if (!*((void *)&v123 + 1)) {
        goto LABEL_29;
      }
      goto LABEL_37;
    }
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_1000D78F8(v36, (uint64_t)qword_1002744A8);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "_isEDPEligible: NO", v39, 2u);
      swift_slowDealloc();
    }

    a3();
    id v40 = v112;
  }
  else
  {
    v107 = a3;
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_1000D78F8(v26, (uint64_t)qword_1002744A8);
    id v27 = a1;
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v105 = a4;
      unint64_t v31 = (uint8_t *)v30;
      uint64_t v114 = swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 136315138;
      id v112 = v31 + 4;
      id v32 = [v27 altDSID];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      *(void *)&long long v122 = sub_100158C6C(v33, v35, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing authkit account for altDSID %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v107();
  }
}

uint64_t sub_1000D5794(uint64_t a1, uint64_t (*a2)(void))
{
  if (a1)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1000D78F8(v3, (uint64_t)qword_1002744A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5))
    {
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_12;
    }
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v7 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Saved web session details. Error - %@.", v6, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_10;
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1000D78F8(v8, (uint64_t)qword_1002744A8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v9, "Saved web session details successfully.", v10, 2u);
LABEL_10:
    swift_slowDealloc();
  }
LABEL_12:

  return a2();
}

void sub_1000D59FC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t variable initialization expression of SignInWithAppleDaemonService.client()
{
  return 0;
}

uint64_t variable initialization expression of ProximityAuthFlowController.authCompletion()
{
  return 0;
}

uint64_t variable initialization expression of ProximityAuthFlowController.pairingInProgress()
{
  return 0;
}

uint64_t type metadata accessor for AppleIDPasskeyVerificationProvider()
{
  return self;
}

void type metadata accessor for SignInWithAppleError(uint64_t a1)
{
}

void type metadata accessor for AppleIDPasskeyError(uint64_t a1)
{
}

uint64_t sub_1000D5AD0(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FCE0, type metadata accessor for AppleIDPasskeyError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000D5B3C(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FCE0, type metadata accessor for AppleIDPasskeyError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000D5BAC(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000D5C18@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1000D5C20(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FCA0, type metadata accessor for SignInWithAppleError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000D5C8C(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FCA0, type metadata accessor for SignInWithAppleError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000D5CF8(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000D5D64(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FE38, type metadata accessor for DeviceListError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000D5DD0(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FE38, type metadata accessor for DeviceListError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000D5E3C(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000D5EA8()
{
  return *v0;
}

uint64_t sub_1000D5EB0(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FE00, type metadata accessor for PrivateEmailError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000D5F1C(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FE00, type metadata accessor for PrivateEmailError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000D5F88(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_1000D5FF8(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000D6000(uint64_t a1, uint64_t a2)
{
  return sub_1000D7560(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000D6018(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000D6090(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000D6110@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000D6154()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000D6164(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000D61D0(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000D623C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000D62CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D634C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000D635C(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000D63C8(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000D6434(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000D64C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000D6540()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000D6550(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000D65BC(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000D6628(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000D66B8()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000D66F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void *sub_1000D676C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1000D677C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000D6788()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000D6798(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000D6804(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000D6870(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000D6900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000D697C()
{
  return Hasher._finalize()();
}

void *sub_1000D69DC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000D69E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000D6A6C()
{
  return sub_1000D6AFC(&qword_10026FC80, type metadata accessor for AppleIDPasskeyError);
}

uint64_t sub_1000D6AB4()
{
  return sub_1000D6AFC(&qword_10026FC88, type metadata accessor for AppleIDPasskeyError);
}

uint64_t sub_1000D6AFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D6B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000D6BC8()
{
  return sub_1000D6AFC(&qword_10026FC90, type metadata accessor for SignInWithAppleError);
}

uint64_t sub_1000D6C10()
{
  return sub_1000D6AFC(&qword_10026FC98, type metadata accessor for SignInWithAppleError);
}

uint64_t sub_1000D6C58()
{
  return sub_1000D6AFC(&qword_10026FCA0, type metadata accessor for SignInWithAppleError);
}

uint64_t sub_1000D6CA0()
{
  return sub_1000D6AFC(&qword_10026FCA8, type metadata accessor for SignInWithAppleError);
}

uint64_t sub_1000D6CE8()
{
  return sub_1000D6AFC(&qword_10026FCB0, type metadata accessor for SignInWithAppleError);
}

uint64_t sub_1000D6D30()
{
  return sub_1000D6AFC(&qword_10026FCB8, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_1000D6D8C()
{
  return sub_1000D6AFC(&qword_10026FCC0, _s3__C4CodeOMa_0);
}

unint64_t sub_1000D6DD8()
{
  unint64_t result = qword_10026FCC8;
  if (!qword_10026FCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10026FCC8);
  }
  return result;
}

uint64_t sub_1000D6E2C()
{
  return sub_1000D6AFC((unint64_t *)&unk_10026FCD0, _s3__C4CodeOMa_0);
}

uint64_t sub_1000D6E74()
{
  return sub_1000D6AFC((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);
}

uint64_t sub_1000D6EBC()
{
  return sub_1000D6AFC(&qword_10026FCE0, type metadata accessor for AppleIDPasskeyError);
}

uint64_t sub_1000D6F04()
{
  return sub_1000D6AFC(&qword_10026FCE8, type metadata accessor for AppleIDPasskeyError);
}

uint64_t sub_1000D6F4C()
{
  return sub_1000D6AFC(&qword_10026FCF0, type metadata accessor for AppleIDPasskeyError);
}

uint64_t sub_1000D6F94()
{
  return sub_1000D6AFC(&qword_10026FCF8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1000D6FF0()
{
  return sub_1000D6AFC(&qword_10026FD00, type metadata accessor for Code);
}

uint64_t sub_1000D7038()
{
  return sub_1000D6AFC(&qword_10026FD08, type metadata accessor for Code);
}

uint64_t sub_1000D7080()
{
  return sub_1000D6AFC((unint64_t *)&qword_10026FD10, type metadata accessor for AppleIDPasskeyError);
}

uint64_t sub_1000D70C8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000D710C()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D7154()
{
  uint64_t v2 = (void *)v0[2];
  char v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  id v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_10026FD20 + dword_10026FD20);
  return v6(v2, v3, v4);
}

uint64_t sub_1000D7208()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000D72FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000D7380(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000D7394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000D7418@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000D7460@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000D748C(uint64_t a1)
{
  uint64_t v2 = sub_1000D6AFC(&qword_10026FE70, type metadata accessor for Scope);
  uint64_t v3 = sub_1000D6AFC(&qword_10026FE78, type metadata accessor for Scope);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000D7548(uint64_t a1, uint64_t a2)
{
  return sub_1000D7560(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000D7560(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000D75A4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D75F8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000D766C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000D76FC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  char v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100271F58 + dword_100271F58);
  return v6(v2, v3, v4);
}

uint64_t sub_1000D77C0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D7800(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000D78CC(uint64_t a1)
{
  return sub_1000D30F0(*(void **)(v1 + 24), a1);
}

uint64_t sub_1000D78F8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000D7930()
{
  uint64_t v1 = sub_1000D70C8(&qword_10026FD50);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000D79F0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(sub_1000D70C8(&qword_10026FD50) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v4 + v11);
  uint64_t v13 = *(void **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1000D3CCC(a1, a2, a3, a4, v4 + v10, v12, v13);
}

uint64_t sub_1000D7AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D7AD4()
{
  return swift_release();
}

uint64_t sub_1000D7ADC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D7B30()
{
  uint64_t v1 = sub_1000D70C8(&qword_10026FD50);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D7C00()
{
  sub_1000D70C8(&qword_10026FD50);
  uint64_t v1 = *(void *)(v0 + 16);

  return sub_1000D44FC(v1);
}

uint64_t sub_1000D7C68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1000D7CC4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000D7CD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000D70C8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000D7D30()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D7D68(uint64_t a1)
{
  return sub_1000D5794(a1, *(uint64_t (**)(void))(v1 + 16));
}

unint64_t sub_1000D7D70()
{
  unint64_t result = qword_100270F30;
  if (!qword_100270F30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100270F30);
  }
  return result;
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for PrivateEmailError(uint64_t a1)
{
}

void type metadata accessor for AKAppleIDSecurityLevel(uint64_t a1)
{
}

void type metadata accessor for DeviceListError(uint64_t a1)
{
}

__n128 sub_1000D7E00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000D7E10(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000D7E30(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t sub_1000D7E6C()
{
  return sub_1000D6AFC(&qword_10026FDC8, type metadata accessor for DeviceListError);
}

uint64_t sub_1000D7EB4()
{
  return sub_1000D6AFC(&qword_10026FDD0, type metadata accessor for DeviceListError);
}

uint64_t sub_1000D7EFC()
{
  return sub_1000D6AFC(&qword_10026FDD8, type metadata accessor for PrivateEmailError);
}

uint64_t sub_1000D7F44()
{
  return sub_1000D6AFC(&qword_10026FDE0, type metadata accessor for PrivateEmailError);
}

uint64_t sub_1000D7F8C()
{
  return sub_1000D6AFC(&qword_10026FDE8, type metadata accessor for Scope);
}

uint64_t sub_1000D7FD4()
{
  return sub_1000D6AFC(&qword_10026FDF0, type metadata accessor for Scope);
}

uint64_t sub_1000D801C()
{
  return sub_1000D6AFC(&qword_10026FDF8, type metadata accessor for Scope);
}

uint64_t sub_1000D8064()
{
  return sub_1000D6AFC(&qword_10026FE00, type metadata accessor for PrivateEmailError);
}

uint64_t sub_1000D80AC()
{
  return sub_1000D6AFC(&qword_10026FE08, type metadata accessor for PrivateEmailError);
}

uint64_t sub_1000D80F4()
{
  return sub_1000D6AFC(&qword_10026FE10, type metadata accessor for PrivateEmailError);
}

uint64_t sub_1000D813C()
{
  return sub_1000D6AFC(&qword_10026FE18, _s3__C4CodeOMa_2);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_1000D8198()
{
  return sub_1000D6AFC(&qword_10026FE20, _s3__C4CodeOMa_2);
}

uint64_t sub_1000D81E0()
{
  return sub_1000D6AFC(&qword_10026FE28, _s3__C4CodeOMa_2);
}

uint64_t sub_1000D8228()
{
  return sub_1000D6AFC((unint64_t *)&qword_10026FE30, type metadata accessor for PrivateEmailError);
}

uint64_t sub_1000D8270()
{
  return sub_1000D6AFC(&qword_10026FE38, type metadata accessor for DeviceListError);
}

uint64_t sub_1000D82B8()
{
  return sub_1000D6AFC(&qword_10026FE40, type metadata accessor for DeviceListError);
}

uint64_t sub_1000D8300()
{
  return sub_1000D6AFC(&qword_10026FE48, type metadata accessor for DeviceListError);
}

uint64_t sub_1000D8348()
{
  return sub_1000D6AFC(&qword_10026FE50, _s3__C4CodeOMa_1);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

void sub_1000D83A4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000D83EC()
{
  return sub_1000D6AFC(&qword_10026FE58, _s3__C4CodeOMa_1);
}

uint64_t sub_1000D8434()
{
  return sub_1000D6AFC(&qword_10026FE60, _s3__C4CodeOMa_1);
}

uint64_t sub_1000D847C()
{
  return sub_1000D6AFC((unint64_t *)&qword_10026FE68, type metadata accessor for DeviceListError);
}

id sub_1000D84FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v8 = 0;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for AccountSharingRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v7, "validateResponseData:error:", isa, &v8);

  if (v4) {
    return v8;
  }
  id v6 = v8;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return (id)swift_willThrow();
}

id sub_1000D897C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountSharingRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountSharingRequestProvider()
{
  return self;
}

uint64_t sub_1000D89D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000D89E8(a1, a2);
  }
  return a1;
}

uint64_t sub_1000D89E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000D8C78(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a1;
  void v4[3] = a4;
  void v4[4] = _Block_copy(aBlock);
  unint64_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_10026FF70 + dword_10026FF70);
  id v8 = a1;
  a4;
  uint64_t v9 = (void *)swift_task_alloc();
  void v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000D8D54;
  return v11(a2);
}

uint64_t sub_1000D8D54(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  objc_super v7 = *(void **)(*v2 + 24);
  id v8 = *(void **)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc();

  uint64_t v10 = *(void *)(v5 + 32);
  if (v3)
  {
    unint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 32));
  uint64_t v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

id ProximityAuthFlowController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyEnrollController()
{
  return self;
}

uint64_t sub_1000D90C4()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D910C()
{
  objc_super v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  unsigned int v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000D7208;
  objc_super v7 = (uint64_t (*)(void *, uint64_t, void *, void *))((char *)&dword_10026FF60 + dword_10026FF60);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1000D91D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_1000D929C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D84E8;
  id v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000D9368(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return _swift_task_switch(sub_1000D9388, 0, 0);
}

uint64_t sub_1000D9388()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[17] = sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Start passkey registration.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[16];

  id v7 = *(void **)(v6 + OBJC_IVAR___AKAppleIDPasskeyEnrollController_registrationProvider);
  v0[2] = v0;
  v0[7] = v0 + 19;
  v0[3] = sub_1000D9554;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001394A0;
  v0[13] = &unk_10022BBD8;
  v0[14] = v8;
  [v7 performRegistrationRequestWith:v5 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000D9554()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_1000D9680;
  }
  else {
    uint64_t v2 = sub_1000D9664;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D9664()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 152));
}

uint64_t sub_1000D9680()
{
  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed passkey registration with error: %@.", v3, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6(0);
}

uint64_t sub_1000D983C(uint64_t a1)
{
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = v1;
  return _swift_task_switch(sub_1000D985C, 0, 0);
}

uint64_t sub_1000D985C()
{
  uint64_t v18 = v0;
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = type metadata accessor for Logger();
  v0[23] = sub_1000D78F8(v2, (uint64_t)qword_1002744A8);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  id v7 = (void *)v0[21];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v7 relyingPartyIdentifier];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    v0[20] = sub_100158C6C(v10, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Setting up AppleID passkey for %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v13 = v0[21];
  uint64_t v14 = *(void **)(v0[22] + OBJC_IVAR___AKAppleIDPasskeyEnrollController_credentialProvider);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000D9B18;
  uint64_t v15 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000D91D0;
  v0[13] = &unk_10022BBC0;
  v0[14] = v15;
  [v14 createCredentialWith:v13 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000D9B18()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_1000DA1B8;
  }
  else {
    uint64_t v2 = sub_1000D9C28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D9C28()
{
  uint64_t v1 = (void *)v0[15];
  v0[25] = v1;
  uint64_t v2 = v1;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 138412290;
    v0[19] = v2;
    BOOL v6 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully created credential - %@", v5, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v3 = v2;
  }

  id v7 = (void *)swift_task_alloc();
  v0[26] = v7;
  *id v7 = v0;
  v7[1] = sub_1000D9E14;
  uint64_t v8 = v0[22];
  v7[15] = v2;
  uint8_t v7[16] = v8;
  return _swift_task_switch(sub_1000D9388, 0, 0);
}

uint64_t sub_1000D9E14(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_1000D9FA8;
  }
  else
  {
    *(unsigned char *)(v4 + 224) = a1 & 1;
    os_log_type_t v5 = sub_1000D9F40;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D9F40()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 224);
  return v1(v2);
}

uint64_t sub_1000D9FA8()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)id v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create passkey %@.", v3, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  *(void *)(v0 + 136) = -120011;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_errorRelease();
  BOOL v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6(0);
}

uint64_t sub_1000DA1B8()
{
  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)id v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create passkey %@.", v3, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  v0[17] = -120011;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_errorRelease();
  BOOL v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

uint64_t sub_1000DA3C4()
{
  *(void *)(v1 + 136) = v0;
  return _swift_task_switch(sub_1000DA3E4, 0, 0);
}

uint64_t sub_1000DA3E4()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Start passkey challenge.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[17];

  BOOL v6 = *(void **)(v5 + OBJC_IVAR___AKAppleIDPasskeyEnrollController_challengeProvider);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000DA5AC;
  uint64_t v7 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000D91D0;
  v0[13] = &unk_10022BBA8;
  v0[14] = v7;
  [v6 performChallengeRequestWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000DA5AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    os_log_type_t v2 = sub_1000DAB34;
  }
  else {
    os_log_type_t v2 = sub_1000DA6BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DA6BC()
{
  uint64_t v1 = v0[15];
  v0[20] = v1;
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished passkey challenge.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[21] = v5;
  void *v5 = v0;
  v5[1] = sub_1000DA7E8;
  uint64_t v6 = v0[17];
  v5[21] = v1;
  v5[22] = v6;
  return _swift_task_switch(sub_1000D985C, 0, 0);
}

uint64_t sub_1000DA7E8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000DA97C;
  }
  else
  {
    *(unsigned char *)(v4 + 184) = a1 & 1;
    uint64_t v5 = sub_1000DA914;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DA914()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 184);
  return v1(v2);
}

uint64_t sub_1000DA97C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create passkey challenge %@.", v3, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6(0);
}

uint64_t sub_1000DAB34()
{
  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create passkey challenge %@.", v3, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6(0);
}

uint64_t sub_1000DACE8(char a1)
{
  *(void *)(v2 + 136) = v1;
  *(unsigned char *)(v2 + 161) = a1;
  return _swift_task_switch(sub_1000DAD0C, 0, 0);
}

uint64_t sub_1000DAD0C()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 136) + OBJC_IVAR___AKAppleIDPasskeyEnrollController_passkeyValidator);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 161);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 160;
  *(void *)(v0 + 24) = sub_1000DAE1C;
  uint64_t v3 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1001394A0;
  *(void *)(v0 + 104) = &unk_10022BB90;
  *(void *)(v0 + 112) = v3;
  [v1 canCreatePasskeyWithForced:v2 completionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1000DAE1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_1000DB190;
  }
  else {
    uint64_t v2 = sub_1000DAF2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DAF2C()
{
  if (*(unsigned char *)(v0 + 160) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1000DB088;
    v1[17] = *(void *)(v0 + 136);
    return _swift_task_switch(sub_1000DA3E4, 0, 0);
  }
  else
  {
    type metadata accessor for AppleIDPasskeyError(0);
    *(void *)(v0 + 128) = -12002;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2(0);
  }
}

uint64_t sub_1000DB088(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t sub_1000DB190()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

id sub_1000DB200(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D70C8((uint64_t *)&unk_10026FF90);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self sharedBag];
  if (result)
  {
    unint64_t v12 = result;
    id v13 = [result startPasskeyRegistrationURL];

    if (v13)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
      {
        sub_1000DBBF8((uint64_t)v10);
        id v14 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
        NSString v15 = [a1 altDSID];
        if (!v15)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v14 setAltDSID:v15];

        id v16 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyRequestProvider()) initWithContext:v14 urlBagKey:AKURLBagKeyStartPasskeyRegistration];
        [v16 setAuthenticatedRequest:1];
        [v16 setClient:a2];
        id v17 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v16];
        id v18 = [self sharedInstance];
        uint64_t v19 = (objc_class *)type metadata accessor for AppleIDPasskeyChallengeProvider();
        char v20 = (char *)objc_allocWithZone(v19);
        *(void *)&v20[OBJC_IVAR___AKAppleIDPasskeyChallengeProvider_serviceController] = v17;
        *(void *)&v20[OBJC_IVAR___AKAppleIDPasskeyChallengeProvider_accountManager] = v18;
        v28.receiver = v20;
        v28.super_class = v19;
        id v21 = objc_msgSendSuper2(&v28, "init");

        return v21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    }
    sub_1000DBBF8((uint64_t)v10);
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_1002744A8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)char v25 = 138412290;
      type metadata accessor for AppleIDPasskeyError(0);
      uint64_t v29 = -120013;
      sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000DBBA0();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v30 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing passkey start registration url %@.", v25, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  __break(1u);
  return result;
}

id sub_1000DB6D0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D70C8((uint64_t *)&unk_10026FF90);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self sharedBag];
  if (result)
  {
    unint64_t v12 = result;
    id v13 = [result finishPasskeyRegistrationURL];

    if (v13)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
      {
        sub_1000DBBF8((uint64_t)v10);
        id v14 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
        NSString v15 = [a1 altDSID];
        if (!v15)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v14 setAltDSID:v15];

        id v16 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyRequestProvider()) initWithContext:v14 urlBagKey:AKURLBagKeyFinishPasskeyRegistration];
        [v16 setAuthenticatedRequest:1];
        [v16 setClient:a2];
        id v17 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v16];
        id v18 = [self sharedInstance];
        uint64_t v19 = (objc_class *)type metadata accessor for AppleIDPasskeyRegistrationProvider();
        char v20 = (char *)objc_allocWithZone(v19);
        *(void *)&v20[OBJC_IVAR___AKAppleIDPasskeyRegistrationProvider_serviceController] = v17;
        *(void *)&v20[OBJC_IVAR___AKAppleIDPasskeyRegistrationProvider_accountManager] = v18;
        v28.receiver = v20;
        v28.super_class = v19;
        id v21 = objc_msgSendSuper2(&v28, "init");

        return v21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    }
    sub_1000DBBF8((uint64_t)v10);
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_1002744A8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)char v25 = 138412290;
      type metadata accessor for AppleIDPasskeyError(0);
      uint64_t v29 = -120013;
      sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000DBBA0();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v30 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing passkey finish registration url %@.", v25, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000DBBA0()
{
  unint64_t result = qword_10026FD10;
  if (!qword_10026FD10)
  {
    type metadata accessor for AppleIDPasskeyError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10026FD10);
  }
  return result;
}

uint64_t sub_1000DBBF8(uint64_t a1)
{
  uint64_t v2 = sub_1000D70C8((uint64_t *)&unk_10026FF90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DBD44(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 32) = a1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_1000DBDF0;
  v3[2] = v1;
  return _swift_task_switch(sub_1000DC3C4, 0, 0);
}

uint64_t sub_1000DBDF0(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6(0);
  }
  else
  {
    *(unsigned char *)(v4 + 33) = a1 & 1;
    return _swift_task_switch(sub_1000DBF44, 0, 0);
  }
}

uint64_t sub_1000DBF44()
{
  if (*(unsigned char *)(v0 + 33) != 1)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000D78F8(v12, (uint64_t)qword_1002744A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v8, v13)) {
      goto LABEL_31;
    }
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    NSString v15 = "Passkey eligibility checks didn't meet preconditions.";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v8, v13, v15, v14, 2u);
    swift_slowDealloc();
    goto LABEL_31;
  }
  if (![*(id *)(*(void *)(v0 + 16) + OBJC_IVAR___AKAppleIDPasskeyValidator_device) isUnlocked])
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_1000D78F8(v16, (uint64_t)qword_1002744A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v8, v13)) {
      goto LABEL_31;
    }
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    NSString v15 = "Passkey eligibility check failed -  Device is in locked state.";
    goto LABEL_30;
  }
  uint64_t v1 = *(void **)(*(void *)(v0 + 16) + OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager);
  uint64_t v2 = [v1 primaryAuthKitAccount];
  if (!v2)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1000D78F8(v18, (uint64_t)qword_1002744A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v8, v13)) {
      goto LABEL_31;
    }
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    NSString v15 = "Passkey eligibility check failed - missing primary account.";
    goto LABEL_30;
  }
  uint64_t v3 = v2;
  if ((*(unsigned char *)(v0 + 32) & 1) == 0)
  {
    id v4 = [v1 passkeyPresentForAccount:v2];
    if (!v4 || (uint64_t v5 = v4, v6 = [v4 BOOLValue], v5, v6))
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_1000D78F8(v7, (uint64_t)qword_1002744A8);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v8, v9)) {
        goto LABEL_25;
      }
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      uint64_t v11 = "Server already has a valid passkey registered.";
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v11, v10, 2u);
      swift_slowDealloc();
LABEL_25:

LABEL_31:
      uint64_t v19 = 0;
      goto LABEL_32;
    }
  }
  if (sub_1000DE714((SEL *)&selRef_passkeyRegistrationAttemptDateForAccount_, "Last registration was attempted within a day.", "Last registration was attempted more than a day ago. Continuing with registration", "No Previous regisration attempts recorded on this device. Continuing with registration"))
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_1000D78F8(v17, (uint64_t)qword_1002744A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_25;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v11 = "Recently attempted passkey registration. Skipping registration.";
    goto LABEL_24;
  }
  uint64_t v19 = 1;
  uint64_t v8 = v3;
LABEL_32:

  char v20 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v20(v19);
}

uint64_t sub_1000DC3A4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000DC3C4, 0, 0);
}

uint64_t sub_1000DC3C4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager);
  id v3 = [v2 passkeyEligibleForAccount:*(void *)(v1 + OBJC_IVAR___AKAppleIDPasskeyValidator_account)];
  v0[3] = v3;
  if (!v3) {
    goto LABEL_9;
  }
  id v4 = v3;
  if (![v3 BOOLValue])
  {

LABEL_9:
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_1002744A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Passkey eligibility check failed - passkeyEligible server flag is false", v13, 2u);
      swift_slowDealloc();
    }
    goto LABEL_23;
  }
  if (sub_1000DDA40())
  {
    id v5 = [v2 primaryAuthKitAccount];
    v0[4] = v5;
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = v0[2];
      uint64_t v8 = swift_task_alloc();
      v0[5] = v8;
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = v6;
      os_log_type_t v9 = (void *)swift_task_alloc();
      v0[6] = v9;
      *os_log_type_t v9 = v0;
      v9[1] = sub_1000DC77C;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000013, 0x80000001001C3430, sub_1000DFD68, v8, &type metadata for Bool);
    }
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1000D78F8(v18, (uint64_t)qword_1002744A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v15)) {
      goto LABEL_22;
    }
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    uint64_t v17 = "Passkey eligibility check failed - Primary account not found";
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1000D78F8(v14, (uint64_t)qword_1002744A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v15)) {
      goto LABEL_22;
    }
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    uint64_t v17 = "Passkey eligibility check failed - Passkey not supported";
  }
  _os_log_impl((void *)&_mh_execute_header, v11, v15, v17, v16, 2u);
  swift_slowDealloc();
LABEL_22:

LABEL_23:
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19(0);
}

uint64_t sub_1000DC77C()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000DC904;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000DC898;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DC898()
{
  uint64_t v1 = *(void **)(v0 + 24);

  uint64_t v2 = *(unsigned __int8 *)(v0 + 64);
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000DC904()
{
  uint64_t v1 = *(void **)(v0 + 32);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000DCAF4(char a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  id v6 = (void *)swift_task_alloc();
  void v3[4] = v6;
  void *v6 = v3;
  v6[1] = sub_1000DCBB0;
  return sub_1000DBD44(a1);
}

uint64_t sub_1000DCBB0(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_1000DCD40(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 64) = a1;
  return _swift_task_switch(sub_1000DCD64, 0, 0);
}

uint64_t sub_1000DCD64()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 24) = sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing eligibility checks before unenrolling...", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  uint64_t v6 = *(void **)(v5 + OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager);
  id v7 = [v6 primaryAuthKitAccount];
  *(void *)(v0 + 32) = v7;
  if (!v7)
  {
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Passkey eligibility check failed - missing primary account.", v14, 2u);
      swift_slowDealloc();
    }
    goto LABEL_26;
  }
  uint64_t v8 = v7;
  if (*(unsigned char *)(v0 + 64))
  {
LABEL_7:
    id v9 = [v6 passkeyPresentForAccount:v8];
    *(void *)(v0 + 40) = v9;
    if (v9)
    {
      uint64_t v10 = v9;
      if ([v9 BOOLValue])
      {
        uint64_t v11 = (void *)swift_task_alloc();
        *(void *)(v0 + 48) = v11;
        *uint64_t v11 = v0;
        v11[1] = sub_1000DD1C0;
        v11[2] = *(void *)(v0 + 16);
        return _swift_task_switch(sub_1000DC3C4, 0, 0);
      }
    }
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v21)) {
      goto LABEL_25;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    uint64_t v23 = "Server already has no passkey registered. Nothing to unenroll";
    goto LABEL_24;
  }
  id v15 = [v6 passkeysInKeychainCountForAccount:v7];
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = [v15 integerValue];
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v12, v18);
    if (v17)
    {
      if (v19)
      {
        char v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v18, "Keychain has an AppleID passkey. Unenroll not required.", v20, 2u);
        swift_slowDealloc();
      }

      goto LABEL_25;
    }
    if (v19)
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v18, "Keychain has no AppleID passkey", v25, 2u);
      swift_slowDealloc();
    }

    goto LABEL_7;
  }
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    uint64_t v23 = "No passkeyCount saved. Skipping unenroll";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v12, v21, v23, v22, 2u);
    swift_slowDealloc();
  }
LABEL_25:

LABEL_26:
  os_log_type_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24(0);
}

uint64_t sub_1000DD1C0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000DD3EC;
  }
  else
  {
    *(unsigned char *)(v4 + 65) = a1 & 1;
    uint64_t v5 = sub_1000DD2EC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DD2EC()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 65);
  if (v1 == 1)
  {
    uint64_t v2 = *(NSObject **)(v0 + 32);
    os_log_type_t v3 = *(void **)(v0 + 40);
  }
  else
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v2, v4);
    uint64_t v6 = *(void **)(v0 + 32);
    os_log_type_t v3 = *(void **)(v0 + 40);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v4, "Did not meet passkey eligibility criteria.", v7, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v8(v1);
}

uint64_t sub_1000DD3EC()
{
  uint64_t v1 = *(void **)(v0 + 32);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000DD5D0(char a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a3;
  uint64_t v7 = swift_task_alloc();
  void v3[4] = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 8) = sub_1000E040C;
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 64) = a1;
  return _swift_task_switch(sub_1000DCD64, 0, 0);
}

uint64_t sub_1000DD6A4()
{
  if (sub_1000DDA40())
  {
    if ([*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_cdpFactory] isManateeAvailable]) {
      return 1;
    }
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_1002744A8);
    uint64_t v11 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v12))
    {

      return 0;
    }
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v13 = 138412290;
    id v17 = *(void **)&v11[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
    id v15 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v17;

    _os_log_impl((void *)&_mh_execute_header, v4, v12, "Account %@ is not passkey supported. Keychain sync is not enabled.", v13, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000D78F8(v2, (uint64_t)qword_1002744A8);
    os_log_type_t v3 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v4, v5))
    {

      return 0;
    }
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    uint64_t v8 = *(void **)&v3[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
    id v9 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;

    *(_WORD *)(v6 + 12) = 2112;
    type metadata accessor for AppleIDPasskeyError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7[1] = v16;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Account %@ is not passkey supported. Error %@", (uint8_t *)v6, 0x16u);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  swift_slowDealloc();

  return 0;
}

uint64_t sub_1000DDA40()
{
  if ([*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_featureManager] isAppleIDPasskeyFeatureEnabled])
  {
    if (sub_1000DFA98())
    {
      if ([*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_device] isProtectedWithPasscode])
      {
        uint64_t v1 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
        uint64_t v2 = [*(id *)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager] DSIDForAccount:v1];
        if (v2)
        {
          os_log_type_t v3 = v2;
          uint64_t v4 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_cdpFactory];
          NSString v5 = [v2 stringValue];
          if (!v5)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v5 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          unsigned int v6 = [v4 isCDPEnabledForDSID:v5];

          if (v6)
          {

            return 1;
          }
          if (qword_10026F9C8 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          sub_1000D78F8(v20, (uint64_t)qword_1002744A8);
          os_log_type_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Passkey not supported - CDP is not enabled", v23, 2u);
            swift_slowDealloc();
          }

          goto LABEL_23;
        }
        if (qword_10026F9C8 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_1000D78F8(v14, (uint64_t)qword_1002744A8);
        id v15 = v0;
        os_log_type_t v3 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v3, v16))
        {

          return 0;
        }
        id v17 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v18 = (void *)swift_slowAlloc();
        *(_DWORD *)id v17 = 138412290;
        id v19 = v1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v18 = v1;

        _os_log_impl((void *)&_mh_execute_header, v3, v16, "Passkey not supported - Missing DSID for account %@.", v17, 0xCu);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_22;
      }
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_1000D78F8(v13, (uint64_t)qword_1002744A8);
      os_log_type_t v3 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v3, v9)) {
        goto LABEL_23;
      }
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      uint64_t v11 = "Passkey not supported - Device is not passcode protected.";
    }
    else
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_1000D78F8(v12, (uint64_t)qword_1002744A8);
      os_log_type_t v3 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v3, v9)) {
        goto LABEL_23;
      }
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      uint64_t v11 = "Passkey not supported - Not a primary account";
    }
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_1000D78F8(v8, (uint64_t)qword_1002744A8);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v3, v9)) {
      goto LABEL_23;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    uint64_t v11 = "Passkey not supported - Feature flag is disabled.";
  }
  _os_log_impl((void *)&_mh_execute_header, v3, v9, v11, v10, 2u);
LABEL_22:
  swift_slowDealloc();
LABEL_23:

  return 0;
}

uint64_t sub_1000DDF74()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000DDF94, 0, 0);
}

uint64_t sub_1000DDF94()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[3] = sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing eligibility checks for passkeys cleanup...", v4, 2u);
    swift_slowDealloc();
  }

  NSString v5 = (uint64_t (*)())[self sharedBag];
  if (!v5)
  {
    __break(1u);
    return _swift_task_switch(v5, v6, v7);
  }
  uint64_t v8 = v5;
  unsigned __int8 v9 = [v5 isPasskeyCleanupDisabled];

  if (v9)
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      uint64_t v13 = "isPasskeyCleanupDisabled is set to YES. Skipping cleanup.";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
      swift_slowDealloc();
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if ((sub_1000DE714((SEL *)&selRef_passkeysDeletionAttemptDateForAccount_, "Last passkeys cleanup was attempted within a day.", "Last passkeys cleanup was attempted more than a day ago. Continuing...", "No Previous passkeys cleanup attempts recorded on this device. Continuing...") & 1) == 0)
  {
    os_log_type_t v16 = (void *)swift_task_alloc();
    v0[4] = v16;
    *os_log_type_t v16 = v0;
    v16[1] = sub_1000DE26C;
    void v16[2] = v0[2];
    NSString v5 = sub_1000DC3C4;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    return _swift_task_switch(v5, v6, v7);
  }
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "Recently attempted passkey cleanup. Skipping for now.";
    goto LABEL_12;
  }
LABEL_13:

  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14(0);
}

uint64_t sub_1000DE26C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6(0);
  }
  else
  {
    *(unsigned char *)(v4 + 65) = a1 & 1;
    return _swift_task_switch(sub_1000DE3C0, 0, 0);
  }
}

uint64_t sub_1000DE3C0()
{
  if (*(unsigned char *)(v0 + 65) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v2 = swift_task_alloc();
    *(void *)(v0 + 40) = v2;
    *(void *)(v2 + 16) = v1;
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v3;
    void *v3 = v0;
    v3[1] = sub_1000DE574;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 64, 0, 0, 0xD000000000000016, 0x80000001001C33F0, sub_1000DFCC0, v2, &type metadata for Bool);
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Passkey cleanup eligibility check failed - didn't meet passkey eligibility criteria", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7(0);
  }
}

uint64_t sub_1000DE574()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000DE6AC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000DE690;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DE690()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1000DE6AC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000DE714(SEL *a1, const char *a2, const char *a3, const char *a4)
{
  uint64_t v9 = sub_1000D70C8((uint64_t *)&unk_100270030);
  __chkstk_darwin(v9 - 8);
  os_log_type_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v38 - v17;
  id v19 = objc_msgSend(*(id *)(v4 + OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager), *a1, *(void *)(v4 + OBJC_IVAR___AKAppleIDPasskeyValidator_account));
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_10;
  }
  uint64_t v20 = v19;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  os_log_type_t v21 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v21(v11, v16, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_10:
    sub_1000DFE8C((uint64_t)v11);
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_1000D78F8(v30, (uint64_t)qword_1002744A8);
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, a4, v33, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  v21(v18, v11, v12);
  static Date.now.getter();
  Date.timeIntervalSince(_:)();
  double v23 = v22;
  os_log_type_t v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v24(v16, v12);
  if (v23 >= 86400.0)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_1000D78F8(v34, (uint64_t)qword_1002744A8);
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      char v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, a3, v37, 2u);
      swift_slowDealloc();
    }

    v24(v18, v12);
    return 0;
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_1000D78F8(v25, (uint64_t)qword_1002744A8);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    objc_super v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, a2, v28, 2u);
    swift_slowDealloc();
  }

  v24(v18, v12);
  return 1;
}

void sub_1000DEBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8(&qword_100270020);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = *(void **)(a2 + OBJC_IVAR___AKAppleIDPasskeyValidator_authenticationController);
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR___AKAppleIDPasskeyValidator_account);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000DFCCC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000DF230;
  aBlock[3] = &unk_10022BC18;
  os_log_type_t v11 = _Block_copy(aBlock);
  swift_release();
  [v7 appleIDPasskeysForAccount:v8 withCompletion:v11];
  _Block_release(v11);
}

uint64_t sub_1000DED7C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000D78F8(v2, (uint64_t)qword_1002744A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v6 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey cleanup eligibility check failed - error %@", v5, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1 || (uint64_t v7 = *(void *)(a1 + 16)) == 0)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000D78F8(v12, (uint64_t)qword_1002744A8);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v13, "Passkey cleanup not required - No passkeys found in iCloud keychain", v14, 2u);
      swift_slowDealloc();
    }
    goto LABEL_20;
  }
  if (v7 == 1)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_1000D78F8(v8, (uint64_t)qword_1002744A8);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Passkey cleanup not required. No duplicate passkeys found.", v11, 2u);
      swift_slowDealloc();
    }
LABEL_20:

    type metadata accessor for AppleIDPasskeyError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(throwing:)();
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_1000D78F8(v16, (uint64_t)qword_1002744A8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Passkey cleanup required - duplicate passkeys found", v19, 2u);
    swift_slowDealloc();
  }

  sub_1000D70C8(&qword_100270020);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000DF230(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1000D70C8(&qword_100270028);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DF430(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_1000E040C;
  _DWORD v5[2] = v4;
  return _swift_task_switch(sub_1000DDF94, 0, 0);
}

id sub_1000DF520()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyValidator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyValidator()
{
  return self;
}

void sub_1000DF614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D70C8(&qword_100270020);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  unint64_t v9 = *(void **)(a2 + OBJC_IVAR___AKAppleIDPasskeyValidator_authenticationController);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1000DFE08;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E302C;
  aBlock[3] = &unk_10022BC68;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  [v9 canCreateiCloudKeychainPasskeyForAccount:a3 withCompletion:v12];
  _Block_release(v12);
}

uint64_t sub_1000DF7D0(char a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000D78F8(v2, (uint64_t)qword_1002744A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v6 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey eligibility check failed - canCreateiCloudKeychainPasskey error %@", v5, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if ((a1 & 1) == 0)
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_1000D78F8(v7, (uint64_t)qword_1002744A8);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        unint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Passkey eligibility check failed - Not eligible to create passkey in keychain", v10, 2u);
        swift_slowDealloc();
      }
    }
    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1000DFA98()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager];
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___AKAppleIDPasskeyValidator_account];
  id v3 = [v1 altDSIDForAccount:v2];
  if (v3)
  {
    os_log_type_t v4 = v3;
    id v5 = [v1 iCloudAccountForAltDSID:v3];

    if (v5)
    {
      unsigned __int8 v6 = [v1 isPrimaryiCloudAccount:v5];

      if (v6) {
        return 1;
      }
    }
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1000D78F8(v8, (uint64_t)qword_1002744A8);
  os_log_type_t v9 = v0;
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    id v14 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v13 = v2;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not a primary account %@.", v12, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

void sub_1000DFCC0(uint64_t a1)
{
  sub_1000DEBB8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000DFCCC(uint64_t a1, uint64_t a2)
{
  sub_1000D70C8(&qword_100270020);

  return sub_1000DED7C(a1, a2);
}

uint64_t sub_1000DFD50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000DFD60()
{
  return swift_release();
}

void sub_1000DFD68(uint64_t a1)
{
  sub_1000DF614(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000DFD74()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270020);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000DFE08(char a1, uint64_t a2)
{
  sub_1000D70C8(&qword_100270020);

  return sub_1000DF7D0(a1, a2);
}

uint64_t sub_1000DFE8C(uint64_t a1)
{
  uint64_t v2 = sub_1000D70C8((uint64_t *)&unk_100270030);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DFEEC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DFF2C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D84E8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100270040 + dword_100270040);
  return v5(v2, v3);
}

uint64_t sub_1000DFFE0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000E00B0()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(char, void *, void *))((char *)&dword_100270050 + dword_100270050);
  return v6(v2, v4, v3);
}

uint64_t sub_1000E016C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000E023C()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E027C()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(char, void *, void *))((char *)&dword_100270070 + dword_100270070);
  return v6(v2, v4, v3);
}

uint64_t sub_1000E0338(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000E0410(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return _swift_task_switch(sub_1000E04A0, 0, 0);
}

uint64_t sub_1000E04A0()
{
  uint64_t v112 = v0;
  if (![*(id *)(*(void *)(v0 + 144) + 24) isSiwaCredentialSharingEnabled])
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v20 = (uint64_t *)(v0 + 24);
    uint64_t v21 = type metadata accessor for Logger();
    sub_1000D78F8(v21, (uint64_t)qword_100274490);
    double v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Feature flag SiwaCredentialSharingEnabled is not enabled", v24, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v25 = -16001;
    goto LABEL_15;
  }
  sub_1000E16E0();
  uint64_t v1 = (id *)(v0 + 136);
  id v2 = [*(id *)(v0 + 136) signInWithAppleAccount];
  *(void *)(v0 + 152) = v2;
  if (!v2)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v20 = (uint64_t *)(v0 + 40);
    uint64_t v28 = type metadata accessor for Logger();
    sub_1000D78F8(v28, (uint64_t)qword_100274490);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "No SIWA account set in context.", v31, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v25 = -16007;
LABEL_15:
    *uint64_t v20 = v25;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    goto LABEL_16;
  }
  id v3 = v2;
  id v4 = [v2 shareInfo];
  *(void *)(v0 + 160) = v4;
  if (!v4)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_1000D78F8(v32, (uint64_t)qword_100274490);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ShareInfo is missing in the account.", v35, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 56) = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    goto LABEL_16;
  }
  uint64_t v5 = v4;
  id v6 = [*v1 currentGroupID];
  if (!v6)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_1000D78F8(v36, (uint64_t)qword_100274490);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No currentGroupID set in context.", v39, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 72) = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_50;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  *(void *)(v0 + 168) = v9;
  if (![v5 isCurrentUser])
  {
    if ([*v1 _simulateAccountSharingResponse])
    {
      uint64_t v40 = *(void *)(v0 + 144);

      swift_bridgeObjectRelease();
      id v41 = *(void **)(v40 + 32);
      *(void *)(v0 + 112) = 0;
      unsigned int v42 = [v41 removeSharedAccount:v3 error:v0 + 112];
      Swift::String v43 = *(void **)(v0 + 112);
      if (v42)
      {
        id v44 = v43;

LABEL_42:
        uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_17;
      }
      id v71 = v43;
      goto LABEL_49;
    }
    uint64_t v110 = v8;
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v50 = v0 + 80;
    uint64_t v51 = type metadata accessor for Logger();
    sub_1000D78F8(v51, (uint64_t)qword_100274490);
    id v52 = v3;
    id v53 = v5;
    id v54 = v52;
    id v55 = v53;
    char v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      buf = (uint8_t *)v56;
      uint64_t v58 = swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315394;
      uint64_t v59 = v54;
      id v60 = [v54 clientID];
      os_log_type_t type = v57;
      uint64_t v61 = v10;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v107 = v55;
      unint64_t v64 = v63;

      uint64_t v65 = v62;
      uint64_t v10 = v61;
      *(void *)(v0 + 96) = sub_100158C6C(v65, v64, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v58 + 12) = 2080;
      id v66 = [v107 participantID];
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v69 = v68;

      uint64_t v70 = v67;
      id v54 = v59;
      *(void *)(v0 + 104) = sub_100158C6C(v70, v69, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v55 = v107;
      swift_bridgeObjectRelease();

      char v56 = buf;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)buf, type, "Unsharing %s belonging to %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v50 = v0 + 80;
      swift_slowDealloc();
    }
    else
    {
    }
    unsigned int v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Fetching shareToken...", v85, 2u);
      swift_slowDealloc();
    }
    uint64_t v86 = *(void *)(v0 + 144);

    unint64_t v87 = *(void **)(v86 + 32);
    *(void *)(v0 + 80) = 0;
    id v88 = [v87 shareTokenForAccount:v54 inGroup:v7 error:v50];

    unsigned int v89 = *(void **)(v0 + 80);
    if (v88)
    {
      uint64_t v90 = v55;
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v92;
      *(void *)(v0 + 200) = v92;
      id v94 = v89;

      *(void *)(v0 + 88) = 0;
      unsigned int v95 = [v87 removeSharedAccount:v54 error:v0 + 88];
      id v96 = *(void **)(v0 + 88);
      if (v95)
      {
        sub_1000E2310((void *)(*(void *)(v0 + 144) + 40), *(void *)(*(void *)(v0 + 144) + 64));
        id v97 = v96;
        id v98 = [v54 clientID];
        uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v101 = v100;

        *(void *)(v0 + 208) = v101;
        long long v102 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v102;
        *long long v102 = v0;
        v102[1] = sub_1000E14BC;
        uint64_t v77 = v99;
        uint64_t v78 = v101;
        uint64_t v79 = v110;
        uint64_t v80 = v10;
        uint64_t v81 = v91;
        uint64_t v82 = v93;
        goto LABEL_58;
      }
      id v104 = v96;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    else
    {
      id v103 = v89;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
LABEL_16:
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
    return v26();
  }
  uint64_t v109 = v8;
  uint64_t v11 = v0 + 120;

  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1000D78F8(v12, (uint64_t)qword_100274490);
  id v3 = v3;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v111[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    id v16 = [v3 clientID];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v108 = v10;
    unint64_t v19 = v18;

    uint64_t v11 = v0 + 120;
    *(void *)(v0 + 128) = sub_100158C6C(v17, v19, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v10 = v108;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unsharing %s belonging to current user", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  char v45 = *(void **)(*(void *)(v0 + 144) + 32);
  *(void *)(v0 + 120) = 0;
  unsigned int v46 = [v45 removeSharedAccount:v3 error:v11];
  uint64_t v47 = *(void **)(v0 + 120);
  if (!v46)
  {
    id v71 = v47;
    swift_bridgeObjectRelease();
LABEL_49:
    _convertNSErrorToError(_:)();

LABEL_50:
    swift_willThrow();

    goto LABEL_16;
  }
  id v48 = *v1;
  id v49 = v47;
  if ([v48 _simulateAccountSharingResponse])
  {

    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  sub_1000E2310((void *)(*(void *)(v0 + 144) + 40), *(void *)(*(void *)(v0 + 144) + 64));
  id v72 = [v3 clientID];
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v75 = v74;

  *(void *)(v0 + 176) = v75;
  uint64_t v76 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v76;
  void *v76 = v0;
  v76[1] = sub_1000E1224;
  uint64_t v77 = v73;
  uint64_t v78 = v75;
  uint64_t v79 = v109;
  uint64_t v80 = v10;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
LABEL_58:
  return sub_1000E9320(v77, v78, v79, v80, v81, v82);
}

uint64_t sub_1000E1224()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1000E1410;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v2 = sub_1000E137C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E137C()
{
  uint64_t v1 = *(void **)(v0 + 160);

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000E1410()
{
  id v2 = (void *)v0[19];
  uint64_t v1 = (void *)v0[20];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000E14BC()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1000E1620;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v2 = sub_1000E23A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E1620()
{
  uint64_t v1 = (void *)v0[20];
  id v2 = (void *)v0[19];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000E16E0()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing Entitlement Check", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 16);
  if (([v5 hasInternalAccess] & 1) != 0
    || [v5 hasPrivateAccess])
  {
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client has necessary permission for accounts unsharing", v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client doesn't have access to perform account unsharing", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return 1;
}

uint64_t sub_1000E192C(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = v1;
  return _swift_task_switch(sub_1000E194C, 0, 0);
}

uint64_t sub_1000E194C()
{
  if ([*(id *)(*(void *)(v0 + 160) + 24) isSiwaCredentialSharingEnabled])
  {
    sub_1000E16E0();
    id v1 = [*(id *)(v0 + 152) currentGroupID];
    *(void *)(v0 + 168) = v1;
    if (v1)
    {
      uint64_t v2 = *(void **)(v0 + 152);
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v4;
      *(void *)(v0 + 176) = v4;
      if ([v2 _simulateAccountSharingResponse])
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = *(void *)(v0 + 168);
        os_log_type_t v7 = *(void **)(*(void *)(v0 + 160) + 32);
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_1000E1FC4;
        uint64_t v8 = swift_continuation_init();
        *(void *)(v0 + 80) = _NSConcreteStackBlock;
        *(void *)(v0 + 88) = 0x40000000;
        *(void *)(v0 + 96) = sub_1000E21AC;
        *(void *)(v0 + 104) = &unk_10022BE10;
        *(void *)(v0 + 112) = v8;
        [v7 removeAllAccountsBelongingToCurrentUserFrom:v6 completionHandler:v0 + 80];
        return _swift_continuation_await(v0 + 16);
      }
      else
      {
        sub_1000E2310((void *)(*(void *)(v0 + 160) + 40), *(void *)(*(void *)(v0 + 160) + 64));
        uint64_t v20 = (void *)swift_task_alloc();
        *(void *)(v0 + 184) = v20;
        *uint64_t v20 = v0;
        v20[1] = sub_1000E1D64;
        return sub_1000EA1EC(v3, v5);
      }
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v9 = (uint64_t *)(v0 + 144);
    uint64_t v16 = type metadata accessor for Logger();
    sub_1000D78F8(v16, (uint64_t)qword_100274490);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No currentGroupID set in context.", v19, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v14 = -16007;
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v9 = (uint64_t *)(v0 + 128);
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_100274490);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Feature flag SiwaCredentialSharingEnabled is not enabled", v13, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v14 = -16001;
  }
  *uint64_t v9 = v14;
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1000E1D64()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void **)(v2 + 168);
    swift_bridgeObjectRelease();

    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1000E1EC8, 0, 0);
  }
}

uint64_t sub_1000E1EC8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void **)(v0[20] + 32);
  v0[2] = v0;
  v0[3] = sub_1000E1FC4;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000E21AC;
  v0[13] = &unk_10022BE10;
  v0[14] = v3;
  [v2 removeAllAccountsBelongingToCurrentUserFrom:v1 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000E1FC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E2138;
  }
  else {
    uint64_t v2 = sub_1000E20D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E20D4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E2138()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000E21AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000E2244()
{
  swift_unknownObjectRelease();
  sub_1000E2354(v0 + 40);

  return _swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for AccountUnsharingController()
{
  return self;
}

unint64_t sub_1000E22B8()
{
  unint64_t result = qword_1002709D0;
  if (!qword_1002709D0)
  {
    type metadata accessor for SignInWithAppleError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002709D0);
  }
  return result;
}

void *sub_1000E2310(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000E2354(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000E23A4()
{
  return sub_1000E137C();
}

void sub_1000E2418(uint64_t a1)
{
}

uint64_t sub_1000E247C()
{
  id v1 = [v0 code];
  if (qword_10026F980 != -1) {
    swift_once();
  }
  if (v1 != [(id)qword_100270160 code]) {
    return 0;
  }
  id v2 = [v0 domain];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  id v6 = [(id)qword_100270160 domain];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (v3 == v7 && v5 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1000D78F8(v13, (uint64_t)qword_100274460);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "We got a nil error from ObjC. Treating as success", v16, 2u);
    swift_slowDealloc();
  }

  return 1;
}

id sub_1000E2684(uint64_t a1)
{
  id v5 = 0;
  id v2 = [v1 keychainItemForDescriptor:a1 error:&v5];
  if (v5)
  {
    id v3 = v5;

    swift_willThrow();
    return 0;
  }
  return v2;
}

void *sub_1000E278C(id a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [a1 setSynchronizable:1];
    NSString v5 = String._bridgeToObjectiveC()();
    [a1 setSharingGroup:v5];
  }
  id v17 = 0;
  id v6 = [v3 keychainItemsForDescriptor:a1 error:&v17];
  if (v17)
  {
    id v7 = v17;

    swift_willThrow();
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    id v9 = [v8 domain];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0) {
        goto LABEL_14;
      }
    }
    if ([v8 code] != (id)-25300)
    {
LABEL_14:
      swift_willThrow();

      return (void *)v12;
    }

    return &_swiftEmptyArrayStorage;
  }
  else
  {
    sub_1000E2FEC();
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return (void *)v12;
}

void sub_1000E2A94(uint64_t a1)
{
}

void sub_1000E2AF8(uint64_t a1, SEL *a2, const char *a3, const char *a4)
{
  os_log_type_t v24 = 0;
  objc_msgSend(v4, *a2, a1, &v24);
  if (v24)
  {
    id v7 = v24;
    swift_willThrow();
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    if (sub_1000E247C())
    {
      if (qword_10026F9B0 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_1000D78F8(v9, (uint64_t)qword_100274460);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, a3, v12, 2u);
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      if (qword_10026F9B0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_1000D78F8(v17, (uint64_t)qword_100274460);
      os_log_type_t v18 = v8;
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 138412290;
        os_log_type_t v24 = v18;
        uint64_t v22 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v23 = v18;

        _os_log_impl((void *)&_mh_execute_header, v19, v20, a4, v21, 0xCu);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v19 = v18;
      }

      swift_willThrow();
    }
  }
  else
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000D78F8(v13, (uint64_t)qword_100274460);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, a3, v16, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000E2EBC(void *a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5, const char *a6, const char *a7)
{
  id v11 = a3;
  id v12 = a1;
  sub_1000E2AF8((uint64_t)v11, a5, a6, a7);

  return 1;
}

void sub_1000E2F74()
{
  id v0 = objc_allocWithZone((Class)NSError);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithDomain:v1 code:0 userInfo:0];

  qword_100270160 = (uint64_t)v2;
}

unint64_t sub_1000E2FEC()
{
  unint64_t result = qword_100270168;
  if (!qword_100270168)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100270168);
  }
  return result;
}

void sub_1000E302C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1000E3134()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000E3220, 0, 0);
}

uint64_t sub_1000E3220()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[8] = sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing passkey cleanup if necessary...", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];

  id v6 = *(void **)(v5 + OBJC_IVAR___AKAppleIDPasskeyCleanupController_accountManager);
  v0[9] = v6;
  id v7 = [v6 primaryAuthKitAccount];
  v0[10] = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v6 altDSIDForAccount:v7];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      v0[11] = v11;
      v0[12] = v13;
      uint64_t v14 = (void *)swift_task_alloc();
      v0[13] = v14;
      void *v14 = v0;
      v14[1] = sub_1000E362C;
      uint64_t v15 = v0[4];
      v14[15] = v8;
      uint8_t v14[16] = v15;
      return _swift_task_switch(sub_1000E4240, 0, 0);
    }
    id v19 = v8;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      v0[2] = v19;
      os_log_type_t v23 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v8;

      _os_log_impl((void *)&_mh_execute_header, v16, v20, "Passkeys cleanup failed - altDSID not found for account %@.", v21, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v16 = v23;
    }
    else
    {
    }
  }
  else
  {
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Passkeys cleanup failed - missing primary account.", v18, 2u);
      swift_slowDealloc();
    }
  }

  swift_task_dealloc();
  os_log_type_t v24 = (uint64_t (*)(void))v0[1];
  return v24(0);
}

uint64_t sub_1000E362C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000E4034;
  }
  else
  {
    *(unsigned char *)(v4 + 152) = a1 & 1;
    uint64_t v5 = sub_1000E3780;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E3780()
{
  if (*(unsigned char *)(v0 + 152) == 1)
  {
    uint64_t v2 = *(void **)(v0 + 72);
    uint64_t v1 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 40);
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    [v2 setPasskeysDeletionAttemptDate:isa forAccount:v1];

    *(void *)(v0 + 24) = 0;
    unsigned int v7 = [v2 saveAccount:v1 error:v0 + 24];
    uint64_t v8 = *(void **)(v0 + 24);
    if (v7)
    {
      id v9 = v8;
      uint64_t v10 = swift_task_alloc();
      *(void *)(v0 + 120) = v10;
      *(void *)uint64_t v10 = v0;
      *(void *)(v10 + 8) = sub_1000E3A5C;
      long long v11 = *(_OWORD *)(v0 + 88);
      *(void *)(v10 + 48) = *(void *)(v0 + 32);
      *(_OWORD *)(v10 + 32) = v11;
      return _swift_task_switch(sub_1000E47C8, 0, 0);
    }
    os_log_type_t v18 = *(void **)(v0 + 80);
    id v19 = v8;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_task_dealloc();
    os_log_type_t v20 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(NSObject **)(v0 + 80);
    if (v14)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Passkey cleanup skipped", v16, 2u);
      swift_slowDealloc();
      os_log_type_t v17 = v12;
    }
    else
    {
      os_log_type_t v17 = *(NSObject **)(v0 + 80);
      uint64_t v15 = v12;
    }

    swift_task_dealloc();
    os_log_type_t v20 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v20(0);
}

uint64_t sub_1000E3A5C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000E40D8;
  }
  else
  {
    *(unsigned char *)(v4 + 153) = a1 & 1;
    uint64_t v5 = sub_1000E3BB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E3BB0()
{
  if (*(unsigned char *)(v0 + 153) == 1)
  {
    uint64_t v1 = swift_task_alloc();
    *(void *)(v0 + 136) = v1;
    *(void *)uint64_t v1 = v0;
    *(void *)(v1 + 8) = sub_1000E3D9C;
    long long v2 = *(_OWORD *)(v0 + 88);
    *(void *)(v1 + 80) = *(void *)(v0 + 32);
    *(_OWORD *)(v1 + 64) = v2;
    return _swift_task_switch(sub_1000E4CA0, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    id v6 = *(NSObject **)(v0 + 80);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey cleanup failed - unable to unenroll passkey", v7, 2u);
      swift_slowDealloc();
      uint64_t v8 = v3;
    }
    else
    {
      uint64_t v8 = *(NSObject **)(v0 + 80);
      id v6 = v3;
    }

    swift_task_dealloc();
    id v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9(0);
  }
}

uint64_t sub_1000E3D9C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    BOOL v5 = sub_1000E417C;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + 154) = a1 & 1;
    BOOL v5 = sub_1000E3EF8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E3EF8()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 154);
  if (v1 == 1)
  {
    long long v2 = *(NSObject **)(v0 + 80);
  }
  else
  {
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    long long v2 = *(NSObject **)(v0 + 80);
    if (v5)
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkey cleanup failed - unable to enroll passkey", v6, 2u);
      swift_slowDealloc();
    }
    else
    {

      long long v2 = v3;
    }
  }

  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v1);
}

uint64_t sub_1000E4034()
{
  uint64_t v1 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  long long v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000E40D8()
{
  uint64_t v1 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  long long v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000E417C()
{
  uint64_t v1 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  long long v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000E4220(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return _swift_task_switch(sub_1000E4240, 0, 0);
}

uint64_t sub_1000E4240()
{
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR___AKAppleIDPasskeyCleanupController_passkeyValidator);
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_1000E4348;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001394A0;
  v0[13] = &unk_10022BEA0;
  v0[14] = v2;
  [v1 canDeleteAllPasskeysWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000E4348()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E46CC;
  }
  else {
    uint64_t v2 = sub_1000E4458;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E4458()
{
  if (*(unsigned char *)(v0 + 168) == 1)
  {
    uint64_t v1 = (int8x16_t *)swift_task_alloc();
    *(void *)(v0 + 144) = v1;
    v1[1] = vextq_s8(*(int8x16_t *)(v0 + 120), *(int8x16_t *)(v0 + 120), 8uLL);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v2;
    void *v2 = v0;
    v2[1] = sub_1000E4594;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 169, 0, 0, 0xD000000000000017, 0x80000001001C3590, sub_1000E5CDC, v1, &type metadata for Bool);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3(0);
  }
}

uint64_t sub_1000E4594()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000E473C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000E46B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E46B0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 169));
}

uint64_t sub_1000E46CC()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000E473C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000E47A4(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  void v3[6] = v2;
  void v3[4] = a1;
  return _swift_task_switch(sub_1000E47C8, 0, 0);
}

uint64_t sub_1000E47C8()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Begin passkey unenroll", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = objc_allocWithZone((Class)AKAppleIDPasskeySetupContext);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v7 = (objc_class *)[v5 initWithAltDSID:v6];
  v0[3].super_class = v7;

  id v8 = sub_10012CF14(v7, 0);
  v0[4].receiver = v8;
  id v9 = v8;
  uint64_t v10 = *(void *)((char *)v0[3].receiver + OBJC_IVAR___AKAppleIDPasskeyCleanupController_passkeyValidator);
  uint64_t v11 = (objc_class *)type metadata accessor for AppleIDPasskeyUnenrollController();
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[OBJC_IVAR___AKAppleIDPasskeyUnenrollController_passkeyValidator] = v10;
  *(void *)&v12[OBJC_IVAR___AKAppleIDPasskeyUnenrollController_unenrollProvider] = v9;
  v0[1].receiver = v12;
  v0[1].super_class = v11;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v0[4].super_class = (Class)objc_msgSendSuper2(v0 + 1, "init");
  uint64_t v15 = (uint64_t (*)(char))((char *)&dword_100271658 + dword_100271658);
  os_log_type_t v13 = (void *)swift_task_alloc();
  v0[5].receiver = v13;
  *os_log_type_t v13 = v0;
  v13[1] = sub_1000E4A60;
  return v15(1);
}

uint64_t sub_1000E4A60(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_1000E4C04;
  }
  else
  {
    *(unsigned char *)(v4 + 96) = a1 & 1;
    id v5 = sub_1000E4B8C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E4B8C()
{
  uint64_t v1 = *(void **)(v0 + 56);

  swift_unknownObjectRelease();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 96);
  return v2(v3);
}

uint64_t sub_1000E4C04()
{
  uint64_t v1 = *(void **)(v0 + 56);

  swift_unknownObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000E4C7C(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return _swift_task_switch(sub_1000E4CA0, 0, 0);
}

uint64_t sub_1000E4CA0()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Begin passkey enroll", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = objc_allocWithZone((Class)AKAppleIDPasskeySetupContext);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v7 = (objc_class *)[v5 initWithAltDSID:v6];
  v0[5].super_class = v7;

  id v8 = sub_1000DB200(v7, 0);
  v0[6].receiver = v8;
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = (objc_class *)sub_1000DB6D0(v7, 0);
    v0[6].super_class = v10;
    if (v10)
    {
      uint64_t v11 = v10;
      receiver = (char *)v0[5].receiver;
      id v13 = [objc_allocWithZone((Class)AKAppleIDPasskeyAuthenticationController) init];
      BOOL v14 = (objc_class *)type metadata accessor for AppleIDPasskeyCredentialProvider();
      uint64_t v15 = (char *)objc_allocWithZone(v14);
      *(void *)&v15[OBJC_IVAR___AKAppleIDPasskeyCredentialProvider_authorizationController] = v13;
      v0[1].receiver = v15;
      v0[1].super_class = v14;
      id v16 = objc_msgSendSuper2(v0 + 1, "init");
      v0[7].receiver = v16;
      uint64_t v17 = *(void *)&receiver[OBJC_IVAR___AKAppleIDPasskeyCleanupController_passkeyValidator];
      os_log_type_t v18 = (objc_class *)type metadata accessor for AppleIDPasskeyEnrollController();
      id v19 = (char *)objc_allocWithZone(v18);
      *(void *)&v19[OBJC_IVAR___AKAppleIDPasskeyEnrollController_passkeyValidator] = v17;
      *(void *)&v19[OBJC_IVAR___AKAppleIDPasskeyEnrollController_challengeProvider] = v9;
      *(void *)&v19[OBJC_IVAR___AKAppleIDPasskeyEnrollController_credentialProvider] = v16;
      *(void *)&v19[OBJC_IVAR___AKAppleIDPasskeyEnrollController_registrationProvider] = v11;
      v0[2].receiver = v19;
      v0[2].super_class = v18;
      swift_unknownObjectRetain();
      id v20 = v9;
      id v21 = v16;
      uint64_t v22 = v11;
      v0[7].super_class = (Class)objc_msgSendSuper2(v0 + 2, "init");
      uint64_t v29 = (uint64_t (*)(char))((char *)&dword_10026FF70 + dword_10026FF70);
      os_log_type_t v23 = (void *)swift_task_alloc();
      v0[8].receiver = v23;
      *os_log_type_t v23 = v0;
      v23[1] = sub_1000E5094;
      return v29(1);
    }
  }
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed passkey enroll - missing provider", v27, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  v0[3].super_class = (Class)-120018;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();

  super_class = (uint64_t (*)(void))v0->super_class;
  return super_class(0);
}

uint64_t sub_1000E5094(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_1000E5248;
  }
  else
  {
    *(unsigned char *)(v4 + 144) = a1 & 1;
    id v5 = sub_1000E51C0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000E51C0()
{
  uint64_t v1 = *(void **)(v0 + 112);
  os_log_type_t v3 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 88);

  id v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 144);
  return v5(v6);
}

uint64_t sub_1000E5248()
{
  uint64_t v1 = *(void **)(v0 + 112);
  os_log_type_t v3 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 88);

  id v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5(0);
}

uint64_t sub_1000E5438(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_1000DCBB0;
  return sub_1000E3134();
}

void sub_1000E54E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D70C8(&qword_100270020);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = *(void **)(a2 + OBJC_IVAR___AKAppleIDPasskeyCleanupController_authenticationController);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1000E5D78;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E302C;
  aBlock[3] = &unk_10022BEE0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  [v9 deleteAllPasskeysForAccount:a3 withCompletion:v12];
  _Block_release(v12);
}

uint64_t sub_1000E569C(char a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000D78F8(v2, (uint64_t)qword_1002744A8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)id v5 = 138412290;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v6 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Passkeys deletion failed - error %@", v5, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(throwing:)();
  }
  if ((a1 & 1) == 0)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000D78F8(v12, (uint64_t)qword_1002744A8);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Passkeys deletion failed", v15, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(throwing:)();
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000D78F8(v7, (uint64_t)qword_1002744A8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully deleted all passkeys including duplicates.", v10, 2u);
    swift_slowDealloc();
  }

  sub_1000D70C8(&qword_100270020);
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for AppleIDPasskeyCleanupController()
{
  return self;
}

uint64_t sub_1000E5B1C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E5B5C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  os_log_type_t v3 = *(void **)(v0 + 24);
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D7208;
  id v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1002701B8 + dword_1002701B8);
  return v5(v2, v3);
}

uint64_t sub_1000E5C10(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_1000E5CDC(uint64_t a1)
{
  sub_1000E54E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000E5CE4()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270020);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000E5D78(char a1, uint64_t a2)
{
  sub_1000D70C8(&qword_100270020);

  return sub_1000E569C(a1, a2);
}

uint64_t sub_1000E5DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E5E0C()
{
  return swift_release();
}

uint64_t sub_1000E5E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  return _swift_task_switch(sub_1000E5EAC, 0, 0);
}

uint64_t sub_1000E5EAC()
{
  uint64_t v1 = *(void **)(v0[13] + 16);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  v0[8] = 0;
  LODWORD(v1) = [v1 removeAllAccountsBelongingToParticipantWithParticipantID:v2 from:v3 error:v0 + 8];

  uint64_t v4 = (void *)v0[8];
  if (v1)
  {
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[11];
    sub_1000E2310((void *)(v0[13] + 24), *(void *)(v0[13] + 48));
    sub_1000D70C8(&qword_100270970);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001B81D0;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = v5;
    id v8 = v4;
    swift_bridgeObjectRetain();
    Swift::Int v9 = sub_100109004(inited);
    v0[14] = v9;
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v10 = (void *)swift_task_alloc();
    v0[15] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1000E60DC;
    return sub_10010B238(v9);
  }
  else
  {
    id v12 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1000E60DC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000E626C, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    NSString v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000E626C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E62FC()
{
  swift_unknownObjectRelease();
  sub_1000E2354(v0 + 24);

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ParticipantGroupDepartureController()
{
  return self;
}

uint64_t sub_1000E63B8(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_1000E63D8, 0, 0);
}

uint64_t sub_1000E63D8()
{
  uint64_t v42 = v0;
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Start passkey status.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);

  uint64_t v7 = *(void **)(v6 + OBJC_IVAR___AKAppleIDPasskeyStatusController_accountManager);
  NSString v8 = [v5 altDSID];
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v9 = [v7 authKitAccountWithAltDSID:v8];

  if (v9)
  {
    unint64_t v10 = sub_100143150((uint64_t)&_swiftEmptyArrayStorage);
    id v11 = [v7 passkeyEligibleForAccount:v9];
    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;
      id v15 = v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41[0] = v10;
      sub_1000E6950((uint64_t)v15, v12, v14, isUniquelyReferenced_nonNull_native, v41);
      unint64_t v10 = v41[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = [v7 passkeyPresentForAccount:v9];
    if (v17)
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
      id v21 = v17;
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      v41[0] = v10;
      sub_1000E6950((uint64_t)v21, v18, v20, v22, v41);
      unint64_t v10 = v41[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finish passkey status.", v25, 2u);
      swift_slowDealloc();
      os_log_type_t v26 = v9;
      os_log_type_t v27 = v23;
    }
    else
    {
      os_log_type_t v26 = v11;
      os_log_type_t v27 = v17;
      id v11 = v9;
      uint64_t v17 = v23;
    }

    os_log_type_t v38 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v38(v10);
  }
  else
  {
    id v28 = *(id *)(v0 + 32);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void **)(v0 + 32);
    if (v31)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      id v34 = [v32 altDSID];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      *(void *)(v0 + 16) = sub_100158C6C(v35, v37, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Passkey status failed. Account not found for altDSID %s.", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for AppleIDPasskeyError(0);
    *(void *)(v0 + 24) = -120017;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
}

uint64_t type metadata accessor for AppleIDPasskeyStatusController()
{
  return self;
}

uint64_t sub_1000E6950(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  unint64_t v10 = (void *)*a5;
  unint64_t v12 = sub_10014A0BC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10013F778();
LABEL_7:
    uint64_t v18 = (void *)*a5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10013E3F8(v15, a4 & 1);
  unint64_t v21 = sub_10014A0BC(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*a5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  os_log_type_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *os_log_type_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000E6AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  return _swift_task_switch(sub_1000E6B54, 0, 0);
}

uint64_t sub_1000E6B54()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 192) + 16);
  *(void *)(v0 + 200) = [v1 requestProvider];
  type metadata accessor for AccountRevokingRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 208) = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v20 = *(void *)(v0 + 176);
    id v21 = v1;
    id v5 = [*(id *)(v0 + 168) clientID];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    *(void *)(v0 + 144) = &type metadata for String;
    *(void *)(v0 + 120) = v6;
    *(void *)(v0 + 128) = v8;
    sub_1000D7CC4((_OWORD *)(v0 + 120), (_OWORD *)(v0 + 80));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34((_OWORD *)(v0 + 80), 0x695F746E65696C63, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 104) = &type metadata for String;
    *(void *)(v0 + 80) = v20;
    *(void *)(v0 + 88) = v4;
    sub_1000D7CC4((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    swift_bridgeObjectRetain();
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34((_OWORD *)(v0 + 120), 0x64695F6D616574, 0xE700000000000000, v10);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 104) = &type metadata for Int;
    *(void *)(v0 + 80) = 1;
    sub_1000D7CC4((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34((_OWORD *)(v0 + 120), 0x747865746E6F63, 0xE700000000000000, v11);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6B94((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_1000E7004;
    uint64_t v13 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000F731C;
    *(void *)(v0 + 104) = &unk_10022BF28;
    *(void *)(v0 + 112) = v13;
    [v21 executeRequestWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1000D78F8(v14, (uint64_t)qword_100274490);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to revoke due to an invalid request", v17, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 120) = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18(0);
  }
}

uint64_t sub_1000E7004()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E7710;
  }
  else {
    uint64_t v2 = sub_1000E7140;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E7140()
{
  uint64_t v1 = *(void **)(v0 + 208);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = self;
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/xml"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 152) = 25445;
      *(void *)(v0 + 160) = 0xE200000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10014A078(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if ((swift_dynamicCast() & 1) != 0 && !*(void *)(v0 + 152))
        {
          if (qword_10026F9C0 != -1) {
            swift_once();
          }
          uint64_t v16 = type metadata accessor for Logger();
          sub_1000D78F8(v16, (uint64_t)qword_100274490);
          uint64_t v17 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v17, v18))
          {
            uint64_t v19 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v19 = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, v18, "Account revoke succeeded with IdMS", v19, 2u);
            swift_slowDealloc();
            sub_1000D89E8(v4, v3);
            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
            sub_1000D89E8(v4, v3);
          }

          os_log_type_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
          uint64_t v31 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        sub_1000E79A4(v0 + 120);
      }
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_1000D78F8(v20, (uint64_t)qword_100274490);
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Account revoke failed. Invalid response data", v23, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v15 = v7;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v4, v3);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_1000D78F8(v24, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
    id v28 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v27 = 138412290;
    swift_errorRetain();
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v28 = v29;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Account revoke failed. Error occurred while executing the request - %@", v27, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  os_log_type_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v31 = 0;
LABEL_27:
  return v30(v31);
}

uint64_t sub_1000E7710()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Account revoke failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(0);
}

uint64_t sub_1000E7948()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for AccountRevokingService()
{
  return self;
}

uint64_t sub_1000E79A4(uint64_t a1)
{
  uint64_t v2 = sub_1000D70C8(&qword_10026FD58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000E7A04()
{
}

uint64_t sub_1000E7A60(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000E7B20, 0, 0);
}

uint64_t sub_1000E7B20()
{
  id v55 = v0;
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = (id *)(v0 + 4);
  uint64_t v2 = (void *)v0[4];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[6];
  uint64_t v6 = sub_1000D78F8(v5, (uint64_t)qword_100274460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_retain_n();
  id v7 = v2;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  Class v10 = &selRef_ak_addCustodianSyncActionHeader;
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v51 = v9;
    uint64_t v11 = v0[5];
    id v52 = (id)v0[4];
    uint64_t v12 = swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v11 + 88))();
    v0[2] = sub_100158C6C(v13, v14, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    id v15 = [v52 altDSID];
    if (!v15)
    {
LABEL_15:

      __break(1u);
      return _swift_task_switch(v46, v47, v48);
    }
    uint64_t v16 = v15;
    uint64_t v17 = v0[7];
    id v53 = (id)v0[8];
    uint64_t v50 = v0[6];
    os_log_type_t v18 = (void *)v0[4];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    v0[3] = sub_100158C6C(v19, v21, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v51, "DeviceListBaseProvider - Begin clearing %s for altDSID %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(id, uint64_t))(v17 + 8))(v53, v50);
    Class v10 = &selRef_ak_addCustodianSyncActionHeader;
  }
  else
  {
    uint64_t v23 = v0[7];
    uint64_t v22 = v0[8];
    uint64_t v24 = v0[6];
    BOOL v25 = (void *)v0[4];

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  id v26 = objc_msgSend(*v1, v10[96], v50);
  if (!v26)
  {
    __break(1u);
    goto LABEL_15;
  }
  os_log_type_t v27 = v26;
  id v28 = (void *)v0[4];
  uint64_t v29 = v0[5];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v32 = v31;

  sub_1000E90B4(v30, v32);
  swift_bridgeObjectRelease();
  v54[0] = 0;
  v54[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  uint64_t v33 = swift_bridgeObjectRelease();
  strcpy((char *)v54, "DELETE FROM ");
  BYTE5(v54[1]) = 0;
  HIWORD(v54[1]) = -5120;
  v34._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 88))(v33);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._object = (void *)0x80000001001C3700;
  v35._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v35);
  uint64_t v36 = v54[0];
  uint64_t v37 = v54[1];
  v0[9] = v54[1];
  sub_1000D70C8((uint64_t *)&unk_100270470);
  uint64_t v38 = swift_allocObject();
  v0[10] = v38;
  *(_OWORD *)(v38 + 16) = xmmword_1001B81D0;
  id v39 = [v28 v10[96]];
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v43 = 0;
  }
  *(void *)(v38 + 56) = sub_1000D70C8(&qword_100271CF0);
  *(void *)(v38 + 32) = v41;
  *(void *)(v38 + 40) = v43;
  id v44 = (void *)swift_task_alloc();
  v0[11] = v44;
  *id v44 = v0;
  v44[1] = sub_1000E7FF4;
  uint64_t v45 = v0[5];
  v44[5] = v38;
  v44[6] = v45;
  v44[3] = v36;
  v44[4] = v37;
  unsigned int v46 = sub_1000E8224;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  return _swift_task_switch(v46, v47, v48);
}

uint64_t sub_1000E7FF4(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (v1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a1 & 1;
  }
  return v5(v6);
}

uint64_t sub_1000E8190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  void v4[4] = a2;
  return _swift_task_switch(sub_1000E8224, 0, 0);
}

uint64_t sub_1000E8224()
{
  uint64_t v1 = v0[6];
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [self queryWithString:v2];
  v0[7] = v3;

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[2] = 0;
  [v3 bindParameters:isa error:v0 + 2];

  uint64_t v5 = (void *)v0[2];
  v0[8] = v5;
  uint64_t v6 = swift_task_alloc();
  v0[9] = v6;
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v3;
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000E83F0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000016, 0x80000001001C36E0, sub_1000E8E84, v6, &type metadata for Bool);
}

uint64_t sub_1000E83F0()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    NSString v2 = sub_1000E85E4;
  }
  else
  {
    swift_task_dealloc();
    NSString v2 = sub_1000E8540;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E8540()
{
  uint64_t v1 = *(void **)(v0 + 64);

  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000E85E4()
{
  uint64_t v1 = *(void **)(v0 + 64);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

void sub_1000E8690(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1000D70C8(&qword_100270020);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)(v11 + ((v7 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  aBlock[4] = sub_1000E8FB0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001436C0;
  aBlock[3] = &unk_10022BFC0;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = a3;
  swift_release();
  [v8 performBlockAndWait:v12];
  _Block_release(v12);
}

uint64_t sub_1000E8894(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = *(void **)(Strong + 16);
    unint64_t v31 = 0;
    if ([v5 performQuery:a3 error:&v31])
    {
      uint64_t v6 = qword_10026F9B0;
      uint64_t v7 = v31;
      if (v6 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_1000D78F8(v8, (uint64_t)qword_100274460);
      uint64_t v9 = a3;
      unint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        id v13 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 138412290;
        unint64_t v31 = v9;
        unint64_t v14 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v13 = v9;

        _os_log_impl((void *)&_mh_execute_header, v10, v11, "DeviceListBaseProvider - Finished query: %@", v12, 0xCu);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        unint64_t v10 = v9;
      }

      LOBYTE(v31) = 1;
      sub_1000D70C8(&qword_100270020);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      unint64_t v20 = v31;
      unint64_t v21 = _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_10026F9B0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_1000D78F8(v22, (uint64_t)qword_100274460);
      id v23 = a3;
      swift_errorRetain();
      uint64_t v24 = v23;
      swift_errorRetain();
      BOOL v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 138412546;
        swift_errorRetain();
        id v28 = _swift_stdlib_bridgeErrorToNSError();
        unint64_t v31 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v30 = v28;
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v27 + 12) = 2112;
        unint64_t v31 = v24;
        uint64_t v29 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v30[1] = v24;

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error %@ executing query: %@", (uint8_t *)v27, 0x16u);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        BOOL v25 = v24;
      }

      unint64_t v31 = v21;
      sub_1000D70C8(&qword_100270020);
      CheckedContinuation.resume(throwing:)();
    }
    return swift_release();
  }
  else
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1000D78F8(v15, (uint64_t)qword_100274460);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "DeviceListBaseProvider - Missing instance", v18, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for DeviceListError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E905C();
    _BridgedStoredNSError.init(_:userInfo:)();
    sub_1000D70C8(&qword_100270020);
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_1000E8E28()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DeviceListBaseProvider()
{
  return self;
}

void sub_1000E8E84(uint64_t a1)
{
  sub_1000E8690(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000E8E8C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E8EC4()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270020);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000E8FB0()
{
  uint64_t v1 = *(void *)(sub_1000D70C8(&qword_100270020) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000E8894(v3, v0 + v2, v4);
}

uint64_t sub_1000E9044(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E9054()
{
  return swift_release();
}

unint64_t sub_1000E905C()
{
  unint64_t result = qword_10026FE68;
  if (!qword_10026FE68)
  {
    type metadata accessor for DeviceListError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10026FE68);
  }
  return result;
}

void sub_1000E90B4(uint64_t a1, unint64_t a2)
{
  id v11 = [self sharedInstance];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v11 authKitAccountWithAltDSID:v4];

  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    [v11 setDeviceListVersion:v6 forAccount:v5];
  }
  else
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1000D78F8(v7, (uint64_t)qword_100274460);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      sub_100158C6C(a1, a2, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing authkit account for altDSID %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1000E9320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[26] = a6;
  v7[27] = v6;
  v7[24] = a4;
  v7[25] = a5;
  v7[22] = a2;
  v7[23] = a3;
  v7[21] = a1;
  return _swift_task_switch(sub_1000E93BC, 0, 0);
}

uint64_t sub_1000E93BC()
{
  uint64_t v1 = *(void **)(v0[27] + 16);
  v0[28] = [v1 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  v0[29] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v24 = v1;
    BOOL v25 = v0 + 15;
    os_log_type_t v26 = v0 + 10;
    uint64_t v4 = v0[26];
    uint64_t v6 = v0[23];
    uint64_t v5 = v0[24];
    uint64_t v8 = v0[21];
    uint64_t v7 = v0[22];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v6, v5, 0x64695F70756F7267, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v8, v7, 0xD000000000000011, 0x80000001001C37C0, v10);
    swift_bridgeObjectRelease();
    if (v4)
    {
      uint64_t v12 = v0[25];
      uint64_t v11 = v0[26];
      swift_bridgeObjectRetain();
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      sub_10013EE88(v12, v11, 0x745F646572616873, 0xEC0000006E656B6FLL, v13);
      swift_bridgeObjectRelease();
    }
    sub_1000D70C8((uint64_t *)&unk_100270530);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1001B81D0;
    *(void *)(v14 + 32) = &_swiftEmptyDictionarySingleton;
    v0[13] = sub_1000D70C8(&qword_100270960);
    v0[10] = v14;
    sub_1000D7CC4(v26, v25);
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34(v25, 0x6E695F70756F7267, 0xEA00000000006F66, v15);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6B94((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    v0[2] = v0;
    v0[7] = v25;
    v0[3] = sub_1000E98A8;
    uint64_t v17 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000F731C;
    v0[13] = &unk_10022C008;
    v0[14] = v17;
    [v24 executeRequestWithCompletion:v26];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1000D78F8(v18, (uint64_t)qword_100274490);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to unshare due to an invalid request", v21, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[10] = -16007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_1000E98A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E9FB8;
  }
  else {
    uint64_t v2 = sub_1000E99E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E99E4()
{
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = self;
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 152) = 25445;
      *(void *)(v0 + 160) = 0xE200000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10014A078(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 80);
      if (!*(void *)(v0 + 144))
      {
        sub_1000E79A4(v0 + 120);
LABEL_25:
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_1000D78F8(v27, (uint64_t)qword_100274490);
        id v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully unshared account", v30, 2u);
          swift_slowDealloc();
          sub_1000D89E8(v4, v3);
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          sub_1000D89E8(v4, v3);
        }

        os_log_type_t v26 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_31;
      }
      if ((swift_dynamicCast() & 1) == 0 || !*(void *)(v0 + 152)) {
        goto LABEL_25;
      }
    }
    else
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_1000D78F8(v16, (uint64_t)qword_100274490);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unshare account request failed. Invalid response data", v19, 2u);
        swift_slowDealloc();
      }
    }
    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v15 = v7;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v4, v3);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000D78F8(v20, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)id v23 = 138412290;
    swift_errorRetain();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v25;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unshare account request failed. Error occurred while executing the request - %@", v23, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  os_log_type_t v26 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v26();
}

uint64_t sub_1000E9FB8()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unshare account request failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000EA1EC(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  return _swift_task_switch(sub_1000EA280, 0, 0);
}

uint64_t sub_1000EA280()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 184) + 16);
  *(void *)(v0 + 192) = [v1 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 200) = v2;
  if (v2)
  {
    os_log_type_t v3 = (void *)v2;
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 176);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v17 = v1;
    sub_10013EE88(v4, v5, 0x64695F70756F7267, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_1000D70C8((uint64_t *)&unk_100270530);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1001B81D0;
    *(void *)(v7 + 32) = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 104) = sub_1000D70C8(&qword_100270960);
    *(void *)(v0 + 80) = v7;
    sub_1000D7CC4((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34((_OWORD *)(v0 + 120), 0x6E695F70756F7267, 0xEA00000000006F66, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6B94((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_1000EA6B0;
    uint64_t v10 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000F731C;
    *(void *)(v0 + 104) = &unk_10022C038;
    *(void *)(v0 + 112) = v10;
    [v17 executeRequestWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1000D78F8(v11, (uint64_t)qword_100274490);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      char v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to unshare due to an invalid request", v14, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 80) = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    id v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_1000EA6B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EADC0;
  }
  else {
    uint64_t v2 = sub_1000EA7EC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EA7EC()
{
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    char v8 = self;
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 152) = 25445;
      *(void *)(v0 + 160) = 0xE200000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10014A078(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 80);
      if (!*(void *)(v0 + 144))
      {
        sub_1000E79A4(v0 + 120);
LABEL_25:
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_1000D78F8(v27, (uint64_t)qword_100274490);
        id v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully unshared all accounts in the group", v30, 2u);
          swift_slowDealloc();
          sub_1000D89E8(v4, v3);
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          sub_1000D89E8(v4, v3);
        }

        os_log_type_t v26 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_31;
      }
      if ((swift_dynamicCast() & 1) == 0 || !*(void *)(v0 + 152)) {
        goto LABEL_25;
      }
    }
    else
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_1000D78F8(v16, (uint64_t)qword_100274490);
      id v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unshare account request failed. Invalid response data", v19, 2u);
        swift_slowDealloc();
      }
    }
    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v15 = v7;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v4, v3);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000D78F8(v20, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)id v23 = 138412290;
    swift_errorRetain();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v25;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unshare account request failed. Error occurred while executing the request - %@", v23, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  os_log_type_t v26 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v26();
}

uint64_t sub_1000EADC0()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unshare account request failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000EAFF4(uint64_t a1)
{
  *(void *)(v2 + 232) = a1;
  *(void *)(v2 + 240) = v1;
  return _swift_task_switch(sub_1000EB084, 0, 0);
}

uint64_t sub_1000EB084()
{
  uint64_t v1 = v0 + 18;
  uint64_t v2 = v0 + 23;
  os_log_type_t v3 = *(void **)(v0[30] + 16);
  v0[31] = [v3 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v4 = swift_dynamicCastClass();
  v0[32] = v4;
  if (!v4)
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 == -1)
    {
LABEL_13:
      uint64_t v25 = type metadata accessor for Logger();
      sub_1000D78F8(v25, (uint64_t)qword_100274490);
      os_log_type_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to unshare due to an invalid request", v28, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SignInWithAppleError(0);
      v0[18] = -16007;
      sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000E22B8();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      os_log_type_t v29 = (uint64_t (*)(void))v0[1];
      return v29();
    }
LABEL_24:
    swift_once();
    goto LABEL_13;
  }
  id v35 = (id)v4;
  uint64_t v5 = v0[29];
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    Swift::String v34 = v3;
    sub_1000D70C8((uint64_t *)&unk_100271C10);
    swift_bridgeObjectRetain();
    uint64_t v7 = (char *)&_swiftEmptyArrayStorage;
    char v8 = (uint64_t *)(v5 + 40);
    while (1)
    {
      uint64_t v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      v0[14] = 0x64695F70756F7267;
      v0[15] = 0xE800000000000000;
      v0[16] = v9;
      v0[17] = v10;
      id v11 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t v12 = v0[14];
      uint64_t v13 = v0[15];
      uint64_t v15 = v0[16];
      uint64_t v14 = v0[17];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v16 = sub_10014A0BC(v12, v13);
      if (v17) {
        break;
      }
      v11[(v16 >> 6) + 8] |= 1 << v16;
      os_log_type_t v18 = (uint64_t *)(v11[6] + 16 * v16);
      *os_log_type_t v18 = v12;
      v18[1] = v13;
      uint64_t v19 = (void *)(v11[7] + 16 * v16);
      *uint64_t v19 = v15;
      v19[1] = v14;
      uint64_t v20 = v11[2];
      BOOL v21 = __OFADD__(v20, 1);
      uint64_t v22 = v20 + 1;
      if (v21) {
        goto LABEL_23;
      }
      v11[2] = v22;
      sub_1000D70C8(&qword_100270550);
      swift_arrayDestroy();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_100135390(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v24 = *((void *)v7 + 2);
      unint64_t v23 = *((void *)v7 + 3);
      if (v24 >= v23 >> 1) {
        uint64_t v7 = sub_100135390((char *)(v23 > 1), v24 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v24 + 1;
      *(void *)&v7[8 * v24 + 32] = v11;
      v8 += 2;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v0 + 23;
        uint64_t v1 = v0 + 18;
        os_log_type_t v3 = v34;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = (char *)&_swiftEmptyArrayStorage;
LABEL_19:
  v0[21] = sub_1000D70C8(&qword_100270960);
  v0[18] = v7;
  sub_1000D7CC4(v1, v2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10013ED34(v2, 0x6E695F70756F7267, 0xEA00000000006F66, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  sub_1000F6B94((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v35 setAuthKitBody:isa];

  swift_unknownObjectRelease();
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = sub_1000EB5EC;
  uint64_t v33 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_1000F731C;
  v0[21] = &unk_10022C020;
  v0[22] = v33;
  [v3 executeRequestWithCompletion:v1];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000EB5EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 264) = v1;
  if (v1) {
    uint64_t v2 = sub_1000EBCFC;
  }
  else {
    uint64_t v2 = sub_1000EB728;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EB728()
{
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v2 = (_OWORD *)(v0 + 184);

  uint64_t v4 = *(void *)(v0 + 192);
  unint64_t v3 = *(void *)(v0 + 200);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 144) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 144];

  uint64_t v7 = *(void **)(v0 + 144);
  if (v6)
  {
    char v8 = self;
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 216) = 25445;
      *(void *)(v0 + 224) = 0xE200000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10014A078(v0 + 144), (v14 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v13, v0 + 184);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 200) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 144);
      if (!*(void *)(v0 + 208))
      {
        sub_1000E79A4(v0 + 184);
LABEL_25:
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_1000D78F8(v27, (uint64_t)qword_100274490);
        id v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully unshared groups", v30, 2u);
          swift_slowDealloc();
          sub_1000D89E8(v4, v3);
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          sub_1000D89E8(v4, v3);
        }

        os_log_type_t v26 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_31;
      }
      if ((swift_dynamicCast() & 1) == 0 || !*(void *)(v0 + 216)) {
        goto LABEL_25;
      }
    }
    else
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_1000D78F8(v16, (uint64_t)qword_100274490);
      char v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unshare groups failed. Invalid response data", v19, 2u);
        swift_slowDealloc();
      }
    }
    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v15 = v7;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v4, v3);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000D78F8(v20, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    unint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v23 = 138412290;
    swift_errorRetain();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v24 = v25;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unshare groups failed. Error occurred while executing the request - %@", v23, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  os_log_type_t v26 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v26();
}

uint64_t sub_1000EBCFC()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unshare groups failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t type metadata accessor for AccountUnsharingService()
{
  return self;
}

NSString sub_1000EBF54()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100274420 = (uint64_t)result;
  return result;
}

NSString sub_1000EBF8C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100274428 = (uint64_t)result;
  return result;
}

id sub_1000EBFDC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ProximityAuthFlowController()) init];
  static ProximityAuthFlowController.shared = (uint64_t)result;
  return result;
}

id SignInWithAppleDaemonService.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

uint64_t *ProximityAuthFlowController.shared.unsafeMutableAddressor()
{
  if (qword_10026F998 != -1) {
    swift_once();
  }
  return &static ProximityAuthFlowController.shared;
}

id static ProximityAuthFlowController.shared.getter()
{
  if (qword_10026F998 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ProximityAuthFlowController.shared;

  return v0;
}

void sub_1000EC200(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_1000D70C8(&qword_1002705D0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_1000EC2B0()
{
  uint64_t v1 = v0;
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)static Logger.akd);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stop Device Discovery for Proximity Apple ID Authentication", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = OBJC_IVAR___AKProximityAuthFlowController_server;
  id v7 = *(void **)(v1 + OBJC_IVAR___AKProximityAuthFlowController_server);
  if (v7)
  {
    [v7 invalidate];
    id v7 = *(void **)(v1 + v6);
  }
  *(void *)(v1 + v6) = 0;
}

uint64_t sub_1000EC3C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1000D70C8(&qword_1002705D0);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1000EC468()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___AKProximityAuthFlowController_context);
  *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_context) = 0;

  uint64_t v2 = (void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  void *v2 = 0;
  v2[1] = 0;
  sub_1000EECD4(v3);
  uint64_t v4 = (void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion);
  void *v4 = 0;
  v4[1] = 0;
  sub_1000EECD4(v5);
  *(unsigned char *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) = 0;
  id v6 = *(void **)(v0 + OBJC_IVAR___AKProximityAuthFlowController_cbManager);
  *(void *)(v0 + OBJC_IVAR___AKProximityAuthFlowController_cbManager) = 0;

  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000D78F8(v7, (uint64_t)static Logger.akd);
  char v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    Class v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Class v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Posting ProximityAppleIDSignInEndNotification...", v10, 2u);
    swift_slowDealloc();
  }

  sub_1000EF4A4();
  id v11 = [(id)swift_getObjCClassFromMetadata() defaultCenter];
  id v12 = v11;
  if (qword_10026F990 != -1)
  {
    swift_once();
    id v11 = v12;
  }
  [v11 postNotificationName:qword_100274428 object:0];
}

void sub_1000EC69C(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000D78F8(v4, (uint64_t)static Logger.akd);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Initiating pairing flow...", v7, 2u);
    swift_slowDealloc();
  }

  id v8 = [self sharedInstance];
  if (v8)
  {
    os_log_type_t v9 = v8;
    Class v10 = *(void **)&v2[OBJC_IVAR___AKProximityAuthFlowController_context];
    id v11 = *(void **)&v2[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v2;
    void v17[4] = sub_1000EED68;
    v17[5] = v12;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    void v17[2] = sub_1000EC3C0;
    v17[3] = &unk_10022C118;
    unint64_t v13 = _Block_copy(v17);
    id v14 = v11;
    id v15 = v2;
    id v16 = v10;
    swift_release();
    [v9 presentProximityPairingUIForContext:v16 client:v14 event:a1 completion:v13];
    _Block_release(v13);
  }
}

void sub_1000EC8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1000D78F8(v6, (uint64_t)static Logger.akd);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Proximity pairing UI called completion...", v9, 2u);
    swift_slowDealloc();
  }

  if (a2)
  {
    swift_errorRetain();
    Class v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Proximity UI finished with error...invalidating server", v12, 2u);
      swift_slowDealloc();
    }

    sub_1000EC2B0();
    unint64_t v13 = *(void (**)(uint64_t, uint64_t))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
    if (v13)
    {
      swift_errorRetain();
      sub_1000EED70((uint64_t)v13);
      v13(a1, a2);
      swift_errorRelease();
      sub_1000EECD4((uint64_t)v13);
    }
    sub_1000EC468();
    swift_errorRelease();
  }
}

void sub_1000ECB04(uint64_t a1)
{
  if (!*(void *)&v1[OBJC_IVAR___AKProximityAuthFlowController_server])
  {
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)static Logger.akd);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v11)) {
      goto LABEL_15;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    unint64_t v13 = "Proximity Auth not in progress, nothing to do ..";
    goto LABEL_14;
  }
  if (v1[OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress] == 1)
  {
    id v3 = [self sharedInstance];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void **)&v1[OBJC_IVAR___AKProximityAuthFlowController_client];
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v1;
      aBlock[4] = sub_1000EED60;
      aBlock[5] = v6;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000EC3C0;
      aBlock[3] = &unk_10022C0C8;
      uint64_t v7 = _Block_copy(aBlock);
      id v8 = v5;
      os_log_type_t v9 = v1;
      swift_release();
      [v4 dismissProximityPairingUIForContext:a1 client:v8 completion:v7];
      _Block_release(v7);
    }
    return;
  }
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_1000D78F8(v14, (uint64_t)static Logger.akd);
  oslog = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    unint64_t v13 = "Skipping endbroadcast, pairing view already in progress ..";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, v13, v12, 2u);
    swift_slowDealloc();
  }
LABEL_15:
}

void sub_1000ECDC0()
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000D78F8(v0, (uint64_t)static Logger.akd);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Dismissed Proximity Pairing UI up ..", v3, 2u);
    swift_slowDealloc();
  }

  sub_1000EC2B0();
  sub_1000EC468();
}

void sub_1000ECF10()
{
  v0[OBJC_IVAR___AKProximityAuthFlowController_authInProgress] = 1;
  id v1 = [self sharedInstance];
  if (v1)
  {
    os_log_type_t v2 = v1;
    id v3 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_server];
    if (v3) {
      id v4 = [v3 messageSessionTemplate];
    }
    else {
      id v4 = 0;
    }
    uint64_t v5 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v6 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_context];
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v0;
    void v12[4] = sub_1000EED40;
    void v12[5] = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_1000EC3C0;
    v12[3] = &unk_10022C078;
    id v8 = _Block_copy(v12);
    id v9 = v6;
    uint64_t v10 = v0;
    id v11 = v5;
    swift_release();
    [v2 activateProximitySession:v4 client:v11 context:v9 completion:v8];
    _Block_release(v8);
  }
}

void sub_1000ED0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1000D78F8(v6, (uint64_t)static Logger.akd);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Proximity based authentication finished, calling end authentication", v9, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(a3 + OBJC_IVAR___AKProximityAuthFlowController_authInProgress) = 0;
  sub_1000EC2B0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  if (v10)
  {
    swift_retain();
    v10(a1, a2);
    sub_1000EECD4((uint64_t)v10);
  }
  sub_1000EC468();
}

Swift::Void __swiftcall ProximityAuthFlowController.centralManagerDidUpdateState(_:)(CBCentralManager a1)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) & 1) == 0)
  {
    uint64_t v2 = v1;
    id v3 = (char *)[(objc_class *)a1.super.super.isa state];
    if ((unint64_t)(v3 - 3) >= 2)
    {
      if (v3 == (char *)5)
      {
        if (qword_10026F9A0 != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        sub_1000D78F8(v12, (uint64_t)static Logger.akd);
        unint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          id v15 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v15 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Bluetooth powered On", v15, 2u);
          swift_slowDealloc();
        }

        if ((*(unsigned char *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_authInProgress) & 1) == 0)
        {
          sub_1000ED5E0();
        }
      }
      else
      {
        if (qword_10026F9A0 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_1000D78F8(v16, (uint64_t)static Logger.akd);
        oslog = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v17))
        {
          os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Bluetooth state unknown", v18, 2u);
          swift_slowDealloc();
        }
      }
    }
    else
    {
      if (qword_10026F9A0 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_1000D78F8(v4, (uint64_t)static Logger.akd);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Bluetooth powered off, cannot proceed with prox auth", v7, 2u);
        swift_slowDealloc();
      }

      if ((*(unsigned char *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_authInProgress) & 1) == 0)
      {
        os_log_type_t v8 = *(void (**)(void, id))(v2 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
        if (v8)
        {
          id v9 = objc_allocWithZone((Class)NSError);
          swift_retain();
          NSString v10 = String._bridgeToObjectiveC()();
          id v11 = [v9 initWithDomain:v10 code:-13010 userInfo:0];

          v8(0, v11);
          sub_1000EECD4((uint64_t)v8);
        }
        sub_1000EC2B0();
        sub_1000EC468();
      }
    }
  }
}

void sub_1000ED5E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_server];
  if (v2)
  {
    id v3 = v2;
    [v3 setPersistentPairing:0];
    [v3 setPasswordType:2];
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v1;
    uint64_t v27 = sub_1000EF4E4;
    uint64_t v28 = v4;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000EE64C;
    os_log_type_t v26 = &unk_10022C1E0;
    uint64_t v5 = _Block_copy(&aBlock);
    id v6 = v3;
    uint64_t v7 = v1;
    swift_release();
    [v6 setEventHandler:v5];
    _Block_release(v5);

    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    uint64_t v27 = sub_1000EF508;
    uint64_t v28 = v8;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000EE6B4;
    os_log_type_t v26 = &unk_10022C230;
    id v9 = _Block_copy(&aBlock);
    id v10 = v6;
    v7;
    swift_release();
    [v10 setPasswordTypeChangedHandler:v9];
    _Block_release(v9);

    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1000D78F8(v11, (uint64_t)static Logger.akd);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Start Device Discovery for Proximity Apple ID Authentication", v14, 2u);
      swift_slowDealloc();
    }

    [v10 activate];
    sub_1000EE708();
  }
  else
  {
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1000D78F8(v15, (uint64_t)static Logger.akd);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Server not found, cannot begin broadcasting...", v18, 2u);
      swift_slowDealloc();
    }

    uint64_t v19 = *(void (**)(void, id))&v1[OBJC_IVAR___AKProximityAuthFlowController_authCompletion];
    if (v19)
    {
      id v20 = objc_allocWithZone((Class)NSError);
      swift_retain();
      NSString v21 = String._bridgeToObjectiveC()();
      id v22 = [v20 initWithDomain:v21 code:-13001 userInfo:0];

      v19(0, v22);
      sub_1000EECD4((uint64_t)v19);
    }
  }
}

id ProximityAuthFlowController.init()()
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_client] = 0;
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_context] = 0;
  uint64_t v2 = &v0[OBJC_IVAR___AKProximityAuthFlowController_authCompletion];
  void *v2 = 0;
  v2[1] = 0;
  id v3 = &v0[OBJC_IVAR___AKProximityAuthFlowController_proxAuthCompletion];
  void *v3 = 0;
  v3[1] = 0;
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_server] = 0;
  *(void *)&v0[OBJC_IVAR___AKProximityAuthFlowController_cbManager] = 0;
  v0[OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress] = 0;
  v0[OBJC_IVAR___AKProximityAuthFlowController_authInProgress] = 0;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

void sub_1000EDBCC(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000D78F8(v4, (uint64_t)static Logger.akd);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v34 = v1;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v36 = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Handler invoked with SetupKit event %@", v8, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v1;
    swift_slowDealloc();
  }
  else
  {
  }
  int v11 = objc_msgSend(v5, "eventType", v34, v36);
  if (v11 <= 109)
  {
    if (v11 == 30 || v11 == 41)
    {
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalidated/connection ended in flowcontroller...", v17, 2u);
        swift_slowDealloc();
      }

      sub_1000EE144();
    }
  }
  else
  {
    switch(v11)
    {
      case 300:
        os_log_type_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Basic Config updated...", v20, 2u);
          swift_slowDealloc();
        }

        break;
      case 140:
        id v21 = [v5 error];
        if (v21)
        {
          id v22 = v21;
          unint64_t v23 = v21;
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v35 = v2;
            os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
            uint64_t v27 = (void *)swift_slowAlloc();
            *(_DWORD *)os_log_type_t v26 = 138412290;
            uint64_t v28 = v23;
            uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v27 = v37;

            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Proximity UI finished with error %@...invalidating server", v26, 0xCu);
            sub_1000D70C8((uint64_t *)&unk_10026FD80);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v2 = v35;
            swift_slowDealloc();
          }
          else
          {

            uint64_t v24 = v23;
          }

          *(unsigned char *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) = 0;
          sub_1000EC2B0();
          uint64_t v32 = *(void (**)(void, id))(v2 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
          if (v32)
          {
            uint64_t v33 = v23;
            sub_1000EED70((uint64_t)v32);
            v32(0, v22);

            sub_1000EECD4((uint64_t)v32);
          }
          else
          {
          }
        }
        else
        {
          os_log_type_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v29, v30))
          {
            unint64_t v31 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v31 = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Proceeding to perform authentication...", v31, 2u);
            swift_slowDealloc();
          }

          sub_1000ECF10();
        }
        break;
      case 110:
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received Setupkit event to present pairing flow", v14, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v2 + OBJC_IVAR___AKProximityAuthFlowController_pairingInProgress) = 1;
        sub_1000EC69C((uint64_t)v5);
        break;
    }
  }
}

void sub_1000EE144()
{
  if (v0[OBJC_IVAR___AKProximityAuthFlowController_authInProgress])
  {
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_1000D78F8(v1, (uint64_t)static Logger.akd);
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Proximity setup is already in progress, messageSession termination will handle clean up, nothing to do ...", v3, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    id v4 = [self sharedInstance];
    if (v4)
    {
      id v5 = v4;
      id v6 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_context];
      os_log_type_t v7 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_client];
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v0;
      aBlock[4] = sub_1000EF534;
      aBlock[5] = v8;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000EC3C0;
      aBlock[3] = &unk_10022C2F8;
      id v9 = _Block_copy(aBlock);
      id v10 = v7;
      int v11 = v0;
      id v12 = v6;
      swift_release();
      [v5 showProximityErrorForContext:v12 client:v10 completion:v9];
      _Block_release(v9);
    }
  }
}

void sub_1000EE370(int a1)
{
  uint64_t v2 = v1;
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000D78F8(v4, (uint64_t)static Logger.akd);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Password type changed...", v7, 2u);
    swift_slowDealloc();
  }

  oslog = Logger.logObject.getter();
  if (a1 == 3)
  {
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Password type changed to 8 digit", v9, 2u);
      swift_slowDealloc();
    }

    id v10 = [self sharedInstance];
    if (v10)
    {
      int v11 = v10;
      id v12 = *(void **)(v2 + OBJC_IVAR___AKProximityAuthFlowController_context);
      os_log_type_t v13 = *(void **)(v2 + OBJC_IVAR___AKProximityAuthFlowController_client);
      aBlock[4] = sub_1000EE980;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E302C;
      aBlock[3] = &unk_10022C2A8;
      os_log_type_t v14 = _Block_copy(aBlock);
      id v15 = v13;
      id v16 = v12;
      [v11 presentProximityPinCodeUIForContext:v16 client:v15 completion:v14];
      _Block_release(v14);
    }
  }
  else
  {
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Unsupported password type", v18, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1000EE64C(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000EE6B4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_1000EE708()
{
  id v1 = [self sharedInstance];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_context];
    id v4 = *(void **)&v0[OBJC_IVAR___AKProximityAuthFlowController_client];
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v0;
    void v10[4] = sub_1000EF52C;
    void v10[5] = v5;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_1000EC3C0;
    v10[3] = &unk_10022C280;
    os_log_type_t v6 = _Block_copy(v10);
    id v7 = v4;
    os_log_type_t v8 = v0;
    id v9 = v3;
    swift_release();
    [v2 presentProximityBroadcastUIForContext:v9 client:v7 completion:v6];
    _Block_release(v6);
  }
}

void sub_1000EE848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1000D78F8(v6, (uint64_t)static Logger.akd);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Proximity Broadcast UI finished", v9, 2u);
    swift_slowDealloc();
  }

  sub_1000EC2B0();
  id v10 = *(void (**)(uint64_t, uint64_t))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  if (v10)
  {
    swift_retain();
    v10(a1, a2);
    sub_1000EECD4((uint64_t)v10);
  }
  sub_1000EC468();
}

void sub_1000EE980(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000D78F8(v2, (uint64_t)static Logger.akd);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Error displaying prox PIN code UI.", v4, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();
  }
  else
  {
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1000D78F8(v5, (uint64_t)static Logger.akd);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Prox PIN Code UI presented.", v7, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1000EEB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000D78F8(v4, (uint64_t)static Logger.akd);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Show Proximity Pairing error up ..", v7, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v8 = *(void (**)(void, id))(a3 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)NSError);
    swift_retain();
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 initWithDomain:v10 code:-130011 userInfo:0];

    v8(0, v11);
    sub_1000EECD4((uint64_t)v8);
  }
  sub_1000EC2B0();
  sub_1000EC468();
}

uint64_t sub_1000EECC4(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  unsigned char *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000EECD4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ProximityAuthFlowController()
{
  return self;
}

uint64_t sub_1000EED08()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000EED40(uint64_t a1, uint64_t a2)
{
  sub_1000ED0A0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000EED48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000EED58()
{
  return swift_release();
}

void sub_1000EED60()
{
}

void sub_1000EED68(uint64_t a1, uint64_t a2)
{
  sub_1000EC8A4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000EED70(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void sub_1000EED80(void *a1, void *a2, void *a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a5;
  uint64_t v11 = OBJC_IVAR___AKProximityAuthFlowController_server;
  if (*(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_server))
  {
    _Block_copy(a5);
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000D78F8(v12, (uint64_t)static Logger.akd);
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Proximity Auth is already in progress...", v15, 2u);
      swift_slowDealloc();
    }

    id v16 = objc_allocWithZone((Class)NSError);
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [v16 initWithDomain:v17 code:-13003 userInfo:0];

    id v35 = (id)_convertErrorToNSError(_:)();
    a5[2](a5, 0);
    swift_release();
  }
  else
  {
    os_log_type_t v19 = *(void **)(a4 + OBJC_IVAR___AKProximityAuthFlowController_client);
    *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_client) = a1;
    _Block_copy(a5);

    id v20 = *(void **)(a4 + OBJC_IVAR___AKProximityAuthFlowController_context);
    *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_context) = a2;
    id v21 = a1;

    id v22 = *(void **)(a4 + v11);
    *(void *)(a4 + v11) = a3;
    id v23 = a2;

    uint64_t v24 = (void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
    uint64_t v25 = *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_authCompletion);
    *uint64_t v24 = sub_1000EF53C;
    v24[1] = v10;
    id v26 = a3;
    sub_1000EECD4(v25);
    id v27 = objc_allocWithZone((Class)CBCentralManager);
    swift_retain();
    id v28 = [v27 initWithDelegate:a4 queue:0];
    os_log_type_t v29 = *(void **)(a4 + OBJC_IVAR___AKProximityAuthFlowController_cbManager);
    *(void *)(a4 + OBJC_IVAR___AKProximityAuthFlowController_cbManager) = v28;

    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_1000D78F8(v30, (uint64_t)static Logger.akd);
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Posting ProximityAppleIDSignInBeganNotification...", v33, 2u);
      swift_slowDealloc();
    }

    sub_1000EF4A4();
    id v34 = [(id)swift_getObjCClassFromMetadata() defaultCenter];
    id v35 = v34;
    if (qword_10026F988 != -1)
    {
      swift_once();
      id v34 = v35;
    }
    [v34 postNotificationName:qword_100274420 object:0];
    swift_release();
  }
}

void sub_1000EF13C(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR___AKProximityAuthFlowController_server);
  _Block_copy(a2);
  if (v5)
  {
    sub_1000EC2B0();
    id v6 = [self sharedInstance];
    if (v6)
    {
      id v7 = v6;
      os_log_type_t v8 = *(void **)(a1 + OBJC_IVAR___AKProximityAuthFlowController_context);
      id v9 = *(void **)(a1 + OBJC_IVAR___AKProximityAuthFlowController_client);
      aBlock[4] = sub_1000EF49C;
      aBlock[5] = v4;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000EC3C0;
      aBlock[3] = &unk_10022C168;
      uint64_t v10 = _Block_copy(aBlock);
      id v11 = v9;
      swift_retain();
      id v12 = v8;
      swift_release();
      [v7 dismissProximityPairingUIForContext:v12 client:v11 completion:v10];
      _Block_release(v10);

      sub_1000EC468();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    if (qword_10026F9A0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000D78F8(v13, (uint64_t)static Logger.akd);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Proximity Auth not in progress", v16, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v17 = objc_allocWithZone((Class)NSError);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v19 = [v17 initWithDomain:v18 code:-13005 userInfo:0];

    id v20 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, void, id))a2)[2](a2, 0, v20);
    swift_release();
  }
}

uint64_t sub_1000EF464()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000EF49C(objc_class *a1, uint64_t a2)
{
  sub_1000EC200(a1, a2, *(void *)(v2 + 16));
}

unint64_t sub_1000EF4A4()
{
  unint64_t result = qword_1002705D8;
  if (!qword_1002705D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002705D8);
  }
  return result;
}

void sub_1000EF4E4(void *a1)
{
}

void sub_1000EF508(int a1)
{
}

void sub_1000EF52C(uint64_t a1, uint64_t a2)
{
  sub_1000EE848(a1, a2, *(void *)(v2 + 16));
}

void sub_1000EF534(uint64_t a1, uint64_t a2)
{
  sub_1000EEB3C(a1, a2, *(void *)(v2 + 16));
}

id sub_1000EF5AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v8 = 0;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for AccountRevokingRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v7, "validateResponseData:error:", isa, &v8);

  if (v4) {
    return v8;
  }
  id v6 = v8;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return (id)swift_willThrow();
}

id sub_1000EFA2C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccountRevokingRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccountRevokingRequestProvider()
{
  return self;
}

BOOL sub_1000EFAB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000EFACC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000EFB14()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000EFB40()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000EFB84()
{
  if (*v0) {
    return 0x7461446465766173;
  }
  else {
    return 0xD000000000000015;
  }
}

uint64_t sub_1000EFBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000F0D0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EFBF0()
{
  return 0;
}

void sub_1000EFBFC(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000EFC08(uint64_t a1)
{
  unint64_t v2 = sub_1000F0714();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EFC44(uint64_t a1)
{
  unint64_t v2 = sub_1000F0714();

  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_1000EFC80()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedGroupsMembershipInfo();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000EFD38()
{
  return type metadata accessor for SharedGroupsMembershipInfo();
}

uint64_t type metadata accessor for SharedGroupsMembershipInfo()
{
  uint64_t result = qword_100270638;
  if (!qword_100270638) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000EFD8C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000EFE2C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000D70C8(&qword_100270690);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000E2310(a1, a1[3]);
  sub_1000F0714();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants);
  v10[7] = 0;
  sub_1000D70C8(&qword_100270658);
  sub_1000F1174();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    void v10[6] = 1;
    type metadata accessor for Date();
    sub_1000F1274(&qword_1002706A8, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_1000F000C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D70C8(&qword_100270648);
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  id v23 = a1;
  id v12 = sub_1000E2310(a1, v11);
  sub_1000F0714();
  uint64_t v13 = v3;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_1000E2354((uint64_t)v23);

    type metadata accessor for SharedGroupsMembershipInfo();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v14 = v5;
    uint64_t v15 = v21;
    sub_1000D70C8(&qword_100270658);
    char v25 = 0;
    sub_1000F0768();
    uint64_t v16 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v13[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants] = v26;
    LOBYTE(v26) = 1;
    sub_1000F1274(&qword_100270678, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v13[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate], v7, v14);

    NSString v18 = (objc_class *)type metadata accessor for SharedGroupsMembershipInfo();
    v24.receiver = v13;
    v24.super_class = v18;
    id v12 = objc_msgSendSuper2(&v24, "init");
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v16);
    sub_1000E2354((uint64_t)v23);
  }
  return v12;
}

void *sub_1000F038C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for SharedGroupsMembershipInfo());
  uint64_t result = sub_1000F000C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000F03E4(void *a1)
{
  return sub_1000EFE2C(a1);
}

uint64_t sub_1000F0408(uint64_t a1)
{
  sub_1000F110C(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_1000E79A4((uint64_t)v7);
    goto LABEL_5;
  }
  type metadata accessor for SharedGroupsMembershipInfo();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants);
  uint64_t v3 = *(void *)&v6[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
  swift_bridgeObjectRetain();
  char v4 = sub_1000F04BC(v2, v3);

  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1000F04BC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        return 1;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          return 1;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            return 1;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_24:
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10014A0BC(v15, v16);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v20 = swift_bridgeObjectRetain();
    char v21 = sub_1000F0994(v20, v17);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      return 0;
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8) {
    return 1;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      return 1;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_1000F0714()
{
  unint64_t result = qword_100270650;
  if (!qword_100270650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100270650);
  }
  return result;
}

unint64_t sub_1000F0768()
{
  unint64_t result = qword_100270660;
  if (!qword_100270660)
  {
    sub_1000F0804(&qword_100270658);
    sub_1000F1210(&qword_100270668);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100270660);
  }
  return result;
}

uint64_t sub_1000F0804(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

id sub_1000F084C(void *a1)
{
  id v3 = v1;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for SharedGroupsMembershipInfo();
  sub_1000F1274(&qword_100270680, (void (*)(uint64_t))type metadata accessor for SharedGroupsMembershipInfo);
  uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v2)
  {

    swift_release();
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    swift_release();
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v10 = sub_1000F0C1C();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v3 = [v9 initWithDescriptor:v10 value:isa];

    sub_1000D89E8(v7, v8);
  }
  return v3;
}

uint64_t sub_1000F0994(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        id v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 4;
  if (v3 + 4 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

id sub_1000F0C1C()
{
  id v0 = [objc_allocWithZone((Class)AAFKeychainItemDescriptor) init];
  [v0 setItemClass:1];
  [v0 setAccessGroup:AKSignInWithAppleKeychainAccessGroup];
  [v0 setSynchronizable:2];
  [v0 setItemAccessible:2];
  [v0 setUseDataProtection:2];
  [v0 setInvisible:2];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setService:v1];

  return v0;
}

uint64_t sub_1000F0D0C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000001001C3B50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461446465766173 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000F0E08(void *a1)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 value];
  if (v7)
  {
    unint64_t v8 = v7;
    uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    unint64_t v11 = (objc_class *)type metadata accessor for SharedGroupsMembershipInfo();
    sub_1000F1274(&qword_100270688, (void (*)(uint64_t))type metadata accessor for SharedGroupsMembershipInfo);
    uint64_t v21 = v2;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v1)
    {

      sub_1000D89E8(v21, v10);
      swift_release();
    }
    else
    {
      swift_release();
      unint64_t v18 = v10;
      id v19 = v24;
      uint64_t v12 = *(void *)&v24[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
      uint64_t v13 = v20;
      id v17 = a1;
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      v14(v6, &v24[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate], v4);
      uint64_t v15 = (char *)objc_allocWithZone(v11);
      *(void *)&v15[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants] = v12;
      v14(&v15[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate], v6, v4);
      v22.receiver = v15;
      v22.super_class = v11;
      swift_bridgeObjectRetain();
      uint64_t v2 = (uint64_t)objc_msgSendSuper2(&v22, "init");
      (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v4);

      sub_1000D89E8(v21, v18);
    }
  }
  else
  {
    type metadata accessor for SignInWithAppleError(0);
    uint64_t v23 = -16009;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000F1274((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1000F110C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8(&qword_10026FD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F1174()
{
  unint64_t result = qword_100270698;
  if (!qword_100270698)
  {
    sub_1000F0804(&qword_100270658);
    sub_1000F1210(&qword_1002706A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100270698);
  }
  return result;
}

uint64_t sub_1000F1210(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000F0804(&qword_100270670);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F1274(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for SharedGroupsMembershipInfo.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SharedGroupsMembershipInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SharedGroupsMembershipInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F1424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1000F144C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000F1458(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SharedGroupsMembershipInfo.CodingKeys()
{
  return &type metadata for SharedGroupsMembershipInfo.CodingKeys;
}

unint64_t sub_1000F1478()
{
  unint64_t result = qword_1002706B0;
  if (!qword_1002706B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002706B0);
  }
  return result;
}

unint64_t sub_1000F14D0()
{
  unint64_t result = qword_1002706B8;
  if (!qword_1002706B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002706B8);
  }
  return result;
}

unint64_t sub_1000F1528()
{
  unint64_t result = qword_1002706C0;
  if (!qword_1002706C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002706C0);
  }
  return result;
}

uint64_t sub_1000F157C(uint64_t a1)
{
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 192) = v1;
  return _swift_task_switch(sub_1000F160C, 0, 0);
}

uint64_t sub_1000F160C()
{
  if ([*(id *)(*(void *)(v0 + 192) + 16) isSiwaInPasswordsFeatureEnabled])
  {
    sub_1000F2758();
    id v1 = [*(id *)(v0 + 184) signInWithAppleAccount];
    *(void *)(v0 + 200) = v1;
    if (v1)
    {
      id v2 = v1;
      id v3 = [*(id *)(v0 + 184) altDSID];
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;

      *(void *)(v0 + 208) = v6;
      BOOL v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v7;
      *BOOL v7 = v0;
      v7[1] = sub_1000F19A0;
      uint64_t v8 = *(void *)(v0 + 192);
      v7[18] = v6;
      v7[19] = v8;
      uint8_t v7[16] = v2;
      v7[17] = v4;
      return _swift_task_switch(sub_1000F29C8, 0, 0);
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    unint64_t v9 = (uint64_t *)(v0 + 128);
    uint64_t v16 = type metadata accessor for Logger();
    sub_1000D78F8(v16, (uint64_t)qword_100274490);
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No SIWA account set in context.", v19, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v14 = -16007;
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    unint64_t v9 = (uint64_t *)(v0 + 152);
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_100274490);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Feature flag SiwaInPasswords is not enabled", v13, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v14 = -16001;
  }
  *unint64_t v9 = v14;
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_1000F19A0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[28] = a2;
  v5[29] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = sub_1000F2620;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5[30] = a1;
    uint64_t v6 = sub_1000F1AF8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F1AF8()
{
  sub_1000E2310((void *)(v0[24] + 48), *(void *)(v0[24] + 72));
  id v1 = (void *)swift_task_alloc();
  v0[31] = v1;
  *id v1 = v0;
  v1[1] = sub_1000F1BD4;
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[25];
  return sub_1000E6AC0(v4, v2, v3);
}

uint64_t sub_1000F1BD4()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F1E94;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000F1D24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F1D24()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 192) + 32);
  NSString v2 = [*(id *)(v0 + 200) clientID];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 264) = v2;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 280;
  *(void *)(v0 + 24) = sub_1000F1F2C;
  uint64_t v3 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1001394A0;
  *(void *)(v0 + 104) = &unk_10022C3C0;
  *(void *)(v0 + 112) = v3;
  [v1 removeApplicationWithClientID:v2 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1000F1E94()
{
  uint64_t v1 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease();

  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F1F2C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 272) = v1;
  if (v1) {
    NSString v2 = sub_1000F26B4;
  }
  else {
    NSString v2 = sub_1000F2068;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F2068()
{
  uint64_t v49 = v0;

  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274490);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  BOOL v7 = *(void **)(v0 + 200);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v7 clientID];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    *(void *)(v0 + 136) = sub_100158C6C(v10, v12, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully revoked %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v13 = [*(id *)(v0 + 200) shareInfo];
  if (v13)
  {
    uint64_t v14 = v0 + 160;
    uint64_t v15 = *(void **)(v0 + 200);

    id v16 = v15;
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void **)(v0 + 200);
    if (v19)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      id v22 = [v20 clientID];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      uint64_t v26 = v23;
      uint64_t v14 = v0 + 160;
      *(void *)(v0 + 176) = sub_100158C6C(v26, v25, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "The account for %s was also previously shared. Removing the keychain item.", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v27 = *(void *)(v0 + 200);
    BOOL v28 = *(void **)(*(void *)(v0 + 192) + 40);
    *(void *)(v0 + 160) = 0;
    unsigned int v29 = [v28 removeSharedAccount:v27 error:v14];
    int64_t v30 = *(void **)(v0 + 160);
    if (v29)
    {
      id v31 = v30;
    }
    else
    {
      os_log_type_t v32 = *(void **)(v0 + 200);
      id v33 = v30;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      id v34 = v32;
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      BOOL v37 = os_log_type_enabled(v35, v36);
      uint64_t v38 = *(void **)(v0 + 200);
      if (v37)
      {
        id v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)id v39 = 136315138;
        id v40 = [v38 clientID];
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v43 = v42;

        *(void *)(v0 + 168) = sub_100158C6C(v41, v43, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "An error occurred while removing shared account for %s.", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_errorRelease();
    }
  }
  id v44 = *(void **)(v0 + 200);
  id v45 = [self defaultCenter];
  [v45 postNotificationName:AKSignInWithAppleAccountsListChangedNotification object:0];

  unsigned int v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_1000F2620()
{
  uint64_t v1 = *(void **)(v0 + 200);
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F26B4()
{
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = (void *)v0[25];
  swift_willThrow();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000F2758()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing Entitlement Check", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 24);
  if (([v5 hasInternalAccess] & 1) != 0
    || [v5 hasPrivateAccess])
  {
    BOOL v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client has necessary permission for accounts revoking", v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client doesn't have access to perform account revoking", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return 1;
}

uint64_t sub_1000F29A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  uint8_t v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_1000F29C8, 0, 0);
}

uint64_t sub_1000F29C8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 152) + 32);
  NSString v2 = [*(id *)(v0 + 128) clientID];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 160) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 168) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_1000F2B24;
  uint64_t v4 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1000D91D4;
  *(void *)(v0 + 104) = &unk_10022C3D8;
  *(void *)(v0 + 112) = v4;
  [v1 fetchDeveloperTeamWithClientID:v2 withAltDSID:v3 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1000F2B24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    NSString v2 = sub_1000F3210;
  }
  else {
    NSString v2 = sub_1000F2C34;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F2C34()
{
  uint64_t v56 = v0;
  uint64_t v1 = (void *)(v0 + 120);
  NSString v2 = *(void **)(v0 + 120);
  NSString v3 = *(void **)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 128);

  id v5 = [v2 apps];
  sub_1000F3304();
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [v4 clientID];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (*(void *)(v6 + 16) && (sub_10014A0BC(v8, v10), (v11 & 1) != 0))
  {
    unint64_t v12 = *(void **)(v0 + 128);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v13 = [v12 userID];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    id v17 = [v2 userIdentifier];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (v14 == v18 && v16 == v20)
    {
      swift_bridgeObjectRelease_n();
LABEL_16:
      id v43 = [v2 teamID];
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v45 = v2;
      uint64_t v47 = v46;

      uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v48(v44, v47);
    }
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_16;
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_1000D78F8(v49, (uint64_t)qword_100274490);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      id v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "User identfier doesn't match", v52, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *uint64_t v1 = -16007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v21 = *(void **)(v0 + 128);
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_100274490);
    id v23 = v2;
    id v24 = v21;
    id v25 = v23;
    id v26 = v24;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    int64_t v30 = *(void **)(v0 + 128);
    if (v29)
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      v55[0] = v54;
      os_log_type_t type = v28;
      id v32 = [v25 teamID];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      *(void *)(v0 + 80) = sub_100158C6C(v33, v35, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v31 + 12) = 2080;
      id v36 = [v30 clientID];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      *(void *)(v0 + 80) = sub_100158C6C(v37, v39, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v27, type, "Developer team %s doesn't have the app with client id %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for SignInWithAppleError(0);
    *uint64_t v1 = -16007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
  }
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();

  id v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

uint64_t sub_1000F3210()
{
  uint64_t v1 = (void *)v0[21];
  NSString v2 = (void *)v0[20];
  swift_willThrow();

  NSString v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000F3288()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000E2354(v0 + 48);

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for AccountRevokingController()
{
  return self;
}

unint64_t sub_1000F3304()
{
  unint64_t result = qword_1002707A8;
  if (!qword_1002707A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002707A8);
  }
  return result;
}

void sub_1000F33A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D70C8(&qword_100270800);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = *(void **)(a2 + OBJC_IVAR___AKAppleIDPasskeyCredentialProvider_authorizationController);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_1000F3F40;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F3BA4;
  aBlock[3] = &unk_10022C490;
  unint64_t v12 = _Block_copy(aBlock);
  swift_release();
  [v9 createPasskeyWithContext:a3 completion:v12];
  _Block_release(v12);
}

uint64_t sub_1000F36D8(void *a1, void *aBlock, void *a3)
{
  v3[3] = a1;
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_1000F3764, 0, 0);
}

uint64_t sub_1000F3764()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  NSString v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  unint64_t v3 = sub_1000F3E6C();
  void *v2 = v0;
  v2[1] = sub_1000F3868;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000017, 0x80000001001C3D00, sub_1000F3E64, v1, v3);
}

uint64_t sub_1000F3868()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    NSString v2 = sub_1000F3A14;
  }
  else
  {
    swift_task_dealloc();
    NSString v2 = sub_1000F3984;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F3984()
{
  uint64_t v1 = *(void **)(v0 + 32);
  NSString v2 = *(void (***)(void, void, void))(v0 + 40);

  unint64_t v3 = *(void **)(v0 + 16);
  ((void (**)(void, void *, void))v2)[2](v2, v3, 0);
  _Block_release(v2);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000F3A14()
{
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 40);
  NSString v2 = *(void **)(v0 + 32);

  swift_task_dealloc();
  unint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  ((void (**)(void, void, void *))v1)[2](v1, 0, v3);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000F3AC8(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = a1;
    sub_1000D70C8(&qword_100270800);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (!a2)
    {
      type metadata accessor for AppleIDPasskeyError(0);
      sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000DBBA0();
      _BridgedStoredNSError.init(_:userInfo:)();
    }
    swift_errorRetain();
    sub_1000D70C8(&qword_100270800);
    return CheckedContinuation.resume(throwing:)();
  }
}

void sub_1000F3BA4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t type metadata accessor for AppleIDPasskeyCredentialProvider()
{
  return self;
}

uint64_t sub_1000F3C94()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F3CDC()
{
  id v2 = (void *)v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1002707E8 + dword_1002707E8);
  return v6(v2, v3, v4);
}

uint64_t sub_1000F3D98(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_1000F3E64(uint64_t a1)
{
  sub_1000F33A0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1000F3E6C()
{
  unint64_t result = qword_1002707F8;
  if (!qword_1002707F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002707F8);
  }
  return result;
}

uint64_t sub_1000F3EAC()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270800);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F3F40(void *a1, uint64_t a2)
{
  sub_1000D70C8(&qword_100270800);

  return sub_1000F3AC8(a1, a2);
}

uint64_t sub_1000F3FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F3FD4()
{
  return swift_release();
}

void sub_1000F4034(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_1000D70C8(&qword_100270850);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___AKPrivateEmailRegistrationService_serviceController);
  id v9 = [v8 requestProvider];
  type metadata accessor for PrivateEmailRegistrationRequestProvider();
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    id v74 = v8;
    uint64_t v75 = a2;
    uint64_t v76 = v5;
    [a1 sanitiseInternalState];
    id v12 = [a1 originType];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0)
          {
            uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v62 = v61;
            if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v64 & 1) == 0)
              {
                id v36 = &_swiftEmptyDictionarySingleton;
                goto LABEL_18;
              }
            }
            id v65 = [a1 key];
            uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v68 = v67;

            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            sub_10013EE88(v66, v68, 0x6E69616D6F64, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
            id v70 = [a1 metadataString];
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v73 = v72;

            char v31 = swift_isUniquelyReferenced_nonNull_native();
            aBlock[0] = &_swiftEmptyDictionarySingleton;
            uint64_t v78 = (void *)0x8000000000000000;
            uint64_t v32 = v71;
            uint64_t v33 = v73;
            uint64_t v34 = 0x746E61686372656DLL;
            uint64_t v35 = 0xEA00000000006449;
            goto LABEL_17;
          }
        }

        id v45 = [a1 key];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        char v49 = swift_isUniquelyReferenced_nonNull_native();
        sub_10013EE88(v46, v48, 0x6E69616D6F64, 0xE600000000000000, v49);
        swift_bridgeObjectRelease();
        id v50 = [a1 metadataString];
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v52;

        char v54 = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = &_swiftEmptyDictionarySingleton;
        sub_10013EE88(v51, v53, 0x746E61686372656DLL, 0xEA00000000006449, v54);
        uint64_t v78 = &_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease();
        id v55 = [a1 originIdentifier];
        if (!v55)
        {
          sub_100126540(0x6C646E7542707061, 0xEB00000000644965);
          swift_bridgeObjectRelease();
          id v36 = v78;
          goto LABEL_18;
        }
        uint64_t v56 = v55;
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v59 = v58;

        char v31 = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = &_swiftEmptyDictionarySingleton;
        uint64_t v78 = (void *)0x8000000000000000;
        uint64_t v32 = v57;
        uint64_t v33 = v59;
        uint64_t v34 = 0x6C646E7542707061;
        uint64_t v35 = 0xEB00000000644965;
LABEL_17:
        sub_10013EE88(v32, v33, v34, v35, v31);
        id v36 = (void *)aBlock[0];
        swift_bridgeObjectRelease();
LABEL_18:
        swift_unknownObjectRetain();
        sub_1000F6F5C((uint64_t)v36);
        swift_bridgeObjectRelease();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v11 setAuthKitBody:isa];
        swift_unknownObjectRelease();

        uint64_t v38 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v75, v76);
        unint64_t v39 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        unint64_t v40 = (v7 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v41 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v41 + v39, (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v38);
        *(void *)(v41 + v40) = v11;
        *(void *)(v41 + ((v40 + 15) & 0xFFFFFFFFFFFFFFF8)) = a1;
        aBlock[4] = sub_1000F6004;
        aBlock[5] = v41;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1001435F8;
        aBlock[3] = &unk_10022C638;
        char v42 = _Block_copy(aBlock);
        swift_unknownObjectRetain();
        id v43 = a1;
        swift_release();
        [v74 executeRequestWithCompletion:v42];
        swift_unknownObjectRelease();
        _Block_release(v42);
        return;
      }
    }

    id v27 = [a1 key];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    char v31 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = &_swiftEmptyDictionarySingleton;
    uint64_t v78 = (void *)0x8000000000000000;
    uint64_t v32 = v28;
    uint64_t v33 = v30;
    uint64_t v34 = 0x6E65697069636572;
    uint64_t v35 = 0xEE006C69616D4574;
    goto LABEL_17;
  }
  swift_unknownObjectRelease();
  if (qword_10026F9B8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_1000D78F8(v23, (uint64_t)qword_100274478);
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to register private email", v26, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for PrivateEmailError(0);
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000F5CA8();
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v78 = (void *)aBlock[0];
  CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1000F4A08(void *a1, void *aBlock, void *a3)
{
  v3[3] = a1;
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_1000F4A94, 0, 0);
}

uint64_t sub_1000F4A94()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  unint64_t v3 = sub_1000F5C68();
  void *v2 = v0;
  v2[1] = sub_1000F4B98;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001ALL, 0x80000001001C3E00, sub_1000F5F14, v1, v3);
}

uint64_t sub_1000F4B98()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F6138;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000F613C;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1000F4CB4(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_1000D70C8(&qword_100270850);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___AKPrivateEmailRegistrationService_serviceController);
  id v9 = [v8 requestProvider];
  type metadata accessor for PrivateEmailRegistrationRequestProvider();
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    id v42 = v8;
    uint64_t v43 = a2;
    uint64_t v44 = v5;
    [a1 sanitiseInternalState];
    id v12 = [a1 metadataString];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    swift_bridgeObjectRelease();
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      id v17 = [a1 metadataString];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = &_swiftEmptyDictionarySingleton;
      uint64_t v22 = v18;
      uint64_t v23 = v20;
      uint64_t v24 = 0x746E61686372656DLL;
      uint64_t v25 = 0xEA00000000006449;
    }
    else
    {
      id v30 = [a1 originIdentifier];
      if (!v30) {
        id v30 = [a1 key];
      }
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = &_swiftEmptyDictionarySingleton;
      uint64_t v22 = v31;
      uint64_t v23 = v33;
      uint64_t v24 = 0x6449746E65696C63;
      uint64_t v25 = 0xE800000000000000;
    }
    sub_10013EE88(v22, v23, v24, v25, isUniquelyReferenced_nonNull_native);
    uint64_t v34 = aBlock[0];
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6F5C(v34);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v11 setAuthKitBody:isa];
    swift_unknownObjectRelease();

    uint64_t v36 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v43, v44);
    unint64_t v37 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    unint64_t v38 = (v7 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v39 + v37, (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v36);
    *(void *)(v39 + v38) = v11;
    *(void *)(v39 + ((v38 + 15) & 0xFFFFFFFFFFFFFFF8)) = a1;
    aBlock[4] = sub_1000F5D04;
    aBlock[5] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001435F8;
    aBlock[3] = &unk_10022C570;
    unint64_t v40 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    id v41 = a1;
    swift_release();
    [v42 executeRequestWithCompletion:v40];
    swift_unknownObjectRelease();
    _Block_release(v40);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9B8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_1000D78F8(v26, (uint64_t)qword_100274478);
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to register private email", v29, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for PrivateEmailError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000F5CA8();
    _BridgedStoredNSError.init(_:userInfo:)();
    void aBlock[6] = aBlock[0];
    CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_1000F533C(void *a1, void *aBlock, void *a3)
{
  v3[3] = a1;
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_1000F53C8, 0, 0);
}

uint64_t sub_1000F53C8()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  unint64_t v3 = sub_1000F5C68();
  void *v2 = v0;
  v2[1] = sub_1000F3868;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000027, 0x80000001001C3DD0, sub_1000F5C3C, v1, v3);
}

uint64_t type metadata accessor for PrivateEmailRegistrationService()
{
  return self;
}

uint64_t sub_1000F5534()
{
  uint64_t v2 = (void *)v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100270838 + dword_100270838);
  return v6(v2, v3, v4);
}

uint64_t sub_1000F55E8(int a1, int a2, unint64_t a3, void *a4, int a5, id a6, void *a7, const char *a8, uint64_t a9, uint64_t a10, const char *a11)
{
  if (a4)
  {
    id v12 = a4;
    swift_errorRetain();
    if (qword_10026F9B8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000D78F8(v13, (uint64_t)qword_100274478);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      id v17 = (id *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      swift_errorRetain();
      v40[0] = (id)_swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v17 = v40[0];
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, a8, v16, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_15;
  }
  unint64_t v20 = a3 >> 60;
  if (a3 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  v40[0] = 0;
  unsigned int v22 = [a6 validateResponseData:isa error:v40];

  if (!v22)
  {
    id v25 = v40[0];
    id v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_15:
    v40[0] = v12;
    sub_1000D70C8(&qword_100270850);
    return CheckedContinuation.resume(throwing:)();
  }
  id v23 = v40[0];
  if (v20 <= 0xE) {
    Class v24 = Data._bridgeToObjectiveC()().super.isa;
  }
  else {
    Class v24 = 0;
  }
  id v27 = [self dictionaryFromObject:v24 ofType:@"application/json"];
  swift_unknownObjectRelease();
  if (!v27) {
    goto LABEL_27;
  }
  uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v28 + 16) && (unint64_t v29 = sub_10014A078((uint64_t)v40), (v30 & 1) != 0))
  {
    sub_1000D7C68(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v41);
  }
  else
  {
    long long v41 = 0u;
    long long v42 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000D7ADC((uint64_t)v40);
  if (!*((void *)&v42 + 1))
  {
    sub_1000E79A4((uint64_t)&v41);
    goto LABEL_27;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    if (qword_10026F9B8 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_1000D78F8(v36, (uint64_t)qword_100274478);
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, a11, v39, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for PrivateEmailError(0);
    *(void *)&long long v41 = -11006;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000F5CA8();
    _BridgedStoredNSError.init(_:userInfo:)();
    *(id *)&long long v41 = v40[0];
    sub_1000D70C8(&qword_100270850);
    return CheckedContinuation.resume(throwing:)();
  }
  id v31 = objc_msgSend(a7, "key", a9, a10);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v32 = objc_allocWithZone((Class)AKPrivateEmail);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v35 = [v32 initWithAddress:v33 forKey:v34];

  v40[0] = v35;
  sub_1000D70C8(&qword_100270850);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000F5B70(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_1000F5C3C(uint64_t a1)
{
  sub_1000F4CB4(*(void **)(v1 + 24), a1);
}

unint64_t sub_1000F5C68()
{
  unint64_t result = qword_100270848;
  if (!qword_100270848)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100270848);
  }
  return result;
}

unint64_t sub_1000F5CA8()
{
  unint64_t result = qword_10026FE30;
  if (!qword_10026FE30)
  {
    type metadata accessor for PrivateEmailError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10026FE30);
  }
  return result;
}

uint64_t sub_1000F5D04(int a1, int a2, unint64_t a3, void *a4)
{
  return sub_1000F6034(a1, a2, a3, a4, "Fetch SIWA HME failed. Error occurred while executing the request - %@", 0x6C69616D65, 0xE500000000000000, "Fetch SIWA HME failed. Invalid response data");
}

uint64_t sub_1000F5D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F5D38()
{
  return swift_release();
}

uint64_t sub_1000F5D44()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F5D8C()
{
  uint64_t v2 = (void *)v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100270858 + dword_100270858);
  return v6(v2, v3, v4);
}

uint64_t sub_1000F5E48(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_1000F5F14(uint64_t a1)
{
  sub_1000F4034(*(void **)(v1 + 24), a1);
}

uint64_t sub_1000F5F44()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270850);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1000F6004(int a1, int a2, unint64_t a3, void *a4)
{
  return sub_1000F6034(a1, a2, a3, a4, "HME Registration failed. Error occurred while executing the request - %@", 0x4565746176697270, 0xEC0000006C69616DLL, "HME Registration failed. Invalid response data");
}

uint64_t sub_1000F6034(int a1, int a2, unint64_t a3, void *a4, const char *a5, uint64_t a6, uint64_t a7, const char *a8)
{
  uint64_t v17 = *(void *)(sub_1000D70C8(&qword_100270850) - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v19 = (*(void *)(v17 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000F55E8(a1, a2, a3, a4, (int)v8 + (int)v18, *(id *)(v8 + v19), *(void **)(v8 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8)), a5, a6, a7, a8);
}

uint64_t sub_1000F6140(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000D70C8(&qword_100270938);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    sub_1000D70C8(&qword_1002705D0);
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000D7CC4(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000D7CC4(v35, v36);
    sub_1000D7CC4(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000D7CC4(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000FBD5C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000F64F8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000D70C8(&qword_100270938);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000D70C8(&qword_100270948);
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000D7CC4(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000D7CC4(v35, v36);
    sub_1000D7CC4(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000D7CC4(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000FBD5C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_1000F68B0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000D70C8(&qword_100270950);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v12 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v12 >= v27) {
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(v28 + 8 * v12);
  int64_t v14 = i + 1;
  if (!v13)
  {
    int64_t v14 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v28 + 8 * v14);
    if (!v13)
    {
      int64_t v14 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v28 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v28 + 8 * v14);
        if (!v13)
        {
          int64_t v15 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v13 = *(void *)(v28 + 8 * v15);
            if (v13)
            {
              int64_t v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v14 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                goto LABEL_36;
              }
              if (v14 >= v27) {
                break;
              }
              unint64_t v13 = *(void *)(v28 + 8 * v14);
              ++v15;
              if (v13) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000FBD5C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v13 - 1) & v13;
  unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; unint64_t v11 = v10 | (i << 6))
  {
    int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void **)(*(void *)(a1 + 56) + 8 * v11);
    sub_1000D7D70();
    swift_bridgeObjectRetain();
    id v20 = v19;
    sub_1000D70C8(&qword_1002705D0);
    swift_dynamicCast();
    unint64_t result = sub_10014A0BC(v18, v17);
    unint64_t v21 = result;
    if (v22)
    {
      int64_t v8 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v8 = v18;
      v8[1] = v17;
      uint64_t v9 = v2[7];
      unint64_t result = swift_unknownObjectRelease();
      *(void *)(v9 + 8 * v21) = v29;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v23 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v23 = v18;
    v23[1] = v17;
    *(void *)(v2[7] + 8 * result) = v29;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000F6B94(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000D70C8(&qword_100270938);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000D7C68(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000D7CC4(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000D7CC4(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000D7CC4(v36, v37);
    sub_1000D7CC4(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000D7CC4(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000FBD5C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000F6F5C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000D70C8(&qword_100270938);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000D7CC4(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000D7CC4(v35, v36);
    sub_1000D7CC4(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000D7CC4(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000FBD5C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000F731C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v6 = swift_allocError();
    *unint64_t v7 = a4;
    id v8 = a4;
    a1 = v4;
    a2 = (void *)v6;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  id v10 = a2;
  id v11 = a3;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  int64_t v15 = *(void **)(*(void *)(v4 + 64) + 40);
  *int64_t v15 = v10;
  v15[1] = v12;
  v15[2] = v14;

  return swift_continuation_throwingResume();
}

uint64_t sub_1000F7410(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  return _swift_task_switch(sub_1000F74A4, 0, 0);
}

uint64_t sub_1000F74A4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 184) + 16);
  *(void *)(v0 + 192) = [v1 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 200) = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = *(void **)(v0 + 168);
    id v5 = [*(id *)(v0 + 176) groupID];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v6, v8, 0x64695F70756F7267, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    id v10 = [v4 userID];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v11, v13, 6580597, 0xE300000000000000, v14);
    swift_bridgeObjectRelease();
    id v15 = [v4 clientID];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    char v19 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v16, v18, 0xD000000000000011, 0x80000001001C37C0, v19);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6F5C((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_1000F7948;
    uint64_t v21 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000F731C;
    *(void *)(v0 + 104) = &unk_10022C6A0;
    *(void *)(v0 + 112) = v21;
    objc_msgSend(v1, "executeRequestWithCompletion:");
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_100274490);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to share due to an invalid request", v25, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 120) = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    int64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

uint64_t sub_1000F7948()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_1000F80D4;
  }
  else {
    uint64_t v2 = sub_1000F7A84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F7A84()
{
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = self;
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      strcpy((char *)(v0 + 152), "shared_token");
      *(unsigned char *)(v0 + 165) = 0;
      *(_WORD *)(v0 + 166) = -5120;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10014A078(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if (swift_dynamicCast())
        {
          id v16 = sub_10012EEEC(*(id *)(v0 + 168), *(id *)(v0 + 176), *(void *)(v0 + 152), *(void *)(v0 + 160));
          uint64_t v17 = *(void **)(v0 + 168);

          if (qword_10026F9C0 != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          sub_1000D78F8(v18, (uint64_t)qword_100274490);
          char v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v19, v20))
          {
            uint64_t v21 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v21 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully generated share token", v21, 2u);
            swift_slowDealloc();
            sub_1000D89E8(v4, v3);
            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
            sub_1000D89E8(v4, v3);
          }

          uint64_t v34 = *(uint64_t (**)(id))(v0 + 8);
          return v34(v16);
        }
      }
      else
      {
        sub_1000E79A4(v0 + 120);
      }
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_100274490);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Generate share token failed. Invalid response data", v25, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v15 = v7;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v4, v3);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_1000D78F8(v26, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    long long v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v29 = 138412290;
    swift_errorRetain();
    uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v30 = v31;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Generate share token failed. Error occurred while executing the request - %@", v29, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  long long v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_1000F80D4()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generate share token failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000F8308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[26] = a6;
  v7[27] = v6;
  unsigned char v7[24] = a4;
  v7[25] = a5;
  v7[22] = a2;
  v7[23] = a3;
  v7[21] = a1;
  return _swift_task_switch(sub_1000F83A4, 0, 0);
}

uint64_t sub_1000F83A4()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 216) + 16);
  *(void *)(v0 + 224) = [v1 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 232) = v2;
  if (v2)
  {
    os_log_type_t v3 = (void *)v2;
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v32 = *(void *)(v0 + 184);
    uint64_t v6 = *(void **)(v0 + 168);
    id v34 = v1;
    id v7 = [*(id *)(v0 + 176) groupID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v8, v10, 0x64695F70756F7267, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    id v12 = [v6 userID];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    char v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v13, v15, 6580597, 0xE300000000000000, v16);
    swift_bridgeObjectRelease();
    id v17 = [v6 clientID];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    char v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v18, v20, 0xD000000000000011, 0x80000001001C37C0, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v32, v5, 0x756F72675F646C6FLL, 0xEC00000064695F70, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013EE88(v33, v4, 0xD000000000000010, 0x80000001001C3E40, v23);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6F5C((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_1000F8900;
    uint64_t v25 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000F731C;
    *(void *)(v0 + 104) = &unk_10022C688;
    *(void *)(v0 + 112) = v25;
    objc_msgSend(v34, "executeRequestWithCompletion:");
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_1000D78F8(v26, (uint64_t)qword_100274490);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      long long v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to update share due to an invalid request", v29, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 120) = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
}

uint64_t sub_1000F8900()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 240) = v1;
  if (v1) {
    uint64_t v2 = sub_1000F908C;
  }
  else {
    uint64_t v2 = sub_1000F8A3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F8A3C()
{
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v3 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  id v7 = *(void **)(v0 + 80);
  if (v6)
  {
    uint64_t v8 = self;
    id v9 = v7;
    Class v10 = Data._bridgeToObjectiveC()().super.isa;
    id v11 = [v8 dictionaryFromObject:v10 ofType:@"application/json"];

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      strcpy((char *)(v0 + 152), "shared_token");
      *(unsigned char *)(v0 + 165) = 0;
      *(_WORD *)(v0 + 166) = -5120;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v13 = sub_10014A078(v0 + 80), (v14 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v13, v0 + 120);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        if (swift_dynamicCast())
        {
          id v16 = sub_10012EEEC(*(id *)(v0 + 168), *(id *)(v0 + 176), *(void *)(v0 + 152), *(void *)(v0 + 160));
          id v17 = *(void **)(v0 + 168);

          if (qword_10026F9C0 != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          sub_1000D78F8(v18, (uint64_t)qword_100274490);
          uint64_t v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v19, v20))
          {
            char v21 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v21 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully updated share token", v21, 2u);
            swift_slowDealloc();
            sub_1000D89E8(v4, v3);
            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
            sub_1000D89E8(v4, v3);
          }

          id v34 = *(uint64_t (**)(id))(v0 + 8);
          return v34(v16);
        }
      }
      else
      {
        sub_1000E79A4(v0 + 120);
      }
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_100274490);
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Update share token failed. Invalid response data", v25, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v15 = v7;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v4, v3);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_1000D78F8(v26, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    long long v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v29 = 138412290;
    swift_errorRetain();
    uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v30 = v31;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Update share token failed. Error occurred while executing the request - %@", v29, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_1000F908C()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Update share token failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000F92C0()
{
  *(void *)(v1 + 472) = v0;
  return _swift_task_switch(sub_1000F9350, 0, 0);
}

uint64_t sub_1000F9350()
{
  uint64_t v1 = *(void **)(v0[59] + 16);
  v0[60] = [v1 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  v0[61] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_unknownObjectRetain();
    sub_10014326C((uint64_t)&_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    v0[2] = v0;
    v0[7] = v0 + 39;
    v0[3] = sub_1000F96A4;
    uint64_t v5 = swift_continuation_init();
    v0[16] = _NSConcreteStackBlock;
    v0[17] = 0x40000000;
    v0[18] = sub_1000F731C;
    v0[19] = &unk_10022C6D0;
    v0[20] = v5;
    [v1 executeRequestWithCompletion:v0 + 16];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1000D78F8(v6, (uint64_t)qword_100274490);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to update share due to an invalid request", v9, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[54] = -16007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    Class v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1000F96A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 496) = v1;
  if (v1) {
    uint64_t v2 = sub_1000FA560;
  }
  else {
    uint64_t v2 = sub_1000F97E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F97E0()
{
  uint64_t v85 = v0;
  uint64_t v1 = *(void **)(v0 + 488);

  uint64_t v3 = *(void *)(v0 + 320);
  unint64_t v2 = *(void *)(v0 + 328);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 392) = 0;
  LODWORD(v1) = [v1 validateResponseData:isa error:v0 + 392];

  uint64_t v5 = *(void **)(v0 + 392);
  if (!v1)
  {
    id v13 = v5;
    _convertNSErrorToError(_:)();

LABEL_16:
    swift_willThrow();
    uint64_t v14 = v3;
    unint64_t v15 = v2;
    goto LABEL_17;
  }
  uint64_t v6 = self;
  id v7 = v5;
  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  id v9 = [v6 dictionaryFromObject:v8 ofType:@"application/json"];

  if (!v9)
  {
    if (qword_10026F9C0 != -1) {
LABEL_82:
    }
      swift_once();
    uint64_t v16 = type metadata accessor for Logger();
    sub_1000D78F8(v16, (uint64_t)qword_100274490);
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Update share token failed. Invalid response data", v19, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 368) = -16008;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_16;
  }
  unint64_t v83 = v2;
  uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(v0 + 336) = 25445;
  *(void *)(v0 + 344) = 0xE200000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_10014A078(v0 + 208), (v12 & 1) != 0))
  {
    sub_1000D7C68(*(void *)(v10 + 56) + 32 * v11, v0 + 248);
  }
  else
  {
    *(_OWORD *)(v0 + 248) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
  }
  sub_1000D7ADC(v0 + 208);
  if (*(void *)(v0 + 272))
  {
    if ((swift_dynamicCast() & 1) != 0 && *(void *)(v0 + 448))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SignInWithAppleError(0);
      *(void *)(v0 + 464) = -16008;
      sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000E22B8();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      uint64_t v14 = v3;
      unint64_t v15 = v2;
LABEL_17:
      sub_1000D89E8(v14, v15);
      goto LABEL_18;
    }
  }
  else
  {
    sub_1000E79A4(v0 + 248);
  }
  *(void *)(v0 + 352) = 0x6E695F70756F7267;
  *(void *)(v0 + 360) = 0xEA00000000006F66;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v28 = sub_10014A078(v0 + 168), (v29 & 1) != 0))
  {
    sub_1000D7C68(*(void *)(v10 + 56) + 32 * v28, v0 + 280);
  }
  else
  {
    *(_OWORD *)(v0 + 280) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000D7ADC(v0 + 168);
  if (!*(void *)(v0 + 304))
  {
    sub_1000E79A4(v0 + 280);
    goto LABEL_37;
  }
  sub_1000D70C8(&qword_100270960);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_37:
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_1000D78F8(v39, (uint64_t)qword_100274490);
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      long long v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully fetched sharing status - No apps are currently shared.", v42, 2u);
      swift_slowDealloc();
    }

    uint64_t v43 = (void *)sub_1001433B0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000D89E8(v3, v2);
    swift_unknownObjectRelease();
LABEL_42:
    uint64_t v44 = *(uint64_t (**)(void *))(v0 + 8);
    return v44(v43);
  }
  uint64_t v82 = v3;
  uint64_t v30 = *(void *)(v0 + 408);
  if (qword_10026F9C0 != -1) {
LABEL_84:
  }
    swift_once();
  uint64_t v31 = type metadata accessor for Logger();
  sub_1000D78F8(v31, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  uint64_t v80 = v30;
  if (os_log_type_enabled(v32, v33))
  {
    id v34 = (uint8_t *)swift_slowAlloc();
    v84[0] = swift_slowAlloc();
    *(_DWORD *)id v34 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000D70C8(&qword_100270978);
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v38 = v35;
    uint64_t v30 = v80;
    *(void *)(v0 + 440) = sub_100158C6C(v38, v37, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfully fetched sharing status - %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v45 = v82;
  uint64_t v81 = *(void *)(v30 + 16);
  if (!v81)
  {
    uint64_t v43 = &_swiftEmptyDictionarySingleton;
LABEL_71:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1000D89E8(v45, v83);
    goto LABEL_42;
  }
  unint64_t v2 = 0;
  uint64_t v43 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v47 = *(void *)(v30 + 8 * v2 + 32);
    if (!*(void *)(v47 + 16)) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v48 = sub_10014A0BC(0x64695F70756F7267, 0xE800000000000000);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      break;
    }
    id v50 = (uint64_t *)(*(void *)(v47 + 56) + 16 * v48);
    uint64_t v3 = *v50;
    uint64_t v51 = v50[1];
    uint64_t v52 = *(void *)(v47 + 16);
    swift_bridgeObjectRetain();
    if (!v52 || (unint64_t v53 = sub_10014A0BC(0xD000000000000011, 0x80000001001C37C0), (v54 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v45 = v82;
      break;
    }
    id v55 = (Swift::Int *)(*(void *)(v47 + 56) + 16 * v53);
    Swift::Int v57 = *v55;
    Swift::Int v56 = v55[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v43[2])
    {
      swift_bridgeObjectRetain();
      unint64_t v58 = sub_10014A0BC(v3, v51);
      if (v59)
      {
        uint64_t v60 = *(void *)(v43[7] + 8 * v58);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_10013FC94(v84, v57, v56);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v84[0] = (uint64_t)v43;
        sub_10013F01C(v60, v3, v51, isUniquelyReferenced_nonNull_native);
        uint64_t v43 = (void *)v84[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = v82;
        goto LABEL_50;
      }
      swift_bridgeObjectRelease();
    }
    sub_1000D70C8(&qword_100270970);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001B81D0;
    *(void *)(inited + 32) = v57;
    *(void *)(inited + 40) = v56;
    Swift::Int v63 = sub_100109004(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    v84[0] = (uint64_t)v43;
    unint64_t v66 = sub_10014A0BC(v3, v51);
    uint64_t v67 = v43[2];
    BOOL v68 = (v65 & 1) == 0;
    uint64_t v69 = v67 + v68;
    if (__OFADD__(v67, v68))
    {
      __break(1u);
      goto LABEL_82;
    }
    char v70 = v65;
    if (v43[3] >= v69)
    {
      if (v64)
      {
        uint64_t v30 = v80;
        if ((v65 & 1) == 0) {
          goto LABEL_66;
        }
      }
      else
      {
        sub_10013F930();
        uint64_t v43 = (void *)v84[0];
        uint64_t v30 = v80;
        if ((v70 & 1) == 0) {
          goto LABEL_66;
        }
      }
    }
    else
    {
      sub_10013E710(v69, v64);
      uint64_t v43 = (void *)v84[0];
      unint64_t v71 = sub_10014A0BC(v3, v51);
      if ((v70 & 1) != (v72 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v66 = v71;
      uint64_t v30 = v80;
      if ((v70 & 1) == 0)
      {
LABEL_66:
        v43[(v66 >> 6) + 8] |= 1 << v66;
        uint64_t v73 = (uint64_t *)(v43[6] + 16 * v66);
        *uint64_t v73 = v3;
        v73[1] = v51;
        *(void *)(v43[7] + 8 * v66) = v63;
        uint64_t v74 = v43[2];
        BOOL v75 = __OFADD__(v74, 1);
        uint64_t v76 = v74 + 1;
        if (v75)
        {
          __break(1u);
          goto LABEL_84;
        }
        v43[2] = v76;
        swift_bridgeObjectRetain();
        goto LABEL_49;
      }
    }
    uint64_t v46 = v43[7];
    swift_bridgeObjectRelease();
    *(void *)(v46 + 8 * v66) = v63;
LABEL_49:
    uint64_t v45 = v82;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_50:
    if (v81 == ++v2) {
      goto LABEL_71;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v79 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Missing groupID or primaryClientID in groupInfo response", v79, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for SignInWithAppleError(0);
  *(void *)(v0 + 424) = -16008;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  sub_1000D89E8(v45, v83);
  swift_bridgeObjectRelease();
LABEL_18:
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000D78F8(v20, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  char v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)char v23 = 138412290;
    swift_errorRetain();
    uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 400) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v24 = v25;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to fetch sharing status. Error occurred while executing the request - %@", v23, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_1000FA560()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 400) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch sharing status. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000FA794(uint64_t a1)
{
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = v1;
  return _swift_task_switch(sub_1000FA824, 0, 0);
}

uint64_t sub_1000FA824()
{
  uint64_t v1 = v0 + 10;
  uint64_t v2 = (void *)*((void *)v0[22] + 2);
  v0[23] = (char *)[v2 requestProvider];
  type metadata accessor for AccountSharingRequestProvider();
  uint64_t v3 = swift_dynamicCastClass();
  v0[24] = (char *)v3;
  if (!v3)
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 == -1)
    {
LABEL_43:
      uint64_t v44 = type metadata accessor for Logger();
      sub_1000D78F8(v44, (uint64_t)qword_100274490);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to rotate tokens due to an invalid request", v47, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SignInWithAppleError(0);
      *uint64_t v1 = -16007;
      sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000E22B8();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      goto LABEL_51;
    }
LABEL_56:
    swift_once();
    goto LABEL_43;
  }
  id v56 = (id)v3;
  id v57 = v2;
  unint64_t v58 = (char *)(v0 + 15);
  char v59 = v0 + 10;
  uint64_t v60 = v0;
  uint64_t v4 = v0[21];
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << v4[32];
  if (-v7 < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & *((void *)v4 + 8);
  int64_t v62 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v61 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v0 = &selRef_setConfigDataVersion_forAccount_;
  if (v8) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v12 < v62)
    {
      unint64_t v13 = *(void *)&v5[8 * v12];
      ++v9;
      if (v13) {
        goto LABEL_23;
      }
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v62) {
        break;
      }
      unint64_t v13 = *(void *)&v5[8 * v9];
      if (v13) {
        goto LABEL_23;
      }
      int64_t v9 = v12 + 2;
      if (v12 + 2 >= v62) {
        break;
      }
      unint64_t v13 = *(void *)&v5[8 * v9];
      if (v13) {
        goto LABEL_23;
      }
      int64_t v9 = v12 + 3;
      if (v12 + 3 >= v62) {
        break;
      }
      unint64_t v13 = *(void *)&v5[8 * v9];
      if (v13)
      {
LABEL_23:
        unint64_t v8 = (v13 - 1) & v13;
        for (unint64_t i = __clz(__rbit64(v13)) + (v9 << 6); ; unint64_t i = v10 | (v9 << 6))
        {
          id v15 = *(id *)(*((void *)v4 + 7) + 8 * i);
          id v16 = [v15 shareInfo];
          if (!v16) {
            goto LABEL_28;
          }
          id v17 = v16;
          id v18 = [v16 groupID];

          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          id v22 = [v15 shareInfo];
          if (!v22) {
            break;
          }
          char v23 = v22;
          id v24 = [v22 shareToken];

          if (!v24) {
            break;
          }
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v30;
          uint64_t v55 = v29;

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          sub_10013EE88(v19, v21, 0x64695F70756F7267, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          id v32 = [v15 clientID];
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;

          char v36 = swift_isUniquelyReferenced_nonNull_native();
          sub_10013EE88(v33, v35, 0xD000000000000011, 0x80000001001C37C0, v36);
          swift_bridgeObjectRelease();
          char v37 = swift_isUniquelyReferenced_nonNull_native();
          sub_10013EE88(v55, v54, 0x745F646572616873, 0xEC0000006E656B6FLL, v37);
          uint64_t v1 = &_swiftEmptyDictionarySingleton;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v61 = sub_100135390(0, *((void *)v61 + 2) + 1, 1, v61);
          }
          unint64_t v39 = *((void *)v61 + 2);
          unint64_t v38 = *((void *)v61 + 3);
          if (v39 >= v38 >> 1) {
            uint64_t v61 = sub_100135390((char *)(v38 > 1), v39 + 1, 1, v61);
          }
          *((void *)v61 + 2) = v39 + 1;
          *(void *)&v61[8 * v39 + 32] = &_swiftEmptyDictionarySingleton;

          if (!v8) {
            goto LABEL_8;
          }
LABEL_7:
          unint64_t v10 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
        swift_bridgeObjectRelease();
LABEL_28:
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        sub_1000D78F8(v25, (uint64_t)qword_100274490);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        uint64_t v1 = (void *)v27;
        if (os_log_type_enabled(v26, v27))
        {
          unint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v1, "Account has invalid shareInfo. Skipping.", v28, 2u);
          swift_slowDealloc();
        }

        if (!v8) {
          continue;
        }
        goto LABEL_7;
      }
      int64_t v14 = v12 + 4;
      if (v14 < v62)
      {
        unint64_t v13 = *(void *)&v5[8 * v14];
        if (v13)
        {
          int64_t v9 = v14;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v9 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            goto LABEL_55;
          }
          if (v9 >= v62) {
            goto LABEL_38;
          }
          unint64_t v13 = *(void *)&v5[8 * v9];
          ++v14;
          if (v13) {
            goto LABEL_23;
          }
        }
      }
    }
    break;
  }
LABEL_38:
  uint64_t v0 = v60;
  swift_release();
  if (*((void *)v61 + 2))
  {
    uint64_t v40 = sub_1000D70C8(&qword_100270960);
    v60[25] = (char *)v40;
    v60[13] = (char *)v40;
    v60[10] = v61;
    sub_1000D7CC4(v59, v58);
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34(v58, 0x6E695F70756F7267, 0xEA00000000006F66, v41);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6B94((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v56 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    v60[2] = (char *)v60;
    v60[7] = v58;
    v60[3] = (char *)sub_1000FB148;
    uint64_t v43 = swift_continuation_init();
    v60[10] = (char *)_NSConcreteStackBlock;
    v60[11] = (char *)0x40000000;
    v60[12] = (char *)sub_1000F731C;
    v60[13] = (char *)&unk_10022C6B8;
    v60[14] = (char *)v43;
    [v57 executeRequestWithCompletion:v59];
    return _swift_continuation_await(v60 + 2);
  }
  swift_bridgeObjectRelease();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  sub_1000D78F8(v48, (uint64_t)qword_100274490);
  char v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to rorate tokens. No eligible accounts.", v51, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for SignInWithAppleError(0);
  *(void *)unint64_t v58 = -16007;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_unknownObjectRelease();
LABEL_51:
  uint64_t v52 = (uint64_t (*)(void))v0[1];
  return v52();
}

uint64_t sub_1000FB148()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_1000FBB04;
  }
  else {
    uint64_t v2 = sub_1000FB284;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FB284()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = (_OWORD *)(v0 + 120);

  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v4 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v6 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v7 = *(void **)(v0 + 80);
  p_cb = (_DWORD *)(&OBJC_PROTOCOL___AKAnisetteProvisioningDaemonProtocol + 64);
  if (v6)
  {
    int64_t v9 = self;
    id v10 = v7;
    Class v11 = Data._bridgeToObjectiveC()().super.isa;
    id v12 = [v9 dictionaryFromObject:v11 ofType:@"application/json"];

    if (v12)
    {
      uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v0 + 152) = 0x6E695F70756F7267;
      *(void *)(v0 + 160) = 0xEA00000000006F66;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v13 + 16) && (unint64_t v14 = sub_10014A078(v0 + 80), (v15 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v13 + 56) + 32 * v14, v0 + 120);
      }
      else
      {
        _OWORD *v2 = 0u;
        *(_OWORD *)(v0 + 136) = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC(v0 + 80);
      if (*(void *)(v0 + 144))
      {
        p_cb = (_DWORD *)(&OBJC_PROTOCOL___AKAnisetteProvisioningDaemonProtocol + 64);
        if (swift_dynamicCast())
        {
          uint64_t v17 = *(void *)(v0 + 152);
          uint64_t v54 = *(void *)(v17 + 16);
          if (!v54)
          {
LABEL_42:
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            sub_1000D89E8(v3, v4);
            char v49 = *(uint64_t (**)(void *))(v0 + 8);
            return v49(&_swiftEmptyArrayStorage);
          }
          uint64_t v18 = 0;
          uint64_t v53 = *(void *)(v0 + 168);
          uint64_t v51 = *(void *)(v0 + 152);
          unint64_t v52 = v4;
          while (1)
          {
            uint64_t v19 = *(void *)(v17 + 8 * v18 + 32);
            if (!*(void *)(v19 + 16)) {
              break;
            }
            swift_bridgeObjectRetain();
            sub_10014A0BC(0x64695F70756F7267, 0xE800000000000000);
            if ((v20 & 1) == 0) {
              goto LABEL_48;
            }
            if (!*(void *)(v19 + 16)) {
              goto LABEL_48;
            }
            unint64_t v21 = sub_10014A0BC(0xD000000000000011, 0x80000001001C37C0);
            if ((v22 & 1) == 0 || !*(void *)(v19 + 16)) {
              goto LABEL_48;
            }
            char v23 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v21);
            uint64_t v24 = *v23;
            uint64_t v25 = v23[1];
            swift_bridgeObjectRetain();
            sub_10014A0BC(0x745F646572616873, 0xEC0000006E656B6FLL);
            if ((v26 & 1) == 0)
            {
              swift_bridgeObjectRelease();
LABEL_48:
              swift_bridgeObjectRelease();
              break;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (!*(void *)(v53 + 16) || (unint64_t v27 = sub_10014A0BC(v24, v25), (v28 & 1) == 0))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v4 = v52;
              goto LABEL_50;
            }
            id v29 = *(id *)(*(void *)(*(void *)(v0 + 168) + 56) + 8 * v27);
            swift_bridgeObjectRelease();
            id v30 = [v29 shareInfo];
            if (v30)
            {
              uint64_t v31 = v30;
              NSString v32 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v31 setShareToken:v32];
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            id v33 = v29;
            sub_10012EC0C(v33);
            id v35 = v34;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            ++v18;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            uint64_t v17 = v51;
            unint64_t v4 = v52;
            if (v54 == v18) {
              goto LABEL_42;
            }
          }
          swift_bridgeObjectRelease();
LABEL_50:
          p_cb = &OBJC_PROTOCOL___AKAnisetteProvisioningDaemonProtocol.cb;
          swift_bridgeObjectRelease();
          if (qword_10026F9C0 != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for Logger();
          sub_1000D78F8(v50, (uint64_t)qword_100274490);
          char v37 = Logger.logObject.getter();
          os_log_type_t v38 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v37, v38)) {
            goto LABEL_33;
          }
          unint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v39 = 0;
          uint64_t v40 = "Missing parameters in response";
          goto LABEL_32;
        }
      }
      else
      {
        sub_1000E79A4(v0 + 120);
        p_cb = &OBJC_PROTOCOL___AKAnisetteProvisioningDaemonProtocol.cb;
      }
    }
    if (*((void *)p_cb + 312) != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_1000D78F8(v36, (uint64_t)qword_100274490);
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38)) {
      goto LABEL_33;
    }
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v39 = 0;
    uint64_t v40 = "Update share token failed. Invalid response data";
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v37, v38, v40, v39, 2u);
    swift_slowDealloc();
LABEL_33:

    type metadata accessor for SignInWithAppleError(0);
    *(void *)uint64_t v2 = -16008;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_34;
  }
  id v16 = v7;
  _convertNSErrorToError(_:)();

LABEL_34:
  swift_willThrow();
  sub_1000D89E8(v3, v4);
  if (*((void *)p_cb + 312) != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_1000D78F8(v41, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  long long v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 138412290;
    swift_errorRetain();
    uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v45 = v46;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Generate share token failed. Error occurred while executing the request - %@", v44, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
  return v47();
}

uint64_t sub_1000FBB04()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generate share token failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t type metadata accessor for AccountSharingService()
{
  return self;
}

uint64_t sub_1000FBD5C()
{
  return swift_release();
}

uint64_t sub_1000FBDC0(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  return _swift_task_switch(sub_1000FBE54, 0, 0);
}

uint64_t sub_1000FBE54()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 168) + OBJC_IVAR___AKApplicationMetadataService_serviceController);
  *(void *)(v0 + 176) = [v1 requestProvider];
  type metadata accessor for ApplicationMetadataRequestProvider();
  uint64_t v2 = swift_dynamicCastClass();
  *(void *)(v0 + 184) = v2;
  if (v2)
  {
    os_log_type_t v3 = (char *)v2;
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 160);
    *(void *)(v0 + 104) = &type metadata for String;
    *(void *)(v0 + 80) = v4;
    *(void *)(v0 + 88) = v5;
    sub_1000D7CC4((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 120));
    swift_bridgeObjectRetain();
    id v16 = v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34((_OWORD *)(v0 + 120), 0x695F746E65696C63, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_unknownObjectRetain();
    sub_1000F6B94((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setAuthKitBody:isa];

    swift_unknownObjectRelease();
    unint64_t v8 = &v3[OBJC_IVAR___AKApplicationMetadataRequestProvider_clientID];
    *(void *)unint64_t v8 = v4;
    *((void *)v8 + 1) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 24) = sub_1000FC250;
    uint64_t v9 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000F731C;
    *(void *)(v0 + 104) = &unk_10022C7F0;
    *(void *)(v0 + 112) = v9;
    [v16 executeRequestWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_100274490);
    Class v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to fetch Primary App Info due to an invalid request", v13, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 120) = -16007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_1000FC250()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_1000FC900;
  }
  else {
    uint64_t v2 = sub_1000FC38C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FC38C()
{
  uint64_t v1 = *(void **)(v0 + 184);

  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 80) = 0;
  unsigned int v5 = [v1 validateResponseData:isa error:v0 + 80];

  uint64_t v6 = *(void **)(v0 + 80);
  if (v5)
  {
    uint64_t v7 = self;
    id v8 = v6;
    Class v9 = Data._bridgeToObjectiveC()().super.isa;
    id v10 = [v7 dictionaryFromObject:v9 ofType:@"application/x-plist"];

    if (v10)
    {
      uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v12 = sub_100143704(v11);
      swift_bridgeObjectRelease();
      if (v12)
      {
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_1000D78F8(v13, (uint64_t)qword_100274490);
        unint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          id v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetch Primary App Info succeeded", v16, 2u);
          swift_slowDealloc();
          sub_1000D89E8(v3, v2);
          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          sub_1000D89E8(v3, v2);
        }

        id v30 = *(uint64_t (**)(unint64_t))(v0 + 8);
        return v30(v12);
      }
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1000D78F8(v18, (uint64_t)qword_100274490);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Fetch Primary App Info failed. Invalid response data", v21, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 120) = -16008;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v17 = v6;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v3, v2);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_1000D78F8(v22, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    char v26 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 138412290;
    swift_errorRetain();
    uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v26 = v27;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Fetch Primary App Info failed. Error occurred while executing the request - %@", v25, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  char v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1000FC900()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    unsigned int v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 80) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch Primary App Info failed. Error occurred while executing the request - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000FCCB0(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000FCD9C;
  v9[20] = v7;
  v9[21] = v8;
  v9[19] = v5;
  return _swift_task_switch(sub_1000FBE54, 0, 0);
}

uint64_t sub_1000FCD9C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v8 = (void *)v6;
  }
  else
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    id v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  id v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_1000FCF60()
{
  *(void *)(v1 + 192) = v0;
  type metadata accessor for String.Encoding();
  *(void *)(v1 + 200) = swift_task_alloc();
  return _swift_task_switch(sub_1000FD01C, 0, 0);
}

uint64_t sub_1000FD01C()
{
  uint64_t v1 = *(void **)(v0[24] + OBJC_IVAR___AKApplicationMetadataService_serviceController);
  v0[26] = [v1 requestProvider];
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  v0[27] = v2;
  if (v2)
  {
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_1000FD304;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000F731C;
    v0[13] = &unk_10022C760;
    v0[14] = v3;
    [v1 executeRequestWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to share due to an invalid request", v7, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[18] = -16007;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    id v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1000FD304()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 224) = v1;
  if (v1) {
    uint64_t v2 = sub_1000FD8A4;
  }
  else {
    uint64_t v2 = sub_1000FD440;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FD440()
{
  uint64_t v1 = *(void **)(v0 + 216);

  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 168) = 0;
  unsigned int v5 = [v1 validateResponseData:isa error:v0 + 168];

  os_log_type_t v6 = *(void **)(v0 + 168);
  if (v5)
  {
    id v7 = v6;
    static String.Encoding.utf8.getter();
    uint64_t v8 = String.init(data:encoding:)();
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      sub_1000D89E8(v3, v2);
      swift_unknownObjectRelease();
      swift_task_dealloc();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      return v12(v10, v11);
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1000D78F8(v15, (uint64_t)qword_100274490);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetch Authorization HTML template failed. Invalid response data", v18, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 184) = -16008;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    id v14 = v6;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  sub_1000D89E8(v3, v2);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_1000D78F8(v19, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138412290;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 160) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Fetch Authorization HTML template failed with error - %@", v22, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  os_log_type_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1000FD8A4()
{
  swift_willThrow();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    unsigned int v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 160) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch Authorization HTML template failed with error - %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000FDC48(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_1000FDCF0;
  return sub_1000FCF60();
}

uint64_t sub_1000FDCF0()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v7 = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, NSString, uint64_t))v9)[2](v9, v7, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t type metadata accessor for ApplicationMetadataService()
{
  return self;
}

uint64_t sub_1000FDEE8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FDF28()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D84E8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1002709B8 + dword_1002709B8);
  return v5(v2, v3);
}

uint64_t sub_1000FDFDC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000FE0A8()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FE0F0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1002709E0 + dword_1002709E0);
  return v6(v2, v3, v4);
}

uint64_t sub_1000FE1AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

unint64_t sub_1000FE278()
{
  return 0xD000000000000013;
}

NSObject *sub_1000FE294(void *a1)
{
  id aBlock = 0;
  unint64_t v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274460);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    id aBlock = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100158C6C(0xD000000000000033, 0x80000001001C3F70, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DeletedDeviceListProvider - Begin fetching deleted devices from cache for query %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &_swiftEmptyArrayStorage;
  NSString v7 = String._bridgeToObjectiveC()();
  id v32 = [self queryWithString:v7];

  sub_1000D70C8((uint64_t *)&unk_100270470);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1001B81D0;
  id v9 = [a1 altDSID];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  *(void *)(v8 + 56) = sub_1000D70C8(&qword_100271CF0);
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id aBlock = 0;
  uint64_t v15 = v32;
  [v32 bindParameters:isa error:&aBlock];

  id v16 = aBlock;
  char v37 = sub_100100D48;
  uint64_t v38 = v6;
  id aBlock = _NSConcreteStackBlock;
  unint64_t v34 = 1107296256;
  id v35 = sub_1001231B0;
  uint64_t v36 = &unk_10022C830;
  os_log_type_t v17 = _Block_copy(&aBlock);
  id v18 = v16;
  swift_retain();
  swift_release();
  [v32 setRowHandler:v17];
  _Block_release(v17);
  uint64_t v19 = *(void **)(v31 + 16);
  id aBlock = 0;
  if ([v19 performQuery:v32 error:&aBlock])
  {
    id v20 = aBlock;
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "DeletedDeviceListProvider - Finished fetching deleted devices from cache", v23, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    os_log_type_t v24 = *(NSObject **)(v6 + 16);
    swift_bridgeObjectRetain();

    swift_release();
  }
  else
  {
    id v25 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      char v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      swift_errorRetain();
      id v29 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id aBlock = v29;
      uint64_t v15 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v28 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Error %@ fetching deleted devices from cache", v27, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_release();
  }
  return v24;
}

uint64_t sub_1000FE888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = sub_100143000((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v49 = v4;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = self;
  id v9 = [v8 stringFromColumn:0 inStatement:a1];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    uint64_t v48 = &type metadata for String;
    *(void *)&long long v47 = v11;
    *((void *)&v47 + 1) = v13;
    sub_1000D7CC4(&v47, v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v49 = 0x8000000000000000;
    sub_10013ED34(v46, v5, v7, isUniquelyReferenced_nonNull_native);
    unint64_t v49 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v5, v7, &v47);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v47);
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  id v18 = [v8 integerFromColumn:1 inStatement:a1];
  uint64_t v48 = (void *)sub_100100D68(0, &qword_100270B00);
  *(void *)&long long v47 = v18;
  sub_1000D7CC4(&v47, v46);
  unint64_t v19 = v49;
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v49 = 0x8000000000000000;
  sub_10013ED34(v46, v15, v17, v20);
  unint64_t v49 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  id v24 = [v8 doubleFromColumn:2 inStatement:a1];
  [v24 doubleValue];
  double v26 = v25;

  uint64_t v48 = &type metadata for Double;
  *(double *)&long long v47 = v26 * 1000.0;
  sub_1000D7CC4(&v47, v46);
  unint64_t v27 = v49;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v49 = 0x8000000000000000;
  sub_10013ED34(v46, v21, v23, v28);
  unint64_t v49 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  id v32 = [v8 doubleFromColumn:4 inStatement:a1];
  [v32 doubleValue];
  double v34 = v33;

  uint64_t v48 = &type metadata for Double;
  *(double *)&long long v47 = v34 * 1000.0;
  sub_1000D7CC4(&v47, v46);
  unint64_t v35 = v49;
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v49 = 0x8000000000000000;
  sub_10013ED34(v46, v29, v31, v36);
  unint64_t v49 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v37 = [v8 stringFromColumn:3 inStatement:a1];
  if (!v37) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v38 = (char **)(a3 + 16);

  unint64_t v39 = v49;
  swift_beginAccess();
  uint64_t v40 = *(char **)(a3 + 16);
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a3 + 16) = v40;
  if ((v41 & 1) == 0)
  {
    uint64_t v40 = sub_1001353A4(0, *((void *)v40 + 2) + 1, 1, v40);
    *uint64_t v38 = v40;
  }
  unint64_t v43 = *((void *)v40 + 2);
  unint64_t v42 = *((void *)v40 + 3);
  if (v43 >= v42 >> 1)
  {
    uint64_t v40 = sub_1001353A4((char *)(v42 > 1), v43 + 1, 1, v40);
    *uint64_t v38 = v40;
  }
  *((void *)v40 + 2) = v43 + 1;
  *(void *)&v40[8 * v43 + 32] = v39;
  return swift_endAccess();
}

uint64_t sub_1000FECC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  void v4[4] = a1;
  void v4[5] = a2;
  uint64_t v5 = type metadata accessor for Date();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  sub_1000D70C8((uint64_t *)&unk_100270030);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000FEDCC, 0, 0);
}

uint64_t sub_1000FEDCC()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 104) = sub_1000D78F8(v2, (uint64_t)qword_100274460);
  id v3 = v1;
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 32);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id v57 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 24) = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v57 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DeletedDeviceListProvider - Begin saving deleted device %@", v8, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v10 = [*(id *)(v0 + 32) lastUpdatedDate];
  uint64_t v11 = *(void *)(v0 + 96);
  if (!v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 72) + 56))(*(void *)(v0 + 96), 1, 1, *(void *)(v0 + 64));
    goto LABEL_19;
  }
  uint64_t v12 = v10;
  id v14 = *(void **)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 64);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t))v14[4];
  v16(v11, v13, v15);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14[7];
  v17(v11, 0, 1, v15);
  unint64_t v58 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v14[6];
  if (v58(v11, 1, v15) == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v55 = v16;
  id v56 = v17;
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v21 = *(void **)(v0 + 32);
  Date.timeIntervalSince1970.getter();
  double v23 = v22;
  uint64_t v24 = v19;
  double v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v25(v18, v24);
  id v54 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDouble:v23];
  *(void *)(v0 + 112) = v54;
  id v26 = [v21 deletedDate];
  uint64_t v11 = *(void *)(v0 + 88);
  if (!v26)
  {
LABEL_20:
    uint64_t result = v56(v11, 1, 1, *(void *)(v0 + 64));
    goto LABEL_21;
  }
  unint64_t v27 = v26;
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v29 = *(void *)(v0 + 64);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v55(v11, v28, v29);
  v56(v11, 0, 1, v29);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58)(v11, 1, v29);
  if (result == 1)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v31 = *(void *)(v0 + 88);
  uint64_t v32 = *(void *)(v0 + 64);
  double v33 = *(void **)(v0 + 32);
  Date.timeIntervalSince1970.getter();
  double v35 = v34;
  v25(v31, v32);
  id v36 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDouble:v35];
  *(void *)(v0 + 120) = v36;
  sub_1000D70C8((uint64_t *)&unk_100270470);
  uint64_t v37 = swift_allocObject();
  *(void *)(v0 + 128) = v37;
  *(_OWORD *)(v37 + 16) = xmmword_1001B9540;
  id v38 = [v33 machineId];
  if (!v38)
  {
    uint64_t v40 = 0;
    *(void *)(v37 + 56) = &type metadata for String;
    goto LABEL_14;
  }
  unint64_t v39 = v38;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v41;

  *(void *)(v37 + 56) = &type metadata for String;
  if (!v42)
  {
    uint64_t v40 = 0;
LABEL_14:
    unint64_t v42 = 0xE000000000000000;
  }
  uint64_t v44 = *(void *)(v0 + 40);
  uint64_t v43 = *(void *)(v0 + 48);
  uint64_t v45 = *(void **)(v0 + 32);
  *(void *)(v37 + 32) = v40;
  *(void *)(v37 + 40) = v42;
  id v46 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v45, "removalReason"));
  *(void *)(v37 + 88) = sub_100100D68(0, &qword_100270B00);
  *(void *)(v37 + 64) = v46;
  uint64_t v47 = sub_100100D68(0, &qword_100270B08);
  *(void *)(v37 + 96) = v54;
  *(void *)(v37 + 120) = v47;
  *(void *)(v37 + 128) = v44;
  *(void *)(v37 + 136) = v43;
  *(void *)(v37 + 184) = v47;
  *(void *)(v37 + 152) = &type metadata for String;
  *(void *)(v37 + 160) = v36;
  id v48 = v54;
  swift_bridgeObjectRetain();
  id v49 = v36;
  _StringGuts.grow(_:)(105);
  v50._countAndFlagsBits = 0xD000000000000017;
  v50._object = (void *)0x80000001001C3ED0;
  String.append(_:)(v50);
  v51._object = (void *)0x80000001001C3EF0;
  v51._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v51);
  v52._countAndFlagsBits = 0xD000000000000050;
  v52._object = (void *)0x80000001001C3F10;
  String.append(_:)(v52);
  *(void *)(v0 + 136) = 0xE000000000000000;
  uint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v53;
  *uint64_t v53 = v0;
  v53[1] = sub_1000FF3B4;
  return sub_1000E8190(0, 0xE000000000000000, v37);
}

uint64_t sub_1000FF3B4(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 164) = a1;
  *(void *)(v3 + 152) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    unint64_t v4 = sub_1000FF718;
  }
  else {
    unint64_t v4 = sub_1000FF510;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FF510()
{
  uint64_t v1 = (void **)(v0 + 32);
  id v2 = *(id *)(v0 + 32);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v13 = *(unsigned __int8 *)(v0 + 164);
    os_log_type_t v5 = *(void **)(v0 + 32);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    *(void *)(v0 + 16) = v5;
    id v7 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v5;

    *(_WORD *)(v6 + 12) = 1024;
    *(_DWORD *)(v0 + 160) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DeletedDeviceListProvider - Finished saving deleted device %@ with success: %{BOOL}d", (uint8_t *)v6, 0x12u);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v1 = (void **)(v0 + 112);
  }
  else
  {

    uint64_t v3 = *(NSObject **)(v0 + 112);
  }
  uint64_t v8 = *v1;
  id v9 = *(void **)(v0 + 120);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1000FF718()
{
  uint64_t v1 = *(void **)(v0 + 112);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000FF7A8(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1000FF7C8, 0, 0);
}

uint64_t sub_1000FF7C8()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274460);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DeletedDeviceListProvider - Begin clearing stale deleted devices", v4, 2u);
    swift_slowDealloc();
  }
  os_log_type_t v5 = (void *)v0[2];

  id v6 = [v5 allAuthKitAccounts];
  if (v6)
  {
    id v7 = v6;
    sub_100100D68(0, &qword_100270B10);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v0[4] = v8;

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v0[5] = v19;
      if (v19) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v0[5] = v9;
      if (v9)
      {
LABEL_8:
        uint64_t v10 = v0[4];
        if ((v10 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(v10 + 32);
        }
        id v15 = v11;
        v0[6] = v11;
        v0[7] = 1;
        uint64_t v16 = (void *)swift_task_alloc();
        v0[8] = v16;
        *uint64_t v16 = v0;
        v16[1] = sub_1000FFAAC;
        uint64_t v18 = v0[2];
        uint64_t v17 = v0[3];
        void v16[4] = v15;
        void v16[5] = v17;
        v16[3] = v18;
        return _swift_task_switch(sub_1000FFD8C, 0, 0);
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "DeletedDeviceListProvider - No IdMS accounts found. Ineligible for clearing cache.", v14, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1000FFAAC()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1000FFD04;
  }
  else
  {
    uint64_t v2 = sub_1000FFBC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FFBC8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);

  if (v1 == v2)
  {
    swift_bridgeObjectRelease();
    os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 32);
    if ((v6 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v6 + 8 * v5 + 32);
    }
    id v10 = v7;
    *(void *)(v0 + 48) = v7;
    *(void *)(v0 + 56) = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
    }
    else
    {
      id v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 64) = v11;
      *id v11 = v0;
      v11[1] = sub_1000FFAAC;
      uint64_t v13 = *(void *)(v0 + 16);
      uint64_t v12 = *(void *)(v0 + 24);
      void v11[4] = v10;
      void v11[5] = v12;
      v11[3] = v13;
      id v7 = sub_1000FFD8C;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    return _swift_task_switch(v7, v8, v9);
  }
}

uint64_t sub_1000FFD04()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FFD68(uint64_t a1, uint64_t a2)
{
  void v3[4] = a2;
  void v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_1000FFD8C, 0, 0);
}

uint64_t sub_1000FFD8C()
{
  id v1 = [*(id *)(v0 + 24) altDSIDForAccount:*(void *)(v0 + 32)];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v4 = *(void **)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    id v8 = [v4 deletedDevicesCacheExpiryOffsetForAccount:v3];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v12 = (void *)0xE200000000000000;
      uint64_t v10 = 13361;
    }
    _StringGuts.grow(_:)(95);
    v22._countAndFlagsBits = 0x46204554454C4544;
    v22._object = (void *)0xEC000000204D4F52;
    String.append(_:)(v22);
    v23._object = (void *)0x80000001001C3EF0;
    v23._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0xD000000000000048;
    v24._object = (void *)0x80000001001C3FC0;
    String.append(_:)(v24);
    v25._countAndFlagsBits = v10;
    v25._object = v12;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x29292779616420;
    v26._object = (void *)0xE700000000000000;
    String.append(_:)(v26);
    *(void *)(v0 + 48) = 0xE000000000000000;
    sub_1000D70C8((uint64_t *)&unk_100270470);
    uint64_t v27 = swift_allocObject();
    *(void *)(v0 + 56) = v27;
    *(_OWORD *)(v27 + 16) = xmmword_1001B81D0;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 32) = v5;
    *(void *)(v27 + 40) = v7;
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_100100154;
    return sub_1000E8190(0, 0xE000000000000000, v27);
  }
  else
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void **)(v0 + 32);
    uint64_t v14 = type metadata accessor for Logger();
    sub_1000D78F8(v14, (uint64_t)qword_100274460);
    id v15 = v13;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void **)(v0 + 32);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v0 + 16) = v19;
      id v21 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v19;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "DeletedDeviceListProvider - Account %@ is missing altDSID. Ineligible for clearing cache.", v20, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
}

uint64_t sub_100100154(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(*v2 + 76) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1001002E8, 0, 0);
  }
}

uint64_t sub_1001002E8()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274460);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 76);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 72) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "DeletedDeviceListProvider - Finished clearing cache with success: %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t type metadata accessor for DeletedDeviceListProvider()
{
  return self;
}

uint64_t sub_100100464(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100100490(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001004B8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1001004E8(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_100100508, 0, 0);
}

void sub_100100508()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 120) = v2;
  uint64_t v3 = 1 << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (v5) {
    goto LABEL_26;
  }
LABEL_7:
  int64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = (unint64_t)((1 << *(unsigned char *)(v0 + 120)) + 63) >> 6;
  uint64_t v9 = *(void *)(v0 + 16);
  if (v7 < v8)
  {
    uint64_t v10 = v9 + 64;
    unint64_t v11 = *(void *)(v9 + 64 + 8 * v7);
    ++v6;
    if (v11) {
      goto LABEL_20;
    }
    int64_t v6 = v7 + 1;
    if (v7 + 1 >= v8) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v10 + 8 * v6);
    if (v11) {
      goto LABEL_20;
    }
    int64_t v6 = v7 + 2;
    if (v7 + 2 >= v8) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v10 + 8 * v6);
    if (v11)
    {
LABEL_20:
      unint64_t v5 = (v11 - 1) & v11;
      unint64_t v13 = __clz(__rbit64(v11)) + (v6 << 6);
      while (1)
      {
        *(void *)(v0 + 32) = v6;
        *(void *)(v0 + 40) = v5;
        uint64_t v14 = (void *)(*(void *)(v9 + 48) + 16 * v13);
        *(void *)(v0 + 48) = *v14;
        *(void *)(v0 + 56) = v14[1];
        id v15 = *(void **)(*(void *)(v9 + 56) + 8 * v13);
        *(void *)(v0 + 64) = v15;
        swift_bridgeObjectRetain();
        id v16 = v15;
        id v17 = [v16 deletedDeviceList];
        if (v17)
        {
          BOOL v18 = v17;
          sub_100100D68(0, &qword_100270AF0);
          unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v0 + 72) = v19;

          if (v19 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          *(void *)(v0 + 80) = v20;
          uint64_t v21 = *(void *)(v0 + 72);
          if (v20)
          {
            if ((v21 & 0xC000000000000001) != 0) {
              id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v25 = *(id *)(v21 + 32);
            }
            uint64_t v26 = (uint64_t)v25;
            *(void *)(v0 + 88) = v25;
            *(void *)(v0 + 96) = 1;
            uint64_t v27 = (void *)swift_task_alloc();
            *(void *)(v0 + 104) = v27;
            *uint64_t v27 = v0;
            v27[1] = sub_10010083C;
            uint64_t v28 = *(void *)(v0 + 48);
            uint64_t v29 = *(void *)(v0 + 56);
            sub_1000FECC8(v26, v28, v29);
            return;
          }
          Swift::String v22 = *(void **)(v0 + 64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          int64_t v6 = *(void *)(v0 + 32);
          unint64_t v5 = *(void *)(v0 + 40);
          if (!v5) {
            goto LABEL_7;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
          if (!v5) {
            goto LABEL_7;
          }
        }
LABEL_26:
        unint64_t v23 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v13 = v23 | (v6 << 6);
        uint64_t v9 = *(void *)(v0 + 16);
      }
    }
    int64_t v12 = v7 + 3;
    if (v12 < v8)
    {
      unint64_t v11 = *(void *)(v10 + 8 * v12);
      if (v11)
      {
        int64_t v6 = v12;
        goto LABEL_20;
      }
      while (1)
      {
        int64_t v6 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        if (v6 >= v8) {
          goto LABEL_28;
        }
        unint64_t v11 = *(void *)(v10 + 8 * v6);
        ++v12;
        if (v11) {
          goto LABEL_20;
        }
      }
LABEL_38:
      __break(1u);
      return;
    }
  }
LABEL_28:
  swift_release();
  Swift::String v24 = *(void (**)(void))(v0 + 8);
  v24();
}

uint64_t sub_10010083C()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v2 = sub_100100C98;
  }
  else
  {
    char v2 = sub_100100964;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100100964()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);

  if (v1 == v2)
  {
LABEL_2:
    uint64_t v3 = *(void **)(v0 + 64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    int64_t v4 = *(void *)(v0 + 32);
    unint64_t v5 = *(void *)(v0 + 40);
    if (v5)
    {
LABEL_3:
      unint64_t v6 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v7 = v6 | (v4 << 6);
      uint64_t v8 = *(void *)(v0 + 16);
      goto LABEL_18;
    }
    while (1)
    {
      int64_t v9 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      int64_t v10 = (unint64_t)((1 << *(unsigned char *)(v0 + 120)) + 63) >> 6;
      uint64_t v8 = *(void *)(v0 + 16);
      if (v9 >= v10) {
        goto LABEL_29;
      }
      uint64_t v11 = v8 + 64;
      unint64_t v12 = *(void *)(v8 + 64 + 8 * v9);
      ++v4;
      if (!v12)
      {
        int64_t v4 = v9 + 1;
        if (v9 + 1 >= v10) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v11 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v9 + 2;
          if (v9 + 2 >= v10) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v11 + 8 * v4);
          if (!v12)
          {
            int64_t v13 = v9 + 3;
            if (v13 >= v10)
            {
LABEL_29:
              swift_release();
              id v25 = *(void (**)(void))(v0 + 8);
              v25();
              return;
            }
            unint64_t v12 = *(void *)(v11 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                int64_t v4 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_38;
                }
                if (v4 >= v10) {
                  goto LABEL_29;
                }
                unint64_t v12 = *(void *)(v11 + 8 * v4);
                ++v13;
                if (v12) {
                  goto LABEL_17;
                }
              }
            }
            int64_t v4 = v13;
          }
        }
      }
LABEL_17:
      unint64_t v5 = (v12 - 1) & v12;
      unint64_t v7 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_18:
      *(void *)(v0 + 32) = v4;
      *(void *)(v0 + 40) = v5;
      uint64_t v14 = (void *)(*(void *)(v8 + 48) + 16 * v7);
      *(void *)(v0 + 48) = *v14;
      *(void *)(v0 + 56) = v14[1];
      id v15 = *(void **)(*(void *)(v8 + 56) + 8 * v7);
      *(void *)(v0 + 64) = v15;
      swift_bridgeObjectRetain();
      id v16 = v15;
      id v17 = [v16 deletedDeviceList];
      if (v17)
      {
        BOOL v18 = v17;
        sub_100100D68(0, &qword_100270AF0);
        unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v0 + 72) = v19;

        if (v19 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          *(void *)(v0 + 80) = v21;
          if (!v21) {
            goto LABEL_2;
          }
        }
        else
        {
          uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
          *(void *)(v0 + 80) = v20;
          if (!v20) {
            goto LABEL_2;
          }
        }
        uint64_t v22 = 0;
        goto LABEL_27;
      }

      swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v22 = *(void *)(v0 + 96);
LABEL_27:
  uint64_t v23 = *(void *)(v0 + 72);
  if ((v23 & 0xC000000000000001) != 0) {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v24 = *(id *)(v23 + 8 * v22 + 32);
  }
  uint64_t v26 = (uint64_t)v24;
  *(void *)(v0 + 88) = v24;
  *(void *)(v0 + 96) = v22 + 1;
  if (__OFADD__(v22, 1))
  {
LABEL_39:
    __break(1u);
  }
  else
  {
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10010083C;
    uint64_t v28 = *(void *)(v0 + 48);
    uint64_t v29 = *(void *)(v0 + 56);
    sub_1000FECC8(v26, v28, v29);
  }
}

uint64_t sub_100100C98()
{
  uint64_t v1 = *(void **)(v0 + 88);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100100D10()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100100D48(uint64_t a1, uint64_t a2)
{
  return sub_1000FE888(a1, a2, v2);
}

uint64_t sub_100100D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100100D60()
{
  return swift_release();
}

uint64_t sub_100100D68(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100100DA4()
{
  *(void *)(v1 + 72) = v0;
  return _swift_task_switch(sub_100100DC4, 0, 0);
}

uint64_t sub_100100DC4()
{
  id v1 = [*(id *)(v0[9] + 16) primaryAuthKitAccount];
  v0[10] = v1;
  if (v1)
  {
    uint64_t v2 = (uint64_t)v1;
    sub_1000E2310((void *)(v0[9] + 24), *(void *)(v0[9] + 48));
    sub_100135EE4(v2);
    int64_t v9 = (void *)swift_task_alloc();
    v0[11] = v9;
    *int64_t v9 = v0;
    v9[1] = sub_100101018;
    v9[17] = v0[9];
    return _swift_task_switch(sub_1001040B4, 0, 0);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1000D78F8(v3, (uint64_t)qword_100274490);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No logged in authKit account. Skipping Sign in with Apple health check", v6, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[3] = -16004;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    unint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100101018()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    id v1 = sub_100103D7C;
  }
  else
  {
    id v1 = sub_100109DB8;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100101130(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100101470;
  }
  else {
    uint64_t v4 = sub_100101244;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100101244()
{
  uint64_t v10 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000D70C8(&qword_100270670);
    uint64_t v4 = Dictionary.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    v0[8] = sub_100158C6C(v4, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetched shared groups - %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unint64_t v7 = (void *)swift_task_alloc();
  v0[16] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_1001014D4;
  v7[22] = v0[9];
  return _swift_task_switch(sub_100104D84, 0, 0);
}

uint64_t sub_100101470()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001014D4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100103F48;
  }
  else {
    uint64_t v4 = sub_1001015E8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001015E8()
{
  uint64_t v88 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    unint64_t v87 = (unint64_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000D70C8(&qword_100270670);
    uint64_t v4 = Dictionary.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 56) = sub_100158C6C(v4, v6, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetched group status in keychain - %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_100139554(v7);
  *(void *)(v0 + 152) = v8;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100139554(v9);
  *(void *)(v0 + 160) = v10;
  if (*(void *)(v10 + 16) <= *(void *)(v8 + 16) >> 3)
  {
    unint64_t v87 = (unint64_t *)v8;
    swift_bridgeObjectRetain();
    sub_100140724(v10);
    uint64_t v11 = v87;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1001408CC(v10, v8);
  }
  *(void *)(v0 + 168) = v11;
  if (v11[2])
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    int64_t v13 = sub_100141940(v12);
    *(void *)(v0 + 176) = v13;
    swift_bridgeObjectRelease();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Groups not in sync with keychain", v16, 2u);
      swift_slowDealloc();
    }

    swift_retain_n();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      unint64_t v87 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136315138;
      swift_retain();
      uint64_t v20 = Array.description.getter();
      unint64_t v22 = v21;
      swift_release();
      *(void *)(v0 + 48) = sub_100158C6C(v20, v22, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Performing unshare for accounts in groups - %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_1000E2310((void *)(*(void *)(v0 + 72) + 112), *(void *)(*(void *)(v0 + 72) + 136));
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_1001023A4;
    return sub_1000EAFF4((uint64_t)v13);
  }
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Groups in server are in sync with keychain", v25, 2u);
    swift_slowDealloc();
  }

  uint64_t v26 = *(void *)(v0 + 152);
  *(void *)(v0 + 200) = *(void *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 160);
  if (*(void *)(v26 + 16) <= *(void *)(v27 + 16) >> 3)
  {
    unint64_t v87 = *(unint64_t **)(v0 + 160);
    sub_100140724(v26);
    swift_bridgeObjectRelease();
    uint64_t v28 = v87;
  }
  else
  {
    uint64_t v28 = sub_1001408CC(v26, v27);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 208) = v28;
  unint64_t v31 = v28[2];
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  if (v31)
  {
    if (v34)
    {
      double v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Keychain has items belonging to orphaned groups", v35, 2u);
      swift_slowDealloc();
    }

    swift_bridgeObjectRetain_n();
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      unint64_t v87 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)id v38 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v39 = Set.description.getter();
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 40) = sub_100158C6C(v39, v41, (uint64_t *)&v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Cleaning up items belonging to groups - %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v79 = *(void *)(v0 + 72);
    uint64_t v80 = swift_task_alloc();
    *(void *)(v0 + 216) = v80;
    *(void *)(v80 + 16) = v28;
    *(void *)(v80 + 24) = v79;
    uint64_t v81 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v81;
    void *v81 = v0;
    v81[1] = sub_100102E84;
    uint64_t v90 = (char *)&type metadata for () + 8;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  if (v34)
  {
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Groups sync complete", v42, 2u);
    swift_slowDealloc();
  }

  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Starting accounts sync for remaining groups.", v45, 2u);
    swift_slowDealloc();
  }
  uint64_t v46 = *(void *)(v0 + 208);
  uint64_t v47 = *(void *)(v0 + 168);
  uint64_t v48 = *(void *)(v0 + 136);
  uint64_t v49 = *(void *)(v0 + 112);

  swift_bridgeObjectRetain();
  uint64_t v50 = sub_100109490(v49, v47);
  *(void *)(v0 + 232) = v50;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 240) = sub_100109490(v48, v46);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  char v51 = *(unsigned char *)(v50 + 32);
  *(unsigned char *)(v0 + 304) = v51;
  uint64_t v52 = 1 << v51;
  if (v52 < 64) {
    uint64_t v53 = ~(-1 << v52);
  }
  else {
    uint64_t v53 = -1;
  }
  unint64_t v54 = v53 & *(void *)(v50 + 64);
  swift_retain();
  int64_t v55 = 0;
  if (v54) {
    goto LABEL_36;
  }
LABEL_37:
  int64_t v59 = v55 + 1;
  if (__OFADD__(v55, 1))
  {
    __break(1u);
    goto LABEL_78;
  }
  int64_t v60 = (unint64_t)((1 << *(unsigned char *)(v0 + 304)) + 63) >> 6;
  uint64_t v58 = *(void *)(v0 + 232);
  if (v59 < v60)
  {
    uint64_t v61 = v58 + 64;
    unint64_t v62 = *(void *)(v58 + 64 + 8 * v59);
    ++v55;
    if (v62) {
      goto LABEL_54;
    }
    int64_t v55 = v59 + 1;
    if (v59 + 1 >= v60) {
      goto LABEL_71;
    }
    unint64_t v62 = *(void *)(v61 + 8 * v55);
    if (v62) {
      goto LABEL_54;
    }
    int64_t v55 = v59 + 2;
    if (v59 + 2 >= v60) {
      goto LABEL_71;
    }
    unint64_t v62 = *(void *)(v61 + 8 * v55);
    if (v62) {
      goto LABEL_54;
    }
    int64_t v55 = v59 + 3;
    if (v59 + 3 >= v60) {
      goto LABEL_71;
    }
    unint64_t v62 = *(void *)(v61 + 8 * v55);
    if (v62) {
      goto LABEL_54;
    }
    int64_t v55 = v59 + 4;
    if (v59 + 4 >= v60) {
      goto LABEL_71;
    }
    unint64_t v62 = *(void *)(v61 + 8 * v55);
    if (v62)
    {
LABEL_54:
      unint64_t v54 = (v62 - 1) & v62;
      unint64_t v57 = __clz(__rbit64(v62)) + (v55 << 6);
      while (1)
      {
        *(void *)(v0 + 248) = v54;
        *(void *)(v0 + 256) = v55;
        char v64 = (uint64_t *)(*(void *)(v58 + 48) + 16 * v57);
        uint64_t v66 = *v64;
        unint64_t v65 = v64[1];
        *(void *)(v0 + 264) = v65;
        uint64_t v67 = *(void *)(v58 + 16);
        swift_bridgeObjectRetain();
        if (!v67) {
          goto LABEL_63;
        }
        swift_bridgeObjectRetain();
        unint64_t v68 = sub_10014A0BC(v66, v65);
        if ((v69 & 1) == 0) {
          break;
        }
        uint64_t v70 = *(void *)(v0 + 240);
        uint64_t v71 = *(void *)(*(void *)(*(void *)(v0 + 232) + 56) + 8 * v68);
        *(void *)(v0 + 272) = v71;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (*(void *)(v70 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v72 = sub_10014A0BC(v66, v65);
          if (v73)
          {
            uint64_t v84 = *(void *)(*(void *)(*(void *)(v0 + 240) + 56) + 8 * v72);
            *(void *)(v0 + 280) = v84;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v85 = (void *)swift_task_alloc();
            *(void *)(v0 + 288) = v85;
            void *v85 = v0;
            v85[1] = sub_100103738;
            uint64_t v86 = *(void *)(v0 + 72);
            v85[10] = v84;
            v85[11] = v86;
            v85[8] = v65;
            v85[9] = v71;
            v85[7] = v66;
            return _swift_task_switch(sub_100105CE4, 0, 0);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.fault.getter();
        if (!os_log_type_enabled(v74, v75))
        {
LABEL_35:
          swift_bridgeObjectRelease_n();

          if (!v54) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        uint64_t v76 = swift_slowAlloc();
        unint64_t v87 = (unint64_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v76 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v76 + 4) = sub_100158C6C(v66, v65, (uint64_t *)&v87);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "No accounts found in keychain for group %s", (uint8_t *)v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_65:
        swift_slowDealloc();

        if (!v54) {
          goto LABEL_37;
        }
LABEL_36:
        unint64_t v56 = __clz(__rbit64(v54));
        v54 &= v54 - 1;
        unint64_t v57 = v56 | (v55 << 6);
        uint64_t v58 = *(void *)(v0 + 232);
      }
      swift_bridgeObjectRelease();
LABEL_63:
      swift_bridgeObjectRetain();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v74, v77)) {
        goto LABEL_35;
      }
      uint64_t v78 = swift_slowAlloc();
      unint64_t v87 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v78 + 4) = sub_100158C6C(v66, v65, (uint64_t *)&v87);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v74, v77, "No accounts found in server for group %s", (uint8_t *)v78, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_65;
    }
    int64_t v63 = v59 + 5;
    if (v63 < v60)
    {
      unint64_t v62 = *(void *)(v61 + 8 * v63);
      if (v62)
      {
        int64_t v55 = v63;
        goto LABEL_54;
      }
      while (1)
      {
        int64_t v55 = v63 + 1;
        if (__OFADD__(v63, 1)) {
          break;
        }
        if (v55 >= v60) {
          goto LABEL_71;
        }
        unint64_t v62 = *(void *)(v61 + 8 * v55);
        ++v63;
        if (v62) {
          goto LABEL_54;
        }
      }
LABEL_78:
      __break(1u);
      return withTaskGroup<A, B>(of:returning:isolation:body:)();
    }
  }
LABEL_71:
  uint64_t v82 = *(void **)(v0 + 80);
  swift_release();
  swift_release_n();

  unint64_t v83 = *(uint64_t (**)(void))(v0 + 8);
  return v83();
}

uint64_t sub_1001023A4()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100102DD4;
  }
  else {
    os_log_type_t v2 = sub_1001024B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001024B8()
{
  uint64_t v62 = v0;
  swift_release();
  *(void *)(v0 + 200) = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  if (*(void *)(v2 + 16) <= *(void *)(v1 + 16) >> 3)
  {
    uint64_t v61 = *(unint64_t **)(v0 + 160);
    sub_100140724(v2);
    swift_bridgeObjectRelease();
    uint64_t v3 = v61;
  }
  else
  {
    uint64_t v3 = sub_1001408CC(*(void *)(v0 + 152), v1);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 208) = v3;
  unint64_t v4 = v3[2];
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  if (v4)
  {
    if (v7)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Keychain has items belonging to orphaned groups", v8, 2u);
      swift_slowDealloc();
    }

    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v12 = Set.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 40) = sub_100158C6C(v12, v14, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cleaning up items belonging to groups - %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v52 = *(void *)(v0 + 72);
    uint64_t v53 = swift_task_alloc();
    *(void *)(v0 + 216) = v53;
    *(void *)(v53 + 16) = v3;
    *(void *)(v53 + 24) = v52;
    unint64_t v54 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v54;
    *unint64_t v54 = v0;
    v54[1] = sub_100102E84;
    char v64 = (char *)&type metadata for () + 8;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  if (v7)
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Groups sync complete", v15, 2u);
    swift_slowDealloc();
  }

  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting accounts sync for remaining groups.", v18, 2u);
    swift_slowDealloc();
  }
  uint64_t v19 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 168);
  uint64_t v21 = *(void *)(v0 + 136);
  uint64_t v22 = *(void *)(v0 + 112);

  swift_bridgeObjectRetain();
  uint64_t v23 = sub_100109490(v22, v20);
  *(void *)(v0 + 232) = v23;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 240) = sub_100109490(v21, v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  char v24 = *(unsigned char *)(v23 + 32);
  *(unsigned char *)(v0 + 304) = v24;
  uint64_t v25 = 1 << v24;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v27 = v26 & *(void *)(v23 + 64);
  swift_retain();
  int64_t v28 = 0;
  if (v27) {
    goto LABEL_19;
  }
LABEL_20:
  int64_t v32 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
    goto LABEL_61;
  }
  int64_t v33 = (unint64_t)((1 << *(unsigned char *)(v0 + 304)) + 63) >> 6;
  uint64_t v31 = *(void *)(v0 + 232);
  if (v32 < v33)
  {
    uint64_t v34 = v31 + 64;
    unint64_t v35 = *(void *)(v31 + 64 + 8 * v32);
    ++v28;
    if (v35) {
      goto LABEL_37;
    }
    int64_t v28 = v32 + 1;
    if (v32 + 1 >= v33) {
      goto LABEL_54;
    }
    unint64_t v35 = *(void *)(v34 + 8 * v28);
    if (v35) {
      goto LABEL_37;
    }
    int64_t v28 = v32 + 2;
    if (v32 + 2 >= v33) {
      goto LABEL_54;
    }
    unint64_t v35 = *(void *)(v34 + 8 * v28);
    if (v35) {
      goto LABEL_37;
    }
    int64_t v28 = v32 + 3;
    if (v32 + 3 >= v33) {
      goto LABEL_54;
    }
    unint64_t v35 = *(void *)(v34 + 8 * v28);
    if (v35) {
      goto LABEL_37;
    }
    int64_t v28 = v32 + 4;
    if (v32 + 4 >= v33) {
      goto LABEL_54;
    }
    unint64_t v35 = *(void *)(v34 + 8 * v28);
    if (v35)
    {
LABEL_37:
      unint64_t v27 = (v35 - 1) & v35;
      unint64_t v30 = __clz(__rbit64(v35)) + (v28 << 6);
      while (1)
      {
        *(void *)(v0 + 248) = v27;
        *(void *)(v0 + 256) = v28;
        os_log_type_t v37 = (uint64_t *)(*(void *)(v31 + 48) + 16 * v30);
        uint64_t v39 = *v37;
        unint64_t v38 = v37[1];
        *(void *)(v0 + 264) = v38;
        uint64_t v40 = *(void *)(v31 + 16);
        swift_bridgeObjectRetain();
        if (!v40) {
          goto LABEL_46;
        }
        swift_bridgeObjectRetain();
        unint64_t v41 = sub_10014A0BC(v39, v38);
        if ((v42 & 1) == 0) {
          break;
        }
        uint64_t v43 = *(void *)(v0 + 240);
        uint64_t v44 = *(void *)(*(void *)(*(void *)(v0 + 232) + 56) + 8 * v41);
        *(void *)(v0 + 272) = v44;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (*(void *)(v43 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v45 = sub_10014A0BC(v39, v38);
          if (v46)
          {
            uint64_t v58 = *(void *)(*(void *)(*(void *)(v0 + 240) + 56) + 8 * v45);
            *(void *)(v0 + 280) = v58;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            int64_t v59 = (void *)swift_task_alloc();
            *(void *)(v0 + 288) = v59;
            *int64_t v59 = v0;
            v59[1] = sub_100103738;
            uint64_t v60 = *(void *)(v0 + 72);
            v59[10] = v58;
            v59[11] = v60;
            v59[8] = v38;
            v59[9] = v44;
            v59[7] = v39;
            return _swift_task_switch(sub_100105CE4, 0, 0);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.fault.getter();
        if (!os_log_type_enabled(v47, v48))
        {
LABEL_18:
          swift_bridgeObjectRelease_n();

          if (!v27) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        uint64_t v49 = swift_slowAlloc();
        uint64_t v61 = (unint64_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v49 + 4) = sub_100158C6C(v39, v38, (uint64_t *)&v61);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "No accounts found in keychain for group %s", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_48:
        swift_slowDealloc();

        if (!v27) {
          goto LABEL_20;
        }
LABEL_19:
        unint64_t v29 = __clz(__rbit64(v27));
        v27 &= v27 - 1;
        unint64_t v30 = v29 | (v28 << 6);
        uint64_t v31 = *(void *)(v0 + 232);
      }
      swift_bridgeObjectRelease();
LABEL_46:
      swift_bridgeObjectRetain();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v47, v50)) {
        goto LABEL_18;
      }
      uint64_t v51 = swift_slowAlloc();
      uint64_t v61 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v51 + 4) = sub_100158C6C(v39, v38, (uint64_t *)&v61);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v47, v50, "No accounts found in server for group %s", (uint8_t *)v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_48;
    }
    int64_t v36 = v32 + 5;
    if (v36 < v33)
    {
      unint64_t v35 = *(void *)(v34 + 8 * v36);
      if (v35)
      {
        int64_t v28 = v36;
        goto LABEL_37;
      }
      while (1)
      {
        int64_t v28 = v36 + 1;
        if (__OFADD__(v36, 1)) {
          break;
        }
        if (v28 >= v33) {
          goto LABEL_54;
        }
        unint64_t v35 = *(void *)(v34 + 8 * v28);
        ++v36;
        if (v35) {
          goto LABEL_37;
        }
      }
LABEL_61:
      __break(1u);
      return withTaskGroup<A, B>(of:returning:isolation:body:)();
    }
  }
LABEL_54:
  int64_t v55 = *(void **)(v0 + 80);
  swift_release();
  swift_release_n();

  unint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
  return v56();
}

uint64_t sub_100102DD4()
{
  uint64_t v1 = *(void **)(v0 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100102E84()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100102F9C, 0, 0);
}

uint64_t sub_100102F9C()
{
  uint64_t v59 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  uint64_t v3 = &unk_1001B8000;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = v5;
    uint64_t v3 = (void *)&unk_1001B8000;
    *(void *)(v0 + 32) = sub_100158C6C(v8, v7, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Cleaned up items belonging to groups - %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Groups sync complete", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting accounts sync for remaining groups.", v14, 2u);
    swift_slowDealloc();
  }
  uint64_t v15 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 136);
  uint64_t v18 = *(void *)(v0 + 112);

  swift_bridgeObjectRetain();
  uint64_t v19 = sub_100109490(v18, v16);
  *(void *)(v0 + 232) = v19;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 240) = sub_100109490(v17, v15);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  char v20 = *(unsigned char *)(v19 + 32);
  *(unsigned char *)(v0 + 304) = v20;
  uint64_t v21 = 1 << v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & *(void *)(v19 + 64);
  uint64_t v24 = swift_retain();
  int64_t v27 = 0;
  int v57 = v3[15];
  if (v23) {
    goto LABEL_14;
  }
LABEL_15:
  int64_t v31 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  int64_t v32 = (unint64_t)((1 << *(unsigned char *)(v0 + 304)) + 63) >> 6;
  uint64_t v30 = *(void *)(v0 + 232);
  if (v31 >= v32)
  {
LABEL_45:
    uint64_t v51 = *(void **)(v0 + 80);
    swift_release();
    swift_release_n();

    uint64_t v52 = *(uint64_t (**)(void))(v0 + 8);
    return v52();
  }
  uint64_t v33 = v30 + 64;
  unint64_t v34 = *(void *)(v30 + 64 + 8 * v31);
  ++v27;
  if (!v34)
  {
    int64_t v27 = v31 + 1;
    if (v31 + 1 >= v32) {
      goto LABEL_45;
    }
    unint64_t v34 = *(void *)(v33 + 8 * v27);
    if (!v34)
    {
      int64_t v27 = v31 + 2;
      if (v31 + 2 >= v32) {
        goto LABEL_45;
      }
      unint64_t v34 = *(void *)(v33 + 8 * v27);
      if (!v34)
      {
        int64_t v27 = v31 + 3;
        if (v31 + 3 >= v32) {
          goto LABEL_45;
        }
        unint64_t v34 = *(void *)(v33 + 8 * v27);
        if (!v34)
        {
          int64_t v27 = v31 + 4;
          if (v31 + 4 >= v32) {
            goto LABEL_45;
          }
          unint64_t v34 = *(void *)(v33 + 8 * v27);
          if (!v34)
          {
            int64_t v35 = v31 + 5;
            if (v35 < v32)
            {
              unint64_t v34 = *(void *)(v33 + 8 * v35);
              if (v34)
              {
                int64_t v27 = v35;
                goto LABEL_32;
              }
              while (1)
              {
                int64_t v27 = v35 + 1;
                if (__OFADD__(v35, 1)) {
                  break;
                }
                if (v27 >= v32) {
                  goto LABEL_45;
                }
                unint64_t v34 = *(void *)(v33 + 8 * v27);
                ++v35;
                if (v34) {
                  goto LABEL_32;
                }
              }
LABEL_52:
              __break(1u);
              return _swift_task_switch(v24, v25, v26);
            }
            goto LABEL_45;
          }
        }
      }
    }
  }
LABEL_32:
  unint64_t v23 = (v34 - 1) & v34;
  unint64_t v29 = __clz(__rbit64(v34)) + (v27 << 6);
  while (1)
  {
    *(void *)(v0 + 248) = v23;
    *(void *)(v0 + 256) = v27;
    int64_t v36 = (uint64_t *)(*(void *)(v30 + 48) + 16 * v29);
    uint64_t v38 = *v36;
    unint64_t v37 = v36[1];
    *(void *)(v0 + 264) = v37;
    uint64_t v39 = *(void *)(v30 + 16);
    swift_bridgeObjectRetain();
    if (v39) {
      break;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    char v46 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v46, v49))
    {
LABEL_13:
      swift_bridgeObjectRelease_n();

      if (!v23) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    uint64_t v50 = swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = v57;
    swift_bridgeObjectRetain();
    *(void *)(v50 + 4) = sub_100158C6C(v38, v37, v58);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v49, "No accounts found in server for group %s", (uint8_t *)v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_43:
    swift_slowDealloc();

    if (!v23) {
      goto LABEL_15;
    }
LABEL_14:
    unint64_t v28 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v29 = v28 | (v27 << 6);
    uint64_t v30 = *(void *)(v0 + 232);
  }
  swift_bridgeObjectRetain();
  unint64_t v40 = sub_10014A0BC(v38, v37);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v42 = *(void *)(v0 + 240);
  uint64_t v43 = *(void *)(*(void *)(*(void *)(v0 + 232) + 56) + 8 * v40);
  *(void *)(v0 + 272) = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v42 + 16))
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_13;
    }
    uint64_t v48 = swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = v57;
    swift_bridgeObjectRetain();
    *(void *)(v48 + 4) = sub_100158C6C(v38, v37, v58);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "No accounts found in keychain for group %s", (uint8_t *)v48, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  unint64_t v44 = sub_10014A0BC(v38, v37);
  if ((v45 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  uint64_t v54 = *(void *)(*(void *)(*(void *)(v0 + 240) + 56) + 8 * v44);
  *(void *)(v0 + 280) = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int64_t v55 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v55;
  *int64_t v55 = v0;
  v55[1] = sub_100103738;
  uint64_t v56 = *(void *)(v0 + 72);
  v55[10] = v54;
  v55[11] = v56;
  v55[8] = v37;
  v55[9] = v43;
  v55[7] = v38;
  uint64_t v24 = (uint64_t)sub_100105CE4;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  return _swift_task_switch(v24, v25, v26);
}

uint64_t sub_100103738()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v2 = sub_100103FB4;
  }
  else
  {
    os_log_type_t v2 = sub_10010388C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010388C()
{
  uint64_t v36 = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(v0 + 248);
  int64_t v5 = *(void *)(v0 + 256);
  if (v4) {
    goto LABEL_4;
  }
LABEL_5:
  int64_t v9 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  int64_t v10 = (unint64_t)((1 << *(unsigned char *)(v0 + 304)) + 63) >> 6;
  uint64_t v8 = *(void *)(v0 + 232);
  if (v9 >= v10)
  {
LABEL_35:
    unint64_t v29 = *(void **)(v0 + 80);
    swift_release();
    swift_release_n();

    uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
  uint64_t v11 = v8 + 64;
  unint64_t v12 = *(void *)(v8 + 64 + 8 * v9);
  ++v5;
  if (!v12)
  {
    int64_t v5 = v9 + 1;
    if (v9 + 1 >= v10) {
      goto LABEL_35;
    }
    unint64_t v12 = *(void *)(v11 + 8 * v5);
    if (!v12)
    {
      int64_t v5 = v9 + 2;
      if (v9 + 2 >= v10) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v11 + 8 * v5);
      if (!v12)
      {
        int64_t v5 = v9 + 3;
        if (v9 + 3 >= v10) {
          goto LABEL_35;
        }
        unint64_t v12 = *(void *)(v11 + 8 * v5);
        if (!v12)
        {
          int64_t v5 = v9 + 4;
          if (v9 + 4 >= v10) {
            goto LABEL_35;
          }
          unint64_t v12 = *(void *)(v11 + 8 * v5);
          if (!v12)
          {
            int64_t v13 = v9 + 5;
            if (v13 < v10)
            {
              unint64_t v12 = *(void *)(v11 + 8 * v13);
              if (v12)
              {
                int64_t v5 = v13;
                goto LABEL_22;
              }
              while (1)
              {
                int64_t v5 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  break;
                }
                if (v5 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v12 = *(void *)(v11 + 8 * v5);
                ++v13;
                if (v12) {
                  goto LABEL_22;
                }
              }
LABEL_42:
              __break(1u);
              return _swift_task_switch(v1, v2, v3);
            }
            goto LABEL_35;
          }
        }
      }
    }
  }
LABEL_22:
  unint64_t v4 = (v12 - 1) & v12;
  unint64_t v7 = __clz(__rbit64(v12)) + (v5 << 6);
  while (1)
  {
    *(void *)(v0 + 248) = v4;
    *(void *)(v0 + 256) = v5;
    unint64_t v14 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v7);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    *(void *)(v0 + 264) = v15;
    uint64_t v17 = *(void *)(v8 + 16);
    swift_bridgeObjectRetain();
    if (v17) {
      break;
    }
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v24, v27))
    {
LABEL_3:
      swift_bridgeObjectRelease_n();

      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t v28 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v28 + 4) = sub_100158C6C(v16, v15, &v35);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v27, "No accounts found in server for group %s", (uint8_t *)v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_33:
    swift_slowDealloc();

    if (!v4) {
      goto LABEL_5;
    }
LABEL_4:
    unint64_t v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v7 = v6 | (v5 << 6);
    uint64_t v8 = *(void *)(v0 + 232);
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_10014A0BC(v16, v15);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(*(void *)(*(void *)(v0 + 232) + 56) + 8 * v18);
  *(void *)(v0 + 272) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(void *)(v20 + 16))
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_3;
    }
    uint64_t v26 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v26 + 4) = sub_100158C6C(v16, v15, &v35);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "No accounts found in keychain for group %s", (uint8_t *)v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10014A0BC(v16, v15);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  uint64_t v32 = *(void *)(*(void *)(*(void *)(v0 + 240) + 56) + 8 * v22);
  *(void *)(v0 + 280) = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_100103738;
  uint64_t v34 = *(void *)(v0 + 72);
  v33[10] = v32;
  v33[11] = v34;
  v33[8] = v15;
  v33[9] = v21;
  v33[7] = v16;
  uint64_t v1 = (uint64_t)sub_100105CE4;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100103D7C()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[12] = sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Checking if groups in server and keychain are in sync...", v4, 2u);
    swift_slowDealloc();
  }

  int64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching shared groups from IdMS…", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = v0[9];

  sub_1000E2310((void *)(v8 + 72), *(void *)(v8 + 96));
  int64_t v9 = (void *)swift_task_alloc();
  v0[13] = v9;
  *int64_t v9 = v0;
  v9[1] = sub_100101130;
  return sub_1000F92C0();
}

uint64_t sub_100103F48()
{
  uint64_t v1 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100103FB4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100104024()
{
  *(void *)(v1 + 136) = v0;
  return _swift_task_switch(sub_1001040B4, 0, 0);
}

uint64_t sub_1001040B4()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Attempting cleanup for items in orphaned groups", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[17];

  sub_1000E2310((void *)(v5 + 152), *(void *)(v5 + 176));
  os_log_type_t v6 = (void *)swift_task_alloc();
  v0[19] = v6;
  void *v6 = v0;
  v6[1] = sub_100104240;
  return sub_1001371A0();
}

uint64_t sub_100104240(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 160) = a1;
    return _swift_task_switch(sub_1001043C8, 0, 0);
  }
}

uint64_t sub_1001043C8()
{
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = swift_bridgeObjectRetain();
  v0[21] = sub_100139554(v3);

  uint64_t v4 = *(void **)(v2 + 64);
  v0[22] = v4;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100104528;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001088DC;
  v0[13] = &unk_10022C988;
  v0[14] = v5;
  [v4 fetchSharedAccountsWithGroupID:0 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100104528()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100104CCC;
  }
  else
  {
    uint64_t v2 = sub_10010466C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010466C(__n128 a1)
{
  uint64_t v62 = v1;
  unint64_t v2 = v1[15];
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      if (v3 < 1) {
        __break(1u);
      }
      uint64_t v4 = 0;
      uint64_t v56 = v1 + 16;
      unint64_t v60 = v2 & 0xC000000000000001;
      a1.n128_u64[0] = 136315394;
      __n128 v55 = a1;
      unint64_t v57 = v2;
      uint64_t v58 = v1;
      uint64_t v59 = v3;
      do
      {
        if (v60) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v5 = *(id *)(v2 + 8 * v4 + 32);
        }
        os_log_type_t v6 = v5;
        id v7 = objc_msgSend(v5, "shareInfo", *(_OWORD *)&v55);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = v1[21];
          id v10 = [v7 groupID];
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v13 = v12;

          LOBYTE(v9) = sub_1001396F0(v11, v13, v9);
          swift_bridgeObjectRelease();
          if (v9)
          {

            goto LABEL_7;
          }
          id v23 = v6;
          id v24 = v8;
          id v25 = v23;
          id v26 = v24;
          os_log_type_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = swift_slowAlloc();
            v61[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v29 = v55.n128_u32[0];
            uint64_t v30 = v26;
            id v31 = [v25 clientID];
            uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v34 = v33;

            *(void *)(v29 + 4) = sub_100158C6C(v32, v34, v61);
            swift_bridgeObjectRelease();

            *(_WORD *)(v29 + 12) = 2080;
            id v35 = [v30 groupID];
            uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;

            uint64_t v1 = v58;
            uint64_t v39 = v36;
            id v26 = v30;
            *(void *)(v29 + 14) = sub_100158C6C(v39, v38, v61);
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, v27, v28, "Shared SIWA account (%s) is associated with a group %s the user is no longer a member of. Deleting keychain item...", (uint8_t *)v29, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          unint64_t v40 = (void *)v1[22];
          v1[16] = 0;
          unsigned int v41 = [v40 removeSharedAccount:v25 error:v56];
          uint64_t v42 = (void *)v1[16];
          if (v41)
          {
            id v43 = v42;
          }
          else
          {
            id v44 = v42;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            id v45 = v25;
            char v46 = Logger.logObject.getter();
            os_log_type_t v47 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v46, v47))
            {
              uint64_t v48 = swift_slowAlloc();
              v61[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v48 = 136315138;
              id v49 = [v45 clientID];
              uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v52 = v51;

              *(void *)(v48 + 4) = sub_100158C6C(v50, v52, v61);
              swift_bridgeObjectRelease();

              _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to remove account %s during cleanupItemBelongingToOrphanedGroups", (uint8_t *)v48, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_errorRelease();
            }
            else
            {

              swift_errorRelease();
            }
            uint64_t v1 = v58;
          }
          unint64_t v2 = v57;
        }
        else
        {
          id v14 = v6;
          unint64_t v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v15, v16))
          {
            uint64_t v17 = swift_slowAlloc();
            v61[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v17 = 136315138;
            id v18 = [v14 clientID];
            uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v21 = v20;

            uint64_t v22 = v19;
            unint64_t v2 = v57;
            uint64_t v1 = v58;
            *(void *)(v17 + 4) = sub_100158C6C(v22, v21, v61);
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, v15, v16, "Shared SIWA account (%s) with nil share info. Skipping...", (uint8_t *)v17, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
        uint64_t v3 = v59;
LABEL_7:
        ++v4;
      }
      while (v3 != v4);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v53 = (uint64_t (*)(void))v1[1];
  return v53();
}

uint64_t sub_100104CCC()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100104D64()
{
  *(void *)(v1 + 176) = v0;
  return _swift_task_switch(sub_100104D84, 0, 0);
}

uint64_t sub_100104D84()
{
  uint64_t v1 = *(void **)(v0[22] + 64);
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_100104E88;
  uint64_t v2 = swift_continuation_init();
  v0[16] = _NSConcreteStackBlock;
  v0[17] = 0x40000000;
  v0[18] = sub_1001088DC;
  v0[19] = &unk_10022C970;
  v0[20] = v2;
  [v1 fetchSharedAccountsWithGroupID:0 completionHandler:v0 + 16];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100104E88()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    uint64_t v2 = sub_1001054A4;
  }
  else {
    uint64_t v2 = sub_100104F98;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100104F98()
{
  uint64_t v53 = v0;
  unint64_t v1 = *(void *)(v0 + 168);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v47 = v0;
    if (v2) {
      goto LABEL_3;
    }
LABEL_23:
    id v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_23;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v3 = 0;
  unint64_t v4 = v1 & 0xC000000000000001;
  id v5 = &_swiftEmptyDictionarySingleton;
  os_log_type_t v6 = &selRef_setConfigDataVersion_forAccount_;
  uint64_t v48 = v2;
  unint64_t v49 = v1;
  unint64_t v50 = v1 & 0xC000000000000001;
  do
  {
    if (v4) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v8 = v7;
    id v9 = objc_msgSend(v7, v6[361], v47);
    if (v9)
    {
      id v10 = v9;
      if ([v9 isCurrentUser])
      {
        id v11 = [v10 groupID];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v5[2] && (unint64_t v15 = sub_10014A0BC(v12, v14), (v16 & 1) != 0))
        {
          uint64_t v17 = *(void *)(v5[7] + 8 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v51 = v17;
          id v18 = [v8 clientID];
          Swift::Int v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::Int v21 = v20;

          sub_10013FC94((Swift::Int *)&v52, v19, v21);
          swift_bridgeObjectRelease();
          id v22 = [v10 groupID];
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v52 = v5;
          uint64_t v27 = v51;
        }
        else
        {
          swift_bridgeObjectRelease();
          id v38 = [v10 groupID];
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v39;

          sub_1000D70C8(&qword_100270970);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1001B81D0;
          id v41 = [v8 clientID];
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v44 = v43;

          *(void *)(inited + 32) = v42;
          uint64_t v2 = v48;
          *(void *)(inited + 40) = v44;
          Swift::Int v45 = sub_100109004(inited);
          swift_setDeallocating();
          swift_arrayDestroy();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v52 = v5;
          uint64_t v27 = v45;
          unint64_t v1 = v49;
        }
        sub_10013F01C(v27, v23, v25, isUniquelyReferenced_nonNull_native);
        id v5 = v52;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        unint64_t v4 = v50;
        os_log_type_t v6 = &selRef_setConfigDataVersion_forAccount_;
      }
      else
      {
      }
    }
    else
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_1000D78F8(v28, (uint64_t)qword_100274490);
      id v29 = v8;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        unint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        id v33 = [v29 clientID];
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;

        uint64_t v37 = v34;
        uint64_t v2 = v48;
        unint64_t v1 = v49;
        *(void *)(v32 + 4) = sub_100158C6C(v37, v36, (uint64_t *)&v52);
        unint64_t v4 = v50;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Shared SIWA account (%s) with nil share info. Skipping...", (uint8_t *)v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        os_log_type_t v6 = &selRef_setConfigDataVersion_forAccount_;
        swift_slowDealloc();
      }
      else
      {
      }
    }
    ++v3;
  }
  while (v2 != v3);
LABEL_24:
  swift_bridgeObjectRelease();
  char v46 = *(void (**)(void *))(v47 + 8);
  v46(v5);
}

uint64_t sub_1001054A4()
{
  swift_willThrow();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100105510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  sub_1000D70C8(&qword_1002701B0);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001055B8, 0, 0);
}

uint64_t sub_1001055B8()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v31 = v1 + 56;
  uint64_t v33 = v1;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & v2;
  int64_t v32 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      int64_t v34 = v7;
      uint64_t v35 = (v5 - 1) & v5;
      unint64_t v9 = __clz(__rbit64(v5)) | (v7 << 6);
      goto LABEL_21;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v10 >= v32) {
      goto LABEL_29;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v32) {
        goto LABEL_29;
      }
      unint64_t v11 = *(void *)(v31 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v32) {
          goto LABEL_29;
        }
        unint64_t v11 = *(void *)(v31 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_20:
    int64_t v34 = v12;
    uint64_t v35 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_21:
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v17 = (uint64_t *)(*(void *)(v33 + 48) + 16 * v9);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = type metadata accessor for TaskPriority();
    uint64_t v21 = *(void *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v14, 1, 1, v20);
    id v22 = (void *)swift_allocObject();
    void v22[2] = 0;
    v22[3] = 0;
    v22[4] = v16;
    void v22[5] = v19;
    v22[6] = v18;
    sub_1001098E4(v14, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v23 = *(void *)(v0 + 96);
    if (v15 == 1)
    {
      sub_10010994C(*(void *)(v0 + 96));
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    }
    int64_t v7 = v34;
    if (v22[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v26 = v25;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 0;
    }
    uint64_t v27 = **(void **)(v0 + 72);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = &unk_100270C80;
    *(void *)(v28 + 24) = v22;
    uint64_t v29 = v26 | v24;
    if (v26 | v24)
    {
      uint64_t v29 = v0 + 16;
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = v24;
      *(void *)(v0 + 40) = v26;
    }
    uint64_t v8 = *(void *)(v0 + 104);
    *(void *)(v0 + 48) = 1;
    *(void *)(v0 + 56) = v29;
    *(void *)(v0 + 64) = v27;
    swift_task_create();
    swift_release();
    uint64_t result = sub_10010994C(v8);
    unint64_t v5 = v35;
  }
  uint64_t v13 = v7 + 4;
  if (v7 + 4 < v32)
  {
    unint64_t v11 = *(void *)(v31 + 8 * v13);
    if (!v11)
    {
      while (1)
      {
        int64_t v12 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_33;
        }
        if (v12 >= v32) {
          goto LABEL_29;
        }
        unint64_t v11 = *(void *)(v31 + 8 * v12);
        ++v13;
        if (v11) {
          goto LABEL_20;
        }
      }
    }
    int64_t v12 = v7 + 4;
    goto LABEL_20;
  }
LABEL_29:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_100105994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  void v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_100105A28, 0, 0);
}

uint64_t sub_100105A28()
{
  uint64_t v17 = v0;
  uint64_t v1 = *(void **)(v0[3] + 64);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[2] = 0;
  unsigned int v3 = [v1 cleanupAllItemsFrom:v2 error:v0 + 2];

  uint64_t v4 = (void *)v0[2];
  if (v3)
  {
    id v5 = v4;
  }
  else
  {
    id v6 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1000D78F8(v7, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    unint64_t v11 = v0[5];
    if (v10)
    {
      uint64_t v15 = v0[4];
      int64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)int64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = sub_100158C6C(v15, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to cleanup items from group %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100105CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return _swift_task_switch(sub_100105CE4, 0, 0);
}

uint64_t sub_100105CE4()
{
  NSString v2 = (unint64_t *)v0[9];
  uint64_t v1 = v0[10];
  if (*(void *)(v1 + 16) <= v2[2] >> 3)
  {
    uint64_t v47 = (unint64_t *)v0[9];
    swift_bridgeObjectRetain();
    sub_100140724(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    NSString v2 = sub_1001408CC(v1, (uint64_t)v2);
  }
  if (v2[2])
  {
    unsigned int v3 = sub_100141940((uint64_t)v2);
    v0[12] = v3;
    swift_bridgeObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    unint64_t v8 = v0[8];
    if (v7)
    {
      uint64_t v44 = v0[7];
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v9 = 136315138;
      swift_bridgeObjectRetain();
      v0[5] = sub_100158C6C(v44, v8, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Accounts in group %s not in sync with keychain", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_retain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_retain();
      uint64_t v21 = Array.description.getter();
      unint64_t v23 = v22;
      swift_release();
      v0[4] = sub_100158C6C(v21, v23, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Performing unshare for accounts - %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v24 = v0[11];
    uint64_t v26 = v0[7];
    uint64_t v25 = v0[8];
    uint64_t v27 = (void *)swift_task_alloc();
    v0[13] = v27;
    v27[2] = v3;
    v27[3] = v24;
    v27[4] = v26;
    v27[5] = v25;
    uint64_t v28 = (void *)swift_task_alloc();
    v0[14] = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_1001065CC;
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    p_cb = &OBJC_PROTOCOL___AKAnisetteProvisioningDaemonProtocol.cb;
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_1000D78F8(v11, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    int64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v15 = v0[8];
    if (v14)
    {
      uint64_t v16 = v0[7];
      uint64_t v45 = v11;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      v0[6] = sub_100158C6C(v16, v15, (uint64_t *)&v47);
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___AKAnisetteProvisioningDaemonProtocol + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Accounts in group %s are in sync", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v11 = v45;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v30 = v0[9];
    uint64_t v29 = v0[10];
    if (*(void *)(v30 + 16) <= *(void *)(v29 + 16) >> 3)
    {
      uint64_t v47 = (unint64_t *)v0[10];
      swift_bridgeObjectRetain();
      sub_100140724(v30);
      uint64_t v31 = v47;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_1001408CC(v30, v29);
    }
    v0[15] = v31;
    if (v31[2])
    {
      if (*((void *)p_cb + 312) != -1) {
        swift_once();
      }
      v0[16] = sub_1000D78F8(v11, (uint64_t)qword_100274490);
      int64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        int64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Keychain has items belonging to orphaned accounts", v34, 2u);
        swift_slowDealloc();
      }

      swift_bridgeObjectRetain_n();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = (unint64_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v38 = Set.description.getter();
        unint64_t v40 = v39;
        swift_bridgeObjectRelease();
        v0[3] = sub_100158C6C(v38, v40, (uint64_t *)&v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Cleaning up items for accounts  - %s", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v42 = (void *)swift_task_alloc();
      v0[17] = v42;
      *uint64_t v42 = v0;
      v42[1] = sub_100106A70;
      v42[16] = v0[11];
      return _swift_task_switch(sub_1001077B4, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      id v41 = (uint64_t (*)(void))v0[1];
      return v41();
    }
  }
}

uint64_t sub_1001065CC()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100106700, 0, 0);
}

uint64_t sub_100106700()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  if (*(void *)(v1 + 16) <= *(void *)(v2 + 16) >> 3)
  {
    uint64_t v17 = (unint64_t *)v0[10];
    swift_bridgeObjectRetain();
    sub_100140724(v1);
    unsigned int v3 = v17;
  }
  else
  {
    swift_bridgeObjectRetain();
    unsigned int v3 = sub_1001408CC(v1, v2);
  }
  v0[15] = v3;
  if (v3[2])
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    v0[16] = sub_1000D78F8(v4, (uint64_t)qword_100274490);
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      BOOL v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Keychain has items belonging to orphaned accounts", v7, 2u);
      swift_slowDealloc();
    }

    swift_bridgeObjectRetain_n();
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      BOOL v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (unint64_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v11 = Set.description.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      v0[3] = sub_100158C6C(v11, v13, (uint64_t *)&v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cleaning up items for accounts  - %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v16 = (void *)swift_task_alloc();
    v0[17] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100106A70;
    v16[16] = v0[11];
    return _swift_task_switch(sub_1001077B4, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100106A70(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_100106F84;
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    id v5 = sub_100106B98;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100106B98()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  v4[2] = v2;
  void v4[3] = v1;
  void v4[4] = v3;
  id v5 = (void *)swift_task_alloc();
  v0[21] = v5;
  void *v5 = v0;
  v5[1] = sub_100106C90;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100106C90()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100106DC4, 0, 0);
}

uint64_t sub_100106DC4()
{
  uint64_t v10 = v0;
  swift_bridgeObjectRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v4 = Set.description.getter();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100158C6C(v4, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Cleaned up items for accounts - %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100106F84()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100106FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[9] = a2;
  sub_1000D70C8(&qword_1002701B0);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return _swift_task_switch(sub_100107094, 0, 0);
}

uint64_t sub_100107094()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = type metadata accessor for TaskPriority();
    uint64_t v4 = *(void *)(v3 - 8);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    uint64_t v24 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    unint64_t v23 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain();
    unint64_t v5 = (void *)(v1 + 40);
    do
    {
      uint64_t v8 = *(void *)(v0 + 112);
      uint64_t v7 = *(void *)(v0 + 120);
      uint64_t v9 = *(void *)(v0 + 104);
      uint64_t v27 = v2;
      uint64_t v28 = *(void *)(v0 + 96);
      uint64_t v10 = *(void *)(v0 + 88);
      uint64_t v26 = v5;
      uint64_t v11 = *(v5 - 1);
      uint64_t v12 = *v5;
      v25(v7, 1, 1, v3);
      unint64_t v13 = (void *)swift_allocObject();
      v13[2] = 0;
      v13[3] = 0;
      void v13[4] = v10;
      void v13[5] = v11;
      v13[6] = v12;
      v13[7] = v28;
      uint8_t v13[8] = v9;
      sub_1001098E4(v7, v8);
      LODWORD(v8) = (*v24)(v8, 1, v3);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v14 = *(void *)(v0 + 112);
      if (v8 == 1)
      {
        sub_10010994C(*(void *)(v0 + 112));
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v23)(v14, v3);
      }
      if (v13[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v17 = v16;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v18 = **(void **)(v0 + 72);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = &unk_100270C68;
      *(void *)(v19 + 24) = v13;
      uint64_t v20 = v17 | v15;
      if (v17 | v15)
      {
        uint64_t v20 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v15;
        *(void *)(v0 + 40) = v17;
      }
      uint64_t v6 = *(void *)(v0 + 120);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v20;
      *(void *)(v0 + 64) = v18;
      swift_task_create();
      swift_release();
      sub_10010994C(v6);
      unint64_t v5 = v26 + 2;
      uint64_t v2 = v27 - 1;
    }
    while (v27 != 1);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100107384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  void v8[4] = a5;
  void v8[5] = a6;
  v8[3] = a4;
  return _swift_task_switch(sub_1001073AC, 0, 0);
}

uint64_t sub_1001073AC()
{
  sub_1000E2310((void *)(v0[3] + 112), *(void *)(v0[3] + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100107460;
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  return sub_1000E9320(v5, v4, v2, v3, 0, 0);
}

uint64_t sub_100107460()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100107594, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100107594()
{
  uint64_t v11 = v0;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[5];
  if (v4)
  {
    uint64_t v6 = v0[4];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_100158C6C(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to unshare %s during performAccountsSync", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100107794()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_1001077B4, 0, 0);
}

uint64_t sub_1001077B4()
{
  uint64_t v1 = *(void **)(v0[16] + 64);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1001078B8;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001088DC;
  v0[13] = &unk_10022C8B8;
  v0[14] = v2;
  [v1 fetchSharedAccountsWithGroupID:0 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001078B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_100107E6C;
  }
  else {
    uint64_t v2 = sub_1001079C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001079C8()
{
  uint64_t v47 = v0;
  unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 120);
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 0;
      unint64_t v4 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      uint64_t v45 = &_swiftEmptyDictionarySingleton;
      unint64_t v5 = &selRef_setConfigDataVersion_forAccount_;
      uint64_t v43 = v2;
      unint64_t v44 = isUniquelyReferenced_nonNull_native;
      unint64_t v42 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      while (1)
      {
        if (v4) {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v6 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v3 + 32);
        }
        uint64_t v7 = v6;
        uint64_t v8 = v3 + 1;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        id v9 = [v6 v5[361]];
        if (v9)
        {
          uint64_t v10 = v9;
          if ([v9 isCurrentUser])
          {
            id v11 = [v7 clientID];
            uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v14 = v13;

            uint64_t v15 = v7;
            unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v46 = v45;
            unint64_t v17 = sub_10014A0BC(v12, v14);
            uint64_t v18 = v45[2];
            BOOL v19 = (v16 & 1) == 0;
            uint64_t v20 = v18 + v19;
            if (__OFADD__(v18, v19)) {
              goto LABEL_34;
            }
            char v21 = v16;
            if (v45[3] >= v20)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                unint64_t v22 = v45;
                if ((v16 & 1) == 0) {
                  goto LABEL_17;
                }
              }
              else
              {
                sub_10013F76C();
                unint64_t v22 = v46;
                uint64_t v45 = v46;
                if ((v21 & 1) == 0) {
                  goto LABEL_17;
                }
              }
            }
            else
            {
              sub_10013E3EC(v20, isUniquelyReferenced_nonNull_native);
              unint64_t v22 = v46;
              unint64_t v23 = sub_10014A0BC(v12, v14);
              if ((v21 & 1) != (v24 & 1))
              {
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              }
              unint64_t v17 = v23;
              uint64_t v45 = v22;
              if ((v21 & 1) == 0)
              {
LABEL_17:
                v22[(v17 >> 6) + 8] |= 1 << v17;
                uint64_t v25 = (uint64_t *)(v22[6] + 16 * v17);
                *uint64_t v25 = v12;
                v25[1] = v14;
                *(void *)(v22[7] + 8 * v17) = v15;
                uint64_t v26 = v22[2];
                BOOL v27 = __OFADD__(v26, 1);
                uint64_t v28 = v26 + 1;
                if (v27) {
                  goto LABEL_35;
                }
                void v22[2] = v28;
                swift_bridgeObjectRetain();
                goto LABEL_27;
              }
            }
            uint64_t v38 = v22[7];

            *(void *)(v38 + 8 * v17) = v15;
LABEL_27:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            uint64_t v2 = v43;
            unint64_t isUniquelyReferenced_nonNull_native = v44;
            unint64_t v4 = v42;
            unint64_t v5 = &selRef_setConfigDataVersion_forAccount_;
            goto LABEL_6;
          }
        }
        else
        {
          if (qword_10026F9C0 != -1) {
            swift_once();
          }
          uint64_t v29 = type metadata accessor for Logger();
          sub_1000D78F8(v29, (uint64_t)qword_100274490);
          uint64_t v30 = v7;
          uint64_t v7 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v7, v31))
          {
            uint64_t v32 = swift_slowAlloc();
            uint64_t v46 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v32 = 136315138;
            id v33 = [v30 clientID];
            uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v36 = v35;

            uint64_t v37 = v34;
            unint64_t v4 = v42;
            *(void *)(v32 + 4) = sub_100158C6C(v37, v36, (uint64_t *)&v46);
            unint64_t v5 = &selRef_setConfigDataVersion_forAccount_;
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, v7, v31, "Shared SIWA account (%s) with nil share info. Skipping...", (uint8_t *)v32, 0xCu);
            swift_arrayDestroy();
            uint64_t v2 = v43;
            unint64_t isUniquelyReferenced_nonNull_native = v44;
            swift_slowDealloc();
            swift_slowDealloc();

            goto LABEL_6;
          }
        }
LABEL_6:
        ++v3;
        if (v8 == v2) {
          goto LABEL_38;
        }
      }
    }
  }
  uint64_t v45 = &_swiftEmptyDictionarySingleton;
LABEL_38:
  swift_bridgeObjectRelease();
  unint64_t v40 = *(uint64_t (**)(void *))(v41 + 8);
  return v40(v45);
}

uint64_t sub_100107E6C()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100107ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  sub_1000D70C8(&qword_1002701B0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100107F80, 0, 0);
}

void sub_100107F80()
{
  unint64_t v50 = v0;
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v2 + 56;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 56);
  int64_t v47 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v46 = v1;
  uint64_t v41 = v2 + 56;
  uint64_t v42 = v2;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_21;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }
    if (v10 >= v47) {
      goto LABEL_38;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v47) {
        goto LABEL_38;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v47) {
          goto LABEL_38;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_21:
    uint64_t v13 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(v1 + 16);
    swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_10014A0BC(v14, v15);
    if (v18)
    {
      unint64_t v44 = v6;
      int64_t v45 = v7;
      uint64_t v19 = *(void *)(v48 + 112);
      uint64_t v43 = *(void *)(v48 + 104);
      uint64_t v20 = *(void *)(v48 + 96);
      id v21 = *(id *)(*(void *)(v1 + 56) + 8 * v17);
      swift_bridgeObjectRelease();
      uint64_t v22 = type metadata accessor for TaskPriority();
      uint64_t v23 = *(void *)(v22 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v19, 1, 1, v22);
      char v24 = (void *)swift_allocObject();
      v24[2] = 0;
      v24[3] = 0;
      v24[4] = v20;
      void v24[5] = v21;
      v24[6] = v14;
      v24[7] = v15;
      sub_1001098E4(v19, v43);
      LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v43, 1, v22);
      id v25 = v21;
      swift_retain();
      uint64_t v26 = *(void *)(v48 + 104);
      if (v19 == 1)
      {
        sub_10010994C(*(void *)(v48 + 104));
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
      }
      uint64_t v3 = v41;
      if (v24[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v33 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v35 = v34;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v35 = 0;
      }
      int64_t v7 = v45;
      uint64_t v36 = **(void **)(v48 + 72);
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = &unk_100270C48;
      *(void *)(v37 + 24) = v24;
      uint64_t v38 = (void *)(v35 | v33);
      if (v35 | v33)
      {
        uint64_t v38 = v0 + 2;
        v0[2] = 0;
        v0[3] = 0;
        *(void *)(v48 + 32) = v33;
        *(void *)(v48 + 40) = v35;
      }
      unint64_t v6 = v44;
      uint64_t v39 = *(void *)(v48 + 112);
      *(void *)(v48 + 48) = 1;
      *(void *)(v48 + 56) = v38;
      *(void *)(v48 + 64) = v36;
      swift_task_create();

      swift_release();
      sub_10010994C(v39);
      uint64_t v1 = v46;
      uint64_t v2 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_26:
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_1000D78F8(v27, (uint64_t)qword_100274490);
      swift_bridgeObjectRetain();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = v3;
        int64_t v31 = v7;
        uint64_t v32 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v32 + 4) = sub_100158C6C(v14, v15, &v49);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "No account found matching bundleID %s", (uint8_t *)v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        int64_t v7 = v31;
        uint64_t v3 = v30;
        uint64_t v1 = v46;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
  }
  int64_t v12 = v10 + 3;
  if (v12 < v47)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v7 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_42;
        }
        if (v7 >= v47) {
          goto LABEL_38;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v7);
        ++v12;
        if (v11) {
          goto LABEL_20;
        }
      }
    }
    int64_t v7 = v12;
    goto LABEL_20;
  }
LABEL_38:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v40 = *(void (**)(void))(v48 + 8);
  v40();
}

uint64_t sub_100108548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  void v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  return _swift_task_switch(sub_1001085DC, 0, 0);
}

uint64_t sub_1001085DC()
{
  uint64_t v16 = v0;
  uint64_t v1 = *(void **)(v0[3] + 64);
  v0[2] = 0;
  unsigned int v2 = [v1 removeSharedAccount:v0[4] error:v0 + 2];
  uint64_t v3 = (void *)v0[2];
  if (v2)
  {
    id v4 = v3;
  }
  else
  {
    id v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1000D78F8(v6, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    int64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    unint64_t v10 = v0[6];
    if (v9)
    {
      uint64_t v14 = v0[5];
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)unint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = sub_100158C6C(v14, v10, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to remove account %s during performAccountsSync", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
    }
  }
  int64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100108858()
{
  sub_1000E2354(v0 + 24);
  swift_unknownObjectRelease();
  sub_1000E2354(v0 + 72);
  sub_1000E2354(v0 + 112);
  sub_1000E2354(v0 + 152);

  return _swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for SharedGroupsSyncController()
{
  return self;
}

uint64_t sub_1001088DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100109A9C();
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1001089A8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100108A84;
  return v6(a1);
}

uint64_t sub_100108A84()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100108B7C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1000D70C8((uint64_t *)&unk_100271E10);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    char v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100108E18(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  os_log_type_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *os_log_type_t v8 = v3;
  v8[1] = sub_1000D84E8;
  return sub_100105510(a1, a2, v7, v6);
}

void (*sub_100108ECC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100108F7C(v6, a2, a3);
  return sub_100108F34;
}

void sub_100108F34(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_100108F7C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100108FFC;
  }
  __break(1u);
  return result;
}

void sub_100108FFC(id *a1)
{
}

Swift::Int sub_100109004(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000D70C8(&qword_100271B90);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1001091A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v32 = (unint64_t *)result;
  uint64_t v33 = 0;
  int64_t v5 = 0;
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v6 = a3 + 64;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v6 - 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v7;
  uint64_t v34 = v6;
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      if (!*(void *)(v4 + 16)) {
        goto LABEL_38;
      }
LABEL_23:
      BOOL v17 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v13);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      unint64_t v37 = v13;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t v21 = v4;
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = v20 & ~v22;
      if (((*(void *)(v38 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v24 = *(void *)(v21 + 48);
      uint64_t v25 = (void *)(v24 + 16 * v23);
      BOOL v26 = *v25 == v18 && v25[1] == v19;
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v38 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          BOOL v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v18 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_5;
          }
        }
LABEL_37:
        swift_bridgeObjectRelease();
        Swift::Int result = swift_bridgeObjectRelease();
        uint64_t v4 = v21;
        unint64_t v13 = v37;
        goto LABEL_38;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v4 = v21;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v14 >= v35) {
      return sub_100108B7C(v32, a2, v33, a3);
    }
    unint64_t v15 = *(void *)(v34 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v35) {
        return sub_100108B7C(v32, a2, v33, a3);
      }
      unint64_t v15 = *(void *)(v34 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v35) {
          return sub_100108B7C(v32, a2, v33, a3);
        }
        unint64_t v15 = *(void *)(v34 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(void *)(v4 + 16)) {
      goto LABEL_23;
    }
LABEL_38:
    *(unint64_t *)((char *)v32 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    if (__OFADD__(v33++, 1))
    {
      __break(1u);
      return sub_100108B7C(v32, a2, v33, a3);
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v35) {
    return sub_100108B7C(v32, a2, v33, a3);
  }
  unint64_t v15 = *(void *)(v34 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v35) {
      return sub_100108B7C(v32, a2, v33, a3);
    }
    unint64_t v15 = *(void *)(v34 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100109490(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1001091A8((uint64_t)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1001091A8((uint64_t)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_10010964C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000D84E8;
  return sub_100106FE8(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_100109714(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000D7208;
  return sub_100107ED8(a1, a2, v6, v7, v8);
}

uint64_t sub_1001097D8()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100109828()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000D84E8;
  *(void *)(v4 + 40) = v2;
  *(void *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  return _swift_task_switch(sub_1001085DC, 0, 0);
}

uint64_t sub_1001098E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8(&qword_1002701B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010994C(uint64_t a1)
{
  uint64_t v2 = sub_1000D70C8(&qword_1002701B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001099AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001099E4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100270C50 + dword_100270C50);
  return v6(a1, v4);
}

unint64_t sub_100109A9C()
{
  unint64_t result = qword_100271600;
  if (!qword_100271600)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100271600);
  }
  return result;
}

uint64_t sub_100109ADC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100109B2C()
{
  long long v5 = *(_OWORD *)(v0 + 48);
  long long v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000D84E8;
  *(void *)(v3 + 56) = v2;
  *(_OWORD *)(v3 + 40) = v5;
  *(_OWORD *)(v3 + 24) = v6;
  return _swift_task_switch(sub_1001073AC, 0, 0);
}

uint64_t sub_100109BF4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000D7208;
  long long v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100270C50 + dword_100270C50);
  return v6(a1, v4);
}

uint64_t sub_100109CAC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100109CF4()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000D84E8;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v5;
  return _swift_task_switch(sub_100105A28, 0, 0);
}

uint64_t Logger.akd.unsafeMutableAddressor()
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_1000D78F8(v0, (uint64_t)static Logger.akd);
}

uint64_t sub_100109E20()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100109F48(v0, static Logger.akd);
  sub_1000D78F8(v0, (uint64_t)static Logger.akd);
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.akd.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10026F9A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_1000D78F8(v2, (uint64_t)static Logger.akd);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t *sub_100109F48(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100109FAC()
{
  uint64_t v1 = sub_1000D70C8((uint64_t *)&unk_100270030);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v57 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v57 - v12;
  int64_t v14 = (void *)v0[2];
  unint64_t v15 = [v14 primaryAuthKitAccount];
  if (!v15)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_1000D78F8(v21, (uint64_t)qword_100274490);
    int64_t v16 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v22, "No primary AuthKit account found.", v23, 2u);
      swift_slowDealloc();
    }
    goto LABEL_15;
  }
  int64_t v16 = v15;
  id v17 = [v14 sharingGroupLastNotificationDateForAccount:v15];
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    goto LABEL_10;
  }
  uint64_t v18 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v19(v3, v11, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
LABEL_10:
    sub_1000D7CD4((uint64_t)v3, (uint64_t *)&unk_100270030);
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_1000D78F8(v24, (uint64_t)qword_100274490);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "There was no KCSharing group update notification saved. Skipping token rotation.", v27, 2u);
      swift_slowDealloc();
    }

LABEL_15:
    char v28 = 0;
    return v28 & 1;
  }
  v19(v13, v3, v4);
  sub_1000E2310(v0 + 3, v0[6]);
  Swift::Int v20 = (char *)sub_100137068();
  if (v20)
  {
    uint64_t v30 = &v20[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate];
    int64_t v31 = v20;
    uint64_t v61 = (uint64_t)v30;
    char v28 = static Date.< infix(_:_:)();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = sub_1000D78F8(v32, (uint64_t)qword_100274490);
    uint64_t v34 = v31;
    uint64_t v63 = v33;
    int64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    int v37 = v36;
    BOOL v38 = os_log_type_enabled(v35, v36);
    uint64_t v62 = v34;
    if (v38)
    {
      uint64_t v39 = swift_slowAlloc();
      LODWORD(v60) = v37;
      unint64_t v40 = (uint8_t *)v39;
      uint64_t v59 = swift_slowAlloc();
      v65[0] = v59;
      *(_DWORD *)unint64_t v40 = 136315138;
      unint64_t v57 = v40 + 4;
      uint64_t v58 = v40;
      sub_10010CDB8();
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_100158C6C(v41, v42, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v60, "lastSavedMembershipInfo - %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v4);
    int64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v65[0] = v61;
      unint64_t v60 = v49;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v59 = (uint64_t)(v49 + 4);
      sub_10010CDB8();
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_100158C6C(v50, v51, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v52 = *(void (**)(char *, uint64_t))(v5 + 8);
      v52(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "sharingGroupUpdateLastNotificationDate - %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v52 = *(void (**)(char *, uint64_t))(v5 + 8);
      v52(v8, v4);
    }

    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      __n128 v55 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)__n128 v55 = 67109120;
      LODWORD(v65[0]) = v28 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "needsTokenRotation - %{BOOL}d", v55, 8u);
      swift_slowDealloc();
    }
    uint64_t v56 = v62;

    v52(v13, v4);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_1000D78F8(v43, (uint64_t)qword_100274490);
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "There was no last saved membership info. Need token rotation.", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    char v28 = 1;
  }
  return v28 & 1;
}

uint64_t sub_10010A918()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10010A938, 0, 0);
}

uint64_t sub_10010A938()
{
  uint64_t v1 = v0[2];
  sub_1000E2310((void *)(v1 + 24), *(void *)(v1 + 48));
  v0[3] = sub_100137068();
  sub_1000E2310((void *)(v1 + 24), *(void *)(v1 + 48));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  void *v2 = v0;
  v2[1] = sub_10010AA48;
  return sub_1001371A0();
}

uint64_t sub_10010AA48(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10010AC7C;
  }
  else {
    uint64_t v4 = sub_10010AB5C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10010AB5C()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  sub_1000E2310((void *)(*(void *)(v0 + 16) + 24), *(void *)(*(void *)(v0 + 16) + 48));
  sub_10013748C(v1);
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 24);

    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100271AB0 + dword_100271AB0);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v6;
    void *v6 = v0;
    v6[1] = sub_10010ACE0;
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 24);
    return v9(v8, v7);
  }
}

uint64_t sub_10010AC7C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010ACE0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10010AFC4;
  }
  else {
    uint64_t v4 = sub_10010ADF4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10010ADF4()
{
  if (*(void *)(v0[8] + 16))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[10] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10010B030;
    uint64_t v2 = v0[2];
    v1[3] = v0[8];
    v1[4] = v2;
    return _swift_task_switch(sub_10010B258, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_1000D78F8(v3, (uint64_t)qword_100274490);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = (void *)v0[5];
    uint64_t v8 = (void *)v0[3];
    if (v6)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No groups with depatures detected.", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10010AFC4()
{
  uint64_t v1 = *(void **)(v0 + 24);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10010B030()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_10010B1CC;
  }
  else {
    uint64_t v2 = sub_10010B160;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010B160()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010B1CC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010B238(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_10010B258, 0, 0);
}

uint64_t sub_10010B258()
{
  uint64_t v11 = v0;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 40) = sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_100158C6C(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Rotating share tokens for accounts in groups - %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 48) = v8;
  *(void *)uint64_t v8 = v0;
  *(void *)(v8 + 8) = sub_10010B4D0;
  *(_OWORD *)(v8 + 128) = *(_OWORD *)(v0 + 24);
  return _swift_task_switch(sub_10010BE54, 0, 0);
}

uint64_t sub_10010B4D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10010B604, 0, 0);
  }
}

uint64_t sub_10010B604()
{
  if (*(void *)(v0[7] + 16))
  {
    sub_1000E2310((void *)(v0[4] + 72), *(void *)(v0[4] + 96));
    uint64_t v1 = (void *)swift_task_alloc();
    v0[8] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10010B76C;
    uint64_t v2 = v0[7];
    return sub_1000FA794(v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No SIWA accounts found in the departed groups.", v6, 2u);
      swift_slowDealloc();
    }

    unint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10010B76C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_10010BCB8;
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    os_log_type_t v5 = sub_10010B894;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10010B894()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  v4[2] = v1;
  void v4[3] = v2;
  void v4[4] = v3;
  os_log_type_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  void *v5 = v0;
  v5[1] = sub_10010B98C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10010B98C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10010BAE4, 0, 0);
}

uint64_t sub_10010BAE4()
{
  sub_1000E2310((void *)(*(void *)(v0 + 32) + 24), *(void *)(*(void *)(v0 + 32) + 48));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10010BB84;
  return sub_1001371A0();
}

uint64_t sub_10010BB84(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10010BD1C, 0, 0);
  }
}

uint64_t sub_10010BCB8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010BD1C()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  sub_1000E2310((void *)(*(void *)(v0 + 32) + 24), *(void *)(*(void *)(v0 + 32) + 48));
  sub_10013748C(v1);
  if (v2)
  {

    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Token rotation complete", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v3();
}

uint64_t sub_10010BE34(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return _swift_task_switch(sub_10010BE54, 0, 0);
}

uint64_t sub_10010BE54()
{
  uint64_t v1 = *(void **)(v0[17] + 64);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10010BF54;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001088DC;
  v0[13] = &unk_10022C9E8;
  v0[14] = v2;
  [v1 fetchAllSharedAccountsWithShareTokenWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10010BF54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_10010C54C;
  }
  else {
    uint64_t v2 = sub_10010C064;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10010C064()
{
  os_log_type_t v45 = v0;
  unint64_t v1 = v0[15];
  if (v1 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      if (v2 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v3 = 0;
      unint64_t v43 = v1 & 0xC000000000000001;
      uint64_t v41 = &_swiftEmptyDictionarySingleton;
      unint64_t v39 = v1;
      unint64_t v40 = v0;
      uint64_t v42 = v2;
      while (1)
      {
        id v4 = v43 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v1 + 8 * v3 + 32);
        os_log_type_t v5 = v4;
        id v6 = [v4 shareInfo];
        if (!v6) {
          break;
        }
        uint64_t v7 = v6;
        uint64_t v8 = v0[16];
        id v9 = [v6 groupID];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        LOBYTE(v9) = sub_1001396F0(v10, v12, v8);
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0 && [v7 isCurrentUser])
        {
          uint64_t v0 = [v5 clientID];
          unint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v14 = v13;

          id v15 = v5;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v44 = v41;
          unint64_t v18 = sub_10014A0BC(v1, v14);
          uint64_t v19 = v41[2];
          BOOL v20 = (v17 & 1) == 0;
          uint64_t v21 = v19 + v20;
          if (__OFADD__(v19, v20))
          {
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          uint64_t v0 = v17;
          if (v41[3] >= v21)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if ((v17 & 1) == 0) {
                goto LABEL_27;
              }
            }
            else
            {
              sub_10013F76C();
              uint64_t v41 = v44;
              if ((v0 & 1) == 0) {
                goto LABEL_27;
              }
            }
          }
          else
          {
            sub_10013E3EC(v21, isUniquelyReferenced_nonNull_native);
            uint64_t v41 = v44;
            unint64_t v22 = sub_10014A0BC(v1, v14);
            if ((v0 & 1) != (v23 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              return;
            }
            unint64_t v18 = v22;
            if ((v0 & 1) == 0)
            {
LABEL_27:
              v41[(v18 >> 6) + 8] |= 1 << v18;
              uint64_t v34 = (unint64_t *)(v41[6] + 16 * v18);
              *uint64_t v34 = v1;
              v34[1] = v14;
              *(void *)(v41[7] + 8 * v18) = v15;
              uint64_t v35 = v41[2];
              BOOL v36 = __OFADD__(v35, 1);
              uint64_t v37 = v35 + 1;
              if (v36) {
                goto LABEL_35;
              }
              uint64_t v41[2] = v37;
              swift_bridgeObjectRetain();
LABEL_29:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              unint64_t v1 = v39;
              uint64_t v0 = v40;
LABEL_30:
              uint64_t v2 = v42;
              goto LABEL_6;
            }
          }
          uint64_t v33 = v41[7];

          *(void *)(v33 + 8 * v18) = v15;
          goto LABEL_29;
        }

LABEL_6:
        if (v2 == ++v3) {
          goto LABEL_38;
        }
      }
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_1000D78F8(v24, (uint64_t)qword_100274490);
      id v25 = v5;
      os_log_type_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        unint64_t v44 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315138;
        id v29 = [v25 clientID];
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v32 = v31;

        *(void *)(v28 + 4) = sub_100158C6C(v30, v32, (uint64_t *)&v44);
        unint64_t v1 = v39;
        uint64_t v0 = v40;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Shared SIWA account (%s) with nil share info. Skipping...", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_30;
    }
  }
  uint64_t v41 = &_swiftEmptyDictionarySingleton;
LABEL_38:
  swift_bridgeObjectRelease();
  BOOL v38 = (void (*)(void *))v0[1];
  v38(v41);
}

uint64_t sub_10010C54C()
{
  swift_willThrow();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010C5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  sub_1000D70C8(&qword_1002701B0);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_10010C660, 0, 0);
}

uint64_t sub_10010C660()
{
  uint64_t v43 = v0;
  unint64_t v1 = *(void *)(v0 + 80);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_26;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v0 + 88);
    unint64_t v41 = v1 & 0xC000000000000001;
    uint64_t v36 = *(void *)(v0 + 80) + 32;
    uint64_t v40 = v5;
    uint64_t v35 = v2;
    while (1)
    {
      if (v41) {
        id v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = (char *)*(id *)(v36 + 8 * v4);
      }
      uint64_t v7 = v6;
      uint64_t v8 = (uint64_t *)&v6[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
      if (!*(void *)(v5 + 16)) {
        goto LABEL_16;
      }
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      swift_bridgeObjectRetain();
      unint64_t v11 = sub_10014A0BC(v9, v10);
      if ((v12 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_16:
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        sub_1000D78F8(v24, (uint64_t)qword_100274490);
        id v25 = v7;
        os_log_type_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          uint64_t v42 = swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315138;
          uint64_t v29 = *v8;
          unint64_t v30 = v8[1];
          swift_bridgeObjectRetain();
          *(void *)(v28 + 4) = sub_100158C6C(v29, v30, &v42);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "No matching account found with bundleID %s", (uint8_t *)v28, 0xCu);
          swift_arrayDestroy();
          uint64_t v5 = v40;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_6;
      }
      uint64_t v13 = *(void *)(v0 + 112);
      uint64_t v38 = *(void *)(v0 + 104);
      uint64_t v14 = *(void *)(v0 + 96);
      id v15 = *(id *)(*(void *)(v5 + 56) + 8 * v11);
      swift_bridgeObjectRelease();
      uint64_t v16 = type metadata accessor for TaskPriority();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, 1, 1, v16);
      unint64_t v18 = (void *)swift_allocObject();
      v18[2] = 0;
      uint64_t v19 = v18 + 2;
      v18[3] = 0;
      void v18[4] = v14;
      void v18[5] = v15;
      v18[6] = v7;
      sub_1001098E4(v13, v38);
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v38, 1, v16);
      id v39 = v15;
      id v37 = v7;
      swift_retain();
      uint64_t v20 = *(void *)(v0 + 104);
      if (v13 == 1)
      {
        sub_1000D7CD4(*(void *)(v0 + 104), &qword_1002701B0);
        if (!*v19) {
          goto LABEL_21;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
        if (!*v19)
        {
LABEL_21:
          uint64_t v21 = 0;
          uint64_t v23 = 0;
          goto LABEL_22;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v23 = v22;
      swift_unknownObjectRelease();
LABEL_22:
      uint64_t v2 = v35;
      uint64_t v31 = **(void **)(v0 + 72);
      uint64_t v32 = v23 | v21;
      if (v23 | v21)
      {
        uint64_t v32 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v21;
        *(void *)(v0 + 40) = v23;
      }
      uint64_t v33 = *(void *)(v0 + 112);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v32;
      *(void *)(v0 + 64) = v31;
      swift_task_create();

      swift_release();
      sub_1000D7CD4(v33, &qword_1002701B0);
      uint64_t v5 = v40;
LABEL_6:
      if (v2 == ++v4) {
        goto LABEL_26;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010CB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  void v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_10010CC00, 0, 0);
}

uint64_t sub_10010CC00()
{
  unint64_t v1 = *(void **)(v0[3] + 64);
  v0[2] = 0;
  unsigned int v2 = [v1 removeSharedAccount:v0[4] error:v0 + 2];
  uint64_t v3 = (void *)v0[2];
  if (v2
    && (uint64_t v4 = v0[5],
        v0[2] = 0,
        id v5 = v3,
        unsigned int v6 = [v1 addSharedAccountWithCredential:v4 error:v0 + 2],
        uint64_t v3 = (void *)v0[2],
        v6))
  {
    unint64_t v11 = (uint64_t (*)(void))v0[1];
    id v7 = v3;
    uint64_t v8 = v11;
  }
  else
  {
    id v9 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
  }
  return v8();
}

uint64_t sub_10010CD44()
{
  sub_1000E2354(v0 + 24);
  swift_unknownObjectRelease();
  sub_1000E2354(v0 + 72);

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for SharedAccountsTokenRotationController()
{
  return self;
}

unint64_t sub_10010CDB8()
{
  unint64_t result = qword_100270D80;
  if (!qword_100270D80)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100270D80);
  }
  return result;
}

uint64_t sub_10010CE10(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *id v9 = v3;
  v9[1] = sub_1000D7208;
  return sub_10010C5B8(a1, a2, v6, v7, v8);
}

uint64_t sub_10010CED4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010CF24()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_1000D84E8;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  return _swift_task_switch(sub_10010CC00, 0, 0);
}

uint64_t AppleIDPasskeyDaemonService.serviceName.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

__objc2_prot *AppleIDPasskeyDaemonService.exportedProtocol.getter()
{
  return &OBJC_PROTOCOL___AKAppleIDPasskeyDaemonProtocol;
}

id AppleIDPasskeyDaemonService.exportedObject.getter@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for AppleIDPasskeyDaemonService();
  *a1 = v3;

  return v3;
}

uint64_t type metadata accessor for AppleIDPasskeyDaemonService()
{
  return self;
}

Swift::Bool __swiftcall AppleIDPasskeyDaemonService.shouldAcceptNewConnection(_:)(NSXPCConnection a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for AppleIDPasskeyDaemonService();
  unsigned int v3 = objc_msgSendSuper2(&v7, "shouldAcceptNewConnection:", a1.super.isa);
  if (v3)
  {
    id v4 = [objc_allocWithZone((Class)AKClient) initWithConnection:a1.super.isa];
    id v5 = *(void **)&v1[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client];
    *(void *)&v1[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client] = v4;
  }
  return v3;
}

id AppleIDPasskeyDaemonService.init()()
{
  *(void *)&v0[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyDaemonService();
  return objc_msgSendSuper2(&v2, "init");
}

id AppleIDPasskeyDaemonService.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleIDPasskeyDaemonService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t AppleIDPasskeyDaemonService.setupAppleIDPasskey(with:)(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return _swift_task_switch(sub_10010D350, 0, 0);
}

uint64_t sub_10010D350()
{
  uint64_t v1 = v0;
  Class super_class = v0[4].super_class;
  receiver = (char *)v0[5].receiver;
  p_Class super_class = &v0[4].super_class;
  uint64_t v5 = OBJC_IVAR___AKAppleIDPasskeyDaemonService_client;
  uint64_t v6 = *(void **)&receiver[OBJC_IVAR___AKAppleIDPasskeyDaemonService_client];
  id v7 = v6;
  uint64_t v8 = (objc_class *)sub_1000DB200(super_class, (uint64_t)v6);
  v0[5].Class super_class = v8;

  if (v8)
  {
    Class v9 = v0[4].super_class;
    uint64_t v10 = *(void **)&receiver[v5];
    id v11 = v10;
    id v12 = sub_1000DB6D0(v9, (uint64_t)v10);
    v0[6].receiver = v12;

    if (v12)
    {
      sub_1001101B0();
      v0[6].Class super_class = v13;
      os_log_type_t v26 = v13;
      id v27 = [objc_allocWithZone((Class)AKAppleIDPasskeyAuthenticationController) init];
      uint64_t v28 = (objc_class *)type metadata accessor for AppleIDPasskeyCredentialProvider();
      uint64_t v29 = (char *)objc_allocWithZone(v28);
      *(void *)&v29[OBJC_IVAR___AKAppleIDPasskeyCredentialProvider_authorizationController] = v27;
      v0[1].receiver = v29;
      v0[1].Class super_class = v28;
      id v30 = objc_msgSendSuper2(v0 + 1, "init");
      v0[7].receiver = v30;
      uint64_t v31 = (objc_class *)type metadata accessor for AppleIDPasskeyEnrollController();
      uint64_t v32 = (char *)objc_allocWithZone(v31);
      *(void *)&v32[OBJC_IVAR___AKAppleIDPasskeyEnrollController_passkeyValidator] = v26;
      *(void *)&v32[OBJC_IVAR___AKAppleIDPasskeyEnrollController_challengeProvider] = v8;
      *(void *)&v32[OBJC_IVAR___AKAppleIDPasskeyEnrollController_credentialProvider] = v30;
      *(void *)&v32[OBJC_IVAR___AKAppleIDPasskeyEnrollController_registrationProvider] = v12;
      v0[2].receiver = v32;
      v0[2].Class super_class = v31;
      swift_unknownObjectRetain();
      uint64_t v33 = v8;
      id v34 = v30;
      id v35 = v12;
      v0[7].Class super_class = (Class)objc_msgSendSuper2(v0 + 2, "init");
      id v37 = (uint64_t (*)(char))((char *)&dword_10026FF70 + dword_10026FF70);
      uint64_t v36 = (void *)swift_task_alloc();
      v0[8].receiver = v36;
      *uint64_t v36 = v0;
      v36[1] = sub_10010D854;
      return v37(0);
    }
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_1000D78F8(v14, (uint64_t)qword_1002744A8);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Passkey setup is missing provider.", v17, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  v0[3].Class super_class = (Class)-120018;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_1000D78F8(v18, (uint64_t)qword_1002744A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138412290;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(p_super_class - 1) = (Class)v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Setup passkey failed with error: %@.", v21, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v24 = (uint64_t (*)(void))v1->super_class;
  return v24(0);
}

uint64_t sub_10010D854(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10010DA0C;
  }
  else
  {
    *(unsigned char *)(v4 + 144) = a1 & 1;
    uint64_t v5 = sub_10010D980;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10010D980()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 96);
  unsigned int v3 = *(void **)(v0 + 88);

  swift_unknownObjectRelease();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 144);
  return v4(v5);
}

uint64_t sub_10010DA0C()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 96);
  unsigned int v3 = *(void **)(v0 + 88);

  swift_unknownObjectRelease();
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000D78F8(v4, (uint64_t)qword_1002744A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 64) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setup passkey failed with error: %@.", v7, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10(0);
}

uint64_t sub_10010DDA4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D8D54;
  v8[9] = v6;
  v8[10] = v7;
  return _swift_task_switch(sub_10010D350, 0, 0);
}

uint64_t AppleIDPasskeyDaemonService.verifyAppleIDPasskey(with:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return _swift_task_switch(sub_10010DEA0, 0, 0);
}

uint64_t sub_10010DEA0()
{
  sub_1001101B0();
  v0[3].Class super_class = v1;
  uint64_t v2 = v1;
  Class super_class = v0[2].super_class;
  uint64_t v4 = *(void **)((char *)v0[3].receiver + OBJC_IVAR___AKAppleIDPasskeyDaemonService_client);
  id v5 = v4;
  id v6 = sub_10011DDD0(super_class, (uint64_t)v4);
  v0[4].receiver = v6;

  id v7 = (objc_class *)type metadata accessor for AppleIDPasskeyVerificationController();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___AKAppleIDPasskeyVerificationController_passkeyValidator] = v2;
  *(void *)&v8[OBJC_IVAR___AKAppleIDPasskeyVerificationController_verificationProvider] = v6;
  v0[1].receiver = v8;
  v0[1].Class super_class = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v0[4].Class super_class = (Class)objc_msgSendSuper2(v0 + 1, "init");
  uint64_t v9 = (void *)swift_task_alloc();
  v0[5].receiver = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10010E1D0;
  uint64_t v10 = (uint64_t)v0[2].super_class;
  return sub_10011D7B0(v10);
}

uint64_t sub_10010E1D0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_10010E374;
  }
  else
  {
    *(void *)(v4 + 96) = a1;
    id v5 = sub_10010E2F8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10010E2F8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  return v1(v2);
}

uint64_t sub_10010E374()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Verify passkey failed with error: %@.", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10010E700(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100110FC0;
  void v8[5] = v6;
  v8[6] = v7;
  return _swift_task_switch(sub_10010DEA0, 0, 0);
}

uint64_t AppleIDPasskeyDaemonService.unenrollAppleIDPasskey(with:)(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return _swift_task_switch(sub_10010E7FC, 0, 0);
}

uint64_t sub_10010E7FC()
{
  sub_1001101B0();
  v0[3].Class super_class = v1;
  uint64_t v2 = v1;
  Class super_class = v0[2].super_class;
  uint64_t v4 = *(void **)((char *)v0[3].receiver + OBJC_IVAR___AKAppleIDPasskeyDaemonService_client);
  id v5 = v4;
  id v6 = sub_10012CF14(super_class, (uint64_t)v4);
  v0[4].receiver = v6;

  id v7 = (objc_class *)type metadata accessor for AppleIDPasskeyUnenrollController();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___AKAppleIDPasskeyUnenrollController_passkeyValidator] = v2;
  *(void *)&v8[OBJC_IVAR___AKAppleIDPasskeyUnenrollController_unenrollProvider] = v6;
  v0[1].receiver = v8;
  v0[1].Class super_class = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v0[4].Class super_class = (Class)objc_msgSendSuper2(v0 + 1, "init");
  id v11 = (uint64_t (*)(char))((char *)&dword_100271658 + dword_100271658);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[5].receiver = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10010EB44;
  return v11(0);
}

uint64_t sub_10010EB44(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_10010ECEC;
  }
  else
  {
    *(unsigned char *)(v4 + 96) = a1 & 1;
    id v5 = sub_10010EC70;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10010EC70()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  return v1(v2);
}

uint64_t sub_10010ECEC()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unenroll passkey failed with error: %@.", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7(0);
}

uint64_t sub_10010F07C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100110FC4;
  void v8[5] = v6;
  v8[6] = v7;
  return _swift_task_switch(sub_10010E7FC, 0, 0);
}

uint64_t AppleIDPasskeyDaemonService.appleIDPasskeyStatus(with:)(uint64_t a1)
{
  id v5 = (uint64_t (*)(uint64_t))((char *)&dword_100270E38 + dword_100270E38);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10010F200;
  return v5(a1);
}

uint64_t sub_10010F200(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  id v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_10010F47C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&dword_100270E38 + dword_100270E38);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10010F550;
  return v10((uint64_t)v6);
}

uint64_t sub_10010F550(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  if (v3)
  {
    a1 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v10 = (void *)a1;
  }
  else if (a1)
  {
    sub_1000D70C8(&qword_1002705D0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a1 = 0;
    uint64_t v10 = isa;
  }
  else
  {
    Class isa = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v11)[2](v11, isa, a1);

  _Block_release(v11);
  uint64_t v12 = *(uint64_t (**)(void))(v8 + 8);
  return v12();
}

uint64_t sub_10010F724(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unint64_t sub_10010F760(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000D70C8((uint64_t *)&unk_100271D10);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100110F58(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10010F88C(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000D7CC4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010F88C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10010F904(a1, a2, v4);
}

unint64_t sub_10010F904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_10010FA4C(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_10010FA84(uint64_t (*a1)(void))
{
  return a1();
}

unsigned char **sub_10010FAAC(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  unsigned char *v4 = a4;
  *unint64_t result = v4 + 1;
  return result;
}

void sub_10010FABC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

void _s3akd27AppleIDPasskeyDaemonServiceC26configureExportedInterfaceyySo14NSXPCInterfaceCF_0()
{
  sub_1000D70C8((uint64_t *)&unk_100270470);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001B96C0;
  uint64_t v1 = sub_100100D68(0, &qword_100270F00);
  *(void *)(v0 + 56) = sub_1000D70C8(&qword_100270F08);
  *(void *)(v0 + 32) = v1;
  uint64_t v9 = sub_100100D68(0, &qword_100270F10);
  *(void *)(v0 + 88) = sub_1000D70C8(&qword_100270F18);
  *(void *)(v0 + 64) = v9;
  uint64_t v8 = sub_100100D68(0, &qword_100270F20);
  *(void *)(v0 + 120) = sub_1000D70C8(&qword_100270F28);
  *(void *)(v0 + 96) = v8;
  uint64_t v2 = sub_100100D68(0, (unint64_t *)&qword_100270F30);
  *(void *)(v0 + 152) = sub_1000D70C8(&qword_100270F38);
  *(void *)(v0 + 128) = v2;
  uint64_t v3 = sub_100100D68(0, &qword_100270F40);
  *(void *)(v0 + 184) = sub_1000D70C8(&qword_100270F48);
  *(void *)(v0 + 160) = v3;
  uint64_t v4 = sub_100100D68(0, &qword_100270F50);
  *(void *)(v0 + 216) = sub_1000D70C8(&qword_100270F58);
  *(void *)(v0 + 192) = v4;
  id v5 = objc_allocWithZone((Class)NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithArray:isa];

  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1001101B0()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 primaryAuthKitAccount];
  if (v1)
  {
    id v2 = v1;
    id v14 = [self sharedManager];
    id v3 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyServerConfiguration()) init];
    id v4 = [self currentDevice];
    if (v4)
    {
      id v5 = v4;
      id v6 = [objc_allocWithZone((Class)AKCDPFactory) init];
      id v7 = [objc_allocWithZone((Class)AKAppleIDPasskeyAuthenticationController) init];
      uint64_t v8 = (objc_class *)type metadata accessor for AppleIDPasskeyValidator();
      uint64_t v9 = (char *)objc_allocWithZone(v8);
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_account] = v2;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_accountManager] = v0;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_featureManager] = v14;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_configuration] = v3;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_device] = v5;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_cdpFactory] = v6;
      *(void *)&v9[OBJC_IVAR___AKAppleIDPasskeyValidator_authenticationController] = v7;
      v15.receiver = v9;
      v15.Class super_class = v8;
      objc_msgSendSuper2(&v15, "init");
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_1002744A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      BOOL v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing primary account.", v13, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    uint64_t v16 = -120017;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t sub_100110478(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_100110498, 0, 0);
}

uint64_t sub_100110498()
{
  id v1 = [self sharedInstance];
  id v2 = (objc_class *)type metadata accessor for AppleIDPasskeyStatusController();
  id v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR___AKAppleIDPasskeyStatusController_accountManager] = v1;
  v0[1].receiver = v3;
  v0[1].uint64_t super_class = v2;
  v0[3].receiver = objc_msgSendSuper2(v0 + 1, "init");
  id v4 = (objc_class *)swift_task_alloc();
  v0[3].uint64_t super_class = v4;
  *(void *)id v4 = v0;
  *((void *)v4 + 1) = sub_100110594;
  uint64_t super_class = (uint64_t)v0[2].super_class;
  return sub_1000E63B8(super_class);
}

uint64_t sub_100110594(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_100110724;
  }
  else
  {
    *(void *)(v4 + 72) = a1;
    id v5 = sub_1001106BC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001106BC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 72);
  return v1(v2);
}

uint64_t sub_100110724()
{
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Passkey status failed with error: %@.", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10011092C()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  id v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100270E70 + dword_100270E70);
  return v6(v2, v3, v4);
}

uint64_t sub_1001109E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100110AB8()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100270E88 + dword_100270E88);
  return v6(v2, v3, v4);
}

uint64_t sub_100110B74(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100110C44()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100270EA8 + dword_100270EA8);
  return v6(v2, v3, v4);
}

uint64_t sub_100110D00(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100110DD0()
{
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100270EC8 + dword_100270EC8);
  return v6(v2, v3, v4);
}

uint64_t sub_100110E8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100110F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8((uint64_t *)&unk_100270EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100110FC8(void *a1)
{
  id v3 = v1;
  id v5 = sub_1001117A0();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setAccount:v6];

  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setLabel:v7];

  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setServer:v8];

  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 setSharingGroup:v9];

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for SignInWithAppleSharedCredential();
  sub_10011188C(&qword_100270F68, (void (*)(uint64_t))type metadata accessor for SignInWithAppleSharedCredential);
  uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v2)
  {

    swift_release();
  }
  else
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    swift_release();
    id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v3 = [v14 initWithDescriptor:v5 value:isa];

    sub_1000D89E8(v12, v13);
  }
  return v3;
}

char *sub_100111244(char *a1)
{
  uint64_t v2 = a1;
  id v3 = [a1 descriptor];
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = v3;
  id v5 = [v3 server];
  if (!v5)
  {

    goto LABEL_11;
  }
  NSString v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  id v10 = [v4 account];
  if (!v10)
  {

    goto LABEL_10;
  }
  unint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  id v15 = [v2 value];
  if (!v15)
  {

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v16 = v15;
  uint64_t v48 = v12;
  uint64_t v50 = v14;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  os_log_type_t v20 = (objc_class *)type metadata accessor for SignInWithAppleSharedCredential();
  sub_10011188C(&qword_100270F60, (void (*)(uint64_t))type metadata accessor for SignInWithAppleSharedCredential);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v1)
  {
    uint64_t v47 = v17;
    swift_release();
    uint64_t v22 = (uint64_t *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
    if (*(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID] == v7
      && *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID + 8] == v9)
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = v50;
LABEL_17:
      id v25 = (uint64_t *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
      if (*(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID] == v48
        && *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8] == v23)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {

          sub_1000D89E8(v47, v19);
          goto LABEL_11;
        }
      }
      uint64_t v49 = *v22;
      uint64_t v51 = v22[1];
      uint64_t v46 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID];
      uint64_t v38 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID + 8];
      uint64_t v27 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName + 8];
      uint64_t v44 = *v25;
      uint64_t v45 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName];
      uint64_t v35 = v25[1];
      uint64_t v28 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken + 8];
      uint64_t v43 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
      uint64_t v29 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
      uint64_t v42 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v41 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
      uint64_t v37 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID + 8];
      uint64_t v40 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName];
      uint64_t v39 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail];
      uint64_t v34 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail + 8];
      uint64_t v30 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName + 8];
      uint64_t v36 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName];
      objc_allocWithZone(v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v31 = swift_bridgeObjectRetain();
      id v32 = sub_10012DB34(v49, v51, v46, v38, v45, v27, v44, v35, v43, v28, v42, v29, v41, v37, v40, v31, v39, v34, v36,
              v30);

      sub_1000D89E8(v47, v19);
      uint64_t v33 = *(void *)&v52[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs];
      uint64_t v2 = (char *)v32;
      swift_bridgeObjectRetain();

      *(void *)&v2[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs] = v33;
      swift_bridgeObjectRelease();
      return v2;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = v50;
    if (v24) {
      goto LABEL_17;
    }

    sub_1000D89E8(v47, v19);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1000D89E8(v17, v19);
  swift_errorRelease();
  swift_release();
LABEL_11:
  type metadata accessor for SignInWithAppleError(0);
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_10011188C((unint64_t *)&qword_1002709D0, type metadata accessor for SignInWithAppleError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();

  return v2;
}

id sub_1001117A0()
{
  id v0 = [objc_allocWithZone((Class)AAFKeychainItemDescriptor) init];
  [v0 setItemClass:2];
  [v0 setAccessGroup:AKSignInWithAppleKeychainAccessGroup];
  [v0 setSynchronizable:1];
  [v0 setItemAccessible:1];
  [v0 setUseDataProtection:2];
  String.init(_:)((NSString)(id)kSecAttrProtocolHTTPS);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v0 setItemProtocol:v1];

  return v0;
}

uint64_t sub_10011188C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1001118D4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SignInWithAppleHealthCheckService()) init];
  qword_100274458 = (uint64_t)result;
  return result;
}

uint64_t sub_100111960()
{
  NSString v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000D78F8(v3, (uint64_t)qword_100274490);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    NSString v6 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)NSString v6 = 136315138;
    sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Registering SIWA health check activity - %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = *(NSObject **)&v1[OBJC_IVAR___AKSignInWithAppleHealthCheckService_serialQueue];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  *(void *)(v8 + 24) = ObjectType;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10011304C;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = (uint64_t)sub_100113064;
  aBlock[5] = v9;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100112C18;
  aBlock[3] = (uint64_t)&unk_10022CC30;
  id v10 = _Block_copy(aBlock);
  unint64_t v11 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void sub_100111C0C(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  void v7[4] = sub_1001130A4;
  void v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1001576DC;
  v7[3] = &unk_10022CC80;
  os_log_type_t v5 = _Block_copy(v7);
  id v6 = a1;
  swift_release();
  xpc_activity_register("com.apple.ak.signinwithapple.healthcheck", XPC_ACTIVITY_CHECK_IN, v5);
  _Block_release(v5);
}

void sub_100111CF4(_xpc_activity_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D70C8(&qword_1002701B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_1000D78F8(v9, (uint64_t)qword_100274490);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Registered SIWA health check service", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = os_transaction_create();
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state != 2)
  {
    if (!state)
    {
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v33 = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Checked in %s", v17, 0xCu);
        swift_arrayDestroy();
LABEL_27:
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_19;
    }
    id v15 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v15, v26))
    {
LABEL_19:

      goto LABEL_29;
    }
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v33 = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = "Error handling activity: %s";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v15, v26, v28, v27, 0xCu);
    swift_arrayDestroy();
    goto LABEL_27;
  }
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  v32[1] = a2;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v32[0] = a3;
    uint64_t v34 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v33 = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Running %s", v21, 0xCu);
    swift_arrayDestroy();
    a3 = v32[0];
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (xpc_activity_should_defer(a1))
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)id v25 = 136315138;
      uint64_t v33 = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Activity (%s) transistion to state RUN, but criteria are no longer satisfied. Deferring", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (xpc_activity_set_state(a1, 3)) {
      goto LABEL_29;
    }
    id v15 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v33 = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v28 = "Activity (%s) failed to transition to state DEFER";
      goto LABEL_26;
    }
  }
  else
  {
    if (xpc_activity_set_state(a1, 4))
    {
      uint64_t v29 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v8, 1, 1, v29);
      uint64_t v30 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = v30;
      *(unsigned char *)(v31 + 40) = 1;
      *(void *)(v31 + 48) = a1;
      *(void *)(v31 + 56) = v13;
      *(void *)(v31 + 64) = a3;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_100112A34((uint64_t)v8, (uint64_t)&unk_100271090, v31);
      swift_unknownObjectRelease();
      swift_release();
      sub_10010994C((uint64_t)v8);
      return;
    }
    id v15 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v33 = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v28 = "Failed to set activity(%s) state to Continue";
      goto LABEL_26;
    }
  }

LABEL_29:
  swift_unknownObjectRelease();
}

uint64_t sub_1001124F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 88) = a5;
  *(void *)(v6 + 56) = a4;
  *(void *)(v6 + 64) = a6;
  return _swift_task_switch(sub_100112518, 0, 0);
}

uint64_t sub_100112518()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    os_log_type_t v5 = (uint64_t (__cdecl *)())((char *)&dword_1002710A0 + dword_1002710A0);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[10] = v2;
    void *v2 = v0;
    v2[1] = sub_100112614;
    return v5();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100112614()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100112710, 0, 0);
}

uint64_t sub_100112710()
{
  uint64_t v15 = v0;
  if (*(unsigned char *)(v0 + 88) == 1)
  {
    if (xpc_activity_set_state(*(xpc_activity_t *)(v0 + 64), 5))
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      sub_1000D78F8(v1, (uint64_t)qword_100274490);
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.info.getter();
      BOOL v4 = os_log_type_enabled(v2, v3);
      os_log_type_t v5 = *(void **)(v0 + 72);
      if (v4)
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 136315138;
        *(void *)(v0 + 48) = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Activity(%s) state set to Done", v6, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    else
    {
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_1000D78F8(v7, (uint64_t)qword_100274490);
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      BOOL v9 = os_log_type_enabled(v2, v8);
      id v10 = *(void **)(v0 + 72);
      if (v9)
      {
        os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v11 = 136315138;
        *(void *)(v0 + 40) = sub_100158C6C(0xD000000000000028, 0x80000001001C43C0, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v2, v8, "Failed to set activity(%s) state to Done", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
  }
  else
  {
  }
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100112A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000D70C8(&qword_1002701B0);
  __chkstk_darwin(v6 - 8);
  os_log_type_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001098E4(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10010994C((uint64_t)v8);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_100112C18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id sub_100112C88()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = OBJC_IVAR___AKSignInWithAppleHealthCheckService_serialQueue;
  sub_100112F20();
  uint64_t v6 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = &_swiftEmptyArrayStorage;
  sub_100112F60();
  sub_1000D70C8(&qword_100270FB0);
  sub_100112FB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  *(void *)&v0[v8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v11.receiver = v6;
  v11.uint64_t super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t type metadata accessor for SignInWithAppleHealthCheckService()
{
  return self;
}

unint64_t sub_100112F20()
{
  unint64_t result = qword_100270FA0;
  if (!qword_100270FA0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100270FA0);
  }
  return result;
}

unint64_t sub_100112F60()
{
  unint64_t result = qword_100270FA8;
  if (!qword_100270FA8)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100270FA8);
  }
  return result;
}

unint64_t sub_100112FB8()
{
  unint64_t result = qword_100270FB8;
  if (!qword_100270FB8)
  {
    sub_1000F0804(&qword_100270FB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100270FB8);
  }
  return result;
}

uint64_t sub_100113014()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10011304C()
{
  sub_100111C0C(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100113054()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100113064()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10011308C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10011309C()
{
  return swift_release();
}

void sub_1001130A4(_xpc_activity_s *a1)
{
  sub_100111CF4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001130AC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001130E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100113134()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_1000D7208;
  *(unsigned char *)(v5 + 88) = v3;
  *(void *)(v5 + 56) = v2;
  *(void *)(v5 + 64) = v4;
  return _swift_task_switch(sub_100112518, 0, 0);
}

uint64_t sub_1001131F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011322C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1002721B0 + dword_1002721B0);
  return v6(a1, v4);
}

void *sub_1001132E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a3;
  uint64_t v37 = a1;
  uint64_t v10 = type metadata accessor for AccountSharingPreFlightChecker();
  v48[3] = v10;
  v48[4] = &off_10022D648;
  v48[0] = a2;
  uint64_t v11 = type metadata accessor for AccountSharingService();
  uint64_t v46 = v11;
  uint64_t v47 = &off_10022C660;
  v45[0] = a4;
  uint64_t v12 = type metadata accessor for AccountUnsharingService();
  uint64_t v43 = v12;
  uint64_t v44 = &off_10022BFE8;
  v42[0] = a5;
  uint64_t v13 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v40 = v13;
  uint64_t v41 = &off_10022D718;
  v39[0] = a6;
  type metadata accessor for SharedGroupsSyncController();
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = sub_100114854((uint64_t)v48, v10);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_100114854((uint64_t)v45, v46);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_100114854((uint64_t)v42, v43);
  __chkstk_darwin(v23);
  id v25 = (uint64_t *)((char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_100114854((uint64_t)v39, v40);
  __chkstk_darwin(v27);
  uint64_t v29 = (uint64_t *)((char *)&v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v17;
  uint64_t v32 = *v21;
  uint64_t v33 = *v25;
  uint64_t v34 = *v29;
  v14[6] = v10;
  v14[7] = &off_10022D648;
  v14[12] = v11;
  v14[13] = &off_10022C660;
  v14[17] = v12;
  v14[18] = &off_10022BFE8;
  v14[14] = v33;
  v14[22] = v13;
  v14[23] = &off_10022D718;
  v14[19] = v34;
  v14[3] = v31;
  v14[2] = v37;
  v14[8] = v38;
  v14[9] = v32;
  sub_1000E2354((uint64_t)v39);
  sub_1000E2354((uint64_t)v42);
  sub_1000E2354((uint64_t)v45);
  sub_1000E2354((uint64_t)v48);
  return v14;
}

void *sub_1001136BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = type metadata accessor for SharedGroupsMembershipController();
  v25[3] = v9;
  v25[4] = &off_10022D718;
  v25[0] = a2;
  uint64_t v23 = v8;
  uint64_t v24 = &off_10022C660;
  v22[0] = a4;
  type metadata accessor for SharedAccountsTokenRotationController();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = sub_100114854((uint64_t)v25, v9);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_100114854((uint64_t)v22, v23);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = *v13;
  uint64_t v20 = *v17;
  void v10[6] = v9;
  v10[7] = &off_10022D718;
  v10[12] = v8;
  v10[13] = &off_10022C660;
  v10[2] = a1;
  v10[3] = v19;
  unsigned char v10[8] = a3;
  v10[9] = v20;
  sub_1000E2354((uint64_t)v22);
  sub_1000E2354((uint64_t)v25);
  return v10;
}

void *sub_1001138D4()
{
  id v0 = [self sharedInstance];
  id v1 = [objc_allocWithZone((Class)AAFKeychainManager) init];
  uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
  id v3 = v1;
  id v4 = v0;
  id v29 = sub_100153BC0(v3, v4, v2);
  id v28 = self;
  id v5 = [v28 sharedInstance];
  id v6 = [objc_allocWithZone((Class)AKCDPFactory) init];
  type metadata accessor for AccountSharingPreFlightChecker();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = AKURLBagKeySIWAFetchSharedGroups;
  id v9 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setAltDSID:v10];

  uint64_t v11 = (objc_class *)type metadata accessor for AccountSharingRequestProvider();
  id v12 = [objc_allocWithZone(v11) initWithContext:v9 urlBagKey:v8];
  [v12 setAuthenticatedRequest:1];
  id v13 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v12];

  type metadata accessor for AccountSharingService();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  uint64_t v15 = AKURLBagKeySIWARevokeShareToken;
  id v16 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 setAltDSID:v17];

  id v18 = [objc_allocWithZone(v11) initWithContext:v16 urlBagKey:v15];
  [v18 setAuthenticatedRequest:1];
  id v19 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v18];

  type metadata accessor for AccountUnsharingService();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  type metadata accessor for SharedGroupsMembershipController();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v4;
  *(void *)(v21 + 24) = v3;
  id v22 = v3;
  id v23 = v4;
  id v24 = [v28 sharedInstance];
  swift_retain();
  id v25 = v29;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v26 = sub_1001132E4((uint64_t)v24, v7, (uint64_t)v25, v14, v20, v21);
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return v26;
}

void *sub_100113C48()
{
  id v0 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setAltDSID:v1];

  id v2 = [self sharedInstance];
  id v3 = [objc_allocWithZone((Class)AAFKeychainManager) init];
  id v4 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedAccountsStorageController());
  id v5 = v3;
  id v6 = v2;
  id v7 = sub_100153BC0(v5, v6, v4);
  type metadata accessor for SharedGroupsMembershipController();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v5;
  uint64_t v9 = AKURLBagKeySIWARotateShareTokens;
  id v10 = objc_allocWithZone((Class)AKAppleIDAuthenticationContext);
  id v11 = v5;
  id v12 = v6;
  id v13 = [v10 init];
  NSString v14 = String._bridgeToObjectiveC()();
  [v13 setAltDSID:v14];

  id v15 = [objc_allocWithZone((Class)type metadata accessor for AccountSharingRequestProvider()) initWithContext:v13 urlBagKey:v9];
  [v15 setAuthenticatedRequest:1];
  id v16 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v15];

  type metadata accessor for AccountSharingService();
  NSString v17 = (uint64_t *)swift_allocObject();
  void v17[2] = (uint64_t)v16;
  id v18 = [self sharedInstance];
  swift_retain();
  id v19 = v7;
  swift_retain();
  uint64_t v20 = sub_1001136BC((uint64_t)v18, v8, (uint64_t)v19, v17);

  swift_release();
  swift_release();

  return v20;
}

uint64_t sub_100113EAC()
{
  return _swift_task_switch(sub_100113EC8, 0, 0);
}

uint64_t sub_100113EC8()
{
  id v1 = [self sharedManager];
  unsigned int v2 = [v1 isSiwaCredentialSharingEnabled];

  if (!v2)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_1000D78F8(v14, (uint64_t)qword_100274490);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v15, v16)) {
      goto LABEL_19;
    }
    NSString v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v17 = 0;
    id v18 = "SIWA account sharing is not enabled. Skipping health check.";
    goto LABEL_18;
  }
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v0[2] = sub_1000D78F8(v3, (uint64_t)qword_100274490);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Running SIWA health check", v6, 2u);
    swift_slowDealloc();
  }

  id v7 = self;
  id v8 = [v7 sharedInstance];
  id v9 = [v8 primaryAuthKitAccount];
  v0[3] = v9;

  if (v9)
  {
    id v10 = [v7 sharedInstance];
    id v11 = [v10 altDSIDForAccount:v9];

    if (v11)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v0[4] = sub_1001138D4();
      v0[5] = sub_100113C48();
      swift_bridgeObjectRelease();
      id v12 = (void *)swift_task_alloc();
      v0[6] = v12;
      *id v12 = v0;
      v12[1] = sub_100114250;
      return sub_100100DA4();
    }
  }
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    NSString v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v17 = 0;
    id v18 = "No primary AuthKit account found. Skipping health check.";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
    swift_slowDealloc();
  }
LABEL_19:

  id v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100114250()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    id v1 = sub_1001146E4;
  }
  else
  {
    id v1 = sub_100114368;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100114368()
{
  if (sub_100109FAC())
  {
    id v1 = (void *)swift_task_alloc();
    v0[7] = v1;
    *id v1 = v0;
    v1[1] = sub_1001144D8;
    return sub_10010A918();
  }
  else
  {
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    id v6 = (void *)v0[3];
    if (v5)
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "SIWA health check completed", v7, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_release();

    id v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1001144D8()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    id v1 = sub_1001148A4;
  }
  else
  {
    id v1 = sub_1001145F0;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1001145F0()
{
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  os_log_type_t v4 = *(void **)(v0 + 24);
  if (v3)
  {
    BOOL v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SIWA health check completed", v5, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();

  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001146E4()
{
  if (sub_100109FAC())
  {
    id v1 = (void *)swift_task_alloc();
    v0[7] = v1;
    *id v1 = v0;
    v1[1] = sub_1001144D8;
    return sub_10010A918();
  }
  else
  {
    BOOL v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    id v6 = (void *)v0[3];
    if (v5)
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "SIWA health check completed", v7, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_release();

    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100114854(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_1001148F4()
{
  v2.receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for AppleIDPasskeyServerConfiguration();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyServerConfiguration()
{
  return self;
}

uint64_t sub_1001149D0()
{
  *(void *)(v1 + 136) = v0;
  return _swift_task_switch(sub_1001149F0, 0, 0);
}

uint64_t sub_1001149F0()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier;
  v0[18] = OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier;
  BOOL v3 = (uint64_t *)(v1 + v2);
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    swift_bridgeObjectRetain();
    return v9(v5, v4);
  }
  else
  {
    id v7 = *(void **)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager);
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100114B64;
    uint64_t v8 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100114D88;
    v0[13] = &unk_10022CD38;
    v0[14] = v8;
    [v7 fetchCurrentUserIdentifierWithReply:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100114B64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_100114D1C;
  }
  else {
    uint64_t v2 = sub_100114C74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100114C74()
{
  uint64_t v1 = (void *)(v0[17] + v0[18]);
  uint64_t v2 = v0[16];
  *uint64_t v1 = v0[15];
  v1[1] = v2;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = v1[1];
  if (v4)
  {
    uint64_t v5 = *(void *)(v0[17] + v0[18]);
    id v6 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    swift_bridgeObjectRetain();
    return v6(v5, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100114D1C()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100114D88(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    *uint64_t v9 = v8;
    v9[1] = v10;
    return swift_continuation_throwingResume();
  }
}

void sub_100114E44(void *a1)
{
  uint64_t v3 = v1;
  sub_100100D68(0, (unint64_t *)&qword_100270168);
  id v5 = sub_100110FC8(a1);
  if (!v2)
  {
    id v6 = v5;
    id v7 = *(void **)(v3 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
    id v10 = 0;
    if ([v7 addWithItem:v6 error:&v10])
    {
      id v8 = v10;
    }
    else
    {
      id v9 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_100114F54(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  void v3[6] = v2;
  void v3[4] = a1;
  return _swift_task_switch(sub_100114FE8, 0, 0);
}

uint64_t sub_100114FE8()
{
  uint64_t v1 = (void **)(v0 + 2);
  NSString v2 = (NSString)v0[5];
  uint64_t v3 = *(void **)(v0[6] + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v4 = sub_1001117A0();
  if (v2) {
    NSString v2 = String._bridgeToObjectiveC()();
  }
  *uint64_t v1 = 0;
  id v5 = [v3 keychainItemsForDescriptor:v4 withGroup:v2 error:v0 + 2];

  id v6 = *v1;
  if (v5)
  {
    sub_100100D68(0, (unint64_t *)&qword_100270168);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v0[7] = v7;
    id v8 = v6;

    v0[3] = &_swiftEmptyArrayStorage;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v0[8] = v19;
      if (v19) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v0[8] = v9;
      if (v9)
      {
LABEL_6:
        uint64_t v10 = v0[7];
        if ((v10 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(v10 + 32);
        }
        v0[9] = v11;
        v0[10] = 1;
        id v13 = sub_100111244((char *)v11);
        v0[11] = v13;
        os_log_type_t v16 = v13;
        uint64_t v17 = swift_task_alloc();
        v0[12] = v17;
        *(void *)uint64_t v17 = v0;
        *(void *)(v17 + 8) = sub_1001152FC;
        uint64_t v18 = v0[6];
        *(unsigned char *)(v17 + 152) = 0;
        *(void *)(v17 + 16) = v16;
        *(void *)(v17 + 24) = v18;
        return _swift_task_switch(sub_100115798, 0, 0);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = (uint64_t (*)(void *))v0[1];
    return v20(&_swiftEmptyArrayStorage);
  }
  else
  {
    id v12 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_1001152FC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v4 = sub_1001156DC;
  }
  else
  {
    id v4 = sub_100115454;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100115454()
{
  id v1 = *(id *)(v0 + 104);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  NSString v2 = *(void **)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void **)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 64);
  id v5 = *(void **)(v0 + 72);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (v4 == v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 24);
    id v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v8(v7);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 56);
    if ((v12 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v12 + 8 * v11 + 32);
    }
    *(void *)(v0 + 72) = v13;
    *(void *)(v0 + 80) = v11 + 1;
    if (__OFADD__(v11, 1)) {
      __break(1u);
    }
    uint64_t v14 = (char *)v13;
    id v15 = sub_100111244(v14);
    *(void *)(v0 + 88) = v15;
    if (v10)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_log_type_t v16 = *(uint64_t (**)(void))(v0 + 8);
      return v16();
    }
    else
    {
      uint64_t v17 = v15;
      uint64_t v18 = swift_task_alloc();
      *(void *)(v0 + 96) = v18;
      *(void *)uint64_t v18 = v0;
      *(void *)(v18 + 8) = sub_1001152FC;
      uint64_t v19 = *(void *)(v0 + 48);
      *(unsigned char *)(v18 + 152) = 0;
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = v19;
      return _swift_task_switch(sub_100115798, 0, 0);
    }
  }
}

uint64_t sub_1001156DC()
{
  id v1 = *(void **)(v0 + 72);

  NSString v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100115774(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 152) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return _swift_task_switch(sub_100115798, 0, 0);
}

uint64_t sub_100115798()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID);
  v0[4] = v3;
  uint64_t v4 = *(void *)(v2 + 8);
  v0[5] = v4;
  uint64_t v5 = v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID;
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID);
  v0[6] = v6;
  uint64_t v7 = *(void *)(v5 + 8);
  v0[7] = v7;
  id v8 = objc_allocWithZone((Class)AKSignInWithAppleAccountShareInfo);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v0[8] = [v8 initWithGroupID:v9 participantID:v10 participantName:v11];

  uint64_t v12 = (void *)swift_task_alloc();
  v0[9] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100115960;
  uint64_t v13 = v0[3];
  v12[26] = v4;
  v12[27] = v13;
  v12[24] = v7;
  v12[25] = v3;
  v12[23] = v6;
  return _swift_task_switch(sub_10011C240, 0, 0);
}

uint64_t sub_100115960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 88) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100115A60, 0, 0);
}

uint64_t sub_100115A60()
{
  uint64_t v1 = (void *)v0[8];
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setParticipantHandle:v2];

  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  void *v3 = v0;
  v3[1] = sub_100115B48;
  v3[17] = v0[3];
  return _swift_task_switch(sub_1001149F0, 0, 0);
}

uint64_t sub_100115B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1001160F8;
  }
  else {
    uint64_t v5 = sub_100115C60;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100115C60()
{
  if (*(void *)(v0 + 104) == *(void *)(v0 + 48) && *(void *)(v0 + 112) == *(void *)(v0 + 56)) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v3 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease();
  [v3 setIsCurrentUser:v2 & 1];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 128) = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_100115D64;
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v4 + 216) = *(void *)(v0 + 24);
  *(_OWORD *)(v4 + 200) = v6;
  *(_OWORD *)(v4 + 184) = v5;
  return _swift_task_switch(sub_10011C240, 0, 0);
}

uint64_t sub_100115D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100115E64, 0, 0);
}

uint64_t sub_100115E64()
{
  uint64_t v1 = *(void **)(v0 + 64);
  int v2 = *(unsigned __int8 *)(v0 + 152);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setParticipantHandle:v3];

  if (v2 == 1)
  {
    uint64_t v4 = *(void **)(v0 + 64);
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setShareToken:v5];
  }
  uint64_t v6 = *(void *)(v0 + 16);
  id v7 = objc_allocWithZone((Class)AKSignInWithAppleAccount);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithClientID:v8 userID:v9];

  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setLocalizedAppName:v11];

  if (*(void *)(v6 + OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail + 8)) {
    NSString v12 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v12 = 0;
  }
  uint64_t v13 = *(void **)(v0 + 64);
  [v10 setPrivateEmail:v12];

  NSString v14 = String._bridgeToObjectiveC()();
  [v10 setTeamID:v14];

  NSString v15 = String._bridgeToObjectiveC()();
  [v10 setLocalizedAppDeveloperName:v15];

  [v10 setShareInfo:v13];
  os_log_type_t v16 = *(uint64_t (**)(id))(v0 + 8);
  return v16(v10);
}

uint64_t sub_1001160F8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001162D8(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
  {
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  void v3[4] = v7;
  id v8 = a3;
  NSString v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *NSString v9 = v3;
  v9[1] = sub_1001163D0;
  void v9[5] = v7;
  v9[6] = v8;
  void v9[4] = a1;
  return _swift_task_switch(sub_100114FE8, 0, 0);
}

uint64_t sub_1001163D0()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v8 = (void *)v6;
  }
  else
  {
    sub_100100D68(0, (unint64_t *)&qword_100271600);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    id v8 = isa;
  }
  NSString v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  id v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100116590()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_100116620, 0, 0);
}

uint64_t sub_100116620()
{
  uint64_t v1 = *(void **)(v0[4] + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v2 = sub_1001117A0();
  v0[2] = 0;
  id v3 = [v1 keychainItemsForDescriptor:v2 withGroup:0 error:v0 + 2];

  uint64_t v4 = (void *)v0[2];
  if (v3)
  {
    sub_100100D68(0, (unint64_t *)&qword_100270168);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v0[5] = v5;
    id v6 = v4;

    v0[3] = &_swiftEmptyArrayStorage;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v0[6] = v17;
      if (v17) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v0[6] = v7;
      if (v7)
      {
LABEL_4:
        uint64_t v8 = v0[5];
        if ((v8 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v8 + 32);
        }
        v0[7] = v9;
        v0[8] = 1;
        uint64_t v11 = sub_100111244((char *)v9);
        v0[9] = v11;
        NSString v14 = v11;
        uint64_t v15 = swift_task_alloc();
        v0[10] = v15;
        *(void *)uint64_t v15 = v0;
        *(void *)(v15 + 8) = sub_100116920;
        uint64_t v16 = v0[4];
        *(unsigned char *)(v15 + 152) = 1;
        *(void *)(v15 + 16) = v14;
        *(void *)(v15 + 24) = v16;
        return _swift_task_switch(sub_100115798, 0, 0);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t (*)(void *))v0[1];
    return v18(&_swiftEmptyArrayStorage);
  }
  else
  {
    id v10 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100116920(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100116D04;
  }
  else
  {
    uint64_t v4 = sub_100116A78;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100116A78()
{
  id v1 = *(id *)(v0 + 88);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  id v2 = *(void **)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 48);
  unint64_t v5 = *(void **)(v0 + 56);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (v4 == v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v8(v7);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 40);
    if ((v12 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v12 + 8 * v11 + 32);
    }
    *(void *)(v0 + 56) = v13;
    *(void *)(v0 + 64) = v11 + 1;
    if (__OFADD__(v11, 1)) {
      __break(1u);
    }
    NSString v14 = (char *)v13;
    uint64_t v15 = sub_100111244(v14);
    *(void *)(v0 + 72) = v15;
    if (v10)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
      return v16();
    }
    else
    {
      uint64_t v17 = v15;
      uint64_t v18 = swift_task_alloc();
      *(void *)(v0 + 80) = v18;
      *(void *)uint64_t v18 = v0;
      *(void *)(v18 + 8) = sub_100116920;
      uint64_t v19 = *(void *)(v0 + 32);
      *(unsigned char *)(v18 + 152) = 1;
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = v19;
      return _swift_task_switch(sub_100115798, 0, 0);
    }
  }
}

uint64_t sub_100116D04()
{
  id v1 = *(void **)(v0 + 56);

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100116F04(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  unint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100116FC8;
  void v5[4] = v4;
  return _swift_task_switch(sub_100116620, 0, 0);
}

uint64_t sub_100116FC8()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  id v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    sub_100100D68(0, (unint64_t *)&qword_100271600);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = isa;
  }
  id v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_100117168(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return _swift_task_switch(sub_1001171FC, 0, 0);
}

uint64_t sub_1001171FC()
{
  id v94 = v0;
  if (qword_10026F9C0 != -1) {
    goto LABEL_72;
  }
  while (1)
  {
    uint64_t v1 = type metadata accessor for Logger();
    v0[11] = sub_1000D78F8(v1, (uint64_t)qword_100274490);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching keychain SIWA shared credentials", v4, 2u);
      swift_slowDealloc();
    }

    id v5 = sub_1001117A0();
    v0[12] = v5;
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    unint64_t v9 = v0[9];
    uint64_t v90 = v5;
    if (v8)
    {
      uint64_t v10 = v0[8];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      v93[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      v0[7] = sub_100158C6C(v10, v9, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Searching keychain for groups with SIWA app ID %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v5 = v90;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v12 = v0 + 2;
    uint64_t v13 = v0[10];
    NSString v14 = String._bridgeToObjectiveC()();
    [v5 setServer:v14];

    uint64_t v15 = *(void **)(v13 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
    v0[3] = 0;
    uint64_t v16 = &selRef_setUserInfoController_;
    id v17 = [v15 keychainItemsForDescriptor:v5 withGroup:0 error:v0 + 3];
    uint64_t v18 = (void *)v0[3];
    if (v17)
    {
      uint64_t v19 = v17;
      sub_100100D68(0, (unint64_t *)&qword_100270168);
      unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v21 = v18;
    }
    else
    {
      id v22 = v18;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      unint64_t v20 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    *uint64_t v12 = v20;
    if (!(v20 >> 62))
    {
      if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_48;
      }
LABEL_12:
      id v23 = (void **)(v0 + 5);
      swift_bridgeObjectRetain_n();
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      unint64_t v27 = v0[9];
      if (v26)
      {
        uint64_t v88 = v0[8];
        id v28 = (uint8_t *)swift_slowAlloc();
        v93[0] = swift_slowAlloc();
        *(_DWORD *)id v28 = 136315138;
        swift_bridgeObjectRetain();
        v0[6] = sub_100158C6C(v88, v27, v93);
        id v23 = (void **)(v0 + 5);
        uint64_t v16 = &selRef_setUserInfoController_;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "There are no items matching clientID. Looking for items that have %s in their groupedAppsBundleIDs", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v12 = v0 + 2;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      id v29 = sub_1001117A0();
      *id v23 = 0;
      id v30 = objc_msgSend(v15, v16[131], v29, 0, v23);

      uint64_t v31 = *v23;
      if (v30)
      {
        sub_100100D68(0, (unint64_t *)&qword_100270168);
        unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        id v33 = v31;

        if (!(v32 >> 62)) {
          goto LABEL_17;
        }
      }
      else
      {
        id v52 = v31;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        unint64_t v32 = (unint64_t)&_swiftEmptyArrayStorage;
        if (!((unint64_t)&_swiftEmptyArrayStorage >> 62))
        {
LABEL_17:
          uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v34) {
            goto LABEL_18;
          }
          goto LABEL_47;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v34)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
LABEL_18:
      uint64_t v35 = 0;
      unint64_t v92 = v32 & 0xC000000000000001;
      unint64_t v89 = v32 + 32;
      uint64_t v91 = v34;
      while (1)
      {
        if (v92)
        {
          id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v37 = __OFADD__(v35++, 1);
          if (v37) {
            goto LABEL_70;
          }
        }
        else
        {
          id v36 = *(id *)(v89 + 8 * v35);
          BOOL v37 = __OFADD__(v35++, 1);
          if (v37)
          {
LABEL_70:
            __break(1u);
            goto LABEL_71;
          }
        }
        uint64_t v38 = (char *)v36;
        uint64_t v39 = sub_100111244(v38);
        uint64_t v40 = *(void *)&v39[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs];
        if (*(void *)(v40 + 16)) {
          break;
        }
LABEL_21:

        if (v35 == v34) {
          goto LABEL_47;
        }
      }
      uint64_t v41 = v12;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v42 = Hasher._finalize()();
      uint64_t v43 = -1 << *(unsigned char *)(v40 + 32);
      unint64_t v44 = v42 & ~v43;
      if ((*(void *)(v40 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44))
      {
        uint64_t v45 = *(void *)(v40 + 48);
        uint64_t v46 = (void *)(v45 + 16 * v44);
        BOOL v47 = *v46 == v0[8] && v46[1] == v0[9];
        if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_34:
          swift_bridgeObjectRelease();
          uint64_t v48 = v38;
          uint64_t v12 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v38 = v39;
          uint64_t v39 = v48;
          goto LABEL_20;
        }
        uint64_t v49 = ~v43;
        while (1)
        {
          unint64_t v44 = (v44 + 1) & v49;
          if (((*(void *)(v40 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
            break;
          }
          uint64_t v50 = (void *)(v45 + 16 * v44);
          BOOL v51 = *v50 == v0[8] && v50[1] == v0[9];
          if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_34;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v41;
LABEL_20:
      uint64_t v34 = v91;
      goto LABEL_21;
    }
    swift_bridgeObjectRetain();
    uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v83) {
      goto LABEL_12;
    }
LABEL_48:
    unint64_t v53 = v0[2];
    v0[13] = v53;
    if (v53 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v84)
      {
LABEL_76:
        swift_bridgeObjectRelease();

        uint64_t v82 = &_swiftEmptyArrayStorage;
        goto LABEL_80;
      }
    }
    else if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_76;
    }
    uint64_t v54 = v0[10];
    v0[4] = &_swiftEmptyArrayStorage;
    uint64_t v55 = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
    v0[14] = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
    uint64_t v56 = *(char **)(v54 + v55);
    if (!v56)
    {
      sub_1000E2310((void *)(v54 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController), *(void *)(v54 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController + 24));
      os_log_type_t v77 = (void *)swift_task_alloc();
      v0[15] = v77;
      void *v77 = v0;
      v77[1] = sub_100117EAC;
      return sub_1001371A0();
    }
    unint64_t v57 = v0[13];
    uint64_t v58 = *(void *)&v56[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    swift_bridgeObjectRetain();
    uint64_t v59 = v56;
    v0[17] = sub_100139554(v58);

    if (v57 >> 62) {
      break;
    }
    uint64_t v60 = *(void *)((v0[13] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[18] = v60;
    if (!v60) {
      goto LABEL_78;
    }
LABEL_53:
    uint64_t v61 = 0;
    while (1)
    {
      uint64_t v62 = v0[13];
      id v63 = (v62 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v62 + 8 * v61 + 32);
      v0[20] = v63;
      v0[21] = v61 + 1;
      if (__OFADD__(v61, 1)) {
        break;
      }
      uint64_t v64 = (char *)v63;
      unint64_t v65 = sub_100111244(v64);
      v0[22] = v65;
      uint64_t v66 = v0[17];
      uint64_t v67 = v65;
      unint64_t v68 = (uint64_t *)&v65[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v69 = *(void *)&v65[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v70 = *(void *)&v65[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
      swift_bridgeObjectRetain();
      LOBYTE(v69) = sub_1001396F0(v69, v70, v66);
      swift_bridgeObjectRelease();
      if (v69)
      {
        uint64_t v79 = swift_task_alloc();
        v0[23] = v79;
        *(void *)uint64_t v79 = v0;
        *(void *)(v79 + 8) = sub_100118514;
        uint64_t v80 = v0[10];
        *(unsigned char *)(v79 + 152) = 0;
        *(void *)(v79 + 16) = v67;
        *(void *)(v79 + 24) = v80;
        return _swift_task_switch(sub_100115798, 0, 0);
      }
      uint64_t v71 = v67;
      unint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc();
        v93[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 136315138;
        uint64_t v75 = *v68;
        unint64_t v76 = v68[1];
        swift_bridgeObjectRetain();
        *(void *)(v74 + 4) = sub_100158C6C(v75, v76, v93);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Detected credential but the current user no longer has access to the group %s. Skipping...", (uint8_t *)v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v61 = v0[21];
      if (v61 == v0[18])
      {
        uint64_t v81 = (void *)v0[12];
        swift_bridgeObjectRelease();

        uint64_t v82 = (void *)v0[4];
        goto LABEL_79;
      }
    }
LABEL_71:
    __break(1u);
LABEL_72:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v0[18] = v85;
  if (v85) {
    goto LABEL_53;
  }
LABEL_78:
  uint64_t v86 = (void *)v0[12];
  swift_bridgeObjectRelease();

  uint64_t v82 = &_swiftEmptyArrayStorage;
LABEL_79:
  swift_bridgeObjectRelease();
LABEL_80:
  unint64_t v87 = (uint64_t (*)(void *))v0[1];
  return v87(v82);
}

uint64_t sub_100117EAC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_100118468;
  }
  else
  {
    *(void *)(v4 + 152) = a1;
    id v5 = sub_100117FFC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100117FFC()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  os_log_type_t v3 = *(void **)(v2 + v1);
  *(void *)(v2 + v1) = *(void *)(v0 + 152);

  uint64_t v4 = *(char **)(v2 + v1);
  if (!v4) {
    __break(1u);
  }
  uint64_t v5 = *(void *)(v0 + 128);
  unint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)&v4[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
  swift_bridgeObjectRetain();
  BOOL v8 = v4;
  *(void *)(v0 + 136) = sub_100139554(v7);

  if (!(v6 >> 62))
  {
    uint64_t v9 = *(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10);
    *(void *)(v0 + 144) = v9;
    if (v9) {
      goto LABEL_4;
    }
LABEL_24:
    id v33 = *(void **)(v0 + 96);
    swift_bridgeObjectRelease();

    uint64_t v31 = &_swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v34 = *(uint64_t (**)(void *))(v0 + 8);
    return v34(v31);
  }
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 144) = v32;
  if (!v32) {
    goto LABEL_24;
  }
LABEL_4:
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(v0 + 104);
    if ((v11 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v11 + 8 * v10 + 32);
    }
    *(void *)(v0 + 160) = v12;
    *(void *)(v0 + 168) = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v13 = (char *)v12;
    NSString v14 = sub_100111244(v13);
    *(void *)(v0 + 176) = v14;
    uint64_t v15 = *(void *)(v0 + 136);
    if (v5) {
      break;
    }
    uint64_t v16 = v14;
    id v17 = (uint64_t *)&v14[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
    uint64_t v18 = *(void *)&v14[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
    uint64_t v19 = *(void *)&v14[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
    swift_bridgeObjectRetain();
    LOBYTE(v18) = sub_1001396F0(v18, v19, v15);
    swift_bridgeObjectRelease();
    if (v18)
    {
      uint64_t v28 = swift_task_alloc();
      *(void *)(v0 + 184) = v28;
      *(void *)uint64_t v28 = v0;
      *(void *)(v28 + 8) = sub_100118514;
      uint64_t v29 = *(void *)(v0 + 80);
      *(unsigned char *)(v28 + 152) = 0;
      *(void *)(v28 + 16) = v16;
      *(void *)(v28 + 24) = v29;
      return _swift_task_switch(sub_100115798, 0, 0);
    }
    unint64_t v20 = v16;
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v24 = *v17;
      unint64_t v25 = v17[1];
      swift_bridgeObjectRetain();
      *(void *)(v23 + 4) = sub_100158C6C(v24, v25, &v35);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Detected credential but the current user no longer has access to the group %s. Skipping...", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v5 = 0;
    uint64_t v10 = *(void *)(v0 + 168);
    if (v10 == *(void *)(v0 + 144))
    {
      id v30 = *(void **)(v0 + 96);
      swift_bridgeObjectRelease();

      uint64_t v31 = *(void **)(v0 + 32);
      goto LABEL_25;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_100118468()
{
  uint64_t v1 = *(void **)(v0 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100118514(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100118AF8;
  }
  else
  {
    uint64_t v4 = sub_100118678;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100118678()
{
  uint64_t v33 = v0;
  id v1 = [*(id *)(v0 + 192) shareInfo];
  if (v1)
  {
    uint64_t v2 = v1;
    unsigned __int8 v3 = [v1 isCurrentUser];
    uint64_t v4 = *(void **)(v0 + 192);
    if (v3)
    {
      uint64_t v5 = *(void **)(v0 + 176);
    }
    else
    {
      id v6 = v4;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
LABEL_29:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v4 = *(void **)(v0 + 192);
      uint64_t v7 = *(void **)(v0 + 176);
      BOOL v8 = *(void **)(v0 + 160);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v5 = v2;
      uint64_t v2 = v7;
    }
  }
  else
  {
    uint64_t v5 = *(void **)(v0 + 192);
    uint64_t v2 = *(void **)(v0 + 176);
    uint64_t v4 = *(void **)(v0 + 160);
  }

  uint64_t v9 = *(void *)(v0 + 168);
  if (v9 == *(void *)(v0 + 144))
  {
LABEL_8:
    uint64_t v10 = *(void **)(v0 + 96);
    swift_bridgeObjectRelease();

    uint64_t v11 = *(void *)(v0 + 32);
    swift_bridgeObjectRelease();
    id v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v12(v11);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 200);
    while (1)
    {
      uint64_t v17 = *(void *)(v0 + 104);
      if ((v17 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v17 + 8 * v9 + 32);
      }
      *(void *)(v0 + 160) = v18;
      *(void *)(v0 + 168) = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v19 = (char *)v18;
      unint64_t v20 = sub_100111244(v19);
      *(void *)(v0 + 176) = v20;
      uint64_t v21 = *(void *)(v0 + 136);
      if (v14) {
        break;
      }
      os_log_type_t v22 = v20;
      uint64_t v23 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v24 = *(void *)&v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
      uint64_t v25 = *(void *)&v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
      swift_bridgeObjectRetain();
      LOBYTE(v24) = sub_1001396F0(v24, v25, v21);
      swift_bridgeObjectRelease();
      if (v24)
      {
        uint64_t v30 = swift_task_alloc();
        *(void *)(v0 + 184) = v30;
        *(void *)uint64_t v30 = v0;
        *(void *)(v30 + 8) = sub_100118514;
        uint64_t v31 = *(void *)(v0 + 80);
        *(unsigned char *)(v30 + 152) = 0;
        *(void *)(v30 + 16) = v22;
        *(void *)(v30 + 24) = v31;
        return _swift_task_switch(sub_100115798, 0, 0);
      }
      BOOL v26 = v22;
      unint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136315138;
        uint64_t v2 = *(void **)v23;
        unint64_t v16 = *((void *)v23 + 1);
        swift_bridgeObjectRetain();
        *(void *)(v15 + 4) = sub_100158C6C((uint64_t)v2, v16, &v32);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Detected credential but the current user no longer has access to the group %s. Skipping...", (uint8_t *)v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v14 = 0;
      uint64_t v9 = *(void *)(v0 + 168);
      if (v9 == *(void *)(v0 + 144)) {
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
}

uint64_t sub_100118AF8()
{
  id v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 160);

  unsigned __int8 v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100118D1C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100118E08;
  v9[9] = v7;
  v9[10] = v8;
  v9[8] = v5;
  return _swift_task_switch(sub_1001171FC, 0, 0);
}

uint64_t sub_100118E08()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v8 = (void *)v6;
  }
  else
  {
    sub_100100D68(0, (unint64_t *)&qword_100271600);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    id v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

id sub_100118FCC(void *a1)
{
  id v4 = sub_1001117A0();
  NSString v5 = [a1 clientID];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v4 setServer:v5];

  NSString v6 = [a1 userID];
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v4 setAccount:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v4 setSharingGroup:v7];

  id v8 = [a1 shareInfo];
  if (!v8)
  {
    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    return v4;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v48 = 0;
  id v11 = [v10 keychainItemsForDescriptor:v4 withGroup:0 error:&v48];
  id v12 = v48;
  if (!v11)
  {
    id v20 = v48;
    _convertNSErrorToError(_:)();

LABEL_34:
    swift_willThrow();

    return v4;
  }
  uint64_t v13 = v11;
  sub_100100D68(0, (unint64_t *)&qword_100270168);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v12;

  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v43 != 1
    || (swift_bridgeObjectRetain(), uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), !v44))
  {
LABEL_33:
    swift_bridgeObjectRelease();
    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_34;
  }
LABEL_9:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v16 = *(id *)(v14 + 32);
  }
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  id v18 = v17;
  uint64_t v19 = sub_100111244(v18);
  if (!v2)
  {
    uint64_t v46 = v18;
    BOOL v47 = v19;
    uint64_t v22 = *(void *)&v19[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
    uint64_t v21 = *(void *)&v19[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID + 8];
    swift_bridgeObjectRetain();
    id v23 = [v9 participantID];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    if (v22 == v24 && v21 == v26)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v27 = v47;
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = v47;
      if ((v28 & 1) == 0) {
        goto LABEL_30;
      }
    }
    uint64_t v30 = *(void *)&v27[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
    uint64_t v29 = *(void *)&v27[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID + 8];
    swift_bridgeObjectRetain();
    id v31 = [v9 groupID];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;

    if (v30 == v32 && v29 == v34)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v27 = v47;
    }
    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = v47;
      if ((v35 & 1) == 0) {
        goto LABEL_30;
      }
    }
    uint64_t v37 = *(void *)&v27[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
    uint64_t v36 = *(void *)&v27[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID + 8];
    swift_bridgeObjectRetain();
    id v38 = [a1 userID];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    if (v37 == v39 && v36 == v41)
    {

      swift_bridgeObjectRelease_n();
LABEL_29:
      id v4 = *(id *)&v27[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
      swift_bridgeObjectRetain();

      return v4;
    }
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42)
    {

      goto LABEL_29;
    }
LABEL_30:
    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    return v4;
  }

  return v4;
}

uint64_t sub_1001196D4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1001196F8, 0, 0);
}

uint64_t sub_1001196F8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
  v0[5] = OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo;
  uint64_t v3 = *(char **)(v1 + v2);
  if (v3)
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    uint64_t v6 = *(void *)&v3[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    swift_bridgeObjectRetain();
    NSString v7 = v3;
    uint64_t v8 = sub_100139554(v6);

    char v9 = sub_1001396F0(v4, v5, v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10(v9 & 1);
  }
  else
  {
    sub_1000E2310((void *)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController), *(void *)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController + 24));
    id v12 = (void *)swift_task_alloc();
    v0[6] = v12;
    *id v12 = v0;
    v12[1] = sub_100119844;
    return sub_1001371A0();
  }
}

uint64_t sub_100119844(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6(0);
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    return _swift_task_switch(sub_100119994, 0, 0);
  }
}

void sub_100119994()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = v0[7];

  uint64_t v4 = *(char **)(v1 + v2);
  if (v4)
  {
    uint64_t v5 = v0[2];
    uint64_t v6 = v0[3];
    uint64_t v7 = *(void *)&v4[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants];
    swift_bridgeObjectRetain();
    uint64_t v8 = v4;
    uint64_t v9 = sub_100139554(v7);

    char v10 = sub_1001396F0(v5, v6, v9);
    swift_bridgeObjectRelease();
    id v11 = (void (*)(void))v0[1];
    v11(v10 & 1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100119BE4(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[3] = v7;
  void v9[4] = v8;
  v9[1] = sub_100119CCC;
  v9[2] = v5;
  return _swift_task_switch(sub_1001196F8, 0, 0);
}

uint64_t sub_100119CCC(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v5 + 24);
  if (v3)
  {
    char v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

void sub_100119E80(void *a1)
{
  id v3 = [a1 shareInfo];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = sub_1001117A0();
    NSString v6 = [a1 clientID];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v5 setServer:v6];

    NSString v7 = [a1 userID];
    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v5 setAccount:v7];

    NSString v8 = [v4 groupID];
    if (!v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v5 setSharingGroup:v8];

    uint64_t v9 = *(void **)(v1 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
    id v12 = 0;
    if ([v9 deleteKeychainItemsFor:v5 error:&v12])
    {
      id v10 = v12;
    }
    else
    {
      id v11 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
}

uint64_t sub_10011A0C8(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  id v7 = a3;
  id v8 = a1;
  a5(v7);

  return 1;
}

uint64_t sub_10011A168()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_10011A1F8, 0, 0);
}

uint64_t sub_10011A1F8()
{
  v0[5] = sub_1001117A0();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10011A2D8;
  v1[17] = v0[4];
  return _swift_task_switch(sub_1001149F0, 0, 0);
}

uint64_t sub_10011A2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 56) = v2;
  swift_task_dealloc();
  if (v2)
  {
    id v7 = sub_10011ABA8;
  }
  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    id v7 = sub_10011A434;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10011A434()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 40);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setLabel:v3];

  uint64_t v4 = *(void **)(v2 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  *(void *)(v0 + 16) = 0;
  id v5 = [v4 keychainItemsForDescriptor:v1 withGroup:0 error:v0 + 16];
  uint64_t v6 = *(void **)(v0 + 16);
  if (v5)
  {
    id v7 = v5;
    sub_100100D68(0, (unint64_t *)&qword_100270168);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v6;

    uint64_t v10 = *(void *)(v0 + 56);
  }
  else
  {
    id v11 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v10 = 0;
    unint64_t v8 = (unint64_t)&_swiftEmptyArrayStorage;
  }
  *(void *)(v0 + 80) = v8;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 88) = v22;
    if (v22)
    {
LABEL_6:
      *(void *)(v0 + 24) = &_swiftEmptyArrayStorage;
      uint64_t v13 = *(void *)(v0 + 80);
      if ((v13 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v13 + 32);
      }
      *(void *)(v0 + 96) = v14;
      *(void *)(v0 + 104) = 1;
      id v15 = (char *)v14;
      id v16 = sub_100111244(v15);
      *(void *)(v0 + 112) = v16;
      if (v10)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
        return v17();
      }
      else
      {
        uint64_t v19 = v16;
        uint64_t v20 = swift_task_alloc();
        *(void *)(v0 + 120) = v20;
        *(void *)uint64_t v20 = v0;
        *(void *)(v20 + 8) = sub_10011A778;
        uint64_t v21 = *(void *)(v0 + 32);
        *(unsigned char *)(v20 + 152) = 0;
        *(void *)(v20 + 16) = v19;
        *(void *)(v20 + 24) = v21;
        return _swift_task_switch(sub_100115798, 0, 0);
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    *(void *)(v0 + 88) = v12;
    if (v12) {
      goto LABEL_6;
    }
  }
  id v23 = *(void **)(v0 + 40);
  swift_bridgeObjectRelease();

  uint64_t v24 = *(uint64_t (**)(void *))(v0 + 8);
  return v24(&_swiftEmptyArrayStorage);
}

uint64_t sub_10011A778(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10011AC38;
  }
  else
  {
    uint64_t v4 = sub_10011A8D0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10011A8D0()
{
  id v1 = [*(id *)(v0 + 128) shareInfo];
  if (!v1)
  {
    uint64_t v2 = *(void **)(v0 + 112);
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  if (([v1 isCurrentUser] & 1) == 0)
  {

    goto LABEL_7;
  }
  id v3 = *(id *)(v0 + 128);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 24) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    goto LABEL_23;
  while (1)
  {
    uint64_t v4 = *(void **)(v0 + 112);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v2 = v4;
LABEL_7:

    id v5 = *(void **)(v0 + 128);
    uint64_t v2 = *(void **)(v0 + 104);
    uint64_t v6 = *(void **)(v0 + 88);

    if (v2 == v6)
    {
      id v7 = *(void **)(v0 + 40);
      swift_bridgeObjectRelease();

      uint64_t v8 = *(void *)(v0 + 24);
      id v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v9(v8);
    }
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 80);
    id v14 = (v13 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
        : *(id *)(v13 + 8 * v12 + 32);
    *(void *)(v0 + 96) = v14;
    *(void *)(v0 + 104) = v12 + 1;
    if (!__OFADD__(v12, 1)) {
      break;
    }
    __break(1u);
LABEL_23:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  id v15 = (char *)v14;
  id v16 = sub_100111244(v15);
  *(void *)(v0 + 112) = v16;
  if (v11)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    id v18 = v16;
    uint64_t v19 = swift_task_alloc();
    *(void *)(v0 + 120) = v19;
    *(void *)uint64_t v19 = v0;
    *(void *)(v19 + 8) = sub_10011A778;
    uint64_t v20 = *(void *)(v0 + 32);
    *(unsigned char *)(v19 + 152) = 0;
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = v20;
    return _swift_task_switch(sub_100115798, 0, 0);
  }
}

uint64_t sub_10011ABA8()
{
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011AC38()
{
  id v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 96);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10011AE48(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_10011D7AC;
  void v5[4] = v4;
  return _swift_task_switch(sub_10011A1F8, 0, 0);
}

uint64_t sub_10011AF0C(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  void v3[6] = v2;
  void v3[4] = a1;
  return _swift_task_switch(sub_10011AFA0, 0, 0);
}

uint64_t sub_10011AFA0()
{
  id v1 = sub_1001117A0();
  v0[7] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setServer:v2];

  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  void *v3 = v0;
  v3[1] = sub_10011B0B8;
  v3[17] = v0[6];
  return _swift_task_switch(sub_1001149F0, 0, 0);
}

uint64_t sub_10011B0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10011B4F8;
  }
  else
  {
    *(void *)(v6 + 80) = a2;
    *(void *)(v6 + 88) = a1;
    uint64_t v7 = sub_10011B214;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10011B214()
{
  uint64_t v22 = v0;
  uint64_t v2 = v0[6];
  id v1 = (void *)v0[7];
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setLabel:v3];

  id v4 = *(void **)(v2 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  v0[2] = 0;
  unsigned int v5 = [v4 deleteKeychainItemsFor:v1 error:v0 + 2];
  uint64_t v6 = (void *)v0[2];
  if (v5)
  {
    uint64_t v7 = qword_10026F9C0;
    id v8 = v6;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000D78F8(v9, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = (void *)v0[7];
    unint64_t v14 = v0[5];
    if (v12)
    {
      uint64_t v15 = v0[4];
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)id v16 = 136315138;
      swift_bridgeObjectRetain();
      v0[3] = sub_100158C6C(v15, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Deleted keychain item for %s.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    uint64_t v19 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v17 = (void *)v0[7];
    id v18 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
  }
  return v19();
}

uint64_t sub_10011B4F8()
{
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011B704(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  void v3[4] = v6;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10011B7F0;
  void v9[5] = v7;
  v9[6] = v8;
  void v9[4] = v5;
  return _swift_task_switch(sub_10011AFA0, 0, 0);
}

uint64_t sub_10011B7F0()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    id v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_10011BB0C(int a1, void *aBlock, void *a3)
{
  void v3[4] = a3;
  void v3[5] = _Block_copy(aBlock);
  v3[2] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[3] = v5;
  void v3[6] = v5;
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[7] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10011BBE8;
  v7[17] = v6;
  return _swift_task_switch(sub_1001149F0, 0, 0);
}

uint64_t sub_10011BBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(v6 + 64) = v2;
  swift_task_dealloc();
  if (v2)
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v6 + 40);
    id v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

    _Block_release(*(const void **)(v6 + 40));
    uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
    return v9();
  }
  else
  {
    uint64_t v11 = *(void *)(v6 + 16);
    *(void *)(v6 + 72) = a2;
    *(void *)(v6 + 80) = a1;
    *(void *)(v6 + 88) = v11;
    return _swift_task_switch(sub_10011BD8C, 0, 0);
  }
}

uint64_t sub_10011BD8C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void **)(v0 + 32);
  sub_10011BE78();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v4 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    (*(void (**)(void, void))(v3 + 16))(*(void *)(v0 + 40), 0);
  }
  _Block_release(*(const void **)(v0 + 40));
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_10011BE78()
{
  id v1 = sub_1001117A0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setSharingGroup:v2];

  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setLabel:v3];

  uint64_t v4 = *(void **)(v0 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v7 = 0;
  if ([v4 deleteKeychainItemsFor:v1 error:&v7])
  {
    id v5 = v7;
  }
  else
  {
    id v6 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10011C080()
{
  id v1 = sub_1001117A0();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setSharingGroup:v2];

  NSString v3 = *(void **)(v0 + OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController);
  id v6 = 0;
  if ([v3 deleteKeychainItemsFor:v1 error:&v6])
  {
    id v4 = v6;
  }
  else
  {
    id v5 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_10011C218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[26] = a4;
  v5[27] = v4;
  v5[24] = a2;
  v5[25] = a3;
  v5[23] = a1;
  return _swift_task_switch(sub_10011C240, 0, 0);
}

uint64_t sub_10011C240()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap;
  v0[28] = OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap;
  NSString v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    uint64_t v6 = v0[23];
    uint64_t v5 = v0[24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_10014A0BC(v6, v5);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v7);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
      return v12(v10, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v0[29] = *(void *)(v0[27] + OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager);
  v0[30] = String._bridgeToObjectiveC()();
  v0[31] = String._bridgeToObjectiveC()();
  unint64_t v14 = (void *)swift_task_alloc();
  v0[32] = v14;
  void *v14 = v0;
  v14[1] = sub_10011C3F4;
  v14[17] = v0[27];
  return _swift_task_switch(sub_1001149F0, 0, 0);
}

uint64_t sub_10011C3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  swift_task_dealloc();
  if (v2)
  {
    char v8 = (void *)v6[30];
    unint64_t v7 = (void *)v6[31];
    swift_errorRelease();

    uint64_t v9 = sub_10011C890;
  }
  else
  {
    v6[33] = a2;
    v6[34] = a1;
    uint64_t v9 = sub_10011C52C;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_10011C52C()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  NSString v3 = (void *)v0[29];
  NSString v4 = String._bridgeToObjectiveC()();
  v0[35] = v4;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_10011C668;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100114D88;
  v0[13] = &unk_10022CD20;
  v0[14] = v5;
  [v3 fetchParticipantHandleFor:v2 groupID:v1 currentUserParticipantID:v4 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10011C668()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 288) = v1;
  if (v1) {
    uint64_t v2 = sub_10011C988;
  }
  else {
    uint64_t v2 = sub_10011C778;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011C778()
{
  uint64_t v2 = *(void **)(v0 + 240);
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);

  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v7 = (uint64_t *)(*(void *)(v0 + 216) + *(void *)(v0 + 224));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  sub_10013EE88(v3, v4, v6, v5, isUniquelyReferenced_nonNull_native);
  *uint64_t v7 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v9(v3, v4);
}

uint64_t sub_10011C890()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = (uint64_t *)(v0[27] + v0[28]);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  sub_10013EE88(0, 0xE000000000000000, v2, v1, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v5 = (uint64_t (*)(void, unint64_t))v0[1];
  return v5(0, 0xE000000000000000);
}

uint64_t sub_10011C988()
{
  uint64_t v1 = (void *)v0[35];
  uint64_t v3 = (void *)v0[30];
  uint64_t v2 = (void *)v0[31];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = (uint64_t *)(v0[27] + v0[28]);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v6;
  uint64_t *v6 = 0x8000000000000000;
  sub_10013EE88(0, 0xE000000000000000, v5, v4, isUniquelyReferenced_nonNull_native);
  uint64_t *v6 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v8 = (uint64_t (*)(void, unint64_t))v0[1];
  return v8(0, 0xE000000000000000);
}

id sub_10011CADC()
{
  v2.receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for SharedAccountsStorageController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SharedAccountsStorageController()
{
  return self;
}

id sub_10011CBC4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = &a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedCurrentUserParticipantIdentifier];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_participantIDToHandleMap] = &_swiftEmptyDictionarySingleton;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController__cachedSharedGroupsMembershipInfo] = 0;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainStorageController] = a1;
  *(void *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_keychainGroupManager] = a2;
  uint64_t v7 = type metadata accessor for SharedGroupsMembershipController();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = (uint64_t *)&a3[OBJC_IVAR___AKSharedAccountsStorageController_sharedGroupsMembershipController];
  v9[3] = v7;
  void v9[4] = (uint64_t)&off_10022D718;
  *uint64_t v9 = v8;
  v11.receiver = a3;
  v11.uint64_t super_class = (Class)type metadata accessor for SharedAccountsStorageController();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t sub_10011CCAC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100271178 + dword_100271178);
  return v6(v2, v3, v4);
}

uint64_t sub_10011CD68(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011CE38()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_100271188 + dword_100271188);
  return v6(v2, v3, v4);
}

uint64_t sub_10011CEF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011CFC4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D84E8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1002711A0 + dword_1002711A0);
  return v5(v2, v3);
}

uint64_t sub_10011D078(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011D148()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1002711C0 + dword_1002711C0);
  return v6(v2, v3, v4);
}

uint64_t sub_10011D204(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011D2D4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1002711E0 + dword_1002711E0);
  return v6(v2, v3, v4);
}

uint64_t sub_10011D390(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011D460()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011D4A0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D84E8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100271200 + dword_100271200);
  return v5(v2, v3);
}

uint64_t sub_10011D554(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011D624()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, void *))((char *)&dword_100271220 + dword_100271220);
  return v6(v2, v3, v4);
}

uint64_t sub_10011D6E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011D7B0(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return _swift_task_switch(sub_10011D7D0, 0, 0);
}

uint64_t sub_10011D7D0()
{
  if ([*(id *)(v0[17] + OBJC_IVAR___AKAppleIDPasskeyVerificationController_passkeyValidator) canVerifyPasskey])
  {
    uint64_t v1 = v0[16];
    uint64_t v2 = *(void **)(v0[17] + OBJC_IVAR___AKAppleIDPasskeyVerificationController_verificationProvider);
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_10011DA3C;
    uint64_t v3 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10011DC50;
    v0[13] = &unk_10022D098;
    v0[14] = v3;
    [v2 performVerificationRequestWith:v1 completionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_1002744A8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Passkey verification failed. Device is not passkey eligible.", v7, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    v0[15] = -12002;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10011DA3C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_10011DB68;
  }
  else {
    uint64_t v2 = sub_10011DB4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011DB4C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 120));
}

uint64_t sub_10011DB68()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011DC50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_1000D70C8(&qword_1002705D0);
    **(void **)(*(void *)(v3 + 64) + 40) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t type metadata accessor for AppleIDPasskeyVerificationController()
{
  return self;
}

void *sub_10011DDD0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000D70C8((uint64_t *)&unk_10026FF90);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = [self sharedBag];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v12 = result;
  id v13 = [result generateVerificationTokenURL];

  if (v13)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
    {
      sub_1000DBBF8((uint64_t)v10);
      id v14 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
      NSString v15 = [a1 altDSID];
      if (!v15)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v14 setAltDSID:v15];

      id v16 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyRequestProvider()) initWithContext:v14 urlBagKey:AKURLBagKeyGenerateVerificationToken];
      [v16 setAuthenticatedRequest:1];
      [v16 setClient:a2];
      id v17 = [objc_allocWithZone((Class)AKAuthHandlerImpl) init];
      [v17 setForceSilentAuth:1];
      id v18 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v16];
      [v18 setAuthenticationDelegate:v17];

      id v19 = [self sharedInstance];
      type metadata accessor for AppleIDPasskeyVerificationProvider();
      uint64_t result = (void *)swift_allocObject();
      result[2] = v18;
      result[3] = v19;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  sub_1000DBBF8((uint64_t)v10);
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000D78F8(v20, (uint64_t)qword_1002744A8);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing passkey verification url.", v23, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  v24[1] = -120013;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (void *)swift_willThrow();
}

void sub_10011E2B4(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_1000D70C8(&qword_1002712D0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10011EB44();
  id v7 = *(void **)&a2[OBJC_IVAR___AKAppleIDPasskeyChallengeProvider_serviceController];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(void *)(v9 + ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  aBlock[4] = sub_10011F8B0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001435F8;
  aBlock[3] = &unk_10022D150;
  uint64_t v10 = _Block_copy(aBlock);
  objc_super v11 = a2;
  swift_release();
  [v7 executeRequestWithCompletion:v10];
  _Block_release(v10);
}

uint64_t sub_10011E5EC(const void *a1, void *a2)
{
  *(void *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_10011E664, 0, 0);
}

uint64_t sub_10011E664()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[5] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  unint64_t v4 = sub_10011F7C8();
  void *v3 = v0;
  v3[1] = sub_10011E764;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000019, 0x80000001001C46B0, sub_10011F7C0, v2, v4);
}

uint64_t sub_10011E764()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10011E908;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10011E880;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011E880()
{
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 32);

  uint64_t v2 = *(void **)(v0 + 16);
  ((void (**)(void, void *, void))v1)[2](v1, v2, 0);
  _Block_release(v1);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10011E908()
{
  uint64_t v1 = *(void (***)(void, void, void))(v0 + 32);

  swift_task_dealloc();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  ((void (**)(void, void, void *))v1)[2](v1, 0, v2);

  _Block_release(v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t type metadata accessor for AppleIDPasskeyChallengeProvider()
{
  return self;
}

uint64_t sub_10011EA58()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011EA98()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D7208;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1002712B8 + dword_1002712B8);
  return v5(v2, v3);
}

void sub_10011EB44()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR___AKAppleIDPasskeyChallengeProvider_accountManager);
  id v6 = [v5 primaryAuthKitAccount];
  if (v6)
  {
    uint64_t v7 = v6;
    static Date.now.getter();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    [v5 setPasskeyRegistrationAttemptDateForAccount:isa forAccount:v7];

    id v27 = 0;
    if ([v5 saveAccount:v7 error:&v27])
    {
      uint64_t v9 = qword_10026F9C8;
      id v10 = v27;
      if (v9 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_1000D78F8(v11, (uint64_t)qword_1002744A8);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        id v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Saved passkeyRegistrationAttemptDate to account", v14, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      id v19 = v27;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_1000D78F8(v20, (uint64_t)qword_1002744A8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412290;
        swift_errorRetain();
        uint64_t v25 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v27 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v24 = v25;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to save passkeyRegistrationAttemptDate with error %@.", v23, 0xCu);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1000D78F8(v15, (uint64_t)qword_1002744A8);
    os_log_t v26 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v16, "Missing primary account.", v17, 2u);
      swift_slowDealloc();
    }
    os_log_t v18 = v26;
  }
}

uint64_t sub_10011F028(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Class isa = 0;
  if (a3 >> 60 != 15) {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v4 = [self dictionaryFromObject:isa ofType:@"application/json"];
  swift_unknownObjectRelease();
  if (!v4) {
    goto LABEL_23;
  }
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_10014A078((uint64_t)v23), (v7 & 1) != 0))
  {
    sub_1000D7C68(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  sub_1000D7ADC((uint64_t)v23);
  if (*((void *)&v25 + 1))
  {
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    AnyHashable.init<A>(_:)();
    if (*(void *)(v5 + 16) && (unint64_t v8 = sub_10014A078((uint64_t)v23), (v9 & 1) != 0))
    {
      sub_1000D7C68(*(void *)(v5 + 56) + 32 * v8, (uint64_t)&v24);
    }
    else
    {
      long long v24 = 0u;
      long long v25 = 0u;
    }
    sub_1000D7ADC((uint64_t)v23);
    if (*((void *)&v25 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      AnyHashable.init<A>(_:)();
      if (*(void *)(v5 + 16) && (unint64_t v10 = sub_10014A078((uint64_t)v23), (v11 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v5 + 56) + 32 * v10, (uint64_t)&v24);
      }
      else
      {
        long long v24 = 0u;
        long long v25 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC((uint64_t)v23);
      if (*((void *)&v25 + 1))
      {
        if (swift_dynamicCast())
        {
          sub_10011F544();
          id v17 = objc_allocWithZone((Class)AKAppleIDPasskeyCredentialRequestContext);
          NSString v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v20 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v21 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v22 = [v17 initWithRelyingPartyIdentifier:v18 challengeString:v19 userIDString:v20 credentialName:v21];

          v23[0] = v22;
          sub_1000D70C8(&qword_1002712D0);
          return CheckedContinuation.resume(returning:)();
        }
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1000E79A4((uint64_t)&v24);
LABEL_23:
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1000D78F8(v12, (uint64_t)qword_1002744A8);
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed passkey registration. Missing challenge parameters.", v15, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  *(void *)&long long v24 = -12008;
  sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  *(void *)&long long v24 = v23[0];
  sub_1000D70C8(&qword_1002712D0);
  return CheckedContinuation.resume(throwing:)();
}

id sub_10011F544()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___AKAppleIDPasskeyChallengeProvider_accountManager) primaryAuthKitAccount];
  if (v1)
  {
    uint64_t v2 = v1;
    id result = [v1 username];
    if (result)
    {
      id v4 = result;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)v5;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1000D78F8(v6, (uint64_t)qword_1002744A8);
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing primary authKit account.", v9, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    return (id)swift_willThrow();
  }
  return result;
}

uint64_t sub_10011F6F4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_1000D84E8;
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_10011F7C0(uint64_t a1)
{
  sub_10011E2B4(a1, *(char **)(v1 + 16));
}

unint64_t sub_10011F7C8()
{
  unint64_t result = qword_1002712C8;
  if (!qword_1002712C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002712C8);
  }
  return result;
}

uint64_t sub_10011F808()
{
  uint64_t v1 = sub_1000D70C8(&qword_1002712D0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10011F8B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1000D70C8(&qword_1002712D0);

  return sub_10011F028(a1, a2, a3);
}

uint64_t sub_10011F978(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10011F988()
{
  return swift_release();
}

uint64_t sub_10011FA34(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_10011FA54, 0, 0);
}

uint64_t sub_10011FA54()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  id v3 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
  v0[6] = v3;
  id v4 = [v1 altDSID];
  [v3 setAltDSID:v4];

  id v5 = [objc_allocWithZone((Class)AKDeviceListRequestProvider) initWithContext:v3 urlBagKey:AKURLBagKeyDeviceList];
  v0[7] = v5;
  id v6 = sub_10012002C(v1);
  [v5 setDeviceRequestContext:v6];

  [v5 setClient:*(void *)(v2 + OBJC_IVAR___AKDeviceListRequester_client)];
  id v7 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v5];
  v0[8] = v7;
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR___AKDeviceListRequester_cdpFactory);
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR___AKDeviceListRequester_accountManager);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[9] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10011FC14;
  uint64_t v11 = v0[4];
  return sub_1001444BC(v11, v8, (uint64_t)v7, v9);
}

uint64_t sub_10011FC14(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_10011FDB0;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    id v5 = sub_10011FD3C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10011FD3C()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 48);

  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 88);
  return v3(v4);
}

uint64_t sub_10011FDB0()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274460);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[4];
  if (v7)
  {
    os_log_type_t type = v6;
    uint64_t v9 = swift_slowAlloc();
    id v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    v0[2] = v8;
    id v10 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v17 = v8;

    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v17[1] = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to fetch device list  for context - %@ with error - %@", (uint8_t *)v9, 0x16u);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v12 = (void *)v0[7];
  uint64_t v13 = (void *)v0[8];
  os_log_type_t v14 = (void *)v0[6];
  swift_willThrow();

  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

id sub_10012002C(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___AKDeviceListRequester_cdpFactory);
  id v3 = [a1 altDSID];
  LODWORD(v2) = [v2 isHSA2EnabledForAltDSID:v3];

  if (v2 && ([a1 includeFamilyDevices] & 1) == 0)
  {
    if (qword_10026F9B0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1000D78F8(v5, (uint64_t)qword_100274460);
    id v6 = a1;
    BOOL v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      id v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      id v11 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v10 = v6;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Setting server provided context from context - %@", v9, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v12 = [objc_allocWithZone((Class)AKDeviceListRequestContext) init];
    id v13 = [v6 altDSID];
    [v12 setAltDSID:v13];

    [v12 setIncludeUntrustedDevices:1];
    return v12;
  }
  else
  {
    return a1;
  }
}

uint64_t sub_100120438(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  os_log_type_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *os_log_type_t v8 = v3;
  v8[1] = sub_100120514;
  void v8[4] = v6;
  void v8[5] = v7;
  return _swift_task_switch(sub_10011FA54, 0, 0);
}

uint64_t sub_100120514(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  uint64_t v9 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  id v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_1001206CC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1001206EC, 0, 0);
}

uint64_t sub_1001206EC()
{
  v0[4] = *(void *)(v0[3] + OBJC_IVAR___AKDeviceListRequester_storeManager);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001207A4;
  uint64_t v2 = v0[2];
  return sub_1000E7A60(v2);
}

uint64_t sub_1001207A4(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6(0);
  }
  else
  {
    *(unsigned char *)(v4 + 56) = a1 & 1;
    return _swift_task_switch(sub_1001208F8, 0, 0);
  }
}

uint64_t sub_1001208F8()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1001209E4;
    uint64_t v2 = *(void *)(v0 + 16);
    return sub_1000E7A60(v2);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4(0);
  }
}

uint64_t sub_1001209E4(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t sub_100120C68(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[2] = v6;
  v8[3] = v7;
  v8[1] = sub_1000D8D54;
  return _swift_task_switch(sub_1001206EC, 0, 0);
}

id sub_100120D74()
{
  v2.receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for DeviceListRequester();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceListRequester()
{
  return self;
}

uint64_t sub_100120E3C()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271330 + dword_100271330);
  return v6(v2, v3, v4);
}

uint64_t sub_100120EF8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100120FC8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D84E8;
  id v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271340 + dword_100271340);
  return v6(v2, v3, v4);
}

uint64_t sub_100121084(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1001211C4(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_1000D70C8(&qword_100270020);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v79 = v2;
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR___AKAppleIDPasskeyRegistrationProvider_serviceController);
  id v9 = [v8 requestProvider];
  type metadata accessor for AppleIDPasskeyRequestProvider();
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    id v11 = (void *)v10;
    os_log_type_t v77 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v78 = v6;
    uint64_t v80 = a2;
    id v12 = [a1 attestationDataString];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    swift_bridgeObjectRelease();
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v16) {
      goto LABEL_17;
    }
    id v17 = [a1 clientDataString];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    swift_bridgeObjectRelease();
    uint64_t v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0) {
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v21) {
      goto LABEL_17;
    }
    id v22 = [a1 originalChallengeString];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    swift_bridgeObjectRelease();
    uint64_t v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
    }
    if (v26)
    {
      id v75 = v8;
      uint64_t v76 = v5;
      sub_1000D70C8(&qword_1002713A8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001B9540;
      uint64_t v81 = 1684631666;
      unint64_t v82 = 0xE400000000000000;
      swift_unknownObjectRetain();
      AnyHashable.init<A>(_:)();
      id v28 = [a1 relyingPartyIdentifier];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 72) = v29;
      *(void *)(inited + 80) = v31;
      uint64_t v81 = 0x7461747365747461;
      unint64_t v82 = 0xEB000000006E6F69;
      AnyHashable.init<A>(_:)();
      id v32 = [a1 attestationDataString];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      *(void *)(inited + 168) = &type metadata for String;
      *(void *)(inited + 144) = v33;
      *(void *)(inited + 152) = v35;
      uint64_t v81 = 0x676E656C6C616863;
      unint64_t v82 = 0xE900000000000065;
      AnyHashable.init<A>(_:)();
      id v36 = [a1 originalChallengeString];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      *(void *)(inited + 240) = &type metadata for String;
      *(void *)(inited + 216) = v37;
      *(void *)(inited + 224) = v39;
      uint64_t v81 = 0x646E614872657375;
      unint64_t v82 = 0xEA0000000000656CLL;
      AnyHashable.init<A>(_:)();
      id v40 = [a1 userIDString];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      *(void *)(inited + 312) = &type metadata for String;
      *(void *)(inited + 288) = v41;
      *(void *)(inited + 296) = v43;
      uint64_t v81 = 0x6144746E65696C63;
      unint64_t v82 = 0xEA00000000006174;
      AnyHashable.init<A>(_:)();
      id v44 = [a1 clientDataString];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;

      *(void *)(inited + 384) = &type metadata for String;
      *(void *)(inited + 360) = v45;
      *(void *)(inited + 368) = v47;
      sub_10014326C(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v11 setAuthKitBody:isa];
      id v74 = v9;
      swift_unknownObjectRelease();

      NSString v49 = [a1 clientDataString];
      if (!v49)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v49 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v50 = objc_msgSend(v49, "aaf_toBase64DecodedString");

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_1000D78F8(v54, (uint64_t)qword_1002744A8);
      swift_bridgeObjectRetain();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        unint64_t v57 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(_DWORD *)unint64_t v57 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v87 = sub_100158C6C(v51, v53, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Client data string decoded %s.", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v67 = v76;
      unint64_t v68 = v77;
      uint64_t v69 = v78;
      uint64_t v70 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v80, v67);
      unint64_t v71 = (*(unsigned __int8 *)(v69 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = v70;
      (*(void (**)(unint64_t, char *, uint64_t))(v69 + 32))(v72 + v71, v68, v67);
      uint64_t v85 = sub_100122DBC;
      uint64_t v86 = v72;
      uint64_t v81 = (uint64_t)_NSConcreteStackBlock;
      unint64_t v82 = 1107296256;
      uint64_t v83 = sub_1001435F8;
      uint64_t v84 = &unk_10022D330;
      os_log_type_t v73 = _Block_copy(&v81);
      swift_release();
      [v75 executeRequestWithCompletion:v73];
      _Block_release(v73);
    }
    else
    {
LABEL_17:
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      sub_1000D78F8(v58, (uint64_t)qword_1002744A8);
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to register passkeys. Missing required parameters.", v61, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AppleIDPasskeyError(0);
      uint64_t v87 = -120012;
      sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
      sub_1000DBBA0();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v87 = v81;
      CheckedContinuation.resume(throwing:)();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    sub_1000D78F8(v62, (uint64_t)qword_1002744A8);
    id v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed to register passkeys. Request provider type mismatch.", v65, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v87 = v81;
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_100121D04(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return _swift_task_switch(sub_100121D90, 0, 0);
}

uint64_t sub_100121D90()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = sub_100121E88;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(&v0[4], 0, 0, 0xD000000000000021, 0x80000001001C4820, sub_100122C88, v1, &type metadata for Bool);
}

uint64_t sub_100121E88()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10012202C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100121FA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100121FA4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);

  (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(v0 + 64), 0);
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10012202C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 24);

  swift_task_dealloc();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v3);

  _Block_release(*(const void **)(v0 + 32));
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t type metadata accessor for AppleIDPasskeyRegistrationProvider()
{
  return self;
}

uint64_t sub_100122180()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001221C8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1000D7208;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_100271398 + dword_100271398);
  return v6(v2, v3, v4);
}

void sub_10012227C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (a3 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    id v11 = [self dictionaryFromObject:isa ofType:@"application/json"];
    swift_unknownObjectRelease();
    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&long long v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v26 + 1) = v13;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16) && (unint64_t v14 = sub_10014A078((uint64_t)v28), (v15 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v12 + 56) + 32 * v14, (uint64_t)&v26);
      }
      else
      {
        long long v26 = 0u;
        long long v27 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000D7ADC((uint64_t)v28);
      uint64_t v16 = *((void *)&v27 + 1);
      sub_1000E79A4((uint64_t)&v26);
      if (!v16)
      {
        sub_100122778();
        if (qword_10026F9C8 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_1000D78F8(v22, (uint64_t)qword_1002744A8);
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v23, v24))
        {
          unint64_t v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Finished passkey registration.", v25, 2u);
          swift_slowDealloc();
        }

        LOBYTE(v28[0]) = 1;
        sub_1000D70C8(&qword_100270020);
        CheckedContinuation.resume(returning:)();
        goto LABEL_30;
      }
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_1000D78F8(v17, (uint64_t)qword_1002744A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v18, v19))
      {
LABEL_20:

        type metadata accessor for AppleIDPasskeyError(0);
        *(void *)&long long v26 = -12009;
        sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
        sub_1000DBBA0();
        _BridgedStoredNSError.init(_:userInfo:)();
        *(void *)&long long v26 = v28[0];
        sub_1000D70C8(&qword_100270020);
        CheckedContinuation.resume(throwing:)();
LABEL_30:

        return;
      }
    }
    else
    {
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_1000D78F8(v21, (uint64_t)qword_1002744A8);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v18, v19)) {
        goto LABEL_20;
      }
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to register passkey. Missing response.", v20, 2u);
    swift_slowDealloc();
    goto LABEL_20;
  }
  if (qword_10026F9C8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000D78F8(v7, (uint64_t)qword_1002744A8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to register passkey. AppleIDPasskeyRegistrationProvider instance is nil.", v10, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AppleIDPasskeyError(0);
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000DBBA0();
  _BridgedStoredNSError.init(_:userInfo:)();
  *(void *)&long long v26 = v28[0];
  sub_1000D70C8(&qword_100270020);
  CheckedContinuation.resume(throwing:)();
}

void sub_100122778()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___AKAppleIDPasskeyRegistrationProvider_accountManager);
  id v2 = [v1 primaryAuthKitAccount];
  if (v2)
  {
    uint64_t v3 = v2;
    [v1 setPasskeyPresent:1 forAccount:v2];
    id v21 = 0;
    if ([v1 saveAccount:v3 error:&v21])
    {
      uint64_t v4 = qword_10026F9C8;
      id v5 = v21;
      if (v4 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_1000D78F8(v6, (uint64_t)qword_1002744A8);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "AppleIDPasskeyRegistrationProvider: passkeyPresent saved successfully.", v9, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      id v13 = v21;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_10026F9C8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_1000D78F8(v14, (uint64_t)qword_1002744A8);
      swift_errorRetain();
      swift_errorRetain();
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        swift_errorRetain();
        os_log_type_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v21 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v18 = v19;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "AppleIDPasskeyRegistrationProvider: Failed to save passkeyPresent with error %@.", v17, 0xCu);
        sub_1000D70C8((uint64_t *)&unk_10026FD80);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_1000D78F8(v10, (uint64_t)qword_1002744A8);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "AppleIDPasskeyRegistrationProvider: Missing primary account.", v12, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100122BBC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  os_log_type_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100122C88(uint64_t a1)
{
  return sub_1001211C4(*(void **)(v1 + 24), a1);
}

uint64_t sub_100122CB4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100122CEC()
{
  uint64_t v1 = sub_1000D70C8(&qword_100270020);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100122DBC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1000D70C8(&qword_100270020);

  sub_10012227C(a1, a2, a3);
}

uint64_t sub_100122E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100122E6C()
{
  return swift_release();
}

id sub_100123158()
{
  v2.receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for AppleIDPasskeyRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleIDPasskeyRequestProvider()
{
  return self;
}

uint64_t sub_1001231B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_100123210()
{
  return 0x6C5F656369766564;
}

NSObject *sub_100123230(void *a1)
{
  unint64_t v2 = sub_1001269D8(a1);
  unint64_t v4 = v3;
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_1000D78F8(v5, (uint64_t)qword_100274460);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_100158C6C(v2, v4, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DeviceListProvider - Begin fetching devices from cache for query %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v9 = (void *)swift_allocObject();
  v9[2] = _swiftEmptyArrayStorage;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [self queryWithString:v10];

  sub_1000D70C8((uint64_t *)&unk_100270470);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1001B81D0;
  id v13 = [a1 altDSID];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  *(void *)(v12 + 56) = sub_1000D70C8(&qword_100271CF0);
  *(void *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v17;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  aBlock[0] = 0;
  [v11 bindParameters:isa error:aBlock];

  id v19 = aBlock[0];
  aBlock[4] = sub_1001270B0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1001231B0;
  aBlock[3] = &unk_10022D380;
  unint64_t v20 = _Block_copy(aBlock);
  id v21 = v19;
  swift_retain();
  swift_release();
  [v11 setRowHandler:v20];
  _Block_release(v20);
  uint64_t v22 = *(void **)(v35 + 16);
  aBlock[0] = 0;
  if ([v22 performQuery:v11 error:aBlock])
  {
    id v23 = aBlock[0];
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      long long v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "DeviceListProvider - Finished fetching devices from cache", v26, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    long long v27 = v9[2];
    swift_bridgeObjectRetain();

    swift_release();
  }
  else
  {
    id v28 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    long long v27 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      id v34 = v21;
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412290;
      swift_errorRetain();
      id v32 = (void *)_swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Error %@ fetching devices from cache", v30, 0xCu);
      sub_1000D70C8((uint64_t *)&unk_10026FD80);
      swift_arrayDestroy();
      id v21 = v34;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_release();
  }
  return v27;
}

uint64_t sub_10012384C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v173 = sub_100143000((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  os_log_type_t v7 = self;
  uint64_t v172 = a1;
  id v8 = [v7 stringFromColumn:0 inStatement:a1];
  if (v8)
  {
    os_log_type_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v10;
    *((void *)&v177 + 1) = v12;
    sub_1000D7CC4(&v177, &v175);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v4, v6, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v4, v6, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  id v17 = [v7 stringFromColumn:1 inStatement:v172];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v19;
    *((void *)&v177 + 1) = v21;
    sub_1000D7CC4(&v177, &v175);
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v14, v16, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v14, v16, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;
  id v26 = [v7 stringFromColumn:2 inStatement:v172];
  if (v26)
  {
    long long v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v28;
    *((void *)&v177 + 1) = v30;
    sub_1000D7CC4(&v177, &v175);
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v23, v25, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v23, v25, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;
  id v35 = [v7 stringFromColumn:3 inStatement:v172];
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v37;
    *((void *)&v177 + 1) = v39;
    sub_1000D7CC4(&v177, &v175);
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v32, v34, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v32, v34, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;
  id v44 = [v7 stringFromColumn:4 inStatement:v172];
  if (v44)
  {
    uint64_t v45 = v44;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v48 = v47;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v46;
    *((void *)&v177 + 1) = v48;
    sub_1000D7CC4(&v177, &v175);
    char v49 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v41, v43, v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v41, v43, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;
  id v53 = [v7 stringFromColumn:5 inStatement:v172];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v55;
    *((void *)&v177 + 1) = v57;
    sub_1000D7CC4(&v177, &v175);
    char v58 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v50, v52, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v50, v52, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v60;
  id v62 = [v7 stringFromColumn:6 inStatement:v172];
  if (v62)
  {
    id v63 = v62;
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v64;
    *((void *)&v177 + 1) = v66;
    sub_1000D7CC4(&v177, &v175);
    char v67 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v59, v61, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v59, v61, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v70 = v69;
  id v71 = [v7 stringFromColumn:7 inStatement:v172];
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v75 = v74;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v73;
    *((void *)&v177 + 1) = v75;
    sub_1000D7CC4(&v177, &v175);
    char v76 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v68, v70, v76);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v68, v70, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v79 = v78;
  id v80 = [v7 stringFromColumn:8 inStatement:v172];
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v84 = v83;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v82;
    *((void *)&v177 + 1) = v84;
    sub_1000D7CC4(&v177, &v175);
    char v85 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v77, v79, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v77, v79, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v88 = v87;
  id v89 = [v7 stringFromColumn:9 inStatement:v172];
  if (v89)
  {
    uint64_t v90 = v89;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v93 = v92;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v91;
    *((void *)&v177 + 1) = v93;
    sub_1000D7CC4(&v177, &v175);
    char v94 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v86, v88, v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v86, v88, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = v96;
  id v98 = [v7 stringFromColumn:10 inStatement:v172];
  if (v98)
  {
    uint64_t v99 = v98;
    uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v102 = v101;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v100;
    *((void *)&v177 + 1) = v102;
    sub_1000D7CC4(&v177, &v175);
    char v103 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v95, v97, v103);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v95, v97, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v106 = v105;
  id v107 = [v7 integerFromColumn:11 inStatement:v172];
  unsigned __int8 v108 = [v107 BOOLValue];

  *((void *)&v178 + 1) = &type metadata for Bool;
  LOBYTE(v177) = v108;
  sub_1000D7CC4(&v177, &v175);
  char v109 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v174[0] = v173;
  sub_10013ED34(&v175, v104, v106, v109);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v112 = v111;
  id v113 = [v7 stringFromColumn:12 inStatement:v172];
  if (v113)
  {
    uint64_t v114 = v113;
    uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v117 = v116;

    *((void *)&v178 + 1) = &type metadata for String;
    *(void *)&long long v177 = v115;
    *((void *)&v177 + 1) = v117;
    sub_1000D7CC4(&v177, &v175);
    char v118 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v174[0] = v173;
    sub_10013ED34(&v175, v110, v112, v118);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v110, v112, &v177);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v177);
  }
  uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v121 = v120;
  id v122 = [v7 integerFromColumn:13 inStatement:v172];
  unsigned __int8 v123 = [v122 BOOLValue];

  *((void *)&v178 + 1) = &type metadata for Bool;
  LOBYTE(v177) = v123;
  sub_1000D7CC4(&v177, &v175);
  char v124 = swift_isUniquelyReferenced_nonNull_native();
  sub_10013ED34(&v175, v119, v121, v124);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v127 = v126;
  v128 = &selRef_ak_addCustodianSyncActionHeader;
  id v129 = [v7 doubleFromColumn:14 inStatement:v172];
  v130 = &selRef_ak_addCustodianSyncActionHeader;
  [v129 doubleValue];
  double v132 = v131;

  *((void *)&v178 + 1) = &type metadata for Double;
  *(double *)&long long v177 = v132 * 1000.0;
  sub_1000D7CC4(&v177, &v175);
  char v133 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v174[0] = v173;
  sub_10013ED34(&v175, v125, v127, v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v134 = [v7 dataFromColumn:15 inStatement:v172];
  uint64_t v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v137 = v136;

  v138 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v177 = 0;
  id v140 = [v138 JSONObjectWithData:isa options:0 error:&v177];

  id v141 = (id)v177;
  if (v140)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v142 = v141;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    long long v177 = 0u;
    long long v178 = 0u;
  }
  uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v145 = v144;
  sub_1000F110C((uint64_t)&v177, (uint64_t)&v175);
  if (v176)
  {
    uint64_t v146 = sub_1000D70C8(&qword_100270028);
    if (swift_dynamicCast())
    {
      v176 = (void *)v146;
      *(void *)&long long v175 = *(void *)&v174[0];
      sub_1000D7CC4(&v175, v174);
      char v147 = swift_isUniquelyReferenced_nonNull_native();
      sub_10013ED34(v174, v143, v145, v147);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
  }
  else
  {
    sub_1000E79A4((uint64_t)&v175);
  }
  sub_10012643C(v143, v145, &v175);
  swift_bridgeObjectRelease();
  sub_1000E79A4((uint64_t)&v175);
LABEL_45:
  uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v150 = v149;
  id v151 = [v7 stringFromColumn:17 inStatement:v172];
  if (v151)
  {
    v152 = v151;
    uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v155 = v154;

    v176 = &type metadata for String;
    *(void *)&long long v175 = v153;
    *((void *)&v175 + 1) = v155;
    v128 = &selRef_ak_addCustodianSyncActionHeader;
    v130 = &selRef_ak_addCustodianSyncActionHeader;
    sub_1000D7CC4(&v175, v174);
    char v156 = swift_isUniquelyReferenced_nonNull_native();
    sub_10013ED34(v174, v148, v150, v156);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012643C(v148, v150, &v175);
    swift_bridgeObjectRelease();
    sub_1000E79A4((uint64_t)&v175);
  }
  uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v159 = v158;
  id v160 = objc_msgSend(v7, v128[486], 18, v172);
  [v160 v130[487]];
  double v162 = v161;

  v176 = &type metadata for Double;
  *(double *)&long long v175 = v162 * 1000.0;
  sub_1000D7CC4(&v175, v174);
  char v163 = swift_isUniquelyReferenced_nonNull_native();
  sub_10013ED34(v174, v157, v159, v163);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v164 = [v7 stringFromColumn:16 inStatement:v172];
  if (v164)
  {
    v165 = (char **)(a3 + 16);

    swift_beginAccess();
    v166 = *(char **)(a3 + 16);
    char v167 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a3 + 16) = v166;
    if ((v167 & 1) == 0)
    {
      v166 = sub_1001353A4(0, *((void *)v166 + 2) + 1, 1, v166);
      *v165 = v166;
    }
    unint64_t v169 = *((void *)v166 + 2);
    unint64_t v168 = *((void *)v166 + 3);
    if (v169 >= v168 >> 1)
    {
      v166 = sub_1001353A4((char *)(v168 > 1), v169 + 1, 1, v166);
      *v165 = v166;
    }
    *((void *)v166 + 2) = v169 + 1;
    *(void *)&v166[8 * v169 + 32] = v173;
    swift_endAccess();
    sub_1000D89E8(v135, v137);
    return sub_1000E79A4((uint64_t)&v177);
  }
  else
  {
    sub_1000D89E8(v135, v137);
    sub_1000E79A4((uint64_t)&v177);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100124924(uint64_t a1, uint64_t a2)
{
  v3[2] = a2;
  v3[3] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  void v3[4] = v5;
  void *v5 = v3;
  v5[1] = sub_1001249BC;
  return sub_1000E7A60(a1);
}

uint64_t sub_1001249BC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100124AEC, 0, 0);
  }
}

void sub_100124AEC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 128) = v2;
  uint64_t v3 = 1 << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  if (v5) {
    goto LABEL_26;
  }
LABEL_7:
  int64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = (unint64_t)((1 << *(unsigned char *)(v0 + 128)) + 63) >> 6;
  uint64_t v9 = *(void *)(v0 + 16);
  if (v7 < v8)
  {
    uint64_t v10 = v9 + 64;
    unint64_t v11 = *(void *)(v9 + 64 + 8 * v7);
    ++v6;
    if (v11) {
      goto LABEL_20;
    }
    int64_t v6 = v7 + 1;
    if (v7 + 1 >= v8) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v10 + 8 * v6);
    if (v11) {
      goto LABEL_20;
    }
    int64_t v6 = v7 + 2;
    if (v7 + 2 >= v8) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v10 + 8 * v6);
    if (v11)
    {
LABEL_20:
      unint64_t v5 = (v11 - 1) & v11;
      unint64_t v13 = __clz(__rbit64(v11)) + (v6 << 6);
      while (1)
      {
        *(void *)(v0 + 40) = v6;
        *(void *)(v0 + 48) = v5;
        uint64_t v14 = (void *)(*(void *)(v9 + 48) + 16 * v13);
        *(void *)(v0 + 56) = *v14;
        *(void *)(v0 + 64) = v14[1];
        uint64_t v15 = *(void **)(*(void *)(v9 + 56) + 8 * v13);
        *(void *)(v0 + 72) = v15;
        swift_bridgeObjectRetain();
        id v16 = v15;
        id v17 = [v16 deviceList];
        if (v17)
        {
          uint64_t v18 = v17;
          sub_100100D68(0, &qword_100270AF0);
          unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v0 + 80) = v19;

          if (v19 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          *(void *)(v0 + 88) = v20;
          uint64_t v21 = *(void *)(v0 + 80);
          if (v20)
          {
            if ((v21 & 0xC000000000000001) != 0) {
              id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v25 = *(id *)(v21 + 32);
            }
            uint64_t v26 = (uint64_t)v25;
            *(void *)(v0 + 96) = v25;
            *(void *)(v0 + 104) = 1;
            long long v27 = (void *)swift_task_alloc();
            *(void *)(v0 + 112) = v27;
            *long long v27 = v0;
            v27[1] = sub_100124E20;
            uint64_t v28 = *(void *)(v0 + 56);
            uint64_t v29 = *(void *)(v0 + 64);
            sub_1001252F4(v26, v28, v29);
            return;
          }
          char v22 = *(void **)(v0 + 72);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          int64_t v6 = *(void *)(v0 + 40);
          unint64_t v5 = *(void *)(v0 + 48);
          if (!v5) {
            goto LABEL_7;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
          if (!v5) {
            goto LABEL_7;
          }
        }
LABEL_26:
        unint64_t v23 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v13 = v23 | (v6 << 6);
        uint64_t v9 = *(void *)(v0 + 16);
      }
    }
    int64_t v12 = v7 + 3;
    if (v12 < v8)
    {
      unint64_t v11 = *(void *)(v10 + 8 * v12);
      if (v11)
      {
        int64_t v6 = v12;
        goto LABEL_20;
      }
      while (1)
      {
        int64_t v6 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        if (v6 >= v8) {
          goto LABEL_28;
        }
        unint64_t v11 = *(void *)(v10 + 8 * v6);
        ++v12;
        if (v11) {
          goto LABEL_20;
        }
      }
LABEL_38:
      __break(1u);
      return;
    }
  }
LABEL_28:
  swift_release();
  uint64_t v24 = *(void (**)(void))(v0 + 8);
  v24();
}

uint64_t sub_100124E20()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v2 = sub_10012527C;
  }
  else
  {
    char v2 = sub_100124F48;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100124F48()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);

  if (v1 == v2)
  {
LABEL_2:
    uint64_t v3 = *(void **)(v0 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    int64_t v4 = *(void *)(v0 + 40);
    unint64_t v5 = *(void *)(v0 + 48);
    if (v5)
    {
LABEL_3:
      unint64_t v6 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v7 = v6 | (v4 << 6);
      uint64_t v8 = *(void *)(v0 + 16);
      goto LABEL_18;
    }
    while (1)
    {
      int64_t v9 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      int64_t v10 = (unint64_t)((1 << *(unsigned char *)(v0 + 128)) + 63) >> 6;
      uint64_t v8 = *(void *)(v0 + 16);
      if (v9 >= v10) {
        goto LABEL_29;
      }
      uint64_t v11 = v8 + 64;
      unint64_t v12 = *(void *)(v8 + 64 + 8 * v9);
      ++v4;
      if (!v12)
      {
        int64_t v4 = v9 + 1;
        if (v9 + 1 >= v10) {
          goto LABEL_29;
        }
        unint64_t v12 = *(void *)(v11 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v9 + 2;
          if (v9 + 2 >= v10) {
            goto LABEL_29;
          }
          unint64_t v12 = *(void *)(v11 + 8 * v4);
          if (!v12)
          {
            int64_t v13 = v9 + 3;
            if (v13 >= v10)
            {
LABEL_29:
              swift_release();
              id v25 = *(void (**)(void))(v0 + 8);
              v25();
              return;
            }
            unint64_t v12 = *(void *)(v11 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                int64_t v4 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_38;
                }
                if (v4 >= v10) {
                  goto LABEL_29;
                }
                unint64_t v12 = *(void *)(v11 + 8 * v4);
                ++v13;
                if (v12) {
                  goto LABEL_17;
                }
              }
            }
            int64_t v4 = v13;
          }
        }
      }
LABEL_17:
      unint64_t v5 = (v12 - 1) & v12;
      unint64_t v7 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_18:
      *(void *)(v0 + 40) = v4;
      *(void *)(v0 + 48) = v5;
      uint64_t v14 = (void *)(*(void *)(v8 + 48) + 16 * v7);
      *(void *)(v0 + 56) = *v14;
      *(void *)(v0 + 64) = v14[1];
      uint64_t v15 = *(void **)(*(void *)(v8 + 56) + 8 * v7);
      *(void *)(v0 + 72) = v15;
      swift_bridgeObjectRetain();
      id v16 = v15;
      id v17 = [v16 deviceList];
      if (v17)
      {
        uint64_t v18 = v17;
        sub_100100D68(0, &qword_100270AF0);
        unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v0 + 80) = v19;

        if (v19 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          *(void *)(v0 + 88) = v21;
          if (!v21) {
            goto LABEL_2;
          }
        }
        else
        {
          uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
          *(void *)(v0 + 88) = v20;
          if (!v20) {
            goto LABEL_2;
          }
        }
        uint64_t v22 = 0;
        goto LABEL_27;
      }

      swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v22 = *(void *)(v0 + 104);
LABEL_27:
  uint64_t v23 = *(void *)(v0 + 80);
  if ((v23 & 0xC000000000000001) != 0) {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v24 = *(id *)(v23 + 8 * v22 + 32);
  }
  uint64_t v26 = (uint64_t)v24;
  *(void *)(v0 + 96) = v24;
  *(void *)(v0 + 104) = v22 + 1;
  if (__OFADD__(v22, 1))
  {
LABEL_39:
    __break(1u);
  }
  else
  {
    long long v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v27;
    *long long v27 = v0;
    v27[1] = sub_100124E20;
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v29 = *(void *)(v0 + 64);
    sub_1001252F4(v26, v28, v29);
  }
}

uint64_t sub_10012527C()
{
  uint64_t v1 = *(void **)(v0 + 96);

  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001252F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for Date();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  sub_1000D70C8((uint64_t *)&unk_100270030);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_100125414, 0, 0);
}

uint64_t sub_100125414()
{
  if (qword_10026F9B0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 104) = sub_1000D78F8(v2, (uint64_t)qword_100274460);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 40);
  char v147 = (void **)(v0 + 40);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v145 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 32) = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v145 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DeviceListProvider - Begin saving device %@", v8, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v10 = [*(id *)(v0 + 40) lastUpdatedDate];
  uint64_t v11 = *(void *)(v0 + 96);
  if (!v10)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 80) + 56))(*(void *)(v0 + 96), 1, 1, *(void *)(v0 + 72));
LABEL_88:
    __break(1u);
  }
  unint64_t v12 = v10;
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v15 = *(void *)(v0 + 72);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v14, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v15) == 1) {
    goto LABEL_88;
  }
  id v16 = (id *)(v0 + 16);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v21 = *(void **)(v0 + 40);
  Date.timeIntervalSince1970.getter();
  double v23 = v22;
  id v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v24(v17, v20);
  id v144 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDouble:v23];
  *(void *)(v0 + 112) = v144;
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v26 = v25;
  v24(v18, v20);
  id v146 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDouble:v26];
  *(void *)(v0 + 120) = v146;
  id v27 = [v21 additionalInfo];
  if (v27)
  {
    uint64_t v28 = v27;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_10014326C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v29 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *id v16 = 0;
  id v31 = [v29 dataWithJSONObject:isa options:0 error:v16];

  id v32 = *v16;
  if (v31)
  {
    uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;
  }
  else
  {
    id v36 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v33 = 0;
    unint64_t v35 = 0xF000000000000000;
  }
  *(void *)(v0 + 128) = v33;
  *(void *)(v0 + 136) = v35;
  uint64_t v37 = *(void **)(v0 + 40);
  sub_1000D70C8((uint64_t *)&unk_100270470);
  uint64_t v38 = swift_allocObject();
  *(void *)(v0 + 144) = v38;
  *(_OWORD *)(v38 + 16) = xmmword_1001B9900;
  id v39 = [v37 machineId];
  if (v39)
  {
    char v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    *(void *)(v38 + 56) = &type metadata for String;
    if (v43) {
      goto LABEL_19;
    }
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    *(void *)(v38 + 56) = &type metadata for String;
  }
  unint64_t v43 = 0xE000000000000000;
LABEL_19:
  id v44 = *v147;
  *(void *)(v38 + 32) = v41;
  *(void *)(v38 + 40) = v43;
  id v45 = [v44 name];
  if (v45)
  {
    uint64_t v46 = v45;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    uint64_t v50 = (uint64_t *)(v38 + 64);
    *(void *)(v38 + 88) = &type metadata for String;
    if (v49)
    {
      *uint64_t v50 = v47;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v50 = (uint64_t *)(v38 + 64);
    *(void *)(v38 + 88) = &type metadata for String;
  }
  *uint64_t v50 = 0;
  unint64_t v49 = 0xE000000000000000;
LABEL_24:
  uint64_t v51 = *v147;
  *(void *)(v38 + 72) = v49;
  id v52 = [v51 serialNumber];
  if (v52)
  {
    id v53 = v52;
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;

    uint64_t v57 = (uint64_t *)(v38 + 96);
    *(void *)(v38 + 120) = &type metadata for String;
    if (v56)
    {
      *uint64_t v57 = v54;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v57 = (uint64_t *)(v38 + 96);
    *(void *)(v38 + 120) = &type metadata for String;
  }
  *uint64_t v57 = 0;
  unint64_t v56 = 0xE000000000000000;
LABEL_29:
  char v58 = *v147;
  *(void *)(v38 + 104) = v56;
  id v59 = [v58 model];
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v63 = v62;

    uint64_t v64 = (uint64_t *)(v38 + 128);
    *(void *)(v38 + 152) = &type metadata for String;
    if (v63)
    {
      *uint64_t v64 = v61;
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v64 = (uint64_t *)(v38 + 128);
    *(void *)(v38 + 152) = &type metadata for String;
  }
  *uint64_t v64 = 0;
  unint64_t v63 = 0xE000000000000000;
LABEL_34:
  uint64_t v65 = *v147;
  *(void *)(v38 + 136) = v63;
  id v66 = [v65 operatingSystemName];
  if (v66)
  {
    char v67 = v66;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v70 = v69;

    id v71 = (uint64_t *)(v38 + 160);
    *(void *)(v38 + 184) = &type metadata for String;
    if (v70)
    {
      *id v71 = v68;
      goto LABEL_39;
    }
  }
  else
  {
    id v71 = (uint64_t *)(v38 + 160);
    *(void *)(v38 + 184) = &type metadata for String;
  }
  *id v71 = 0;
  unint64_t v70 = 0xE000000000000000;
LABEL_39:
  uint64_t v72 = *v147;
  *(void *)(v38 + 168) = v70;
  id v73 = [v72 operatingSystemVersion];
  if (v73)
  {
    uint64_t v74 = v73;
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v77 = v76;

    uint64_t v78 = (uint64_t *)(v38 + 192);
    *(void *)(v38 + 216) = &type metadata for String;
    if (v77)
    {
      uint64_t *v78 = v75;
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v78 = (uint64_t *)(v38 + 192);
    *(void *)(v38 + 216) = &type metadata for String;
  }
  uint64_t *v78 = 0;
  unint64_t v77 = 0xE000000000000000;
LABEL_44:
  uint64_t v79 = *v147;
  *(void *)(v38 + 200) = v77;
  id v80 = [v79 colorCode];
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v84 = v83;

    char v85 = (uint64_t *)(v38 + 224);
    *(void *)(v38 + 248) = &type metadata for String;
    if (v84)
    {
      uint64_t *v85 = v82;
      goto LABEL_49;
    }
  }
  else
  {
    char v85 = (uint64_t *)(v38 + 224);
    *(void *)(v38 + 248) = &type metadata for String;
  }
  uint64_t *v85 = 0;
  unint64_t v84 = 0xE000000000000000;
LABEL_49:
  uint64_t v86 = *v147;
  *(void *)(v38 + 232) = v84;
  id v87 = [v86 coverGlassColorCode];
  if (v87)
  {
    uint64_t v88 = v87;
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v91 = v90;

    uint64_t v92 = (uint64_t *)(v38 + 256);
    *(void *)(v38 + 280) = &type metadata for String;
    if (v91)
    {
      *uint64_t v92 = v89;
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v92 = (uint64_t *)(v38 + 256);
    *(void *)(v38 + 280) = &type metadata for String;
  }
  *uint64_t v92 = 0;
  unint64_t v91 = 0xE000000000000000;
LABEL_54:
  uint64_t v93 = *v147;
  *(void *)(v38 + 264) = v91;
  id v94 = [v93 backingColorCode];
  if (v94)
  {
    uint64_t v95 = v94;
    uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v98 = v97;

    uint64_t v99 = (uint64_t *)(v38 + 288);
    *(void *)(v38 + 312) = &type metadata for String;
    if (v98)
    {
      uint64_t *v99 = v96;
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v99 = (uint64_t *)(v38 + 288);
    *(void *)(v38 + 312) = &type metadata for String;
  }
  uint64_t *v99 = 0;
  unint64_t v98 = 0xE000000000000000;
LABEL_59:
  uint64_t v100 = *v147;
  *(void *)(v38 + 296) = v98;
  id v101 = [v100 housingColorCode];
  if (v101)
  {
    uint64_t v102 = v101;
    uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v105 = v104;

    uint64_t v106 = (uint64_t *)(v38 + 320);
    *(void *)(v38 + 344) = &type metadata for String;
    if (v105)
    {
      *uint64_t v106 = v103;
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v106 = (uint64_t *)(v38 + 320);
    *(void *)(v38 + 344) = &type metadata for String;
  }
  *uint64_t v106 = 0;
  unint64_t v105 = 0xE000000000000000;
LABEL_64:
  id v107 = *v147;
  *(void *)(v38 + 328) = v105;
  id v108 = [v107 enclosureColorCode];
  if (v108)
  {
    char v109 = v108;
    uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v112 = v111;

    id v113 = (uint64_t *)(v38 + 352);
    *(void *)(v38 + 376) = &type metadata for String;
    if (v112)
    {
      *id v113 = v110;
      goto LABEL_69;
    }
  }
  else
  {
    id v113 = (uint64_t *)(v38 + 352);
    *(void *)(v38 + 376) = &type metadata for String;
  }
  *id v113 = 0;
  unint64_t v112 = 0xE000000000000000;
LABEL_69:
  uint64_t v114 = *v147;
  *(void *)(v38 + 360) = v112;
  [v114 inCircle];
  Class v115 = Bool._bridgeToObjectiveC()().super.super.isa;
  uint64_t v116 = sub_100100D68(0, &qword_100270B00);
  *(void *)(v38 + 408) = v116;
  *(void *)(v38 + 384) = v115;
  id v117 = [v114 buildNumber];
  if (v117)
  {
    char v118 = v117;
    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v121 = v120;

    id v122 = (uint64_t *)(v38 + 416);
    *(void *)(v38 + 440) = &type metadata for String;
    if (v121)
    {
      *id v122 = v119;
      goto LABEL_74;
    }
  }
  else
  {
    id v122 = (uint64_t *)(v38 + 416);
    *(void *)(v38 + 440) = &type metadata for String;
  }
  *id v122 = 0;
  unint64_t v121 = 0xE000000000000000;
LABEL_74:
  uint64_t v123 = *(void *)(v0 + 48);
  uint64_t v124 = *(void *)(v0 + 56);
  uint64_t v125 = *(void **)(v0 + 40);
  *(void *)(v38 + 424) = v121;
  [v125 trusted];
  v126.super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(void *)(v38 + 472) = v116;
  *(NSNumber *)(v38 + 448) = v126;
  uint64_t v127 = sub_100100D68(0, &qword_100270B08);
  uint64_t v128 = v127;
  *(void *)(v38 + 480) = v144;
  *(void *)(v38 + 536) = &type metadata for Data;
  if (v35 >> 60 == 15) {
    uint64_t v129 = 0;
  }
  else {
    uint64_t v129 = v33;
  }
  unint64_t v130 = 0xC000000000000000;
  if (v35 >> 60 != 15) {
    unint64_t v130 = v35;
  }
  *(void *)(v38 + 504) = v127;
  *(void *)(v38 + 512) = v129;
  *(void *)(v38 + 520) = v130;
  *(void *)(v38 + 568) = &type metadata for String;
  *(void *)(v38 + 544) = v123;
  *(void *)(v38 + 552) = v124;
  id v131 = v144;
  swift_bridgeObjectRetain();
  sub_1001263D0(v33, v35);
  id v132 = [v125 services];
  if (v132)
  {
    char v133 = v132;
    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v136 = v135;

    unint64_t v137 = (uint64_t *)(v38 + 576);
    *(void *)(v38 + 600) = &type metadata for String;
    if (v136)
    {
      *unint64_t v137 = v134;
      goto LABEL_84;
    }
  }
  else
  {
    unint64_t v137 = (uint64_t *)(v38 + 576);
    *(void *)(v38 + 600) = &type metadata for String;
  }
  *unint64_t v137 = 0;
  unint64_t v136 = 0xE000000000000000;
LABEL_84:
  *(void *)(v38 + 584) = v136;
  *(void *)(v38 + 632) = v128;
  *(void *)(v38 + 608) = v146;
  id v138 = v146;
  _StringGuts.grow(_:)(286);
  v139._object = (void *)0x80000001001C3ED0;
  v139._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v139);
  v140._countAndFlagsBits = 0x6C5F656369766564;
  v140._object = (void *)0xEB00000000747369;
  String.append(_:)(v140);
  v141._countAndFlagsBits = 0xD000000000000105;
  v141._object = (void *)0x80000001001C48A0;
  String.append(_:)(v141);
  *(void *)(v0 + 152) = 0xE000000000000000;
  v142 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v142;
  void *v142 = v0;
  v142[1] = sub_100125F08;
  return sub_1000E8190(0, 0xE000000000000000, v38);
}

uint64_t sub_100125F08(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 180) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v4 = sub_1001262EC;
  }
  else {
    uint64_t v4 = sub_100126098;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100126098()
{
  id v1 = *(id *)(v0 + 40);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v15 = *(unsigned __int8 *)(v0 + 180);
    uint64_t v17 = *(void *)(v0 + 128);
    unint64_t v18 = *(void *)(v0 + 136);
    id v16 = *(void **)(v0 + 120);
    uint64_t v4 = *(void **)(v0 + 40);
    log = v2;
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412546;
    *(void *)(v0 + 24) = v4;
    id v7 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v6 = v4;

    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v0 + 176) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, v3, "DeviceListProvider - Finished saving device %@ with success: %{BOOL}d", (uint8_t *)v5, 0x12u);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_1000D89D4(v17, v18);
    uint64_t v8 = 112;
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 128);
    unint64_t v9 = *(void *)(v0 + 136);
    uint64_t v11 = *(void **)(v0 + 40);

    sub_1000D89D4(v10, v9);
    uint64_t v8 = 120;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1001262EC()
{
  uint64_t v2 = (void *)v0[14];
  id v1 = (void *)v0[15];
  sub_1000D89D4(v0[16], v0[17]);

  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t type metadata accessor for DeviceListProvider()
{
  return self;
}

uint64_t sub_1001263D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1001263E4(a1, a2);
  }
  return a1;
}

uint64_t sub_1001263E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

double sub_10012643C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10014A0BC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10013F3C8();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1000D7CC4((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_100126628(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100126540(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10014A0BC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10013F5B0();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_100126800(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_100126628(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          id v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *id v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100126800(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          id v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001269D8(void *a1)
{
  v64[0] = 0;
  v64[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  unsigned int v2 = [a1 includeUntrustedDevices];
  if (v2) {
    unint64_t v3 = 0xD00000000000002BLL;
  }
  else {
    unint64_t v3 = 0xD00000000000003BLL;
  }
  if (v2) {
    unint64_t v4 = 0x80000001001C49B0;
  }
  else {
    unint64_t v4 = 0x80000001001C49E0;
  }
  id v5 = [a1 serialNumbers];
  if (v5)
  {
    unint64_t v6 = v5;
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      unint64_t v62 = v3;
      sub_100141624(0, v8, 0);
      Swift::Int v9 = (void **)(v7 + 40);
      do
      {
        uint64_t v10 = (uint64_t)*(v9 - 1);
        uint64_t v11 = *v9;
        v64[0] = 39;
        v64[1] = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v12._countAndFlagsBits = v10;
        v12._object = v11;
        String.append(_:)(v12);
        v13._countAndFlagsBits = 39;
        v13._object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        unint64_t v15 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1) {
          sub_100141624(v14 > 1, v15 + 1, 1);
        }
        v9 += 2;
        _swiftEmptyArrayStorage[2] = v15 + 1;
        id v16 = (char *)&_swiftEmptyArrayStorage[2 * v15];
        *((void *)v16 + 4) = 39;
        *((void *)v16 + 5) = 0xE100000000000000;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      unint64_t v3 = v62;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    sub_1000D70C8(&qword_1002714B0);
    sub_1001270D0();
    uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v64[0] = v3;
    v64[1] = v4;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = 0xD000000000000017;
    v22._object = (void *)0x80000001001C4A40;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v23 = [a1 operatingSystems];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      unint64_t v63 = v3;
      sub_100141624(0, v26, 0);
      id v27 = (void **)(v25 + 40);
      do
      {
        uint64_t v28 = (uint64_t)*(v27 - 1);
        uint64_t v29 = *v27;
        v64[0] = 39;
        v64[1] = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v30._countAndFlagsBits = v28;
        v30._object = v29;
        String.append(_:)(v30);
        v31._countAndFlagsBits = 39;
        v31._object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        unint64_t v33 = _swiftEmptyArrayStorage[2];
        unint64_t v32 = _swiftEmptyArrayStorage[3];
        if (v33 >= v32 >> 1) {
          sub_100141624(v32 > 1, v33 + 1, 1);
        }
        v27 += 2;
        _swiftEmptyArrayStorage[2] = v33 + 1;
        unint64_t v34 = (char *)&_swiftEmptyArrayStorage[2 * v33];
        *((void *)v34 + 4) = 39;
        *((void *)v34 + 5) = 0xE100000000000000;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      unint64_t v3 = v63;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    strcpy((char *)v64, " AND os IN (");
    BYTE5(v64[1]) = 0;
    HIWORD(v64[1]) = -5120;
    sub_1000D70C8(&qword_1002714B0);
    sub_1001270D0();
    uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 41;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    uint64_t v40 = v64[0];
    uint64_t v41 = (void *)v64[1];
    v64[0] = v3;
    v64[1] = v4;
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = v40;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  id v43 = [a1 services];
  if (v43)
  {
    id v44 = v43;
    uint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v46 = *(void *)(v45 + 16);
    if (v46)
    {
      sub_100141624(0, v46, 0);
      uint64_t v47 = (void **)(v45 + 40);
      do
      {
        uint64_t v48 = (uint64_t)*(v47 - 1);
        unint64_t v49 = *v47;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease();
        v64[0] = 0xD000000000000010;
        v64[1] = 0x80000001001C4A20;
        v50._countAndFlagsBits = v48;
        v50._object = v49;
        String.append(_:)(v50);
        v51._countAndFlagsBits = 10021;
        v51._object = (void *)0xE200000000000000;
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        unint64_t v53 = _swiftEmptyArrayStorage[2];
        unint64_t v52 = _swiftEmptyArrayStorage[3];
        if (v53 >= v52 >> 1) {
          sub_100141624(v52 > 1, v53 + 1, 1);
        }
        v47 += 2;
        _swiftEmptyArrayStorage[2] = v53 + 1;
        uint64_t v54 = (char *)&_swiftEmptyArrayStorage[2 * v53];
        *((void *)v54 + 4) = 0xD000000000000010;
        *((void *)v54 + 5) = 0x80000001001C4A20;
        --v46;
      }
      while (v46);
    }
    swift_bridgeObjectRelease();
    sub_1000D70C8(&qword_1002714B0);
    sub_1001270D0();
    uint64_t v55 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v57 = v56;
    swift_bridgeObjectRelease();
    v58._countAndFlagsBits = v55;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 41;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    v64[0] = v3;
    v64[1] = v4;
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = 0x2820444E4120;
    v60._object = (void *)0xE600000000000000;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100127078()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001270B0(uint64_t a1, uint64_t a2)
{
  return sub_10012384C(a1, a2, v2);
}

uint64_t sub_1001270B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001270C8()
{
  return swift_release();
}

unint64_t sub_1001270D0()
{
  unint64_t result = qword_1002714B8;
  if (!qword_1002714B8)
  {
    sub_1000F0804(&qword_1002714B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002714B8);
  }
  return result;
}

void sub_10012713C(void *a1)
{
  id v9 = 0;
  v8.receiver = v1;
  v8.uint64_t super_class = (Class)type metadata accessor for ApplicationMetadataRequestProvider();
  if (objc_msgSendSuper2(&v8, "signRequest:error:", a1, &v9))
  {
    if (*(void *)&v1[OBJC_IVAR___AKApplicationMetadataRequestProvider_clientID + 8])
    {
      id v3 = v9;
      swift_bridgeObjectRetain();
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v5 = String._bridgeToObjectiveC()();
      [a1 addValue:v4 forHTTPHeaderField:v5];
    }
    else
    {
      id v7 = v9;
    }
  }
  else
  {
    id v6 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10012730C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  *(void *)&long long v13 = 0;
  v12.receiver = v2;
  v12.uint64_t super_class = (Class)type metadata accessor for ApplicationMetadataRequestProvider();
  unsigned int v4 = objc_msgSendSuper2(&v12, "validateResponseData:error:", isa, &v13);

  if (v4)
  {
    id v5 = (id)v13;
  }
  else
  {
    id v6 = (id)v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v7 = (void *)_convertErrorToNSError(_:)();
    if ([v7 code] == (id)-7010)
    {
      id v8 = [v7 userInfo];
      uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v9 + 16) && (unint64_t v10 = sub_10014A0BC(25445, 0xE200000000000000), (v11 & 1) != 0))
      {
        sub_1000D7C68(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v13);
      }
      else
      {
        long long v13 = 0u;
        long long v14 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v14 + 1)) {
        swift_dynamicCast();
      }
      else {
        sub_1000E79A4((uint64_t)&v13);
      }
    }
    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_errorRelease();
  }
}

id sub_100127968()
{
  v2.receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for ApplicationMetadataRequestProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ApplicationMetadataRequestProvider()
{
  return self;
}

void *sub_1001279D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t result = (void *)sub_10012BEA4(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    uint64_t v17 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v18 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v8 + 8 * v10);
      if ((v12 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v4 & 0x3F));
      if (v13)
      {
        int64_t v9 = __clz(__rbit64(v13)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v10 + 1;
        unint64_t v15 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v8 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v10)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v10++);
              if (v16)
              {
                unint64_t v14 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v7 = v18 + 1;
      uint64_t v4 = v9;
      if (v18 + 1 == v17) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_100127BB4(uint64_t a1)
{
  *(void *)(v2 + 280) = a1;
  *(void *)(v2 + 288) = v1;
  return _swift_task_switch(sub_100127BD4, 0, 0);
}

uint64_t sub_100127BD4()
{
  if ([*(id *)(*(void *)(v0 + 288) + 16) isSiwaInPasswordsFeatureEnabled])
  {
    sub_100129A64();
    id v1 = [*(id *)(v0 + 280) altDSID];
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    *(void *)(v0 + 296) = v4;
    int v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v5;
    void *v5 = v0;
    v5[1] = sub_100127E30;
    uint64_t v6 = *(void *)(v0 + 288);
    v5[17] = v4;
    v5[18] = v6;
    uint8_t v5[16] = v2;
    return _swift_task_switch(sub_100129CD4, 0, 0);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1000D78F8(v7, (uint64_t)qword_100274490);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Feature flag SiwaInPasswords is not enabled", v10, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *(void *)(v0 + 264) = -16001;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    id v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100127E30(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 312) = a1;
  *(void *)(v3 + 320) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100129698;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100127F4C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100127F4C()
{
  if (sub_10012CB5C(*(void *)(v0 + 312)))
  {
    uint64_t v1 = *(void **)(v0 + 280);
    uint64_t v2 = *(void *)(v0 + 288);
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void **)(v2 + 96);
    NSString v4 = [v1 altDSID];
    if (!v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    *(void *)(v0 + 328) = v4;
    uint64_t v5 = *(void *)(*(void *)(v0 + 288) + 24);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 256;
    *(void *)(v0 + 88) = sub_10012836C;
    uint64_t v6 = swift_continuation_init();
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_10012A2B4;
    *(void *)(v0 + 168) = &unk_10022D3E8;
    *(void *)(v0 + 176) = v6;
    [v3 fetchAppInformationWithAltDSID:v4 client:v5 completion:v0 + 144];
    uint64_t v7 = v0 + 80;
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v0 + 320);
  *(void *)(v0 + 376) = *(void *)(v0 + 312);
  uint64_t v9 = swift_bridgeObjectRetain();
  unint64_t v10 = (unint64_t)sub_1001279D4(v9);
  swift_bridgeObjectRelease();
  if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
  {
    uint64_t v11 = (uint64_t)sub_100141A28(v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *(void **)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 288);
  *(void *)(v0 + 232) = v11;
  sub_1000E2310((void *)(v12 + 56), *(void *)(v12 + 80));
  id v14 = [v13 altDSID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  char v15 = sub_100135D60();
  if (v8)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = v15;
    swift_bridgeObjectRelease();
    if (v16)
    {
      uint64_t v17 = *(void **)(*(void *)(v0 + 288) + 48);
      id v18 = [*(id *)(v0 + 280) currentGroupID];
      *(void *)(v0 + 384) = v18;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 224;
      *(void *)(v0 + 24) = sub_1001289B4;
      uint64_t v19 = swift_continuation_init();
      *(void *)(v0 + 184) = _NSConcreteStackBlock;
      *(void *)(v0 + 192) = 0x40000000;
      *(void *)(v0 + 200) = sub_1001088DC;
      *(void *)(v0 + 208) = &unk_10022D3D0;
      *(void *)(v0 + 216) = v19;
      [v17 fetchSharedAccountsWithGroupID:v18 completionHandler:v0 + 184];
      uint64_t v7 = v0 + 16;
LABEL_5:
      return _swift_continuation_await(v7);
    }
  }
  swift_bridgeObjectRelease();
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000D78F8(v20, (uint64_t)qword_100274490);
  Swift::String v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Account is not eligible for sharing. Skipping fetching of shared accounts.", v23, 2u);
    swift_slowDealloc();
  }

  sub_10012A378((unint64_t *)(v0 + 232));
  uint64_t v24 = *(void *)(v0 + 232);
  uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v25(v24);
}

uint64_t sub_10012836C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 336) = v1;
  if (v1) {
    uint64_t v2 = sub_1001296FC;
  }
  else {
    uint64_t v2 = sub_10012847C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012847C()
{
  uint64_t v1 = *(void **)(v0 + 256);

  uint64_t v2 = *(void **)(v0 + 280);
  id v3 = [v2 altDSID];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *(void *)(v0 + 344) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100128578;
  uint64_t v8 = *(void *)(v0 + 288);
  v7[17] = v6;
  v7[18] = v8;
  uint8_t v7[16] = v4;
  return _swift_task_switch(sub_100129CD4, 0, 0);
}

uint64_t sub_100128578(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 360) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100129804;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 368) = a1;
    uint64_t v5 = sub_1001286A8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001286A8()
{
  uint64_t v1 = *(void *)(v0 + 360);
  *(void *)(v0 + 376) = *(void *)(v0 + 368);
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_1001279D4(v2);
  swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v4 = (uint64_t)sub_100141A28(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *(void **)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 288);
  *(void *)(v0 + 232) = v4;
  sub_1000E2310((void *)(v5 + 56), *(void *)(v5 + 80));
  id v7 = [v6 altDSID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  char v8 = sub_100135D60();
  if (v1)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000D78F8(v13, (uint64_t)qword_100274490);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Account is not eligible for sharing. Skipping fetching of shared accounts.", v16, 2u);
      swift_slowDealloc();
    }

    sub_10012A378((unint64_t *)(v0 + 232));
    uint64_t v17 = *(void *)(v0 + 232);
    id v18 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v18(v17);
  }
  char v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void **)(*(void *)(v0 + 288) + 48);
  id v11 = [*(id *)(v0 + 280) currentGroupID];
  *(void *)(v0 + 384) = v11;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 224;
  *(void *)(v0 + 24) = sub_1001289B4;
  uint64_t v12 = swift_continuation_init();
  *(void *)(v0 + 184) = _NSConcreteStackBlock;
  *(void *)(v0 + 192) = 0x40000000;
  *(void *)(v0 + 200) = sub_1001088DC;
  *(void *)(v0 + 208) = &unk_10022D3D0;
  *(void *)(v0 + 216) = v12;
  [v10 fetchSharedAccountsWithGroupID:v11 completionHandler:v0 + 184];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001289B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 392) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100129868;
  }
  else
  {
    uint64_t v2 = sub_100128ACC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100128ACC()
{
  uint64_t v1 = (void *)v0[48];
  uint64_t v2 = v0[36];
  v0[50] = v0[28];

  sub_1000E2310((void *)(v2 + 104), *(void *)(v2 + 128));
  unint64_t v3 = (void *)swift_task_alloc();
  v0[51] = v3;
  void *v3 = v0;
  v3[1] = sub_100128B7C;
  return sub_1001371A0();
}

uint64_t sub_100128B7C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 416) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1001294A8;
  }
  else
  {
    *(void *)(v4 + 424) = a1;
    uint64_t v5 = sub_100128CB4;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_100128CB4()
{
  uint64_t v68 = v0;
  uint64_t v1 = (void *)v0[53];
  unint64_t v2 = v0[50];
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_100139554(v3);

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v0 + 29;
    if (v5) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10012A378(v6);
    uint64_t v58 = v0[29];
    Swift::String v59 = (void (*)(uint64_t))v0[1];
    v59(v58);
    return;
  }
  uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v0 + 29;
  if (!v5) {
    goto LABEL_37;
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v60 = v0[47];
    unint64_t v66 = v2 & 0xC000000000000001;
    uint64_t v62 = v0[50] + 32;
    unint64_t v63 = v6;
    uint64_t v64 = v0;
    uint64_t v61 = v4;
    uint64_t v65 = v5;
    while (1)
    {
      if (v66) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v62 + 8 * v7);
      }
      char v9 = v8;
      id v10 = [v8 shareInfo];
      if (!v10)
      {
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        sub_1000D78F8(v23, (uint64_t)qword_100274490);
        id v24 = v9;
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          v67[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v27 = 136315138;
          id v28 = [v24 clientID];
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;

          *(void *)(v27 + 4) = sub_100158C6C(v29, v31, v67);
          uint64_t v6 = v63;
          uint64_t v0 = v64;
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v25, v26, "We have a keychain item (%s that has an invalid shareInfo", (uint8_t *)v27, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v5 = v65;
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_7;
      }
      id v11 = v10;
      id v12 = [v10 groupID];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      LOBYTE(v12) = sub_1001396F0(v13, v15, v4);
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        if (qword_10026F9C0 != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        sub_1000D78F8(v32, (uint64_t)qword_100274490);
        id v33 = v9;
        id v34 = v11;
        id v35 = v33;
        id v36 = v34;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = swift_slowAlloc();
          v67[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136315394;
          id v40 = [v35 clientID];
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v43 = v42;

          *(void *)(v39 + 4) = sub_100158C6C(v41, v43, v67);
          swift_bridgeObjectRelease();

          *(_WORD *)(v39 + 12) = 2080;
          id v44 = [v36 groupID];
          uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v47 = v46;

          *(void *)(v39 + 14) = sub_100158C6C(v45, v47, v67);
          uint64_t v6 = v63;
          uint64_t v0 = v64;
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Keychain item for (%s is associated with group %s where the user is not a member of. Skipping...", (uint8_t *)v39, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v4 = v61;
          swift_slowDealloc();
        }
        else
        {
        }
        goto LABEL_6;
      }
      if (![v11 isCurrentUser])
      {
        id v48 = v9;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        goto LABEL_6;
      }
      id v16 = [v9 clientID];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if (*(void *)(v60 + 16))
      {
        unint64_t v20 = sub_10014A0BC(v17, v19);
        if (v21) {
          break;
        }
      }
      swift_bridgeObjectRelease();
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      sub_1000D78F8(v49, (uint64_t)qword_100274490);
      id v50 = v9;
      os_log_type_t v22 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v22, v51))
      {

        goto LABEL_34;
      }
      uint64_t v52 = swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      id v53 = [v50 clientID];
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v56 = v55;

      uint64_t v57 = v54;
      uint64_t v6 = v63;
      uint64_t v0 = v64;
      *(void *)(v52 + 4) = sub_100158C6C(v57, v56, v67);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v22, v51, "We have a keychain item (%s which doesn't map to a local account ", (uint8_t *)v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_35:
      uint64_t v4 = v61;
LABEL_6:
      uint64_t v5 = v65;
LABEL_7:
      if (v5 == ++v7) {
        goto LABEL_37;
      }
    }
    os_log_type_t v22 = *(id *)(*(void *)(v60 + 56) + 8 * v20);
    swift_bridgeObjectRelease();
    [v22 setShareInfo:v11];

LABEL_34:
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_1001294A8()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[31] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "There was an error fetching shared acccounts. Skipping shared accounts. Error: %@", v4, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10012A378(v0 + 29);
  uint64_t v7 = v0[29];
  id v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_100129698()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001296FC()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(void **)(v0 + 280);

  id v2 = [v1 altDSID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 344) = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v6;
  void *v6 = v0;
  v6[1] = sub_100128578;
  uint64_t v7 = *(void *)(v0 + 288);
  v6[17] = v5;
  v6[18] = v7;
  uint8_t v6[16] = v3;
  return _swift_task_switch(sub_100129CD4, 0, 0);
}

uint64_t sub_100129804()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100129868()
{
  uint64_t v1 = (void *)v0[48];
  swift_willThrow();

  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000D78F8(v2, (uint64_t)qword_100274490);
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[31] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v6 = v7;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "There was an error fetching shared acccounts. Skipping shared accounts. Error: %@", v5, 0xCu);
    sub_1000D70C8((uint64_t *)&unk_10026FD80);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10012A378(v0 + 29);
  uint64_t v8 = v0[29];
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v8);
}

uint64_t sub_100129A64()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing Entitlement Check", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 24);
  if (([v5 hasInternalAccess] & 1) != 0
    || [v5 hasPrivateAccess])
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client has necessary permission for accounts listing", v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client doesn't have access to perform account listing", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return 1;
}

uint64_t sub_100129CB0(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  uint8_t v3[16] = a1;
  return _swift_task_switch(sub_100129CD4, 0, 0);
}

uint64_t sub_100129CD4()
{
  id v24 = v0;
  uint64_t v1 = v0 + 10;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + 15;
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000D78F8(v3, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[17];
  if (v6)
  {
    uint64_t v8 = v0[16];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v10 = v8;
    uint64_t v1 = v0 + 10;
    v0[10] = sub_100158C6C(v10, v7, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetcing SIWA accounts from local store for altDSID %s", v9, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v0 + 15;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v11 = *(void **)(v0[18] + 32);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 authKitAccountWithAltDSID:v12];

  if (v13)
  {
    uint64_t v14 = v0[18];

    uint64_t v15 = *(void **)(v14 + 40);
    NSString v16 = String._bridgeToObjectiveC()();
    v0[19] = v16;
    v0[2] = v0;
    v0[7] = v2;
    v0[3] = sub_10012A0B4;
    uint64_t v17 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100139828;
    v0[13] = &unk_10022D3B8;
    v0[14] = v17;
    [v15 fetchAllDeveloperTeamsAndApplicationsForAltDSID:v16 withCompletion:v1];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "No authkit account for altDSID", v20, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    v0[15] = -16004;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    char v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_10012A0B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    uint64_t v2 = sub_10012A244;
  }
  else {
    uint64_t v2 = sub_10012A1C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012A1C4()
{
  unint64_t v1 = *(void *)(v0 + 120);

  unint64_t v2 = sub_10012C6A8(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10012A244()
{
  unint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10012A2B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_10012CC9C((uint64_t)&v11, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10012A378(unint64_t *a1)
{
  unint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v2 & 0x8000000000000000) != 0
    || (v2 & 0x4000000000000000) != 0)
  {
    unint64_t v2 = sub_10012BE28(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  sub_10012ADF4(v6);
  return specialized Array._endMutation()();
}

uint64_t sub_10012A400(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10012A420, 0, 0);
}

uint64_t sub_10012A420()
{
  sub_100129A64();
  id v1 = [*(id *)(v0 + 16) altDSID];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  *(void *)(v0 + 32) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  void *v5 = v0;
  v5[1] = sub_10012A550;
  uint64_t v6 = *(void *)(v0 + 24);
  v5[17] = v4;
  v5[18] = v6;
  uint8_t v5[16] = v2;
  return _swift_task_switch(sub_100129CD4, 0, 0);
}

uint64_t sub_10012A550(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10012A738;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 56) = a1;
    uint64_t v5 = sub_10012A680;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10012A680()
{
  sub_10012A79C(*(void *)(v0 + 56));
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_100142440(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  id v5 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v4];
  uint64_t v6 = *(uint64_t (**)(id))(v0 + 8);
  return v6(v5);
}

uint64_t sub_10012A738()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10012A79C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v7 << 6))
  {
    id v11 = *(id *)(*(void *)(a1 + 56) + 8 * i);
    id v12 = [v11 privateEmail];
    if (v12)
    {
      NSString v16 = v12;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v17;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1001354D4(0, v8[2] + 1, 1, v8);
      }
      unint64_t v19 = v8[2];
      unint64_t v18 = v8[3];
      if (v19 >= v18 >> 1) {
        uint64_t v8 = sub_1001354D4((void *)(v18 > 1), v19 + 1, 1, v8);
      }
      v8[2] = v19 + 1;
      unint64_t v20 = &v8[2 * v19];
      void v20[4] = v22;
      void v20[5] = v21;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {

      if (v5) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v6) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v13);
    ++v7;
    if (!v14)
    {
      int64_t v7 = v13 + 1;
      if (v13 + 1 >= v6) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v2 + 8 * v7);
      if (!v14)
      {
        int64_t v7 = v13 + 2;
        if (v13 + 2 >= v6) {
          goto LABEL_29;
        }
        unint64_t v14 = *(void *)(v2 + 8 * v7);
        if (!v14)
        {
          int64_t v7 = v13 + 3;
          if (v13 + 3 >= v6) {
            goto LABEL_29;
          }
          unint64_t v14 = *(void *)(v2 + 8 * v7);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_29:
    swift_release();
    return;
  }
  unint64_t v14 = *(void *)(v2 + 8 * v15);
  if (v14)
  {
    int64_t v7 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v2 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
}

id *sub_10012A9C0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000E2354((uint64_t)(v0 + 7));

  sub_1000E2354((uint64_t)(v0 + 13));
  return v0;
}

uint64_t sub_10012AA18()
{
  sub_10012A9C0();

  return _swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for AccountsListingController()
{
  return self;
}

void sub_10012AA70(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v3;
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v3) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v8)
    {
      unint64_t v12 = *(void *)(v4 + 8 * v11);
      ++v2;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v2 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_28;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v2);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v2 = v11 + 2;
      if (v11 + 2 >= v8) {
        goto LABEL_28;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v2);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v2 = v11 + 3;
      if (v11 + 3 >= v8) {
        goto LABEL_28;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v2);
      if (v12)
      {
LABEL_22:
        unint64_t v7 = (v12 - 1) & v12;
        for (unint64_t i = __clz(__rbit64(v12)) + (v2 << 6); ; unint64_t i = v9 | (v2 << 6))
        {
          id v14 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          id v15 = [v14 localizedAppName];
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v18 = v17;

          swift_bridgeObjectRelease();
          uint64_t v19 = HIBYTE(v18) & 0xF;
          if ((v18 & 0x2000000000000000) == 0) {
            uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
          }
          if (v19)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (!v7) {
              goto LABEL_7;
            }
          }
          else
          {

            if (!v7) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v9 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      int64_t v13 = v11 + 4;
      if (v13 < v8)
      {
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (v12)
        {
          int64_t v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v2 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_30;
          }
          if (v2 >= v8) {
            break;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v2);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_28:
    swift_release();
    return;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

id sub_10012AC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = v8;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Scope(0);
  v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a6, 1, v15) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a6, v15);
  }
  if (a8)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  id v19 = [v9 initWithClientID:v12 userID:v13 scopes:v14.super.isa creationDate:isa privateEmail:v18];

  return v19;
}

Swift::Int sub_10012ADF4(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_150;
    }
    if (v3) {
      return sub_10012B6C0(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_158;
  }
  Swift::Int v120 = result;
  id v117 = a1;
  if (v3 < 2)
  {
    int64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v133 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v128 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v11 >= 2)
      {
        uint64_t v111 = *v117;
        do
        {
          unint64_t v112 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_145;
          }
          if (!v111) {
            goto LABEL_157;
          }
          uint64_t v113 = *(void *)&v8[16 * v112 + 32];
          uint64_t v114 = *(void *)&v8[16 * v11 + 24];
          sub_10012B844((void **)(v111 + 8 * v113), (id *)(v111 + 8 * *(void *)&v8[16 * v11 + 16]), (id *)(v111 + 8 * v114), v128);
          if (v1) {
            break;
          }
          if (v114 < v113) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v8 = sub_10012BE14((uint64_t)v8);
          }
          if (v112 >= *((void *)v8 + 2)) {
            goto LABEL_147;
          }
          Class v115 = &v8[16 * v112 + 32];
          *(void *)Class v115 = v113;
          *((void *)v115 + 1) = v114;
          unint64_t v116 = *((void *)v8 + 2);
          if (v11 > v116) {
            goto LABEL_148;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v116 - v11));
          *((void *)v8 + 2) = v116 - 1;
          unint64_t v11 = v116 - 1;
        }
        while (v116 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_100100D68(0, (unint64_t *)&qword_100271600);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    uint64_t v128 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v133 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v118 = *a1 + 16;
  uint64_t v119 = *a1 - 8;
  int64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v125 = v3;
  uint64_t v129 = *a1;
  while (2)
  {
    Swift::Int v12 = v9 + 1;
    Swift::Int v124 = v9;
    if (v9 + 1 >= v3) {
      goto LABEL_45;
    }
    unint64_t v121 = v8;
    NSString v13 = *(void **)(v10 + 8 * v9);
    id v14 = *(id *)(v10 + 8 * v12);
    id v15 = v13;
    id v16 = [v14 localizedAppName];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    id v20 = [v15 localizedAppName];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    if (v17 == v21 && v19 == v23) {
      int v126 = 0;
    }
    else {
      int v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Swift::Int v12 = v9 + 2;
    Swift::Int v3 = v125;
    if (v9 + 2 >= v125) {
      goto LABEL_36;
    }
    uint64_t v25 = (id *)(v118 + 8 * v9);
    while (1)
    {
      Swift::Int v130 = v12;
      uint64_t v27 = *(v25 - 1);
      id v28 = *v25;
      id v29 = v27;
      id v30 = [v28 localizedAppName];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      id v34 = [v29 localizedAppName];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      if (v31 == v35 && v33 == v37)
      {

        swift_bridgeObjectRelease_n();
        if (v126)
        {
          int64_t v8 = v121;
          Swift::Int v9 = v124;
          Swift::Int v3 = v125;
          uint64_t v10 = v129;
          Swift::Int v12 = v130;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      int v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v126 ^ v26)) {
        break;
      }
LABEL_25:
      Swift::Int v12 = v130 + 1;
      ++v25;
      Swift::Int v3 = v125;
      if (v125 == v130 + 1)
      {
        Swift::Int v12 = v125;
        goto LABEL_35;
      }
    }
    Swift::Int v3 = v125;
    Swift::Int v12 = v130;
LABEL_35:
    Swift::Int v9 = v124;
LABEL_36:
    int64_t v8 = v121;
    uint64_t v10 = v129;
    if (v126)
    {
LABEL_37:
      if (v12 < v9) {
        goto LABEL_151;
      }
      if (v9 < v12)
      {
        uint64_t v39 = (uint64_t *)(v119 + 8 * v12);
        Swift::Int v40 = v12;
        Swift::Int v41 = v9;
        unint64_t v42 = (uint64_t *)(v10 + 8 * v9);
        do
        {
          if (v41 != --v40)
          {
            if (!v10) {
              goto LABEL_156;
            }
            uint64_t v43 = *v42;
            *unint64_t v42 = *v39;
            *uint64_t v39 = v43;
          }
          ++v41;
          --v39;
          ++v42;
        }
        while (v41 < v40);
      }
    }
LABEL_45:
    if (v12 >= v3) {
      goto LABEL_68;
    }
    if (__OFSUB__(v12, v9)) {
      goto LABEL_149;
    }
    if (v12 - v9 >= v120)
    {
LABEL_68:
      if (v12 < v9) {
        goto LABEL_144;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v8 = sub_10012BC5C(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v63 = *((void *)v8 + 2);
      unint64_t v62 = *((void *)v8 + 3);
      unint64_t v11 = v63 + 1;
      if (v63 >= v62 >> 1) {
        int64_t v8 = sub_10012BC5C((char *)(v62 > 1), v63 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11;
      uint64_t v64 = v8 + 32;
      uint64_t v65 = &v8[16 * v63 + 32];
      *(void *)uint64_t v65 = v9;
      *((void *)v65 + 1) = v12;
      Swift::Int v132 = v12;
      if (!v63)
      {
        unint64_t v11 = 1;
LABEL_14:
        Swift::Int v3 = v125;
        Swift::Int v9 = v132;
        if (v132 >= v125) {
          goto LABEL_116;
        }
        continue;
      }
      while (1)
      {
        unint64_t v66 = v11 - 1;
        if (v11 >= 4)
        {
          id v71 = &v64[16 * v11];
          uint64_t v72 = *((void *)v71 - 8);
          uint64_t v73 = *((void *)v71 - 7);
          BOOL v77 = __OFSUB__(v73, v72);
          uint64_t v74 = v73 - v72;
          if (v77) {
            goto LABEL_133;
          }
          uint64_t v76 = *((void *)v71 - 6);
          uint64_t v75 = *((void *)v71 - 5);
          BOOL v77 = __OFSUB__(v75, v76);
          uint64_t v69 = v75 - v76;
          char v70 = v77;
          if (v77) {
            goto LABEL_134;
          }
          unint64_t v78 = v11 - 2;
          uint64_t v79 = &v64[16 * v11 - 32];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v77 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v77) {
            goto LABEL_136;
          }
          BOOL v77 = __OFADD__(v69, v82);
          uint64_t v83 = v69 + v82;
          if (v77) {
            goto LABEL_139;
          }
          if (v83 >= v74)
          {
            id v101 = &v64[16 * v66];
            uint64_t v103 = *(void *)v101;
            uint64_t v102 = *((void *)v101 + 1);
            BOOL v77 = __OFSUB__(v102, v103);
            uint64_t v104 = v102 - v103;
            if (v77) {
              goto LABEL_143;
            }
            BOOL v94 = v69 < v104;
            goto LABEL_105;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v95 = *((void *)v8 + 4);
            uint64_t v96 = *((void *)v8 + 5);
            BOOL v77 = __OFSUB__(v96, v95);
            uint64_t v88 = v96 - v95;
            char v89 = v77;
            goto LABEL_99;
          }
          uint64_t v68 = *((void *)v8 + 4);
          uint64_t v67 = *((void *)v8 + 5);
          BOOL v77 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          char v70 = v77;
        }
        if (v70) {
          goto LABEL_135;
        }
        unint64_t v78 = v11 - 2;
        unint64_t v84 = &v64[16 * v11 - 32];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v87 = __OFSUB__(v85, v86);
        uint64_t v88 = v85 - v86;
        char v89 = v87;
        if (v87) {
          goto LABEL_138;
        }
        unint64_t v90 = &v64[16 * v66];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v77 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v77) {
          goto LABEL_141;
        }
        if (__OFADD__(v88, v93)) {
          goto LABEL_142;
        }
        if (v88 + v93 >= v69)
        {
          BOOL v94 = v69 < v93;
LABEL_105:
          if (v94) {
            unint64_t v66 = v78;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v89) {
          goto LABEL_137;
        }
        unint64_t v97 = &v64[16 * v66];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v77 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v77) {
          goto LABEL_140;
        }
        if (v100 < v88) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v105 = v66 - 1;
        if (v66 - 1 >= v11)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v10) {
          goto LABEL_155;
        }
        uint64_t v106 = &v64[16 * v105];
        uint64_t v107 = *(void *)v106;
        id v108 = &v64[16 * v66];
        uint64_t v109 = *((void *)v108 + 1);
        sub_10012B844((void **)(v10 + 8 * *(void *)v106), (id *)(v10 + 8 * *(void *)v108), (id *)(v10 + 8 * v109), v128);
        if (v1) {
          goto LABEL_127;
        }
        if (v109 < v107) {
          goto LABEL_130;
        }
        if (v66 > *((void *)v8 + 2)) {
          goto LABEL_131;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v64[16 * v105 + 8] = v109;
        unint64_t v110 = *((void *)v8 + 2);
        if (v66 >= v110) {
          goto LABEL_132;
        }
        unint64_t v11 = v110 - 1;
        memmove(&v64[16 * v66], v108 + 16, 16 * (v110 - 1 - v66));
        *((void *)v8 + 2) = v110 - 1;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v9, v120)) {
    goto LABEL_152;
  }
  if (v9 + v120 >= v3) {
    Swift::Int v44 = v3;
  }
  else {
    Swift::Int v44 = v9 + v120;
  }
  if (v44 >= v9)
  {
    if (v12 != v44)
    {
      id v122 = v8;
      Swift::Int v123 = v44;
      uint64_t v45 = v119 + 8 * v12;
      do
      {
        unint64_t v47 = *(void **)(v10 + 8 * v12);
        uint64_t v127 = v45;
        Swift::Int v131 = v12;
        while (1)
        {
          id v48 = *(void **)v45;
          id v49 = v47;
          id v50 = v48;
          id v51 = [v49 localizedAppName];
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v53;

          id v55 = [v50 localizedAppName];
          uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v58 = v57;

          if (v52 == v56 && v54 == v58)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v10 = v129;
            Swift::Int v46 = v131;
            goto LABEL_56;
          }
          char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = v129;
          if ((v60 & 1) == 0) {
            break;
          }
          if (!v129) {
            goto LABEL_154;
          }
          uint64_t v61 = *(void **)v45;
          unint64_t v47 = *(void **)(v45 + 8);
          *(void *)uint64_t v45 = v47;
          *(void *)(v45 + 8) = v61;
          v45 -= 8;
          ++v9;
          Swift::Int v46 = v131;
          if (v131 == v9) {
            goto LABEL_56;
          }
        }
        Swift::Int v46 = v131;
LABEL_56:
        Swift::Int v12 = v46 + 1;
        uint64_t v45 = v127 + 8;
        Swift::Int v9 = v124;
      }
      while (v12 != v123);
      Swift::Int v12 = v123;
      int64_t v8 = v122;
    }
    goto LABEL_68;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012B6C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v25 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v6 = *(void **)(v25 + 8 * a3);
    uint64_t v7 = v23;
    uint64_t v24 = v4;
    uint64_t v26 = a3;
    while (1)
    {
      int64_t v8 = *(void **)v4;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 localizedAppName];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      id v15 = [v10 localizedAppName];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      if (v12 == v16 && v14 == v18)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v26;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v24 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v5 = v26;
      if ((v20 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v25) {
        break;
      }
      uint64_t v21 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v21;
      v4 -= 8;
      if (v26 == ++v7) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10012B844(void **__src, id *a2, id *a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v12 = (char *)a3 - (char *)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v61 = __src;
  char v60 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_53;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    id v51 = v4;
    uint64_t v31 = &v4[v13];
    Swift::String v59 = v31;
    uint64_t v61 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_10012BD58((void **)&v61, (const void **)&v60, &v59);
      return 1;
    }
    uint64_t v32 = v6;
    uint64_t v56 = v7;
    while (1)
    {
      uint64_t v52 = v31;
      uint64_t v54 = v6;
      uint64_t v58 = v5;
      id v34 = *--v31;
      uint64_t v33 = v34;
      uint64_t v35 = *--v32;
      id v36 = v33;
      id v37 = v35;
      id v38 = [v36 localizedAppName];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      id v42 = [v37 localizedAppName];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      if (v39 == v43 && v41 == v45) {
        break;
      }
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v48 = v58;
      uint64_t v5 = v58 - 1;
      if ((v47 & 1) == 0) {
        goto LABEL_46;
      }
      unint64_t v49 = (unint64_t)v56;
      uint64_t v31 = v52;
      if (v58 != v54 || v5 >= v54) {
        id *v5 = *v32;
      }
      uint64_t v61 = v32;
LABEL_50:
      if ((unint64_t)v32 > v49)
      {
        uint64_t v6 = v32;
        if (v31 > v51) {
          continue;
        }
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n();
    id v48 = v58;
    uint64_t v5 = v58 - 1;
LABEL_46:
    uint64_t v32 = v54;
    unint64_t v49 = (unint64_t)v56;
    Swift::String v59 = v31;
    if (v48 < v52 || v5 >= v52 || v48 != v52) {
      id *v5 = *v31;
    }
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v53 = &v4[v10];
    Swift::String v59 = v53;
    if (v6 < v5 && v8 >= 8)
    {
      uint64_t v57 = v5;
      while (1)
      {
        id v55 = v7;
        uint64_t v14 = v6;
        id v15 = *v4;
        id v16 = *v6;
        id v17 = v15;
        id v18 = [v16 localizedAppName];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        id v22 = [v17 localizedAppName];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        if (v19 == v23 && v21 == v25) {
          break;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_23;
        }
        id v28 = v14 + 1;
        id v29 = v55;
        id v30 = v57;
        if (v55 < v14 || v55 >= v28 || v55 != v14) {
          *id v55 = *v14;
        }
LABEL_26:
        uint64_t v7 = v29 + 1;
        if (v4 < v53)
        {
          uint64_t v6 = v28;
          if (v28 < v30) {
            continue;
          }
        }
        uint64_t v61 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      id v29 = v55;
      id v30 = v57;
      if (v55 != v4) {
        *id v55 = *v4;
      }
      char v60 = ++v4;
      id v28 = v14;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10012BC5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000D70C8(&qword_100271608);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10012BD58(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_10012BE14(uint64_t a1)
{
  return sub_10012BC5C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10012BE28(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_10012BEA4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_10012BF2C(void *a1)
{
  uint64_t v2 = sub_1000D70C8((uint64_t *)&unk_100270030);
  __chkstk_darwin(v2 - 8);
  uint64_t v68 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v76 = a1;
  id v4 = [a1 privateEmail];
  if (v4)
  {
    char v5 = v4;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v75 = v6;
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v75 = 0;
  }
  id v7 = v76;
  id v8 = [v76 userIdentifier];
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v9;

  id v10 = [v7 apps];
  sub_100100D68(0, (unint64_t *)&qword_1002707A8);
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v12 = 0;
  uint64_t v13 = v11 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v11 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  BOOL v77 = &_swiftEmptyDictionarySingleton;
  if (v16) {
    goto LABEL_9;
  }
LABEL_10:
  while (2)
  {
    int64_t v20 = v12 + 1;
    if (!__OFADD__(v12, 1))
    {
      if (v20 < v17)
      {
        unint64_t v21 = *(void *)(v13 + 8 * v20);
        ++v12;
        if (v21) {
          goto LABEL_25;
        }
        int64_t v12 = v20 + 1;
        if (v20 + 1 >= v17) {
          goto LABEL_56;
        }
        unint64_t v21 = *(void *)(v13 + 8 * v12);
        if (v21) {
          goto LABEL_25;
        }
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v17) {
          goto LABEL_56;
        }
        unint64_t v21 = *(void *)(v13 + 8 * v12);
        if (v21) {
          goto LABEL_25;
        }
        int64_t v12 = v20 + 3;
        if (v20 + 3 >= v17) {
          goto LABEL_56;
        }
        unint64_t v21 = *(void *)(v13 + 8 * v12);
        if (v21)
        {
LABEL_25:
          unint64_t v16 = (v21 - 1) & v21;
          for (unint64_t i = __clz(__rbit64(v21)) + (v12 << 6); ; unint64_t i = v18 | (v12 << 6))
          {
            id v23 = *(id *)(*(void *)(v11 + 56) + 8 * i);
            id v24 = [v23 primaryClientID];
            if (!v24) {
              break;
            }
            uint64_t v25 = v24;
            uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v28 = v27;

            if (v26 == 1280070990 && v28 == 0xE400000000000000)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v30 & 1) == 0) {
                break;
              }
            }
            if ([v23 state] != (id)1 && objc_msgSend(v23, "state") != (id)3) {
              break;
            }
            id v31 = [v23 clientID];
            uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v34 = v33;

            id v35 = [v23 scopes];
            if (v35)
            {
              id v36 = v35;
              type metadata accessor for Scope(0);
              id v71 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              id v71 = _swiftEmptyArrayStorage;
            }
            id v37 = [v23 creationDate];
            uint64_t v72 = v34;
            uint64_t v73 = v32;
            if (v37)
            {
              id v38 = v37;
              uint64_t v39 = (uint64_t)v68;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v40 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
            }
            else
            {
              uint64_t v41 = type metadata accessor for Date();
              uint64_t v39 = (uint64_t)v68;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v68, 1, 1, v41);
            }
            id v42 = objc_allocWithZone((Class)AKSignInWithAppleAccount);
            uint64_t v43 = v74;
            swift_bridgeObjectRetain();
            uint64_t v44 = v75;
            swift_bridgeObjectRetain();
            id v45 = sub_10012AC68(v73, v72, v69, v43, (uint64_t)v71, v39, v70, v44);
            id v46 = [v23 appiTunesMetadata];
            NSString v47 = [v46 appName];

            if (!v47)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              NSString v47 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            [v45 setLocalizedAppName:v47];

            id v48 = [v23 appiTunesMetadata];
            id v49 = [v48 appDeveloperName];

            if (v49)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
            }
            NSString v50 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v45 setLocalizedAppDeveloperName:v50];

            NSString v51 = [v76 teamID];
            if (!v51)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              NSString v51 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            [v45 setTeamID:v51];

            id v52 = [v23 appiTunesMetadata];
            id v53 = [v52 adamID];

            if (v53)
            {
              uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v56 = v55;

              if (v54 == 1280070990 && v56 == 0xE400000000000000)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v57 & 1) == 0)
                {
                  id v58 = [v23 appiTunesMetadata];
                  id v59 = [v58 adamID];

                  [v45 setAppStoreAdamID:v59];
                }
              }
            }
            id v60 = [v23 clientID];
            uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v63 = v62;

            id v64 = v45;
            uint64_t v65 = v77;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v78 = v65;
            sub_10013F010((uint64_t)v64, v61, v63, isUniquelyReferenced_nonNull_native);
            BOOL v77 = v78;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v16) {
              goto LABEL_10;
            }
LABEL_9:
            unint64_t v18 = __clz(__rbit64(v16));
            v16 &= v16 - 1;
          }

          if (!v16) {
            continue;
          }
          goto LABEL_9;
        }
        int64_t v22 = v20 + 4;
        if (v22 < v17)
        {
          unint64_t v21 = *(void *)(v13 + 8 * v22);
          if (v21)
          {
            int64_t v12 = v22;
            goto LABEL_25;
          }
          while (1)
          {
            int64_t v12 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_58;
            }
            if (v12 >= v17) {
              break;
            }
            unint64_t v21 = *(void *)(v13 + 8 * v12);
            ++v22;
            if (v21) {
              goto LABEL_25;
            }
          }
        }
      }
LABEL_56:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    break;
  }
  __break(1u);
LABEL_58:
  __break(1u);
}

unint64_t sub_10012C6A8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_52;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_53;
  }
  do
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_60;
    }
    unint64_t v44 = v1 & 0xC000000000000001;
    unint64_t v41 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    id v4 = &_swiftEmptyDictionarySingleton;
    uint64_t v42 = v2;
    unint64_t v43 = v1;
    while (1)
    {
      if (v44) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v41 + 8 * v3);
      }
      char v5 = v6;
      sub_10012BF2C(v6);
      uint64_t v8 = v7;
      if (!*(void *)(v7 + 16))
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      id v45 = v5;
      uint64_t v46 = v3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v47 = v8 + 64;
      uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
      uint64_t v11 = v10 < 64 ? ~(-1 << v10) : -1;
      unint64_t v12 = v11 & *(void *)(v8 + 64);
      int64_t v48 = (unint64_t)(v10 + 63) >> 6;
      id v49 = v4;
      swift_bridgeObjectRetain();
      int64_t v13 = 0;
      if (v12) {
        break;
      }
LABEL_18:
      int64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_50;
      }
      if (v17 < v48)
      {
        unint64_t v18 = *(void *)(v47 + 8 * v17);
        ++v13;
        if (v18) {
          goto LABEL_33;
        }
        int64_t v13 = v17 + 1;
        if (v17 + 1 < v48)
        {
          unint64_t v18 = *(void *)(v47 + 8 * v13);
          if (v18) {
            goto LABEL_33;
          }
          int64_t v13 = v17 + 2;
          if (v17 + 2 < v48)
          {
            unint64_t v18 = *(void *)(v47 + 8 * v13);
            if (v18) {
              goto LABEL_33;
            }
            int64_t v13 = v17 + 3;
            if (v17 + 3 < v48)
            {
              unint64_t v18 = *(void *)(v47 + 8 * v13);
              if (v18) {
                goto LABEL_33;
              }
              int64_t v19 = v17 + 4;
              if (v19 < v48)
              {
                unint64_t v18 = *(void *)(v47 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v13 = v19 + 1;
                    if (__OFADD__(v19, 1)) {
                      goto LABEL_51;
                    }
                    if (v13 >= v48) {
                      goto LABEL_5;
                    }
                    unint64_t v18 = *(void *)(v47 + 8 * v13);
                    ++v19;
                    if (v18) {
                      goto LABEL_33;
                    }
                  }
                }
                int64_t v13 = v19;
LABEL_33:
                unint64_t v12 = (v18 - 1) & v18;
                unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
                goto LABEL_34;
              }
            }
          }
        }
      }
LABEL_5:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v2 = v42;
      unint64_t v1 = v43;
      char v5 = v45;
      uint64_t v3 = v46;
LABEL_6:
      ++v3;

      if (v3 == v2)
      {
        swift_bridgeObjectRelease();
        return (unint64_t)v4;
      }
    }
    while (1)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
LABEL_34:
      int64_t v20 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      id v23 = *(void **)(*(void *)(v8 + 56) + 8 * v16);
      swift_bridgeObjectRetain();
      id v24 = v23;
      unint64_t v26 = sub_10014A0BC(v22, v21);
      uint64_t v27 = v4[2];
      BOOL v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        break;
      }
      unint64_t v1 = v25;
      if (v4[3] >= v29)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          id v4 = v49;
          if ((v25 & 1) == 0) {
            goto LABEL_41;
          }
        }
        else
        {
          sub_10013F76C();
          id v4 = v49;
          if ((v1 & 1) == 0) {
            goto LABEL_41;
          }
        }
LABEL_16:
        swift_bridgeObjectRelease();
        unint64_t v1 = v4[7];
        uint64_t v14 = 8 * v26;

        *(void *)(v1 + v14) = v24;
        char isUniquelyReferenced_nonNull_native = 1;
        if (!v12) {
          goto LABEL_18;
        }
      }
      else
      {
        sub_10013E3EC(v29, isUniquelyReferenced_nonNull_native & 1);
        unint64_t v30 = sub_10014A0BC(v22, v21);
        if ((v1 & 1) != (v31 & 1))
        {
          unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v26 = v30;
        id v4 = v49;
        if (v1) {
          goto LABEL_16;
        }
LABEL_41:
        v4[(v26 >> 6) + 8] |= 1 << v26;
        uint64_t v32 = (uint64_t *)(v4[6] + 16 * v26);
        *uint64_t v32 = v22;
        v32[1] = v21;
        *(void *)(v4[7] + 8 * v26) = v24;
        uint64_t v33 = v4[2];
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_49;
        }
        v4[2] = v35;
        char isUniquelyReferenced_nonNull_native = 1;
        if (!v12) {
          goto LABEL_18;
        }
      }
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  while (v2);
LABEL_53:
  if (qword_10026F9C0 != -1) {
LABEL_60:
  }
    swift_once();
  uint64_t v37 = type metadata accessor for Logger();
  sub_1000D78F8(v37, (uint64_t)qword_100274490);
  id v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "No accounts found in local store", v40, 2u);
    swift_slowDealloc();
  }

  return sub_1001434D4((uint64_t)_swiftEmptyArrayStorage);
}

BOOL sub_10012CB5C(uint64_t a1)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10012AA70(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 >> 62) {
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 != v5)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1000D78F8(v6, (uint64_t)qword_100274490);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Some accounts are missing metadata. Requires app metadata fetch from server", v9, 2u);
      swift_slowDealloc();
    }
  }
  return v4 != v5;
}

uint64_t sub_10012CC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D70C8((uint64_t *)&unk_1002715F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012CD08(uint64_t a1)
{
  return sub_10012CD70(a1, qword_100274460);
}

uint64_t sub_10012CD20(uint64_t a1)
{
  return sub_10012CD70(a1, qword_100274478);
}

uint64_t sub_10012CD38(uint64_t a1)
{
  return sub_10012CD70(a1, qword_100274490);
}

uint64_t sub_10012CD50(uint64_t a1)
{
  return sub_10012CD70(a1, qword_1002744A8);
}

uint64_t sub_10012CD70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_100109F48(v3, a2);
  sub_1000D78F8(v3, (uint64_t)a2);
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for AppleIDPasskeyUnenrollController()
{
  return self;
}

id sub_10012CF14(void *a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000D70C8((uint64_t *)&unk_10026FF90);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self sharedBag];
  if (result)
  {
    uint64_t v11 = result;
    id v12 = [result unenrollPasskeyURL];

    if (v12)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
      {
        sub_1000DBBF8((uint64_t)v9);
        id v13 = [objc_allocWithZone((Class)AKAppleIDAuthenticationContext) init];
        NSString v14 = [a1 altDSID];
        if (!v14)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v14 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v13, "setAltDSID:", v14, v27);

        NSString v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v13 setAppProvidedContext:v15];

        id v16 = [objc_allocWithZone((Class)type metadata accessor for AppleIDPasskeyRequestProvider()) initWithContext:v13 urlBagKey:AKURLBagKeyUnenrollPasskey];
        [v16 setAuthenticatedRequest:1];
        [v16 setClient:v27];
        id v17 = [objc_allocWithZone((Class)AKServiceControllerImpl) initWithRequestProvider:v16];
        id v18 = [self sharedInstance];
        int64_t v19 = (objc_class *)type metadata accessor for AppleIDPasskeyUnenrollProvider();
        int64_t v20 = (char *)objc_allocWithZone(v19);
        *(void *)&v20[OBJC_IVAR___AKAppleIDPasskeyUnenrollProvider_serviceController] = v17;
        *(void *)&v20[OBJC_IVAR___AKAppleIDPasskeyUnenrollProvider_accountManager] = v18;
        v28.receiver = v20;
        v28.uint64_t super_class = v19;
        id v21 = objc_msgSendSuper2(&v28, "init");

        return v21;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    }
    sub_1000DBBF8((uint64_t)v9);
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_1002744A8);
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing passkey unenroll url.", v25, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AppleIDPasskeyError(0);
    id v21 = v26;
    uint64_t v29 = -120013;
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000DBBA0();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return v21;
  }
  __break(1u);
  return result;
}

uint64_t sub_10012D3E4(char a1)
{
  *(void *)(v2 + 184) = v1;
  *(unsigned char *)(v2 + 217) = a1;
  return _swift_task_switch(sub_10012D408, 0, 0);
}

uint64_t sub_10012D408()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 184) + OBJC_IVAR___AKAppleIDPasskeyUnenrollController_passkeyValidator);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 217);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 216;
  *(void *)(v0 + 24) = sub_10012D518;
  uint64_t v3 = swift_continuation_init();
  *(void *)(v0 + 144) = _NSConcreteStackBlock;
  *(void *)(v0 + 152) = 0x40000000;
  *(void *)(v0 + 160) = sub_1001394A0;
  *(void *)(v0 + 168) = &unk_10022D400;
  *(void *)(v0 + 176) = v3;
  [v1 canUnenrollPasskeyWithForced:v2 completionHandler:v0 + 144];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10012D518()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_10012DA54;
  }
  else {
    uint64_t v2 = sub_10012D628;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012D628()
{
  if (*(unsigned char *)(v0 + 216) == 1)
  {
    if (qword_10026F9C8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 200) = sub_1000D78F8(v1, (uint64_t)qword_1002744A8);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Passkey unenroll checks passed. Starting unenroll request with server...", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 184);

    uint64_t v6 = *(void **)(v5 + OBJC_IVAR___AKAppleIDPasskeyUnenrollController_unenrollProvider);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 216;
    *(void *)(v0 + 88) = sub_10012D83C;
    uint64_t v7 = swift_continuation_init();
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_1001394A0;
    *(void *)(v0 + 168) = &unk_10022D418;
    *(void *)(v0 + 176) = v7;
    [v6 performUnenrollRequestWithCompletionHandler:v0 + 144];
    return _swift_continuation_await(v0 + 80);
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8(0);
  }
}

uint64_t sub_10012D83C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_10012DAC4;
  }
  else {
    uint64_t v2 = sub_10012D94C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012D94C()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 216);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 144) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Passkey unenroll request completed with result - %{BOOL}d.", v4, 8u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v1);
}

uint64_t sub_10012DA54()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10012DAC4()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

id sub_10012DB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(void *)&v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs] = &_swiftEmptySetSingleton;
  id v21 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
  *(void *)id v21 = a1;
  *((void *)v21 + 1) = a2;
  uint64_t v22 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID];
  *(void *)uint64_t v22 = a3;
  *((void *)v22 + 1) = a4;
  id v23 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName];
  *(void *)id v23 = a5;
  *((void *)v23 + 1) = a6;
  os_log_type_t v24 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
  *(void *)os_log_type_t v24 = a7;
  *((void *)v24 + 1) = a8;
  unint64_t v25 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
  *(void *)unint64_t v25 = a9;
  *((void *)v25 + 1) = a10;
  unint64_t v26 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
  *(void *)unint64_t v26 = a11;
  *((void *)v26 + 1) = a12;
  uint64_t v27 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
  *(void *)uint64_t v27 = a13;
  *((void *)v27 + 1) = a14;
  objc_super v28 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName];
  *(void *)objc_super v28 = a15;
  *((void *)v28 + 1) = a16;
  uint64_t v29 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail];
  *(void *)uint64_t v29 = a17;
  *((void *)v29 + 1) = a18;
  unint64_t v30 = &v20[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName];
  *(void *)unint64_t v30 = a19;
  *((void *)v30 + 1) = a20;
  v32.receiver = v20;
  v32.uint64_t super_class = (Class)type metadata accessor for SignInWithAppleSharedCredential();
  return objc_msgSendSuper2(&v32, "init");
}

unint64_t sub_10012DC7C(char a1)
{
  unint64_t result = 0x4449746E65696C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44496D616574;
      break;
    case 2:
      unint64_t result = 0x614E746E65696C63;
      break;
    case 3:
      unint64_t result = 0x444972657375;
      break;
    case 4:
      unint64_t result = 0x6B6F546572616873;
      break;
    case 5:
      unint64_t result = 0x444970756F7267;
      break;
    case 6:
    case 7:
      unint64_t result = 0x7069636974726170;
      break;
    case 8:
      unint64_t result = 0x4565746176697270;
      break;
    case 9:
      unint64_t result = 0x65706F6C65766564;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_10012DDF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_10012DE0C()
{
  return sub_10012DC7C(*v0);
}

uint64_t sub_10012DE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10012F3BC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10012DE3C(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_10012DE48(uint64_t a1)
{
  unint64_t v2 = sub_10012EBB8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012DE84(uint64_t a1)
{
  unint64_t v2 = sub_10012EBB8();

  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_10012DEC0()
{
  v2.receiver = v0;
  v2.uint64_t super_class = (Class)type metadata accessor for SignInWithAppleSharedCredential();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SignInWithAppleSharedCredential()
{
  return self;
}

uint64_t sub_10012E01C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000D70C8(&qword_1002716F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000E2310(a1, a1[3]);
  sub_10012EBB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs);
    v10[7] = 10;
    sub_1000D70C8(&qword_100270670);
    sub_1000F1210(&qword_1002706A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_10012E3AC(void *a1)
{
  uint64_t v45 = sub_1000D70C8(&qword_1002716E0);
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs;
  *(void *)&v1[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs] = &_swiftEmptySetSingleton;
  sub_1000E2310(a1, a1[3]);
  sub_10012EBB8();
  uint64_t v46 = v1;
  int64_t v48 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v9 = v48;
    sub_1000E2354((uint64_t)a1);
    id v43 = *(id *)&v46[v47];

    swift_bridgeObjectRelease();
    type metadata accessor for SignInWithAppleSharedCredential();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v7 = v4;
    LOBYTE(v51) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v48;
    id v12 = (uint64_t *)&v48[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientID];
    *id v12 = v8;
    v12[1] = v13;
    LOBYTE(v51) = 1;
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    NSString v15 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_teamID];
    *NSString v15 = v14;
    v15[1] = v16;
    LOBYTE(v51) = 2;
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    id v18 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_clientName];
    *id v18 = v17;
    v18[1] = v19;
    LOBYTE(v51) = 3;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    id v21 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_userID];
    *id v21 = v20;
    v21[1] = v22;
    LOBYTE(v51) = 4;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    os_log_type_t v24 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_shareToken];
    *os_log_type_t v24 = v23;
    v24[1] = v25;
    LOBYTE(v51) = 5;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_groupID];
    *uint64_t v27 = v26;
    v27[1] = v28;
    LOBYTE(v51) = 6;
    uint64_t v44 = 0;
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v30 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantID];
    *unint64_t v30 = v29;
    v30[1] = v31;
    LOBYTE(v51) = 7;
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v33 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_participantName];
    *uint64_t v33 = v32;
    v33[1] = v34;
    LOBYTE(v51) = 8;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v36 = (uint64_t *)&v11[OBJC_IVAR___AKSignInWithAppleSharedCredential_privateEmail];
    *id v36 = v35;
    v36[1] = v37;
    LOBYTE(v51) = 9;
    uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)();
    os_log_type_t v39 = (uint64_t *)&v48[OBJC_IVAR___AKSignInWithAppleSharedCredential_developerName];
    *os_log_type_t v39 = v38;
    v39[1] = v40;
    sub_1000D70C8(&qword_100270670);
    char v50 = 10;
    sub_1000F1210(&qword_100270668);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v46[v47] = v51;
    unint64_t v41 = v48;

    swift_bridgeObjectRelease();
    uint64_t v42 = (objc_class *)type metadata accessor for SignInWithAppleSharedCredential();
    v49.receiver = v41;
    v49.uint64_t super_class = v42;
    id v43 = objc_msgSendSuper2(&v49, "init");
    (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v45);
    sub_1000E2354((uint64_t)a1);
  }
  return v43;
}

id sub_10012EB40@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for SignInWithAppleSharedCredential());
  id result = sub_10012E3AC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10012EB94(void *a1)
{
  return sub_10012E01C(a1);
}

unint64_t sub_10012EBB8()
{
  unint64_t result = qword_1002716E8;
  if (!qword_1002716E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002716E8);
  }
  return result;
}

void sub_10012EC0C(void *a1)
{
  id v2 = [a1 shareInfo];
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = v2;
  id v4 = [v2 shareToken];
  if (!v4)
  {

LABEL_6:
    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    return;
  }
  id v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v7;
  uint64_t v53 = v6;

  id v8 = [a1 clientID];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v50 = v10;
  uint64_t v51 = v9;

  id v11 = [a1 teamID];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v13;
  uint64_t v49 = v12;

  id v14 = [a1 localizedAppName];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v16;
  uint64_t v47 = v15;

  id v17 = [a1 userID];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v19;
  uint64_t v45 = v18;

  id v20 = [v3 groupID];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v22;
  uint64_t v43 = v21;

  id v23 = [v3 participantID];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v25;
  uint64_t v41 = v24;

  id v26 = [v3 participantName];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  id v30 = [a1 privateEmail];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v34 = 0;
  }
  id v35 = [a1 localizedAppDeveloperName];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  id v39 = objc_allocWithZone((Class)type metadata accessor for SignInWithAppleSharedCredential());
  sub_10012DB34(v51, v50, v49, v48, v47, v46, v45, v44, v53, v52, v43, v42, v41, v40, v27, v29, v32, v34, v36, v38);
}

id sub_10012EEEC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = [a1 clientID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v8;
  uint64_t v49 = v7;

  id v9 = [a1 teamID];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v11;
  uint64_t v47 = v10;

  id v12 = [a1 localizedAppName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v14;
  uint64_t v45 = v13;

  id v15 = [a1 userID];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v17;
  uint64_t v43 = v16;

  id v18 = [a2 groupID];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v20;
  uint64_t v41 = v19;

  id v21 = [a2 participantID];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  id v25 = [a2 participantName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  id v29 = [a1 privateEmail];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  id v34 = [a1 localizedAppDeveloperName];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  id v38 = objc_allocWithZone((Class)type metadata accessor for SignInWithAppleSharedCredential());
  return sub_10012DB34(v49, v48, v47, v46, v45, v44, v43, v42, a3, a4, v41, v40, v22, v24, v26, v28, v31, v33, v35, v37);
}

uint64_t getEnumTagSinglePayload for SignInWithAppleSharedCredential.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SignInWithAppleSharedCredential.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012F274);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

unsigned char *sub_10012F29C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SignInWithAppleSharedCredential.CodingKeys()
{
  return &type metadata for SignInWithAppleSharedCredential.CodingKeys;
}

unint64_t sub_10012F2B8()
{
  unint64_t result = qword_1002716F8;
  if (!qword_1002716F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002716F8);
  }
  return result;
}

unint64_t sub_10012F310()
{
  unint64_t result = qword_100271700;
  if (!qword_100271700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100271700);
  }
  return result;
}

unint64_t sub_10012F368()
{
  unint64_t result = qword_100271708;
  if (!qword_100271708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100271708);
  }
  return result;
}

uint64_t sub_10012F3BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x44496D616574 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614E746E65696C63 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x444972657375 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6B6F546572616873 && a2 == 0xEA00000000006E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x444970756F7267 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7069636974726170 && a2 == 0xED00004449746E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7069636974726170 && a2 == 0xEF656D614E746E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x4565746176697270 && a2 == 0xEC0000006C69616DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65706F6C65766564 && a2 == 0xED0000656D614E72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001001C4D40)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_10012F8A4(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return _swift_task_switch(sub_10012F8C8, 0, 0);
}

uint64_t sub_10012F8C8()
{
  if ([*(id *)(*(void *)(v0 + 80) + 24) isSiwaCredentialSharingEnabled])
  {
    sub_10013042C();
    id v1 = [*(id *)(v0 + 64) signInWithAppleAccount];
    *(void *)(v0 + 88) = v1;
    if (v1)
    {
      id v2 = v1;
      int v3 = *(void **)(v0 + 64);
      sub_1000E2310((void *)(*(void *)(v0 + 80) + 32), *(void *)(*(void *)(v0 + 80) + 56));
      id v4 = [v3 altDSID];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100135D60();
      uint64_t v17 = *(void **)(v0 + 64);
      swift_bridgeObjectRelease();
      id v18 = [v17 altDSID];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      *(void *)(v0 + 96) = v21;
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v22;
      void *v22 = v0;
      v22[1] = sub_10012FCA0;
      uint64_t v23 = *(void *)(v0 + 80);
      v22[18] = v21;
      v22[19] = v23;
      v22[16] = v2;
      v22[17] = v19;
      return _swift_task_switch(sub_10013069C, 0, 0);
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v5 = (uint64_t *)(v0 + 40);
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000D78F8(v13, (uint64_t)qword_100274490);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No SIWA account set in context.", v16, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v10 = -16007;
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v5 = (uint64_t *)(v0 + 24);
    uint64_t v6 = type metadata accessor for Logger();
    sub_1000D78F8(v6, (uint64_t)qword_100274490);
    BOOL v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Feature flag SiwaCredentialSharingEnabled is not enabled", v9, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    uint64_t v10 = -16001;
  }
  uint64_t *v5 = v10;
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10012FCA0()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001302FC;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v2 = sub_10012FDBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012FDBC()
{
  if (![*(id *)(v0 + 64) _isMoveAccountRequest])
  {
    uint64_t v17 = swift_task_alloc();
    *(void *)(v0 + 144) = v17;
    *(void *)uint64_t v17 = v0;
    *(void *)(v17 + 8) = sub_1001301E8;
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 64);
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v0 + 72);
    *(void *)(v17 + 24) = v19;
    *(void *)(v17 + 32) = v18;
    uint64_t v16 = sub_100130F90;
    goto LABEL_10;
  }
  id v1 = [*(id *)(v0 + 64) currentGroupID];
  if (v1)
  {
    id v2 = v1;
    int v3 = *(void **)(v0 + 72);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    *(void *)(v0 + 120) = v6;
    id v7 = [v3 groupID];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    if (v4 == v8 && v6 == v10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        uint64_t v13 = swift_task_alloc();
        *(void *)(v0 + 128) = v13;
        *(void *)uint64_t v13 = v0;
        *(void *)(v13 + 8) = sub_100130040;
        uint64_t v14 = *(void *)(v0 + 88);
        uint64_t v15 = *(void *)(v0 + 64);
        *(_OWORD *)(v13 + 72) = *(_OWORD *)(v0 + 72);
        *(void *)(v13 + 56) = v4;
        *(void *)(v13 + 64) = v6;
        *(void *)(v13 + 40) = v15;
        *(void *)(v13 + 48) = v14;
        uint64_t v16 = sub_1001321C4;
LABEL_10:
        return _swift_task_switch(v16, 0, 0);
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = *(void **)(v0 + 88);
  type metadata accessor for SignInWithAppleError(0);
  *(void *)(v0 + 56) = -16007;
  sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
  sub_1000E22B8();
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();

  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t sub_100130040()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    id v2 = sub_100130364;
  }
  else {
    id v2 = sub_100130174;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100130174()
{
  [*(id *)(v0 + 88) setShareInfo:*(void *)(v0 + 72)];
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 88);
  return v1(v2);
}

uint64_t sub_1001301E8()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001303C8;
  }
  else {
    uint64_t v2 = sub_100132F3C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001302FC()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_bridgeObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100130364()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001303C8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013042C()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Performing Entitlement Check", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 16);
  if (([v5 hasInternalAccess] & 1) != 0
    || [v5 hasPrivateAccess])
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client has necessary permission for accounts sharing", v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client doesn't have access to perform account sharing", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return 1;
}

uint64_t sub_100130678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  uint8_t v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_10013069C, 0, 0);
}

uint64_t sub_10013069C()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 152) + 72);
  NSString v2 = [*(id *)(v0 + 128) clientID];
  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 160) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 168) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 24) = sub_1001307F8;
  uint64_t v4 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1000D91D4;
  *(void *)(v0 + 104) = &unk_10022D4D8;
  *(void *)(v0 + 112) = v4;
  [v1 fetchDeveloperTeamWithClientID:v2 withAltDSID:v3 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001307F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    NSString v2 = sub_100130E80;
  }
  else {
    NSString v2 = sub_100130908;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100130908()
{
  uint64_t v51 = v0;
  uint64_t v1 = (void *)(v0 + 120);
  NSString v2 = *(void **)(v0 + 120);
  NSString v3 = *(void **)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 128);

  id v5 = [v2 apps];
  sub_1000F3304();
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [v4 clientID];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (!*(void *)(v6 + 16) || (sub_10014A0BC(v8, v10), (v11 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v21 = *(void **)(v0 + 128);
    uint64_t v22 = type metadata accessor for Logger();
    sub_1000D78F8(v22, (uint64_t)qword_100274490);
    id v23 = v2;
    id v24 = v21;
    id v25 = v23;
    id v26 = v24;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    id v30 = *(void **)(v0 + 128);
    if (v29)
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      v50[0] = v49;
      os_log_type_t type = v28;
      id v32 = [v25 teamID];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      *(void *)(v0 + 80) = sub_100158C6C(v33, v35, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v31 + 12) = 2080;
      id v36 = [v30 clientID];
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v38;

      *(void *)(v0 + 80) = sub_100158C6C(v37, v39, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v27, type, "Developer team %s doesn't have the app with client id %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for SignInWithAppleError(0);
    *uint64_t v1 = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    goto LABEL_12;
  }
  char v12 = *(void **)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v13 = [v12 userID];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  id v17 = [v2 userIdentifier];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (v14 != v18 || v16 != v20)
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_14;
    }
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_1000D78F8(v44, (uint64_t)qword_100274490);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "User identfier doesn't match", v47, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    *uint64_t v1 = -16007;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
LABEL_12:
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    uint64_t v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v41 = 0;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease_n();
LABEL_14:

  uint64_t v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v41 = 1;
LABEL_15:
  return v40(v41);
}

uint64_t sub_100130E80()
{
  uint64_t v1 = (void *)v0[21];
  NSString v2 = (void *)v0[20];
  swift_willThrow();

  NSString v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

uint64_t sub_100130EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  void v4[4] = a2;
  return _swift_task_switch(sub_100130F90, 0, 0);
}

uint64_t sub_100130F90()
{
  if ([*(id *)(v0 + 24) _simulateAccountSharingResponse])
  {
    uint64_t v1 = *(void **)(v0 + 40);
    id v2 = *(id *)(v0 + 32);
    id v3 = v1;
    uint64_t v4 = sub_100132E34();
    id v6 = sub_10012EEEC(v2, v3, v4, v5);
    id v7 = *(void **)(v0 + 32);

    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000D78F8(v12, (uint64_t)qword_100274490);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Simulated share token", v15, 2u);
      swift_slowDealloc();
    }

    *(void *)(v0 + 72) = v6;
    uint64_t v16 = *(void **)(v0 + 24);
    id v17 = [*(id *)(v0 + 32) clientID];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    *(void *)(v0 + 80) = v20;
    id v21 = [v16 altDSID];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    *(void *)(v0 + 88) = v24;
    id v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v25;
    *id v25 = v0;
    v25[1] = sub_1001315C4;
    uint64_t v26 = *(void *)(v0 + 48);
    v25[19] = v24;
    v25[20] = v26;
    v25[17] = v20;
    v25[18] = v22;
    v25[16] = v18;
    return _swift_task_switch(sub_100131894, 0, 0);
  }
  else
  {
    sub_1000E2310((void *)(*(void *)(v0 + 48) + 88), *(void *)(*(void *)(v0 + 48) + 112));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1001312E4;
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    return sub_1000F7410(v10, v9);
  }
}

uint64_t sub_1001312E4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    id v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    return _swift_task_switch(sub_10013146C, 0, 0);
  }
}

uint64_t sub_10013146C()
{
  *(void *)(v0 + 72) = *(void *)(v0 + 64);
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = [*(id *)(v0 + 32) clientID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 80) = v5;
  id v6 = [v1 altDSID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 88) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001315C4;
  uint64_t v11 = *(void *)(v0 + 48);
  v10[19] = v9;
  v10[20] = v11;
  v10[17] = v5;
  v10[18] = v7;
  uint8_t v10[16] = v3;
  return _swift_task_switch(sub_100131894, 0, 0);
}

uint64_t sub_1001315C4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100131734, 0, 0);
}

uint64_t sub_100131734()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  *(void *)(v1 + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs) = v0[13];
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void **)(v2 + 80);
  v0[2] = 0;
  unsigned int v4 = [v3 addSharedAccountWithCredential:v1 error:v0 + 2];
  uint64_t v5 = (void *)v0[2];
  id v6 = (void *)v0[9];
  if (v4)
  {
    id v7 = v5;
  }
  else
  {
    id v9 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10013186C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  uint8_t v5[16] = a1;
  return _swift_task_switch(sub_100131894, 0, 0);
}

uint64_t sub_100131894()
{
  uint64_t v16 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 10;
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  v1[21] = sub_1000D78F8(v3, (uint64_t)qword_100274490);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v1[17];
  if (v6)
  {
    uint64_t v8 = v1[16];
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)id v9 = 136315138;
    swift_bridgeObjectRetain();
    v1[10] = sub_100158C6C(v8, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fetcing all grouped apps for %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = *(void **)(v1[20] + 72);
  NSString v11 = String._bridgeToObjectiveC()();
  v1[22] = v11;
  NSString v12 = String._bridgeToObjectiveC()();
  v1[23] = v12;
  v1[2] = v1;
  v1[7] = v1 + 15;
  v1[3] = sub_100131B50;
  uint64_t v13 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_1000D91D4;
  v1[13] = &unk_10022D4C0;
  v1[14] = v13;
  [v10 fetchDeveloperTeamWithClientID:v11 withAltDSID:v12 completion:v2];
  return _swift_continuation_await(v1 + 2);
}

uint64_t sub_100131B50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 192) = v1;
  if (v1) {
    uint64_t v2 = sub_100131F6C;
  }
  else {
    uint64_t v2 = sub_100131C60;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100131C60()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 120);

  id v30 = v2;
  id v3 = [v2 apps];
  sub_1000F3304();
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v5 = 0;
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  uint64_t v7 = -1;
  uint64_t v8 = -1 << *(unsigned char *)(v4 + 32);
  if (-v8 < 64) {
    uint64_t v7 = ~(-1 << -(char)v8);
  }
  unint64_t v9 = v7 & v6;
  int64_t v32 = (unint64_t)(63 - v8) >> 6;
  if ((v7 & v6) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  while (2)
  {
    int64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return;
    }
    if (v12 < v32)
    {
      unint64_t v13 = *(void *)(v31 + 8 * v12);
      ++v5;
      if (v13) {
        goto LABEL_22;
      }
      int64_t v5 = v12 + 1;
      if (v12 + 1 >= v32) {
        break;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v5);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v5 = v12 + 2;
      if (v12 + 2 >= v32) {
        break;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v5);
      if (v13) {
        goto LABEL_22;
      }
      int64_t v5 = v12 + 3;
      if (v12 + 3 >= v32) {
        break;
      }
      unint64_t v13 = *(void *)(v31 + 8 * v5);
      if (v13)
      {
LABEL_22:
        unint64_t v9 = (v13 - 1) & v13;
        for (unint64_t i = __clz(__rbit64(v13)) + (v5 << 6); ; unint64_t i = v10 | (v5 << 6))
        {
          id v15 = *(id *)(*(void *)(v4 + 56) + 8 * i);
          id v16 = [v15 primaryClientID];
          if (!v16) {
            break;
          }
          uint64_t v17 = v16;
          uint64_t v19 = *(void *)(v0 + 128);
          uint64_t v18 = *(void *)(v0 + 136);
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v22 = v21;

          if (v20 == v19 && v22 == v18)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v24 & 1) == 0) {
              break;
            }
          }
          id v25 = [v15 clientID];
          Swift::Int v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::Int v28 = v27;

          sub_10013FC94(&v33, v26, v28);
          swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_7;
          }
LABEL_6:
          unint64_t v10 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }

        if (!v9) {
          continue;
        }
        goto LABEL_6;
      }
      int64_t v14 = v12 + 4;
      if (v14 < v32)
      {
        unint64_t v13 = *(void *)(v31 + 8 * v14);
        if (v13)
        {
          int64_t v5 = v14;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v5 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            goto LABEL_37;
          }
          if (v5 >= v32) {
            goto LABEL_33;
          }
          unint64_t v13 = *(void *)(v31 + 8 * v5);
          ++v14;
          if (v13) {
            goto LABEL_22;
          }
        }
      }
    }
    break;
  }
LABEL_33:
  swift_release();

  BOOL v29 = *(void (**)(void *))(v0 + 8);
  v29(&_swiftEmptySetSingleton);
}

uint64_t sub_100131F6C()
{
  NSString v11 = v0;
  uint64_t v1 = (void *)v0[23];
  uint64_t v2 = (void *)v0[22];
  swift_willThrow();
  swift_errorRelease();

  swift_bridgeObjectRetain_n();
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = v0[16];
    unint64_t v5 = v0[17];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[10] = sub_100158C6C(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "No matching team found for %s. Continuing...", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(&_swiftEmptySetSingleton);
}

uint64_t sub_10013212C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  uint8_t v6[8] = a4;
  void v6[5] = a1;
  v6[6] = a2;
  return _swift_task_switch(sub_1001321C4, 0, 0);
}

uint64_t sub_1001321C4()
{
  if (qword_10026F9C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 88) = sub_1000D78F8(v1, (uint64_t)qword_100274490);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching old keychain item..", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 48);

  uint64_t v7 = *(void **)(v5 + 80);
  *(void *)(v0 + 96) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 16) = 0;
  id v9 = [v7 shareTokenForAccount:v6 inGroup:v8 error:v0 + 16];

  uint64_t v10 = *(void **)(v0 + 16);
  if (v9)
  {
    NSString v11 = *(void **)(v0 + 40);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    *(void *)(v0 + 104) = v13;
    id v15 = v10;

    if ([v11 _simulateAccountSharingResponse])
    {
      id v16 = *(void **)(v0 + 72);
      uint64_t v17 = *(void **)(v0 + 48);
      swift_bridgeObjectRelease();
      id v18 = v17;
      id v19 = v16;
      uint64_t v20 = sub_100132E34();
      id v22 = sub_10012EEEC(v18, v19, v20, v21);
      uint64_t v23 = *(void **)(v0 + 48);

      char v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        Swift::Int v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::Int v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Simulated share token", v26, 2u);
        swift_slowDealloc();
      }

      *(void *)(v0 + 128) = v22;
      Swift::Int v27 = *(void **)(v0 + 40);
      id v28 = [*(id *)(v0 + 48) clientID];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      *(void *)(v0 + 136) = v31;
      id v32 = [v27 altDSID];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      *(void *)(v0 + 144) = v35;
      id v36 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v36;
      *id v36 = v0;
      v36[1] = sub_100132960;
      uint64_t v37 = *(void *)(v0 + 80);
      v36[19] = v35;
      v36[20] = v37;
      v36[17] = v31;
      v36[18] = v33;
      uint8_t v36[16] = v29;
      return _swift_task_switch(sub_100131894, 0, 0);
    }
    else
    {
      sub_1000E2310((void *)(*(void *)(v0 + 80) + 88), *(void *)(*(void *)(v0 + 80) + 112));
      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v40;
      *uint64_t v40 = v0;
      v40[1] = sub_100132658;
      uint64_t v42 = *(void *)(v0 + 64);
      uint64_t v41 = *(void *)(v0 + 72);
      uint64_t v44 = *(void *)(v0 + 48);
      uint64_t v43 = *(void *)(v0 + 56);
      return sub_1000F8308(v44, v41, v43, v42, v12, v14);
    }
  }
  else
  {
    id v38 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    unint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
}

uint64_t sub_100132658(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    return _swift_task_switch(sub_100132808, 0, 0);
  }
}

uint64_t sub_100132808()
{
  *(void *)(v0 + 128) = *(void *)(v0 + 120);
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = [*(id *)(v0 + 48) clientID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v0 + 136) = v5;
  id v6 = [v1 altDSID];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v0 + 144) = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100132960;
  uint64_t v11 = *(void *)(v0 + 80);
  v10[19] = v9;
  v10[20] = v11;
  v10[17] = v5;
  v10[18] = v7;
  uint8_t v10[16] = v3;
  return _swift_task_switch(sub_100131894, 0, 0);
}

uint64_t sub_100132960(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100132AD0, 0, 0);
}

uint64_t sub_100132AD0()
{
  *(void *)(v0[16] + OBJC_IVAR___AKSignInWithAppleSharedCredential_groupedAppsBundleIDs) = v0[20];
  swift_bridgeObjectRelease();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Removing old keychain item", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void *)v0[12];
  uint64_t v5 = v0[6];

  v0[3] = 0;
  unsigned int v6 = [v4 removeSharedAccount:v5 error:v0 + 3];
  uint64_t v7 = (void *)v0[3];
  if (v6)
  {
    id v8 = v7;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Removed old keychain item. Adding new keychain item with updated group.", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[16];
    uint64_t v13 = (void *)v0[12];

    v0[4] = 0;
    unsigned int v14 = [v13 addSharedAccountWithCredential:v12 error:v0 + 4];
    uint64_t v7 = (void *)v0[4];
    id v15 = (void *)v0[16];
    if (v14)
    {
      id v16 = v7;

      uint64_t v17 = (uint64_t (*)(void))v0[1];
      goto LABEL_10;
    }
  }
  else
  {
    id v15 = (void *)v0[16];
  }
  id v18 = v7;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
LABEL_10:
  return v17();
}

uint64_t sub_100132D24()
{
  sub_1000E2354(v0 + 32);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000E2354(v0 + 88);

  return _swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for AccountSharingController()
{
  return self;
}

unint64_t sub_100132DA8(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100132E34()
{
  unint64_t v0 = sub_100132DA8(0xFFFFuLL);
  unint64_t v1 = sub_100132DA8(0xFFFFuLL);
  sub_1000D70C8((uint64_t *)&unk_100271810);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1001B9C00;
  *(void *)(v2 + 56) = &type metadata for Int;
  *(void *)(v2 + 64) = &protocol witness table for Int;
  *(void *)(v2 + 32) = v0;
  *(void *)(v2 + 96) = &type metadata for Int;
  *(void *)(v2 + 104) = &protocol witness table for Int;
  *(void *)(v2 + 72) = v1;
  uint64_t v3 = String.init(format:_:)();
  uint64_t v5 = v4;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0x7261685374736554;
}

void sub_100132F40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  id v29 = a2;
  uint64_t v11 = sub_1000D70C8(&qword_100271878);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  unsigned int v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v15 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  id v19 = (void *)(v18 + v17);
  uint64_t v20 = v26;
  *id v19 = v25;
  v19[1] = v20;
  uint64_t v21 = (void *)(v18 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v28;
  *uint64_t v21 = v27;
  v21[1] = v22;
  aBlock[4] = sub_100135AEC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F3BA4;
  aBlock[3] = &unk_10022D620;
  uint64_t v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  [v29 getGroupByGroupID:v15 completion:v23];
  _Block_release(v23);
}

void sub_100133164(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    uint64_t v11 = a2;
    swift_errorRetain();
    if (qword_10026F9C0 == -1)
    {
LABEL_3:
      uint64_t v12 = type metadata accessor for Logger();
      sub_1000D78F8(v12, (uint64_t)qword_100274490);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        NSString v15 = (uint8_t *)swift_slowAlloc();
        v63[0] = swift_slowAlloc();
        *(_DWORD *)NSString v15 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_100158C6C(a3, a4, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error fetching information for group (%s)", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v63[0] = v11;
      sub_1000D70C8(&qword_100271878);
LABEL_24:
      CheckedContinuation.resume(throwing:)();
      return;
    }
LABEL_47:
    swift_once();
    goto LABEL_3;
  }
  if (!a1)
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_1000D78F8(v32, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100158C6C(a3, a4, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Current user is not part of the group (%s)", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for SignInWithAppleError(0);
    uint64_t v64 = -16010;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v64 = v63[0];
    sub_1000D70C8(&qword_100271878);
    goto LABEL_24;
  }
  uint64_t v18 = a6;
  if (a6 == a8 && a7 == a9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v60 = a4;
    id v19 = a1;
    id v20 = [v19 participants];
    sub_100100D68(0, &qword_100271848);
    unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v58 = a3;
    id v59 = v19;
    uint64_t v62 = v18;
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      a4 = _CocoaArrayWrapper.endIndex.getter();
      if (a4)
      {
LABEL_11:
        a3 = v21 & 0xC000000000000001;
        uint64_t v22 = 4;
        while (1)
        {
          uint64_t v11 = v22 - 4;
          id v24 = a3 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v21 + 8 * v22);
          uint64_t v25 = v24;
          uint64_t v26 = v22 - 3;
          if (__OFADD__(v11, 1)) {
            break;
          }
          id v27 = objc_msgSend(v24, "participantID", v58, v59);
          if (v27)
          {
            uint64_t v28 = v27;
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v31 = v30;

            if (v29 == 0xD000000000000010 && v31 == 0x80000001001C4ED0)
            {
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
LABEL_37:
              uint64_t v18 = v62;
              goto LABEL_38;
            }
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v23)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_37;
            }
          }

          ++v22;
          if (v26 == a4) {
            goto LABEL_49;
          }
        }
        __break(1u);
        goto LABEL_47;
      }
    }
    else
    {
      a4 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (a4) {
        goto LABEL_11;
      }
    }
LABEL_49:
    swift_bridgeObjectRelease_n();
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_1000D78F8(v54, (uint64_t)qword_100274490);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100158C6C(v62, a7, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100158C6C(v58, v60, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "No such participant (%s) in the group (%s)", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for SignInWithAppleError(0);
    uint64_t v64 = -16011;
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v64 = v63[0];
    sub_1000D70C8(&qword_100271878);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    unint64_t v36 = a4;
    id v37 = a1;
    id v38 = [v37 participants];
    sub_100100D68(0, &qword_100271848);
    unint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100135BCC(v39, v18, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_38:
      id v46 = [v25 handle];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;

      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_1000D78F8(v50, (uint64_t)qword_100274490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        v63[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_100158C6C(v18, a7, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v53 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_100158C6C(v47, v49, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Handle for participant(%s - %s", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      v63[0] = v47;
      v63[1] = v49;
      sub_1000D70C8(&qword_100271878);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      uint64_t v40 = v18;
      uint64_t v41 = a3;
      if (qword_10026F9C0 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_1000D78F8(v42, (uint64_t)qword_100274490);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        v63[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_100158C6C(v40, a7, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v45 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_100158C6C(v41, v36, v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "No such participant (%s) in the group (%s)", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for SignInWithAppleError(0);
      uint64_t v64 = -16011;
      sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
      sub_1000E22B8();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v64 = v63[0];
      sub_1000D70C8(&qword_100271878);
      CheckedContinuation.resume(throwing:)();
    }
  }
}

uint64_t sub_100133FA8(int a1, int a2, int a3, void *aBlock, void *a5)
{
  void v5[4] = a5;
  void v5[5] = _Block_copy(aBlock);
  v5[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[7] = v7;
  v5[8] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[9] = v8;
  v5[10] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[11] = v9;
  id v10 = a5;
  return _swift_task_switch(sub_10013405C, 0, 0);
}

uint64_t sub_10013405C()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  long long v9 = *(_OWORD *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 96) = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v3;
  *(_OWORD *)(v6 + 40) = v9;
  *(void *)(v6 + 56) = v2;
  *(void *)(v6 + 64) = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100134188;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000003DLL, 0x80000001001C4E60, sub_1001359D4, v6, &type metadata for String);
}

uint64_t sub_100134188()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100134370;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001342A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001342A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, NSString, void))v2)[2](v2, v1, 0);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100134370()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  NSString v1 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, void, void *))v2)[2](v2, 0, v1);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10013444C()
{
  v1[18] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[19] = v2;
  v1[20] = *(void *)(v2 - 8);
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_10013450C, 0, 0);
}

uint64_t sub_10013450C()
{
  NSString v1 = (void *)v0[18];
  id v2 = [self all];
  v0[22] = v2;
  v0[2] = v0;
  v0[7] = v0 + 17;
  v0[3] = sub_100134640;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100134D44;
  v0[13] = &unk_10022D568;
  v0[14] = v3;
  [v1 getGroupsWithRequest:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100134640()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    id v2 = sub_100134CC8;
  }
  else {
    id v2 = sub_100134750;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100134750()
{
  uint64_t v64 = v0;
  uint64_t v1 = *(void **)(v0 + 176);
  unint64_t v2 = *(void *)(v0 + 136);

  if (v2 >> 62)
  {
LABEL_57:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      unint64_t v4 = 0;
      unint64_t v58 = v2 & 0xC000000000000001;
      unint64_t v55 = v2 + 32;
      uint64_t v56 = v2 & 0xFFFFFFFFFFFFFF8;
      uint64_t v5 = &_swiftEmptyDictionarySingleton;
      uint64_t v57 = v3;
      while (1)
      {
        if (v58)
        {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v8 = __OFADD__(v4, 1);
          unint64_t v9 = v4 + 1;
          if (v8) {
            goto LABEL_52;
          }
        }
        else
        {
          if (v4 >= *(void *)(v56 + 16)) {
            goto LABEL_56;
          }
          id v7 = *(id *)(v55 + 8 * v4);
          BOOL v8 = __OFADD__(v4, 1);
          unint64_t v9 = v4 + 1;
          if (v8)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
        }
        id v60 = v7;
        unint64_t v2 = (unint64_t)[v7 participants];
        sub_100100D68(0, &qword_100271848);
        uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((unint64_t)v10 >> 62)
        {
          if (v10 < 0) {
            unint64_t v2 = v10;
          }
          else {
            unint64_t v2 = v10 & 0xFFFFFFFFFFFFFF8;
          }
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        Swift::Int v61 = (Swift::Int)v5;
        unint64_t v59 = v9;
        if (v11)
        {
          if (v11 < 1) {
            goto LABEL_54;
          }
          uint64_t v12 = 0;
          uint64_t v13 = _swiftEmptyArrayStorage;
          do
          {
            if ((v10 & 0xC000000000000001) != 0) {
              id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v14 = *(id *)(v10 + 8 * v12 + 32);
            }
            NSString v15 = v14;
            id v16 = [v14 participantID];
            if (v16)
            {
              unint64_t v17 = v16;
              uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v20 = v19;

              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v13 = sub_1001354D4(0, v13[2] + 1, 1, v13);
              }
              unint64_t v22 = v13[2];
              unint64_t v21 = v13[3];
              if (v22 >= v21 >> 1) {
                uint64_t v13 = sub_1001354D4((void *)(v21 > 1), v22 + 1, 1, v13);
              }
              v13[2] = v22 + 1;
              char v23 = &v13[2 * v22];
              void v23[4] = v18;
              void v23[5] = v20;
            }
            else
            {
            }
            ++v12;
          }
          while (v11 != v12);
        }
        else
        {
          uint64_t v13 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease_n();
        id v24 = [v60 groupID];
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        uint64_t v28 = Set.init(minimumCapacity:)();
        uint64_t v62 = v28;
        uint64_t v29 = v13[2];
        if (v29)
        {
          uint64_t v30 = v13 + 5;
          do
          {
            Swift::Int v31 = *(v30 - 1);
            Swift::Int v32 = *v30;
            swift_bridgeObjectRetain();
            sub_10013FC94((Swift::Int *)&v63, v31, v32);
            swift_bridgeObjectRelease();
            v30 += 2;
            --v29;
          }
          while (v29);
          uint64_t v33 = v62;
        }
        else
        {
          uint64_t v33 = v28;
        }
        swift_bridgeObjectRelease();
        uint64_t v5 = (void *)v61;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v63 = (void *)v61;
        unint64_t v2 = sub_10014A0BC(v25, v27);
        uint64_t v36 = *(void *)(v61 + 16);
        BOOL v37 = (v35 & 1) == 0;
        uint64_t v38 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_53;
        }
        char v39 = v35;
        if (*(void *)(v61 + 24) >= v38)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v35) {
              goto LABEL_4;
            }
          }
          else
          {
            sub_10013F930();
            uint64_t v5 = v63;
            if (v39) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          sub_10013E710(v38, isUniquelyReferenced_nonNull_native);
          uint64_t v5 = v63;
          unint64_t v40 = sub_10014A0BC(v25, v27);
          if ((v39 & 1) != (v41 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v2 = v40;
          if (v39)
          {
LABEL_4:
            uint64_t v6 = v5[7];
            v2 *= 8;
            swift_bridgeObjectRelease();
            *(void *)(v6 + v2) = v33;
            goto LABEL_5;
          }
        }
        v5[(v2 >> 6) + 8] |= 1 << v2;
        uint64_t v42 = (uint64_t *)(v5[6] + 16 * v2);
        *uint64_t v42 = v25;
        v42[1] = v27;
        *(void *)(v5[7] + 8 * v2) = v33;
        uint64_t v43 = v5[2];
        BOOL v8 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v8) {
          goto LABEL_55;
        }
        _DWORD v5[2] = v44;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        unint64_t v4 = v59;
        if (v59 == v57) {
          goto LABEL_59;
        }
      }
    }
  }
  uint64_t v5 = &_swiftEmptyDictionarySingleton;
LABEL_59:
  uint64_t v46 = *(void *)(v54 + 160);
  uint64_t v47 = *(void *)(v54 + 168);
  uint64_t v48 = *(void *)(v54 + 152);
  swift_bridgeObjectRelease();
  unint64_t v49 = (objc_class *)type metadata accessor for SharedGroupsMembershipInfo();
  uint64_t v50 = (char *)objc_allocWithZone(v49);
  *(void *)&v50[OBJC_IVAR___AKSharedGroupsMembershipInfo_groupsAndParticipants] = v5;
  uint64_t v51 = v50;
  static Date.now.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(&v51[OBJC_IVAR___AKSharedGroupsMembershipInfo_savedDate], v47, v48);

  *(void *)(v54 + 120) = v51;
  *(void *)(v54 + 128) = v49;
  id v52 = objc_msgSendSuper2((objc_super *)(v54 + 120), "init");
  swift_task_dealloc();
  uint64_t v53 = *(uint64_t (**)(id))(v54 + 8);
  return v53(v52);
}

uint64_t sub_100134CC8()
{
  uint64_t v1 = *(void **)(v0 + 176);
  swift_willThrow();

  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100134D44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000D70C8(&qword_100270930);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    sub_100100D68(0, &qword_100271850);
    **(void **)(*(void *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100134F88(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_100135030;
  return sub_10013444C();
}

uint64_t sub_100135030(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  BOOL v8 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    unint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);

    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1001351D0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100135210()
{
  unint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000D84E8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100271830 + dword_100271830);
  return v5(v2, v3);
}

uint64_t sub_1001352C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000D84E8;
  BOOL v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

char *sub_100135390(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1001353B8(a1, a2, a3, a4, (uint64_t *)&unk_100270530, &qword_100270978);
}

char *sub_1001353A4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1001353B8(a1, a2, a3, a4, (uint64_t *)&unk_100271D00, &qword_100270948);
}

char *sub_1001353B8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_1000D70C8(a5);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 3);
      id v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      id v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[8 * v11 + 32]) {
          memmove(v16, a4 + 32, 8 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1001355E4(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_1001354D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000D70C8(&qword_100270970);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001356EC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001355E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_1000D70C8(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001356EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001357E0()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100135838()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  unint64_t v5 = (void *)v0[5];
  unint64_t v6 = (void *)v0[6];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *unint64_t v7 = v1;
  v7[1] = sub_1000D84E8;
  uint64_t v8 = (uint64_t (*)(int, int, int, void *, void *))((char *)&dword_100271858 + dword_100271858);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_100135908(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_1000D7208;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100271F68 + dword_100271F68);
  return v8(a1, v4, v5, v6);
}

void sub_1001359D4(uint64_t a1)
{
  sub_100132F40(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1001359E8()
{
  uint64_t v1 = sub_1000D70C8(&qword_100271878);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100135AEC(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1000D70C8(&qword_100271878) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100133164(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100135BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100135BC4()
{
  return swift_release();
}

void *sub_100135BCC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 participantID];
      if (v10)
      {
        int64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100135D60()
{
  uint64_t v1 = *(void **)(v0 + 16);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 authKitAccountWithAltDSID:v2];

  if (v3)
  {
    sub_100135EE4((uint64_t)v3);
  }
  else
  {
    if (qword_10026F9C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000D78F8(v4, (uint64_t)qword_100274490);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ineligible to share account - No authkit account for altDSID", v7, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SignInWithAppleError(0);
    sub_10010F760((uint64_t)_swiftEmptyArrayStorage);
    sub_1000E22B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return 1;
}