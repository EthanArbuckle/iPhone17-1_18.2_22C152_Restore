uint64_t sub_2570AF26C(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v11;
  char v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x263EF8340];
  v2 = [MEMORY[0x263F08850] defaultManager];
  if (*((char *)a1 + 23) >= 0) {
    v3 = a1;
  }
  else {
    v3 = (uint64_t *)*a1;
  }
  v4 = [NSString stringWithUTF8String:v3];
  v12 = 0;
  if ([v2 fileExistsAtPath:v4 isDirectory:&v12])
  {
    if (!v12)
    {
LABEL_15:
      v8 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    v5 = [v2 createDirectoryAtPath:v4 withIntermediateDirectories:1 attributes:0 error:&v11];
    v6 = v11;
    v7 = v6;
    if ((v5 & 1) == 0)
    {
      if (qword_269FE51F8 != -1) {
        dispatch_once(&qword_269FE51F8, &unk_27063FB38);
      }
      v9 = qword_269FE51F0;
      if (os_log_type_enabled((os_log_t)qword_269FE51F0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        v14 = v4;
        v15 = 2114;
        v16 = v7;
        _os_log_impl(&dword_2570AE000, v9, OS_LOG_TYPE_INFO, "Unable to create directory at path: %{public}@, error, %{public}@", buf, 0x16u);
      }

      goto LABEL_15;
    }
  }
  v8 = 1;
LABEL_16:

  return v8;
}

void sub_2570AF3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2570AF41C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = [MEMORY[0x263F08850] defaultManager];
  v7 = NSURL;
  if (*((char *)a1 + 23) >= 0) {
    v8 = a1;
  }
  else {
    v8 = (uint64_t *)*a1;
  }
  v9 = [NSString stringWithUTF8String:v8];
  v10 = [v7 fileURLWithPath:v9];
  v40[0] = 0;
  v34 = [v6 contentsOfDirectoryAtURL:v10 includingPropertiesForKeys:0 options:4 error:v40];
  id v35 = v40[0];

  if (v35)
  {
    if (qword_269FE51F8 != -1) {
      dispatch_once(&qword_269FE51F8, &unk_27063FB38);
    }
    v11 = qword_269FE51F0;
    if (os_log_type_enabled((os_log_t)qword_269FE51F0, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        v12 = a1;
      }
      else {
        v12 = (uint64_t *)*a1;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v35;
      _os_log_impl(&dword_2570AE000, v11, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
  else
  {
    if (*((char *)a2 + 23) >= 0) {
      v13 = a2;
    }
    else {
      v13 = (uint64_t *)*a2;
    }
    v14 = objc_msgSend(NSString, "stringWithUTF8String:", v13, v34);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v15 = v34;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v36 objects:v41 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v37 != v17) {
            objc_enumerationMutation(v15);
          }
          v19 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          v20 = [v19 pathExtension];
          BOOL v21 = [v20 compare:v14 options:1] == 0;

          if (v21)
          {
            v22 = (char *)[v19 fileSystemRepresentation];
            unint64_t v24 = a3[1];
            unint64_t v23 = a3[2];
            if (v24 >= v23)
            {
              unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *a3) >> 3);
              unint64_t v27 = v26 + 1;
              if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2570AFD0C();
              }
              unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
              if (2 * v28 > v27) {
                unint64_t v27 = 2 * v28;
              }
              if (v28 >= 0x555555555555555) {
                unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v29 = v27;
              }
              v44 = a3 + 2;
              if (v29) {
                v30 = (char *)sub_2570AFD24((uint64_t)(a3 + 2), v29);
              }
              else {
                v30 = 0;
              }
              *(void *)buf = v30;
              *(void *)&buf[8] = &v30[24 * v26];
              *(void *)&buf[16] = *(void *)&buf[8];
              v43 = &v30[24 * v29];
              sub_2570AFB04(*(void **)&buf[8], v22);
              *(void *)&buf[16] += 24;
              sub_2570AFC94(a3, buf);
              uint64_t v25 = a3[1];
              sub_2570AFE8C((uint64_t)buf);
            }
            else
            {
              sub_2570AFB04((void *)a3[1], v22);
              uint64_t v25 = v24 + 24;
              a3[1] = v24 + 24;
            }
            a3[1] = v25;
          }
        }
        uint64_t v16 = [v15 countByEnumeratingWithState:&v36 objects:v41 count:16];
      }
      while (v16);
    }

    v31 = (__n128 *)a3[1];
    unint64_t v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *a3) >> 3));
    if (v31 == (__n128 *)*a3) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    sub_2570AFF1C(*a3, v31, v33, 1);
  }
}

void sub_2570AF7E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  sub_2570AFA60((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2570AF884(uint64_t *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v2 = [MEMORY[0x263F08850] defaultManager];
  if (*((char *)a1 + 23) >= 0) {
    v3 = a1;
  }
  else {
    v3 = (uint64_t *)*a1;
  }
  v4 = [NSString stringWithUTF8String:v3];
  id v9 = 0;
  char v5 = [v2 removeItemAtPath:v4 error:&v9];
  id v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_269FE51F8 != -1) {
      dispatch_once(&qword_269FE51F8, &unk_27063FB38);
    }
    v7 = qword_269FE51F0;
    if (os_log_type_enabled((os_log_t)qword_269FE51F0, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        v8 = a1;
      }
      else {
        v8 = (uint64_t *)*a1;
      }
      *(_DWORD *)buf = 136446466;
      v11 = v8;
      __int16 v12 = 2114;
      id v13 = v6;
      _os_log_impl(&dword_2570AE000, v7, OS_LOG_TYPE_INFO, "Unable to delete file %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
}

void sub_2570AF9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2570AFA08()
{
  qword_269FE51F0 = (uint64_t)os_log_create("com.apple.MotionSensorLogging", "MSL");
  return MEMORY[0x270F9A758]();
}

void sub_2570AFA4C(void *a1)
{
}

void sub_2570AFA60(void ***a1)
{
  v2 = *a1;
  if (*v2)
  {
    sub_2570AFAB4((uint64_t *)v2);
    v3 = **a1;
    operator delete(v3);
  }
}

void sub_2570AFAB4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_2570AFB04(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2570AFBB8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    id v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    id v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_2570AFBB8()
{
}

void sub_2570AFBD0(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2570AFC2C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265426808, MEMORY[0x263F8C060]);
}

void sub_2570AFC18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2570AFC2C(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_2570AFC60()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t sub_2570AFC94(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2570AFD6C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_2570AFD0C()
{
}

void *sub_2570AFD24(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2570AFC60();
  }
  return operator new(24 * a2);
}

uint64_t sub_2570AFD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_2570AFE0C((uint64_t)v12);
  return a6;
}

uint64_t sub_2570AFE0C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2570AFE44(a1);
  }
  return a1;
}

void sub_2570AFE44(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_2570AFE8C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2570AFEC4(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_2570AFF1C(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  while (2)
  {
    long long v10 = &a2[-2].n128_u64[1];
    v98 = a2 - 3;
    v100 = a2;
    v11 = &a2[-5].n128_u64[1];
    __int16 v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (sub_2570B095C(v10, (void *)a1))
                {
                  __n128 v43 = *(__n128 *)a1;
                  unint64_t v102 = *(void *)(a1 + 16);
                  __n128 v101 = v43;
                  long long v44 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v44;
                  __n128 v45 = v101;
                  v10[2] = v102;
                  *(__n128 *)long long v10 = v45;
                }
                break;
              case 3:
                sub_2570B09C8((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4:
                sub_2570B0CE0((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5:
                sub_2570B0DB0((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            v46 = (__n128 *)(a1 + 24);
            BOOL v48 = (__n128 *)a1 == a2 || v46 == a2;
            if (a4)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  v51 = n128_u64;
                  n128_u64 = v46->n128_u64;
                  if (sub_2570B095C(v46, v51))
                  {
                    __n128 v52 = *(__n128 *)n128_u64;
                    unint64_t v102 = n128_u64[2];
                    __n128 v101 = v52;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v53 = v49;
                    while (1)
                    {
                      uint64_t v54 = a1 + v53;
                      *(_OWORD *)(v54 + 24) = *(_OWORD *)(a1 + v53);
                      *(void *)(v54 + 40) = *(void *)(a1 + v53 + 16);
                      *(unsigned char *)(v54 + 23) = 0;
                      *(unsigned char *)uint64_t v54 = 0;
                      if (!v53) {
                        break;
                      }
                      v53 -= 24;
                      if (!sub_2570B095C(&v101, (void *)(v53 + a1)))
                      {
                        uint64_t v55 = a1 + v53 + 24;
                        goto LABEL_88;
                      }
                    }
                    uint64_t v55 = a1;
LABEL_88:
                    __n128 v56 = v101;
                    *(void *)(v55 + 16) = v102;
                    *(__n128 *)uint64_t v55 = v56;
                  }
                  v46 = (__n128 *)(n128_u64 + 3);
                  v49 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v48)
            {
              unint64_t v91 = a1 - 24;
              do
              {
                v92 = (void *)a1;
                a1 = (unint64_t)v46;
                if (sub_2570B095C(v46, v92))
                {
                  __n128 v93 = *(__n128 *)a1;
                  unint64_t v102 = *(void *)(a1 + 16);
                  __n128 v101 = v93;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v94 = v91;
                  do
                  {
                    *(_OWORD *)(v94 + 48) = *(_OWORD *)(v94 + 24);
                    *(void *)(v94 + 64) = *(void *)(v94 + 40);
                    *(unsigned char *)(v94 + 47) = 0;
                    *(unsigned char *)(v94 + 24) = 0;
                    BOOL v95 = sub_2570B095C(&v101, (void *)v94);
                    v94 -= 24;
                  }
                  while (v95);
                  __n128 v96 = v101;
                  *(void *)(v94 + 64) = v102;
                  *(__n128 *)(v94 + 48) = v96;
                }
                v46 = (__n128 *)(a1 + 24);
                v91 += 24;
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v57 = (unint64_t)(v14 - 2) >> 1;
              int64_t v58 = v57;
              do
              {
                int64_t v59 = v58;
                if (v57 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  unint64_t v61 = a1 + 24 * v60;
                  if (2 * v58 + 2 < v14 && sub_2570B095C((void *)(a1 + 24 * v60), (void *)(v61 + 24)))
                  {
                    v61 += 24;
                    uint64_t v60 = 2 * v59 + 2;
                  }
                  v62 = (__n128 *)(a1 + 24 * v59);
                  if (!sub_2570B095C((void *)v61, v62))
                  {
                    __n128 v63 = *v62;
                    unint64_t v102 = v62[1].n128_u64[0];
                    __n128 v101 = v63;
                    v62->n128_u64[1] = 0;
                    v62[1].n128_u64[0] = 0;
                    v62->n128_u64[0] = 0;
                    do
                    {
                      v64 = (__n128 *)v61;
                      __n128 v65 = *(__n128 *)v61;
                      v62[1].n128_u64[0] = *(void *)(v61 + 16);
                      __n128 *v62 = v65;
                      *(unsigned char *)(v61 + 23) = 0;
                      *(unsigned char *)unint64_t v61 = 0;
                      if (v57 < v60) {
                        break;
                      }
                      uint64_t v66 = (2 * v60) | 1;
                      unint64_t v61 = a1 + 24 * v66;
                      uint64_t v67 = 2 * v60 + 2;
                      if (v67 < v14 && sub_2570B095C((void *)(a1 + 24 * v66), (void *)(v61 + 24)))
                      {
                        v61 += 24;
                        uint64_t v66 = v67;
                      }
                      v62 = v64;
                      uint64_t v60 = v66;
                    }
                    while (!sub_2570B095C((void *)v61, &v101));
                    __n128 v68 = v101;
                    v64[1].n128_u64[0] = v102;
                    __n128 *v64 = v68;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              int64_t v69 = v13 / 0x18uLL;
              v70 = v100;
              do
              {
                uint64_t v71 = 0;
                v72 = v70;
                unint64_t v97 = *(void *)a1;
                v103.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v103.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v99 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v73 = v69 - 2;
                if (v69 < 2) {
                  uint64_t v73 = v69 - 1;
                }
                uint64_t v74 = v73 >> 1;
                unint64_t v75 = a1;
                do
                {
                  uint64_t v76 = v75 + 24 * v71 + 24;
                  uint64_t v77 = 2 * v71;
                  uint64_t v71 = (2 * v71) | 1;
                  uint64_t v78 = v77 + 2;
                  if (v77 + 2 < v69 && sub_2570B095C((void *)v76, (void *)(v76 + 24)))
                  {
                    v76 += 24;
                    uint64_t v71 = v78;
                  }
                  if (*(char *)(v75 + 23) < 0) {
                    operator delete(*(void **)v75);
                  }
                  __n128 v79 = *(__n128 *)v76;
                  *(void *)(v75 + 16) = *(void *)(v76 + 16);
                  *(__n128 *)unint64_t v75 = v79;
                  *(unsigned char *)(v76 + 23) = 0;
                  *(unsigned char *)uint64_t v76 = 0;
                  unint64_t v75 = v76;
                }
                while (v71 <= v74);
                v70 = (__n128 *)((char *)v72 - 24);
                if ((__int8 *)v76 == &v72[-2].n128_i8[8])
                {
                  *(void *)uint64_t v76 = v97;
                  uint64_t v89 = *(uint64_t *)((char *)v103.n128_i64 + 7);
                  *(void *)(v76 + 8) = v103.n128_u64[0];
                  *(void *)(v76 + 15) = v89;
                  *(unsigned char *)(v76 + 23) = v99;
                }
                else
                {
                  __n128 v80 = *v70;
                  *(void *)(v76 + 16) = v72[-1].n128_u64[1];
                  *(__n128 *)uint64_t v76 = v80;
                  v72[-2].n128_u64[1] = v97;
                  unint64_t v81 = v103.n128_u64[0];
                  *(unint64_t *)((char *)v72[-1].n128_u64 + 7) = *(unint64_t *)((char *)v103.n128_u64 + 7);
                  v72[-1].n128_u64[0] = v81;
                  v72[-1].n128_u8[15] = v99;
                  uint64_t v82 = v76 - a1 + 24;
                  if (v82 >= 25)
                  {
                    unint64_t v83 = (v82 / 0x18uLL - 2) >> 1;
                    unint64_t v84 = a1 + 24 * v83;
                    if (sub_2570B095C((void *)v84, (void *)v76))
                    {
                      __n128 v85 = *(__n128 *)v76;
                      unint64_t v102 = *(void *)(v76 + 16);
                      __n128 v101 = v85;
                      *(void *)(v76 + 8) = 0;
                      *(void *)(v76 + 16) = 0;
                      *(void *)uint64_t v76 = 0;
                      do
                      {
                        uint64_t v86 = v84;
                        long long v87 = *(_OWORD *)v84;
                        *(void *)(v76 + 16) = *(void *)(v84 + 16);
                        *(_OWORD *)uint64_t v76 = v87;
                        *(unsigned char *)(v84 + 23) = 0;
                        *(unsigned char *)unint64_t v84 = 0;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        unint64_t v84 = a1 + 24 * v83;
                        uint64_t v76 = v86;
                      }
                      while (sub_2570B095C((void *)v84, &v101));
                      __n128 v88 = v101;
                      *(void *)(v86 + 16) = v102;
                      *(__n128 *)uint64_t v86 = v88;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = (void *)(a1 + 24 * ((unint64_t)v14 >> 1));
          if ((unint64_t)v13 < 0xC01)
          {
            sub_2570B09C8(v16, (void *)a1, v10);
          }
          else
          {
            sub_2570B09C8((void *)a1, v16, v10);
            uint64_t v17 = 3 * v15;
            sub_2570B09C8((void *)(a1 + 24), (void *)(a1 + 8 * v17 - 24), v98);
            sub_2570B09C8((void *)(a1 + 48), (void *)(a1 + 24 + 8 * v17), v11);
            sub_2570B09C8((void *)(a1 + 8 * v17 - 24), v16, (void *)(a1 + 24 + 8 * v17));
            __n128 v18 = *(__n128 *)a1;
            unint64_t v102 = *(void *)(a1 + 16);
            __n128 v101 = v18;
            uint64_t v19 = v16[2];
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v19;
            __n128 v20 = v101;
            v16[2] = v102;
            *(__n128 *)uint64_t v16 = v20;
          }
          --a3;
          if ((a4 & 1) != 0 || sub_2570B095C((void *)(a1 - 24), (void *)a1)) {
            break;
          }
          __n128 v33 = *(__n128 *)a1;
          unint64_t v104 = *(void *)(a1 + 16);
          __n128 v103 = v33;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (sub_2570B095C(&v103, v10))
          {
            __int16 v12 = (__n128 *)a1;
            do
              __int16 v12 = (__n128 *)((char *)v12 + 24);
            while (!sub_2570B095C(&v103, v12));
          }
          else
          {
            v34 = (__n128 *)(a1 + 24);
            do
            {
              __int16 v12 = v34;
              if (v34 >= a2) {
                break;
              }
              BOOL v35 = sub_2570B095C(&v103, v34);
              v34 = (__n128 *)((char *)v12 + 24);
            }
            while (!v35);
          }
          long long v36 = a2;
          if (v12 < a2)
          {
            long long v36 = a2;
            do
              long long v36 = (__n128 *)((char *)v36 - 24);
            while (sub_2570B095C(&v103, v36));
          }
          while (v12 < v36)
          {
            __n128 v37 = *v12;
            unint64_t v102 = v12[1].n128_u64[0];
            __n128 v101 = v37;
            __n128 v38 = *v36;
            v12[1].n128_u64[0] = v36[1].n128_u64[0];
            __n128 *v12 = v38;
            __n128 v39 = v101;
            v36[1].n128_u64[0] = v102;
            *long long v36 = v39;
            do
              __int16 v12 = (__n128 *)((char *)v12 + 24);
            while (!sub_2570B095C(&v103, v12));
            do
              long long v36 = (__n128 *)((char *)v36 - 24);
            while (sub_2570B095C(&v103, v36));
          }
          v40 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v41 = *(_OWORD *)v40;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v41;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v42 = v103;
          v12[-1].n128_u64[1] = v104;
          *(__n128 *)v40 = v42;
        }
        uint64_t v21 = 0;
        __n128 v22 = *(__n128 *)a1;
        unint64_t v104 = *(void *)(a1 + 16);
        __n128 v103 = v22;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        do
          v21 += 24;
        while (sub_2570B095C((void *)(v21 + a1), &v103));
        unint64_t v23 = a1 + v21;
        unint64_t v24 = v100;
        if (v21 == 24)
        {
          unint64_t v24 = v100;
          do
          {
            if (v23 >= (unint64_t)v24) {
              break;
            }
            unint64_t v24 = (__n128 *)((char *)v24 - 24);
          }
          while (!sub_2570B095C(v24, &v103));
        }
        else
        {
          do
            unint64_t v24 = (__n128 *)((char *)v24 - 24);
          while (!sub_2570B095C(v24, &v103));
        }
        __int16 v12 = (__n128 *)(a1 + v21);
        if (v23 < (unint64_t)v24)
        {
          uint64_t v25 = v24;
          do
          {
            __n128 v26 = *v12;
            unint64_t v102 = v12[1].n128_u64[0];
            __n128 v101 = v26;
            __n128 v27 = *v25;
            v12[1].n128_u64[0] = v25[1].n128_u64[0];
            __n128 *v12 = v27;
            __n128 v28 = v101;
            v25[1].n128_u64[0] = v102;
            *uint64_t v25 = v28;
            do
              __int16 v12 = (__n128 *)((char *)v12 + 24);
            while (sub_2570B095C(v12, &v103));
            do
              uint64_t v25 = (__n128 *)((char *)v25 - 24);
            while (!sub_2570B095C(v25, &v103));
          }
          while (v12 < v25);
        }
        unint64_t v29 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v30 = *(_OWORD *)v29;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v30;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v31 = v103;
        v12[-1].n128_u64[1] = v104;
        *(__n128 *)unint64_t v29 = v31;
        BOOL v4 = v23 >= (unint64_t)v24;
        a2 = v100;
        if (v4) {
          break;
        }
LABEL_36:
        sub_2570AFF1C(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v32 = sub_2570B0AE8((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (sub_2570B0AE8(v12, v100)) {
        break;
      }
      if (!v32) {
        goto LABEL_36;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v32) {
      continue;
    }
    break;
  }
}

BOOL sub_2570B095C(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

BOOL sub_2570B09C8(void *a1, void *a2, void *a3)
{
  BOOL v6 = sub_2570B095C(a2, a1);
  BOOL result = sub_2570B095C(a3, a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = a1[2];
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      uint64_t v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      BOOL result = sub_2570B095C(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    uint64_t v11 = a2[2];
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    BOOL result = sub_2570B095C(a2, a1);
    if (result)
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

BOOL sub_2570B0AE8(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 24);
      if (sub_2570B095C(&a2[-2].n128_u64[1], a1))
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      sub_2570B09C8(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      sub_2570B0CE0(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      sub_2570B0DB0(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      uint64_t v10 = a1 + 3;
      sub_2570B09C8(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_2570B095C(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      unint64_t v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!sub_2570B095C(&v17, (void *)v15 + 3))
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    uint64_t v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

__n128 sub_2570B0CE0(__n128 *a1, void *a2, void *a3, void *a4)
{
  sub_2570B09C8(a1, a2, a3);
  if (sub_2570B095C(a4, a3))
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (sub_2570B095C(a3, a2))
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (sub_2570B095C(a2, a1))
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 sub_2570B0DB0(__n128 *a1, void *a2, void *a3, void *a4, void *a5)
{
  sub_2570B0CE0(a1, a2, a3, a4);
  if (sub_2570B095C(a5, a4))
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (sub_2570B095C(a4, a3))
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (sub_2570B095C(a3, a2))
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (sub_2570B095C(a2, a1))
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

double sub_2570B0EBC(unint64_t a1)
{
  double v2 = *(double *)&qword_269FE5250;
  if (*(double *)&qword_269FE5250 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v5 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v5;
      }
      while (denom);
    }
    else
    {
      uint32_t v5 = info.numer;
    }
    unsigned int v6 = 1000000000;
    uint32_t v7 = info.numer / v5;
    do
    {
      uint32_t v8 = v7;
      uint32_t v7 = v6;
      unsigned int v6 = v8 % v6;
    }
    while (v6);
    double v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_269FE5250 = v2;
  }
  return v2 * (double)a1;
}

CMMsl::Writer *CMMsl::Writer::Writer(CMMsl::Writer *this)
{
  *(void *)this = 0;
  double v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *((void *)this + 1) = v2;
  int v3 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, v2);
  *((void *)this + 2) = v3;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 300;
  *((_DWORD *)this + 10) = -1;
  uint64_t v4 = MEMORY[0x263EF8330];
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  handler[0] = v4;
  handler[1] = 0x40000000;
  handler[2] = sub_2570B1080;
  handler[3] = &unk_265426870;
  handler[4] = this;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*((dispatch_object_t *)this + 2));
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  deflateInit_((z_streamp)((char *)this + 80), -1, "1.2.12", 112);
  return this;
}

void sub_2570B1080(uint64_t a1)
{
}

void CMMsl::Writer::closeSensRecord(CMMsl::Writer *this)
{
  uint64_t v1 = (char *)this + 56;
  if (*((void *)this + 7))
  {
    int v3 = (z_stream *)((char *)this + 80);
    while (1)
    {
      int v4 = deflate(v3, 4);
      if (v4) {
        break;
      }
      CMMsl::Writer::growZlibStream((void **)this);
    }
    if (v4 == 1)
    {
      uint64_t v5 = *((void *)this + 15);
      uint64_t v6 = v5 + 28;
      size_t v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      uint32_t v8 = (_DWORD *)*((void *)this + 7);
      v8[3] = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *(unsigned char *)(*(void *)v1 + v6++) = 0;
        while (v7 != v6);
        uint32_t v8 = *(_DWORD **)v1;
      }
      if (*(void *)this)
      {
        (*(void (**)(void, _DWORD *, size_t))(**(void **)this + 24))(*(void *)this, v8, v7);
        free(*(void **)v1);
      }
      else
      {
        uint64_t v9 = *((void *)this + 1);
        destructor[0] = MEMORY[0x263EF8330];
        destructor[1] = 0x40000000;
        destructor[2] = sub_2570B1BD0;
        destructor[3] = &unk_265426978;
        destructor[4] = v8;
        long long v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write(*((dispatch_io_t *)this + 3), *((void *)this + 6), v10, *((dispatch_queue_t *)this + 1), &unk_27063FB58);
        dispatch_release(v10);
      }
      *((void *)this + 6) += v7;
      *((void *)v1 + 1) = 0;
      *((void *)v1 + 2) = 0;
      *(void *)uint64_t v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * *((void *)this + 4)) >> 1);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "zstream status? Msl %d\n", v4);
    }
  }
}

void CMMsl::Writer::setFlushTimeoutSeconds(CMMsl::Writer *this, uint64_t a2)
{
  double v2 = *((void *)this + 1);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = sub_2570B12CC;
  v3[3] = &unk_265426890;
  v3[4] = this;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_2570B12CC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1) {
    __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
  }
  *(void *)(v1 + 32) = *(void *)(result + 40);
  return result;
}

void CMMsl::Writer::~Writer(CMMsl::Writer *this)
{
  double v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 2);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = *((void *)this + 3);
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    int v5 = *((_DWORD *)this + 10);
    if ((v5 & 0x80000000) == 0) {
      close(v5);
    }
  }
  free(*((void **)this + 7));
  deflateEnd((z_streamp)((char *)this + 80));
}

uint64_t CMMsl::Writer::open(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  int v3 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = sub_2570B143C;
  v6[3] = &unk_2654268D8;
  v6[5] = a1;
  v6[6] = a2;
  int v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

dispatch_io_t sub_2570B143C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    int v7 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v8 = "Cannot open Msl file\n";
    size_t v9 = 21;
  }
  else
  {
    off_t v4 = lseek(v3, 0, 2);
    if (v4 < 0)
    {
      int v7 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v8 = "Cannot seek to end of Msl file\n";
      size_t v9 = 31;
    }
    else
    {
      off_t v5 = v4;
      if ((lseek(*(_DWORD *)(v2 + 40), 0, 0) & 0x8000000000000000) == 0)
      {
        if (v5)
        {
          uint64_t __buf = 0;
          if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) == 8)
          {
            if (__buf == 0xE020C5BE006C536DLL)
            {
              unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_15:
              *(void *)(v2 + 48) = v6;
              dispatch_fd_t v11 = *(_DWORD *)(v2 + 40);
              long long v12 = *(NSObject **)(v2 + 8);
              cleanup_handler[0] = MEMORY[0x263EF8330];
              cleanup_handler[1] = 0x40000000;
              cleanup_handler[2] = sub_2570B1670;
              cleanup_handler[3] = &unk_2654268B0;
              dispatch_fd_t v17 = v11;
              dispatch_io_t result = dispatch_io_create(1uLL, v11, v12, cleanup_handler);
              *(void *)(v2 + 24) = result;
              if (result)
              {
                *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
                return result;
              }
              uint64_t v13 = (FILE *)*MEMORY[0x263EF8348];
              uint64_t v14 = "Cannot create dispatch_io for Msl file\n";
              size_t v15 = 39;
              return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
            }
            uint64_t v13 = (FILE *)*MEMORY[0x263EF8348];
            uint64_t v14 = "Bad signature in Msl file\n";
            size_t v15 = 26;
          }
          else
          {
            uint64_t v13 = (FILE *)*MEMORY[0x263EF8348];
            uint64_t v14 = "Short signature in Msl file\n";
            size_t v15 = 28;
          }
          return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
        }
        unint64_t v6 = 8;
        pwrite(*(_DWORD *)(v2 + 40), &unk_2572D6C20, 8uLL, 0);
        goto LABEL_15;
      }
      int v7 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v8 = "Cannot seek to start of Msl file\n";
      size_t v9 = 33;
    }
  }
  return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
}

uint64_t sub_2570B1670(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t CMMsl::Writer::open(void *a1, uint64_t a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 24))(a2, &unk_2572D6C20, 8);
    a1[6] = 8;
  }
  return 1;
}

void CMMsl::Writer::writeItem(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = sub_2570B1758;
  v3[3] = &unk_2654268F8;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_2570B1758(uint64_t a1)
{
  uint64_t v2 = *(CMMsl::Writer **)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), &v5);
  uint64_t v3 = *((void *)v2 + 7);
  if (!v3)
  {
    CMMsl::Writer::openSensRecord(v2);
    uint64_t v3 = *((void *)v2 + 7);
  }
  ++*(_DWORD *)(v3 + 16);
  *(_DWORD *)off_t v4 = v5 - v6;
  CMMsl::Writer::pumpZlib((void **)v2, v4, 4);
  CMMsl::Writer::pumpZlib((void **)v2, v6, v5 - v6);
  if (!*((void *)v2 + 9)) {
    CMMsl::Writer::closeSensRecord(v2);
  }
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_2570B1820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void CMMsl::Writer::openSensRecord(CMMsl::Writer *this)
{
  *((void *)this + 7) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *((_OWORD *)this + 4) = xmmword_2572D6C10;
  gettimeofday(&v7, 0);
  uint64_t v2 = *((void *)this + 7);
  *(void *)uint64_t v2 = 0x5979AAB3D5E07959;
  *(void *)(v2 + 8) = 1936614771;
  int tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *((void *)this + 13) = v2 + 28;
  *((_DWORD *)this + 28) = *((_DWORD *)this + 16) - 28;
  unint64_t v4 = 1000000000 * *((void *)this + 4);
  uint64_t v5 = *((void *)this + 2);
  dispatch_time_t v6 = dispatch_time(0, v4);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

void **CMMsl::Writer::pumpZlib(void **this, const unsigned __int8 *a2, int a3)
{
  this[10] = (void *)a2;
  uint64_t v3 = (z_stream *)(this + 10);
  *((_DWORD *)this + 22) = a3;
  if (a3)
  {
    uint64_t v4 = (uint64_t)this;
    do
    {
      this = (void **)deflate(v3, 0);
      if (!this && !*(_DWORD *)(v4 + 112)) {
        this = CMMsl::Writer::growZlibStream((void **)v4);
      }
    }
    while (*(_DWORD *)(v4 + 88));
  }
  return this;
}

void CMMsl::Writer::flush(CMMsl::Writer *this)
{
  uint64_t v1 = *((void *)this + 1);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2570B19E8;
  block[3] = &unk_265426918;
  block[4] = this;
  dispatch_sync(v1, block);
}

void sub_2570B19E8(uint64_t a1)
{
}

void CMMsl::Writer::sync(CMMsl::Writer *this)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = *((void *)this + 1);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_2570B1A78;
  v4[3] = &unk_265426958;
  unsigned __int8 v4[4] = this;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void sub_2570B1A78(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(CMMsl::Writer **)(a1 + 32);
  CMMsl::Writer::closeSensRecord(v2);
  uint64_t v3 = *((void *)v2 + 3);
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = sub_2570B1B18;
  v5[3] = &unk_265426938;
  uint64_t v4 = *(void *)(a1 + 40);
  v5[4] = v2;
  v5[5] = v4;
  dispatch_io_barrier(v3, v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

intptr_t sub_2570B1B18(uint64_t a1)
{
  fsync(*(_DWORD *)(*(void *)(a1 + 32) + 40));
  dispatch_semaphore_t v2 = *(NSObject **)(a1 + 40);
  return dispatch_semaphore_signal(v2);
}

void **CMMsl::Writer::growZlibStream(void **this)
{
  uint64_t v1 = this;
  uint64_t v3 = this[8];
  dispatch_semaphore_t v2 = (char *)this[9];
  if (v2)
  {
    *((_DWORD *)this + 28) += v2;
    this[8] = &v2[(void)v3];
    this[9] = 0;
  }
  else
  {
    this[8] = (void *)(2 * (void)v3);
    this = (void **)malloc_type_realloc(this[7], 2 * (void)v3, 0x59C50B5uLL);
    v1[7] = this;
    uint64_t v4 = (char *)v1[15];
    v1[13] = &v4[(void)this + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - v4;
  }
  return this;
}

void sub_2570B1BD0(uint64_t a1)
{
}

void sub_2570B1BD8(int a1, char a2, int a3, int __errnum)
{
  if (__errnum || (a2 & 1) == 0)
  {
    uint64_t v4 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v5 = strerror(__errnum);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t CMMsl::Writer::totalSizeApproximatelyWritten(CMMsl::Writer *this)
{
  return *((void *)this + 15) + *((void *)this + 6);
}

id sub_2570B1C40()
{
  v2[9] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_269FE5208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_269FE5208))
  {
    v2[0] = @"LoggingEnabled";
    v2[1] = @"FilePrefix";
    v2[2] = @"FileBasePath";
    v2[3] = @"FileSize";
    v2[4] = @"FileTimeInterval";
    v2[5] = @"FilesToKeep";
    v2[6] = @"FileExtension";
    v2[7] = @"ProtectionClass";
    v2[8] = @"FlushTimeout";
    qword_269FE5200 = [MEMORY[0x263EFF8C0] arrayWithObjects:v2 count:9];
    __cxa_guard_release(&qword_269FE5208);
  }
  v0 = (void *)qword_269FE5200;
  return v0;
}

void sub_2570B1D54(_Unwind_Exception *a1)
{
}

uint64_t sub_2570B1D6C()
{
  qword_269FE5210 = (uint64_t)dispatch_queue_create("com.apple.Msl.DefaultsQueue", 0);
  return MEMORY[0x270F9A758]();
}

void sub_2570B1DAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 1048576000;
  *(void *)(a2 + 8) = 0x3200015180;
  sub_2570AFB04((void *)(a2 + 16), "/tmp/");
  sub_2570AFB04((void *)(a2 + 40), (char *)&unk_2572DE89B);
  sub_2570AFB04((void *)(a2 + 64), "msl");
  *(_DWORD *)(a2 + 88) = 2;
  *(void *)(a2 + 96) = 300;
  id v12 = [*(id *)(a1 + 16) allKeys];
  if ([v12 containsObject:@"FilePrefix"])
  {
    id v4 = [*(id *)(a1 + 16) valueForKey:@"FilePrefix"];
    MEMORY[0x25A2B2680](a2 + 40, [v4 UTF8String]);
  }
  if ([v12 containsObject:@"FileBasePath"])
  {
    id v5 = [*(id *)(a1 + 16) valueForKey:@"FileBasePath"];
    MEMORY[0x25A2B2680](a2 + 16, [v5 UTF8String]);
  }
  if ([v12 containsObject:@"FileExtension"])
  {
    id v6 = [*(id *)(a1 + 16) valueForKey:@"FileExtension"];
    MEMORY[0x25A2B2680](a2 + 64, [v6 UTF8String]);
  }
  if ([v12 containsObject:@"FileTimeInterval"])
  {
    timeval v7 = [*(id *)(a1 + 16) valueForKey:@"FileTimeInterval"];
    *(_DWORD *)(a2 + 8) = [v7 unsignedIntValue];
  }
  if ([v12 containsObject:@"FilesToKeep"])
  {
    uint64_t v8 = [*(id *)(a1 + 16) valueForKey:@"FilesToKeep"];
    *(_DWORD *)(a2 + 12) = [v8 unsignedIntValue];
  }
  if ([v12 containsObject:@"FileSize"])
  {
    size_t v9 = [*(id *)(a1 + 16) valueForKey:@"FileSize"];
    *(void *)a2 = [v9 unsignedIntValue];
  }
  if ([v12 containsObject:@"ProtectionClass"])
  {
    uint64_t v10 = [*(id *)(a1 + 16) valueForKey:@"ProtectionClass"];
    *(_DWORD *)(a2 + 88) = [v10 unsignedIntValue];
  }
  if ([v12 containsObject:@"FlushTimeout"])
  {
    dispatch_fd_t v11 = [*(id *)(a1 + 16) valueForKey:@"FlushTimeout"];
    *(void *)(a2 + 96) = [v11 longLongValue];
  }
}

void sub_2570B2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  sub_2570B20E4(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2570B20E4(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_2570B2138(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = [MEMORY[0x263EFF9A0] dictionary];
  if (*((char *)a2 + 23) >= 0) {
    timeval v7 = a2;
  }
  else {
    timeval v7 = (uint64_t *)*a2;
  }
  *(void *)(a1 + 24) = [NSString stringWithUTF8String:v7];
  *(void *)(a1 + 32) = [objc_alloc(MEMORY[0x263EFFA40]) initWithSuiteName:*(void *)(a1 + 24)];
  *(void *)(a1 + 40) = objc_opt_new();
  if (!*(void *)(a1 + 32))
  {
    if (qword_269FE5228 != -1) {
      dispatch_once(&qword_269FE5228, &unk_27063FB98);
    }
    uint64_t v8 = qword_269FE5220;
    if (os_log_type_enabled((os_log_t)qword_269FE5220, OS_LOG_TYPE_FAULT))
    {
      uint64_t v44 = *(void *)(a1 + 24);
      *(_DWORD *)__n128 v56 = 138412290;
      uint64_t v57 = v44;
      _os_log_fault_impl(&dword_2570AE000, v8, OS_LOG_TYPE_FAULT, "fUserDefaults returned nil for domain: %@", v56, 0xCu);
    }
  }
  size_t v9 = *(void **)(a1 + 16);
  if (*(char *)(a4 + 63) >= 0) {
    uint64_t v10 = a4 + 40;
  }
  else {
    uint64_t v10 = *(void *)(a4 + 40);
  }
  dispatch_fd_t v11 = [NSString stringWithUTF8String:v10];
  [v9 setValue:v11 forKey:@"FilePrefix"];

  id v12 = *(void **)(a1 + 16);
  if (*(char *)(a4 + 39) >= 0) {
    uint64_t v13 = a4 + 16;
  }
  else {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  uint64_t v14 = [NSString stringWithUTF8String:v13];
  [v12 setValue:v14 forKey:@"FileBasePath"];

  size_t v15 = *(void **)(a1 + 16);
  uint64_t v16 = [NSNumber numberWithLongLong:*(void *)a4];
  [v15 setValue:v16 forKey:@"FileSize"];

  dispatch_fd_t v17 = *(void **)(a1 + 16);
  long long v18 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 8)];
  [v17 setValue:v18 forKey:@"FileTimeInterval"];

  uint64_t v19 = *(void **)(a1 + 16);
  unint64_t v20 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 12)];
  [v19 setValue:v20 forKey:@"FilesToKeep"];

  unint64_t v21 = *(void **)(a1 + 16);
  if (*(char *)(a4 + 87) >= 0) {
    uint64_t v22 = a4 + 64;
  }
  else {
    uint64_t v22 = *(void *)(a4 + 64);
  }
  unint64_t v23 = [NSString stringWithUTF8String:v22];
  [v21 setValue:v23 forKey:@"FileExtension"];

  unint64_t v24 = *(void **)(a1 + 16);
  uint64_t v25 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 88)];
  [v24 setValue:v25 forKey:@"ProtectionClass"];

  __n128 v26 = *(void **)(a1 + 16);
  __n128 v27 = [NSNumber numberWithLongLong:*(void *)(a4 + 96)];
  [v26 setValue:v27 forKey:@"FlushTimeout"];

  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  __n128 v28 = sub_2570B1C40();
  uint64_t v29 = [v28 countByEnumeratingWithState:&v49 objects:v56 count:16];
  if (v29)
  {
    uint64_t v30 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v50 != v30) {
          objc_enumerationMutation(v28);
        }
        uint64_t v32 = *(void *)(*((void *)&v49 + 1) + 8 * i);
        __n128 v33 = [*(id *)(a1 + 32) objectForKey:v32];
        v34 = [*(id *)(a1 + 32) objectForKey:v32];
        BOOL v35 = v34 == 0;

        if (!v35)
        {
          long long v36 = (void *)[v33 copy];
          [*(id *)(a1 + 16) setObject:v36 forKeyedSubscript:v32];
        }
      }
      uint64_t v29 = [v28 countByEnumeratingWithState:&v49 objects:v56 count:16];
    }
    while (v29);
  }

  if (qword_269FE5228 != -1) {
    dispatch_once(&qword_269FE5228, &unk_27063FB98);
  }
  __n128 v37 = qword_269FE5220;
  if (os_log_type_enabled((os_log_t)qword_269FE5220, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v43 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 138412290;
    uint64_t v55 = v43;
    _os_log_debug_impl(&dword_2570AE000, v37, OS_LOG_TYPE_DEBUG, "MSL config updated from user defaults %@", buf, 0xCu);
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  __n128 v38 = sub_2570B1C40();
  uint64_t v39 = [v38 countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v39)
  {
    uint64_t v40 = *(void *)v46;
    do
    {
      for (uint64_t j = 0; j != v39; ++j)
      {
        if (*(void *)v46 != v40) {
          objc_enumerationMutation(v38);
        }
        objc_msgSend(*(id *)(a1 + 32), "addObserver:forKeyPath:options:context:", *(void *)(a1 + 40), *(void *)(*((void *)&v45 + 1) + 8 * j), 1, a1, (void)v45);
      }
      uint64_t v39 = [v38 countByEnumeratingWithState:&v45 objects:v53 count:16];
    }
    while (v39);
  }

  return a1;
}

void sub_2570B2650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_2570B270C(id *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  dispatch_semaphore_t v2 = sub_2570B1C40();
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(a1[4], "removeObserver:forKeyPath:context:", a1[5], *(void *)(*((void *)&v7 + 1) + 8 * v5++), a1, (void)v7);
      }
      while (v3 != v5);
      uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }

  return a1;
}

void sub_2570B2828(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_2570AFA4C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2570B2844(uint64_t a1)
{
}

void sub_2570B2904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2570B20E4((uint64_t)va);
  MEMORY[0x25A2B2850](v3, 0x1032C4044EE41C5);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2570B2948(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2572C846C(result);
    JUMPOUT(0x25A2B2850);
  }
  return result;
}

uint64_t sub_2570B2998(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 16) objectForKey:@"LoggingEnabled"];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void sub_2570B29DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2570B2BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_2570B2C20()
{
  qword_269FE5220 = (uint64_t)os_log_create("com.apple.MotionSensorLogging", "MSL");
  return MEMORY[0x270F9A758]();
}

uint64_t CMMsl::ALSData::ALSData(uint64_t this)
{
  *(void *)this = &unk_27063FBC8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FBC8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::ALSData::~ALSData(CMMsl::ALSData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ALSData::ALSData(CMMsl::ALSData *this, const CMMsl::ALSData *a2)
{
  *(void *)this = &unk_27063FBC8;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(void *)this = &unk_27063FBC8;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::ALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_27063FBC8;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void *v8;
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = &unk_27063FBC8;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    long long v10 = v5;
    id v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSData *a2, CMMsl::ALSData *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::ALSData::ALSData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FBC8;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_27063FBC8;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::ALSData::formatText(CMMsl::ALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ALSData::readFrom(CMMsl::ALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8));
  }
  return this;
}

BOOL CMMsl::ALSData::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

float CMMsl::ALSData::hash_value(CMMsl::ALSData *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

uint64_t CMMsl::ALSPhone::ALSPhone(uint64_t this)
{
  *(void *)this = &unk_27063FC00;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FC00;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ALSPhone::~ALSPhone(CMMsl::ALSPhone *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ALSPhone::ALSPhone(CMMsl::ALSPhone *this, const CMMsl::ALSPhone *a2)
{
  *(void *)this = &unk_27063FC00;
  *((_DWORD *)this + 5) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *((unsigned char *)this + 20) = 1;
    *((void *)this + 1) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, const CMMsl::ALSPhone *a2)
{
  if ((const CMMsl::ALSPhone *)a1 != a2)
  {
    CMMsl::ALSPhone::ALSPhone((CMMsl::ALSPhone *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSPhone *a2, CMMsl::ALSPhone *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ALSPhone::ALSPhone(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FC00;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_27063FC00;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v12 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = &unk_27063FC00;
    v10[1] = v7;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::ALSPhone::formatText(CMMsl::ALSPhone *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ALSPhone::readFrom(CMMsl::ALSPhone *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::ALSPhone::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::ALSPhone::hash_value(CMMsl::ALSPhone *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

void *CMMsl::APSleep::APSleep(void *this)
{
  *this = &unk_27063FC38;
  return this;
}

{
  *this = &unk_27063FC38;
  return this;
}

void CMMsl::APSleep::~APSleep(CMMsl::APSleep *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::APSleep::APSleep(void *this, const CMMsl::APSleep *a2)
{
  *this = &unk_27063FC38;
  return this;
}

{
  *this = &unk_27063FC38;
  return this;
}

uint64_t CMMsl::APSleep::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v4 = &unk_27063FC38;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

{
  void *v4;

  if (a1 != a2)
  {
    char v4 = &unk_27063FC38;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

void *CMMsl::APSleep::APSleep(void *result)
{
  std::logic_error *result = &unk_27063FC38;
  return result;
}

{
  std::logic_error *result = &unk_27063FC38;
  return result;
}

uint64_t CMMsl::APSleep::formatText(CMMsl::APSleep *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::APSleep::readFrom(CMMsl::APSleep *this, PB::Reader *a2)
{
  while (1)
  {
    unint64_t v3 = *((void *)a2 + 1);
    unint64_t v4 = *((void *)a2 + 2);
    int v5 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v4 || v5 != 0) {
      return v5 == 0;
    }
    uint64_t v7 = *(void *)a2;
    char v8 = 0;
    unsigned int v9 = 0;
    BOOL v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      uint64_t v13 = 0;
      if (v3 > v4) {
        unint64_t v4 = *((void *)a2 + 1);
      }
      while (v4 != v3)
      {
        unint64_t v11 = v3 + 1;
        char v12 = *(unsigned char *)(v7 + v3);
        *((void *)a2 + 1) = v11;
        v13 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          goto LABEL_22;
        }
        v8 += 7;
        unint64_t v3 = v11;
        BOOL v10 = v9++ > 8;
        if (v10) {
          goto LABEL_23;
        }
      }
      int v5 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v5 == 0;
    }
    uint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v15 = *(unsigned char *)(v7 + v3);
      v13 |= (unint64_t)(v15 & 0x7F) << v8;
      if ((v15 & 0x80) == 0) {
        break;
      }
      v8 += 7;
      unint64_t v3 = v14;
      BOOL v10 = v9++ > 8;
      if (v10) {
        goto LABEL_23;
      }
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      int v5 = 0;
      return v5 == 0;
    }
LABEL_23:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
  }
}

uint64_t CMMsl::APSleep::operator==()
{
  return 1;
}

uint64_t CMMsl::APSleep::hash_value(CMMsl::APSleep *this)
{
  return 0;
}

void *CMMsl::APWake::APWake(void *this)
{
  *this = &unk_27063FC70;
  this[1] = 0;
  return this;
}

{
  *this = &unk_27063FC70;
  this[1] = 0;
  return this;
}

void CMMsl::APWake::~APWake(CMMsl::APWake *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27063FC70;
  *((void *)this + 1) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::APWake::~APWake(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::APWake::APWake(void *this, const CMMsl::APWake *a2)
{
  *this = &unk_27063FC70;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::APWake *CMMsl::APWake::operator=(const CMMsl::APWake *a1, const CMMsl::APWake *a2)
{
  if (a1 != a2)
  {
    CMMsl::APWake::APWake(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::APWake::~APWake((CMMsl::APWake *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::APWake *a2, CMMsl::APWake *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::APWake::APWake(void *a1, uint64_t a2)
{
  *a1 = &unk_27063FC70;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_27063FC70;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

uint64_t CMMsl::APWake::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_27063FC70;
    v6[1] = v4;
    CMMsl::APWake::~APWake((CMMsl::APWake *)v6);
  }
  return a1;
}

uint64_t CMMsl::APWake::formatText(CMMsl::APWake *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::APWake::readFrom(CMMsl::APWake *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::APWake::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::APWake::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL sub_2570B4110(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unint64_t CMMsl::APWake::hash_value(CMMsl::APWake *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return sub_2572C6F9C(result);
  }
  return result;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t this)
{
  *(void *)this = &unk_27063FCA8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FCA8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::ARKitWorldPose::~ARKitWorldPose(CMMsl::ARKitWorldPose *this)
{
  *(void *)this = &unk_27063FCA8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ARKitWorldPose::~ARKitWorldPose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::ARKitWorldPose *CMMsl::ARKitWorldPose::ARKitWorldPose(CMMsl::ARKitWorldPose *this, const CMMsl::ARKitWorldPose *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *(void *)this = &unk_27063FCA8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  char v5 = *((unsigned char *)a2 + 56);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 4);
    char v6 = 1;
    *((unsigned char *)this + 56) = 1;
    *((void *)this + 4) = v7;
    char v5 = *((unsigned char *)a2 + 56);
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 11);
    v6 |= 4u;
    *((unsigned char *)this + 56) = v6;
    *((_DWORD *)this + 11) = v8;
    char v5 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v12 = *((_DWORD *)a2 + 12);
  v6 |= 8u;
  *((unsigned char *)this + 56) = v6;
  *((_DWORD *)this + 12) = v12;
  if ((*((unsigned char *)a2 + 56) & 0x10) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 13);
    *((unsigned char *)this + 56) = v6 | 0x10;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2) {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  if ((*((unsigned char *)a2 + 56) & 2) != 0)
  {
    int v10 = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 56) |= 2u;
    *((_DWORD *)this + 10) = v10;
  }
  return this;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, const CMMsl::ARKitWorldPose *a2)
{
  if ((const CMMsl::ARKitWorldPose *)a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 44);
    *(void *)(a1 + 44) = v14;
    uint64_t v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v4;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ARKitWorldPose *a2, CMMsl::ARKitWorldPose *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  float result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FCA8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 44);
    *(void *)(a1 + 44) = v14;
    uint64_t v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v4;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::formatText(CMMsl::ARKitWorldPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  char v8 = *((unsigned char *)this + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "status");
    char v8 = *((unsigned char *)this + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  char v8 = *((unsigned char *)this + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "x", *((float *)this + 11));
  char v8 = *((unsigned char *)this + 56);
  if ((v8 & 8) == 0)
  {
LABEL_7:
    if ((v8 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "y", *((float *)this + 12));
  if ((*((unsigned char *)this + 56) & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 13));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::ARKitWorldPose::readFrom(CMMsl::ARKitWorldPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 56) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
        goto LABEL_100;
      case 2u:
        *((unsigned char *)this + 56) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v20);
        goto LABEL_35;
      case 3u:
        *((unsigned char *)this + 56) |= 8u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v21);
        goto LABEL_35;
      case 4u:
        *((unsigned char *)this + 56) |= 0x10u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
          goto LABEL_98;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v22);
LABEL_35:
        uint64_t v23 = *((void *)a2 + 1) + 4;
        goto LABEL_101;
      case 5u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          while (v24 < v25 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v27 = (char *)*((void *)this + 2);
            unint64_t v26 = *((void *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              char v29 = (char *)*((void *)this + 1);
              uint64_t v30 = (v27 - v29) >> 3;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 61) {
                goto LABEL_111;
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 2 > v31) {
                unint64_t v31 = v32 >> 2;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v33 = (unint64_t)sub_2572C7528(v33);
                char v29 = (char *)*((void *)this + 1);
                unsigned int v27 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v34 = 0;
              }
              BOOL v35 = (void *)(v33 + 8 * v30);
              *BOOL v35 = 0;
              unint64_t v28 = v35 + 1;
              while (v27 != v29)
              {
                uint64_t v36 = *((void *)v27 - 1);
                v27 -= 8;
                *--BOOL v35 = v36;
              }
              *((void *)this + 1) = v35;
              *((void *)this + 2) = v28;
              *((void *)this + 3) = v33 + 8 * v34;
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(void *)unsigned int v27 = 0;
              unint64_t v28 = v27 + 8;
            }
            *((void *)this + 2) = v28;
            unint64_t v37 = *((void *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(void *)(*(void *)a2 + v37);
            unint64_t v25 = *((void *)a2 + 2);
            unint64_t v24 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          long long v47 = (char *)*((void *)this + 2);
          unint64_t v46 = *((void *)this + 3);
          if ((unint64_t)v47 >= v46)
          {
            uint64_t v53 = (char *)*((void *)this + 1);
            uint64_t v54 = (v47 - v53) >> 3;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61) {
LABEL_111:
            }
              sub_2570AFD0C();
            uint64_t v56 = v46 - (void)v53;
            if (v56 >> 2 > v55) {
              unint64_t v55 = v56 >> 2;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              unint64_t v57 = (unint64_t)sub_2572C7528(v57);
              uint64_t v53 = (char *)*((void *)this + 1);
              long long v47 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v58 = 0;
            }
            int64_t v59 = (void *)(v57 + 8 * v54);
            *int64_t v59 = 0;
            long long v48 = v59 + 1;
            while (v47 != v53)
            {
              uint64_t v60 = *((void *)v47 - 1);
              v47 -= 8;
              *--int64_t v59 = v60;
            }
            *((void *)this + 1) = v59;
            *((void *)this + 2) = v48;
            *((void *)this + 3) = v57 + 8 * v58;
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(void *)long long v47 = 0;
            long long v48 = v47 + 8;
          }
          *((void *)this + 2) = v48;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *((void *)a2 + 2))
          {
            *(v48 - 1) = *(void *)(*(void *)a2 + v61);
LABEL_100:
            uint64_t v23 = *((void *)a2 + 1) + 8;
LABEL_101:
            *((void *)a2 + 1) = v23;
          }
          else
          {
LABEL_98:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 6u:
        *((unsigned char *)this + 56) |= 2u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          do
          {
            unint64_t v44 = v38 + 1;
            *((void *)a2 + 1) = v38 + 1;
            char v45 = *(unsigned char *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0) {
              goto LABEL_87;
            }
            v41 += 7;
            unint64_t v38 = v44;
            BOOL v14 = v42++ > 8;
          }
          while (!v14);
LABEL_75:
          LODWORD(v43) = 0;
          goto LABEL_87;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v43 = 0;
        if (v39 <= v38) {
          unint64_t v39 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v39 == v38)
          {
            LODWORD(v43) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v51 = v38 + 1;
            char v52 = *(unsigned char *)(v40 + v38);
            *((void *)a2 + 1) = v51;
            v43 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              unint64_t v38 = v51;
              BOOL v14 = v50++ > 8;
              if (v14) {
                goto LABEL_75;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v43) = 0;
            }
          }
          break;
        }
LABEL_87:
        *((_DWORD *)this + 10) = v43;
        break;
      default:
        goto LABEL_19;
    }
LABEL_102:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_102;
  }
  return 0;
}

uint64_t CMMsl::ARKitWorldPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 48));
      if ((*(unsigned char *)(v3 + 56) & 0x10) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 0x10) != 0) {
LABEL_5:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
LABEL_6:
  uint64_t v5 = *(double **)(v3 + 8);
  long long v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(unsigned char *)(v3 + 56) & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::ARKitWorldPose::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  char v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 56) & 2) == 0;
  if ((*(unsigned char *)(a1 + 56) & 2) != 0) {
    return (*(unsigned char *)(a2 + 56) & 2) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v5;
}

uint64_t CMMsl::ARKitWorldPose::hash_value(CMMsl::ARKitWorldPose *this)
{
  if ((*((unsigned char *)this + 56) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (*((double *)this + 4) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 4);
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v3 = *((float *)this + 11);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = LODWORD(v3);
  }
  if ((*((unsigned char *)this + 56) & 8) != 0)
  {
LABEL_7:
    float v5 = *((float *)this + 12);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = LODWORD(v5);
    }
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 56) & 0x10) != 0)
  {
LABEL_11:
    float v7 = *((float *)this + 13);
    if (v7 == 0.0) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = LODWORD(v7);
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v8 = 0;
LABEL_21:
  uint64_t v9 = PBHashBytes();
  if ((*((unsigned char *)this + 56) & 2) != 0) {
    uint64_t v10 = *((int *)this + 10);
  }
  else {
    uint64_t v10 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v9;
}

void *CMMsl::ARSessionState::ARSessionState(void *this)
{
  *this = &unk_27063FCE0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_27063FCE0;
  this[1] = 0;
  return this;
}

void CMMsl::ARSessionState::~ARSessionState(CMMsl::ARSessionState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t this, const CMMsl::ARSessionState *a2)
{
  *(void *)this = &unk_27063FCE0;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = &unk_27063FCE0;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::ARSessionState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_27063FCE0;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_27063FCE0;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ARSessionState *a2, CMMsl::ARSessionState *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t result, uint64_t a2)
{
  *(void *)float result = &unk_27063FCE0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)float result = &unk_27063FCE0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ARSessionState::formatText(CMMsl::ARSessionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "state");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ARSessionState::readFrom(CMMsl::ARSessionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ARSessionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::ARSessionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::ARSessionState::hash_value(CMMsl::ARSessionState *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::Accel::Accel(uint64_t this)
{
  *(void *)this = &unk_27063FD18;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FD18;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::Accel::~Accel(CMMsl::Accel *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Accel::Accel(uint64_t this, const CMMsl::Accel *a2)
{
  *(void *)this = &unk_27063FD18;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, const CMMsl::Accel *a2)
{
  if ((const CMMsl::Accel *)a1 != a2)
  {
    CMMsl::Accel::Accel((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 20);
    *(void *)(a1 + 20) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v4;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Accel *a2, CMMsl::Accel *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Accel::Accel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FD18;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_27063FD18;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = &unk_27063FD18;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v16 = *(_DWORD *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v7;
    uint64_t v8 = *(void *)(a1 + 20);
    uint64_t v9 = *(void *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 20) = v9;
    uint64_t v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    int v15 = v8;
    int v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::Accel::formatText(CMMsl::Accel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "y", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Accel::readFrom(CMMsl::Accel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_57;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_51;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_50:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_51:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_56;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_55:
              unint64_t v2 = v28 + 1;
              goto LABEL_56;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_55;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_56;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_56:
        *((_DWORD *)this + 4) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_57:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Accel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 28));
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::Accel::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::Accel::hash_value(CMMsl::Accel *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    float v6 = *((float *)this + 7);
    uint64_t v7 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v8 = *((int *)this + 4);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
}

void *CMMsl::Accel800::Accel800(void *this)
{
  *this = &unk_27063FD50;
  this[1] = 0;
  return this;
}

{
  *this = &unk_27063FD50;
  this[1] = 0;
  return this;
}

void CMMsl::Accel800::~Accel800(CMMsl::Accel800 *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27063FD50;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Accel800::~Accel800(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::Accel800::Accel800(void *this, const CMMsl::Accel800 *a2)
{
  *this = &unk_27063FD50;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::Accel800 *CMMsl::Accel800::operator=(const CMMsl::Accel800 *a1, const CMMsl::Accel800 *a2)
{
  if (a1 != a2)
  {
    CMMsl::Accel800::Accel800(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::Accel800::~Accel800((CMMsl::Accel800 *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Accel800 *a2, CMMsl::Accel800 *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::Accel800::Accel800(void *a1, uint64_t a2)
{
  *a1 = &unk_27063FD50;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_27063FD50;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::Accel800::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_27063FD50;
    v6[1] = v4;
    CMMsl::Accel800::~Accel800((CMMsl::Accel800 *)v6);
  }
  return a1;
}

uint64_t CMMsl::Accel800::formatText(CMMsl::Accel800 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Accel800::readFrom(CMMsl::Accel800 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Accel800::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::Accel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::Accel800::hash_value(CMMsl::Accel800 *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::Accel800::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this)
{
  *(void *)this = &unk_27063FD88;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FD88;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelBatch::~AccelBatch(CMMsl::AccelBatch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this, const CMMsl::AccelBatch *a2)
{
  *(void *)this = &unk_27063FD88;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, const CMMsl::AccelBatch *a2)
{
  if ((const CMMsl::AccelBatch *)a1 != a2)
  {
    CMMsl::AccelBatch::AccelBatch((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 20);
    *(void *)(a1 + 20) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v4;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelBatch *a2, CMMsl::AccelBatch *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::AccelBatch::AccelBatch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FD88;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_27063FD88;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = &unk_27063FD88;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v16 = *(_DWORD *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v7;
    uint64_t v8 = *(void *)(a1 + 20);
    uint64_t v9 = *(void *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 20) = v9;
    uint64_t v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    int v15 = v8;
    int v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccelBatch::formatText(CMMsl::AccelBatch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "batch");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "y", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccelBatch::readFrom(CMMsl::AccelBatch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_57;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_51;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_50:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_51:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_56;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_55:
              unint64_t v2 = v28 + 1;
              goto LABEL_56;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_55;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_56;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_56:
        *((_DWORD *)this + 4) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_57:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccelBatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 28));
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccelBatch::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::AccelBatch::hash_value(CMMsl::AccelBatch *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    float v6 = *((float *)this + 7);
    uint64_t v7 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v8 = *((unsigned int *)this + 4);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8;
}

void *CMMsl::AccelGesture::AccelGesture(void *this)
{
  *this = &unk_27063FDC0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_27063FDC0;
  this[1] = 0;
  return this;
}

void CMMsl::AccelGesture::~AccelGesture(CMMsl::AccelGesture *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27063FDC0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccelGesture::~AccelGesture(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccelGesture::AccelGesture(void *this, const CMMsl::AccelGesture *a2)
{
  *this = &unk_27063FDC0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccelGesture *CMMsl::AccelGesture::operator=(const CMMsl::AccelGesture *a1, const CMMsl::AccelGesture *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccelGesture::AccelGesture(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccelGesture::~AccelGesture((CMMsl::AccelGesture *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelGesture *a2, CMMsl::AccelGesture *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccelGesture::AccelGesture(void *a1, uint64_t a2)
{
  *a1 = &unk_27063FDC0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_27063FDC0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccelGesture::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_27063FDC0;
    v6[1] = v4;
    CMMsl::AccelGesture::~AccelGesture((CMMsl::AccelGesture *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelGesture::formatText(CMMsl::AccelGesture *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccelGesture::readFrom(CMMsl::AccelGesture *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelGesture::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::AccelGesture::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::AccelGesture::hash_value(CMMsl::AccelGesture *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccelGesture::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccelGps::AccelGps(uint64_t this)
{
  *(void *)this = &unk_27063FDF8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FDF8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccelGps::~AccelGps(CMMsl::AccelGps *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::AccelGps::AccelGps(CMMsl::AccelGps *this, const CMMsl::AccelGps *a2)
{
  *(void *)this = &unk_27063FDF8;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, const CMMsl::AccelGps *a2)
{
  if ((const CMMsl::AccelGps *)a1 != a2)
  {
    CMMsl::AccelGps::AccelGps((CMMsl::AccelGps *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelGps *a2, CMMsl::AccelGps *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::AccelGps::AccelGps(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FDF8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_27063FDF8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = &unk_27063FDF8;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccelGps::formatText(CMMsl::AccelGps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccelGps::readFrom(CMMsl::AccelGps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_38;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccelGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20));
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::AccelGps::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccelGps::hash_value(CMMsl::AccelGps *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void *CMMsl::AccelOscarEmu::AccelOscarEmu(void *this)
{
  *this = &unk_27063FE30;
  this[1] = 0;
  return this;
}

{
  *this = &unk_27063FE30;
  this[1] = 0;
  return this;
}

void CMMsl::AccelOscarEmu::~AccelOscarEmu(CMMsl::AccelOscarEmu *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27063FE30;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccelOscarEmu::~AccelOscarEmu(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccelOscarEmu::AccelOscarEmu(void *this, const CMMsl::AccelOscarEmu *a2)
{
  *this = &unk_27063FE30;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccelOscarEmu *CMMsl::AccelOscarEmu::operator=(const CMMsl::AccelOscarEmu *a1, const CMMsl::AccelOscarEmu *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccelOscarEmu::AccelOscarEmu(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccelOscarEmu::~AccelOscarEmu((CMMsl::AccelOscarEmu *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelOscarEmu *a2, CMMsl::AccelOscarEmu *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccelOscarEmu::AccelOscarEmu(void *a1, uint64_t a2)
{
  *a1 = &unk_27063FE30;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_27063FE30;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_27063FE30;
    v6[1] = v4;
    CMMsl::AccelOscarEmu::~AccelOscarEmu((CMMsl::AccelOscarEmu *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::formatText(CMMsl::AccelOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccelOscarEmu::readFrom(CMMsl::AccelOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::AccelOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::AccelOscarEmu::hash_value(CMMsl::AccelOscarEmu *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccelOscarEmu::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AccelTNBFrame::AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  *(void *)this = &unk_27063FE68;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_27063FE68;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::AccelTNBFrame::~AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  *(void *)this = &unk_27063FE68;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccelTNBFrame::~AccelTNBFrame(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AccelTNBFrame *CMMsl::AccelTNBFrame::AccelTNBFrame(char **this, char **a2)
{
  *this = (char *)&unk_27063FE68;
  *(_OWORD *)(this + 1) = 0u;
  int v4 = this + 1;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 7) = 0u;
  this[9] = 0;
  if (this != a2)
  {
    sub_2572C75B4(this + 7, a2[7], a2[8], (a2[8] - a2[7]) >> 2);
    sub_2572C75B4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 2);
    sub_2572C75B4(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
  }
  char v5 = *((unsigned char *)a2 + 116);
  if ((v5 & 2) != 0)
  {
    char v8 = a2[11];
    *((unsigned char *)this + 116) |= 2u;
    this[11] = v8;
    char v5 = *((unsigned char *)a2 + 116);
    if ((v5 & 1) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)a2 + 116) & 1) == 0)
  {
    goto LABEL_5;
  }
  unsigned int v9 = a2[10];
  *((unsigned char *)this + 116) |= 1u;
  this[10] = v9;
  char v5 = *((unsigned char *)a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    char v11 = *((unsigned char *)a2 + 112);
    *((unsigned char *)this + 116) |= 0x10u;
    *((unsigned char *)this + 112) = v11;
    if ((*((unsigned char *)a2 + 116) & 4) == 0) {
      return (CMMsl::AccelTNBFrame *)this;
    }
    goto LABEL_8;
  }
LABEL_12:
  unint64_t v10 = a2[13];
  *((unsigned char *)this + 116) |= 8u;
  this[13] = v10;
  char v5 = *((unsigned char *)a2 + 116);
  if ((v5 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  if ((v5 & 4) != 0)
  {
LABEL_8:
    uint64_t v6 = a2[12];
    *((unsigned char *)this + 116) |= 4u;
    this[12] = v6;
  }
  return (CMMsl::AccelTNBFrame *)this;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, char **a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame(v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelTNBFrame *a2, CMMsl::AccelTNBFrame *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v12;
  uint64_t v13 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v13;
  uint64_t v14 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v14;
  uint64_t v15 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  LOBYTE(v12) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v12;
  double result = *((double *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::AccelTNBFrame::AccelTNBFrame(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FE68;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 8));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccelTNBFrame::formatText(CMMsl::AccelTNBFrame *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "B", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "N", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "T", v13);
  }
  char v14 = *((unsigned char *)this + 116);
  if (v14)
  {
    PB::TextFormatter::format(a2, "curvature", *((double *)this + 10));
    char v14 = *((unsigned char *)this + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
  }
  else if ((*((unsigned char *)this + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isValid");
  char v14 = *((unsigned char *)this + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "jerkNorm", *((double *)this + 11));
  char v14 = *((unsigned char *)this + 116);
  if ((v14 & 4) == 0)
  {
LABEL_11:
    if ((v14 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
  if ((*((unsigned char *)this + 116) & 8) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "torsion", *((double *)this + 13));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AccelTNBFrame::readFrom(CMMsl::AccelTNBFrame *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v20 = *((void *)a2 + 1);
            unint64_t v21 = *((void *)a2 + 2);
            while (v20 < v21 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v23 = (char *)*((void *)this + 8);
              unint64_t v22 = *((void *)this + 9);
              if ((unint64_t)v23 >= v22)
              {
                char v25 = (char *)*((void *)this + 7);
                uint64_t v26 = (v23 - v25) >> 2;
                unint64_t v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62) {
                  goto LABEL_177;
                }
                uint64_t v28 = v22 - (void)v25;
                if (v28 >> 1 > v27) {
                  unint64_t v27 = v28 >> 1;
                }
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v29 = v27;
                }
                if (v29)
                {
                  unint64_t v29 = (unint64_t)sub_2572C76F0(v29);
                  char v25 = (char *)*((void *)this + 7);
                  unsigned int v23 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v30 = 0;
                }
                unint64_t v31 = (_DWORD *)(v29 + 4 * v26);
                _DWORD *v31 = 0;
                uint64_t v24 = v31 + 1;
                while (v23 != v25)
                {
                  int v32 = *((_DWORD *)v23 - 1);
                  v23 -= 4;
                  *--unint64_t v31 = v32;
                }
                *((void *)this + 7) = v31;
                *((void *)this + 8) = v24;
                *((void *)this + 9) = v29 + 4 * v30;
                if (v25) {
                  operator delete(v25);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v23 = 0;
                uint64_t v24 = v23 + 4;
              }
              *((void *)this + 8) = v24;
              unint64_t v33 = *((void *)a2 + 1);
              if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *(v24 - 1) = *(_DWORD *)(*(void *)a2 + v33);
              unint64_t v21 = *((void *)a2 + 2);
              unint64_t v20 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v20;
            }
            goto LABEL_119;
          }
          v72 = (char *)*((void *)this + 8);
          unint64_t v71 = *((void *)this + 9);
          if ((unint64_t)v72 >= v71)
          {
            uint64_t v78 = (char *)*((void *)this + 7);
            uint64_t v79 = (v72 - v78) >> 2;
            unint64_t v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62) {
              goto LABEL_177;
            }
            uint64_t v81 = v71 - (void)v78;
            if (v81 >> 1 > v80) {
              unint64_t v80 = v81 >> 1;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82)
            {
              unint64_t v82 = (unint64_t)sub_2572C76F0(v82);
              uint64_t v78 = (char *)*((void *)this + 7);
              v72 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v83 = 0;
            }
            __n128 v96 = (_DWORD *)(v82 + 4 * v79);
            *__n128 v96 = 0;
            uint64_t v73 = v96 + 1;
            while (v72 != v78)
            {
              int v97 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *--__n128 v96 = v97;
            }
            *((void *)this + 7) = v96;
            *((void *)this + 8) = v73;
            *((void *)this + 9) = v82 + 4 * v83;
            if (v78) {
              operator delete(v78);
            }
          }
          else
          {
            *(_DWORD *)v72 = 0;
            uint64_t v73 = v72 + 4;
          }
          *((void *)this + 8) = v73;
          goto LABEL_165;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v34 = *((void *)a2 + 1);
            unint64_t v35 = *((void *)a2 + 2);
            while (v34 < v35 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v37 = (char *)*((void *)this + 5);
              unint64_t v36 = *((void *)this + 6);
              if ((unint64_t)v37 >= v36)
              {
                unint64_t v39 = (char *)*((void *)this + 4);
                uint64_t v40 = (v37 - v39) >> 2;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
                  goto LABEL_177;
                }
                uint64_t v42 = v36 - (void)v39;
                if (v42 >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  unint64_t v43 = (unint64_t)sub_2572C76F0(v43);
                  unint64_t v39 = (char *)*((void *)this + 4);
                  unint64_t v37 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v44 = 0;
                }
                char v45 = (_DWORD *)(v43 + 4 * v40);
                *char v45 = 0;
                unint64_t v38 = v45 + 1;
                while (v37 != v39)
                {
                  int v46 = *((_DWORD *)v37 - 1);
                  v37 -= 4;
                  *--char v45 = v46;
                }
                *((void *)this + 4) = v45;
                *((void *)this + 5) = v38;
                *((void *)this + 6) = v43 + 4 * v44;
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v37 = 0;
                unint64_t v38 = v37 + 4;
              }
              *((void *)this + 5) = v38;
              unint64_t v47 = *((void *)a2 + 1);
              if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *(v38 - 1) = *(_DWORD *)(*(void *)a2 + v47);
              unint64_t v35 = *((void *)a2 + 2);
              unint64_t v34 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v34;
            }
            goto LABEL_119;
          }
          unint64_t v75 = (char *)*((void *)this + 5);
          unint64_t v74 = *((void *)this + 6);
          if ((unint64_t)v75 >= v74)
          {
            unint64_t v84 = (char *)*((void *)this + 4);
            uint64_t v85 = (v75 - v84) >> 2;
            unint64_t v86 = v85 + 1;
            if ((unint64_t)(v85 + 1) >> 62) {
              goto LABEL_177;
            }
            uint64_t v87 = v74 - (void)v84;
            if (v87 >> 1 > v86) {
              unint64_t v86 = v87 >> 1;
            }
            if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v88 = v86;
            }
            if (v88)
            {
              unint64_t v88 = (unint64_t)sub_2572C76F0(v88);
              unint64_t v84 = (char *)*((void *)this + 4);
              unint64_t v75 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v89 = 0;
            }
            v98 = (_DWORD *)(v88 + 4 * v85);
            _DWORD *v98 = 0;
            uint64_t v73 = v98 + 1;
            while (v75 != v84)
            {
              int v99 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *--v98 = v99;
            }
            *((void *)this + 4) = v98;
            *((void *)this + 5) = v73;
            *((void *)this + 6) = v88 + 4 * v89;
            if (v84) {
              operator delete(v84);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v75 = 0;
            uint64_t v73 = v75 + 4;
          }
          *((void *)this + 5) = v73;
          goto LABEL_165;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v48 = *((void *)a2 + 1);
            unint64_t v49 = *((void *)a2 + 2);
            while (v48 < v49 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v51 = (char *)*((void *)this + 2);
              unint64_t v50 = *((void *)this + 3);
              if ((unint64_t)v51 >= v50)
              {
                uint64_t v53 = (char *)*((void *)this + 1);
                uint64_t v54 = (v51 - v53) >> 2;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 62) {
                  goto LABEL_177;
                }
                uint64_t v56 = v50 - (void)v53;
                if (v56 >> 1 > v55) {
                  unint64_t v55 = v56 >> 1;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v57 = v55;
                }
                if (v57)
                {
                  unint64_t v57 = (unint64_t)sub_2572C76F0(v57);
                  uint64_t v53 = (char *)*((void *)this + 1);
                  unint64_t v51 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v58 = 0;
                }
                int64_t v59 = (_DWORD *)(v57 + 4 * v54);
                *int64_t v59 = 0;
                char v52 = v59 + 1;
                while (v51 != v53)
                {
                  int v60 = *((_DWORD *)v51 - 1);
                  v51 -= 4;
                  *--int64_t v59 = v60;
                }
                *((void *)this + 1) = v59;
                *((void *)this + 2) = v52;
                *((void *)this + 3) = v57 + 4 * v58;
                if (v53) {
                  operator delete(v53);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v51 = 0;
                char v52 = v51 + 4;
              }
              *((void *)this + 2) = v52;
              unint64_t v61 = *((void *)a2 + 1);
              if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2))
              {
LABEL_118:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v52 - 1) = *(_DWORD *)(*(void *)a2 + v61);
              unint64_t v49 = *((void *)a2 + 2);
              unint64_t v48 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v48;
            }
LABEL_119:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v77 = (char *)*((void *)this + 2);
            unint64_t v76 = *((void *)this + 3);
            if ((unint64_t)v77 >= v76)
            {
              v90 = (char *)*((void *)this + 1);
              uint64_t v91 = (v77 - v90) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_177:
              }
                sub_2570AFD0C();
              uint64_t v93 = v76 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unint64_t v94 = (unint64_t)sub_2572C76F0(v94);
                v90 = (char *)*((void *)this + 1);
                uint64_t v77 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v95 = 0;
              }
              v100 = (_DWORD *)(v94 + 4 * v91);
              _DWORD *v100 = 0;
              uint64_t v73 = v100 + 1;
              while (v77 != v90)
              {
                int v101 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--v100 = v101;
              }
              *((void *)this + 1) = v100;
              *((void *)this + 2) = v73;
              *((void *)this + 3) = v94 + 4 * v95;
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v77 = 0;
              uint64_t v73 = v77 + 4;
            }
            *((void *)this + 2) = v73;
LABEL_165:
            unint64_t v102 = *((void *)a2 + 1);
            if (v102 <= 0xFFFFFFFFFFFFFFFBLL && v102 + 4 <= *((void *)a2 + 2))
            {
              *(v73 - 1) = *(_DWORD *)(*(void *)a2 + v102);
              uint64_t v70 = *((void *)a2 + 1) + 4;
LABEL_169:
              *((void *)a2 + 1) = v70;
            }
            else
            {
LABEL_167:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((unsigned char *)this + 116) |= 2u;
          unint64_t v62 = *((void *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((void *)a2 + 2)) {
            goto LABEL_167;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v62);
          goto LABEL_109;
        case 5u:
          *((unsigned char *)this + 116) |= 1u;
          unint64_t v63 = *((void *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((void *)a2 + 2)) {
            goto LABEL_167;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v63);
          goto LABEL_109;
        case 6u:
          *((unsigned char *)this + 116) |= 8u;
          unint64_t v64 = *((void *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((void *)a2 + 2)) {
            goto LABEL_167;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v64);
          goto LABEL_109;
        case 7u:
          *((unsigned char *)this + 116) |= 0x10u;
          unint64_t v65 = *((void *)a2 + 1);
          if (v65 >= *((void *)a2 + 2))
          {
            BOOL v68 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v66 = v65 + 1;
            int v67 = *(unsigned __int8 *)(*(void *)a2 + v65);
            *((void *)a2 + 1) = v66;
            BOOL v68 = v67 != 0;
          }
          *((unsigned char *)this + 112) = v68;
          goto LABEL_170;
        case 8u:
          *((unsigned char *)this + 116) |= 4u;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((void *)a2 + 2)) {
            goto LABEL_167;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v69);
LABEL_109:
          uint64_t v70 = *((void *)a2 + 1) + 8;
          goto LABEL_169;
        default:
          goto LABEL_19;
      }
      goto LABEL_170;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_170:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::AccelTNBFrame::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(float **)(this + 56);
  uint64_t v5 = *(float **)(this + 64);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(float **)(v3 + 8);
  unint64_t v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(unsigned char *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88));
    char v13 = *(unsigned char *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
  else if ((*(unsigned char *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  char v13 = *(unsigned char *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0) {
      goto LABEL_14;
    }
LABEL_19:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 116) & 4) == 0) {
      return this;
    }
    goto LABEL_20;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  char v13 = *(unsigned char *)(v3 + 116);
  if ((v13 & 0x10) != 0) {
    goto LABEL_19;
  }
LABEL_14:
  if ((v13 & 4) == 0) {
    return this;
  }
LABEL_20:
  double v14 = *(double *)(v3 + 96);
  return PB::Writer::write(a2, v14);
}

BOOL CMMsl::AccelTNBFrame::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(float **)(a1 + 56);
  unint64_t v2 = *(float **)(a1 + 64);
  int v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 64) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 32);
  uint64_t v5 = *(float **)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 8);
  uint64_t v8 = *(float **)(a1 + 16);
  unsigned int v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 16) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  if ((*(unsigned char *)(a1 + 116) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 116))
  {
    if ((*(unsigned char *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 116))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v11 = (*(unsigned char *)(a2 + 116) & 4) == 0;
  if ((*(unsigned char *)(a1 + 116) & 4) != 0) {
    return (*(unsigned char *)(a2 + 116) & 4) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  }
  return v11;
}

uint64_t CMMsl::AccelTNBFrame::hash_value(CMMsl::AccelTNBFrame *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 116) & 2) == 0)
  {
    double v5 = 0.0;
    if (*((unsigned char *)this + 116)) {
      goto LABEL_3;
    }
LABEL_16:
    double v6 = 0.0;
    if ((*((unsigned char *)this + 116) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v7 = 0.0;
    if ((*((unsigned char *)this + 116) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v5 = *((double *)this + 11);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 1) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v6 = *((double *)this + 10);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v7 = *((double *)this + 13);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *((unsigned __int8 *)this + 112);
    if ((*((unsigned char *)this + 116) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_19:
    double v9 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9;
  }
LABEL_18:
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 116) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  double v9 = *((double *)this + 12);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ *(void *)&v9;
}

uint64_t CMMsl::AccelerometerPace::AccelerometerPace(uint64_t this)
{
  *(void *)this = &unk_27063FEA0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FEA0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelerometerPace::~AccelerometerPace(CMMsl::AccelerometerPace *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::AccelerometerPace::AccelerometerPace(CMMsl::AccelerometerPace *this, const CMMsl::AccelerometerPace *a2)
{
  *(void *)this = &unk_27063FEA0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 32) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    *((unsigned char *)this + 32) = v3 | 4;
    *((double *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, const CMMsl::AccelerometerPace *a2)
{
  if ((const CMMsl::AccelerometerPace *)a1 != a2)
  {
    CMMsl::AccelerometerPace::AccelerometerPace((CMMsl::AccelerometerPace *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelerometerPace *a2, CMMsl::AccelerometerPace *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::AccelerometerPace::AccelerometerPace(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FEA0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_27063FEA0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_27063FEA0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 32);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::AccelerometerPace::formatText(CMMsl::AccelerometerPace *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "calibrated", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lowerBound", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "upperBound", *((double *)this + 3));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccelerometerPace::readFrom(CMMsl::AccelerometerPace *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v19 != 1)
        {
LABEL_27:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_37;
        }
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_37:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelerometerPace::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 32) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::AccelerometerPace::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 4) == 0;
  if ((*(unsigned char *)(a1 + 32) & 4) != 0) {
    return (*(unsigned char *)(a2 + 32) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccelerometerPace::hash_value(CMMsl::AccelerometerPace *this)
{
  if (*((unsigned char *)this + 32))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this)
{
  *(void *)this = &unk_27063FED8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FED8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryAccel::~AccessoryAccel(CMMsl::AccessoryAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27063FED8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryAccel::~AccessoryAccel(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this, const CMMsl::AccessoryAccel *a2)
{
  *(void *)this = &unk_27063FED8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0) {
        return this;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *(unsigned char *)(this + 32) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  if ((*((unsigned char *)a2 + 32) & 1) == 0) {
    return this;
  }
LABEL_6:
  uint64_t v3 = *((void *)a2 + 2);
  *(unsigned char *)(this + 32) |= 1u;
  *(void *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, const CMMsl::AccessoryAccel *a2)
{
  if ((const CMMsl::AccessoryAccel *)a1 != a2)
  {
    CMMsl::AccessoryAccel::AccessoryAccel((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryAccel::~AccessoryAccel((CMMsl::AccessoryAccel *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryAccel *a2, CMMsl::AccessoryAccel *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v7 = *(void *)(this + 16);
  uint64_t v8 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FED8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryAccel::AccessoryAccel((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryAccel::~AccessoryAccel((CMMsl::AccessoryAccel *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccel::formatText(CMMsl::AccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accel");
  }
  char v6 = *((unsigned char *)this + 32);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    char v6 = *((unsigned char *)this + 32);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "sensorTime");
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryAccel::readFrom(CMMsl::AccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_75;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_55:
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v47 = v21 + 1;
            char v48 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v47;
            v26 |= (unint64_t)(v48 & 0x7F) << v45;
            if (v48 < 0)
            {
              v45 += 7;
              unint64_t v21 = v47;
              BOOL v14 = v46++ > 8;
              if (v14) {
                goto LABEL_55;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_75:
        *((_DWORD *)this + 6) = v26;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_78;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_62:
          LODWORD(v34) = 0;
          goto LABEL_78;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v51 = v29 + 1;
            char v52 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v51;
            v34 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              unint64_t v29 = v51;
              BOOL v14 = v50++ > 8;
              if (v14) {
                goto LABEL_62;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_78:
        *((_DWORD *)this + 7) = v34;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_81;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_69:
          uint64_t v42 = 0;
          goto LABEL_81;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v38 == v37)
      {
        uint64_t v42 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_81;
      }
      unint64_t v55 = v37 + 1;
      char v56 = *(unsigned char *)(v39 + v37);
      *((void *)a2 + 1) = v55;
      v42 |= (unint64_t)(v56 & 0x7F) << v53;
      if ((v56 & 0x80) == 0) {
        break;
      }
      v53 += 7;
      unint64_t v37 = v55;
      BOOL v14 = v54++ > 8;
      if (v14) {
        goto LABEL_69;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v42 = 0;
    }
LABEL_81:
    *((void *)this + 2) = v42;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
      return this;
    }
    goto LABEL_9;
  }
  this = PB::Writer::writeVarInt(a2);
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  if ((v5 & 1) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

unint64_t CMMsl::AccessoryAccel::hash_value(CMMsl::AccessoryAccel *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  }
  if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  uint64_t v3 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 7);
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

uint64_t CMMsl::AccessoryAccel::makeAccel(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(void *this)
{
  *this = &unk_27063FF10;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_27063FF10;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(CMMsl::AccessoryAccelConfig *this)
{
  *(void *)this = &unk_27063FF10;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    sub_2572C6E48(v3);
  }
  sub_2572C6E9C((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(void *this, const CMMsl::AccessoryAccelConfig *a2)
{
  *this = &unk_27063FF10;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, const CMMsl::AccessoryAccelConfig *a2)
{
  if ((const CMMsl::AccessoryAccelConfig *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::AccessoryAccelConfig *a2, CMMsl::AccessoryAccelConfig *a3)
{
  uint64_t v3 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v3;
  uint64_t v4 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  return this;
}

void *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(void *a1, void *a2)
{
  *a1 = &unk_27063FF10;
  a1[1] = 0;
  uint64_t v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  uint64_t v6 = a1[3];
  a1[3] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  long long v7 = (void **)a2[1];
  a2[1] = 0;
  sub_2572C6E9C(v4, v7);
  uint64_t v8 = a2[2];
  a2[2] = 0;
  uint64_t v9 = a1[2];
  a1[2] = v8;
  if (v9) {
    sub_2572C6E48(v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::formatText(CMMsl::AccessoryAccelConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryAccelConfig::readFrom(CMMsl::AccessoryAccelConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_23:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        operator new();
      }
      if (v19 == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_23;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this)
{
  *(void *)this = &unk_27063FFB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FFB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 24);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 16))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a2[3];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a2[1];
  if (a1[1])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[1] | a2[1]) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v7 = (unsigned __int8 *)a1[2];
  char v8 = (unsigned __int8 **)a2[2];
  uint64_t result = v8 == 0;
  if (!v7) {
    return result;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v10 = v7[23];
  if ((v10 & 0x80u) == 0) {
    unint64_t v11 = (unsigned __int8 *)v7[23];
  }
  else {
    unint64_t v11 = (unsigned __int8 *)*((void *)v7 + 1);
  }
  char v12 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  int v13 = (char)v12;
  if ((char)v12 < 0) {
    char v12 = v8[1];
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    char v14 = (unsigned __int8 *)a2[2];
  }
  else {
    char v14 = *v8;
  }
  if ((v10 & 0x80) != 0) {
    return !memcmp(*(const void **)v7, v14, *((void *)v7 + 1));
  }
  if (!v7[23]) {
    return 1;
  }
  uint64_t v15 = v10 - 1;
  do
  {
    int v17 = *v7++;
    int v16 = v17;
    int v19 = *v14++;
    int v18 = v19;
    BOOL v21 = v15-- != 0;
    uint64_t result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

BOOL CMMsl::AccessoryConfig::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  char v5 = *(unsigned char *)(a2 + 32);
  if ((v4 & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7) {
      return 0;
    }
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      unsigned int v9 = (unsigned __int8 *)v6[23];
    }
    else {
      unsigned int v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      uint64_t v10 = v7[1];
    }
    if (v9 != v10) {
      return 0;
    }
    if (v11 >= 0) {
      char v12 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      char v12 = *v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((void *)v6 + 1))) {
        return 0;
      }
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8) {
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  int v13 = *(unsigned __int8 **)(a1 + 8);
  char v14 = *(unsigned __int8 ***)(a2 + 8);
  if (v13)
  {
    if (!v14) {
      return 0;
    }
    uint64_t v15 = v13[23];
    if ((v15 & 0x80u) == 0) {
      int v16 = (unsigned __int8 *)v13[23];
    }
    else {
      int v16 = (unsigned __int8 *)*((void *)v13 + 1);
    }
    int v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    int v18 = (char)v17;
    if ((char)v17 < 0) {
      int v17 = v14[1];
    }
    if (v16 != v17) {
      return 0;
    }
    if (v18 >= 0) {
      int v19 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v19 = *v14;
    }
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((void *)v13 + 1))) {
        return 0;
      }
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15) {
          goto LABEL_40;
        }
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  BOOL result = (v5 & 1) == 0;
  if ((v4 & 1) == 0) {
    return result;
  }
  return (v5 & 1) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

unint64_t CMMsl::AccessoryAccelConfig::hash_value(CMMsl::AccessoryAccelConfig *this)
{
  unint64_t v2 = (CMMsl::AccessoryConfig *)*((void *)this + 3);
  if (v2) {
    unint64_t v3 = CMMsl::AccessoryConfig::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((void *)this + 1)) {
    uint64_t v4 = PBHashBytes();
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *((void *)this + 2);
  if (v5) {
    unint64_t v5 = sub_2572C6F9C(v5);
  }
  return v4 ^ v3 ^ v5;
}

uint64_t CMMsl::AccessoryAccelConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this)
{
  *(void *)this = &unk_27063FF48;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FF48;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryActivityAlseepConfidenceEpoch::~AccessoryActivityAlseepConfidenceEpoch(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  *(void *)this = &unk_27063FF48;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(unsigned char *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 29);
    *(unsigned char *)(this + 32) = v3 | 0x20;
    *(unsigned char *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((unsigned char *)a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  if ((const CMMsl::AccessoryActivityAlseepConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v12;
    char v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v13;
    char v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 29);
  *((unsigned char *)this + 29) = *((unsigned char *)a2 + 29);
  *((unsigned char *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FF48;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_27063FF48;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 24);
    char v9 = *(unsigned char *)(a2 + 29);
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    int v20 = v10;
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v14[0] = &unk_27063FF48;
    v14[1] = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v5;
    char v18 = v11;
    LODWORD(v11) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v15 = v11;
    int v12 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    int v16 = v12;
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v17 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v9;
    char v19 = v11;
    PB::Base::~Base((PB::Base *)v14);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::formatText(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "initialized");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sensorTime");
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::readFrom(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_86;
            }
            unint64_t v45 = v21++;
            char v46 = *(unsigned char *)(v22 + v45);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_85:
              unint64_t v2 = v45 + 1;
              goto LABEL_86;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_85;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_86;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_86:
        *((void *)this + 1) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 28) = v28;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v33 = 0;
          if (v2 <= v29) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_91;
            }
            unint64_t v49 = v29++;
            char v50 = *(unsigned char *)(v30 + v49);
            *((void *)a2 + 1) = v29;
            v33 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0) {
              break;
            }
            v47 += 7;
            BOOL v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_90:
              unint64_t v2 = v49 + 1;
              goto LABEL_91;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v33) = 0;
          }
          goto LABEL_90;
        }
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        do
        {
          unint64_t v2 = v29 + 1;
          *((void *)a2 + 1) = v29 + 1;
          char v34 = *(unsigned char *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0) {
            goto LABEL_91;
          }
          v31 += 7;
          unint64_t v29 = v2;
          BOOL v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_91:
        *((_DWORD *)this + 4) = v33;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v35 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v36 = *(void *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v39 = 0;
          if (v2 <= v35) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_96;
            }
            unint64_t v53 = v35++;
            char v54 = *(unsigned char *)(v36 + v53);
            *((void *)a2 + 1) = v35;
            v39 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0) {
              break;
            }
            v51 += 7;
            BOOL v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_95:
              unint64_t v2 = v53 + 1;
              goto LABEL_96;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v39) = 0;
          }
          goto LABEL_95;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        do
        {
          unint64_t v2 = v35 + 1;
          *((void *)a2 + 1) = v35 + 1;
          char v40 = *(unsigned char *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0) {
            goto LABEL_96;
          }
          v37 += 7;
          unint64_t v35 = v2;
          BOOL v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_96:
        *((_DWORD *)this + 6) = v39;
        break;
      case 6u:
        *((unsigned char *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v42 = v41 != 0;
        }
        *((unsigned char *)this + 29) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::write(a2);
}

BOOL CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  }
  return v2;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 28);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 32) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v6 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this)
{
  *(void *)this = &unk_27063FF80;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FF80;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessoryActivityStateUpdate::~AccessoryActivityStateUpdate(CMMsl::AccessoryActivityStateUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  *(void *)this = &unk_27063FF80;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((unsigned char *)a2 + 28) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  if ((const CMMsl::AccessoryActivityStateUpdate *)a1 != a2)
  {
    CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryActivityStateUpdate *a2, CMMsl::AccessoryActivityStateUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_27063FF80;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(void *)uint64_t result = &unk_27063FF80;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = &unk_27063FF80;
    v8[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::formatText(CMMsl::AccessoryActivityStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "sensorTime");
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryActivityStateUpdate::readFrom(CMMsl::AccessoryActivityStateUpdate *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_90;
            }
            unint64_t v46 = v20++;
            char v47 = *(unsigned char *)(v21 + v46);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_89:
              unint64_t v3 = v46 + 1;
              goto LABEL_90;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_89;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v3 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_90;
          }
          v22 += 7;
          unint64_t v20 = v3;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_90:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_95;
            }
            unint64_t v50 = v26++;
            char v51 = *(unsigned char *)(v27 + v50);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_94:
              unint64_t v3 = v50 + 1;
              goto LABEL_95;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_94;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v3 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_95;
          }
          v28 += 7;
          unint64_t v26 = v3;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_95:
        *((_DWORD *)this + 4) = v30;
        break;
      case 3u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_100;
            }
            unint64_t v54 = v32++;
            char v55 = *(unsigned char *)(v33 + v54);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_99:
              unint64_t v3 = v54 + 1;
              goto LABEL_100;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_99;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v3 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_100;
          }
          v34 += 7;
          unint64_t v32 = v3;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_100:
        *((_DWORD *)this + 5) = v36;
        break;
      case 4u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_105;
            }
            unint64_t v58 = v38++;
            char v59 = *(unsigned char *)(v39 + v58);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_104:
              unint64_t v3 = v58 + 1;
              goto LABEL_105;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_104;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v3 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_105;
          }
          v40 += 7;
          unint64_t v38 = v3;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_105:
        *((_DWORD *)this + 6) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryActivityStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::hash_value(CMMsl::AccessoryActivityStateUpdate *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 4);
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      uint64_t v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

void CMMsl::AccessoryConfig::~AccessoryConfig(CMMsl::AccessoryConfig *this)
{
  *(void *)this = &unk_27063FFB8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    sub_2572C6E48(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryConfig::~AccessoryConfig(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this, const CMMsl::AccessoryConfig *a2)
{
  *(void *)this = &unk_27063FFB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
    int v2 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(this + 32) = 2;
    *(_DWORD *)(this + 28) = v2;
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 32))
  {
    int v3 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 1u;
    *(_DWORD *)(this + 24) = v3;
  }
  return this;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig *a2)
{
  if ((const CMMsl::AccessoryConfig *)a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryConfig *a2, CMMsl::AccessoryConfig *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)a2 + 3);
  uint64_t v7 = *((void *)this + 3);
  *((double *)this + 3) = result;
  *((void *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = &unk_27063FFB8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    sub_2572C6E48(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  uint64_t *v4 = v7;
  if (v8) {
    sub_2572C6E48(v8);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryConfig::formatText(CMMsl::AccessoryConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 32)) {
    PB::TextFormatter::format(a2, "hardwareModel");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    PB::TextFormatter::format(a2, "side");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryConfig::readFrom(CMMsl::AccessoryConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_56;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_45:
          LODWORD(v25) = 0;
          goto LABEL_56;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v38 = v20 + 1;
            char v39 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v38;
            v25 |= (unint64_t)(v39 & 0x7F) << v36;
            if (v39 < 0)
            {
              v36 += 7;
              unint64_t v20 = v38;
              BOOL v14 = v37++ > 8;
              if (v14) {
                goto LABEL_45;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_56:
        *((_DWORD *)this + 7) = v25;
        goto LABEL_61;
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          do
          {
            unint64_t v34 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v35 = *(unsigned char *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_60;
            }
            v31 += 7;
            unint64_t v28 = v34;
            BOOL v14 = v32++ > 8;
          }
          while (!v14);
LABEL_52:
          LODWORD(v33) = 0;
          goto LABEL_60;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v33 = 0;
        if (v29 <= v28) {
          unint64_t v29 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v29 == v28)
      {
        LODWORD(v33) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_60;
      }
      unint64_t v42 = v28 + 1;
      char v43 = *(unsigned char *)(v30 + v28);
      *((void *)a2 + 1) = v42;
      v33 |= (unint64_t)(v43 & 0x7F) << v40;
      if ((v43 & 0x80) == 0) {
        break;
      }
      v40 += 7;
      unint64_t v28 = v42;
      BOOL v14 = v41++ > 8;
      if (v14) {
        goto LABEL_52;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v33) = 0;
    }
LABEL_60:
    *((_DWORD *)this + 6) = v33;
LABEL_61:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_61;
  }
  return result;
}

uint64_t CMMsl::AccessoryConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 32) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 8)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 32))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

unint64_t CMMsl::AccessoryConfig::hash_value(CMMsl::AccessoryConfig *this)
{
  char v2 = *((unsigned char *)this + 32);
  if ((v2 & 2) != 0) {
    uint64_t v3 = *((int *)this + 7);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v5 = sub_2572C6F9C(v4);
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = *((void *)this + 1);
  if (v6) {
    unint64_t v6 = sub_2572C6F9C(v6);
  }
  if (v2) {
    uint64_t v7 = *((int *)this + 6);
  }
  else {
    uint64_t v7 = 0;
  }
  return v5 ^ v3 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this)
{
  *(void *)this = &unk_27063FFF0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_27063FFF0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion(CMMsl::AccessoryDeviceMotion *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_27063FFF0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this, const CMMsl::AccessoryDeviceMotion *a2)
{
  *(void *)this = &unk_27063FFF0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) |= 1u;
    *(_DWORD *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) |= 2u;
    *(_DWORD *)(this + 20) = v4;
  }
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotion *a2)
{
  if ((const CMMsl::AccessoryDeviceMotion *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion((CMMsl::AccessoryDeviceMotion *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotion *a2, CMMsl::AccessoryDeviceMotion *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_27063FFF0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion((CMMsl::AccessoryDeviceMotion *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::formatText(CMMsl::AccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "dm");
  }
  char v6 = *((unsigned char *)this + 24);
  if (v6)
  {
    PB::TextFormatter::format(a2, "location");
    char v6 = *((unsigned char *)this + 24);
  }
  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(a2, "sequenceNumber");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryDeviceMotion::readFrom(CMMsl::AccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v40 = v22 + 1;
            char v41 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v40;
            v27 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            unint64_t v22 = v40;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
LABEL_50:
              LODWORD(v27) = 0;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_50;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v27;
      }
      else if (v21 == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v31)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_65;
            }
            unint64_t v44 = v30 + 1;
            char v45 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v44;
            v35 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            unint64_t v30 = v44;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
LABEL_57:
              LODWORD(v35) = 0;
              goto LABEL_65;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v35) = 0;
          }
        }
        else
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          while (1)
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
            if (v14) {
              goto LABEL_57;
            }
          }
        }
LABEL_65:
        *((_DWORD *)this + 4) = v35;
      }
      else
      {
        if (v21 == 1) {
          operator new();
        }
LABEL_19:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_25;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::DeviceMotion(uint64_t this)
{
  *(void *)this = &unk_2706410C8;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

{
  *(void *)this = &unk_2706410C8;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 24);
  if (v5)
  {
    this = PB::Writer::writeVarInt(a2);
    char v5 = *(unsigned char *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::AccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

BOOL CMMsl::DeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 124);
  int v3 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x400000) == 0;
  if ((v2 & 0x400000) != 0) {
    return (v3 & 0x400000) != 0 && *(float *)(a1 + 116) == *(float *)(a2 + 116);
  }
  return v4;
}

unint64_t CMMsl::AccessoryDeviceMotion::hash_value(CMMsl::AccessoryDeviceMotion *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v3 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 5);
  return v3 ^ v2 ^ v4;
}

uint64_t CMMsl::AccessoryDeviceMotion::makeDm(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  *(void *)this = &unk_270640028;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640028;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  *(void *)this = &unk_270640028;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AccessoryDeviceMotionConfig *CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  *(void *)this = &unk_270640028;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 44))
  {
    char v3 = *((unsigned char *)a2 + 40);
    *((unsigned char *)this + 44) |= 1u;
    *((unsigned char *)this + 40) = v3;
  }
  if (this != a2) {
    sub_2572C75B4((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  if ((const CMMsl::AccessoryDeviceMotionConfig *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotionConfig *a2, CMMsl::AccessoryDeviceMotionConfig *a3)
{
  int v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 40);
  *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640028;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::formatText(CMMsl::AccessoryDeviceMotionConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "headToHeadsetTransformation", v8);
  }
  if (*((unsigned char *)this + 44)) {
    PB::TextFormatter::format(a2, "isH2HValid");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AccessoryDeviceMotionConfig::readFrom(CMMsl::AccessoryDeviceMotionConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          while (v20 < v21 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v23 = (char *)*((void *)this + 2);
            unint64_t v22 = *((void *)this + 3);
            if ((unint64_t)v23 >= v22)
            {
              char v25 = (char *)*((void *)this + 1);
              uint64_t v26 = (v23 - v25) >> 2;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                goto LABEL_83;
              }
              uint64_t v28 = v22 - (void)v25;
              if (v28 >> 1 > v27) {
                unint64_t v27 = v28 >> 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                unint64_t v29 = (unint64_t)sub_2572C76F0(v29);
                char v25 = (char *)*((void *)this + 1);
                unint64_t v23 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v30 = 0;
              }
              unint64_t v31 = (_DWORD *)(v29 + 4 * v26);
              _DWORD *v31 = 0;
              uint64_t v24 = v31 + 1;
              while (v23 != v25)
              {
                int v32 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *--unint64_t v31 = v32;
              }
              *((void *)this + 1) = v31;
              *((void *)this + 2) = v24;
              *((void *)this + 3) = v29 + 4 * v30;
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v23 = 0;
              uint64_t v24 = v23 + 4;
            }
            *((void *)this + 2) = v24;
            unint64_t v33 = *((void *)a2 + 1);
            if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v24 - 1) = *(_DWORD *)(*(void *)a2 + v33);
            unint64_t v21 = *((void *)a2 + 2);
            unint64_t v20 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v20;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unsigned int v39 = (char *)*((void *)this + 2);
          unint64_t v38 = *((void *)this + 3);
          if ((unint64_t)v39 >= v38)
          {
            char v41 = (char *)*((void *)this + 1);
            uint64_t v42 = (v39 - v41) >> 2;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 62) {
LABEL_83:
            }
              sub_2570AFD0C();
            uint64_t v44 = v38 - (void)v41;
            if (v44 >> 1 > v43) {
              unint64_t v43 = v44 >> 1;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
              char v41 = (char *)*((void *)this + 1);
              unsigned int v39 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v46 = 0;
            }
            char v47 = (_DWORD *)(v45 + 4 * v42);
            *char v47 = 0;
            unint64_t v40 = v47 + 1;
            while (v39 != v41)
            {
              int v48 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *--char v47 = v48;
            }
            *((void *)this + 1) = v47;
            *((void *)this + 2) = v40;
            *((void *)this + 3) = v45 + 4 * v46;
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v39 = 0;
            unint64_t v40 = v39 + 4;
          }
          *((void *)this + 2) = v40;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *((void *)a2 + 2))
          {
            *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
            *((void *)a2 + 1) += 4;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v34 = *((void *)a2 + 1);
        if (v34 >= *((void *)a2 + 2))
        {
          BOOL v37 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v35 = v34 + 1;
          int v36 = *(unsigned __int8 *)(*(void *)a2 + v34);
          *((void *)a2 + 1) = v35;
          BOOL v37 = v36 != 0;
        }
        *((unsigned char *)this + 40) = v37;
      }
      else
      {
        if (v19 == 1) {
          operator new();
        }
LABEL_19:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 44)) {
    this = PB::Writer::write(a2);
  }
  uint64_t v6 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    float v7 = *v6++;
    this = PB::Writer::write(a2, v7);
  }
  return this;
}

BOOL CMMsl::AccessoryDeviceMotionConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(float **)(a2 + 8);
  if (v6 - v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  if (v7 == v6) {
    return 1;
  }
  uint64_t v9 = v7 + 4;
  do
  {
    float v10 = *v8++;
    BOOL result = *(float *)(v9 - 4) == v10;
    BOOL v12 = *(float *)(v9 - 4) != v10 || v9 == v6;
    v9 += 4;
  }
  while (!v12);
  return result;
}

unint64_t CMMsl::AccessoryDeviceMotionConfig::hash_value(CMMsl::AccessoryDeviceMotionConfig *this)
{
  unint64_t v2 = *((void *)this + 4);
  if (v2) {
    unint64_t v2 = CMMsl::AccessoryConfig::hash_value((CMMsl::AccessoryConfig *)v2);
  }
  if (*((unsigned char *)this + 44)) {
    uint64_t v3 = *((unsigned __int8 *)this + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2 ^ PBHashBytes();
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this)
{
  *(void *)this = &unk_270640060;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270640060;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryGyro::~AccessoryGyro(CMMsl::AccessoryGyro *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640060;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyro::~AccessoryGyro(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this, const CMMsl::AccessoryGyro *a2)
{
  *(void *)this = &unk_270640060;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 36) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)a2 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *(unsigned char *)(this + 36) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
LABEL_11:
  int v6 = *((_DWORD *)a2 + 8);
  *(unsigned char *)(this + 36) |= 8u;
  *(_DWORD *)(this + 32) = v6;
  if ((*((unsigned char *)a2 + 36) & 1) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v3 = *((void *)a2 + 2);
  *(unsigned char *)(this + 36) |= 1u;
  *(void *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, const CMMsl::AccessoryGyro *a2)
{
  if ((const CMMsl::AccessoryGyro *)a1 != a2)
  {
    CMMsl::AccessoryGyro::AccessoryGyro((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v12;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v7;
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v8;
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    CMMsl::AccessoryGyro::~AccessoryGyro((CMMsl::AccessoryGyro *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryGyro *a2, CMMsl::AccessoryGyro *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((void *)a2 + 2);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = v8;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v7;
  return result;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640060;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyro::AccessoryGyro((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v12;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v7;
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v8;
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    CMMsl::AccessoryGyro::~AccessoryGyro((CMMsl::AccessoryGyro *)v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyro::formatText(CMMsl::AccessoryGyro *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "gyro");
  }
  char v6 = *((unsigned char *)this + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location");
    char v6 = *((unsigned char *)this + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "sensorTime");
  char v6 = *((unsigned char *)this + 36);
  if ((v6 & 4) == 0)
  {
LABEL_6:
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "sequenceNumber");
  if ((*((unsigned char *)this + 36) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "temp", *((float *)this + 8));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryGyro::readFrom(CMMsl::AccessoryGyro *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_79;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_58:
          LODWORD(v26) = 0;
          goto LABEL_79;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v48 = v21 + 1;
            char v49 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v48;
            v26 |= (unint64_t)(v49 & 0x7F) << v46;
            if (v49 < 0)
            {
              v46 += 7;
              unint64_t v21 = v48;
              BOOL v14 = v47++ > 8;
              if (v14) {
                goto LABEL_58;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_79:
        *((_DWORD *)this + 6) = v26;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_82;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_65:
          LODWORD(v34) = 0;
          goto LABEL_82;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v52 = v29 + 1;
            char v53 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v52;
            v34 |= (unint64_t)(v53 & 0x7F) << v50;
            if (v53 < 0)
            {
              v50 += 7;
              unint64_t v29 = v52;
              BOOL v14 = v51++ > 8;
              if (v14) {
                goto LABEL_65;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 7) = v34;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v37 = *((void *)a2 + 1);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v37);
          *((void *)a2 + 1) += 4;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 5u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v39 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          do
          {
            unint64_t v44 = v38 + 1;
            *((void *)a2 + 1) = v38 + 1;
            char v45 = *(unsigned char *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0) {
              goto LABEL_85;
            }
            v41 += 7;
            unint64_t v38 = v44;
            BOOL v14 = v42++ > 8;
          }
          while (!v14);
LABEL_72:
          uint64_t v43 = 0;
          goto LABEL_85;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v43 = 0;
        if (v39 <= v38) {
          unint64_t v39 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v39 == v38)
      {
        uint64_t v43 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_85;
      }
      unint64_t v56 = v38 + 1;
      char v57 = *(unsigned char *)(v40 + v38);
      *((void *)a2 + 1) = v56;
      v43 |= (unint64_t)(v57 & 0x7F) << v54;
      if ((v57 & 0x80) == 0) {
        break;
      }
      v54 += 7;
      unint64_t v38 = v56;
      BOOL v14 = v55++ > 8;
      if (v14) {
        goto LABEL_72;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v43 = 0;
    }
LABEL_85:
    *((void *)this + 2) = v43;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this)
{
  *(void *)this = &unk_270641C98;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_270641C98;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryGyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v5 = *(unsigned char *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      this = PB::Writer::write(a2, *(float *)(v3 + 32));
      if ((*(unsigned char *)(v3 + 36) & 1) == 0) {
        return this;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  char v5 = *(unsigned char *)(v3 + 36);
  if ((v5 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v5 & 1) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryGyro::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Gyro::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 36) & 1) == 0;
  if ((*(unsigned char *)(a1 + 36) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 36) & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL CMMsl::Gyro::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 44);
  __int16 v3 = *(_WORD *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 44) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 44) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 44) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v4;
}

unint64_t CMMsl::AccessoryGyro::hash_value(CMMsl::AccessoryGyro *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::Gyro::hash_value((CMMsl::Gyro *)v2);
  }
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 36) & 4) != 0)
    {
LABEL_5:
      uint64_t v4 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 36) & 8) != 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_5;
    }
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 36) & 8) != 0)
  {
LABEL_6:
    float v5 = *((float *)this + 8);
    uint64_t v6 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    if (*((unsigned char *)this + 36)) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v7 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v7;
  }
LABEL_12:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v7 = *((void *)this + 2);
  return v3 ^ v2 ^ v4 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryGyro::makeGyro(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(void *this)
{
  *this = &unk_270640098;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640098;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(CMMsl::AccessoryGyroCachedBias *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640098;
  *((void *)this + 1) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(void *this, const CMMsl::AccessoryGyroCachedBias *a2)
{
  *this = &unk_270640098;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryGyroCachedBias *CMMsl::AccessoryGyroCachedBias::operator=(const CMMsl::AccessoryGyroCachedBias *a1, const CMMsl::AccessoryGyroCachedBias *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroCachedBias *a2, CMMsl::AccessoryGyroCachedBias *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(void *a1, uint64_t a2)
{
  *a1 = &unk_270640098;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640098;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640098;
    v6[1] = v4;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::formatText(CMMsl::AccessoryGyroCachedBias *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryGyroCachedBias::readFrom(CMMsl::AccessoryGyroCachedBias *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroCachedBias::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroCachedBias::hash_value(CMMsl::AccessoryGyroCachedBias *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return sub_2572C6F9C(result);
  }
  return result;
}

void *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(void *this)
{
  *this = &unk_2706400D0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_2706400D0;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig(CMMsl::AccessoryGyroConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706400D0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(void *this, const CMMsl::AccessoryGyroConfig *a2)
{
  *this = &unk_2706400D0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryGyroConfig *CMMsl::AccessoryGyroConfig::operator=(const CMMsl::AccessoryGyroConfig *a1, const CMMsl::AccessoryGyroConfig *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig((CMMsl::AccessoryGyroConfig *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroConfig *a2, CMMsl::AccessoryGyroConfig *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(void *a1, uint64_t a2)
{
  *a1 = &unk_2706400D0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706400D0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706400D0;
    v6[1] = v4;
    CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig((CMMsl::AccessoryGyroConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::formatText(CMMsl::AccessoryGyroConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryGyroConfig::readFrom(CMMsl::AccessoryGyroConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::AccessoryGyroConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  }
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryGyroConfig::hash_value(CMMsl::AccessoryGyroConfig *this)
{
  BOOL result = (CMMsl::AccessoryConfig *)*((void *)this + 1);
  if (result) {
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccessoryGyroConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(void *this)
{
  *this = &unk_270640108;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640108;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(CMMsl::AccessoryGyroGYTT *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640108;
  *((void *)this + 1) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(void *this, const CMMsl::AccessoryGyroGYTT *a2)
{
  *this = &unk_270640108;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryGyroGYTT *CMMsl::AccessoryGyroGYTT::operator=(const CMMsl::AccessoryGyroGYTT *a1, const CMMsl::AccessoryGyroGYTT *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroGYTT *a2, CMMsl::AccessoryGyroGYTT *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(void *a1, uint64_t a2)
{
  *a1 = &unk_270640108;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640108;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    sub_2572C6E48(v4);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640108;
    v6[1] = v4;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::formatText(CMMsl::AccessoryGyroGYTT *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryGyroGYTT::readFrom(CMMsl::AccessoryGyroGYTT *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroGYTT::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(void *)(this + 8)) {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unsigned int v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    unsigned int v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroGYTT::hash_value(CMMsl::AccessoryGyroGYTT *this)
{
  unint64_t result = *((void *)this + 1);
  if (result) {
    return sub_2572C6F9C(result);
  }
  return result;
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this)
{
  *(void *)this = &unk_270640140;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270640140;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryHeartRate::~AccessoryHeartRate(CMMsl::AccessoryHeartRate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this, const CMMsl::AccessoryHeartRate *a2)
{
  *(void *)this = &unk_270640140;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 36) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 8);
      *(unsigned char *)(this + 36) = v3 | 0x10;
      *(_DWORD *)(this + 32) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 36) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 36) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, const CMMsl::AccessoryHeartRate *a2)
{
  if ((const CMMsl::AccessoryHeartRate *)a1 != a2)
  {
    CMMsl::AccessoryHeartRate::AccessoryHeartRate((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v11;
    int v11 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v10;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryHeartRate *a2, CMMsl::AccessoryHeartRate *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640140;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640140;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = &unk_270640140;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 36);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 28);
    uint64_t v7 = *(void *)(a2 + 28);
    *(_DWORD *)(a1 + 36) = v3;
    *(void *)(a1 + 28) = v7;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryHeartRate::formatText(CMMsl::AccessoryHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "heartRate");
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "sensorTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "sequenceNumber");
  if ((*((unsigned char *)this + 36) & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryHeartRate::readFrom(CMMsl::AccessoryHeartRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_73;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_38;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_61;
      case 2u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_66:
              unint64_t v2 = v34 + 1;
              goto LABEL_67;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_66;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_67;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_67:
        *((_DWORD *)this + 7) = v24;
        break;
      case 3u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_38;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_62;
      case 4u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_61:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_62:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_38:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 36) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_72;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_71:
              unint64_t v2 = v38 + 1;
              goto LABEL_72;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_71;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_72;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_72:
        *((_DWORD *)this + 8) = v30;
        break;
      default:
        goto LABEL_19;
    }
LABEL_73:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 36) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 36) & 0x10) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::AccessoryHeartRate::hash_value(CMMsl::AccessoryHeartRate *this)
{
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 36) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_15:
      uint64_t v4 = 0;
      if (*((unsigned char *)this + 36)) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 36) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_4:
  float v3 = *((float *)this + 6);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if (*((unsigned char *)this + 36))
  {
LABEL_7:
    double v5 = *((double *)this + 1);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v6 = 0;
    return v2 ^ *(void *)&v1 ^ v4 ^ *(void *)&v5 ^ v6;
  }
LABEL_16:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v6 = *((unsigned int *)this + 8);
  return v2 ^ *(void *)&v1 ^ v4 ^ *(void *)&v5 ^ v6;
}

uint64_t CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t this)
{
  *(void *)this = &unk_270640178;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_270640178;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::AccessoryInEarStatus::~AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this, const CMMsl::AccessoryInEarStatus *a2)
{
  *(void *)this = &unk_270640178;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

const CMMsl::AccessoryInEarStatus *CMMsl::AccessoryInEarStatus::operator=(const CMMsl::AccessoryInEarStatus *a1, const CMMsl::AccessoryInEarStatus *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryInEarStatus::AccessoryInEarStatus((CMMsl::AccessoryInEarStatus *)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v4;
    int v5 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryInEarStatus *a2, CMMsl::AccessoryInEarStatus *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640178;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270640178;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::AccessoryInEarStatus::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = &unk_270640178;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[2];
    int v5 = a2[3];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[2];
    a1[2] = v4;
    int v11 = v7;
    int v8 = a1[3];
    a1[3] = v5;
    int v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryInEarStatus::formatText(CMMsl::AccessoryInEarStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "status");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 3));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryInEarStatus::readFrom(CMMsl::AccessoryInEarStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryInEarStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::AccessoryInEarStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::AccessoryInEarStatus::hash_value(CMMsl::AccessoryInEarStatus *this)
{
  if ((*((unsigned char *)this + 16) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this)
{
  *(void *)this = &unk_2706401B0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_2706401B0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer(CMMsl::AccessoryMagnetometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706401B0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this, const CMMsl::AccessoryMagnetometer *a2)
{
  *(void *)this = &unk_2706401B0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0) {
        return this;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *(unsigned char *)(this + 32) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  if ((*((unsigned char *)a2 + 32) & 1) == 0) {
    return this;
  }
LABEL_6:
  uint64_t v3 = *((void *)a2 + 2);
  *(unsigned char *)(this + 32) |= 1u;
  *(void *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, const CMMsl::AccessoryMagnetometer *a2)
{
  if ((const CMMsl::AccessoryMagnetometer *)a1 != a2)
  {
    CMMsl::AccessoryMagnetometer::AccessoryMagnetometer((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer((CMMsl::AccessoryMagnetometer *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometer *a2, CMMsl::AccessoryMagnetometer *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  uint64_t v6 = *(void *)(this + 8);
  uint64_t v7 = *(void *)(this + 16);
  uint64_t v8 = *((void *)a2 + 2);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *(void *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((void *)a2 + 1) = v6;
  *((void *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706401B0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryMagnetometer::AccessoryMagnetometer((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v7;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer((CMMsl::AccessoryMagnetometer *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::formatText(CMMsl::AccessoryMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    PB::TextFormatter::format(a2, "location");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "magnetometer");
  }
  char v6 = *((unsigned char *)this + 32);
  if (v6)
  {
    PB::TextFormatter::format(a2, "sensorTime");
    char v6 = *((unsigned char *)this + 32);
  }
  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(a2, "sequenceNumber");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryMagnetometer::readFrom(CMMsl::AccessoryMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_75;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_55:
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v47 = v21 + 1;
            char v48 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v47;
            v26 |= (unint64_t)(v48 & 0x7F) << v45;
            if (v48 < 0)
            {
              v45 += 7;
              unint64_t v21 = v47;
              BOOL v14 = v46++ > 8;
              if (v14) {
                goto LABEL_55;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_75:
        *((_DWORD *)this + 6) = v26;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_78;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_62:
          LODWORD(v34) = 0;
          goto LABEL_78;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v51 = v29 + 1;
            char v52 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v51;
            v34 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              unint64_t v29 = v51;
              BOOL v14 = v50++ > 8;
              if (v14) {
                goto LABEL_62;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_78:
        *((_DWORD *)this + 7) = v34;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_81;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_69:
          uint64_t v42 = 0;
          goto LABEL_81;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v38 == v37)
      {
        uint64_t v42 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_81;
      }
      unint64_t v55 = v37 + 1;
      char v56 = *(unsigned char *)(v39 + v37);
      *((void *)a2 + 1) = v55;
      v42 |= (unint64_t)(v56 & 0x7F) << v53;
      if ((v56 & 0x80) == 0) {
        break;
      }
      v53 += 7;
      unint64_t v37 = v55;
      BOOL v14 = v54++ > 8;
      if (v14) {
        goto LABEL_69;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v42 = 0;
    }
LABEL_81:
    *((void *)this + 2) = v42;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this)
{
  *(void *)this = &unk_270643208;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270643208;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
      return this;
    }
    goto LABEL_9;
  }
  this = PB::Writer::writeVarInt(a2);
  char v5 = *(unsigned char *)(v3 + 32);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  if ((v5 & 1) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Magnetometer::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if ((*(unsigned char *)(a1 + 32) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL CMMsl::Magnetometer::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 2) == 0;
  if ((*(unsigned char *)(a1 + 36) & 2) != 0) {
    return (*(unsigned char *)(a2 + 36) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

unint64_t CMMsl::AccessoryMagnetometer::hash_value(CMMsl::AccessoryMagnetometer *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::Magnetometer::hash_value((CMMsl::Magnetometer *)v2);
  }
  if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v4 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  uint64_t v3 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 7);
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

uint64_t CMMsl::AccessoryMagnetometer::makeMagnetometer(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(void *this)
{
  *this = &unk_2706401E8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_2706401E8;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig(CMMsl::AccessoryMagnetometerConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706401E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(void *this, const CMMsl::AccessoryMagnetometerConfig *a2)
{
  *this = &unk_2706401E8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AccessoryMagnetometerConfig *CMMsl::AccessoryMagnetometerConfig::operator=(const CMMsl::AccessoryMagnetometerConfig *a1, const CMMsl::AccessoryMagnetometerConfig *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig((CMMsl::AccessoryMagnetometerConfig *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometerConfig *a2, CMMsl::AccessoryMagnetometerConfig *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(void *a1, uint64_t a2)
{
  *a1 = &unk_2706401E8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706401E8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706401E8;
    v6[1] = v4;
    CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig((CMMsl::AccessoryMagnetometerConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::formatText(CMMsl::AccessoryMagnetometerConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryMagnetometerConfig::readFrom(CMMsl::AccessoryMagnetometerConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::AccessoryMagnetometerConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  }
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryMagnetometerConfig::hash_value(CMMsl::AccessoryMagnetometerConfig *this)
{
  BOOL result = (CMMsl::AccessoryConfig *)*((void *)this + 1);
  if (result) {
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  *(void *)this = &unk_270640220;
  *((_DWORD *)this + 56) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640220;
  *((_DWORD *)this + 56) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

void CMMsl::AccessoryPPG::~AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  *(void *)this = &unk_270640220;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  char v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryPPG::~AccessoryPPG(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AccessoryPPG *CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this, const CMMsl::AccessoryPPG *a2)
{
  *(void *)this = &unk_270640220;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  char v5 = *((unsigned char *)a2 + 224);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 26);
    char v6 = 2;
    *((unsigned char *)this + 224) = 2;
    *((void *)this + 26) = v7;
    char v5 = *((unsigned char *)a2 + 224);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 224))
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 25);
    v6 |= 1u;
    *((unsigned char *)this + 224) = v6;
    *((void *)this + 25) = v8;
    char v5 = *((unsigned char *)a2 + 224);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v11 = *((_DWORD *)a2 + 55);
  v6 |= 8u;
  *((unsigned char *)this + 224) = v6;
  *((_DWORD *)this + 55) = v11;
  if ((*((unsigned char *)a2 + 224) & 4) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 54);
    *((unsigned char *)this + 224) = v6 | 4;
    *((_DWORD *)this + 54) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4((void *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4((void *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    sub_2572C75B4((void *)this + 19, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
    sub_2572C75B4((void *)this + 22, *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 2);
    sub_2572C75B4((void *)this + 13, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, const CMMsl::AccessoryPPG *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((CMMsl::AccessoryPPG *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryPPG *a2, CMMsl::AccessoryPPG *a3)
{
  int v3 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  int v4 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v4;
  int v5 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  uint64_t v14 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v14;
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v16;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v18;
  uint64_t v19 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v19;
  uint64_t v20 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v20;
  uint64_t v21 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v21;
  uint64_t v22 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v22;
  uint64_t v23 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v23;
  uint64_t v24 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v24;
  uint64_t v25 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v25;
  uint64_t v27 = *((void *)this + 24);
  uint64_t v26 = *((void *)this + 25);
  uint64_t v28 = *((void *)a2 + 25);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)this + 25) = v28;
  double result = *((double *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((double *)a2 + 26) = result;
  *((void *)a2 + 24) = v27;
  *((void *)a2 + 25) = v26;
  uint64_t v30 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v30;
  uint64_t v31 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v31;
  uint64_t v32 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v32;
  return result;
}

uint64_t CMMsl::AccessoryPPG::AccessoryPPG(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640220;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  uint64_t v6 = a1 + 128;
  uint64_t v7 = a1 + 176;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v8 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v9 = a1 + 152;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v10 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v10, (__n128 *)(a2 + 56));
  sub_2572C7560(v5, (__n128 *)(a2 + 80));
  sub_2572C7560(v6, (__n128 *)(a2 + 128));
  sub_2572C7560(v9, (__n128 *)(a2 + 152));
  sub_2572C7560(v7, (__n128 *)(a2 + 176));
  sub_2572C7560(v8, (__n128 *)(a2 + 104));
  return a1;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryPPG::formatText(CMMsl::AccessoryPPG *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "dark0");
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 5);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(a2, "dark1");
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v10 = *((void *)this + 8);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "dark2");
  }
  uint64_t v11 = *((void *)this + 10);
  uint64_t v12 = *((void *)this + 11);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "dark3");
  }
  char v13 = *((unsigned char *)this + 224);
  if ((v13 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "error");
    char v13 = *((unsigned char *)this + 224);
  }
  if ((v13 & 8) != 0) {
    PB::TextFormatter::format(a2, "frameNum");
  }
  uint64_t v14 = *((void *)this + 13);
  uint64_t v15 = *((void *)this + 14);
  while (v14 != v15)
  {
    v14 += 4;
    PB::TextFormatter::format(a2, "ledCurrent");
  }
  uint64_t v16 = *((void *)this + 16);
  uint64_t v17 = *((void *)this + 17);
  while (v16 != v17)
  {
    v16 += 4;
    PB::TextFormatter::format(a2, "light0");
  }
  uint64_t v18 = *((void *)this + 19);
  uint64_t v19 = *((void *)this + 20);
  while (v18 != v19)
  {
    v18 += 4;
    PB::TextFormatter::format(a2, "light1");
  }
  uint64_t v20 = *((void *)this + 22);
  uint64_t v21 = *((void *)this + 23);
  while (v20 != v21)
  {
    v20 += 4;
    PB::TextFormatter::format(a2, "rxGain");
  }
  char v22 = *((unsigned char *)this + 224);
  if (v22)
  {
    PB::TextFormatter::format(a2, "sensorTime");
    char v22 = *((unsigned char *)this + 224);
  }
  if ((v22 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 26));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AccessoryPPG::readFrom(CMMsl::AccessoryPPG *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v58 = v10++ > 8;
        if (v58) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v18 = v11 & 7;
      if (v18 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 224) |= 2u;
          unint64_t v19 = *((void *)a2 + 1);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 26) = *(void *)(*(void *)a2 + v19);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_704;
        case 2u:
          *((unsigned char *)this + 224) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_516;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v58 = v24++ > 8;
            }
            while (!v58);
LABEL_415:
            uint64_t v25 = 0;
            goto LABEL_516;
          }
          char v237 = 0;
          unsigned int v238 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v239 = v20 + 1;
              char v240 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v239;
              v25 |= (unint64_t)(v240 & 0x7F) << v237;
              if (v240 < 0)
              {
                v237 += 7;
                unint64_t v20 = v239;
                BOOL v58 = v238++ > 8;
                if (v58) {
                  goto LABEL_415;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v25 = 0;
              }
            }
            break;
          }
LABEL_516:
          *((void *)this + 25) = v25;
          goto LABEL_704;
        case 3u:
          *((unsigned char *)this + 224) |= 8u;
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          uint64_t v30 = *(void *)a2;
          if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
          {
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v33 = 0;
            do
            {
              unint64_t v34 = v28 + 1;
              *((void *)a2 + 1) = v28 + 1;
              char v35 = *(unsigned char *)(v30 + v28);
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if ((v35 & 0x80) == 0) {
                goto LABEL_519;
              }
              v31 += 7;
              unint64_t v28 = v34;
              BOOL v58 = v32++ > 8;
            }
            while (!v58);
LABEL_422:
            LODWORD(v33) = 0;
            goto LABEL_519;
          }
          char v241 = 0;
          unsigned int v242 = 0;
          uint64_t v33 = 0;
          if (v29 <= v28) {
            unint64_t v29 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v243 = v28 + 1;
              char v244 = *(unsigned char *)(v30 + v28);
              *((void *)a2 + 1) = v243;
              v33 |= (unint64_t)(v244 & 0x7F) << v241;
              if (v244 < 0)
              {
                v241 += 7;
                unint64_t v28 = v243;
                BOOL v58 = v242++ > 8;
                if (v58) {
                  goto LABEL_422;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v33) = 0;
              }
            }
            break;
          }
LABEL_519:
          *((_DWORD *)this + 55) = v33;
          goto LABEL_704;
        case 4u:
          *((unsigned char *)this + 224) |= 4u;
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          uint64_t v38 = *(void *)a2;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v42 = v36 + 1;
              *((void *)a2 + 1) = v36 + 1;
              char v43 = *(unsigned char *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0) {
                goto LABEL_522;
              }
              v39 += 7;
              unint64_t v36 = v42;
              BOOL v58 = v40++ > 8;
            }
            while (!v58);
LABEL_429:
            LODWORD(v41) = 0;
            goto LABEL_522;
          }
          char v245 = 0;
          unsigned int v246 = 0;
          uint64_t v41 = 0;
          if (v37 <= v36) {
            unint64_t v37 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v247 = v36 + 1;
              char v248 = *(unsigned char *)(v38 + v36);
              *((void *)a2 + 1) = v247;
              v41 |= (unint64_t)(v248 & 0x7F) << v245;
              if (v248 < 0)
              {
                v245 += 7;
                unint64_t v36 = v247;
                BOOL v58 = v246++ > 8;
                if (v58) {
                  goto LABEL_429;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v41) = 0;
              }
            }
            break;
          }
LABEL_522:
          *((_DWORD *)this + 54) = v41;
          goto LABEL_704;
        case 5u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 2);
              do
              {
                unint64_t v45 = *((void *)this + 3);
                if ((unint64_t)v44 >= v45)
                {
                  unsigned int v46 = (char *)*((void *)this + 1);
                  uint64_t v47 = (v44 - v46) >> 2;
                  unint64_t v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v49 = v45 - (void)v46;
                  if (v49 >> 1 > v48) {
                    unint64_t v48 = v49 >> 1;
                  }
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v50 = v48;
                  }
                  if (v50)
                  {
                    unint64_t v50 = (unint64_t)sub_2572C76F0(v50);
                    unsigned int v46 = (char *)*((void *)this + 1);
                    char v44 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v51 = 0;
                  }
                  char v52 = (_DWORD *)(v50 + 4 * v47);
                  *char v52 = 0;
                  char v53 = (char *)(v52 + 1);
                  while (v44 != v46)
                  {
                    int v54 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--char v52 = v54;
                  }
                  *((void *)this + 1) = v52;
                  *((void *)this + 2) = v53;
                  *((void *)this + 3) = v50 + 4 * v51;
                  if (v46) {
                    operator delete(v46);
                  }
                  char v44 = v53;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 2) = v44;
                unint64_t v56 = *((void *)a2 + 1);
                unint64_t v55 = *((void *)a2 + 2);
                uint64_t v57 = *(void *)a2;
                BOOL v58 = v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v55;
                if (v58)
                {
                  char v59 = 0;
                  unsigned int v60 = 0;
                  uint64_t v66 = 0;
                  if (v55 <= v56) {
                    uint64_t v61 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v61 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v61 == v56) {
                      goto LABEL_407;
                    }
                    unint64_t v62 = v56++;
                    char v63 = *(unsigned char *)(v57 + v62);
                    *((void *)a2 + 1) = v56;
                    v66 |= (unint64_t)(v63 & 0x7F) << v59;
                    if ((v63 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    BOOL v58 = v60++ > 8;
                    if (v58)
                    {
                      LODWORD(v66) = 0;
                      goto LABEL_88;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v66) = 0;
                  }
LABEL_88:
                  unint64_t v67 = v62 + 1;
                }
                else
                {
                  char v64 = 0;
                  unsigned int v65 = 0;
                  uint64_t v66 = 0;
                  while (1)
                  {
                    unint64_t v67 = v56 + 1;
                    *((void *)a2 + 1) = v56 + 1;
                    char v68 = *(unsigned char *)(v57 + v56);
                    v66 |= (unint64_t)(v68 & 0x7F) << v64;
                    if ((v68 & 0x80) == 0) {
                      break;
                    }
                    v64 += 7;
                    unint64_t v56 = v67;
                    BOOL v58 = v65++ > 8;
                    if (v58)
                    {
                      LODWORD(v66) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v66;
              }
              while (v67 < v55 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v250 = (char *)*((void *)this + 2);
          unint64_t v249 = *((void *)this + 3);
          if ((unint64_t)v250 >= v249)
          {
            v266 = (char *)*((void *)this + 1);
            uint64_t v267 = (v250 - v266) >> 2;
            unint64_t v268 = v267 + 1;
            if ((unint64_t)(v267 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v269 = v249 - (void)v266;
            if (v269 >> 1 > v268) {
              unint64_t v268 = v269 >> 1;
            }
            if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v270 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v270 = v268;
            }
            if (v270)
            {
              unint64_t v270 = (unint64_t)sub_2572C76F0(v270);
              v266 = (char *)*((void *)this + 1);
              v250 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v271 = 0;
            }
            v314 = (_DWORD *)(v270 + 4 * v267);
            _DWORD *v314 = 0;
            v251 = v314 + 1;
            while (v250 != v266)
            {
              int v315 = *((_DWORD *)v250 - 1);
              v250 -= 4;
              *--v314 = v315;
            }
            *((void *)this + 1) = v314;
            *((void *)this + 2) = v251;
            *((void *)this + 3) = v270 + 4 * v271;
            if (v266) {
              operator delete(v266);
            }
          }
          else
          {
            *(_DWORD *)v250 = 0;
            v251 = v250 + 4;
          }
          *((void *)this + 2) = v251;
          unint64_t v316 = *((void *)a2 + 1);
          unint64_t v317 = *((void *)a2 + 2);
          uint64_t v318 = *(void *)a2;
          char v319 = 0;
          unsigned int v320 = 0;
          if (v316 <= 0xFFFFFFFFFFFFFFF5 && v316 + 10 <= v317)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v325 = v316 + 1;
              *((void *)a2 + 1) = v316 + 1;
              char v326 = *(unsigned char *)(v318 + v316);
              v324 |= (unint64_t)(v326 & 0x7F) << v319;
              if ((v326 & 0x80) == 0) {
                goto LABEL_703;
              }
              v319 += 7;
              unint64_t v316 = v325;
              BOOL v58 = v320++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v317 <= v316) {
            unint64_t v317 = *((void *)a2 + 1);
          }
          while (v317 != v316)
          {
            unint64_t v322 = v316 + 1;
            char v323 = *(unsigned char *)(v318 + v316);
            *((void *)a2 + 1) = v322;
            v324 |= (unint64_t)(v323 & 0x7F) << v319;
            if ((v323 & 0x80) == 0) {
              goto LABEL_696;
            }
            v319 += 7;
            unint64_t v316 = v322;
            BOOL v58 = v320++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 6u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 5);
              do
              {
                unint64_t v69 = *((void *)this + 6);
                if ((unint64_t)v44 >= v69)
                {
                  uint64_t v70 = (char *)*((void *)this + 4);
                  uint64_t v71 = (v44 - v70) >> 2;
                  unint64_t v72 = v71 + 1;
                  if ((unint64_t)(v71 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v73 = v69 - (void)v70;
                  if (v73 >> 1 > v72) {
                    unint64_t v72 = v73 >> 1;
                  }
                  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v74 = v72;
                  }
                  if (v74)
                  {
                    unint64_t v74 = (unint64_t)sub_2572C76F0(v74);
                    uint64_t v70 = (char *)*((void *)this + 4);
                    char v44 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v75 = 0;
                  }
                  unint64_t v76 = (_DWORD *)(v74 + 4 * v71);
                  *unint64_t v76 = 0;
                  uint64_t v77 = (char *)(v76 + 1);
                  while (v44 != v70)
                  {
                    int v78 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--unint64_t v76 = v78;
                  }
                  *((void *)this + 4) = v76;
                  *((void *)this + 5) = v77;
                  *((void *)this + 6) = v74 + 4 * v75;
                  if (v70) {
                    operator delete(v70);
                  }
                  char v44 = v77;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 5) = v44;
                unint64_t v80 = *((void *)a2 + 1);
                unint64_t v79 = *((void *)a2 + 2);
                uint64_t v81 = *(void *)a2;
                if (v80 > 0xFFFFFFFFFFFFFFF5 || v80 + 10 > v79)
                {
                  char v83 = 0;
                  unsigned int v84 = 0;
                  uint64_t v90 = 0;
                  if (v79 <= v80) {
                    uint64_t v85 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v85 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v85 == v80) {
                      goto LABEL_407;
                    }
                    unint64_t v86 = v80++;
                    char v87 = *(unsigned char *)(v81 + v86);
                    *((void *)a2 + 1) = v80;
                    v90 |= (unint64_t)(v87 & 0x7F) << v83;
                    if ((v87 & 0x80) == 0) {
                      break;
                    }
                    v83 += 7;
                    BOOL v58 = v84++ > 8;
                    if (v58)
                    {
                      LODWORD(v90) = 0;
                      goto LABEL_133;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v90) = 0;
                  }
LABEL_133:
                  unint64_t v91 = v86 + 1;
                }
                else
                {
                  char v88 = 0;
                  unsigned int v89 = 0;
                  uint64_t v90 = 0;
                  while (1)
                  {
                    unint64_t v91 = v80 + 1;
                    *((void *)a2 + 1) = v80 + 1;
                    char v92 = *(unsigned char *)(v81 + v80);
                    v90 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0) {
                      break;
                    }
                    v88 += 7;
                    unint64_t v80 = v91;
                    BOOL v58 = v89++ > 8;
                    if (v58)
                    {
                      LODWORD(v90) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v90;
              }
              while (v91 < v79 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v253 = (char *)*((void *)this + 5);
          unint64_t v252 = *((void *)this + 6);
          if ((unint64_t)v253 >= v252)
          {
            v272 = (char *)*((void *)this + 4);
            uint64_t v273 = (v253 - v272) >> 2;
            unint64_t v274 = v273 + 1;
            if ((unint64_t)(v273 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v275 = v252 - (void)v272;
            if (v275 >> 1 > v274) {
              unint64_t v274 = v275 >> 1;
            }
            if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v276 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v276 = v274;
            }
            if (v276)
            {
              unint64_t v276 = (unint64_t)sub_2572C76F0(v276);
              v272 = (char *)*((void *)this + 4);
              v253 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v277 = 0;
            }
            v327 = (_DWORD *)(v276 + 4 * v273);
            _DWORD *v327 = 0;
            v251 = v327 + 1;
            while (v253 != v272)
            {
              int v328 = *((_DWORD *)v253 - 1);
              v253 -= 4;
              *--v327 = v328;
            }
            *((void *)this + 4) = v327;
            *((void *)this + 5) = v251;
            *((void *)this + 6) = v276 + 4 * v277;
            if (v272) {
              operator delete(v272);
            }
          }
          else
          {
            *(_DWORD *)v253 = 0;
            v251 = v253 + 4;
          }
          *((void *)this + 5) = v251;
          unint64_t v329 = *((void *)a2 + 1);
          unint64_t v330 = *((void *)a2 + 2);
          uint64_t v331 = *(void *)a2;
          char v332 = 0;
          unsigned int v333 = 0;
          if (v329 <= 0xFFFFFFFFFFFFFFF5 && v329 + 10 <= v330)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v337 = v329 + 1;
              *((void *)a2 + 1) = v329 + 1;
              char v338 = *(unsigned char *)(v331 + v329);
              v324 |= (unint64_t)(v338 & 0x7F) << v332;
              if ((v338 & 0x80) == 0) {
                goto LABEL_703;
              }
              v332 += 7;
              unint64_t v329 = v337;
              BOOL v58 = v333++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v330 <= v329) {
            unint64_t v330 = *((void *)a2 + 1);
          }
          while (v330 != v329)
          {
            unint64_t v335 = v329 + 1;
            char v336 = *(unsigned char *)(v331 + v329);
            *((void *)a2 + 1) = v335;
            v324 |= (unint64_t)(v336 & 0x7F) << v332;
            if ((v336 & 0x80) == 0) {
              goto LABEL_696;
            }
            v332 += 7;
            unint64_t v329 = v335;
            BOOL v58 = v333++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 7u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 8);
              do
              {
                unint64_t v93 = *((void *)this + 9);
                if ((unint64_t)v44 >= v93)
                {
                  unint64_t v94 = (char *)*((void *)this + 7);
                  uint64_t v95 = (v44 - v94) >> 2;
                  unint64_t v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v97 = v93 - (void)v94;
                  if (v97 >> 1 > v96) {
                    unint64_t v96 = v97 >> 1;
                  }
                  if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v98 = v96;
                  }
                  if (v98)
                  {
                    unint64_t v98 = (unint64_t)sub_2572C76F0(v98);
                    unint64_t v94 = (char *)*((void *)this + 7);
                    char v44 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v99 = 0;
                  }
                  v100 = (_DWORD *)(v98 + 4 * v95);
                  _DWORD *v100 = 0;
                  int v101 = (char *)(v100 + 1);
                  while (v44 != v94)
                  {
                    int v102 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v100 = v102;
                  }
                  *((void *)this + 7) = v100;
                  *((void *)this + 8) = v101;
                  *((void *)this + 9) = v98 + 4 * v99;
                  if (v94) {
                    operator delete(v94);
                  }
                  char v44 = v101;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 8) = v44;
                unint64_t v104 = *((void *)a2 + 1);
                unint64_t v103 = *((void *)a2 + 2);
                uint64_t v105 = *(void *)a2;
                if (v104 > 0xFFFFFFFFFFFFFFF5 || v104 + 10 > v103)
                {
                  char v107 = 0;
                  unsigned int v108 = 0;
                  uint64_t v114 = 0;
                  if (v103 <= v104) {
                    uint64_t v109 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v109 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v109 == v104) {
                      goto LABEL_407;
                    }
                    unint64_t v110 = v104++;
                    char v111 = *(unsigned char *)(v105 + v110);
                    *((void *)a2 + 1) = v104;
                    v114 |= (unint64_t)(v111 & 0x7F) << v107;
                    if ((v111 & 0x80) == 0) {
                      break;
                    }
                    v107 += 7;
                    BOOL v58 = v108++ > 8;
                    if (v58)
                    {
                      LODWORD(v114) = 0;
                      goto LABEL_178;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v114) = 0;
                  }
LABEL_178:
                  unint64_t v115 = v110 + 1;
                }
                else
                {
                  char v112 = 0;
                  unsigned int v113 = 0;
                  uint64_t v114 = 0;
                  while (1)
                  {
                    unint64_t v115 = v104 + 1;
                    *((void *)a2 + 1) = v104 + 1;
                    char v116 = *(unsigned char *)(v105 + v104);
                    v114 |= (unint64_t)(v116 & 0x7F) << v112;
                    if ((v116 & 0x80) == 0) {
                      break;
                    }
                    v112 += 7;
                    unint64_t v104 = v115;
                    BOOL v58 = v113++ > 8;
                    if (v58)
                    {
                      LODWORD(v114) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v114;
              }
              while (v115 < v103 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v255 = (char *)*((void *)this + 8);
          unint64_t v254 = *((void *)this + 9);
          if ((unint64_t)v255 >= v254)
          {
            v278 = (char *)*((void *)this + 7);
            uint64_t v279 = (v255 - v278) >> 2;
            unint64_t v280 = v279 + 1;
            if ((unint64_t)(v279 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v281 = v254 - (void)v278;
            if (v281 >> 1 > v280) {
              unint64_t v280 = v281 >> 1;
            }
            if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v282 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v282 = v280;
            }
            if (v282)
            {
              unint64_t v282 = (unint64_t)sub_2572C76F0(v282);
              v278 = (char *)*((void *)this + 7);
              v255 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v283 = 0;
            }
            v339 = (_DWORD *)(v282 + 4 * v279);
            _DWORD *v339 = 0;
            v251 = v339 + 1;
            while (v255 != v278)
            {
              int v340 = *((_DWORD *)v255 - 1);
              v255 -= 4;
              *--v339 = v340;
            }
            *((void *)this + 7) = v339;
            *((void *)this + 8) = v251;
            *((void *)this + 9) = v282 + 4 * v283;
            if (v278) {
              operator delete(v278);
            }
          }
          else
          {
            *(_DWORD *)v255 = 0;
            v251 = v255 + 4;
          }
          *((void *)this + 8) = v251;
          unint64_t v341 = *((void *)a2 + 1);
          unint64_t v342 = *((void *)a2 + 2);
          uint64_t v343 = *(void *)a2;
          char v344 = 0;
          unsigned int v345 = 0;
          if (v341 <= 0xFFFFFFFFFFFFFFF5 && v341 + 10 <= v342)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v349 = v341 + 1;
              *((void *)a2 + 1) = v341 + 1;
              char v350 = *(unsigned char *)(v343 + v341);
              v324 |= (unint64_t)(v350 & 0x7F) << v344;
              if ((v350 & 0x80) == 0) {
                goto LABEL_703;
              }
              v344 += 7;
              unint64_t v341 = v349;
              BOOL v58 = v345++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v342 <= v341) {
            unint64_t v342 = *((void *)a2 + 1);
          }
          while (v342 != v341)
          {
            unint64_t v347 = v341 + 1;
            char v348 = *(unsigned char *)(v343 + v341);
            *((void *)a2 + 1) = v347;
            v324 |= (unint64_t)(v348 & 0x7F) << v344;
            if ((v348 & 0x80) == 0) {
              goto LABEL_696;
            }
            v344 += 7;
            unint64_t v341 = v347;
            BOOL v58 = v345++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 8u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 11);
              do
              {
                unint64_t v117 = *((void *)this + 12);
                if ((unint64_t)v44 >= v117)
                {
                  v118 = (char *)*((void *)this + 10);
                  uint64_t v119 = (v44 - v118) >> 2;
                  unint64_t v120 = v119 + 1;
                  if ((unint64_t)(v119 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v121 = v117 - (void)v118;
                  if (v121 >> 1 > v120) {
                    unint64_t v120 = v121 >> 1;
                  }
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v122 = v120;
                  }
                  if (v122)
                  {
                    unint64_t v122 = (unint64_t)sub_2572C76F0(v122);
                    v118 = (char *)*((void *)this + 10);
                    char v44 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    uint64_t v123 = 0;
                  }
                  v124 = (_DWORD *)(v122 + 4 * v119);
                  _DWORD *v124 = 0;
                  v125 = (char *)(v124 + 1);
                  while (v44 != v118)
                  {
                    int v126 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v124 = v126;
                  }
                  *((void *)this + 10) = v124;
                  *((void *)this + 11) = v125;
                  *((void *)this + 12) = v122 + 4 * v123;
                  if (v118) {
                    operator delete(v118);
                  }
                  char v44 = v125;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 11) = v44;
                unint64_t v128 = *((void *)a2 + 1);
                unint64_t v127 = *((void *)a2 + 2);
                uint64_t v129 = *(void *)a2;
                if (v128 > 0xFFFFFFFFFFFFFFF5 || v128 + 10 > v127)
                {
                  char v131 = 0;
                  unsigned int v132 = 0;
                  uint64_t v138 = 0;
                  if (v127 <= v128) {
                    uint64_t v133 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v133 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v133 == v128) {
                      goto LABEL_407;
                    }
                    unint64_t v134 = v128++;
                    char v135 = *(unsigned char *)(v129 + v134);
                    *((void *)a2 + 1) = v128;
                    v138 |= (unint64_t)(v135 & 0x7F) << v131;
                    if ((v135 & 0x80) == 0) {
                      break;
                    }
                    v131 += 7;
                    BOOL v58 = v132++ > 8;
                    if (v58)
                    {
                      LODWORD(v138) = 0;
                      goto LABEL_223;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v138) = 0;
                  }
LABEL_223:
                  unint64_t v139 = v134 + 1;
                }
                else
                {
                  char v136 = 0;
                  unsigned int v137 = 0;
                  uint64_t v138 = 0;
                  while (1)
                  {
                    unint64_t v139 = v128 + 1;
                    *((void *)a2 + 1) = v128 + 1;
                    char v140 = *(unsigned char *)(v129 + v128);
                    v138 |= (unint64_t)(v140 & 0x7F) << v136;
                    if ((v140 & 0x80) == 0) {
                      break;
                    }
                    v136 += 7;
                    unint64_t v128 = v139;
                    BOOL v58 = v137++ > 8;
                    if (v58)
                    {
                      LODWORD(v138) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v138;
              }
              while (v139 < v127 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v257 = (char *)*((void *)this + 11);
          unint64_t v256 = *((void *)this + 12);
          if ((unint64_t)v257 >= v256)
          {
            v284 = (char *)*((void *)this + 10);
            uint64_t v285 = (v257 - v284) >> 2;
            unint64_t v286 = v285 + 1;
            if ((unint64_t)(v285 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v287 = v256 - (void)v284;
            if (v287 >> 1 > v286) {
              unint64_t v286 = v287 >> 1;
            }
            if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v288 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v288 = v286;
            }
            if (v288)
            {
              unint64_t v288 = (unint64_t)sub_2572C76F0(v288);
              v284 = (char *)*((void *)this + 10);
              v257 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v289 = 0;
            }
            v351 = (_DWORD *)(v288 + 4 * v285);
            _DWORD *v351 = 0;
            v251 = v351 + 1;
            while (v257 != v284)
            {
              int v352 = *((_DWORD *)v257 - 1);
              v257 -= 4;
              *--v351 = v352;
            }
            *((void *)this + 10) = v351;
            *((void *)this + 11) = v251;
            *((void *)this + 12) = v288 + 4 * v289;
            if (v284) {
              operator delete(v284);
            }
          }
          else
          {
            *(_DWORD *)v257 = 0;
            v251 = v257 + 4;
          }
          *((void *)this + 11) = v251;
          unint64_t v353 = *((void *)a2 + 1);
          unint64_t v354 = *((void *)a2 + 2);
          uint64_t v355 = *(void *)a2;
          char v356 = 0;
          unsigned int v357 = 0;
          if (v353 <= 0xFFFFFFFFFFFFFFF5 && v353 + 10 <= v354)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v361 = v353 + 1;
              *((void *)a2 + 1) = v353 + 1;
              char v362 = *(unsigned char *)(v355 + v353);
              v324 |= (unint64_t)(v362 & 0x7F) << v356;
              if ((v362 & 0x80) == 0) {
                goto LABEL_703;
              }
              v356 += 7;
              unint64_t v353 = v361;
              BOOL v58 = v357++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v354 <= v353) {
            unint64_t v354 = *((void *)a2 + 1);
          }
          while (v354 != v353)
          {
            unint64_t v359 = v353 + 1;
            char v360 = *(unsigned char *)(v355 + v353);
            *((void *)a2 + 1) = v359;
            v324 |= (unint64_t)(v360 & 0x7F) << v356;
            if ((v360 & 0x80) == 0) {
              goto LABEL_696;
            }
            v356 += 7;
            unint64_t v353 = v359;
            BOOL v58 = v357++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 9u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 17);
              do
              {
                unint64_t v141 = *((void *)this + 18);
                if ((unint64_t)v44 >= v141)
                {
                  v142 = (char *)*((void *)this + 16);
                  uint64_t v143 = (v44 - v142) >> 2;
                  unint64_t v144 = v143 + 1;
                  if ((unint64_t)(v143 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v145 = v141 - (void)v142;
                  if (v145 >> 1 > v144) {
                    unint64_t v144 = v145 >> 1;
                  }
                  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v146 = v144;
                  }
                  if (v146)
                  {
                    unint64_t v146 = (unint64_t)sub_2572C76F0(v146);
                    v142 = (char *)*((void *)this + 16);
                    char v44 = (char *)*((void *)this + 17);
                  }
                  else
                  {
                    uint64_t v147 = 0;
                  }
                  v148 = (_DWORD *)(v146 + 4 * v143);
                  _DWORD *v148 = 0;
                  v149 = (char *)(v148 + 1);
                  while (v44 != v142)
                  {
                    int v150 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v148 = v150;
                  }
                  *((void *)this + 16) = v148;
                  *((void *)this + 17) = v149;
                  *((void *)this + 18) = v146 + 4 * v147;
                  if (v142) {
                    operator delete(v142);
                  }
                  char v44 = v149;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 17) = v44;
                unint64_t v152 = *((void *)a2 + 1);
                unint64_t v151 = *((void *)a2 + 2);
                uint64_t v153 = *(void *)a2;
                if (v152 > 0xFFFFFFFFFFFFFFF5 || v152 + 10 > v151)
                {
                  char v155 = 0;
                  unsigned int v156 = 0;
                  uint64_t v162 = 0;
                  if (v151 <= v152) {
                    uint64_t v157 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v157 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v157 == v152) {
                      goto LABEL_407;
                    }
                    unint64_t v158 = v152++;
                    char v159 = *(unsigned char *)(v153 + v158);
                    *((void *)a2 + 1) = v152;
                    v162 |= (unint64_t)(v159 & 0x7F) << v155;
                    if ((v159 & 0x80) == 0) {
                      break;
                    }
                    v155 += 7;
                    BOOL v58 = v156++ > 8;
                    if (v58)
                    {
                      LODWORD(v162) = 0;
                      goto LABEL_268;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v162) = 0;
                  }
LABEL_268:
                  unint64_t v163 = v158 + 1;
                }
                else
                {
                  char v160 = 0;
                  unsigned int v161 = 0;
                  uint64_t v162 = 0;
                  while (1)
                  {
                    unint64_t v163 = v152 + 1;
                    *((void *)a2 + 1) = v152 + 1;
                    char v164 = *(unsigned char *)(v153 + v152);
                    v162 |= (unint64_t)(v164 & 0x7F) << v160;
                    if ((v164 & 0x80) == 0) {
                      break;
                    }
                    v160 += 7;
                    unint64_t v152 = v163;
                    BOOL v58 = v161++ > 8;
                    if (v58)
                    {
                      LODWORD(v162) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v162;
              }
              while (v163 < v151 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v259 = (char *)*((void *)this + 17);
          unint64_t v258 = *((void *)this + 18);
          if ((unint64_t)v259 >= v258)
          {
            v290 = (char *)*((void *)this + 16);
            uint64_t v291 = (v259 - v290) >> 2;
            unint64_t v292 = v291 + 1;
            if ((unint64_t)(v291 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v293 = v258 - (void)v290;
            if (v293 >> 1 > v292) {
              unint64_t v292 = v293 >> 1;
            }
            if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v294 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v294 = v292;
            }
            if (v294)
            {
              unint64_t v294 = (unint64_t)sub_2572C76F0(v294);
              v290 = (char *)*((void *)this + 16);
              v259 = (char *)*((void *)this + 17);
            }
            else
            {
              uint64_t v295 = 0;
            }
            v363 = (_DWORD *)(v294 + 4 * v291);
            _DWORD *v363 = 0;
            v251 = v363 + 1;
            while (v259 != v290)
            {
              int v364 = *((_DWORD *)v259 - 1);
              v259 -= 4;
              *--v363 = v364;
            }
            *((void *)this + 16) = v363;
            *((void *)this + 17) = v251;
            *((void *)this + 18) = v294 + 4 * v295;
            if (v290) {
              operator delete(v290);
            }
          }
          else
          {
            *(_DWORD *)v259 = 0;
            v251 = v259 + 4;
          }
          *((void *)this + 17) = v251;
          unint64_t v365 = *((void *)a2 + 1);
          unint64_t v366 = *((void *)a2 + 2);
          uint64_t v367 = *(void *)a2;
          char v368 = 0;
          unsigned int v369 = 0;
          if (v365 <= 0xFFFFFFFFFFFFFFF5 && v365 + 10 <= v366)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v373 = v365 + 1;
              *((void *)a2 + 1) = v365 + 1;
              char v374 = *(unsigned char *)(v367 + v365);
              v324 |= (unint64_t)(v374 & 0x7F) << v368;
              if ((v374 & 0x80) == 0) {
                goto LABEL_703;
              }
              v368 += 7;
              unint64_t v365 = v373;
              BOOL v58 = v369++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v366 <= v365) {
            unint64_t v366 = *((void *)a2 + 1);
          }
          while (v366 != v365)
          {
            unint64_t v371 = v365 + 1;
            char v372 = *(unsigned char *)(v367 + v365);
            *((void *)a2 + 1) = v371;
            v324 |= (unint64_t)(v372 & 0x7F) << v368;
            if ((v372 & 0x80) == 0) {
              goto LABEL_696;
            }
            v368 += 7;
            unint64_t v365 = v371;
            BOOL v58 = v369++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 0xAu:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 20);
              do
              {
                unint64_t v165 = *((void *)this + 21);
                if ((unint64_t)v44 >= v165)
                {
                  v166 = (char *)*((void *)this + 19);
                  uint64_t v167 = (v44 - v166) >> 2;
                  unint64_t v168 = v167 + 1;
                  if ((unint64_t)(v167 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v169 = v165 - (void)v166;
                  if (v169 >> 1 > v168) {
                    unint64_t v168 = v169 >> 1;
                  }
                  if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v170 = v168;
                  }
                  if (v170)
                  {
                    unint64_t v170 = (unint64_t)sub_2572C76F0(v170);
                    v166 = (char *)*((void *)this + 19);
                    char v44 = (char *)*((void *)this + 20);
                  }
                  else
                  {
                    uint64_t v171 = 0;
                  }
                  v172 = (_DWORD *)(v170 + 4 * v167);
                  _DWORD *v172 = 0;
                  v173 = (char *)(v172 + 1);
                  while (v44 != v166)
                  {
                    int v174 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v172 = v174;
                  }
                  *((void *)this + 19) = v172;
                  *((void *)this + 20) = v173;
                  *((void *)this + 21) = v170 + 4 * v171;
                  if (v166) {
                    operator delete(v166);
                  }
                  char v44 = v173;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 20) = v44;
                unint64_t v176 = *((void *)a2 + 1);
                unint64_t v175 = *((void *)a2 + 2);
                uint64_t v177 = *(void *)a2;
                if (v176 > 0xFFFFFFFFFFFFFFF5 || v176 + 10 > v175)
                {
                  char v179 = 0;
                  unsigned int v180 = 0;
                  uint64_t v186 = 0;
                  if (v175 <= v176) {
                    uint64_t v181 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v181 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v181 == v176) {
                      goto LABEL_407;
                    }
                    unint64_t v182 = v176++;
                    char v183 = *(unsigned char *)(v177 + v182);
                    *((void *)a2 + 1) = v176;
                    v186 |= (unint64_t)(v183 & 0x7F) << v179;
                    if ((v183 & 0x80) == 0) {
                      break;
                    }
                    v179 += 7;
                    BOOL v58 = v180++ > 8;
                    if (v58)
                    {
                      LODWORD(v186) = 0;
                      goto LABEL_313;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v186) = 0;
                  }
LABEL_313:
                  unint64_t v187 = v182 + 1;
                }
                else
                {
                  char v184 = 0;
                  unsigned int v185 = 0;
                  uint64_t v186 = 0;
                  while (1)
                  {
                    unint64_t v187 = v176 + 1;
                    *((void *)a2 + 1) = v176 + 1;
                    char v188 = *(unsigned char *)(v177 + v176);
                    v186 |= (unint64_t)(v188 & 0x7F) << v184;
                    if ((v188 & 0x80) == 0) {
                      break;
                    }
                    v184 += 7;
                    unint64_t v176 = v187;
                    BOOL v58 = v185++ > 8;
                    if (v58)
                    {
                      LODWORD(v186) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v186;
              }
              while (v187 < v175 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v261 = (char *)*((void *)this + 20);
          unint64_t v260 = *((void *)this + 21);
          if ((unint64_t)v261 >= v260)
          {
            v296 = (char *)*((void *)this + 19);
            uint64_t v297 = (v261 - v296) >> 2;
            unint64_t v298 = v297 + 1;
            if ((unint64_t)(v297 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v299 = v260 - (void)v296;
            if (v299 >> 1 > v298) {
              unint64_t v298 = v299 >> 1;
            }
            if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v300 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v300 = v298;
            }
            if (v300)
            {
              unint64_t v300 = (unint64_t)sub_2572C76F0(v300);
              v296 = (char *)*((void *)this + 19);
              v261 = (char *)*((void *)this + 20);
            }
            else
            {
              uint64_t v301 = 0;
            }
            v375 = (_DWORD *)(v300 + 4 * v297);
            _DWORD *v375 = 0;
            v251 = v375 + 1;
            while (v261 != v296)
            {
              int v376 = *((_DWORD *)v261 - 1);
              v261 -= 4;
              *--v375 = v376;
            }
            *((void *)this + 19) = v375;
            *((void *)this + 20) = v251;
            *((void *)this + 21) = v300 + 4 * v301;
            if (v296) {
              operator delete(v296);
            }
          }
          else
          {
            *(_DWORD *)v261 = 0;
            v251 = v261 + 4;
          }
          *((void *)this + 20) = v251;
          unint64_t v377 = *((void *)a2 + 1);
          unint64_t v378 = *((void *)a2 + 2);
          uint64_t v379 = *(void *)a2;
          char v380 = 0;
          unsigned int v381 = 0;
          if (v377 <= 0xFFFFFFFFFFFFFFF5 && v377 + 10 <= v378)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v385 = v377 + 1;
              *((void *)a2 + 1) = v377 + 1;
              char v386 = *(unsigned char *)(v379 + v377);
              v324 |= (unint64_t)(v386 & 0x7F) << v380;
              if ((v386 & 0x80) == 0) {
                goto LABEL_703;
              }
              v380 += 7;
              unint64_t v377 = v385;
              BOOL v58 = v381++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v378 <= v377) {
            unint64_t v378 = *((void *)a2 + 1);
          }
          while (v378 != v377)
          {
            unint64_t v383 = v377 + 1;
            char v384 = *(unsigned char *)(v379 + v377);
            *((void *)a2 + 1) = v383;
            v324 |= (unint64_t)(v384 & 0x7F) << v380;
            if ((v384 & 0x80) == 0) {
              goto LABEL_696;
            }
            v380 += 7;
            unint64_t v377 = v383;
            BOOL v58 = v381++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 0xBu:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 23);
              do
              {
                unint64_t v189 = *((void *)this + 24);
                if ((unint64_t)v44 >= v189)
                {
                  v190 = (char *)*((void *)this + 22);
                  uint64_t v191 = (v44 - v190) >> 2;
                  unint64_t v192 = v191 + 1;
                  if ((unint64_t)(v191 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v193 = v189 - (void)v190;
                  if (v193 >> 1 > v192) {
                    unint64_t v192 = v193 >> 1;
                  }
                  if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v194 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v194 = v192;
                  }
                  if (v194)
                  {
                    unint64_t v194 = (unint64_t)sub_2572C76F0(v194);
                    v190 = (char *)*((void *)this + 22);
                    char v44 = (char *)*((void *)this + 23);
                  }
                  else
                  {
                    uint64_t v195 = 0;
                  }
                  v196 = (_DWORD *)(v194 + 4 * v191);
                  _DWORD *v196 = 0;
                  v197 = (char *)(v196 + 1);
                  while (v44 != v190)
                  {
                    int v198 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v196 = v198;
                  }
                  *((void *)this + 22) = v196;
                  *((void *)this + 23) = v197;
                  *((void *)this + 24) = v194 + 4 * v195;
                  if (v190) {
                    operator delete(v190);
                  }
                  char v44 = v197;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 23) = v44;
                unint64_t v200 = *((void *)a2 + 1);
                unint64_t v199 = *((void *)a2 + 2);
                uint64_t v201 = *(void *)a2;
                if (v200 > 0xFFFFFFFFFFFFFFF5 || v200 + 10 > v199)
                {
                  char v203 = 0;
                  unsigned int v204 = 0;
                  uint64_t v210 = 0;
                  if (v199 <= v200) {
                    uint64_t v205 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v205 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v205 == v200) {
                      goto LABEL_407;
                    }
                    unint64_t v206 = v200++;
                    char v207 = *(unsigned char *)(v201 + v206);
                    *((void *)a2 + 1) = v200;
                    v210 |= (unint64_t)(v207 & 0x7F) << v203;
                    if ((v207 & 0x80) == 0) {
                      break;
                    }
                    v203 += 7;
                    BOOL v58 = v204++ > 8;
                    if (v58)
                    {
                      LODWORD(v210) = 0;
                      goto LABEL_358;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v210) = 0;
                  }
LABEL_358:
                  unint64_t v211 = v206 + 1;
                }
                else
                {
                  char v208 = 0;
                  unsigned int v209 = 0;
                  uint64_t v210 = 0;
                  while (1)
                  {
                    unint64_t v211 = v200 + 1;
                    *((void *)a2 + 1) = v200 + 1;
                    char v212 = *(unsigned char *)(v201 + v200);
                    v210 |= (unint64_t)(v212 & 0x7F) << v208;
                    if ((v212 & 0x80) == 0) {
                      break;
                    }
                    v208 += 7;
                    unint64_t v200 = v211;
                    BOOL v58 = v209++ > 8;
                    if (v58)
                    {
                      LODWORD(v210) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v44 - 1) = v210;
              }
              while (v211 < v199 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_408;
          }
          v263 = (char *)*((void *)this + 23);
          unint64_t v262 = *((void *)this + 24);
          if ((unint64_t)v263 >= v262)
          {
            v302 = (char *)*((void *)this + 22);
            uint64_t v303 = (v263 - v302) >> 2;
            unint64_t v304 = v303 + 1;
            if ((unint64_t)(v303 + 1) >> 62) {
              goto LABEL_713;
            }
            uint64_t v305 = v262 - (void)v302;
            if (v305 >> 1 > v304) {
              unint64_t v304 = v305 >> 1;
            }
            if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v306 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v306 = v304;
            }
            if (v306)
            {
              unint64_t v306 = (unint64_t)sub_2572C76F0(v306);
              v302 = (char *)*((void *)this + 22);
              v263 = (char *)*((void *)this + 23);
            }
            else
            {
              uint64_t v307 = 0;
            }
            v387 = (_DWORD *)(v306 + 4 * v303);
            _DWORD *v387 = 0;
            v251 = v387 + 1;
            while (v263 != v302)
            {
              int v388 = *((_DWORD *)v263 - 1);
              v263 -= 4;
              *--v387 = v388;
            }
            *((void *)this + 22) = v387;
            *((void *)this + 23) = v251;
            *((void *)this + 24) = v306 + 4 * v307;
            if (v302) {
              operator delete(v302);
            }
          }
          else
          {
            *(_DWORD *)v263 = 0;
            v251 = v263 + 4;
          }
          *((void *)this + 23) = v251;
          unint64_t v389 = *((void *)a2 + 1);
          unint64_t v390 = *((void *)a2 + 2);
          uint64_t v391 = *(void *)a2;
          char v392 = 0;
          unsigned int v393 = 0;
          if (v389 <= 0xFFFFFFFFFFFFFFF5 && v389 + 10 <= v390)
          {
            uint64_t v324 = 0;
            while (1)
            {
              unint64_t v397 = v389 + 1;
              *((void *)a2 + 1) = v389 + 1;
              char v398 = *(unsigned char *)(v391 + v389);
              v324 |= (unint64_t)(v398 & 0x7F) << v392;
              if ((v398 & 0x80) == 0) {
                goto LABEL_703;
              }
              v392 += 7;
              unint64_t v389 = v397;
              BOOL v58 = v393++ > 8;
              if (v58) {
                goto LABEL_702;
              }
            }
          }
          uint64_t v324 = 0;
          if (v390 <= v389) {
            unint64_t v390 = *((void *)a2 + 1);
          }
          while (v390 != v389)
          {
            unint64_t v395 = v389 + 1;
            char v396 = *(unsigned char *)(v391 + v389);
            *((void *)a2 + 1) = v395;
            v324 |= (unint64_t)(v396 & 0x7F) << v392;
            if ((v396 & 0x80) == 0) {
              goto LABEL_696;
            }
            v392 += 7;
            unint64_t v389 = v395;
            BOOL v58 = v393++ > 8;
            if (v58) {
              goto LABEL_702;
            }
          }
          goto LABEL_695;
        case 0xCu:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v44 = (char *)*((void *)this + 14);
              do
              {
                unint64_t v213 = *((void *)this + 15);
                if ((unint64_t)v44 >= v213)
                {
                  v214 = (char *)*((void *)this + 13);
                  uint64_t v215 = (v44 - v214) >> 2;
                  unint64_t v216 = v215 + 1;
                  if ((unint64_t)(v215 + 1) >> 62) {
                    goto LABEL_713;
                  }
                  uint64_t v217 = v213 - (void)v214;
                  if (v217 >> 1 > v216) {
                    unint64_t v216 = v217 >> 1;
                  }
                  if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v218 = v216;
                  }
                  if (v218)
                  {
                    unint64_t v218 = (unint64_t)sub_2572C76F0(v218);
                    v214 = (char *)*((void *)this + 13);
                    char v44 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    uint64_t v219 = 0;
                  }
                  v220 = (_DWORD *)(v218 + 4 * v215);
                  _DWORD *v220 = 0;
                  v221 = (char *)(v220 + 1);
                  while (v44 != v214)
                  {
                    int v222 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v220 = v222;
                  }
                  *((void *)this + 13) = v220;
                  *((void *)this + 14) = v221;
                  *((void *)this + 15) = v218 + 4 * v219;
                  if (v214) {
                    operator delete(v214);
                  }
                  char v44 = v221;
                }
                else
                {
                  *(_DWORD *)char v44 = 0;
                  v44 += 4;
                }
                *((void *)this + 14) = v44;
                unint64_t v224 = *((void *)a2 + 1);
                unint64_t v223 = *((void *)a2 + 2);
                uint64_t v225 = *(void *)a2;
                if (v224 <= 0xFFFFFFFFFFFFFFF5 && v224 + 10 <= v223)
                {
                  char v232 = 0;
                  unsigned int v233 = 0;
                  uint64_t v234 = 0;
                  while (1)
                  {
                    unint64_t v235 = v224 + 1;
                    *((void *)a2 + 1) = v224 + 1;
                    char v236 = *(unsigned char *)(v225 + v224);
                    v234 |= (unint64_t)(v236 & 0x7F) << v232;
                    if ((v236 & 0x80) == 0) {
                      goto LABEL_404;
                    }
                    v232 += 7;
                    unint64_t v224 = v235;
                    BOOL v58 = v233++ > 8;
                    if (v58)
                    {
                      LODWORD(v234) = 0;
                      goto LABEL_404;
                    }
                  }
                }
                char v227 = 0;
                unsigned int v228 = 0;
                uint64_t v234 = 0;
                if (v223 <= v224) {
                  uint64_t v229 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v229 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v229 == v224)
                  {
LABEL_407:
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v44 - 1) = 0;
                    goto LABEL_408;
                  }
                  unint64_t v230 = v224++;
                  char v231 = *(unsigned char *)(v225 + v230);
                  *((void *)a2 + 1) = v224;
                  v234 |= (unint64_t)(v231 & 0x7F) << v227;
                  if ((v231 & 0x80) == 0) {
                    break;
                  }
                  v227 += 7;
                  BOOL v58 = v228++ > 8;
                  if (v58)
                  {
                    LODWORD(v234) = 0;
                    goto LABEL_403;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v234) = 0;
                }
LABEL_403:
                unint64_t v235 = v230 + 1;
LABEL_404:
                *((_DWORD *)v44 - 1) = v234;
              }
              while (v235 < v223 && !*((unsigned char *)a2 + 24));
            }
LABEL_408:
            PB::Reader::recallMark();
          }
          else
          {
            v265 = (char *)*((void *)this + 14);
            unint64_t v264 = *((void *)this + 15);
            if ((unint64_t)v265 >= v264)
            {
              v308 = (char *)*((void *)this + 13);
              uint64_t v309 = (v265 - v308) >> 2;
              unint64_t v310 = v309 + 1;
              if ((unint64_t)(v309 + 1) >> 62) {
LABEL_713:
              }
                sub_2570AFD0C();
              uint64_t v311 = v264 - (void)v308;
              if (v311 >> 1 > v310) {
                unint64_t v310 = v311 >> 1;
              }
              if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v312 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v312 = v310;
              }
              if (v312)
              {
                unint64_t v312 = (unint64_t)sub_2572C76F0(v312);
                v308 = (char *)*((void *)this + 13);
                v265 = (char *)*((void *)this + 14);
              }
              else
              {
                uint64_t v313 = 0;
              }
              v399 = (_DWORD *)(v312 + 4 * v309);
              _DWORD *v399 = 0;
              v251 = v399 + 1;
              while (v265 != v308)
              {
                int v400 = *((_DWORD *)v265 - 1);
                v265 -= 4;
                *--v399 = v400;
              }
              *((void *)this + 13) = v399;
              *((void *)this + 14) = v251;
              *((void *)this + 15) = v312 + 4 * v313;
              if (v308) {
                operator delete(v308);
              }
            }
            else
            {
              *(_DWORD *)v265 = 0;
              v251 = v265 + 4;
            }
            *((void *)this + 14) = v251;
            unint64_t v401 = *((void *)a2 + 1);
            unint64_t v402 = *((void *)a2 + 2);
            uint64_t v403 = *(void *)a2;
            char v404 = 0;
            unsigned int v405 = 0;
            if (v401 > 0xFFFFFFFFFFFFFFF5 || v401 + 10 > v402)
            {
              uint64_t v324 = 0;
              if (v402 <= v401) {
                unint64_t v402 = *((void *)a2 + 1);
              }
              while (v402 != v401)
              {
                unint64_t v407 = v401 + 1;
                char v408 = *(unsigned char *)(v403 + v401);
                *((void *)a2 + 1) = v407;
                v324 |= (unint64_t)(v408 & 0x7F) << v404;
                if ((v408 & 0x80) == 0)
                {
LABEL_696:
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v324) = 0;
                  }
                  goto LABEL_703;
                }
                v404 += 7;
                unint64_t v401 = v407;
                BOOL v58 = v405++ > 8;
                if (v58)
                {
LABEL_702:
                  LODWORD(v324) = 0;
                  goto LABEL_703;
                }
              }
LABEL_695:
              LODWORD(v324) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              uint64_t v324 = 0;
              while (1)
              {
                unint64_t v409 = v401 + 1;
                *((void *)a2 + 1) = v401 + 1;
                char v410 = *(unsigned char *)(v403 + v401);
                v324 |= (unint64_t)(v410 & 0x7F) << v404;
                if ((v410 & 0x80) == 0) {
                  break;
                }
                v404 += 7;
                unint64_t v401 = v409;
                BOOL v58 = v405++ > 8;
                if (v58) {
                  goto LABEL_702;
                }
              }
            }
LABEL_703:
            *(v251 - 1) = v324;
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_704;
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v58 = v15++ > 8;
    }
    while (!v58);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_704:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::AccessoryPPG::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 224);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 208));
    char v4 = *(unsigned char *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_33:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 224) & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 224) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 224);
  if ((v4 & 8) != 0) {
    goto LABEL_33;
  }
LABEL_4:
  if ((v4 & 4) != 0) {
LABEL_5:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_6:
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v7 = *(void *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 40);
  while (v7 != v8)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v9 = *(void *)(v3 + 56);
  uint64_t v10 = *(void *)(v3 + 64);
  while (v9 != v10)
  {
    v9 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v11 = *(void *)(v3 + 80);
  uint64_t v12 = *(void *)(v3 + 88);
  while (v11 != v12)
  {
    v11 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v13 = *(void *)(v3 + 128);
  uint64_t v14 = *(void *)(v3 + 136);
  while (v13 != v14)
  {
    v13 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v15 = *(void *)(v3 + 152);
  uint64_t v16 = *(void *)(v3 + 160);
  while (v15 != v16)
  {
    v15 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v17 = *(void *)(v3 + 176);
  uint64_t v18 = *(void *)(v3 + 184);
  while (v17 != v18)
  {
    v17 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v20 = *(void *)(v3 + 104);
  uint64_t v19 = *(void *)(v3 + 112);
  while (v20 != v19)
  {
    v20 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::AccessoryPPG::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 224) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 224) & 2) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 224) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if ((*(unsigned char *)(a2 + 224) & 1) == 0 || *(void *)(a1 + 200) != *(void *)(a2 + 200)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 224))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 224) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 224) & 8) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 224) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 224) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 224) & 4) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 224) & 4) != 0)
  {
    return 0;
  }
  char v4 = *(const void **)(a1 + 8);
  uint64_t v5 = *(const void **)(a2 + 8);
  size_t v6 = *(void *)(a1 + 16) - (void)v4;
  if (v6 == *(void *)(a2 + 16) - (void)v5 && !memcmp(v4, v5, v6))
  {
    uint64_t v7 = *(const void **)(a1 + 32);
    uint64_t v8 = *(const void **)(a2 + 32);
    size_t v9 = *(void *)(a1 + 40) - (void)v7;
    if (v9 == *(void *)(a2 + 40) - (void)v8 && !memcmp(v7, v8, v9))
    {
      uint64_t v10 = *(const void **)(a1 + 56);
      uint64_t v11 = *(const void **)(a2 + 56);
      size_t v12 = *(void *)(a1 + 64) - (void)v10;
      if (v12 == *(void *)(a2 + 64) - (void)v11 && !memcmp(v10, v11, v12))
      {
        uint64_t v13 = *(const void **)(a1 + 80);
        uint64_t v14 = *(const void **)(a2 + 80);
        size_t v15 = *(void *)(a1 + 88) - (void)v13;
        if (v15 == *(void *)(a2 + 88) - (void)v14 && !memcmp(v13, v14, v15))
        {
          uint64_t v16 = *(const void **)(a1 + 128);
          uint64_t v17 = *(const void **)(a2 + 128);
          size_t v18 = *(void *)(a1 + 136) - (void)v16;
          if (v18 == *(void *)(a2 + 136) - (void)v17 && !memcmp(v16, v17, v18))
          {
            uint64_t v19 = *(const void **)(a1 + 152);
            uint64_t v20 = *(const void **)(a2 + 152);
            size_t v21 = *(void *)(a1 + 160) - (void)v19;
            if (v21 == *(void *)(a2 + 160) - (void)v20 && !memcmp(v19, v20, v21))
            {
              uint64_t v22 = *(const void **)(a1 + 176);
              char v23 = *(const void **)(a2 + 176);
              size_t v24 = *(void *)(a1 + 184) - (void)v22;
              if (v24 == *(void *)(a2 + 184) - (void)v23 && !memcmp(v22, v23, v24))
              {
                uint64_t v25 = *(const void **)(a1 + 104);
                unint64_t v26 = *(const void **)(a2 + 104);
                size_t v27 = *(void *)(a1 + 112) - (void)v25;
                if (v27 == *(void *)(a2 + 112) - (void)v26) {
                  return memcmp(v25, v26, v27) == 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CMMsl::AccessoryPPG::hash_value(CMMsl::AccessoryPPG *this)
{
  if ((*((unsigned char *)this + 224) & 2) != 0)
  {
    double v1 = *((double *)this + 26);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 224))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 25);
      if ((*((unsigned char *)this + 224) & 8) != 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 224) & 4) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 224)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 224) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 55);
  if ((*((unsigned char *)this + 224) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 54);
LABEL_12:
  uint64_t v5 = v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ PBHashBytes();
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = v5 ^ v6 ^ PBHashBytes();
  uint64_t v8 = PBHashBytes();
  uint64_t v9 = v8 ^ PBHashBytes();
  uint64_t v10 = v7 ^ v9 ^ PBHashBytes();
  uint64_t v11 = PBHashBytes();
  return v10 ^ v11 ^ PBHashBytes();
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this)
{
  *(void *)this = &unk_270640258;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = &unk_270640258;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::AccessoryProx::~AccessoryProx(CMMsl::AccessoryProx *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this, const CMMsl::AccessoryProx *a2)
{
  *(void *)this = &unk_270640258;
  *(_DWORD *)(this + 56) = 0;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    __int16 v3 = 4;
    *(_WORD *)(this + 56) = 4;
    *(_DWORD *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 36) = v5;
    __int16 v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 52) = v6;
    __int16 v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 56) = v3;
  *(void *)(this + 16) = v8;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 48) = v9;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 44) = v10;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 40) = v11;
  __int16 v2 = *((_WORD *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_22:
    int v13 = *((_DWORD *)a2 + 7);
    *(_WORD *)(this + 56) = v3 | 8;
    *(_DWORD *)(this + 28) = v13;
    return this;
  }
LABEL_21:
  uint64_t v12 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 56) = v3;
  *(void *)(this + 8) = v12;
  if ((*((_WORD *)a2 + 28) & 8) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, const CMMsl::AccessoryProx *a2)
{
  if ((const CMMsl::AccessoryProx *)a1 != a2)
  {
    CMMsl::AccessoryProx::AccessoryProx((uint64_t)&v13, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v22;
    int v22 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v16;
    int v16 = v4;
    int v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v18;
    int v18 = v5;
    int v6 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v21;
    int v21 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    uint64_t v15 = v7;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v19;
    uint64_t v19 = v9;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v14;
    uint64_t v14 = v10;
    uint64_t v11 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v17;
    uint64_t v17 = v11;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProx *a2, CMMsl::AccessoryProx *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  int v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  int v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  int v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  LODWORD(v12) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  return result;
}

double CMMsl::AccessoryProx::AccessoryProx(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640258;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryProx::AccessoryProx((uint64_t)&v13, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v22;
    int v22 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v16;
    int v16 = v4;
    int v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v18;
    int v18 = v5;
    int v6 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v21;
    int v21 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    uint64_t v15 = v7;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    int v20 = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v19;
    uint64_t v19 = v9;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v14;
    uint64_t v14 = v10;
    uint64_t v11 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v17;
    uint64_t v17 = v11;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProx::formatText(CMMsl::AccessoryProx *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "base", *((float *)this + 6));
    __int16 v5 = *((_WORD *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "broken");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "location");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "peak", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sensor");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "sensorTime");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "sequenceNumber");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "status");
  __int16 v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "temp", *((float *)this + 13));
  if ((*((_WORD *)this + 28) & 2) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryProx::readFrom(CMMsl::AccessoryProx *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_152;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 2u:
        *((_WORD *)this + 28) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((_WORD *)this + 28) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_121;
      case 4u:
        *((_WORD *)this + 28) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_126;
            }
            unint64_t v58 = v20++;
            char v59 = *(unsigned char *)(v21 + v58);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_125:
              unint64_t v2 = v58 + 1;
              goto LABEL_126;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_125;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_126;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_126:
        *((_DWORD *)this + 7) = v24;
        break;
      case 5u:
        *((_WORD *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_121:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((_WORD *)this + 28) |= 0x100u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_131;
            }
            unint64_t v62 = v26++;
            char v63 = *(unsigned char *)(v27 + v62);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_130:
              unint64_t v2 = v62 + 1;
              goto LABEL_131;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_130;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_131;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_131:
        *((_DWORD *)this + 12) = v30;
        break;
      case 7u:
        *((_WORD *)this + 28) |= 0x80u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_136;
            }
            unint64_t v66 = v32++;
            char v67 = *(unsigned char *)(v33 + v66);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_135:
              unint64_t v2 = v66 + 1;
              goto LABEL_136;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_135;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_136;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_136:
        *((_DWORD *)this + 11) = v36;
        break;
      case 8u:
        *((_WORD *)this + 28) |= 0x40u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_141;
            }
            unint64_t v70 = v38++;
            char v71 = *(unsigned char *)(v39 + v70);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_140:
              unint64_t v2 = v70 + 1;
              goto LABEL_141;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_140;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_141;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_141:
        *((_DWORD *)this + 10) = v42;
        break;
      case 9u:
        *((_WORD *)this + 28) |= 0x10u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_146;
            }
            unint64_t v74 = v44++;
            char v75 = *(unsigned char *)(v45 + v74);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0) {
              break;
            }
            v72 += 7;
            BOOL v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_145:
              unint64_t v2 = v74 + 1;
              goto LABEL_146;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_145;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_146;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_146:
        *((_DWORD *)this + 8) = v48;
        break;
      case 0xAu:
        *((_WORD *)this + 28) |= 1u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              uint64_t v54 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_151;
            }
            unint64_t v78 = v50++;
            char v79 = *(unsigned char *)(v51 + v78);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0) {
              break;
            }
            v76 += 7;
            BOOL v14 = v77++ > 8;
            if (v14)
            {
              uint64_t v54 = 0;
LABEL_150:
              unint64_t v2 = v78 + 1;
              goto LABEL_151;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v54 = 0;
          }
          goto LABEL_150;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_151;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        uint64_t v54 = 0;
LABEL_151:
        *((void *)this + 1) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_152:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProx::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24));
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 56) & 1) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_21:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryProx::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 56);
  __int16 v3 = *(_WORD *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  }
  return v4;
}

uint64_t CMMsl::AccessoryProx::hash_value(CMMsl::AccessoryProx *this)
{
  __int16 v1 = *((_WORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 28) & 0x200) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v6 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  float v14 = *((float *)this + 6);
  uint64_t v2 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  float v3 = *((float *)this + 9);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 28) & 0x200) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  float v5 = *((float *)this + 13);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v7 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0) {
      goto LABEL_10;
    }
LABEL_24:
    double v8 = 0.0;
    if ((*((_WORD *)this + 28) & 0x100) != 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v7 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_10:
  double v8 = *((double *)this + 2);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_13:
    uint64_t v9 = *((unsigned int *)this + 12);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v10 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v11 = *((unsigned int *)this + 10);
    if (v1) {
      goto LABEL_16;
    }
LABEL_28:
    uint64_t v12 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_17;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_27:
  uint64_t v11 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_16:
  uint64_t v12 = *((void *)this + 1);
  if ((v1 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_17:
  uint64_t v13 = *((unsigned int *)this + 7);
  return v4 ^ v2 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

double CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  *(void *)this = &unk_270640290;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640290;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  *(void *)this = &unk_270640290;
  uint64_t v4 = (void **)((char *)this + 56);
  sub_2572C6D4C(&v4);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AccessoryProxSensorDrop *CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this, const CMMsl::AccessoryProxSensorDrop *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_270640290;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if ((*((unsigned char *)a2 + 104) & 8) != 0)
  {
    int v5 = *((_DWORD *)a2 + 23);
    *((unsigned char *)this + 104) = 8;
    *((_DWORD *)this + 23) = v5;
    char v4 = 12;
    if ((*((unsigned char *)a2 + 104) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v4 = 4;
  if ((*((unsigned char *)a2 + 104) & 4) != 0)
  {
LABEL_5:
    int v6 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 104) = v4;
    *((_DWORD *)this + 22) = v6;
  }
LABEL_6:
  if (*((void *)a2 + 7) != *((void *)a2 + 8)) {
    sub_2570C77D0();
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v7 = *((unsigned char *)a2 + 104);
  if (v7)
  {
    int v10 = *((_DWORD *)a2 + 20);
    *((unsigned char *)this + 104) |= 1u;
    *((_DWORD *)this + 20) = v10;
    char v7 = *((unsigned char *)a2 + 104);
    if ((v7 & 0x10) == 0)
    {
LABEL_12:
      if ((v7 & 2) == 0) {
        goto LABEL_13;
      }
LABEL_18:
      int v12 = *((_DWORD *)a2 + 21);
      *((unsigned char *)this + 104) |= 2u;
      *((_DWORD *)this + 21) = v12;
      if ((*((unsigned char *)a2 + 104) & 0x20) == 0) {
        return this;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)a2 + 104) & 0x10) == 0)
  {
    goto LABEL_12;
  }
  int v11 = *((_DWORD *)a2 + 24);
  *((unsigned char *)this + 104) |= 0x10u;
  *((_DWORD *)this + 24) = v11;
  char v7 = *((unsigned char *)a2 + 104);
  if ((v7 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_13:
  if ((v7 & 0x20) != 0)
  {
LABEL_14:
    int v8 = *((_DWORD *)a2 + 25);
    *((unsigned char *)this + 104) |= 0x20u;
    *((_DWORD *)this + 25) = v8;
  }
  return this;
}

void sub_2570C77D0()
{
}

void sub_2570C7908(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, const CMMsl::AccessoryProxSensorDrop *a2)
{
  if ((const CMMsl::AccessoryProxSensorDrop *)a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryProxSensorDrop *a2, CMMsl::AccessoryProxSensorDrop *a3)
{
  int v3 = *(_DWORD *)(this + 104);
  *(_DWORD *)(this + 104) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  int v4 = *(_DWORD *)(this + 92);
  *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  int v5 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  uint64_t v6 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  uint64_t v7 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 96);
  *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 84);
  *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 100);
  *(_DWORD *)(this + 100) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  return this;
}

uint64_t CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640290;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (_OWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  sub_2572C6E0C((void **)(a1 + 56));
  _OWORD *v6 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_2572C7560(v5, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::formatText(CMMsl::AccessoryProxSensorDrop *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 104);
  if (v5)
  {
    PB::TextFormatter::format(a2, "conchaDropped");
    char v5 = *((unsigned char *)this + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 104) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "conchaRecovered");
  char v5 = *((unsigned char *)this + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "iedState");
  if ((*((unsigned char *)this + 104) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "location");
LABEL_6:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "mean", v8);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 7);
  uint64_t v10 = (uint64_t *)*((void *)this + 8);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "optical");
  }
  char v12 = *((unsigned char *)this + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "tragusDropped");
    char v12 = *((unsigned char *)this + 104);
  }
  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "tragusRecovered");
  }
  uint64_t v13 = (float *)*((void *)this + 4);
  uint64_t v14 = (float *)*((void *)this + 5);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "variance", v15);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AccessoryProxSensorDrop::readFrom(CMMsl::AccessoryProxSensorDrop *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      int v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((unsigned char *)this + 104) |= 8u;
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            uint64_t v23 = *(void *)a2;
            if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
            {
              char v24 = 0;
              unsigned int v25 = 0;
              uint64_t v26 = 0;
              do
              {
                unint64_t v27 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v28 = *(unsigned char *)(v23 + v21);
                v26 |= (unint64_t)(v28 & 0x7F) << v24;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_190;
                }
                v24 += 7;
                unint64_t v21 = v27;
                BOOL v14 = v25++ > 8;
              }
              while (!v14);
LABEL_124:
              LODWORD(v26) = 0;
              goto LABEL_190;
            }
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v26 = 0;
            if (v22 <= v21) {
              unint64_t v22 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v22 == v21)
              {
                LODWORD(v26) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v99 = v21 + 1;
                char v100 = *(unsigned char *)(v23 + v21);
                *((void *)a2 + 1) = v99;
                v26 |= (unint64_t)(v100 & 0x7F) << v97;
                if (v100 < 0)
                {
                  v97 += 7;
                  unint64_t v21 = v99;
                  BOOL v14 = v98++ > 8;
                  if (v14) {
                    goto LABEL_124;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v26) = 0;
                }
              }
              break;
            }
LABEL_190:
            *((_DWORD *)this + 23) = v26;
            goto LABEL_20;
          case 2u:
            *((unsigned char *)this + 104) |= 4u;
            unint64_t v29 = *((void *)a2 + 1);
            unint64_t v30 = *((void *)a2 + 2);
            uint64_t v31 = *(void *)a2;
            if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
            {
              char v32 = 0;
              unsigned int v33 = 0;
              uint64_t v34 = 0;
              do
              {
                unint64_t v35 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v36 = *(unsigned char *)(v31 + v29);
                v34 |= (unint64_t)(v36 & 0x7F) << v32;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v32 += 7;
                unint64_t v29 = v35;
                BOOL v14 = v33++ > 8;
              }
              while (!v14);
LABEL_131:
              LODWORD(v34) = 0;
              goto LABEL_193;
            }
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v34 = 0;
            if (v30 <= v29) {
              unint64_t v30 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v30 == v29)
              {
                LODWORD(v34) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v103 = v29 + 1;
                char v104 = *(unsigned char *)(v31 + v29);
                *((void *)a2 + 1) = v103;
                v34 |= (unint64_t)(v104 & 0x7F) << v101;
                if (v104 < 0)
                {
                  v101 += 7;
                  unint64_t v29 = v103;
                  BOOL v14 = v102++ > 8;
                  if (v14) {
                    goto LABEL_131;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v34) = 0;
                }
              }
              break;
            }
LABEL_193:
            *((_DWORD *)this + 22) = v34;
            goto LABEL_20;
          case 3u:
            sub_2570C8888();
          case 4u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v38 = *((void *)a2 + 2);
              while (v37 < v38 && !*((unsigned char *)a2 + 24))
              {
                char v40 = (char *)*((void *)this + 2);
                unint64_t v39 = *((void *)this + 3);
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = (char *)*((void *)this + 1);
                  uint64_t v43 = (v40 - v42) >> 2;
                  unint64_t v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 62) {
                    goto LABEL_228;
                  }
                  uint64_t v45 = v39 - (void)v42;
                  if (v45 >> 1 > v44) {
                    unint64_t v44 = v45 >> 1;
                  }
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v46 = v44;
                  }
                  if (v46)
                  {
                    unint64_t v46 = (unint64_t)sub_2572C76F0(v46);
                    uint64_t v42 = (char *)*((void *)this + 1);
                    char v40 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v47 = 0;
                  }
                  uint64_t v48 = (_DWORD *)(v46 + 4 * v43);
                  *uint64_t v48 = 0;
                  unsigned int v41 = v48 + 1;
                  while (v40 != v42)
                  {
                    int v49 = *((_DWORD *)v40 - 1);
                    v40 -= 4;
                    *--uint64_t v48 = v49;
                  }
                  *((void *)this + 1) = v48;
                  *((void *)this + 2) = v41;
                  *((void *)this + 3) = v46 + 4 * v47;
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(_DWORD *)char v40 = 0;
                  unsigned int v41 = v40 + 4;
                }
                *((void *)this + 2) = v41;
                unint64_t v50 = *((void *)a2 + 1);
                if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_164;
                }
                *(v41 - 1) = *(_DWORD *)(*(void *)a2 + v50);
                unint64_t v38 = *((void *)a2 + 2);
                unint64_t v37 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v37;
              }
              goto LABEL_165;
            }
            v106 = (char *)*((void *)this + 2);
            unint64_t v105 = *((void *)this + 3);
            if ((unint64_t)v106 >= v105)
            {
              int v126 = (char *)*((void *)this + 1);
              uint64_t v127 = (v106 - v126) >> 2;
              unint64_t v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 62) {
                goto LABEL_228;
              }
              uint64_t v129 = v105 - (void)v126;
              if (v129 >> 1 > v128) {
                unint64_t v128 = v129 >> 1;
              }
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v128;
              }
              if (v130)
              {
                unint64_t v130 = (unint64_t)sub_2572C76F0(v130);
                int v126 = (char *)*((void *)this + 1);
                v106 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v131 = 0;
              }
              uint64_t v138 = (_DWORD *)(v130 + 4 * v127);
              *uint64_t v138 = 0;
              char v107 = v138 + 1;
              while (v106 != v126)
              {
                int v139 = *((_DWORD *)v106 - 1);
                v106 -= 4;
                *--uint64_t v138 = v139;
              }
              *((void *)this + 1) = v138;
              *((void *)this + 2) = v107;
              *((void *)this + 3) = v130 + 4 * v131;
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(_DWORD *)v106 = 0;
              char v107 = v106 + 4;
            }
            *((void *)this + 2) = v107;
            goto LABEL_220;
          case 5u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v52 = *((void *)a2 + 2);
              while (v51 < v52 && !*((unsigned char *)a2 + 24))
              {
                uint64_t v54 = (char *)*((void *)this + 5);
                unint64_t v53 = *((void *)this + 6);
                if ((unint64_t)v54 >= v53)
                {
                  char v56 = (char *)*((void *)this + 4);
                  uint64_t v57 = (v54 - v56) >> 2;
                  unint64_t v58 = v57 + 1;
                  if ((unint64_t)(v57 + 1) >> 62) {
                    goto LABEL_228;
                  }
                  uint64_t v59 = v53 - (void)v56;
                  if (v59 >> 1 > v58) {
                    unint64_t v58 = v59 >> 1;
                  }
                  if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v60 = v58;
                  }
                  if (v60)
                  {
                    unint64_t v60 = (unint64_t)sub_2572C76F0(v60);
                    char v56 = (char *)*((void *)this + 4);
                    uint64_t v54 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v61 = 0;
                  }
                  unint64_t v62 = (_DWORD *)(v60 + 4 * v57);
                  _DWORD *v62 = 0;
                  char v55 = v62 + 1;
                  while (v54 != v56)
                  {
                    int v63 = *((_DWORD *)v54 - 1);
                    v54 -= 4;
                    *--unint64_t v62 = v63;
                  }
                  *((void *)this + 4) = v62;
                  *((void *)this + 5) = v55;
                  *((void *)this + 6) = v60 + 4 * v61;
                  if (v56) {
                    operator delete(v56);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v54 = 0;
                  char v55 = v54 + 4;
                }
                *((void *)this + 5) = v55;
                unint64_t v64 = *((void *)a2 + 1);
                if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)a2 + 2))
                {
LABEL_164:
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v55 - 1) = *(_DWORD *)(*(void *)a2 + v64);
                unint64_t v52 = *((void *)a2 + 2);
                unint64_t v51 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v51;
              }
LABEL_165:
              PB::Reader::recallMark();
            }
            else
            {
              uint64_t v109 = (char *)*((void *)this + 5);
              unint64_t v108 = *((void *)this + 6);
              if ((unint64_t)v109 >= v108)
              {
                unsigned int v132 = (char *)*((void *)this + 4);
                uint64_t v133 = (v109 - v132) >> 2;
                unint64_t v134 = v133 + 1;
                if ((unint64_t)(v133 + 1) >> 62) {
LABEL_228:
                }
                  sub_2570AFD0C();
                uint64_t v135 = v108 - (void)v132;
                if (v135 >> 1 > v134) {
                  unint64_t v134 = v135 >> 1;
                }
                if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v136 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v136 = v134;
                }
                if (v136)
                {
                  unint64_t v136 = (unint64_t)sub_2572C76F0(v136);
                  unsigned int v132 = (char *)*((void *)this + 4);
                  uint64_t v109 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v137 = 0;
                }
                char v140 = (_DWORD *)(v136 + 4 * v133);
                *char v140 = 0;
                char v107 = v140 + 1;
                while (v109 != v132)
                {
                  int v141 = *((_DWORD *)v109 - 1);
                  v109 -= 4;
                  *--char v140 = v141;
                }
                *((void *)this + 4) = v140;
                *((void *)this + 5) = v107;
                *((void *)this + 6) = v136 + 4 * v137;
                if (v132) {
                  operator delete(v132);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v109 = 0;
                char v107 = v109 + 4;
              }
              *((void *)this + 5) = v107;
LABEL_220:
              unint64_t v142 = *((void *)a2 + 1);
              if (v142 <= 0xFFFFFFFFFFFFFFFBLL && v142 + 4 <= *((void *)a2 + 2))
              {
                *(v107 - 1) = *(_DWORD *)(*(void *)a2 + v142);
                *((void *)a2 + 1) += 4;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          case 6u:
            *((unsigned char *)this + 104) |= 1u;
            unint64_t v65 = *((void *)a2 + 1);
            unint64_t v66 = *((void *)a2 + 2);
            uint64_t v67 = *(void *)a2;
            if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
            {
              char v68 = 0;
              unsigned int v69 = 0;
              uint64_t v70 = 0;
              do
              {
                unint64_t v71 = v65 + 1;
                *((void *)a2 + 1) = v65 + 1;
                char v72 = *(unsigned char *)(v67 + v65);
                v70 |= (unint64_t)(v72 & 0x7F) << v68;
                if ((v72 & 0x80) == 0) {
                  goto LABEL_196;
                }
                v68 += 7;
                unint64_t v65 = v71;
                BOOL v14 = v69++ > 8;
              }
              while (!v14);
LABEL_142:
              LODWORD(v70) = 0;
              goto LABEL_196;
            }
            char v110 = 0;
            unsigned int v111 = 0;
            uint64_t v70 = 0;
            if (v66 <= v65) {
              unint64_t v66 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v66 == v65)
              {
                LODWORD(v70) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v112 = v65 + 1;
                char v113 = *(unsigned char *)(v67 + v65);
                *((void *)a2 + 1) = v112;
                v70 |= (unint64_t)(v113 & 0x7F) << v110;
                if (v113 < 0)
                {
                  v110 += 7;
                  unint64_t v65 = v112;
                  BOOL v14 = v111++ > 8;
                  if (v14) {
                    goto LABEL_142;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v70) = 0;
                }
              }
              break;
            }
LABEL_196:
            *((_DWORD *)this + 20) = v70;
            goto LABEL_20;
          case 7u:
            *((unsigned char *)this + 104) |= 0x10u;
            unint64_t v73 = *((void *)a2 + 1);
            unint64_t v74 = *((void *)a2 + 2);
            uint64_t v75 = *(void *)a2;
            if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
            {
              char v76 = 0;
              unsigned int v77 = 0;
              uint64_t v78 = 0;
              do
              {
                unint64_t v79 = v73 + 1;
                *((void *)a2 + 1) = v73 + 1;
                char v80 = *(unsigned char *)(v75 + v73);
                v78 |= (unint64_t)(v80 & 0x7F) << v76;
                if ((v80 & 0x80) == 0) {
                  goto LABEL_199;
                }
                v76 += 7;
                unint64_t v73 = v79;
                BOOL v14 = v77++ > 8;
              }
              while (!v14);
LABEL_149:
              LODWORD(v78) = 0;
              goto LABEL_199;
            }
            char v114 = 0;
            unsigned int v115 = 0;
            uint64_t v78 = 0;
            if (v74 <= v73) {
              unint64_t v74 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v74 == v73)
              {
                LODWORD(v78) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v116 = v73 + 1;
                char v117 = *(unsigned char *)(v75 + v73);
                *((void *)a2 + 1) = v116;
                v78 |= (unint64_t)(v117 & 0x7F) << v114;
                if (v117 < 0)
                {
                  v114 += 7;
                  unint64_t v73 = v116;
                  BOOL v14 = v115++ > 8;
                  if (v14) {
                    goto LABEL_149;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v78) = 0;
                }
              }
              break;
            }
LABEL_199:
            *((_DWORD *)this + 24) = v78;
            goto LABEL_20;
          case 8u:
            *((unsigned char *)this + 104) |= 2u;
            unint64_t v81 = *((void *)a2 + 1);
            unint64_t v82 = *((void *)a2 + 2);
            uint64_t v83 = *(void *)a2;
            if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
            {
              char v84 = 0;
              unsigned int v85 = 0;
              uint64_t v86 = 0;
              do
              {
                unint64_t v87 = v81 + 1;
                *((void *)a2 + 1) = v81 + 1;
                char v88 = *(unsigned char *)(v83 + v81);
                v86 |= (unint64_t)(v88 & 0x7F) << v84;
                if ((v88 & 0x80) == 0) {
                  goto LABEL_202;
                }
                v84 += 7;
                unint64_t v81 = v87;
                BOOL v14 = v85++ > 8;
              }
              while (!v14);
LABEL_156:
              LODWORD(v86) = 0;
              goto LABEL_202;
            }
            char v118 = 0;
            unsigned int v119 = 0;
            uint64_t v86 = 0;
            if (v82 <= v81) {
              unint64_t v82 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v82 == v81)
              {
                LODWORD(v86) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v120 = v81 + 1;
                char v121 = *(unsigned char *)(v83 + v81);
                *((void *)a2 + 1) = v120;
                v86 |= (unint64_t)(v121 & 0x7F) << v118;
                if (v121 < 0)
                {
                  v118 += 7;
                  unint64_t v81 = v120;
                  BOOL v14 = v119++ > 8;
                  if (v14) {
                    goto LABEL_156;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v86) = 0;
                }
              }
              break;
            }
LABEL_202:
            *((_DWORD *)this + 21) = v86;
            goto LABEL_20;
          case 9u:
            *((unsigned char *)this + 104) |= 0x20u;
            unint64_t v89 = *((void *)a2 + 1);
            unint64_t v90 = *((void *)a2 + 2);
            uint64_t v91 = *(void *)a2;
            if (v89 <= 0xFFFFFFFFFFFFFFF5 && v89 + 10 <= v90)
            {
              char v92 = 0;
              unsigned int v93 = 0;
              uint64_t v94 = 0;
              do
              {
                unint64_t v95 = v89 + 1;
                *((void *)a2 + 1) = v89 + 1;
                char v96 = *(unsigned char *)(v91 + v89);
                v94 |= (unint64_t)(v96 & 0x7F) << v92;
                if ((v96 & 0x80) == 0) {
                  goto LABEL_205;
                }
                v92 += 7;
                unint64_t v89 = v95;
                BOOL v14 = v93++ > 8;
              }
              while (!v14);
LABEL_163:
              LODWORD(v94) = 0;
              goto LABEL_205;
            }
            char v122 = 0;
            unsigned int v123 = 0;
            uint64_t v94 = 0;
            if (v90 <= v89) {
              unint64_t v90 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v90 == v89)
              {
                LODWORD(v94) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v124 = v89 + 1;
                char v125 = *(unsigned char *)(v91 + v89);
                *((void *)a2 + 1) = v124;
                v94 |= (unint64_t)(v125 & 0x7F) << v122;
                if (v125 < 0)
                {
                  v122 += 7;
                  unint64_t v89 = v124;
                  BOOL v14 = v123++ > 8;
                  if (v14) {
                    goto LABEL_163;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v94) = 0;
                }
              }
              break;
            }
LABEL_205:
            *((_DWORD *)this + 25) = v94;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

void sub_2570C8888()
{
}

void sub_2570C89D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 104);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 104);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  char v5 = *(const PB::Base ***)(v3 + 56);
  uint64_t v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  uint64_t v8 = *(float **)(v3 + 8);
  char v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  unint64_t v11 = *(float **)(v3 + 32);
  unint64_t v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13);
  }
  char v14 = *(unsigned char *)(v3 + 104);
  if (v14)
  {
    this = PB::Writer::writeVarInt(a2);
    char v14 = *(unsigned char *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0) {
        goto LABEL_17;
      }
LABEL_21:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 104) & 0x20) == 0) {
        return this;
      }
      goto LABEL_22;
    }
  }
  else if ((*(unsigned char *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2);
  char v14 = *(unsigned char *)(v3 + 104);
  if ((v14 & 2) != 0) {
    goto LABEL_21;
  }
LABEL_17:
  if ((v14 & 0x20) == 0) {
    return this;
  }
LABEL_22:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryProxSensorDrop::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 104);
  char v5 = *(unsigned char *)(a2 + 104);
  if ((v4 & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 104) & 8) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 104) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 104) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 104) & 4) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 104) & 4) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  uint64_t v7 = *(uint64_t **)(a1 + 64);
  uint64_t v8 = *(uint64_t **)(a2 + 56);
  if ((char *)v7 - (char *)v6 != *(void *)(a2 + 64) - (void)v8) {
    return 0;
  }
  while (v6 != v7)
  {
    BOOL result = CMMsl::ClefMeasurement::operator==(*v6, *v8);
    if (!result) {
      return result;
    }
    ++v6;
    ++v8;
  }
  unint64_t v11 = *(float **)(a1 + 8);
  float v10 = *(float **)(a1 + 16);
  unint64_t v12 = *(float **)(a2 + 8);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 16) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  char v14 = *(float **)(a1 + 32);
  float v13 = *(float **)(a1 + 40);
  char v15 = *(float **)(a2 + 32);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 40) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    if (*v14 != *v15) {
      return 0;
    }
    ++v14;
    ++v15;
  }
  if (v4)
  {
    if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 0x20) == 0;
  if ((v4 & 0x20) == 0) {
    return result;
  }
  return (v5 & 0x20) != 0 && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100);
}

uint64_t CMMsl::AccessoryProxSensorDrop::hash_value(CMMsl::AccessoryProxSensorDrop *this)
{
  if ((*((unsigned char *)this + 104) & 8) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 23);
    if ((*((unsigned char *)this + 104) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 104) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 22);
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  uint64_t v4 = sub_2570C8DF0(*((uint64_t **)this + 7), *((uint64_t **)this + 8));
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if (*((unsigned char *)this + 104))
  {
    uint64_t v7 = *((unsigned int *)this + 20);
    if ((*((unsigned char *)this + 104) & 0x10) != 0)
    {
LABEL_8:
      uint64_t v8 = *((unsigned int *)this + 24);
      if ((*((unsigned char *)this + 104) & 2) != 0) {
        goto LABEL_9;
      }
LABEL_13:
      uint64_t v9 = 0;
      if ((*((unsigned char *)this + 104) & 0x20) != 0) {
        goto LABEL_10;
      }
LABEL_14:
      uint64_t v10 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 104) & 0x10) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 104) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v9 = *((unsigned int *)this + 21);
  if ((*((unsigned char *)this + 104) & 0x20) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v10 = *((unsigned int *)this + 25);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t sub_2570C8DF0(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    uint64_t v3 = *a1++;
    float v4 = *(float *)(v3 + 8);
    float v5 = *(float *)(v3 + 12);
    uint64_t v6 = LODWORD(v4);
    char v7 = *(unsigned char *)(v3 + 16);
    if (v4 == 0.0 || (v7 & 1) == 0) {
      uint64_t v6 = 0;
    }
    int v9 = v7 & 2;
    BOOL v10 = v5 == 0.0 || v9 == 0;
    uint64_t v11 = LODWORD(v5);
    if (v10) {
      uint64_t v11 = 0;
    }
    v2 ^= v6 ^ v11;
  }
  while (a1 != a2);
  return v2;
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this)
{
  *(void *)this = &unk_2706402C8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_2706402C8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AccessoryProxTempComp::~AccessoryProxTempComp(CMMsl::AccessoryProxTempComp *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this, const CMMsl::AccessoryProxTempComp *a2)
{
  *(void *)this = &unk_2706402C8;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 44) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if (v2 < 0)
  {
    char v6 = *((unsigned char *)a2 + 40);
    v3 |= 0x80u;
    *(unsigned char *)(this + 44) = v3;
    *(unsigned char *)(this + 40) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v9;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_18:
    int v11 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 32) = v11;
    return this;
  }
LABEL_17:
  int v10 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 16) = v10;
  if ((*((unsigned char *)a2 + 44) & 0x20) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, const CMMsl::AccessoryProxTempComp *a2)
{
  if ((const CMMsl::AccessoryProxTempComp *)a1 != a2)
  {
    CMMsl::AccessoryProxTempComp::AccessoryProxTempComp((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v11;
    char v11 = v3;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProxTempComp *a2, CMMsl::AccessoryProxTempComp *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  int v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  return result;
}

double CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706402C8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706402C8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = &unk_2706402C8;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 40);
    int v16 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v6;
    char v7 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v5;
    char v15 = v7;
    long long v8 = *(_OWORD *)(a2 + 16);
    long long v13 = *(_OWORD *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    *(void *)(a1 + 32) = v10;
    uint64_t v14 = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxTempComp::formatText(CMMsl::AccessoryProxTempComp *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaTemp");
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "prescalar");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "pwrState");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "tragusTemp");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "valid");
  if ((*((unsigned char *)this + 44) & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "wdtPeriod");
LABEL_10:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryProxTempComp::readFrom(CMMsl::AccessoryProxTempComp *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_124;
            }
            unint64_t v61 = v21++;
            char v62 = *(unsigned char *)(v22 + v61);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0) {
              break;
            }
            v59 += 7;
            BOOL v14 = v60++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_123:
              unint64_t v2 = v61 + 1;
              goto LABEL_124;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_123;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_124;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_124:
        *((_DWORD *)this + 5) = v25;
        break;
      case 3u:
        *((unsigned char *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 40) = v28;
        break;
      case 4u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v33 = 0;
          if (v2 <= v29) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_129;
            }
            unint64_t v65 = v29++;
            char v66 = *(unsigned char *)(v30 + v65);
            *((void *)a2 + 1) = v29;
            v33 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0) {
              break;
            }
            v63 += 7;
            BOOL v14 = v64++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_128:
              unint64_t v2 = v65 + 1;
              goto LABEL_129;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v33) = 0;
          }
          goto LABEL_128;
        }
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        do
        {
          unint64_t v2 = v29 + 1;
          *((void *)a2 + 1) = v29 + 1;
          char v34 = *(unsigned char *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0) {
            goto LABEL_129;
          }
          v31 += 7;
          unint64_t v29 = v2;
          BOOL v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_129:
        *((_DWORD *)this + 7) = v33;
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v35 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v36 = *(void *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v39 = 0;
          if (v2 <= v35) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_134;
            }
            unint64_t v69 = v35++;
            char v70 = *(unsigned char *)(v36 + v69);
            *((void *)a2 + 1) = v35;
            v39 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0) {
              break;
            }
            v67 += 7;
            BOOL v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_133:
              unint64_t v2 = v69 + 1;
              goto LABEL_134;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v39) = 0;
          }
          goto LABEL_133;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        do
        {
          unint64_t v2 = v35 + 1;
          *((void *)a2 + 1) = v35 + 1;
          char v40 = *(unsigned char *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0) {
            goto LABEL_134;
          }
          v37 += 7;
          unint64_t v35 = v2;
          BOOL v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_134:
        *((_DWORD *)this + 6) = v39;
        break;
      case 6u:
        *((unsigned char *)this + 44) |= 0x40u;
        unint64_t v41 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v42 = *(void *)a2;
        if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
        {
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v45 = 0;
          if (v2 <= v41) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v41)
            {
              LODWORD(v45) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_139;
            }
            unint64_t v73 = v41++;
            char v74 = *(unsigned char *)(v42 + v73);
            *((void *)a2 + 1) = v41;
            v45 |= (unint64_t)(v74 & 0x7F) << v71;
            if ((v74 & 0x80) == 0) {
              break;
            }
            v71 += 7;
            BOOL v14 = v72++ > 8;
            if (v14)
            {
              LODWORD(v45) = 0;
LABEL_138:
              unint64_t v2 = v73 + 1;
              goto LABEL_139;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v45) = 0;
          }
          goto LABEL_138;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        do
        {
          unint64_t v2 = v41 + 1;
          *((void *)a2 + 1) = v41 + 1;
          char v46 = *(unsigned char *)(v42 + v41);
          v45 |= (unint64_t)(v46 & 0x7F) << v43;
          if ((v46 & 0x80) == 0) {
            goto LABEL_139;
          }
          v43 += 7;
          unint64_t v41 = v2;
          BOOL v14 = v44++ > 8;
        }
        while (!v14);
        LODWORD(v45) = 0;
LABEL_139:
        *((_DWORD *)this + 9) = v45;
        break;
      case 7u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v47 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v48 = *(void *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v51 = 0;
          if (v2 <= v47) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_144;
            }
            unint64_t v77 = v47++;
            char v78 = *(unsigned char *)(v48 + v77);
            *((void *)a2 + 1) = v47;
            v51 |= (unint64_t)(v78 & 0x7F) << v75;
            if ((v78 & 0x80) == 0) {
              break;
            }
            v75 += 7;
            BOOL v14 = v76++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_143:
              unint64_t v2 = v77 + 1;
              goto LABEL_144;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v51) = 0;
          }
          goto LABEL_143;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        do
        {
          unint64_t v2 = v47 + 1;
          *((void *)a2 + 1) = v47 + 1;
          char v52 = *(unsigned char *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0) {
            goto LABEL_144;
          }
          v49 += 7;
          unint64_t v47 = v2;
          BOOL v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_144:
        *((_DWORD *)this + 4) = v51;
        break;
      case 8u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v53 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v54 = *(void *)a2;
        if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
        {
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v57 = 0;
          if (v2 <= v53) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v53)
            {
              LODWORD(v57) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_149;
            }
            unint64_t v81 = v53++;
            char v82 = *(unsigned char *)(v54 + v81);
            *((void *)a2 + 1) = v53;
            v57 |= (unint64_t)(v82 & 0x7F) << v79;
            if ((v82 & 0x80) == 0) {
              break;
            }
            v79 += 7;
            BOOL v14 = v80++ > 8;
            if (v14)
            {
              LODWORD(v57) = 0;
LABEL_148:
              unint64_t v2 = v81 + 1;
              goto LABEL_149;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v57) = 0;
          }
          goto LABEL_148;
        }
        char v55 = 0;
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        do
        {
          unint64_t v2 = v53 + 1;
          *((void *)a2 + 1) = v53 + 1;
          char v58 = *(unsigned char *)(v54 + v53);
          v57 |= (unint64_t)(v58 & 0x7F) << v55;
          if ((v58 & 0x80) == 0) {
            goto LABEL_149;
          }
          v55 += 7;
          unint64_t v53 = v2;
          BOOL v14 = v56++ > 8;
        }
        while (!v14);
        LODWORD(v57) = 0;
LABEL_149:
        *((_DWORD *)this + 8) = v57;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProxTempComp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_17:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessoryProxTempComp::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  int v3 = *(unsigned __int8 *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if (((v3 | v2) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v4;
}

uint64_t CMMsl::AccessoryProxTempComp::hash_value(CMMsl::AccessoryProxTempComp *this)
{
  if (*((unsigned char *)this + 44))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 5);
      if ((*((unsigned char *)this + 44) & 0x80) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 0x80) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 40);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 7);
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 0x40) != 0)
  {
LABEL_7:
    uint64_t v6 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v7 = *((int *)this + 4);
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v8 = *((int *)this + 8);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

double CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  *(void *)this = &unk_270640300;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640300;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

void CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  *(void *)this = &unk_270640300;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  sub_2572C6E9C((void ***)this + 4, 0);
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    sub_2572C6E48(v3);
  }
  sub_2572C6E9C((void ***)this + 2, 0);
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t this, const CMMsl::AccessoryProximityConfig *a2)
{
  *(void *)this = &unk_270640300;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(void *)(this + 40) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, const CMMsl::AccessoryProximityConfig *a2)
{
  if ((const CMMsl::AccessoryProximityConfig *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::AccessoryProximityConfig *a2, CMMsl::AccessoryProximityConfig *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_270640300;
  uint64_t v4 = (void ***)(a1 + 16);
  uint64_t v5 = (void ***)(a1 + 32);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  long long v8 = (void **)a2[2];
  a2[2] = 0;
  sub_2572C6E9C(v4, v8);
  long long v9 = (void **)a2[4];
  a2[4] = 0;
  sub_2572C6E9C(v5, v9);
  uint64_t v10 = a2[3];
  a2[3] = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  if (v11) {
    sub_2572C6E48(v11);
  }
  uint64_t v12 = a2[5];
  a2[5] = 0;
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  if (v13) {
    sub_2572C6E48(v13);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::formatText(CMMsl::AccessoryProximityConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "config");
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 4)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 5)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryProximityConfig::readFrom(CMMsl::AccessoryProximityConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          break;
      }
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProximityConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (v3[2]) {
    this = PB::Writer::write();
  }
  if (v3[4]) {
    this = PB::Writer::write();
  }
  if (v3[3]) {
    this = PB::Writer::write();
  }
  if (v3[5])
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL CMMsl::AccessoryProximityConfig::operator==(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = a2[2];
  if (a1[2])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[2] | a2[2]) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v7 = a2[4];
  if (a1[4])
  {
    if (!v7 || (PB::Data::operator==() & 1) == 0 && a1[4] | a2[4]) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  char v8 = (unsigned __int8 *)a1[3];
  unsigned int v9 = (unsigned __int8 **)a2[3];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_38;
    }
    return 0;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v8[23];
  if ((v10 & 0x80u) == 0) {
    unint64_t v11 = (unsigned __int8 *)v8[23];
  }
  else {
    unint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
  }
  char v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
  int v13 = (char)v12;
  if ((char)v12 < 0) {
    char v12 = v9[1];
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    char v14 = (unsigned __int8 *)a2[3];
  }
  else {
    char v14 = *v9;
  }
  if ((v10 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v8, v14, *((void *)v8 + 1))) {
      goto LABEL_38;
    }
    return 0;
  }
  if (v8[23])
  {
    while (*v8 == *v14)
    {
      ++v8;
      ++v14;
      if (!--v10) {
        goto LABEL_38;
      }
    }
    return 0;
  }
LABEL_38:
  uint64_t v16 = a1[5];
  char v17 = (unsigned __int8 *)a2[5];
  BOOL result = (v16 | (unint64_t)v17) == 0;
  if (v16) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    uint64_t v19 = (unsigned __int8 *)a1[5];
    return sub_2570B4110(v19, v17);
  }
  return result;
}

unint64_t CMMsl::AccessoryProximityConfig::hash_value(CMMsl::AccessoryProximityConfig *this)
{
  unint64_t v2 = (CMMsl::AccessoryConfig *)*((void *)this + 1);
  if (v2) {
    unint64_t v3 = CMMsl::AccessoryConfig::hash_value(v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((void *)this + 2)) {
    uint64_t v4 = PBHashBytes();
  }
  else {
    uint64_t v4 = 0;
  }
  if (*((void *)this + 4)) {
    uint64_t v5 = PBHashBytes();
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    unint64_t v7 = sub_2572C6F9C(v6);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v8 = *((void *)this + 5);
  if (v8) {
    unint64_t v8 = sub_2572C6F9C(v8);
  }
  return v4 ^ v3 ^ v5 ^ v7 ^ v8;
}

uint64_t CMMsl::AccessoryProximityConfig::makeConfig(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this)
{
  *(void *)this = &unk_270640338;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270640338;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessorySleepStateConfidenceEpoch::~AccessorySleepStateConfidenceEpoch(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  *(void *)this = &unk_270640338;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(unsigned char *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 29);
    *(unsigned char *)(this + 32) = v3 | 0x20;
    *(unsigned char *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((unsigned char *)a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  if ((const CMMsl::AccessorySleepStateConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v12;
    char v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v13;
    char v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessorySleepStateConfidenceEpoch *a2, CMMsl::AccessorySleepStateConfidenceEpoch *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 29);
  *((unsigned char *)this + 29) = *((unsigned char *)a2 + 29);
  *((unsigned char *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640338;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270640338;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 24);
    char v9 = *(unsigned char *)(a2 + 29);
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    int v20 = v10;
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v14[0] = &unk_270640338;
    v14[1] = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v5;
    char v18 = v11;
    LODWORD(v11) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v15 = v11;
    int v12 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    int v16 = v12;
    LODWORD(v11) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v17 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 29);
    *(unsigned char *)(a1 + 29) = v9;
    char v19 = v11;
    PB::Base::~Base((PB::Base *)v14);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::formatText(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "initialized");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sensorTime");
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::readFrom(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_86;
            }
            unint64_t v45 = v21++;
            char v46 = *(unsigned char *)(v22 + v45);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_85:
              unint64_t v2 = v45 + 1;
              goto LABEL_86;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_85;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_86;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_86:
        *((void *)this + 1) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 28) = v28;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v33 = 0;
          if (v2 <= v29) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_91;
            }
            unint64_t v49 = v29++;
            char v50 = *(unsigned char *)(v30 + v49);
            *((void *)a2 + 1) = v29;
            v33 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0) {
              break;
            }
            v47 += 7;
            BOOL v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_90:
              unint64_t v2 = v49 + 1;
              goto LABEL_91;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v33) = 0;
          }
          goto LABEL_90;
        }
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        do
        {
          unint64_t v2 = v29 + 1;
          *((void *)a2 + 1) = v29 + 1;
          char v34 = *(unsigned char *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0) {
            goto LABEL_91;
          }
          v31 += 7;
          unint64_t v29 = v2;
          BOOL v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_91:
        *((_DWORD *)this + 4) = v33;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v35 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v36 = *(void *)a2;
        if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v39 = 0;
          if (v2 <= v35) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v35)
            {
              LODWORD(v39) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_96;
            }
            unint64_t v53 = v35++;
            char v54 = *(unsigned char *)(v36 + v53);
            *((void *)a2 + 1) = v35;
            v39 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0) {
              break;
            }
            v51 += 7;
            BOOL v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v39) = 0;
LABEL_95:
              unint64_t v2 = v53 + 1;
              goto LABEL_96;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v39) = 0;
          }
          goto LABEL_95;
        }
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        do
        {
          unint64_t v2 = v35 + 1;
          *((void *)a2 + 1) = v35 + 1;
          char v40 = *(unsigned char *)(v36 + v35);
          v39 |= (unint64_t)(v40 & 0x7F) << v37;
          if ((v40 & 0x80) == 0) {
            goto LABEL_96;
          }
          v37 += 7;
          unint64_t v35 = v2;
          BOOL v14 = v38++ > 8;
        }
        while (!v14);
        LODWORD(v39) = 0;
LABEL_96:
        *((_DWORD *)this + 6) = v39;
        break;
      case 6u:
        *((unsigned char *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v42 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v42 = v41 != 0;
        }
        *((unsigned char *)this + 29) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::write(a2);
}

BOOL CMMsl::AccessorySleepStateConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  }
  return v2;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 28);
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 32) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v6 = *((unsigned int *)this + 6);
  if ((*((unsigned char *)this + 32) & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this)
{
  *(void *)this = &unk_270640370;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640370;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessorySleepStateUpdate::~AccessorySleepStateUpdate(CMMsl::AccessorySleepStateUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this, const CMMsl::AccessorySleepStateUpdate *a2)
{
  *(void *)this = &unk_270640370;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((unsigned char *)a2 + 28) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, const CMMsl::AccessorySleepStateUpdate *a2)
{
  if ((const CMMsl::AccessorySleepStateUpdate *)a1 != a2)
  {
    CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    long long v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessorySleepStateUpdate *a2, CMMsl::AccessorySleepStateUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270640370;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(void *)uint64_t result = &unk_270640370;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = &unk_270640370;
    v8[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateUpdate::formatText(CMMsl::AccessorySleepStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "sensorTime");
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessorySleepStateUpdate::readFrom(CMMsl::AccessorySleepStateUpdate *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_90;
            }
            unint64_t v46 = v20++;
            char v47 = *(unsigned char *)(v21 + v46);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_89:
              unint64_t v3 = v46 + 1;
              goto LABEL_90;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_89;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v3 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_90;
          }
          v22 += 7;
          unint64_t v20 = v3;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_90:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_95;
            }
            unint64_t v50 = v26++;
            char v51 = *(unsigned char *)(v27 + v50);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_94:
              unint64_t v3 = v50 + 1;
              goto LABEL_95;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_94;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v3 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_95;
          }
          v28 += 7;
          unint64_t v26 = v3;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_95:
        *((_DWORD *)this + 4) = v30;
        break;
      case 3u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_100;
            }
            unint64_t v54 = v32++;
            char v55 = *(unsigned char *)(v33 + v54);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_99:
              unint64_t v3 = v54 + 1;
              goto LABEL_100;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_99;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v3 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_100;
          }
          v34 += 7;
          unint64_t v32 = v3;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_100:
        *((_DWORD *)this + 5) = v36;
        break;
      case 4u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_105;
            }
            unint64_t v58 = v38++;
            char v59 = *(unsigned char *)(v39 + v58);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_104:
              unint64_t v3 = v58 + 1;
              goto LABEL_105;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_104;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v3 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_105;
          }
          v40 += 7;
          unint64_t v38 = v3;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_105:
        *((_DWORD *)this + 6) = v42;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AccessorySleepStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::AccessorySleepStateUpdate::hash_value(CMMsl::AccessorySleepStateUpdate *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 4);
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      uint64_t v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this)
{
  *(void *)this = &unk_2706403A8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = &unk_2706403A8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(CMMsl::AccessoryStepDetectorDebug *this)
{
  *(void *)this = &unk_2706403A8;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  *(void *)this = &unk_2706403A8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  char v2 = *((unsigned char *)a2 + 60);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    char v3 = 4;
    *(unsigned char *)(this + 60) = 4;
    *(void *)(this + 32) = v4;
    char v2 = *((unsigned char *)a2 + 60);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 60) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x10u;
    *(unsigned char *)(this + 60) = v3;
    *(_DWORD *)(this + 52) = v5;
    char v2 = *((unsigned char *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v7 = *((_DWORD *)a2 + 12);
    v3 |= 8u;
    *(unsigned char *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v7;
    char v2 = *((unsigned char *)a2 + 60);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 2u;
  *(unsigned char *)(this + 60) = v3;
  *(void *)(this + 24) = v8;
  char v2 = *((unsigned char *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_18:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 1u;
  *(unsigned char *)(this + 60) = v3;
  *(void *)(this + 16) = v9;
  if ((*((unsigned char *)a2 + 60) & 0x20) != 0)
  {
LABEL_10:
    char v6 = *((unsigned char *)a2 + 56);
    *(unsigned char *)(this + 60) = v3 | 0x20;
    *(unsigned char *)(this + 56) = v6;
  }
LABEL_11:
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  if ((const CMMsl::AccessoryStepDetectorDebug *)a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v13;
    uint64_t v13 = v4;
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v15;
    uint64_t v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    long long v12 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v16;
    char v16 = v3;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryStepDetectorDebug *a2, CMMsl::AccessoryStepDetectorDebug *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  int v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v6) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v6;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  return result;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706403A8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v13;
    uint64_t v13 = v4;
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v15;
    uint64_t v15 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    long long v12 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v16;
    char v16 = v3;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    uint64_t v14 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::formatText(CMMsl::AccessoryStepDetectorDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 60) & 0x20) != 0) {
    PB::TextFormatter::format(a2, "detectedSteps");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "firstStepFeatures");
  }
  char v6 = *((unsigned char *)this + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "fsmEndState");
    char v6 = *((unsigned char *)this + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
  }
  else if ((*((unsigned char *)this + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "fsmStartState");
  char v6 = *((unsigned char *)this + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "impulseEndTime", *((double *)this + 2));
  char v6 = *((unsigned char *)this + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "impulseStartTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 60) & 4) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "imuTimestamp", *((double *)this + 4));
LABEL_11:
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "stepLikelihoodFeatures");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AccessoryStepDetectorDebug::readFrom(CMMsl::AccessoryStepDetectorDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 60) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v21);
        goto LABEL_71;
      case 2u:
        *((unsigned char *)this + 60) |= 0x10u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_75;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
          }
          while (!v14);
LABEL_60:
          LODWORD(v27) = 0;
          goto LABEL_75;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v46 = v22 + 1;
            char v47 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v46;
            v27 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              unint64_t v22 = v46;
              BOOL v14 = v45++ > 8;
              if (v14) {
                goto LABEL_60;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v27) = 0;
            }
          }
          break;
        }
LABEL_75:
        *((_DWORD *)this + 13) = v27;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 60) |= 8u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          do
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_79;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
          }
          while (!v14);
LABEL_67:
          LODWORD(v35) = 0;
          goto LABEL_79;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v35 = 0;
        if (v31 <= v30) {
          unint64_t v31 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        *((unsigned char *)this + 60) |= 2u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v38);
        goto LABEL_71;
      case 5u:
        *((unsigned char *)this + 60) |= 1u;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v39);
LABEL_71:
          *((void *)a2 + 1) += 8;
        }
        else
        {
LABEL_49:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 6u:
        *((unsigned char *)this + 60) |= 0x20u;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 >= *((void *)a2 + 2))
        {
          BOOL v43 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v41 = v40 + 1;
          int v42 = *(unsigned __int8 *)(*(void *)a2 + v40);
          *((void *)a2 + 1) = v41;
          BOOL v43 = v42 != 0;
        }
        *((unsigned char *)this + 56) = v43;
        goto LABEL_20;
      case 7u:
        operator new();
      case 8u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v31 == v30)
      {
        LODWORD(v35) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_79;
      }
      unint64_t v50 = v30 + 1;
      char v51 = *(unsigned char *)(v32 + v30);
      *((void *)a2 + 1) = v50;
      v35 |= (unint64_t)(v51 & 0x7F) << v48;
      if ((v51 & 0x80) == 0) {
        break;
      }
      v48 += 7;
      unint64_t v30 = v50;
      BOOL v14 = v49++ > 8;
      if (v14) {
        goto LABEL_67;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v35) = 0;
    }
LABEL_79:
    *((_DWORD *)this + 12) = v35;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t this)
{
  *(void *)this = &unk_270645380;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(void *)this = &unk_270645380;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this)
{
  *(void *)this = &unk_270641918;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_270641918;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 60);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(this + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  if ((*(unsigned char *)(v3 + 60) & 0x20) != 0) {
LABEL_7:
  }
    this = PB::Writer::write(a2);
LABEL_8:
  uint64_t v5 = *(const PB::Base **)(v3 + 40);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  char v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
  {
    return PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

BOOL CMMsl::AccessoryStepDetectorDebug::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 60) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 0x10) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 0x20) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::StepLikelihoodFeatures::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL result = v6 == 0;
  if (!*(void *)(a1 + 8)) {
    return result;
  }
  return v6 && CMMsl::FirstStepFeatures::operator==(*(void *)(a1 + 8), v6);
}

BOOL CMMsl::StepLikelihoodFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 96);
  __int16 v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v4;
}

BOOL CMMsl::FirstStepFeatures::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v2;
}

unint64_t CMMsl::AccessoryStepDetectorDebug::hash_value(CMMsl::AccessoryStepDetectorDebug *this)
{
  if ((*((unsigned char *)this + 60) & 4) != 0)
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 60) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 13);
      if ((*((unsigned char *)this + 60) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 60) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 60) & 8) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((*((unsigned char *)this + 60) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_20:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 60)) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 60) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 3);
  }
  if (*((unsigned char *)this + 60))
  {
LABEL_9:
    if (*((double *)this + 2) == 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *((void *)this + 2);
    }
    if ((*((unsigned char *)this + 60) & 0x20) != 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 60) & 0x20) != 0)
  {
LABEL_13:
    uint64_t v7 = *((unsigned __int8 *)this + 56);
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v7 = 0;
LABEL_23:
  uint64_t v8 = (CMMsl::StepLikelihoodFeatures *)*((void *)this + 5);
  if (v8) {
    uint64_t v9 = CMMsl::StepLikelihoodFeatures::hash_value(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *((void *)this + 1);
  if (v10) {
    unint64_t v10 = CMMsl::FirstStepFeatures::hash_value((CMMsl::FirstStepFeatures *)v10);
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::makeStepLikelihoodFeatures(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::makeFirstStepFeatures(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t this)
{
  *(void *)this = &unk_2706403E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = &unk_2706403E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::AccessoryWake::~AccessoryWake(CMMsl::AccessoryWake *this)
{
  *(void *)this = &unk_2706403E0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryWake::~AccessoryWake(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AccessoryWake *CMMsl::AccessoryWake::AccessoryWake(CMMsl::AccessoryWake *this, const CMMsl::AccessoryWake *a2)
{
  *(void *)this = &unk_2706403E0;
  *((void *)this + 1) = 0;
  uint64_t v3 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  char v4 = *((unsigned char *)a2 + 52);
  if ((v4 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 11);
    char v5 = 4;
    *((unsigned char *)this + 52) = 4;
    *((_DWORD *)this + 11) = v6;
    char v4 = *((unsigned char *)a2 + 52);
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 0;
  if (*((unsigned char *)a2 + 52))
  {
LABEL_5:
    uint64_t v7 = *((void *)a2 + 4);
    v5 |= 1u;
    *((unsigned char *)this + 52) = v5;
    *((void *)this + 4) = v7;
    char v4 = *((unsigned char *)a2 + 52);
  }
LABEL_6:
  if ((v4 & 8) == 0)
  {
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v10 = *((_DWORD *)a2 + 12);
  v5 |= 8u;
  *((unsigned char *)this + 52) = v5;
  *((_DWORD *)this + 12) = v10;
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
LABEL_8:
    int v8 = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 52) = v5 | 2;
    *((_DWORD *)this + 10) = v8;
  }
LABEL_9:
  if (this != a2) {
    sub_2572C75B4(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, const CMMsl::AccessoryWake *a2)
{
  if ((const CMMsl::AccessoryWake *)a1 != a2)
  {
    CMMsl::AccessoryWake::AccessoryWake((CMMsl::AccessoryWake *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryWake *a2, CMMsl::AccessoryWake *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  int v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  int v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706403E0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryWake::AccessoryWake((uint64_t)v8, a2);
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWake::formatText(CMMsl::AccessoryWake *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hostState");
    char v5 = *((unsigned char *)this + 52);
  }
  if ((v5 & 4) != 0) {
    PB::TextFormatter::format(a2, "location");
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(a2, "s7q8");
  }
  char v8 = *((unsigned char *)this + 52);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensorState");
    char v8 = *((unsigned char *)this + 52);
  }
  if (v8) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AccessoryWake::readFrom(CMMsl::AccessoryWake *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v58 = v10++ > 8;
        if (v58) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((unsigned char *)this + 52) |= 4u;
            unint64_t v19 = *((void *)a2 + 1);
            unint64_t v20 = *((void *)a2 + 2);
            uint64_t v21 = *(void *)a2;
            if (v19 <= 0xFFFFFFFFFFFFFFF5 && v19 + 10 <= v20)
            {
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v25 = v19 + 1;
                *((void *)a2 + 1) = v19 + 1;
                char v26 = *(unsigned char *)(v21 + v19);
                v24 |= (unint64_t)(v26 & 0x7F) << v22;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v22 += 7;
                unint64_t v19 = v25;
                BOOL v58 = v23++ > 8;
              }
              while (!v58);
LABEL_102:
              LODWORD(v24) = 0;
              goto LABEL_135;
            }
            char v69 = 0;
            unsigned int v70 = 0;
            uint64_t v24 = 0;
            if (v20 <= v19) {
              unint64_t v20 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v20 == v19)
              {
                LODWORD(v24) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v71 = v19 + 1;
                char v72 = *(unsigned char *)(v21 + v19);
                *((void *)a2 + 1) = v71;
                v24 |= (unint64_t)(v72 & 0x7F) << v69;
                if (v72 < 0)
                {
                  v69 += 7;
                  unint64_t v19 = v71;
                  BOOL v58 = v70++ > 8;
                  if (v58) {
                    goto LABEL_102;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
              }
              break;
            }
LABEL_135:
            *((_DWORD *)this + 11) = v24;
            goto LABEL_20;
          case 2u:
            *((unsigned char *)this + 52) |= 1u;
            unint64_t v27 = *((void *)a2 + 1);
            if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *((void *)a2 + 2))
            {
              *((void *)this + 4) = *(void *)(*(void *)a2 + v27);
              *((void *)a2 + 1) += 8;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
            goto LABEL_20;
          case 3u:
            *((unsigned char *)this + 52) |= 8u;
            unint64_t v28 = *((void *)a2 + 1);
            unint64_t v29 = *((void *)a2 + 2);
            uint64_t v30 = *(void *)a2;
            if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
            {
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v34 = v28 + 1;
                *((void *)a2 + 1) = v28 + 1;
                char v35 = *(unsigned char *)(v30 + v28);
                v33 |= (unint64_t)(v35 & 0x7F) << v31;
                if ((v35 & 0x80) == 0) {
                  goto LABEL_138;
                }
                v31 += 7;
                unint64_t v28 = v34;
                BOOL v58 = v32++ > 8;
              }
              while (!v58);
LABEL_109:
              LODWORD(v33) = 0;
              goto LABEL_138;
            }
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v33 = 0;
            if (v29 <= v28) {
              unint64_t v29 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v29 == v28)
              {
                LODWORD(v33) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v75 = v28 + 1;
                char v76 = *(unsigned char *)(v30 + v28);
                *((void *)a2 + 1) = v75;
                v33 |= (unint64_t)(v76 & 0x7F) << v73;
                if (v76 < 0)
                {
                  v73 += 7;
                  unint64_t v28 = v75;
                  BOOL v58 = v74++ > 8;
                  if (v58) {
                    goto LABEL_109;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
              }
              break;
            }
LABEL_138:
            *((_DWORD *)this + 12) = v33;
            goto LABEL_20;
          case 4u:
            *((unsigned char *)this + 52) |= 2u;
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            uint64_t v38 = *(void *)a2;
            if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
            {
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v42 = v36 + 1;
                *((void *)a2 + 1) = v36 + 1;
                char v43 = *(unsigned char *)(v38 + v36);
                v41 |= (unint64_t)(v43 & 0x7F) << v39;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_141;
                }
                v39 += 7;
                unint64_t v36 = v42;
                BOOL v58 = v40++ > 8;
              }
              while (!v58);
LABEL_116:
              LODWORD(v41) = 0;
              goto LABEL_141;
            }
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v41 = 0;
            if (v37 <= v36) {
              unint64_t v37 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v37 == v36)
              {
                LODWORD(v41) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v79 = v36 + 1;
                char v80 = *(unsigned char *)(v38 + v36);
                *((void *)a2 + 1) = v79;
                v41 |= (unint64_t)(v80 & 0x7F) << v77;
                if (v80 < 0)
                {
                  v77 += 7;
                  unint64_t v36 = v79;
                  BOOL v58 = v78++ > 8;
                  if (v58) {
                    goto LABEL_116;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
              }
              break;
            }
LABEL_141:
            *((_DWORD *)this + 10) = v41;
            goto LABEL_20;
          case 5u:
            if ((v11 & 7) == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
              {
                char v44 = (char *)*((void *)this + 2);
                do
                {
                  unint64_t v45 = *((void *)this + 3);
                  if ((unint64_t)v44 >= v45)
                  {
                    unint64_t v46 = (char *)*((void *)this + 1);
                    uint64_t v47 = (v44 - v46) >> 2;
                    unint64_t v48 = v47 + 1;
                    if ((unint64_t)(v47 + 1) >> 62) {
                      goto LABEL_172;
                    }
                    uint64_t v49 = v45 - (void)v46;
                    if (v49 >> 1 > v48) {
                      unint64_t v48 = v49 >> 1;
                    }
                    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v50 = v48;
                    }
                    if (v50)
                    {
                      unint64_t v50 = (unint64_t)sub_2572C76F0(v50);
                      unint64_t v46 = (char *)*((void *)this + 1);
                      char v44 = (char *)*((void *)this + 2);
                    }
                    else
                    {
                      uint64_t v51 = 0;
                    }
                    char v52 = (_DWORD *)(v50 + 4 * v47);
                    *char v52 = 0;
                    unsigned int v53 = (char *)(v52 + 1);
                    while (v44 != v46)
                    {
                      int v54 = *((_DWORD *)v44 - 1);
                      v44 -= 4;
                      *--char v52 = v54;
                    }
                    *((void *)this + 1) = v52;
                    *((void *)this + 2) = v53;
                    *((void *)this + 3) = v50 + 4 * v51;
                    if (v46) {
                      operator delete(v46);
                    }
                    char v44 = v53;
                  }
                  else
                  {
                    *(_DWORD *)char v44 = 0;
                    v44 += 4;
                  }
                  *((void *)this + 2) = v44;
                  unint64_t v56 = *((void *)a2 + 1);
                  unint64_t v55 = *((void *)a2 + 2);
                  uint64_t v57 = *(void *)a2;
                  BOOL v58 = v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v55;
                  if (!v58)
                  {
                    char v64 = 0;
                    unsigned int v65 = 0;
                    uint64_t v66 = 0;
                    while (1)
                    {
                      unint64_t v67 = v56 + 1;
                      *((void *)a2 + 1) = v56 + 1;
                      char v68 = *(unsigned char *)(v57 + v56);
                      v66 |= (unint64_t)(v68 & 0x7F) << v64;
                      if ((v68 & 0x80) == 0) {
                        goto LABEL_93;
                      }
                      v64 += 7;
                      unint64_t v56 = v67;
                      BOOL v58 = v65++ > 8;
                      if (v58)
                      {
                        LODWORD(v66) = 0;
                        goto LABEL_93;
                      }
                    }
                  }
                  char v59 = 0;
                  unsigned int v60 = 0;
                  uint64_t v66 = 0;
                  if (v55 <= v56) {
                    uint64_t v61 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v61 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v61 == v56)
                    {
                      *((unsigned char *)a2 + 24) = 1;
                      *((_DWORD *)v44 - 1) = 0;
                      goto LABEL_129;
                    }
                    unint64_t v62 = v56++;
                    char v63 = *(unsigned char *)(v57 + v62);
                    *((void *)a2 + 1) = v56;
                    v66 |= (unint64_t)(v63 & 0x7F) << v59;
                    if ((v63 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    BOOL v58 = v60++ > 8;
                    if (v58)
                    {
                      LODWORD(v66) = 0;
                      goto LABEL_92;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v66) = 0;
                  }
LABEL_92:
                  unint64_t v67 = v62 + 1;
LABEL_93:
                  *((_DWORD *)v44 - 1) = v66;
                }
                while (v67 < v55 && !*((unsigned char *)a2 + 24));
              }
LABEL_129:
              PB::Reader::recallMark();
            }
            else
            {
              char v82 = (char *)*((void *)this + 2);
              unint64_t v81 = *((void *)this + 3);
              if ((unint64_t)v82 >= v81)
              {
                char v84 = (char *)*((void *)this + 1);
                uint64_t v85 = (v82 - v84) >> 2;
                unint64_t v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62) {
LABEL_172:
                }
                  sub_2570AFD0C();
                uint64_t v87 = v81 - (void)v84;
                if (v87 >> 1 > v86) {
                  unint64_t v86 = v87 >> 1;
                }
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v88 = v86;
                }
                if (v88)
                {
                  unint64_t v88 = (unint64_t)sub_2572C76F0(v88);
                  char v84 = (char *)*((void *)this + 1);
                  char v82 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v89 = 0;
                }
                unint64_t v90 = (_DWORD *)(v88 + 4 * v85);
                _DWORD *v90 = 0;
                uint64_t v83 = v90 + 1;
                while (v82 != v84)
                {
                  int v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *--unint64_t v90 = v91;
                }
                *((void *)this + 1) = v90;
                *((void *)this + 2) = v83;
                *((void *)this + 3) = v88 + 4 * v89;
                if (v84) {
                  operator delete(v84);
                }
              }
              else
              {
                *(_DWORD *)char v82 = 0;
                uint64_t v83 = v82 + 4;
              }
              *((void *)this + 2) = v83;
              unint64_t v92 = *((void *)a2 + 1);
              unint64_t v93 = *((void *)a2 + 2);
              uint64_t v94 = *(void *)a2;
              char v95 = 0;
              unsigned int v96 = 0;
              if (v92 > 0xFFFFFFFFFFFFFFF5 || v92 + 10 > v93)
              {
                uint64_t v100 = 0;
                if (v93 <= v92) {
                  unint64_t v93 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v93 == v92)
                  {
                    LODWORD(v100) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v98 = v92 + 1;
                  char v99 = *(unsigned char *)(v94 + v92);
                  *((void *)a2 + 1) = v98;
                  v100 |= (unint64_t)(v99 & 0x7F) << v95;
                  if ((v99 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  unint64_t v92 = v98;
                  BOOL v58 = v96++ > 8;
                  if (v58)
                  {
LABEL_163:
                    LODWORD(v100) = 0;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v100) = 0;
                }
              }
              else
              {
                uint64_t v100 = 0;
                while (1)
                {
                  unint64_t v101 = v92 + 1;
                  *((void *)a2 + 1) = v92 + 1;
                  char v102 = *(unsigned char *)(v94 + v92);
                  v100 |= (unint64_t)(v102 & 0x7F) << v95;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  unint64_t v92 = v101;
                  BOOL v58 = v96++ > 8;
                  if (v58) {
                    goto LABEL_163;
                  }
                }
              }
LABEL_167:
              *(v83 - 1) = v100;
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v14 = 0;
  unsigned int v15 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v16 = v2 + 1;
    char v17 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v16;
    v11 |= (unint64_t)(v17 & 0x7F) << v14;
    if ((v17 & 0x80) == 0) {
      goto LABEL_25;
    }
    v14 += 7;
    unint64_t v2 = v16;
    BOOL v58 = v15++ > 8;
  }
  while (!v58);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

uint64_t CMMsl::AccessoryWake::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 52) & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 52) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v4 & 2) != 0) {
LABEL_5:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_6:
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  while (v6 != v5)
  {
    v6 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::AccessoryWake::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 52))
  {
    if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 52))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 2) != 0)
  {
    return 0;
  }
  size_t v2 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  if (v2 == *(void *)(a2 + 16) - *(void *)(a2 + 8)) {
    return memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v2) == 0;
  }
  return 0;
}

uint64_t CMMsl::AccessoryWake::hash_value(CMMsl::AccessoryWake *this)
{
  if ((*((unsigned char *)this + 52) & 4) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 52)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 52) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes();
  }
  uint64_t v1 = *((unsigned int *)this + 11);
  if ((*((unsigned char *)this + 52) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 52) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v3 = *((unsigned int *)this + 12);
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v4 = *((unsigned int *)this + 10);
  return *(void *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes();
}

double CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  *(void *)this = &unk_270640418;
  *((_DWORD *)this + 48) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640418;
  *((_DWORD *)this + 48) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

void CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  *(void *)this = &unk_270640418;
  double v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AccessoryWakeDebug *CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this, const CMMsl::AccessoryWakeDebug *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_270640418;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if (*((_WORD *)a2 + 96))
  {
    uint64_t v5 = *((void *)a2 + 19);
    *((_WORD *)this + 96) = 1;
    *((void *)this + 19) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4((void *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x80) != 0)
  {
    int v9 = *((_DWORD *)a2 + 46);
    *((_WORD *)this + 96) |= 0x80u;
    *((_DWORD *)this + 46) = v9;
    __int16 v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  int v10 = *((_DWORD *)a2 + 45);
  *((_WORD *)this + 96) |= 0x40u;
  *((_DWORD *)this + 45) = v10;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 47);
  *((_WORD *)this + 96) |= 0x100u;
  *((_DWORD *)this + 47) = v11;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_9:
    if ((v6 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v12 = *((_DWORD *)a2 + 41);
  *((_WORD *)this + 96) |= 4u;
  *((_DWORD *)this + 41) = v12;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v13 = *((_DWORD *)a2 + 42);
  *((_WORD *)this + 96) |= 8u;
  *((_DWORD *)this + 42) = v13;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v14 = *((_DWORD *)a2 + 44);
  *((_WORD *)this + 96) |= 0x20u;
  *((_DWORD *)this + 44) = v14;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_12:
    if ((v6 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_23:
  int v15 = *((_DWORD *)a2 + 43);
  *((_WORD *)this + 96) |= 0x10u;
  *((_DWORD *)this + 43) = v15;
  if ((*((_WORD *)a2 + 96) & 2) != 0)
  {
LABEL_13:
    int v7 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 96) |= 2u;
    *((_DWORD *)this + 40) = v7;
  }
LABEL_14:
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 13, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    sub_2572C75B4((void *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, const CMMsl::AccessoryWakeDebug *a2)
{
  if (a1 != a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryWakeDebug *a2, CMMsl::AccessoryWakeDebug *a3)
{
  int v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  LODWORD(v4) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v4;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v16) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v16;
  LODWORD(v4) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v4;
  float result = *((float *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((float *)a2 + 40) = result;
  uint64_t v18 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v18;
  uint64_t v19 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v19;
  uint64_t v20 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v20;
  uint64_t v21 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v21;
  uint64_t v22 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v22;
  uint64_t v23 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v23;
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640418;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  uint64_t v6 = a1 + 128;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v7 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v8 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 80));
  sub_2572C7560(v8, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  sub_2572C7560(v7, (__n128 *)(a2 + 104));
  sub_2572C7560(v6, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWakeDebug::formatText(CMMsl::AccessoryWakeDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accelDecimated", v7);
  }
  if ((*((_WORD *)this + 96) & 2) != 0) {
    PB::TextFormatter::format(a2, "accelFrontVariance", *((float *)this + 40));
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "accelMean", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "accelNormAutocorr", v13);
  }
  __int16 v14 = *((_WORD *)this + 96);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelNormMean", *((float *)this + 41));
    __int16 v14 = *((_WORD *)this + 96);
  }
  if ((v14 & 8) != 0) {
    PB::TextFormatter::format(a2, "accelNormVariance", *((float *)this + 42));
  }
  uint64_t v15 = (float *)*((void *)this + 10);
  uint64_t v16 = (float *)*((void *)this + 11);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(a2, "accelVariance", v17);
  }
  __int16 v18 = *((_WORD *)this + 96);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentAngleDelta", *((float *)this + 43));
    __int16 v18 = *((_WORD *)this + 96);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "currentMotionState");
  if ((*((_WORD *)this + 96) & 0x40) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "lagAtMaxAutocorr");
LABEL_19:
  uint64_t v19 = (float *)*((void *)this + 13);
  uint64_t v20 = (float *)*((void *)this + 14);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(a2, "lastBaseline", v21);
  }
  __int16 v22 = *((_WORD *)this + 96);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "maxAutocorr", *((float *)this + 46));
    __int16 v22 = *((_WORD *)this + 96);
  }
  if (v22) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  }
  uint64_t v23 = (float *)*((void *)this + 16);
  uint64_t v24 = (float *)*((void *)this + 17);
  while (v23 != v24)
  {
    float v25 = *v23++;
    PB::TextFormatter::format(a2, "walkingBaseline", v25);
  }
  if ((*((_WORD *)this + 96) & 0x100) != 0) {
    PB::TextFormatter::format(a2, "widthAtMaxAutocorr");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AccessoryWakeDebug::readFrom(CMMsl::AccessoryWakeDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_345;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_348;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            while (v22 < v23 && !*((unsigned char *)a2 + 24))
            {
              float v25 = (char *)*((void *)this + 2);
              unint64_t v24 = *((void *)this + 3);
              if ((unint64_t)v25 >= v24)
              {
                unint64_t v27 = (char *)*((void *)this + 1);
                uint64_t v28 = (v25 - v27) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_358;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v31 = (unint64_t)sub_2572C76F0(v31);
                  unint64_t v27 = (char *)*((void *)this + 1);
                  float v25 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                uint64_t v33 = (_DWORD *)(v31 + 4 * v28);
                *uint64_t v33 = 0;
                char v26 = v33 + 1;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--uint64_t v33 = v34;
                }
                *((void *)this + 1) = v33;
                *((void *)this + 2) = v26;
                *((void *)this + 3) = v31 + 4 * v32;
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)float v25 = 0;
                char v26 = v25 + 4;
              }
              *((void *)this + 2) = v26;
              unint64_t v35 = *((void *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
                goto LABEL_206;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)a2 + v35);
              unint64_t v23 = *((void *)a2 + 2);
              unint64_t v22 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v22;
            }
            goto LABEL_207;
          }
          unint64_t v136 = (char *)*((void *)this + 2);
          unint64_t v135 = *((void *)this + 3);
          if ((unint64_t)v136 >= v135)
          {
            char v160 = (char *)*((void *)this + 1);
            uint64_t v161 = (v136 - v160) >> 2;
            unint64_t v162 = v161 + 1;
            if ((unint64_t)(v161 + 1) >> 62) {
              goto LABEL_358;
            }
            uint64_t v163 = v135 - (void)v160;
            if (v163 >> 1 > v162) {
              unint64_t v162 = v163 >> 1;
            }
            if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v164 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v164 = v162;
            }
            if (v164)
            {
              unint64_t v164 = (unint64_t)sub_2572C76F0(v164);
              char v160 = (char *)*((void *)this + 1);
              unint64_t v136 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v165 = 0;
            }
            v196 = (_DWORD *)(v164 + 4 * v161);
            _DWORD *v196 = 0;
            uint64_t v137 = v196 + 1;
            while (v136 != v160)
            {
              int v197 = *((_DWORD *)v136 - 1);
              v136 -= 4;
              *--v196 = v197;
            }
            *((void *)this + 1) = v196;
            *((void *)this + 2) = v137;
            *((void *)this + 3) = v164 + 4 * v165;
            if (v160) {
              operator delete(v160);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v136 = 0;
            uint64_t v137 = v136 + 4;
          }
          *((void *)this + 2) = v137;
          goto LABEL_343;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            while (v36 < v37 && !*((unsigned char *)a2 + 24))
            {
              char v39 = (char *)*((void *)this + 5);
              unint64_t v38 = *((void *)this + 6);
              if ((unint64_t)v39 >= v38)
              {
                uint64_t v41 = (char *)*((void *)this + 4);
                uint64_t v42 = (v39 - v41) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_358;
                }
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
                  uint64_t v41 = (char *)*((void *)this + 4);
                  char v39 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                uint64_t v47 = (_DWORD *)(v45 + 4 * v42);
                *uint64_t v47 = 0;
                unsigned int v40 = v47 + 1;
                while (v39 != v41)
                {
                  int v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--uint64_t v47 = v48;
                }
                *((void *)this + 4) = v47;
                *((void *)this + 5) = v40;
                *((void *)this + 6) = v45 + 4 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(_DWORD *)char v39 = 0;
                unsigned int v40 = v39 + 4;
              }
              *((void *)this + 5) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
                goto LABEL_206;
              }
              *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
              unint64_t v37 = *((void *)a2 + 2);
              unint64_t v36 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v36;
            }
            goto LABEL_207;
          }
          int v139 = (char *)*((void *)this + 5);
          unint64_t v138 = *((void *)this + 6);
          if ((unint64_t)v139 >= v138)
          {
            v166 = (char *)*((void *)this + 4);
            uint64_t v167 = (v139 - v166) >> 2;
            unint64_t v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62) {
              goto LABEL_358;
            }
            uint64_t v169 = v138 - (void)v166;
            if (v169 >> 1 > v168) {
              unint64_t v168 = v169 >> 1;
            }
            if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v170 = v168;
            }
            if (v170)
            {
              unint64_t v170 = (unint64_t)sub_2572C76F0(v170);
              v166 = (char *)*((void *)this + 4);
              int v139 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v171 = 0;
            }
            int v198 = (_DWORD *)(v170 + 4 * v167);
            *int v198 = 0;
            uint64_t v137 = v198 + 1;
            while (v139 != v166)
            {
              int v199 = *((_DWORD *)v139 - 1);
              v139 -= 4;
              *--int v198 = v199;
            }
            *((void *)this + 4) = v198;
            *((void *)this + 5) = v137;
            *((void *)this + 6) = v170 + 4 * v171;
            if (v166) {
              operator delete(v166);
            }
          }
          else
          {
            *(_DWORD *)int v139 = 0;
            uint64_t v137 = v139 + 4;
          }
          *((void *)this + 5) = v137;
          goto LABEL_343;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            while (v50 < v51 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v53 = (char *)*((void *)this + 11);
              unint64_t v52 = *((void *)this + 12);
              if ((unint64_t)v53 >= v52)
              {
                unint64_t v55 = (char *)*((void *)this + 10);
                uint64_t v56 = (v53 - v55) >> 2;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  goto LABEL_358;
                }
                uint64_t v58 = v52 - (void)v55;
                if (v58 >> 1 > v57) {
                  unint64_t v57 = v58 >> 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v57;
                }
                if (v59)
                {
                  unint64_t v59 = (unint64_t)sub_2572C76F0(v59);
                  unint64_t v55 = (char *)*((void *)this + 10);
                  unsigned int v53 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v60 = 0;
                }
                uint64_t v61 = (_DWORD *)(v59 + 4 * v56);
                *uint64_t v61 = 0;
                int v54 = v61 + 1;
                while (v53 != v55)
                {
                  int v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--uint64_t v61 = v62;
                }
                *((void *)this + 10) = v61;
                *((void *)this + 11) = v54;
                *((void *)this + 12) = v59 + 4 * v60;
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v53 = 0;
                int v54 = v53 + 4;
              }
              *((void *)this + 11) = v54;
              unint64_t v63 = *((void *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2)) {
                goto LABEL_206;
              }
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              unint64_t v51 = *((void *)a2 + 2);
              unint64_t v50 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v50;
            }
            goto LABEL_207;
          }
          int v141 = (char *)*((void *)this + 11);
          unint64_t v140 = *((void *)this + 12);
          if ((unint64_t)v141 >= v140)
          {
            v172 = (char *)*((void *)this + 10);
            uint64_t v173 = (v141 - v172) >> 2;
            unint64_t v174 = v173 + 1;
            if ((unint64_t)(v173 + 1) >> 62) {
              goto LABEL_358;
            }
            uint64_t v175 = v140 - (void)v172;
            if (v175 >> 1 > v174) {
              unint64_t v174 = v175 >> 1;
            }
            if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v176 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v176 = v174;
            }
            if (v176)
            {
              unint64_t v176 = (unint64_t)sub_2572C76F0(v176);
              v172 = (char *)*((void *)this + 10);
              int v141 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v177 = 0;
            }
            unint64_t v200 = (_DWORD *)(v176 + 4 * v173);
            *unint64_t v200 = 0;
            uint64_t v137 = v200 + 1;
            while (v141 != v172)
            {
              int v201 = *((_DWORD *)v141 - 1);
              v141 -= 4;
              *--unint64_t v200 = v201;
            }
            *((void *)this + 10) = v200;
            *((void *)this + 11) = v137;
            *((void *)this + 12) = v176 + 4 * v177;
            if (v172) {
              operator delete(v172);
            }
          }
          else
          {
            *(_DWORD *)int v141 = 0;
            uint64_t v137 = v141 + 4;
          }
          *((void *)this + 11) = v137;
          goto LABEL_343;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v64 = *((void *)a2 + 1);
            unint64_t v65 = *((void *)a2 + 2);
            while (v64 < v65 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v67 = (char *)*((void *)this + 8);
              unint64_t v66 = *((void *)this + 9);
              if ((unint64_t)v67 >= v66)
              {
                char v69 = (char *)*((void *)this + 7);
                uint64_t v70 = (v67 - v69) >> 2;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62) {
                  goto LABEL_358;
                }
                uint64_t v72 = v66 - (void)v69;
                if (v72 >> 1 > v71) {
                  unint64_t v71 = v72 >> 1;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73)
                {
                  unint64_t v73 = (unint64_t)sub_2572C76F0(v73);
                  char v69 = (char *)*((void *)this + 7);
                  unint64_t v67 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v74 = 0;
                }
                unint64_t v75 = (_DWORD *)(v73 + 4 * v70);
                *unint64_t v75 = 0;
                char v68 = v75 + 1;
                while (v67 != v69)
                {
                  int v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--unint64_t v75 = v76;
                }
                *((void *)this + 7) = v75;
                *((void *)this + 8) = v68;
                *((void *)this + 9) = v73 + 4 * v74;
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v67 = 0;
                char v68 = v67 + 4;
              }
              *((void *)this + 8) = v68;
              unint64_t v77 = *((void *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
                goto LABEL_206;
              }
              *(v68 - 1) = *(_DWORD *)(*(void *)a2 + v77);
              unint64_t v65 = *((void *)a2 + 2);
              unint64_t v64 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v64;
            }
            goto LABEL_207;
          }
          uint64_t v143 = (char *)*((void *)this + 8);
          unint64_t v142 = *((void *)this + 9);
          if ((unint64_t)v143 >= v142)
          {
            v178 = (char *)*((void *)this + 7);
            uint64_t v179 = (v143 - v178) >> 2;
            unint64_t v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 62) {
              goto LABEL_358;
            }
            uint64_t v181 = v142 - (void)v178;
            if (v181 >> 1 > v180) {
              unint64_t v180 = v181 >> 1;
            }
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v182 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v182 = v180;
            }
            if (v182)
            {
              unint64_t v182 = (unint64_t)sub_2572C76F0(v182);
              v178 = (char *)*((void *)this + 7);
              uint64_t v143 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v183 = 0;
            }
            v202 = (_DWORD *)(v182 + 4 * v179);
            _DWORD *v202 = 0;
            uint64_t v137 = v202 + 1;
            while (v143 != v178)
            {
              int v203 = *((_DWORD *)v143 - 1);
              v143 -= 4;
              *--v202 = v203;
            }
            *((void *)this + 7) = v202;
            *((void *)this + 8) = v137;
            *((void *)this + 9) = v182 + 4 * v183;
            if (v178) {
              operator delete(v178);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v143 = 0;
            uint64_t v137 = v143 + 4;
          }
          *((void *)this + 8) = v137;
          goto LABEL_343;
        case 6u:
          *((_WORD *)this + 96) |= 0x80u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
            goto LABEL_345;
          }
          *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v78);
          goto LABEL_347;
        case 7u:
          *((_WORD *)this + 96) |= 0x40u;
          unint64_t v79 = *((void *)a2 + 1);
          unint64_t v80 = *((void *)a2 + 2);
          uint64_t v81 = *(void *)a2;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            char v82 = 0;
            unsigned int v83 = 0;
            uint64_t v84 = 0;
            do
            {
              unint64_t v85 = v79 + 1;
              *((void *)a2 + 1) = v79 + 1;
              char v86 = *(unsigned char *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0) {
                goto LABEL_294;
              }
              v82 += 7;
              unint64_t v79 = v85;
              BOOL v14 = v83++ > 8;
            }
            while (!v14);
LABEL_222:
            LODWORD(v84) = 0;
            goto LABEL_294;
          }
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v84 = 0;
          if (v80 <= v79) {
            unint64_t v80 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v146 = v79 + 1;
              char v147 = *(unsigned char *)(v81 + v79);
              *((void *)a2 + 1) = v146;
              v84 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                unint64_t v79 = v146;
                BOOL v14 = v145++ > 8;
                if (v14) {
                  goto LABEL_222;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v84) = 0;
              }
            }
            break;
          }
LABEL_294:
          *((_DWORD *)this + 45) = v84;
          goto LABEL_349;
        case 8u:
          *((_WORD *)this + 96) |= 0x100u;
          unint64_t v87 = *((void *)a2 + 1);
          unint64_t v88 = *((void *)a2 + 2);
          uint64_t v89 = *(void *)a2;
          if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
          {
            char v90 = 0;
            unsigned int v91 = 0;
            uint64_t v92 = 0;
            do
            {
              unint64_t v93 = v87 + 1;
              *((void *)a2 + 1) = v87 + 1;
              char v94 = *(unsigned char *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0) {
                goto LABEL_297;
              }
              v90 += 7;
              unint64_t v87 = v93;
              BOOL v14 = v91++ > 8;
            }
            while (!v14);
LABEL_229:
            LODWORD(v92) = 0;
            goto LABEL_297;
          }
          char v148 = 0;
          unsigned int v149 = 0;
          uint64_t v92 = 0;
          if (v88 <= v87) {
            unint64_t v88 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v150 = v87 + 1;
              char v151 = *(unsigned char *)(v89 + v87);
              *((void *)a2 + 1) = v150;
              v92 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                unint64_t v87 = v150;
                BOOL v14 = v149++ > 8;
                if (v14) {
                  goto LABEL_229;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v92) = 0;
              }
            }
            break;
          }
LABEL_297:
          *((_DWORD *)this + 47) = v92;
          goto LABEL_349;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          unint64_t v95 = *((void *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((void *)a2 + 2)) {
            goto LABEL_345;
          }
          *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v95);
          goto LABEL_347;
        case 0xAu:
          *((_WORD *)this + 96) |= 8u;
          unint64_t v96 = *((void *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)a2 + 2)) {
            goto LABEL_345;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v96);
          goto LABEL_347;
        case 0xBu:
          *((_WORD *)this + 96) |= 0x20u;
          unint64_t v97 = *((void *)a2 + 1);
          unint64_t v98 = *((void *)a2 + 2);
          uint64_t v99 = *(void *)a2;
          if (v97 <= 0xFFFFFFFFFFFFFFF5 && v97 + 10 <= v98)
          {
            char v100 = 0;
            unsigned int v101 = 0;
            uint64_t v102 = 0;
            do
            {
              unint64_t v103 = v97 + 1;
              *((void *)a2 + 1) = v97 + 1;
              char v104 = *(unsigned char *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0) {
                goto LABEL_300;
              }
              v100 += 7;
              unint64_t v97 = v103;
              BOOL v14 = v101++ > 8;
            }
            while (!v14);
LABEL_236:
            LODWORD(v102) = 0;
            goto LABEL_300;
          }
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v102 = 0;
          if (v98 <= v97) {
            unint64_t v98 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v154 = v97 + 1;
              char v155 = *(unsigned char *)(v99 + v97);
              *((void *)a2 + 1) = v154;
              v102 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                unint64_t v97 = v154;
                BOOL v14 = v153++ > 8;
                if (v14) {
                  goto LABEL_236;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v102) = 0;
              }
            }
            break;
          }
LABEL_300:
          *((_DWORD *)this + 44) = v102;
          goto LABEL_349;
        case 0xCu:
          *((_WORD *)this + 96) |= 0x10u;
          unint64_t v105 = *((void *)a2 + 1);
          if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)a2 + 2)) {
            goto LABEL_345;
          }
          *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v105);
          goto LABEL_347;
        case 0xDu:
          *((_WORD *)this + 96) |= 2u;
          unint64_t v106 = *((void *)a2 + 1);
          if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)a2 + 2)) {
            goto LABEL_345;
          }
          *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v106);
          goto LABEL_347;
        case 0xEu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v107 = *((void *)a2 + 1);
            unint64_t v108 = *((void *)a2 + 2);
            while (v107 < v108 && !*((unsigned char *)a2 + 24))
            {
              char v110 = (char *)*((void *)this + 14);
              unint64_t v109 = *((void *)this + 15);
              if ((unint64_t)v110 >= v109)
              {
                unint64_t v112 = (char *)*((void *)this + 13);
                uint64_t v113 = (v110 - v112) >> 2;
                unint64_t v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 62) {
                  goto LABEL_358;
                }
                uint64_t v115 = v109 - (void)v112;
                if (v115 >> 1 > v114) {
                  unint64_t v114 = v115 >> 1;
                }
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v116 = v114;
                }
                if (v116)
                {
                  unint64_t v116 = (unint64_t)sub_2572C76F0(v116);
                  unint64_t v112 = (char *)*((void *)this + 13);
                  char v110 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v117 = 0;
                }
                char v118 = (_DWORD *)(v116 + 4 * v113);
                _DWORD *v118 = 0;
                unsigned int v111 = v118 + 1;
                while (v110 != v112)
                {
                  int v119 = *((_DWORD *)v110 - 1);
                  v110 -= 4;
                  *--char v118 = v119;
                }
                *((void *)this + 13) = v118;
                *((void *)this + 14) = v111;
                *((void *)this + 15) = v116 + 4 * v117;
                if (v112) {
                  operator delete(v112);
                }
              }
              else
              {
                *(_DWORD *)char v110 = 0;
                unsigned int v111 = v110 + 4;
              }
              *((void *)this + 14) = v111;
              unint64_t v120 = *((void *)a2 + 1);
              if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
                goto LABEL_206;
              }
              *(v111 - 1) = *(_DWORD *)(*(void *)a2 + v120);
              unint64_t v108 = *((void *)a2 + 2);
              unint64_t v107 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v107;
            }
            goto LABEL_207;
          }
          uint64_t v157 = (char *)*((void *)this + 14);
          unint64_t v156 = *((void *)this + 15);
          if ((unint64_t)v157 >= v156)
          {
            char v184 = (char *)*((void *)this + 13);
            uint64_t v185 = (v157 - v184) >> 2;
            unint64_t v186 = v185 + 1;
            if ((unint64_t)(v185 + 1) >> 62) {
              goto LABEL_358;
            }
            uint64_t v187 = v156 - (void)v184;
            if (v187 >> 1 > v186) {
              unint64_t v186 = v187 >> 1;
            }
            if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v188 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v188 = v186;
            }
            if (v188)
            {
              unint64_t v188 = (unint64_t)sub_2572C76F0(v188);
              char v184 = (char *)*((void *)this + 13);
              uint64_t v157 = (char *)*((void *)this + 14);
            }
            else
            {
              uint64_t v189 = 0;
            }
            unsigned int v204 = (_DWORD *)(v188 + 4 * v185);
            *unsigned int v204 = 0;
            uint64_t v137 = v204 + 1;
            while (v157 != v184)
            {
              int v205 = *((_DWORD *)v157 - 1);
              v157 -= 4;
              *--unsigned int v204 = v205;
            }
            *((void *)this + 13) = v204;
            *((void *)this + 14) = v137;
            *((void *)this + 15) = v188 + 4 * v189;
            if (v184) {
              operator delete(v184);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v157 = 0;
            uint64_t v137 = v157 + 4;
          }
          *((void *)this + 14) = v137;
          goto LABEL_343;
        case 0xFu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v121 = *((void *)a2 + 1);
            unint64_t v122 = *((void *)a2 + 2);
            while (v121 < v122 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v124 = (char *)*((void *)this + 17);
              unint64_t v123 = *((void *)this + 18);
              if ((unint64_t)v124 >= v123)
              {
                int v126 = (char *)*((void *)this + 16);
                uint64_t v127 = (v124 - v126) >> 2;
                unint64_t v128 = v127 + 1;
                if ((unint64_t)(v127 + 1) >> 62) {
                  goto LABEL_358;
                }
                uint64_t v129 = v123 - (void)v126;
                if (v129 >> 1 > v128) {
                  unint64_t v128 = v129 >> 1;
                }
                if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v130 = v128;
                }
                if (v130)
                {
                  unint64_t v130 = (unint64_t)sub_2572C76F0(v130);
                  int v126 = (char *)*((void *)this + 16);
                  unint64_t v124 = (char *)*((void *)this + 17);
                }
                else
                {
                  uint64_t v131 = 0;
                }
                unsigned int v132 = (_DWORD *)(v130 + 4 * v127);
                *unsigned int v132 = 0;
                char v125 = v132 + 1;
                while (v124 != v126)
                {
                  int v133 = *((_DWORD *)v124 - 1);
                  v124 -= 4;
                  *--unsigned int v132 = v133;
                }
                *((void *)this + 16) = v132;
                *((void *)this + 17) = v125;
                *((void *)this + 18) = v130 + 4 * v131;
                if (v126) {
                  operator delete(v126);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v124 = 0;
                char v125 = v124 + 4;
              }
              *((void *)this + 17) = v125;
              unint64_t v134 = *((void *)a2 + 1);
              if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)a2 + 2))
              {
LABEL_206:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v125 - 1) = *(_DWORD *)(*(void *)a2 + v134);
              unint64_t v122 = *((void *)a2 + 2);
              unint64_t v121 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v121;
            }
LABEL_207:
            PB::Reader::recallMark();
          }
          else
          {
            char v159 = (char *)*((void *)this + 17);
            unint64_t v158 = *((void *)this + 18);
            if ((unint64_t)v159 >= v158)
            {
              v190 = (char *)*((void *)this + 16);
              uint64_t v191 = (v159 - v190) >> 2;
              unint64_t v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62) {
LABEL_358:
              }
                sub_2570AFD0C();
              uint64_t v193 = v158 - (void)v190;
              if (v193 >> 1 > v192) {
                unint64_t v192 = v193 >> 1;
              }
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v194 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v194 = v192;
              }
              if (v194)
              {
                unint64_t v194 = (unint64_t)sub_2572C76F0(v194);
                v190 = (char *)*((void *)this + 16);
                char v159 = (char *)*((void *)this + 17);
              }
              else
              {
                uint64_t v195 = 0;
              }
              unint64_t v206 = (_DWORD *)(v194 + 4 * v191);
              *unint64_t v206 = 0;
              uint64_t v137 = v206 + 1;
              while (v159 != v190)
              {
                int v207 = *((_DWORD *)v159 - 1);
                v159 -= 4;
                *--unint64_t v206 = v207;
              }
              *((void *)this + 16) = v206;
              *((void *)this + 17) = v137;
              *((void *)this + 18) = v194 + 4 * v195;
              if (v190) {
                operator delete(v190);
              }
            }
            else
            {
              *(_DWORD *)char v159 = 0;
              uint64_t v137 = v159 + 4;
            }
            *((void *)this + 17) = v137;
LABEL_343:
            unint64_t v208 = *((void *)a2 + 1);
            if (v208 <= 0xFFFFFFFFFFFFFFFBLL && v208 + 4 <= *((void *)a2 + 2))
            {
              *(v137 - 1) = *(_DWORD *)(*(void *)a2 + v208);
LABEL_347:
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_348:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_345:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_349;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_349:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::AccessoryWakeDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(_WORD *)(this + 192)) {
    this = PB::Writer::write(a2, *(double *)(this + 152));
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(float **)(v3 + 80);
  unint64_t v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(float **)(v3 + 56);
  BOOL v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 184));
    __int16 v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
  }
  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_37:
    this = PB::Writer::write(a2, *(float *)(v3 + 172));
    if ((*(_WORD *)(v3 + 192) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0) {
    goto LABEL_37;
  }
LABEL_22:
  if ((v16 & 2) != 0) {
LABEL_23:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 160));
LABEL_24:
  unint64_t v17 = *(float **)(v3 + 104);
  char v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  uint64_t v21 = *(float **)(v3 + 128);
  unint64_t v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    float v22 = *v21++;
    this = PB::Writer::write(a2, v22);
  }
  return this;
}

BOOL CMMsl::AccessoryWakeDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 192);
  __int16 v3 = *(_WORD *)(a2 + 192);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 8);
  int v4 = *(float **)(a1 + 16);
  float v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 32);
  float v7 = *(float **)(a1 + 40);
  float v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 40) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  unint64_t v11 = *(float **)(a1 + 80);
  unsigned int v10 = *(float **)(a1 + 88);
  float v12 = *(float **)(a2 + 80);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 88) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  BOOL v14 = *(float **)(a1 + 56);
  char v13 = *(float **)(a1 + 64);
  float v15 = *(float **)(a2 + 56);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 64) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    if (*v14 != *v15) {
      return 0;
    }
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  unint64_t v17 = *(float **)(a1 + 104);
  __int16 v16 = *(float **)(a1 + 112);
  char v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(void *)(a2 + 112) - (void)v18) {
    return 0;
  }
  while (v17 != v16)
  {
    if (*v17 != *v18) {
      return 0;
    }
    ++v17;
    ++v18;
  }
  uint64_t v20 = *(void *)(a1 + 128);
  uint64_t v19 = *(void *)(a1 + 136);
  uint64_t v21 = *(float **)(a2 + 128);
  if (v19 - v20 != *(void *)(a2 + 136) - (void)v21) {
    return 0;
  }
  if (v20 == v19) {
    return 1;
  }
  uint64_t v22 = v20 + 4;
  do
  {
    float v23 = *v21++;
    BOOL result = *(float *)(v22 - 4) == v23;
    BOOL v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::hash_value(CMMsl::AccessoryWakeDebug *this)
{
  if (*((_WORD *)this + 96))
  {
    if (*((double *)this + 19) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 19);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  __int16 v7 = *((_WORD *)this + 96);
  if ((v7 & 0x80) != 0)
  {
    float v20 = *((float *)this + 46);
    uint64_t v8 = LODWORD(v20);
    if (v20 == 0.0) {
      uint64_t v8 = 0;
    }
    if ((v7 & 0x40) != 0)
    {
LABEL_8:
      uint64_t v9 = *((int *)this + 45);
      if ((*((_WORD *)this + 96) & 0x100) != 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if ((v7 & 0x40) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 96) & 0x100) != 0)
  {
LABEL_9:
    uint64_t v10 = *((int *)this + 47);
    if ((v7 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_28:
    uint64_t v12 = 0;
    if ((v7 & 8) != 0) {
      goto LABEL_13;
    }
LABEL_29:
    uint64_t v14 = 0;
    if ((v7 & 0x20) != 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v7 & 4) == 0) {
    goto LABEL_28;
  }
LABEL_10:
  float v11 = *((float *)this + 41);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v7 & 8) == 0) {
    goto LABEL_29;
  }
LABEL_13:
  float v13 = *((float *)this + 42);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v7 & 0x20) != 0)
  {
LABEL_16:
    uint64_t v15 = *((int *)this + 44);
    if ((v7 & 0x10) != 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v15 = 0;
  if ((v7 & 0x10) != 0)
  {
LABEL_17:
    float v16 = *((float *)this + 43);
    uint64_t v17 = LODWORD(v16);
    if (v16 == 0.0) {
      uint64_t v17 = 0;
    }
    if ((v7 & 2) != 0) {
      goto LABEL_20;
    }
LABEL_32:
    uint64_t v19 = 0;
    goto LABEL_33;
  }
LABEL_31:
  uint64_t v17 = 0;
  if ((v7 & 2) == 0) {
    goto LABEL_32;
  }
LABEL_20:
  float v18 = *((float *)this + 40);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
LABEL_33:
  uint64_t v21 = v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v9;
  uint64_t v22 = v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ PBHashBytes();
  return v21 ^ v22 ^ PBHashBytes();
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this)
{
  *(void *)this = &unk_270640450;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270640450;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AirpodEvent::~AirpodEvent(CMMsl::AirpodEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this, const CMMsl::AirpodEvent *a2)
{
  *(void *)this = &unk_270640450;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, const CMMsl::AirpodEvent *a2)
{
  if ((const CMMsl::AirpodEvent *)a1 != a2)
  {
    CMMsl::AirpodEvent::AirpodEvent((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AirpodEvent *a2, CMMsl::AirpodEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)a2 + 2);
  uint64_t v6 = *((void *)this + 2);
  *((double *)this + 2) = result;
  *((void *)a2 + 2) = v6;
  return result;
}

double CMMsl::AirpodEvent::AirpodEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640450;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640450;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = &unk_270640450;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::AirpodEvent::formatText(CMMsl::AirpodEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "eventTag");
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location");
  if (*((unsigned char *)this + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AirpodEvent::readFrom(CMMsl::AirpodEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v36 = v22++;
            char v37 = *(unsigned char *)(v23 + v36);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
LABEL_66:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v2 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v27 = *(unsigned char *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v22 = v2;
            BOOL v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v26;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_72;
            }
            unint64_t v40 = v28++;
            char v41 = *(unsigned char *)(v29 + v40);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
LABEL_71:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            unint64_t v2 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v33 = *(unsigned char *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v28 = v2;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 5) = v32;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_27;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AirpodEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::AirpodEvent::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::AirpodEvent::hash_value(CMMsl::AirpodEvent *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ *(void *)&v1 ^ v3;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3;
}

uint64_t CMMsl::Altimeter::Altimeter(uint64_t this)
{
  *(void *)this = &unk_270640488;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = &unk_270640488;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void CMMsl::Altimeter::~Altimeter(CMMsl::Altimeter *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::Altimeter::Altimeter(CMMsl::Altimeter *this, const CMMsl::Altimeter *a2)
{
  *(void *)this = &unk_270640488;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 40) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 2) = result;
  if (*((unsigned char *)a2 + 40)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, const CMMsl::Altimeter *a2)
{
  if ((const CMMsl::Altimeter *)a1 != a2)
  {
    CMMsl::Altimeter::Altimeter((CMMsl::Altimeter *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Altimeter *a2, CMMsl::Altimeter *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::Altimeter::Altimeter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640488;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640488;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270640488;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::Altimeter::formatText(CMMsl::Altimeter *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pressure", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Altimeter::readFrom(CMMsl::Altimeter *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Altimeter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::Altimeter::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 1) == 0;
  if (*(unsigned char *)(a1 + 40)) {
    return (*(unsigned char *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::Altimeter::hash_value(CMMsl::Altimeter *this)
{
  if ((*((unsigned char *)this + 40) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if (*((unsigned char *)this + 40)) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this)
{
  *(void *)this = &unk_2706404C0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = &unk_2706404C0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::AltimeterKF::~AltimeterKF(CMMsl::AltimeterKF *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this, const CMMsl::AltimeterKF *a2)
{
  *(void *)this = &unk_2706404C0;
  *(_DWORD *)(this + 64) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 8);
    __int16 v3 = 16;
    *(_WORD *)(this + 64) = 16;
    *(_DWORD *)(this + 32) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x400) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v5;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 28) = v6;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v8;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 16) = v9;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 8) = v10;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v12;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v13;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_26:
    char v15 = *((unsigned char *)a2 + 60);
    *(_WORD *)(this + 64) = v3 | 0x800;
    *(unsigned char *)(this + 60) = v15;
    return this;
  }
LABEL_25:
  int v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *a1, const CMMsl::AltimeterKF *a2)
{
  if (a1 != a2)
  {
    CMMsl::AltimeterKF::AltimeterKF((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AltimeterKF *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AltimeterKF *a2, CMMsl::AltimeterKF *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  int v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  int v13 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v13;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  LOBYTE(v10) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v10;
  return result;
}

float CMMsl::AltimeterKF::AltimeterKF(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706404C0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return result;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AltimeterKF::AltimeterKF((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AltimeterKF *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::AltimeterKF::formatText(CMMsl::AltimeterKF *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelBiasZ", *((float *)this + 6));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "compensate");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "height", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "inertialCompOffset", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inertialCompPressure", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "kfPressure", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rawPressure", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "rawPressureTemperature", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "rawPressureTimestamp");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timestamp");
  if ((*((_WORD *)this + 32) & 0x400) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 14));
LABEL_14:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AltimeterKF::readFrom(CMMsl::AltimeterKF *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_94;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 2u:
        *((_WORD *)this + 32) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 3u:
        *((_WORD *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 4u:
        *((_WORD *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 5u:
        *((_WORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 6u:
        *((_WORD *)this + 32) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v36 = v20++;
            char v37 = *(unsigned char *)(v21 + v36);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_87:
              unint64_t v2 = v36 + 1;
              goto LABEL_88;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_87;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_88;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_88:
        *((void *)this + 2) = v24;
        break;
      case 7u:
        *((_WORD *)this + 32) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_93;
            }
            unint64_t v40 = v26++;
            char v41 = *(unsigned char *)(v27 + v40);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
LABEL_92:
              unint64_t v2 = v40 + 1;
              goto LABEL_93;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v30 = 0;
          }
          goto LABEL_92;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_93;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        uint64_t v30 = 0;
LABEL_93:
        *((void *)this + 1) = v30;
        break;
      case 8u:
        *((_WORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 9u:
        *((_WORD *)this + 32) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 0xAu:
        *((_WORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_83:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 32) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 60) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AltimeterKF::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 32));
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 36));
    if ((*(_WORD *)(v3 + 64) & 0x800) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_25:
  return PB::Writer::write(a2);
}

BOOL CMMsl::AltimeterKF::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0) {
    return (*(_WORD *)(a2 + 64) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  }
  return v4;
}

uint64_t CMMsl::AltimeterKF::hash_value(CMMsl::AltimeterKF *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    uint64_t v4 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    uint64_t v6 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    uint64_t v8 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    uint64_t v10 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  float v22 = *((float *)this + 8);
  uint64_t v2 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x400) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  float v3 = *((float *)this + 14);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  float v5 = *((float *)this + 7);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  float v9 = *((float *)this + 11);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 2) != 0)
  {
LABEL_15:
    uint64_t v11 = *((void *)this + 2);
    if (v1) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v11 = 0;
  if (v1)
  {
LABEL_16:
    uint64_t v12 = *((void *)this + 1);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_17;
    }
LABEL_39:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_20;
    }
LABEL_40:
    uint64_t v16 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_23;
    }
LABEL_41:
    uint64_t v18 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_39;
  }
LABEL_17:
  float v13 = *((float *)this + 12);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_40;
  }
LABEL_20:
  float v15 = *((float *)this + 13);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_23:
  float v17 = *((float *)this + 10);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_26:
    float v19 = *((float *)this + 9);
    uint64_t v20 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v20 = 0;
    }
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v21 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
  }
LABEL_42:
  uint64_t v20 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  uint64_t v21 = *((unsigned __int8 *)this + 60);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this)
{
  *(void *)this = &unk_2706404F8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_2706404F8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AnchorCorrection::~AnchorCorrection(CMMsl::AnchorCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706404F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AnchorCorrection::~AnchorCorrection(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this, const CMMsl::AnchorCorrection *a2)
{
  *(void *)this = &unk_2706404F8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, const CMMsl::AnchorCorrection *a2)
{
  if ((const CMMsl::AnchorCorrection *)a1 != a2)
  {
    CMMsl::AnchorCorrection::AnchorCorrection((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AnchorCorrection::~AnchorCorrection((CMMsl::AnchorCorrection *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorCorrection *a2, CMMsl::AnchorCorrection *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706404F8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::AnchorCorrection::AnchorCorrection((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::AnchorCorrection::~AnchorCorrection((CMMsl::AnchorCorrection *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AnchorCorrection::formatText(CMMsl::AnchorCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "lastConvergenceTimestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AnchorCorrection::readFrom(CMMsl::AnchorCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  *(void *)this = &unk_270641138;
  *((_DWORD *)this + 40) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641138;
  *((_DWORD *)this + 40) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

uint64_t CMMsl::AnchorCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::AnchorCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::DeviceMotionCorrection::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if ((*(unsigned char *)(a2 + 160) & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 160))
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  uint64_t v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 56);
  uint64_t v5 = *(float **)(a1 + 64);
  uint64_t v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 64) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  char v9 = *(float **)(a1 + 104);
  uint64_t v8 = *(float **)(a1 + 112);
  unsigned int v10 = *(float **)(a2 + 104);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 112) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  unint64_t v12 = *(float **)(a1 + 8);
  unint64_t v11 = *(float **)(a1 + 16);
  char v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  char v15 = *(float **)(a1 + 80);
  BOOL v14 = *(float **)(a1 + 88);
  unsigned int v16 = *(float **)(a2 + 80);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 88) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  uint64_t v18 = *(void *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 136);
  float v19 = *(float **)(a2 + 128);
  if (v17 - v18 != *(void *)(a2 + 136) - (void)v19) {
    return 0;
  }
  if (v18 == v17) {
    return 1;
  }
  uint64_t v20 = v18 + 4;
  do
  {
    float v21 = *v19++;
    BOOL result = *(float *)(v20 - 4) == v21;
    BOOL v23 = *(float *)(v20 - 4) != v21 || v20 == v17;
    v20 += 4;
  }
  while (!v23);
  return result;
}

unint64_t CMMsl::AnchorCorrection::hash_value(CMMsl::AnchorCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 24))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
  }
  return *(void *)&v3 ^ v2;
}

uint64_t CMMsl::AnchorCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t this)
{
  *(void *)this = &unk_270640530;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_270640530;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AnchorMotionCorrespondence::~AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this, const CMMsl::AnchorMotionCorrespondence *a2)
{
  *(void *)this = &unk_270640530;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 44) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 44) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 44) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 1);
      *((unsigned char *)this + 44) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  char v5 = *((unsigned char *)a2 + 40);
  v3 |= 0x10u;
  *((unsigned char *)this + 44) = v3;
  *((unsigned char *)this + 40) = v5;
  if (*((unsigned char *)a2 + 44)) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, const CMMsl::AnchorMotionCorrespondence *a2)
{
  if ((const CMMsl::AnchorMotionCorrespondence *)a1 != a2)
  {
    CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence((CMMsl::AnchorMotionCorrespondence *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorMotionCorrespondence *a2, CMMsl::AnchorMotionCorrespondence *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640530;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640530;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v10 = &unk_270640530;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    char v4 = *(unsigned char *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 44);
    long long v12 = *(_OWORD *)(a1 + 24);
    char v5 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v4;
    char v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AnchorMotionCorrespondence::formatText(CMMsl::AnchorMotionCorrespondence *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "dThetaNorm", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastCorrespondenceTimestamp", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "state");
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AnchorMotionCorrespondence::readFrom(CMMsl::AnchorMotionCorrespondence *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_41;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_40;
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_40;
      case 3u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_40;
      case 4u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 40) = v21;
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_40:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_36:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_41:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::AnchorMotionCorrespondence::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 44) & 1) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::AnchorMotionCorrespondence::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 1) == 0;
  if (*(unsigned char *)(a1 + 44)) {
    return (*(unsigned char *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::AnchorMotionCorrespondence::hash_value(CMMsl::AnchorMotionCorrespondence *this)
{
  if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned __int8 *)this + 40);
    if (*((unsigned char *)this + 44)) {
      goto LABEL_10;
    }
LABEL_19:
    double v5 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
  }
LABEL_18:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ *(void *)&v5;
}

void *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(void *this)
{
  *this = &unk_270640568;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640568;
  this[1] = 0;
  return this;
}

void CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState(CMMsl::AppleCV3DSLAMState *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640568;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(void *this, const CMMsl::AppleCV3DSLAMState *a2)
{
  *this = &unk_270640568;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::AppleCV3DSLAMState *CMMsl::AppleCV3DSLAMState::operator=(const CMMsl::AppleCV3DSLAMState *a1, const CMMsl::AppleCV3DSLAMState *a2)
{
  if (a1 != a2)
  {
    CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState((CMMsl::AppleCV3DSLAMState *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AppleCV3DSLAMState *a2, CMMsl::AppleCV3DSLAMState *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(void *a1, uint64_t a2)
{
  *a1 = &unk_270640568;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640568;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640568;
    v6[1] = v4;
    CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState((CMMsl::AppleCV3DSLAMState *)v6);
  }
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::formatText(CMMsl::AppleCV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AppleCV3DSLAMState::readFrom(CMMsl::AppleCV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  *(void *)this = &unk_270640BF8;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640BF8;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::AppleCV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::CV3DSLAMState::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::CV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if ((*(unsigned char *)(a2 + 88) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 88))
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  uint64_t v2 = *(double **)(a1 + 16);
  int v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(double **)(a1 + 32);
  uint64_t v5 = *(double **)(a1 + 40);
  uint64_t v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v10 = *(double **)(a2 + 56);
  if (v8 - v9 != *(void *)(a2 + 64) - (void)v10) {
    return 0;
  }
  if (v9 == v8) {
    return 1;
  }
  uint64_t v11 = v9 + 8;
  do
  {
    double v12 = *v10++;
    BOOL result = *(double *)(v11 - 8) == v12;
    BOOL v14 = *(double *)(v11 - 8) != v12 || v11 == v8;
    v11 += 8;
  }
  while (!v14);
  return result;
}

CMMsl::CV3DSLAMState *CMMsl::AppleCV3DSLAMState::hash_value(CMMsl::AppleCV3DSLAMState *this)
{
  BOOL result = (CMMsl::CV3DSLAMState *)*((void *)this + 1);
  if (result) {
    return (CMMsl::CV3DSLAMState *)CMMsl::CV3DSLAMState::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  *(void *)this = &unk_2706405A0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706405A0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  *(void *)this = &unk_2706405A0;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AudioAccessoryDeviceMotion *CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  *(void *)this = &unk_2706405A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C75B4((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x40) != 0)
  {
    int v10 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 58) |= 0x40u;
    *((_DWORD *)this + 24) = v10;
    __int16 v4 = *((_WORD *)a2 + 58);
    if ((v4 & 0x20) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_7;
  }
  int v11 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 58) |= 0x20u;
  *((_DWORD *)this + 23) = v11;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 58) |= 0x10u;
  *((_DWORD *)this + 22) = v12;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 26);
  *((_WORD *)this + 58) |= 0x100u;
  *((_DWORD *)this + 26) = v13;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 8);
  *((_WORD *)this + 58) |= 2u;
  *((void *)this + 8) = v14;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v15 = *((_DWORD *)a2 + 27);
  *((_WORD *)this + 58) |= 0x200u;
  *((_DWORD *)this + 27) = v15;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v16 = *((void *)a2 + 7);
  *((_WORD *)this + 58) |= 1u;
  *((void *)this + 7) = v16;
  __int16 v4 = *((_WORD *)a2 + 58);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  int v17 = *((_DWORD *)a2 + 21);
  *((_WORD *)this + 58) |= 8u;
  *((_DWORD *)this + 21) = v17;
  if ((*((_WORD *)a2 + 58) & 0x80) != 0)
  {
LABEL_14:
    int v5 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 58) |= 0x80u;
    *((_DWORD *)this + 25) = v5;
  }
LABEL_15:
  if (this != a2) {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 58);
  if ((v6 & 4) != 0)
  {
    int v7 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 58) |= 4u;
    *((_DWORD *)this + 20) = v7;
    __int16 v6 = *((_WORD *)a2 + 58);
  }
  if ((v6 & 0x400) != 0)
  {
    char v8 = *((unsigned char *)a2 + 112);
    *((_WORD *)this + 58) |= 0x400u;
    *((unsigned char *)this + 112) = v8;
  }
  return this;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AudioAccessoryDeviceMotion *a2, CMMsl::AudioAccessoryDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v7) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v7;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v14 = *((void *)this + 6);
  uint64_t v13 = *((void *)this + 7);
  uint64_t v15 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v15;
  LODWORD(v9) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v9;
  float result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  *((void *)a2 + 6) = v14;
  *((void *)a2 + 7) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v13;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_2706405A0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::formatText(CMMsl::AudioAccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    __int16 v5 = *((_WORD *)this + 58);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arrivalTimestamp", *((float *)this + 21));
  if (*((_WORD *)this + 58)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "btcTimestamp");
LABEL_5:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v8);
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "gyroBias", v11);
  }
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isInEar");
    __int16 v12 = *((_WORD *)this + 58);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
  }
  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "location");
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quiescentMode");
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 24));
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "sampleLatency", *((float *)this + 25));
  __int16 v12 = *((_WORD *)this + 58);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "sensorTimeUponReceival", *((double *)this + 8));
  if ((*((_WORD *)this + 58) & 0x100) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "sequenceNumber");
LABEL_17:
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "super");
  }
  if ((*((_WORD *)this + 58) & 0x200) != 0) {
    PB::TextFormatter::format(a2, "timeSyncStatus");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AudioAccessoryDeviceMotion::readFrom(CMMsl::AudioAccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      int v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            operator new();
          case 2u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v22 = *((void *)a2 + 2);
              while (v21 < v22 && !*((unsigned char *)a2 + 24))
              {
                uint64_t v24 = (char *)*((void *)this + 2);
                unint64_t v23 = *((void *)this + 3);
                if ((unint64_t)v24 >= v23)
                {
                  unint64_t v26 = (char *)*((void *)this + 1);
                  uint64_t v27 = (v24 - v26) >> 2;
                  unint64_t v28 = v27 + 1;
                  if ((unint64_t)(v27 + 1) >> 62) {
                    goto LABEL_246;
                  }
                  uint64_t v29 = v23 - (void)v26;
                  if (v29 >> 1 > v28) {
                    unint64_t v28 = v29 >> 1;
                  }
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v28;
                  }
                  if (v30)
                  {
                    unint64_t v30 = (unint64_t)sub_2572C76F0(v30);
                    unint64_t v26 = (char *)*((void *)this + 1);
                    uint64_t v24 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v31 = 0;
                  }
                  int v32 = (_DWORD *)(v30 + 4 * v27);
                  *int v32 = 0;
                  char v25 = v32 + 1;
                  while (v24 != v26)
                  {
                    int v33 = *((_DWORD *)v24 - 1);
                    v24 -= 4;
                    *--int v32 = v33;
                  }
                  *((void *)this + 1) = v32;
                  *((void *)this + 2) = v25;
                  *((void *)this + 3) = v30 + 4 * v31;
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v24 = 0;
                  char v25 = v24 + 4;
                }
                *((void *)this + 2) = v25;
                unint64_t v34 = *((void *)a2 + 1);
                if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_180;
                }
                *(v25 - 1) = *(_DWORD *)(*(void *)a2 + v34);
                unint64_t v22 = *((void *)a2 + 2);
                unint64_t v21 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v21;
              }
              goto LABEL_181;
            }
            unint64_t v107 = (char *)*((void *)this + 2);
            unint64_t v106 = *((void *)this + 3);
            if ((unint64_t)v107 >= v106)
            {
              unint64_t v135 = (char *)*((void *)this + 1);
              uint64_t v136 = (v107 - v135) >> 2;
              unint64_t v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62) {
                goto LABEL_246;
              }
              uint64_t v138 = v106 - (void)v135;
              if (v138 >> 1 > v137) {
                unint64_t v137 = v138 >> 1;
              }
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v139 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v137;
              }
              if (v139)
              {
                unint64_t v139 = (unint64_t)sub_2572C76F0(v139);
                unint64_t v135 = (char *)*((void *)this + 1);
                unint64_t v107 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v140 = 0;
              }
              char v147 = (_DWORD *)(v139 + 4 * v136);
              *char v147 = 0;
              unint64_t v108 = v147 + 1;
              while (v107 != v135)
              {
                int v148 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *--char v147 = v148;
              }
              *((void *)this + 1) = v147;
              *((void *)this + 2) = v108;
              *((void *)this + 3) = v139 + 4 * v140;
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v107 = 0;
              unint64_t v108 = v107 + 4;
            }
            *((void *)this + 2) = v108;
            goto LABEL_236;
          case 3u:
            *((_WORD *)this + 58) |= 0x40u;
            unint64_t v35 = *((void *)a2 + 1);
            if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
              goto LABEL_238;
            }
            *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v35);
            goto LABEL_240;
          case 4u:
            *((_WORD *)this + 58) |= 0x20u;
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            uint64_t v38 = *(void *)a2;
            if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
            {
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v42 = v36 + 1;
                *((void *)a2 + 1) = v36 + 1;
                char v43 = *(unsigned char *)(v38 + v36);
                v41 |= (unint64_t)(v43 & 0x7F) << v39;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v39 += 7;
                unint64_t v36 = v42;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
LABEL_140:
              LODWORD(v41) = 0;
              goto LABEL_206;
            }
            char v109 = 0;
            unsigned int v110 = 0;
            uint64_t v41 = 0;
            if (v37 <= v36) {
              unint64_t v37 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v37 == v36)
              {
                LODWORD(v41) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v111 = v36 + 1;
                char v112 = *(unsigned char *)(v38 + v36);
                *((void *)a2 + 1) = v111;
                v41 |= (unint64_t)(v112 & 0x7F) << v109;
                if (v112 < 0)
                {
                  v109 += 7;
                  unint64_t v36 = v111;
                  BOOL v14 = v110++ > 8;
                  if (v14) {
                    goto LABEL_140;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
              }
              break;
            }
LABEL_206:
            *((_DWORD *)this + 23) = v41;
            goto LABEL_20;
          case 5u:
            *((_WORD *)this + 58) |= 0x10u;
            unint64_t v44 = *((void *)a2 + 1);
            unint64_t v45 = *((void *)a2 + 2);
            uint64_t v46 = *(void *)a2;
            if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
            {
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v50 = v44 + 1;
                *((void *)a2 + 1) = v44 + 1;
                char v51 = *(unsigned char *)(v46 + v44);
                v49 |= (unint64_t)(v51 & 0x7F) << v47;
                if ((v51 & 0x80) == 0) {
                  goto LABEL_209;
                }
                v47 += 7;
                unint64_t v44 = v50;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
LABEL_147:
              LODWORD(v49) = 0;
              goto LABEL_209;
            }
            char v113 = 0;
            unsigned int v114 = 0;
            uint64_t v49 = 0;
            if (v45 <= v44) {
              unint64_t v45 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v45 == v44)
              {
                LODWORD(v49) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v115 = v44 + 1;
                char v116 = *(unsigned char *)(v46 + v44);
                *((void *)a2 + 1) = v115;
                v49 |= (unint64_t)(v116 & 0x7F) << v113;
                if (v116 < 0)
                {
                  v113 += 7;
                  unint64_t v44 = v115;
                  BOOL v14 = v114++ > 8;
                  if (v14) {
                    goto LABEL_147;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
              }
              break;
            }
LABEL_209:
            *((_DWORD *)this + 22) = v49;
            goto LABEL_20;
          case 6u:
            *((_WORD *)this + 58) |= 0x100u;
            unint64_t v52 = *((void *)a2 + 1);
            unint64_t v53 = *((void *)a2 + 2);
            uint64_t v54 = *(void *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v58 = v52 + 1;
                *((void *)a2 + 1) = v52 + 1;
                char v59 = *(unsigned char *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_212;
                }
                v55 += 7;
                unint64_t v52 = v58;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
LABEL_154:
              LODWORD(v57) = 0;
              goto LABEL_212;
            }
            char v117 = 0;
            unsigned int v118 = 0;
            uint64_t v57 = 0;
            if (v53 <= v52) {
              unint64_t v53 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v119 = v52 + 1;
                char v120 = *(unsigned char *)(v54 + v52);
                *((void *)a2 + 1) = v119;
                v57 |= (unint64_t)(v120 & 0x7F) << v117;
                if (v120 < 0)
                {
                  v117 += 7;
                  unint64_t v52 = v119;
                  BOOL v14 = v118++ > 8;
                  if (v14) {
                    goto LABEL_154;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v57) = 0;
                }
              }
              break;
            }
LABEL_212:
            *((_DWORD *)this + 26) = v57;
            goto LABEL_20;
          case 7u:
            *((_WORD *)this + 58) |= 2u;
            unint64_t v60 = *((void *)a2 + 1);
            if (v60 > 0xFFFFFFFFFFFFFFF7 || v60 + 8 > *((void *)a2 + 2)) {
              goto LABEL_238;
            }
            *((void *)this + 8) = *(void *)(*(void *)a2 + v60);
            uint64_t v61 = *((void *)a2 + 1) + 8;
            goto LABEL_241;
          case 8u:
            *((_WORD *)this + 58) |= 0x200u;
            unint64_t v62 = *((void *)a2 + 1);
            unint64_t v63 = *((void *)a2 + 2);
            uint64_t v64 = *(void *)a2;
            if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
            {
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v68 = v62 + 1;
                *((void *)a2 + 1) = v62 + 1;
                char v69 = *(unsigned char *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0) {
                  goto LABEL_215;
                }
                v65 += 7;
                unint64_t v62 = v68;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
LABEL_161:
              LODWORD(v67) = 0;
              goto LABEL_215;
            }
            char v121 = 0;
            unsigned int v122 = 0;
            uint64_t v67 = 0;
            if (v63 <= v62) {
              unint64_t v63 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v63 == v62)
              {
                LODWORD(v67) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v123 = v62 + 1;
                char v124 = *(unsigned char *)(v64 + v62);
                *((void *)a2 + 1) = v123;
                v67 |= (unint64_t)(v124 & 0x7F) << v121;
                if (v124 < 0)
                {
                  v121 += 7;
                  unint64_t v62 = v123;
                  BOOL v14 = v122++ > 8;
                  if (v14) {
                    goto LABEL_161;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v67) = 0;
                }
              }
              break;
            }
LABEL_215:
            *((_DWORD *)this + 27) = v67;
            goto LABEL_20;
          case 9u:
            *((_WORD *)this + 58) |= 1u;
            unint64_t v70 = *((void *)a2 + 1);
            unint64_t v71 = *((void *)a2 + 2);
            uint64_t v72 = *(void *)a2;
            if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
            {
              char v73 = 0;
              unsigned int v74 = 0;
              uint64_t v75 = 0;
              do
              {
                unint64_t v76 = v70 + 1;
                *((void *)a2 + 1) = v70 + 1;
                char v77 = *(unsigned char *)(v72 + v70);
                v75 |= (unint64_t)(v77 & 0x7F) << v73;
                if ((v77 & 0x80) == 0) {
                  goto LABEL_218;
                }
                v73 += 7;
                unint64_t v70 = v76;
                BOOL v14 = v74++ > 8;
              }
              while (!v14);
LABEL_168:
              uint64_t v75 = 0;
              goto LABEL_218;
            }
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v75 = 0;
            if (v71 <= v70) {
              unint64_t v71 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v71 == v70)
              {
                uint64_t v75 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v127 = v70 + 1;
                char v128 = *(unsigned char *)(v72 + v70);
                *((void *)a2 + 1) = v127;
                v75 |= (unint64_t)(v128 & 0x7F) << v125;
                if (v128 < 0)
                {
                  v125 += 7;
                  unint64_t v70 = v127;
                  BOOL v14 = v126++ > 8;
                  if (v14) {
                    goto LABEL_168;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v75 = 0;
                }
              }
              break;
            }
LABEL_218:
            *((void *)this + 7) = v75;
            goto LABEL_20;
          case 0xAu:
            *((_WORD *)this + 58) |= 8u;
            unint64_t v78 = *((void *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
              goto LABEL_238;
            }
            *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v78);
            goto LABEL_240;
          case 0xBu:
            *((_WORD *)this + 58) |= 0x80u;
            unint64_t v79 = *((void *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)a2 + 2)) {
              goto LABEL_238;
            }
            *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v79);
            goto LABEL_240;
          case 0xCu:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v80 = *((void *)a2 + 1);
              unint64_t v81 = *((void *)a2 + 2);
              while (v80 < v81 && !*((unsigned char *)a2 + 24))
              {
                unsigned int v83 = (char *)*((void *)this + 5);
                unint64_t v82 = *((void *)this + 6);
                if ((unint64_t)v83 >= v82)
                {
                  unint64_t v85 = (char *)*((void *)this + 4);
                  uint64_t v86 = (v83 - v85) >> 2;
                  unint64_t v87 = v86 + 1;
                  if ((unint64_t)(v86 + 1) >> 62) {
                    goto LABEL_246;
                  }
                  uint64_t v88 = v82 - (void)v85;
                  if (v88 >> 1 > v87) {
                    unint64_t v87 = v88 >> 1;
                  }
                  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v89 = v87;
                  }
                  if (v89)
                  {
                    unint64_t v89 = (unint64_t)sub_2572C76F0(v89);
                    unint64_t v85 = (char *)*((void *)this + 4);
                    unsigned int v83 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v90 = 0;
                  }
                  unsigned int v91 = (_DWORD *)(v89 + 4 * v86);
                  *unsigned int v91 = 0;
                  uint64_t v84 = v91 + 1;
                  while (v83 != v85)
                  {
                    int v92 = *((_DWORD *)v83 - 1);
                    v83 -= 4;
                    *--unsigned int v91 = v92;
                  }
                  *((void *)this + 4) = v91;
                  *((void *)this + 5) = v84;
                  *((void *)this + 6) = v89 + 4 * v90;
                  if (v85) {
                    operator delete(v85);
                  }
                }
                else
                {
                  *(_DWORD *)unsigned int v83 = 0;
                  uint64_t v84 = v83 + 4;
                }
                *((void *)this + 5) = v84;
                unint64_t v93 = *((void *)a2 + 1);
                if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)a2 + 2))
                {
LABEL_180:
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v84 - 1) = *(_DWORD *)(*(void *)a2 + v93);
                unint64_t v81 = *((void *)a2 + 2);
                unint64_t v80 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v80;
              }
LABEL_181:
              PB::Reader::recallMark();
            }
            else
            {
              unint64_t v130 = (char *)*((void *)this + 5);
              unint64_t v129 = *((void *)this + 6);
              if ((unint64_t)v130 >= v129)
              {
                int v141 = (char *)*((void *)this + 4);
                uint64_t v142 = (v130 - v141) >> 2;
                unint64_t v143 = v142 + 1;
                if ((unint64_t)(v142 + 1) >> 62) {
LABEL_246:
                }
                  sub_2570AFD0C();
                uint64_t v144 = v129 - (void)v141;
                if (v144 >> 1 > v143) {
                  unint64_t v143 = v144 >> 1;
                }
                if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v145 = v143;
                }
                if (v145)
                {
                  unint64_t v145 = (unint64_t)sub_2572C76F0(v145);
                  int v141 = (char *)*((void *)this + 4);
                  unint64_t v130 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v146 = 0;
                }
                unsigned int v149 = (_DWORD *)(v145 + 4 * v142);
                _DWORD *v149 = 0;
                unint64_t v108 = v149 + 1;
                while (v130 != v141)
                {
                  int v150 = *((_DWORD *)v130 - 1);
                  v130 -= 4;
                  *--unsigned int v149 = v150;
                }
                *((void *)this + 4) = v149;
                *((void *)this + 5) = v108;
                *((void *)this + 6) = v145 + 4 * v146;
                if (v141) {
                  operator delete(v141);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v130 = 0;
                unint64_t v108 = v130 + 4;
              }
              *((void *)this + 5) = v108;
LABEL_236:
              unint64_t v151 = *((void *)a2 + 1);
              if (v151 <= 0xFFFFFFFFFFFFFFFBLL && v151 + 4 <= *((void *)a2 + 2))
              {
                *(v108 - 1) = *(_DWORD *)(*(void *)a2 + v151);
LABEL_240:
                uint64_t v61 = *((void *)a2 + 1) + 4;
LABEL_241:
                *((void *)a2 + 1) = v61;
              }
              else
              {
LABEL_238:
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          case 0xDu:
            *((_WORD *)this + 58) |= 4u;
            unint64_t v94 = *((void *)a2 + 1);
            unint64_t v95 = *((void *)a2 + 2);
            uint64_t v96 = *(void *)a2;
            if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
            {
              char v97 = 0;
              unsigned int v98 = 0;
              uint64_t v99 = 0;
              do
              {
                unint64_t v100 = v94 + 1;
                *((void *)a2 + 1) = v94 + 1;
                char v101 = *(unsigned char *)(v96 + v94);
                v99 |= (unint64_t)(v101 & 0x7F) << v97;
                if ((v101 & 0x80) == 0) {
                  goto LABEL_221;
                }
                v97 += 7;
                unint64_t v94 = v100;
                BOOL v14 = v98++ > 8;
              }
              while (!v14);
LABEL_177:
              LODWORD(v99) = 0;
              goto LABEL_221;
            }
            char v131 = 0;
            unsigned int v132 = 0;
            uint64_t v99 = 0;
            if (v95 <= v94) {
              unint64_t v95 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v95 == v94)
              {
                LODWORD(v99) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v133 = v94 + 1;
                char v134 = *(unsigned char *)(v96 + v94);
                *((void *)a2 + 1) = v133;
                v99 |= (unint64_t)(v134 & 0x7F) << v131;
                if (v134 < 0)
                {
                  v131 += 7;
                  unint64_t v94 = v133;
                  BOOL v14 = v132++ > 8;
                  if (v14) {
                    goto LABEL_177;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v99) = 0;
                }
              }
              break;
            }
LABEL_221:
            *((_DWORD *)this + 20) = v99;
            goto LABEL_20;
          case 0xEu:
            *((_WORD *)this + 58) |= 0x400u;
            unint64_t v102 = *((void *)a2 + 1);
            if (v102 >= *((void *)a2 + 2))
            {
              BOOL v105 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v103 = v102 + 1;
              int v104 = *(unsigned __int8 *)(*(void *)a2 + v102);
              *((void *)a2 + 1) = v103;
              BOOL v105 = v104 != 0;
            }
            *((unsigned char *)this + 112) = v105;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

double CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  *(void *)this = &unk_2706405D8;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706405D8;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 72);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  __int16 v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 96));
    __int16 v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_14;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(float *)(v3 + 84));
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0) {
    goto LABEL_30;
  }
LABEL_14:
  if ((v8 & 0x80) != 0) {
LABEL_15:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 100));
LABEL_16:
  char v9 = *(float **)(v3 + 32);
  unsigned int v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    this = PB::Writer::write(a2, v11);
  }
  __int16 v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v12 = *(_WORD *)(v3 + 116);
  }
  if ((v12 & 0x400) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::AudioAccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  float v7 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  __int16 v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    __int16 v9 = *(_WORD *)(a1 + 116);
    __int16 v10 = *(_WORD *)(a2 + 116);
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
        return 0;
      }
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
        return 0;
      }
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
        return 0;
      }
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
        return 0;
      }
    }
    else if ((*(_WORD *)(a2 + 116) & 0x100) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
        return 0;
      }
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x200) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
        return 0;
      }
    }
    else if ((*(_WORD *)(a2 + 116) & 0x200) != 0)
    {
      return 0;
    }
    if (v9)
    {
      if ((v10 & 1) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
        return 0;
      }
    }
    else if (v10)
    {
      return 0;
    }
    if ((v9 & 8) != 0)
    {
      if ((v10 & 8) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
        return 0;
      }
    }
    else if ((v10 & 8) != 0)
    {
      return 0;
    }
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
        return 0;
      }
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    __int16 v12 = *(float **)(a1 + 32);
    float v11 = *(float **)(a1 + 40);
    char v13 = *(float **)(a2 + 32);
    if ((char *)v11 - (char *)v12 == *(void *)(a2 + 40) - (void)v13)
    {
      while (v12 != v11)
      {
        if (*v12 != *v13) {
          return 0;
        }
        ++v12;
        ++v13;
      }
      if ((v9 & 4) != 0)
      {
        if ((v10 & 4) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
          return 0;
        }
      }
      else if ((v10 & 4) != 0)
      {
        return 0;
      }
      BOOL result = (v10 & 0x400) == 0;
      if ((*(_WORD *)(a1 + 116) & 0x400) == 0) {
        return result;
      }
      if ((*(_WORD *)(a2 + 116) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112)) {
        return 1;
      }
    }
  }
  return 0;
}

BOOL CMMsl::AuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 152) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 152) & 2) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 152) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 56);
  unint64_t v2 = *(float **)(a1 + 64);
  uint64_t v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 64) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 80);
  uint64_t v5 = *(float **)(a1 + 88);
  float v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 88) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  __int16 v9 = *(float **)(a1 + 32);
  __int16 v8 = *(float **)(a1 + 40);
  __int16 v10 = *(float **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 40) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  __int16 v12 = *(float **)(a1 + 8);
  float v11 = *(float **)(a1 + 16);
  char v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  if ((*(unsigned char *)(a1 + 152) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 152) & 8) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 152) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    if ((*(unsigned char *)(a2 + 152) & 1) == 0 || *(void *)(a1 + 128) != *(void *)(a2 + 128)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 152))
  {
    return 0;
  }
  char v15 = *(float **)(a1 + 104);
  BOOL v14 = *(float **)(a1 + 112);
  unsigned int v16 = *(float **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 112) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  BOOL v17 = (*(unsigned char *)(a2 + 152) & 4) == 0;
  if ((*(unsigned char *)(a1 + 152) & 4) != 0) {
    return (*(unsigned char *)(a2 + 152) & 4) != 0 && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144);
  }
  return v17;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::hash_value(CMMsl::AudioAccessoryDeviceMotion *this)
{
  unint64_t v2 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 9);
  if (v2) {
    uint64_t v22 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v3 = PBHashBytes();
  __int16 v4 = *((_WORD *)this + 58);
  if ((v4 & 0x40) != 0)
  {
    float v13 = *((float *)this + 24);
    if (v13 == 0.0) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = LODWORD(v13);
    }
    if ((v4 & 0x20) != 0)
    {
LABEL_6:
      uint64_t v6 = *((unsigned int *)this + 23);
      if ((v4 & 0x10) != 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if ((v4 & 0x20) != 0) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 58) & 0x100) != 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 58) & 0x100) != 0)
  {
LABEL_8:
    uint64_t v21 = *((unsigned int *)this + 26);
    if ((v4 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_25:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 58) & 0x200) != 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v21 = 0;
  if ((v4 & 2) == 0) {
    goto LABEL_25;
  }
LABEL_9:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 8);
  }
  if ((*((_WORD *)this + 58) & 0x200) != 0)
  {
LABEL_13:
    uint64_t v9 = *((int *)this + 27);
    if (v4) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v9 = 0;
  if (v4)
  {
LABEL_14:
    uint64_t v10 = *((void *)this + 7);
    if ((v4 & 8) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v4 & 8) != 0)
  {
LABEL_15:
    float v11 = *((float *)this + 21);
    if (v11 == 0.0) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = LODWORD(v11);
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v12 = 0;
LABEL_29:
  uint64_t v14 = v3;
  if ((v4 & 0x80) != 0)
  {
    float v16 = *((float *)this + 25);
    if (v16 == 0.0) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = LODWORD(v16);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v17 = PBHashBytes();
  if ((*((_WORD *)this + 58) & 4) != 0) {
    uint64_t v18 = *((unsigned int *)this + 20);
  }
  else {
    uint64_t v18 = 0;
  }
  if ((*((_WORD *)this + 58) & 0x400) != 0) {
    uint64_t v19 = *((unsigned __int8 *)this + 112);
  }
  else {
    uint64_t v19 = 0;
  }
  return v14 ^ v22 ^ v5 ^ v6 ^ v7 ^ v21 ^ v8 ^ v9 ^ v10 ^ v12 ^ v15 ^ v17 ^ v18 ^ v19;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

void CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  *(void *)this = &unk_2706405D8;
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  __int16 v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::AuxiliaryDeviceMotion *CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  *(void *)this = &unk_2706405D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  __int16 v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (void *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  if ((*((unsigned char *)a2 + 152) & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 17);
    *((unsigned char *)this + 152) = 2;
    *((void *)this + 17) = v6;
  }
  if (this != a2)
  {
    sub_2572C75B4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v7 = *((unsigned char *)a2 + 152);
  if ((v7 & 8) != 0)
  {
    int v8 = *((_DWORD *)a2 + 37);
    *((unsigned char *)this + 152) |= 8u;
    *((_DWORD *)this + 37) = v8;
    char v7 = *((unsigned char *)a2 + 152);
  }
  if (v7)
  {
    uint64_t v9 = *((void *)a2 + 16);
    *((unsigned char *)this + 152) |= 1u;
    *((void *)this + 16) = v9;
  }
  if (this != a2) {
    sub_2572C75B4((void *)this + 13, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  }
  if ((*((unsigned char *)a2 + 152) & 4) != 0)
  {
    int v10 = *((_DWORD *)a2 + 36);
    *((unsigned char *)this + 152) |= 4u;
    *((_DWORD *)this + 36) = v10;
  }
  return this;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AuxiliaryDeviceMotion *a2, CMMsl::AuxiliaryDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v14;
  uint64_t v15 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  uint64_t v16 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v16;
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v19 = *((void *)this + 15);
  uint64_t v18 = *((void *)this + 16);
  uint64_t v20 = *((void *)a2 + 16);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)this + 16) = v20;
  double result = *((double *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((double *)a2 + 17) = result;
  *((void *)a2 + 15) = v19;
  *((void *)a2 + 16) = v18;
  LODWORD(v18) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v18;
  return result;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706405D8;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = a1 + 104;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v7 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  sub_2572C7560(v5, (__n128 *)(a2 + 80));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v7, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  sub_2572C7560(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::formatText(CMMsl::AuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "biasCovariance", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "quaternion", v13);
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "rotationRate", v16);
  }
  char v17 = *((unsigned char *)this + 152);
  if (v17)
  {
    PB::TextFormatter::format(a2, "sensorTime");
    char v17 = *((unsigned char *)this + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 152) & 4) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "status");
  char v17 = *((unsigned char *)this + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "statusDeprecated");
  if ((*((unsigned char *)this + 152) & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
LABEL_14:
  uint64_t v18 = (float *)*((void *)this + 13);
  uint64_t v19 = (float *)*((void *)this + 14);
  while (v18 != v19)
  {
    float v20 = *v18++;
    PB::TextFormatter::format(a2, "userAcceleration", v20);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::AuxiliaryDeviceMotion::readFrom(CMMsl::AuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      int v20 = v11 & 7;
      if (v20 != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            *((unsigned char *)this + 152) |= 2u;
            unint64_t v21 = *((void *)a2 + 1);
            if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
              goto LABEL_293;
            }
            *((void *)this + 17) = *(void *)(*(void *)a2 + v21);
            uint64_t v22 = *((void *)a2 + 1) + 8;
            goto LABEL_295;
          case 2u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v24 = *((void *)a2 + 2);
              while (v23 < v24 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v26 = (char *)*((void *)this + 8);
                unint64_t v25 = *((void *)this + 9);
                if ((unint64_t)v26 >= v25)
                {
                  unint64_t v28 = (char *)*((void *)this + 7);
                  uint64_t v29 = (v26 - v28) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    goto LABEL_300;
                  }
                  uint64_t v31 = v25 - (void)v28;
                  if (v31 >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    unint64_t v32 = (unint64_t)sub_2572C76F0(v32);
                    unint64_t v28 = (char *)*((void *)this + 7);
                    unint64_t v26 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v33 = 0;
                  }
                  unint64_t v34 = (_DWORD *)(v32 + 4 * v29);
                  _DWORD *v34 = 0;
                  uint64_t v27 = v34 + 1;
                  while (v26 != v28)
                  {
                    int v35 = *((_DWORD *)v26 - 1);
                    v26 -= 4;
                    *--unint64_t v34 = v35;
                  }
                  *((void *)this + 7) = v34;
                  *((void *)this + 8) = v27;
                  *((void *)this + 9) = v32 + 4 * v33;
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v26 = 0;
                  uint64_t v27 = v26 + 4;
                }
                *((void *)this + 8) = v27;
                unint64_t v36 = *((void *)a2 + 1);
                if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_171;
                }
                *(v27 - 1) = *(_DWORD *)(*(void *)a2 + v36);
                unint64_t v24 = *((void *)a2 + 2);
                unint64_t v23 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v23;
              }
              goto LABEL_172;
            }
            unsigned int v118 = (char *)*((void *)this + 8);
            unint64_t v117 = *((void *)this + 9);
            if ((unint64_t)v118 >= v117)
            {
              uint64_t v140 = (char *)*((void *)this + 7);
              uint64_t v141 = (v118 - v140) >> 2;
              unint64_t v142 = v141 + 1;
              if ((unint64_t)(v141 + 1) >> 62) {
                goto LABEL_300;
              }
              uint64_t v143 = v117 - (void)v140;
              if (v143 >> 1 > v142) {
                unint64_t v142 = v143 >> 1;
              }
              if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v142;
              }
              if (v144)
              {
                unint64_t v144 = (unint64_t)sub_2572C76F0(v144);
                uint64_t v140 = (char *)*((void *)this + 7);
                unsigned int v118 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v145 = 0;
              }
              unint64_t v170 = (_DWORD *)(v144 + 4 * v141);
              *unint64_t v170 = 0;
              unint64_t v119 = v170 + 1;
              while (v118 != v140)
              {
                int v171 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *--unint64_t v170 = v171;
              }
              *((void *)this + 7) = v170;
              *((void *)this + 8) = v119;
              *((void *)this + 9) = v144 + 4 * v145;
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v118 = 0;
              unint64_t v119 = v118 + 4;
            }
            *((void *)this + 8) = v119;
            goto LABEL_291;
          case 3u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v38 = *((void *)a2 + 2);
              while (v37 < v38 && !*((unsigned char *)a2 + 24))
              {
                unsigned int v40 = (char *)*((void *)this + 11);
                unint64_t v39 = *((void *)this + 12);
                if ((unint64_t)v40 >= v39)
                {
                  unint64_t v42 = (char *)*((void *)this + 10);
                  uint64_t v43 = (v40 - v42) >> 2;
                  unint64_t v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 62) {
                    goto LABEL_300;
                  }
                  uint64_t v45 = v39 - (void)v42;
                  if (v45 >> 1 > v44) {
                    unint64_t v44 = v45 >> 1;
                  }
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v46 = v44;
                  }
                  if (v46)
                  {
                    unint64_t v46 = (unint64_t)sub_2572C76F0(v46);
                    unint64_t v42 = (char *)*((void *)this + 10);
                    unsigned int v40 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    uint64_t v47 = 0;
                  }
                  unsigned int v48 = (_DWORD *)(v46 + 4 * v43);
                  *unsigned int v48 = 0;
                  uint64_t v41 = v48 + 1;
                  while (v40 != v42)
                  {
                    int v49 = *((_DWORD *)v40 - 1);
                    v40 -= 4;
                    *--unsigned int v48 = v49;
                  }
                  *((void *)this + 10) = v48;
                  *((void *)this + 11) = v41;
                  *((void *)this + 12) = v46 + 4 * v47;
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(_DWORD *)unsigned int v40 = 0;
                  uint64_t v41 = v40 + 4;
                }
                *((void *)this + 11) = v41;
                unint64_t v50 = *((void *)a2 + 1);
                if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_171;
                }
                *(v41 - 1) = *(_DWORD *)(*(void *)a2 + v50);
                unint64_t v38 = *((void *)a2 + 2);
                unint64_t v37 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v37;
              }
              goto LABEL_172;
            }
            char v121 = (char *)*((void *)this + 11);
            unint64_t v120 = *((void *)this + 12);
            if ((unint64_t)v121 >= v120)
            {
              uint64_t v146 = (char *)*((void *)this + 10);
              uint64_t v147 = (v121 - v146) >> 2;
              unint64_t v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 62) {
                goto LABEL_300;
              }
              uint64_t v149 = v120 - (void)v146;
              if (v149 >> 1 > v148) {
                unint64_t v148 = v149 >> 1;
              }
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v150 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v148;
              }
              if (v150)
              {
                unint64_t v150 = (unint64_t)sub_2572C76F0(v150);
                uint64_t v146 = (char *)*((void *)this + 10);
                char v121 = (char *)*((void *)this + 11);
              }
              else
              {
                uint64_t v151 = 0;
              }
              v172 = (_DWORD *)(v150 + 4 * v147);
              _DWORD *v172 = 0;
              unint64_t v119 = v172 + 1;
              while (v121 != v146)
              {
                int v173 = *((_DWORD *)v121 - 1);
                v121 -= 4;
                *--v172 = v173;
              }
              *((void *)this + 10) = v172;
              *((void *)this + 11) = v119;
              *((void *)this + 12) = v150 + 4 * v151;
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *(_DWORD *)char v121 = 0;
              unint64_t v119 = v121 + 4;
            }
            *((void *)this + 11) = v119;
            goto LABEL_291;
          case 4u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v52 = *((void *)a2 + 2);
              while (v51 < v52 && !*((unsigned char *)a2 + 24))
              {
                uint64_t v54 = (char *)*((void *)this + 5);
                unint64_t v53 = *((void *)this + 6);
                if ((unint64_t)v54 >= v53)
                {
                  unsigned int v56 = (char *)*((void *)this + 4);
                  uint64_t v57 = (v54 - v56) >> 2;
                  unint64_t v58 = v57 + 1;
                  if ((unint64_t)(v57 + 1) >> 62) {
                    goto LABEL_300;
                  }
                  uint64_t v59 = v53 - (void)v56;
                  if (v59 >> 1 > v58) {
                    unint64_t v58 = v59 >> 1;
                  }
                  if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v60 = v58;
                  }
                  if (v60)
                  {
                    unint64_t v60 = (unint64_t)sub_2572C76F0(v60);
                    unsigned int v56 = (char *)*((void *)this + 4);
                    uint64_t v54 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v61 = 0;
                  }
                  unint64_t v62 = (_DWORD *)(v60 + 4 * v57);
                  _DWORD *v62 = 0;
                  char v55 = v62 + 1;
                  while (v54 != v56)
                  {
                    int v63 = *((_DWORD *)v54 - 1);
                    v54 -= 4;
                    *--unint64_t v62 = v63;
                  }
                  *((void *)this + 4) = v62;
                  *((void *)this + 5) = v55;
                  *((void *)this + 6) = v60 + 4 * v61;
                  if (v56) {
                    operator delete(v56);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v54 = 0;
                  char v55 = v54 + 4;
                }
                *((void *)this + 5) = v55;
                unint64_t v64 = *((void *)a2 + 1);
                if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_171;
                }
                *(v55 - 1) = *(_DWORD *)(*(void *)a2 + v64);
                unint64_t v52 = *((void *)a2 + 2);
                unint64_t v51 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v51;
              }
              goto LABEL_172;
            }
            unint64_t v123 = (char *)*((void *)this + 5);
            unint64_t v122 = *((void *)this + 6);
            if ((unint64_t)v123 >= v122)
            {
              char v152 = (char *)*((void *)this + 4);
              uint64_t v153 = (v123 - v152) >> 2;
              unint64_t v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62) {
                goto LABEL_300;
              }
              uint64_t v155 = v122 - (void)v152;
              if (v155 >> 1 > v154) {
                unint64_t v154 = v155 >> 1;
              }
              if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v156 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v154;
              }
              if (v156)
              {
                unint64_t v156 = (unint64_t)sub_2572C76F0(v156);
                char v152 = (char *)*((void *)this + 4);
                unint64_t v123 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v157 = 0;
              }
              unint64_t v174 = (_DWORD *)(v156 + 4 * v153);
              *unint64_t v174 = 0;
              unint64_t v119 = v174 + 1;
              while (v123 != v152)
              {
                int v175 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *--unint64_t v174 = v175;
              }
              *((void *)this + 4) = v174;
              *((void *)this + 5) = v119;
              *((void *)this + 6) = v156 + 4 * v157;
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v123 = 0;
              unint64_t v119 = v123 + 4;
            }
            *((void *)this + 5) = v119;
            goto LABEL_291;
          case 5u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v65 = *((void *)a2 + 1);
              unint64_t v66 = *((void *)a2 + 2);
              while (v65 < v66 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v68 = (char *)*((void *)this + 2);
                unint64_t v67 = *((void *)this + 3);
                if ((unint64_t)v68 >= v67)
                {
                  unint64_t v70 = (char *)*((void *)this + 1);
                  uint64_t v71 = (v68 - v70) >> 2;
                  unint64_t v72 = v71 + 1;
                  if ((unint64_t)(v71 + 1) >> 62) {
                    goto LABEL_300;
                  }
                  uint64_t v73 = v67 - (void)v70;
                  if (v73 >> 1 > v72) {
                    unint64_t v72 = v73 >> 1;
                  }
                  if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v74 = v72;
                  }
                  if (v74)
                  {
                    unint64_t v74 = (unint64_t)sub_2572C76F0(v74);
                    unint64_t v70 = (char *)*((void *)this + 1);
                    unint64_t v68 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v75 = 0;
                  }
                  unint64_t v76 = (_DWORD *)(v74 + 4 * v71);
                  *unint64_t v76 = 0;
                  char v69 = v76 + 1;
                  while (v68 != v70)
                  {
                    int v77 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *--unint64_t v76 = v77;
                  }
                  *((void *)this + 1) = v76;
                  *((void *)this + 2) = v69;
                  *((void *)this + 3) = v74 + 4 * v75;
                  if (v70) {
                    operator delete(v70);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  char v69 = v68 + 4;
                }
                *((void *)this + 2) = v69;
                unint64_t v78 = *((void *)a2 + 1);
                if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_171;
                }
                *(v69 - 1) = *(_DWORD *)(*(void *)a2 + v78);
                unint64_t v66 = *((void *)a2 + 2);
                unint64_t v65 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v65;
              }
              goto LABEL_172;
            }
            char v125 = (char *)*((void *)this + 2);
            unint64_t v124 = *((void *)this + 3);
            if ((unint64_t)v125 >= v124)
            {
              unint64_t v158 = (char *)*((void *)this + 1);
              uint64_t v159 = (v125 - v158) >> 2;
              unint64_t v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 62) {
                goto LABEL_300;
              }
              uint64_t v161 = v124 - (void)v158;
              if (v161 >> 1 > v160) {
                unint64_t v160 = v161 >> 1;
              }
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v162 = v160;
              }
              if (v162)
              {
                unint64_t v162 = (unint64_t)sub_2572C76F0(v162);
                unint64_t v158 = (char *)*((void *)this + 1);
                char v125 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v163 = 0;
              }
              unint64_t v176 = (_DWORD *)(v162 + 4 * v159);
              *unint64_t v176 = 0;
              unint64_t v119 = v176 + 1;
              while (v125 != v158)
              {
                int v177 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *--unint64_t v176 = v177;
              }
              *((void *)this + 1) = v176;
              *((void *)this + 2) = v119;
              *((void *)this + 3) = v162 + 4 * v163;
              if (v158) {
                operator delete(v158);
              }
            }
            else
            {
              *(_DWORD *)char v125 = 0;
              unint64_t v119 = v125 + 4;
            }
            *((void *)this + 2) = v119;
            goto LABEL_291;
          case 6u:
            *((unsigned char *)this + 152) |= 8u;
            unint64_t v79 = *((void *)a2 + 1);
            unint64_t v80 = *((void *)a2 + 2);
            uint64_t v81 = *(void *)a2;
            if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
            {
              char v82 = 0;
              unsigned int v83 = 0;
              uint64_t v84 = 0;
              do
              {
                unint64_t v85 = v79 + 1;
                *((void *)a2 + 1) = v79 + 1;
                char v86 = *(unsigned char *)(v81 + v79);
                v84 |= (unint64_t)(v86 & 0x7F) << v82;
                if ((v86 & 0x80) == 0) {
                  goto LABEL_249;
                }
                v82 += 7;
                unint64_t v79 = v85;
                BOOL v14 = v83++ > 8;
              }
              while (!v14);
LABEL_187:
              LODWORD(v84) = 0;
              goto LABEL_249;
            }
            char v126 = 0;
            unsigned int v127 = 0;
            uint64_t v84 = 0;
            if (v80 <= v79) {
              unint64_t v80 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v80 == v79)
              {
                LODWORD(v84) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v128 = v79 + 1;
                char v129 = *(unsigned char *)(v81 + v79);
                *((void *)a2 + 1) = v128;
                v84 |= (unint64_t)(v129 & 0x7F) << v126;
                if (v129 < 0)
                {
                  v126 += 7;
                  unint64_t v79 = v128;
                  BOOL v14 = v127++ > 8;
                  if (v14) {
                    goto LABEL_187;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v84) = 0;
                }
              }
              break;
            }
LABEL_249:
            *((_DWORD *)this + 37) = v84;
            goto LABEL_20;
          case 7u:
            *((unsigned char *)this + 152) |= 1u;
            unint64_t v87 = *((void *)a2 + 1);
            unint64_t v88 = *((void *)a2 + 2);
            uint64_t v89 = *(void *)a2;
            if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
            {
              char v90 = 0;
              unsigned int v91 = 0;
              uint64_t v92 = 0;
              do
              {
                unint64_t v93 = v87 + 1;
                *((void *)a2 + 1) = v87 + 1;
                char v94 = *(unsigned char *)(v89 + v87);
                v92 |= (unint64_t)(v94 & 0x7F) << v90;
                if ((v94 & 0x80) == 0) {
                  goto LABEL_252;
                }
                v90 += 7;
                unint64_t v87 = v93;
                BOOL v14 = v91++ > 8;
              }
              while (!v14);
LABEL_194:
              uint64_t v92 = 0;
              goto LABEL_252;
            }
            char v130 = 0;
            unsigned int v131 = 0;
            uint64_t v92 = 0;
            if (v88 <= v87) {
              unint64_t v88 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v88 == v87)
              {
                uint64_t v92 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v132 = v87 + 1;
                char v133 = *(unsigned char *)(v89 + v87);
                *((void *)a2 + 1) = v132;
                v92 |= (unint64_t)(v133 & 0x7F) << v130;
                if (v133 < 0)
                {
                  v130 += 7;
                  unint64_t v87 = v132;
                  BOOL v14 = v131++ > 8;
                  if (v14) {
                    goto LABEL_194;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v92 = 0;
                }
              }
              break;
            }
LABEL_252:
            *((void *)this + 16) = v92;
            goto LABEL_20;
          case 8u:
            if (v20 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v95 = *((void *)a2 + 1);
              unint64_t v96 = *((void *)a2 + 2);
              while (v95 < v96 && !*((unsigned char *)a2 + 24))
              {
                unsigned int v98 = (char *)*((void *)this + 14);
                unint64_t v97 = *((void *)this + 15);
                if ((unint64_t)v98 >= v97)
                {
                  unint64_t v100 = (char *)*((void *)this + 13);
                  uint64_t v101 = (v98 - v100) >> 2;
                  unint64_t v102 = v101 + 1;
                  if ((unint64_t)(v101 + 1) >> 62) {
                    goto LABEL_300;
                  }
                  uint64_t v103 = v97 - (void)v100;
                  if (v103 >> 1 > v102) {
                    unint64_t v102 = v103 >> 1;
                  }
                  if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v104 = v102;
                  }
                  if (v104)
                  {
                    unint64_t v104 = (unint64_t)sub_2572C76F0(v104);
                    unint64_t v100 = (char *)*((void *)this + 13);
                    unsigned int v98 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    uint64_t v105 = 0;
                  }
                  unint64_t v106 = (_DWORD *)(v104 + 4 * v101);
                  _DWORD *v106 = 0;
                  uint64_t v99 = v106 + 1;
                  while (v98 != v100)
                  {
                    int v107 = *((_DWORD *)v98 - 1);
                    v98 -= 4;
                    *--unint64_t v106 = v107;
                  }
                  *((void *)this + 13) = v106;
                  *((void *)this + 14) = v99;
                  *((void *)this + 15) = v104 + 4 * v105;
                  if (v100) {
                    operator delete(v100);
                  }
                }
                else
                {
                  *(_DWORD *)unsigned int v98 = 0;
                  uint64_t v99 = v98 + 4;
                }
                *((void *)this + 14) = v99;
                unint64_t v108 = *((void *)a2 + 1);
                if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)a2 + 2))
                {
LABEL_171:
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v99 - 1) = *(_DWORD *)(*(void *)a2 + v108);
                unint64_t v96 = *((void *)a2 + 2);
                unint64_t v95 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v95;
              }
LABEL_172:
              PB::Reader::recallMark();
            }
            else
            {
              unint64_t v135 = (char *)*((void *)this + 14);
              unint64_t v134 = *((void *)this + 15);
              if ((unint64_t)v135 >= v134)
              {
                unint64_t v164 = (char *)*((void *)this + 13);
                uint64_t v165 = (v135 - v164) >> 2;
                unint64_t v166 = v165 + 1;
                if ((unint64_t)(v165 + 1) >> 62) {
LABEL_300:
                }
                  sub_2570AFD0C();
                uint64_t v167 = v134 - (void)v164;
                if (v167 >> 1 > v166) {
                  unint64_t v166 = v167 >> 1;
                }
                if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v168 = v166;
                }
                if (v168)
                {
                  unint64_t v168 = (unint64_t)sub_2572C76F0(v168);
                  unint64_t v164 = (char *)*((void *)this + 13);
                  unint64_t v135 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v169 = 0;
                }
                v178 = (_DWORD *)(v168 + 4 * v165);
                _DWORD *v178 = 0;
                unint64_t v119 = v178 + 1;
                while (v135 != v164)
                {
                  int v179 = *((_DWORD *)v135 - 1);
                  v135 -= 4;
                  *--v178 = v179;
                }
                *((void *)this + 13) = v178;
                *((void *)this + 14) = v119;
                *((void *)this + 15) = v168 + 4 * v169;
                if (v164) {
                  operator delete(v164);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v135 = 0;
                unint64_t v119 = v135 + 4;
              }
              *((void *)this + 14) = v119;
LABEL_291:
              unint64_t v180 = *((void *)a2 + 1);
              if (v180 <= 0xFFFFFFFFFFFFFFFBLL && v180 + 4 <= *((void *)a2 + 2))
              {
                *(v119 - 1) = *(_DWORD *)(*(void *)a2 + v180);
                uint64_t v22 = *((void *)a2 + 1) + 4;
LABEL_295:
                *((void *)a2 + 1) = v22;
              }
              else
              {
LABEL_293:
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          case 9u:
            *((unsigned char *)this + 152) |= 4u;
            unint64_t v109 = *((void *)a2 + 1);
            unint64_t v110 = *((void *)a2 + 2);
            uint64_t v111 = *(void *)a2;
            if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
            {
              char v112 = 0;
              unsigned int v113 = 0;
              uint64_t v114 = 0;
              do
              {
                unint64_t v115 = v109 + 1;
                *((void *)a2 + 1) = v109 + 1;
                char v116 = *(unsigned char *)(v111 + v109);
                v114 |= (unint64_t)(v116 & 0x7F) << v112;
                if ((v116 & 0x80) == 0) {
                  goto LABEL_255;
                }
                v112 += 7;
                unint64_t v109 = v115;
                BOOL v14 = v113++ > 8;
              }
              while (!v14);
LABEL_203:
              LODWORD(v114) = 0;
              goto LABEL_255;
            }
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v114 = 0;
            if (v110 <= v109) {
              unint64_t v110 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v110 == v109)
              {
                LODWORD(v114) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v138 = v109 + 1;
                char v139 = *(unsigned char *)(v111 + v109);
                *((void *)a2 + 1) = v138;
                v114 |= (unint64_t)(v139 & 0x7F) << v136;
                if (v139 < 0)
                {
                  v136 += 7;
                  unint64_t v109 = v138;
                  BOOL v14 = v137++ > 8;
                  if (v14) {
                    goto LABEL_203;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v114) = 0;
                }
              }
              break;
            }
LABEL_255:
            *((_DWORD *)this + 36) = v114;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 152) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 136));
  }
  int v4 = *(float **)(v3 + 56);
  uint64_t v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 80);
  uint64_t v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(float **)(v3 + 32);
  unint64_t v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(float **)(v3 + 8);
  BOOL v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  char v16 = *(unsigned char *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v16 = *(unsigned char *)(v3 + 152);
  }
  if (v16) {
    this = PB::Writer::writeVarInt(a2);
  }
  unint64_t v17 = *(float **)(v3 + 104);
  char v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    this = PB::Writer::write(a2, v19);
  }
  if ((*(unsigned char *)(v3 + 152) & 4) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::hash_value(CMMsl::AuxiliaryDeviceMotion *this)
{
  if ((*((unsigned char *)this + 152) & 2) != 0)
  {
    if (*((double *)this + 17) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 17);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 152) & 8) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 37);
    if (*((unsigned char *)this + 152)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 152))
    {
LABEL_8:
      uint64_t v8 = *((void *)this + 16);
      goto LABEL_11;
    }
  }
  uint64_t v8 = 0;
LABEL_11:
  uint64_t v9 = PBHashBytes();
  if ((*((unsigned char *)this + 152) & 4) != 0) {
    uint64_t v10 = *((unsigned int *)this + 36);
  }
  else {
    uint64_t v10 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t CMMsl::AveragedALSData::AveragedALSData(uint64_t this)
{
  *(void *)this = &unk_270640610;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640610;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::AveragedALSData::~AveragedALSData(CMMsl::AveragedALSData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::AveragedALSData::AveragedALSData(CMMsl::AveragedALSData *this, const CMMsl::AveragedALSData *a2)
{
  *(void *)this = &unk_270640610;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *((void *)a2 + 1);
  *((unsigned char *)this + 20) = 1;
  *((void *)this + 1) = v3;
  char v2 = 3;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, const CMMsl::AveragedALSData *a2)
{
  if ((const CMMsl::AveragedALSData *)a1 != a2)
  {
    CMMsl::AveragedALSData::AveragedALSData((CMMsl::AveragedALSData *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AveragedALSData *a2, CMMsl::AveragedALSData *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::AveragedALSData::AveragedALSData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640610;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270640610;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270640610;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AveragedALSData::formatText(CMMsl::AveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::AveragedALSData::readFrom(CMMsl::AveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::AveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::AveragedALSData::hash_value(CMMsl::AveragedALSData *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ *(void *)&v1;
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this)
{
  *(void *)this = &unk_270640648;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640648;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BTConnection::~BTConnection(CMMsl::BTConnection *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this, const CMMsl::BTConnection *a2)
{
  *(void *)this = &unk_270640648;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 28) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    char v6 = *((unsigned char *)a2 + 24);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(unsigned char *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, const CMMsl::BTConnection *a2)
{
  if ((const CMMsl::BTConnection *)a1 != a2)
  {
    CMMsl::BTConnection::BTConnection((uint64_t)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BTConnection *a2, CMMsl::BTConnection *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  return result;
}

double CMMsl::BTConnection::BTConnection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640648;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640648;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v8 = &unk_270640648;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    char v4 = *(unsigned char *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v4;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::BTConnection::formatText(CMMsl::BTConnection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "fConnected");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fEndTime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "fStartTime", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BTConnection::readFrom(CMMsl::BTConnection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 24) = v22;
        goto LABEL_38;
      }
      if (v19 == 2)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if (v19 != 1)
        {
LABEL_27:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_38;
        }
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_33:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_38;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::BTConnection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::write(a2);
}

BOOL CMMsl::BTConnection::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::BTConnection::hash_value(CMMsl::BTConnection *this)
{
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 28))
    {
LABEL_3:
      double v2 = *((double *)this + 1);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      uint64_t v3 = 0;
      return *(void *)&v2 ^ *(void *)&v1 ^ v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v3 = *((unsigned __int8 *)this + 24);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_270640680;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_270640680;
  return this;
}

void CMMsl::BacklightState::~BacklightState(CMMsl::BacklightState *this)
{
  *(void *)this = &unk_270640680;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    sub_2572C6E48(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BacklightState::~BacklightState(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this, const CMMsl::BacklightState *a2)
{
  *(void *)this = &unk_270640680;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 28))
  {
    int v2 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = 1;
    *(_DWORD *)(this + 24) = v2;
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, const CMMsl::BacklightState *a2)
{
  if ((const CMMsl::BacklightState *)a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BacklightState *a2, CMMsl::BacklightState *a3)
{
  int v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  return this;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_270640680;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_2572C6E48(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v7) {
    sub_2572C6E48(v7);
  }
  return a1;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::BacklightState::formatText(CMMsl::BacklightState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 28)) {
    PB::TextFormatter::format(a2, "backlightState");
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BacklightState::readFrom(CMMsl::BacklightState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v19 == 2) {
        operator new();
      }
      if (v19 == 1)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_45;
            }
            unint64_t v31 = v20 + 1;
            char v32 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v31;
            v25 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v20 = v31;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v25) = 0;
              goto LABEL_45;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_41;
            }
          }
        }
LABEL_45:
        *((_DWORD *)this + 6) = v25;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BacklightState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(unsigned char *)(this + 28)) {
    this = PB::Writer::writeVarInt(a2);
  }
  if (*(void *)(v2 + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 16))
  {
    return PB::Writer::write();
  }
  return this;
}

uint64_t CMMsl::BacklightState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  int v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)v4[23];
    }
    else {
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unsigned int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unsigned int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_26;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_26:
  unint64_t v12 = *(unsigned __int8 **)(a1 + 16);
  char v13 = *(unsigned __int8 ***)(a2 + 16);
  uint64_t result = v13 == 0;
  if (!v12) {
    return result;
  }
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v12[23];
  if ((v14 & 0x80u) == 0) {
    char v15 = (unsigned __int8 *)v12[23];
  }
  else {
    char v15 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  unsigned int v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    unsigned int v16 = v13[1];
  }
  if (v15 != v16) {
    return 0;
  }
  if (v17 >= 0) {
    char v18 = *(unsigned __int8 **)(a2 + 16);
  }
  else {
    char v18 = *v13;
  }
  if ((v14 & 0x80) != 0) {
    return !memcmp(*(const void **)v12, v18, *((void *)v12 + 1));
  }
  if (!v12[23]) {
    return 1;
  }
  uint64_t v19 = v14 - 1;
  do
  {
    int v21 = *v12++;
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t CMMsl::BacklightState::hash_value(CMMsl::BacklightState *this)
{
  if (*((unsigned char *)this + 28)) {
    uint64_t v2 = *((unsigned int *)this + 6);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    unint64_t v4 = sub_2572C6F9C(v3);
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = *((void *)this + 2);
  if (v5) {
    unint64_t v5 = sub_2572C6F9C(v5);
  }
  return v4 ^ v2 ^ v5;
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this)
{
  *(void *)this = &unk_2706406B8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_2706406B8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BasebandCompassCoex::~BasebandCompassCoex(CMMsl::BasebandCompassCoex *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this, const CMMsl::BasebandCompassCoex *a2)
{
  *(void *)this = &unk_2706406B8;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v7;
    return this;
  }
  char v6 = *((unsigned char *)a2 + 24);
  v3 |= 8u;
  *(unsigned char *)(this + 28) = v3;
  *(unsigned char *)(this + 24) = v6;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, const CMMsl::BasebandCompassCoex *a2)
{
  if ((const CMMsl::BasebandCompassCoex *)a1 != a2)
  {
    CMMsl::BasebandCompassCoex::BasebandCompassCoex((uint64_t)&v8, a2);
    uint64_t v3 = v10;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v11;
    char v11 = v6;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoex *a2, CMMsl::BasebandCompassCoex *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706406B8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706406B8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = &unk_2706406B8;
    int v11 = *(_DWORD *)(a1 + 28);
    char v10 = v5;
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v6;
    void v9[2] = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandCompassCoex::formatText(CMMsl::BasebandCompassCoex *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "inCoex");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "reserved");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "subType");
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BasebandCompassCoex::readFrom(CMMsl::BasebandCompassCoex *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_68;
            }
            unint64_t v37 = v21++;
            char v38 = *(unsigned char *)(v22 + v37);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_67:
              unint64_t v2 = v37 + 1;
              goto LABEL_68;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_67;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_68;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_68:
        *((_DWORD *)this + 5) = v25;
        break;
      case 3u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 24) = v28;
        break;
      case 4u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v30 = *(void *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v33 = 0;
          if (v2 <= v29) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v29)
            {
              LODWORD(v33) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_73;
            }
            unint64_t v41 = v29++;
            char v42 = *(unsigned char *)(v30 + v41);
            *((void *)a2 + 1) = v29;
            v33 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v33) = 0;
LABEL_72:
              unint64_t v2 = v41 + 1;
              goto LABEL_73;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v33) = 0;
          }
          goto LABEL_72;
        }
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        do
        {
          unint64_t v2 = v29 + 1;
          *((void *)a2 + 1) = v29 + 1;
          char v34 = *(unsigned char *)(v30 + v29);
          v33 |= (unint64_t)(v34 & 0x7F) << v31;
          if ((v34 & 0x80) == 0) {
            goto LABEL_73;
          }
          v31 += 7;
          unint64_t v29 = v2;
          BOOL v14 = v32++ > 8;
        }
        while (!v14);
        LODWORD(v33) = 0;
LABEL_73:
        *((_DWORD *)this + 4) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoex::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2);
      if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::BasebandCompassCoex::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BasebandCompassCoex::hash_value(CMMsl::BasebandCompassCoex *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 5);
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v4 = 0;
      return v2 ^ *(void *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 24);
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this)
{
  *(void *)this = &unk_2706406F0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_2706406F0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BasebandCompassCoexConstraints::~BasebandCompassCoexConstraints(CMMsl::BasebandCompassCoexConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  *(void *)this = &unk_2706406F0;
  *(_DWORD *)(this + 48) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    __int16 v3 = 2;
    *(_WORD *)(this + 48) = 2;
    *(void *)(this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 48) = v3;
    *(void *)(this + 8) = v5;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    int v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v6;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v8 = *((unsigned char *)a2 + 47);
  v3 |= 0x400u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 47) = v8;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  char v9 = *((unsigned char *)a2 + 45);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 45) = v9;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v10 = *((unsigned char *)a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 44) = v10;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v11 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v11;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v12 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 46);
    *(_WORD *)(this + 48) = v3 | 0x200;
    *(unsigned char *)(this + 46) = v14;
    return this;
  }
LABEL_23:
  int v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 24) & 0x200) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *a1, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BasebandCompassCoexConstraints *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoexConstraints *a2, CMMsl::BasebandCompassCoexConstraints *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 47);
  *((unsigned char *)this + 47) = *((unsigned char *)a2 + 47);
  *((unsigned char *)a2 + 47) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 45);
  *((unsigned char *)this + 45) = *((unsigned char *)a2 + 45);
  *((unsigned char *)a2 + 45) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v3;
  int v6 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v6) = *((unsigned char *)this + 46);
  *((unsigned char *)this + 46) = *((unsigned char *)a2 + 46);
  *((unsigned char *)a2 + 46) = v6;
  return result;
}

float CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706406F0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  return result;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BasebandCompassCoexConstraints *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::formatText(CMMsl::BasebandCompassCoexConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "activeCoex");
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgTemperature", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "blackout");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "gradient", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "instTemperature", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isSettle");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rapidGradientChange");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "state");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 10));
  if ((*((_WORD *)this + 24) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BasebandCompassCoexConstraints::readFrom(CMMsl::BasebandCompassCoexConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_80;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((_WORD *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_29:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_74;
      case 3u:
        *((_WORD *)this + 24) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 4u:
        *((_WORD *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 5u:
        *((_WORD *)this + 24) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 47) = v21;
        break;
      case 6u:
        *((_WORD *)this + 24) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 45) = v23;
        break;
      case 7u:
        *((_WORD *)this + 24) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 44) = v25;
        break;
      case 8u:
        *((_WORD *)this + 24) |= 0x20u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_79;
            }
            unint64_t v36 = v26++;
            char v37 = *(unsigned char *)(v27 + v36);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_78:
              unint64_t v2 = v36 + 1;
              goto LABEL_79;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_78;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_79;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_79:
        *((_DWORD *)this + 9) = v30;
        break;
      case 9u:
        *((_WORD *)this + 24) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_54;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_73;
      case 0xAu:
        *((_WORD *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_73:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_74:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_54:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 24) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 46) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_80:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 48) & 0x200) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_23:
  return PB::Writer::write(a2);
}

BOOL CMMsl::BasebandCompassCoexConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 48);
  __int16 v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0) {
    return (*(_WORD *)(a2 + 48) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46);
  }
  return v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::hash_value(CMMsl::BasebandCompassCoexConstraints *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if ((v1 & 2) == 0)
  {
    double v2 = 0.0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    uint64_t v5 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    uint64_t v7 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  float v4 = *((float *)this + 10);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x400) != 0)
  {
LABEL_12:
    uint64_t v8 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_13:
    uint64_t v9 = *((unsigned __int8 *)this + 45);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v10 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v10 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    uint64_t v11 = *((unsigned int *)this + 9);
    if ((v1 & 0x10) != 0) {
      goto LABEL_16;
    }
LABEL_33:
    uint64_t v13 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_32:
  uint64_t v11 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_33;
  }
LABEL_16:
  float v12 = *((float *)this + 8);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_19:
    float v14 = *((float *)this + 6);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if ((*((_WORD *)this + 24) & 0x200) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v16 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
  }
LABEL_34:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 24) & 0x200) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  uint64_t v16 = *((unsigned __int8 *)this + 46);
  return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this)
{
  *(void *)this = &unk_270640728;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_270640728;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::BasebandSpeed::~BasebandSpeed(CMMsl::BasebandSpeed *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this, const CMMsl::BasebandSpeed *a2)
{
  *(void *)this = &unk_270640728;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, const CMMsl::BasebandSpeed *a2)
{
  if ((const CMMsl::BasebandSpeed *)a1 != a2)
  {
    CMMsl::BasebandSpeed::BasebandSpeed((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BasebandSpeed *a2, CMMsl::BasebandSpeed *a3)
{
  int v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270640728;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270640728;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = &unk_270640728;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandSpeed::formatText(CMMsl::BasebandSpeed *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "reserved");
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "scaledValue");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "speedRange");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "speedThreshold");
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BasebandSpeed::readFrom(CMMsl::BasebandSpeed *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_105;
            }
            unint64_t v52 = v20++;
            char v53 = *(unsigned char *)(v21 + v52);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_104:
              unint64_t v3 = v52 + 1;
              goto LABEL_105;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_104;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v3 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_105;
          }
          v22 += 7;
          unint64_t v20 = v3;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_105:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_110;
            }
            unint64_t v56 = v26++;
            char v57 = *(unsigned char *)(v27 + v56);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_109:
              unint64_t v3 = v56 + 1;
              goto LABEL_110;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_109;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v3 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_110;
          }
          v28 += 7;
          unint64_t v26 = v3;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_110:
        *((_DWORD *)this + 7) = v30;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_115;
            }
            unint64_t v60 = v32++;
            char v61 = *(unsigned char *)(v33 + v60);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_114:
              unint64_t v3 = v60 + 1;
              goto LABEL_115;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_114;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v3 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_115;
          }
          v34 += 7;
          unint64_t v32 = v3;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_115:
        *((_DWORD *)this + 6) = v36;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_120;
            }
            unint64_t v64 = v38++;
            char v65 = *(unsigned char *)(v39 + v64);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_119:
              unint64_t v3 = v64 + 1;
              goto LABEL_120;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_119;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v3 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_120;
          }
          v40 += 7;
          unint64_t v38 = v3;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_120:
        *((_DWORD *)this + 5) = v42;
        break;
      case 5u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_125;
            }
            unint64_t v68 = v44++;
            char v69 = *(unsigned char *)(v45 + v68);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_124:
              unint64_t v3 = v68 + 1;
              goto LABEL_125;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_124;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v3 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_125;
          }
          v46 += 7;
          unint64_t v44 = v3;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_125:
        *((_DWORD *)this + 4) = v48;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BasebandSpeed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::BasebandSpeed::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BasebandSpeed::hash_value(CMMsl::BasebandSpeed *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 32) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 5);
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

uint64_t CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t this)
{
  *(void *)this = &unk_270640760;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640760;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BaselineResetCheck::~BaselineResetCheck(CMMsl::BaselineResetCheck *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(CMMsl::BaselineResetCheck *this, const CMMsl::BaselineResetCheck *a2)
{
  *(void *)this = &unk_270640760;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 25);
    v3 |= 0x10u;
    *((unsigned char *)this + 28) = v3;
    *((unsigned char *)this + 25) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    char v6 = *((unsigned char *)a2 + 24);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((unsigned char *)this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      float result = *((float *)a2 + 4);
      *((unsigned char *)this + 28) = v3 | 2;
      *((float *)this + 4) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, const CMMsl::BaselineResetCheck *a2)
{
  if ((const CMMsl::BaselineResetCheck *)a1 != a2)
  {
    CMMsl::BaselineResetCheck::BaselineResetCheck((CMMsl::BaselineResetCheck *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v11;
    int v11 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v10;
    __int16 v10 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BaselineResetCheck *a2, CMMsl::BaselineResetCheck *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 25);
  *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + 25) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640760;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270640760;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v5 = *(_WORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = &unk_270640760;
    v10[1] = v6;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v5;
    __int16 v11 = v4;
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v8;
    void v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BaselineResetCheck::formatText(CMMsl::BaselineResetCheck *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPostSUIProx", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "possibleObstructed");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "resetTriggered");
  if (*((unsigned char *)this + 28)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BaselineResetCheck::readFrom(CMMsl::BaselineResetCheck *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v33 = v21++;
            char v34 = *(unsigned char *)(v22 + v33);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
LABEL_61:
              unint64_t v2 = v33 + 1;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
          goto LABEL_61;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_62;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        uint64_t v25 = 0;
LABEL_62:
        *((void *)this + 1) = v25;
        break;
      case 2u:
        *((unsigned char *)this + 28) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 25) = v28;
        break;
      case 3u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v30 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v30 = v29 != 0;
        }
        *((unsigned char *)this + 24) = v30;
        break;
      case 4u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_44;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_57:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_44:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BaselineResetCheck::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 20));
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::BaselineResetCheck::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BaselineResetCheck::hash_value(CMMsl::BaselineResetCheck *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 28) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 25);
      if ((*((unsigned char *)this + 28) & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 8) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 24);
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_5:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v7;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v2 ^ v1 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this)
{
  *(void *)this = &unk_270640798;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640798;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer(CMMsl::BatchedLocationFromOdometer *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640798;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this, const CMMsl::BatchedLocationFromOdometer *a2)
{
  *(void *)this = &unk_270640798;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const CMMsl::BatchedLocationFromOdometer *CMMsl::BatchedLocationFromOdometer::operator=(const CMMsl::BatchedLocationFromOdometer *a1, const CMMsl::BatchedLocationFromOdometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer((CMMsl::BatchedLocationFromOdometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatchedLocationFromOdometer *a2, CMMsl::BatchedLocationFromOdometer *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640798;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer((CMMsl::BatchedLocationFromOdometer *)v6);
  }
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::formatText(CMMsl::BatchedLocationFromOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "batchedLocationFixType");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BatchedLocationFromOdometer::readFrom(CMMsl::BatchedLocationFromOdometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v30 = v20 + 1;
            char v31 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v30;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v20 = v30;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v25) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this)
{
  *(void *)this = &unk_270643470;
  *(void *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

{
  *(void *)this = &unk_270643470;
  *(void *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::BatchedLocationFromOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::MotionGPSLocation::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

BOOL CMMsl::MotionGPSLocation::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 180);
  int v3 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  int v9 = *(_DWORD *)(a1 + 180);
  int v10 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x20000) != 0)
  {
    if ((v10 & 0x20000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v10 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x80000) != 0)
  {
    if ((v10 & 0x80000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v10 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x40000) != 0)
  {
    if ((v10 & 0x40000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v10 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v9 & 0x200000) != 0)
  {
    if ((v10 & 0x200000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v10 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x400000) != 0)
  {
    if ((v10 & 0x400000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v10 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x10000) != 0)
  {
    if ((v10 & 0x10000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v10 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x100000) != 0)
  {
    if ((v10 & 0x100000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v10 & 0x100000) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a2 + 112);
  if (v4)
  {
    if (!v5 || !CMMsl::TrackRunData::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v9 & 0x8000) != 0)
  {
    if ((v10 & 0x8000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v10 & 0x8000) != 0)
  {
    return 0;
  }
  BOOL result = (v10 & 0x4000) == 0;
  if ((v9 & 0x4000) == 0) {
    return result;
  }
  return (v10 & 0x4000) != 0 && *(float *)(a1 + 128) == *(float *)(a2 + 128);
}

unint64_t CMMsl::BatchedLocationFromOdometer::hash_value(CMMsl::BatchedLocationFromOdometer *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned int *)this + 4);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::BatchedLocationFromOdometer::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this)
{
  *(void *)this = &unk_2706407D0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_2706407D0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::BatterySaverModeStatus::~BatterySaverModeStatus(CMMsl::BatterySaverModeStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this, const CMMsl::BatterySaverModeStatus *a2)
{
  *(void *)this = &unk_2706407D0;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = &unk_2706407D0;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = &unk_2706407D0;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void *v7;
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = &unk_2706407D0;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatterySaverModeStatus *a2, CMMsl::BatterySaverModeStatus *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = &unk_2706407D0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = &unk_2706407D0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::formatText(CMMsl::BatterySaverModeStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isBatterySaverModeEnabled");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BatterySaverModeStatus::readFrom(CMMsl::BatterySaverModeStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BatterySaverModeStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::BatterySaverModeStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::hash_value(CMMsl::BatterySaverModeStatus *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this)
{
  *(void *)this = &unk_270640808;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640808;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BatteryStatus::~BatteryStatus(CMMsl::BatteryStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this, const CMMsl::BatteryStatus *a2)
{
  *(void *)this = &unk_270640808;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 24);
    v3 |= 8u;
    *(unsigned char *)(this + 28) = v3;
    *(unsigned char *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    char v6 = *((unsigned char *)a2 + 25);
    v3 |= 0x10u;
    *(unsigned char *)(this + 28) = v3;
    *(unsigned char *)(this + 25) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v7;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  char v8 = *((unsigned char *)a2 + 26);
  v3 |= 0x20u;
  *(unsigned char *)(this + 28) = v3;
  *(unsigned char *)(this + 26) = v8;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, const CMMsl::BatteryStatus *a2)
{
  if ((const CMMsl::BatteryStatus *)a1 != a2)
  {
    CMMsl::BatteryStatus::BatteryStatus((uint64_t)&v8, a2);
    uint64_t v3 = v10;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    LOWORD(v6) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v11;
    __int16 v11 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 26);
    *(unsigned char *)(a1 + 26) = v12;
    char v12 = v6;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BatteryStatus *a2, CMMsl::BatteryStatus *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 25);
  *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + 25) = v3;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 26);
  *((unsigned char *)this + 26) = *((unsigned char *)a2 + 26);
  *((unsigned char *)a2 + 26) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BatteryStatus::BatteryStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640808;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640808;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 26);
    __int16 v6 = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    char v7 = *(unsigned char *)(a1 + 26);
    *(unsigned char *)(a1 + 26) = v5;
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v11[0] = &unk_270640808;
    int v14 = *(_DWORD *)(a1 + 28);
    __int16 v12 = v6;
    char v13 = v7;
    *(_DWORD *)(a1 + 28) = v3;
    v11[1] = v8;
    v11[2] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::BatteryStatus::formatText(CMMsl::BatteryStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "charged");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chargerFamily");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "chargerType");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "connected");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "level", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "wasConnected");
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BatteryStatus::readFrom(CMMsl::BatteryStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 24) = v22;
        break;
      case 3u:
        *((unsigned char *)this + 28) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 25) = v24;
        break;
      case 4u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v25 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v26 = *(void *)a2;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v29 = 0;
          if (v2 <= v25) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v25)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_76;
            }
            unint64_t v41 = v25++;
            char v42 = *(unsigned char *)(v26 + v41);
            *((void *)a2 + 1) = v25;
            v29 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v29) = 0;
LABEL_75:
              unint64_t v2 = v41 + 1;
              goto LABEL_76;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v29) = 0;
          }
          goto LABEL_75;
        }
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        do
        {
          unint64_t v2 = v25 + 1;
          *((void *)a2 + 1) = v25 + 1;
          char v30 = *(unsigned char *)(v26 + v25);
          v29 |= (unint64_t)(v30 & 0x7F) << v27;
          if ((v30 & 0x80) == 0) {
            goto LABEL_76;
          }
          v27 += 7;
          unint64_t v25 = v2;
          BOOL v14 = v28++ > 8;
        }
        while (!v14);
        LODWORD(v29) = 0;
LABEL_76:
        *((_DWORD *)this + 5) = v29;
        break;
      case 5u:
        *((unsigned char *)this + 28) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v32 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v32 = v31 != 0;
        }
        *((unsigned char *)this + 26) = v32;
        break;
      case 6u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_81;
            }
            unint64_t v45 = v33++;
            char v46 = *(unsigned char *)(v34 + v45);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
LABEL_80:
              unint64_t v2 = v45 + 1;
              goto LABEL_81;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
          goto LABEL_80;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_81;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        LODWORD(v37) = 0;
LABEL_81:
        *((_DWORD *)this + 4) = v37;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BatteryStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::BatteryStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a2 + 26)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BatteryStatus::hash_value(CMMsl::BatteryStatus *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 24);
      if ((*((unsigned char *)this + 28) & 0x10) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 0x10) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned __int8 *)this + 25);
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 5);
    if ((*((unsigned char *)this + 28) & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_7;
    }
LABEL_15:
    uint64_t v6 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 28) & 0x20) == 0) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 26);
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v6 = *((int *)this + 4);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t this)
{
  *(void *)this = &unk_270640840;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = &unk_270640840;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::BioMotionAnchor::~BioMotionAnchor(CMMsl::BioMotionAnchor *this)
{
  *(void *)this = &unk_270640840;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionAnchor::~BioMotionAnchor(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchor::BioMotionAnchor(CMMsl::BioMotionAnchor *this, const CMMsl::BioMotionAnchor *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_270640840;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C73EC((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  char v4 = *((unsigned char *)a2 + 52);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) |= 1u;
    *((void *)this + 4) = v5;
    char v4 = *((unsigned char *)a2 + 52);
  }
  if ((v4 & 2) != 0)
  {
    char v6 = *((unsigned char *)a2 + 48);
    *((unsigned char *)this + 52) |= 2u;
    *((unsigned char *)this + 48) = v6;
  }
  return this;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, const CMMsl::BioMotionAnchor *a2)
{
  if ((const CMMsl::BioMotionAnchor *)a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((CMMsl::BioMotionAnchor *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v14;
    char v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionAnchor *a2, CMMsl::BioMotionAnchor *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v7) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v7;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640840;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v14;
    char v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::formatText(CMMsl::BioMotionAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 52)) {
    PB::TextFormatter::format(a2, "bioMotionTimestamp", *((double *)this + 4));
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "pose");
  }
  if ((*((unsigned char *)this + 52) & 2) != 0) {
    PB::TextFormatter::format(a2, "runSmoother");
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::BioMotionAnchor::readFrom(CMMsl::BioMotionAnchor *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_23:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            operator new();
          case 2u:
            if ((v11 & 7) == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v19 = *((void *)a2 + 1);
              unint64_t v20 = *((void *)a2 + 2);
              while (v19 < v20 && !*((unsigned char *)a2 + 24))
              {
                BOOL v22 = (char *)*((void *)this + 2);
                unint64_t v21 = *((void *)this + 3);
                if ((unint64_t)v22 >= v21)
                {
                  BOOL v24 = (char *)*((void *)this + 1);
                  uint64_t v25 = (v22 - v24) >> 3;
                  unint64_t v26 = v25 + 1;
                  if ((unint64_t)(v25 + 1) >> 61) {
                    goto LABEL_84;
                  }
                  uint64_t v27 = v21 - (void)v24;
                  if (v27 >> 2 > v26) {
                    unint64_t v26 = v27 >> 2;
                  }
                  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v28 = v26;
                  }
                  if (v28)
                  {
                    unint64_t v28 = (unint64_t)sub_2572C7528(v28);
                    BOOL v24 = (char *)*((void *)this + 1);
                    BOOL v22 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v29 = 0;
                  }
                  char v30 = (void *)(v28 + 8 * v25);
                  void *v30 = 0;
                  int v23 = v30 + 1;
                  while (v22 != v24)
                  {
                    uint64_t v31 = *((void *)v22 - 1);
                    v22 -= 8;
                    *--char v30 = v31;
                  }
                  *((void *)this + 1) = v30;
                  *((void *)this + 2) = v23;
                  *((void *)this + 3) = v28 + 8 * v29;
                  if (v24) {
                    operator delete(v24);
                  }
                }
                else
                {
                  *(void *)BOOL v22 = 0;
                  int v23 = v22 + 8;
                }
                *((void *)this + 2) = v23;
                unint64_t v32 = *((void *)a2 + 1);
                if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((void *)a2 + 2))
                {
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v23 - 1) = *(void *)(*(void *)a2 + v32);
                unint64_t v20 = *((void *)a2 + 2);
                unint64_t v19 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v19;
              }
              PB::Reader::recallMark();
            }
            else
            {
              char v39 = (char *)*((void *)this + 2);
              unint64_t v38 = *((void *)this + 3);
              if ((unint64_t)v39 >= v38)
              {
                unint64_t v41 = (char *)*((void *)this + 1);
                uint64_t v42 = (v39 - v41) >> 3;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 61) {
LABEL_84:
                }
                  sub_2570AFD0C();
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 2 > v43) {
                  unint64_t v43 = v44 >> 2;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C7528(v45);
                  unint64_t v41 = (char *)*((void *)this + 1);
                  char v39 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                unsigned int v47 = (void *)(v45 + 8 * v42);
                *unsigned int v47 = 0;
                unsigned int v40 = v47 + 1;
                while (v39 != v41)
                {
                  uint64_t v48 = *((void *)v39 - 1);
                  v39 -= 8;
                  *--unsigned int v47 = v48;
                }
                *((void *)this + 1) = v47;
                *((void *)this + 2) = v40;
                *((void *)this + 3) = v45 + 8 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(void *)char v39 = 0;
                unsigned int v40 = v39 + 8;
              }
              *((void *)this + 2) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((void *)a2 + 2))
              {
                *(v40 - 1) = *(void *)(*(void *)a2 + v49);
LABEL_79:
                *((void *)a2 + 1) += 8;
              }
              else
              {
LABEL_77:
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
              return v4 == 0;
            }
            continue;
          case 3u:
            *((unsigned char *)this + 52) |= 1u;
            unint64_t v33 = *((void *)a2 + 1);
            if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
              goto LABEL_77;
            }
            *((void *)this + 4) = *(void *)(*(void *)a2 + v33);
            goto LABEL_79;
          case 4u:
            *((unsigned char *)this + 52) |= 2u;
            unint64_t v34 = *((void *)a2 + 1);
            if (v34 >= *((void *)a2 + 2))
            {
              BOOL v37 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v35 = v34 + 1;
              int v36 = *(unsigned __int8 *)(*(void *)a2 + v34);
              *((void *)a2 + 1) = v35;
              BOOL v37 = v36 != 0;
            }
            *((unsigned char *)this + 48) = v37;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_23;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

double CMMsl::Pose::Pose(CMMsl::Pose *this)
{
  *(void *)this = &unk_2706440E8;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706440E8;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  char v8 = *(unsigned char *)(v3 + 52);
  if (v8)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
    char v8 = *(unsigned char *)(v3 + 52);
  }
  if ((v8 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::BioMotionAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  double v7 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  char v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    if (*(unsigned char *)(a1 + 52))
    {
      if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 52))
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 52) & 2) == 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      return result;
    }
    if ((*(unsigned char *)(a2 + 52) & 2) != 0 && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)) {
      return 1;
    }
  }
  return 0;
}

BOOL CMMsl::Pose::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  uint64_t v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  double v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 8;
  do
  {
    double v9 = *v7++;
    BOOL result = *(double *)(v8 - 8) == v9;
    BOOL v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::BioMotionAnchor::hash_value(CMMsl::BioMotionAnchor *this)
{
  unint64_t v2 = (CMMsl::Pose *)*((void *)this + 5);
  if (v2) {
    uint64_t v3 = CMMsl::Pose::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 52))
  {
    double v5 = *((double *)this + 4);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 52) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v6 = 0;
    return v4 ^ v3 ^ *(void *)&v5 ^ v6;
  }
  double v5 = 0.0;
  if ((*((unsigned char *)this + 52) & 2) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v6 = *((unsigned __int8 *)this + 48);
  return v4 ^ v3 ^ *(void *)&v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::makePose(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

void *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(void *this)
{
  *this = &unk_270640878;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640878;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose(CMMsl::BioMotionAnchorPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640878;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(void *this, const CMMsl::BioMotionAnchorPose *a2)
{
  *this = &unk_270640878;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::BioMotionAnchorPose *CMMsl::BioMotionAnchorPose::operator=(const CMMsl::BioMotionAnchorPose *a1, const CMMsl::BioMotionAnchorPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose((CMMsl::BioMotionAnchorPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionAnchorPose *a2, CMMsl::BioMotionAnchorPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(void *a1, uint64_t a2)
{
  *a1 = &unk_270640878;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640878;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640878;
    v6[1] = v4;
    CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose((CMMsl::BioMotionAnchorPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::formatText(CMMsl::BioMotionAnchorPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BioMotionAnchorPose::readFrom(CMMsl::BioMotionAnchorPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionAnchorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::BioMotionAnchorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionAnchor::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchorPose::hash_value(CMMsl::BioMotionAnchorPose *this)
{
  BOOL result = (CMMsl::BioMotionAnchor *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionAnchor *)CMMsl::BioMotionAnchor::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::BioMotionAnchorPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BioMotionClassification::BioMotionClassification(uint64_t this)
{
  *(void *)this = &unk_2706408B0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_2706408B0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BioMotionClassification::~BioMotionClassification(CMMsl::BioMotionClassification *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::BioMotionClassification::BioMotionClassification(CMMsl::BioMotionClassification *this, const CMMsl::BioMotionClassification *a2)
{
  *(void *)this = &unk_2706408B0;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) != 0)
  {
    double result = *((double *)a2 + 5);
    char v3 = 16;
    *((unsigned char *)this + 48) = 16;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 48) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 1);
      *((unsigned char *)this + 48) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 48) = v3;
  *((double *)this + 3) = result;
  if (*((unsigned char *)a2 + 48)) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification *a2)
{
  if ((const CMMsl::BioMotionClassification *)a1 != a2)
  {
    CMMsl::BioMotionClassification::BioMotionClassification((CMMsl::BioMotionClassification *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionClassification *a2, CMMsl::BioMotionClassification *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BioMotionClassification::BioMotionClassification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706408B0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706408B0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = &unk_2706408B0;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 24);
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(void *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    long long v11 = v6;
    long long v12 = v5;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionClassification::formatText(CMMsl::BioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "probabilityGenericMotion", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "probabilityHeadMotion", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "probabilityPedestrianMotion", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "probabilityTorsoMotion", *((double *)this + 4));
  if ((*((unsigned char *)this + 48) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BioMotionClassification::readFrom(CMMsl::BioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_40;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 48) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 2u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 3u:
        *((unsigned char *)this + 48) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 4u:
        *((unsigned char *)this + 48) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 5u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_39:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_40:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    if ((*(unsigned char *)(v3 + 48) & 1) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::BioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if (*(unsigned char *)(a1 + 48)) {
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::BioMotionClassification::hash_value(CMMsl::BioMotionClassification *this)
{
  if ((*((unsigned char *)this + 48) & 0x10) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_19:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 5);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  double v3 = *((double *)this + 4);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
LABEL_9:
    double v4 = *((double *)this + 3);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_12;
    }
LABEL_21:
    double v5 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
  }
LABEL_20:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
}

double CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  *(void *)this = &unk_2706408E8;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_2706408E8;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  *(void *)this = &unk_2706408E8;
  double v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::BioMotionLinkLengthFitParameters *CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  *(void *)this = &unk_2706408E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  double v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  double v5 = (void *)((char *)this + 56);
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((unsigned char *)a2 + 144) & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 15);
    *((unsigned char *)this + 144) = 4;
    *((void *)this + 15) = v6;
  }
  if (this != a2)
  {
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  char v7 = *((unsigned char *)a2 + 144);
  if (v7)
  {
    uint64_t v10 = *((void *)a2 + 13);
    *((unsigned char *)this + 144) |= 1u;
    *((void *)this + 13) = v10;
    char v7 = *((unsigned char *)a2 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_7:
      if ((v7 & 8) == 0) {
        goto LABEL_8;
      }
LABEL_13:
      uint64_t v12 = *((void *)a2 + 16);
      *((unsigned char *)this + 144) |= 8u;
      *((void *)this + 16) = v12;
      if ((*((unsigned char *)a2 + 144) & 0x10) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*((unsigned char *)a2 + 144) & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v11 = *((void *)a2 + 14);
  *((unsigned char *)this + 144) |= 2u;
  *((void *)this + 14) = v11;
  char v7 = *((unsigned char *)a2 + 144);
  if ((v7 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v7 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *((void *)a2 + 17);
    *((unsigned char *)this + 144) |= 0x10u;
    *((void *)this + 17) = v8;
  }
  return this;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionLinkLengthFitParameters *a2, CMMsl::BioMotionLinkLengthFitParameters *a3)
{
  int v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v9;
  uint64_t v10 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  uint64_t v17 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v17;
  uint64_t v18 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v18;
  uint64_t v19 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v19;
  double result = *((double *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((double *)a2 + 17) = result;
  return result;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706408E8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 80, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::formatText(CMMsl::BioMotionLinkLengthFitParameters *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "centerOfRotationEstVars", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "centerOfRotationEsts", v10);
  }
  uint64_t v11 = (double *)*((void *)this + 7);
  uint64_t v12 = (double *)*((void *)this + 8);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(a2, "linkLengthEstVars", v13);
  }
  uint64_t v14 = (double *)*((void *)this + 10);
  uint64_t v15 = (double *)*((void *)this + 11);
  while (v14 != v15)
  {
    double v16 = *v14++;
    PB::TextFormatter::format(a2, "linkLengthEsts", v16);
  }
  char v17 = *((unsigned char *)this + 144);
  if (v17)
  {
    PB::TextFormatter::format(a2, "positionResidualNormMean", *((double *)this + 13));
    char v17 = *((unsigned char *)this + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((*((unsigned char *)this + 144) & 2) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "positionResidualNormVar", *((double *)this + 14));
  char v17 = *((unsigned char *)this + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
  char v17 = *((unsigned char *)this + 144);
  if ((v17 & 8) == 0)
  {
LABEL_13:
    if ((v17 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "timestampBegin", *((double *)this + 16));
  if ((*((unsigned char *)this + 144) & 0x10) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 17));
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::readFrom(CMMsl::BioMotionLinkLengthFitParameters *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 144) |= 4u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_206;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v20);
          goto LABEL_208;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              BOOL v24 = (char *)*((void *)this + 5);
              unint64_t v23 = *((void *)this + 6);
              if ((unint64_t)v24 >= v23)
              {
                unint64_t v26 = (char *)*((void *)this + 4);
                uint64_t v27 = (v24 - v26) >> 3;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61) {
                  goto LABEL_216;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 2 > v28) {
                  unint64_t v28 = v29 >> 2;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C7528(v30);
                  unint64_t v26 = (char *)*((void *)this + 4);
                  BOOL v24 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                unint64_t v32 = (void *)(v30 + 8 * v27);
                *unint64_t v32 = 0;
                uint64_t v25 = v32 + 1;
                while (v24 != v26)
                {
                  uint64_t v33 = *((void *)v24 - 1);
                  v24 -= 8;
                  *--unint64_t v32 = v33;
                }
                *((void *)this + 4) = v32;
                *((void *)this + 5) = v25;
                *((void *)this + 6) = v30 + 8 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(void *)BOOL v24 = 0;
                uint64_t v25 = v24 + 8;
              }
              *((void *)this + 5) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2)) {
                goto LABEL_134;
              }
              *(v25 - 1) = *(void *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v21;
            }
            goto LABEL_135;
          }
          char v82 = (char *)*((void *)this + 5);
          unint64_t v81 = *((void *)this + 6);
          if ((unint64_t)v82 >= v81)
          {
            char v90 = (char *)*((void *)this + 4);
            uint64_t v91 = (v82 - v90) >> 3;
            unint64_t v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 61) {
              goto LABEL_216;
            }
            uint64_t v93 = v81 - (void)v90;
            if (v93 >> 2 > v92) {
              unint64_t v92 = v93 >> 2;
            }
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v92;
            }
            if (v94)
            {
              unint64_t v94 = (unint64_t)sub_2572C7528(v94);
              char v90 = (char *)*((void *)this + 4);
              char v82 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v95 = 0;
            }
            uint64_t v114 = (void *)(v94 + 8 * v91);
            *uint64_t v114 = 0;
            unsigned int v83 = v114 + 1;
            while (v82 != v90)
            {
              uint64_t v115 = *((void *)v82 - 1);
              v82 -= 8;
              *--uint64_t v114 = v115;
            }
            *((void *)this + 4) = v114;
            *((void *)this + 5) = v83;
            *((void *)this + 6) = v94 + 8 * v95;
            if (v90) {
              operator delete(v90);
            }
          }
          else
          {
            *(void *)char v82 = 0;
            unsigned int v83 = v82 + 8;
          }
          *((void *)this + 5) = v83;
          goto LABEL_204;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            while (v35 < v36 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v38 = (char *)*((void *)this + 11);
              unint64_t v37 = *((void *)this + 12);
              if ((unint64_t)v38 >= v37)
              {
                unsigned int v40 = (char *)*((void *)this + 10);
                uint64_t v41 = (v38 - v40) >> 3;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61) {
                  goto LABEL_216;
                }
                uint64_t v43 = v37 - (void)v40;
                if (v43 >> 2 > v42) {
                  unint64_t v42 = v43 >> 2;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C7528(v44);
                  unsigned int v40 = (char *)*((void *)this + 10);
                  unint64_t v38 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                uint64_t v46 = (void *)(v44 + 8 * v41);
                void *v46 = 0;
                char v39 = v46 + 1;
                while (v38 != v40)
                {
                  uint64_t v47 = *((void *)v38 - 1);
                  v38 -= 8;
                  *--uint64_t v46 = v47;
                }
                *((void *)this + 10) = v46;
                *((void *)this + 11) = v39;
                *((void *)this + 12) = v44 + 8 * v45;
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(void *)unint64_t v38 = 0;
                char v39 = v38 + 8;
              }
              *((void *)this + 11) = v39;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)a2 + 2)) {
                goto LABEL_134;
              }
              *(v39 - 1) = *(void *)(*(void *)a2 + v48);
              unint64_t v36 = *((void *)a2 + 2);
              unint64_t v35 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v35;
            }
            goto LABEL_135;
          }
          unint64_t v85 = (char *)*((void *)this + 11);
          unint64_t v84 = *((void *)this + 12);
          if ((unint64_t)v85 >= v84)
          {
            unint64_t v96 = (char *)*((void *)this + 10);
            uint64_t v97 = (v85 - v96) >> 3;
            unint64_t v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 61) {
              goto LABEL_216;
            }
            uint64_t v99 = v84 - (void)v96;
            if (v99 >> 2 > v98) {
              unint64_t v98 = v99 >> 2;
            }
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v98;
            }
            if (v100)
            {
              unint64_t v100 = (unint64_t)sub_2572C7528(v100);
              unint64_t v96 = (char *)*((void *)this + 10);
              unint64_t v85 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v101 = 0;
            }
            char v116 = (void *)(v100 + 8 * v97);
            *char v116 = 0;
            unsigned int v83 = v116 + 1;
            while (v85 != v96)
            {
              uint64_t v117 = *((void *)v85 - 1);
              v85 -= 8;
              *--char v116 = v117;
            }
            *((void *)this + 10) = v116;
            *((void *)this + 11) = v83;
            *((void *)this + 12) = v100 + 8 * v101;
            if (v96) {
              operator delete(v96);
            }
          }
          else
          {
            *(void *)unint64_t v85 = 0;
            unsigned int v83 = v85 + 8;
          }
          *((void *)this + 11) = v83;
          goto LABEL_204;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v49 = *((void *)a2 + 1);
            unint64_t v50 = *((void *)a2 + 2);
            while (v49 < v50 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v52 = (char *)*((void *)this + 2);
              unint64_t v51 = *((void *)this + 3);
              if ((unint64_t)v52 >= v51)
              {
                char v54 = (char *)*((void *)this + 1);
                uint64_t v55 = (v52 - v54) >> 3;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61) {
                  goto LABEL_216;
                }
                uint64_t v57 = v51 - (void)v54;
                if (v57 >> 2 > v56) {
                  unint64_t v56 = v57 >> 2;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  unint64_t v58 = (unint64_t)sub_2572C7528(v58);
                  char v54 = (char *)*((void *)this + 1);
                  unint64_t v52 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v59 = 0;
                }
                unint64_t v60 = (void *)(v58 + 8 * v55);
                *unint64_t v60 = 0;
                char v53 = v60 + 1;
                while (v52 != v54)
                {
                  uint64_t v61 = *((void *)v52 - 1);
                  v52 -= 8;
                  *--unint64_t v60 = v61;
                }
                *((void *)this + 1) = v60;
                *((void *)this + 2) = v53;
                *((void *)this + 3) = v58 + 8 * v59;
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(void *)unint64_t v52 = 0;
                char v53 = v52 + 8;
              }
              *((void *)this + 2) = v53;
              unint64_t v62 = *((void *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((void *)a2 + 2)) {
                goto LABEL_134;
              }
              *(v53 - 1) = *(void *)(*(void *)a2 + v62);
              unint64_t v50 = *((void *)a2 + 2);
              unint64_t v49 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v49;
            }
            goto LABEL_135;
          }
          unint64_t v87 = (char *)*((void *)this + 2);
          unint64_t v86 = *((void *)this + 3);
          if ((unint64_t)v87 >= v86)
          {
            unint64_t v102 = (char *)*((void *)this + 1);
            uint64_t v103 = (v87 - v102) >> 3;
            unint64_t v104 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 61) {
              goto LABEL_216;
            }
            uint64_t v105 = v86 - (void)v102;
            if (v105 >> 2 > v104) {
              unint64_t v104 = v105 >> 2;
            }
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v104;
            }
            if (v106)
            {
              unint64_t v106 = (unint64_t)sub_2572C7528(v106);
              unint64_t v102 = (char *)*((void *)this + 1);
              unint64_t v87 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v107 = 0;
            }
            unsigned int v118 = (void *)(v106 + 8 * v103);
            void *v118 = 0;
            unsigned int v83 = v118 + 1;
            while (v87 != v102)
            {
              uint64_t v119 = *((void *)v87 - 1);
              v87 -= 8;
              *--unsigned int v118 = v119;
            }
            *((void *)this + 1) = v118;
            *((void *)this + 2) = v83;
            *((void *)this + 3) = v106 + 8 * v107;
            if (v102) {
              operator delete(v102);
            }
          }
          else
          {
            *(void *)unint64_t v87 = 0;
            unsigned int v83 = v87 + 8;
          }
          *((void *)this + 2) = v83;
          goto LABEL_204;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v63 = *((void *)a2 + 1);
            unint64_t v64 = *((void *)a2 + 2);
            while (v63 < v64 && !*((unsigned char *)a2 + 24))
            {
              char v66 = (char *)*((void *)this + 8);
              unint64_t v65 = *((void *)this + 9);
              if ((unint64_t)v66 >= v65)
              {
                unint64_t v68 = (char *)*((void *)this + 7);
                uint64_t v69 = (v66 - v68) >> 3;
                unint64_t v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 61) {
                  goto LABEL_216;
                }
                uint64_t v71 = v65 - (void)v68;
                if (v71 >> 2 > v70) {
                  unint64_t v70 = v71 >> 2;
                }
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72)
                {
                  unint64_t v72 = (unint64_t)sub_2572C7528(v72);
                  unint64_t v68 = (char *)*((void *)this + 7);
                  char v66 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                unint64_t v74 = (void *)(v72 + 8 * v69);
                *unint64_t v74 = 0;
                unsigned int v67 = v74 + 1;
                while (v66 != v68)
                {
                  uint64_t v75 = *((void *)v66 - 1);
                  v66 -= 8;
                  *--unint64_t v74 = v75;
                }
                *((void *)this + 7) = v74;
                *((void *)this + 8) = v67;
                *((void *)this + 9) = v72 + 8 * v73;
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                *(void *)char v66 = 0;
                unsigned int v67 = v66 + 8;
              }
              *((void *)this + 8) = v67;
              unint64_t v76 = *((void *)a2 + 1);
              if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)a2 + 2))
              {
LABEL_134:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v67 - 1) = *(void *)(*(void *)a2 + v76);
              unint64_t v64 = *((void *)a2 + 2);
              unint64_t v63 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v63;
            }
LABEL_135:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v89 = (char *)*((void *)this + 8);
            unint64_t v88 = *((void *)this + 9);
            if ((unint64_t)v89 >= v88)
            {
              unint64_t v108 = (char *)*((void *)this + 7);
              uint64_t v109 = (v89 - v108) >> 3;
              unint64_t v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61) {
LABEL_216:
              }
                sub_2570AFD0C();
              uint64_t v111 = v88 - (void)v108;
              if (v111 >> 2 > v110) {
                unint64_t v110 = v111 >> 2;
              }
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v110;
              }
              if (v112)
              {
                unint64_t v112 = (unint64_t)sub_2572C7528(v112);
                unint64_t v108 = (char *)*((void *)this + 7);
                uint64_t v89 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v113 = 0;
              }
              unint64_t v120 = (void *)(v112 + 8 * v109);
              *unint64_t v120 = 0;
              unsigned int v83 = v120 + 1;
              while (v89 != v108)
              {
                uint64_t v121 = *((void *)v89 - 1);
                v89 -= 8;
                *--unint64_t v120 = v121;
              }
              *((void *)this + 7) = v120;
              *((void *)this + 8) = v83;
              *((void *)this + 9) = v112 + 8 * v113;
              if (v108) {
                operator delete(v108);
              }
            }
            else
            {
              *(void *)uint64_t v89 = 0;
              unsigned int v83 = v89 + 8;
            }
            *((void *)this + 8) = v83;
LABEL_204:
            unint64_t v122 = *((void *)a2 + 1);
            if (v122 <= 0xFFFFFFFFFFFFFFF7 && v122 + 8 <= *((void *)a2 + 2))
            {
              *(v83 - 1) = *(void *)(*(void *)a2 + v122);
LABEL_208:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_206:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 6u:
          *((unsigned char *)this + 144) |= 1u;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((void *)a2 + 2)) {
            goto LABEL_206;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v77);
          goto LABEL_208;
        case 7u:
          *((unsigned char *)this + 144) |= 2u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)a2 + 2)) {
            goto LABEL_206;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v78);
          goto LABEL_208;
        case 8u:
          *((unsigned char *)this + 144) |= 8u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((void *)a2 + 2)) {
            goto LABEL_206;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v79);
          goto LABEL_208;
        case 9u:
          *((unsigned char *)this + 144) |= 0x10u;
          unint64_t v80 = *((void *)a2 + 1);
          if (v80 > 0xFFFFFFFFFFFFFFF7 || v80 + 8 > *((void *)a2 + 2)) {
            goto LABEL_206;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v80);
          goto LABEL_208;
        default:
          goto LABEL_19;
      }
      goto LABEL_209;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_209:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 144) & 4) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 120));
  }
  int v4 = *(double **)(v3 + 32);
  uint64_t v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = *(double **)(v3 + 80);
  uint64_t v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(double **)(v3 + 8);
  unint64_t v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(double **)(v3 + 56);
  BOOL v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    double v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  char v16 = *(unsigned char *)(v3 + 144);
  if (v16)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 104));
    char v16 = *(unsigned char *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0) {
        goto LABEL_18;
      }
LABEL_22:
      this = PB::Writer::write(a2, *(double *)(v3 + 128));
      if ((*(unsigned char *)(v3 + 144) & 0x10) == 0) {
        return this;
      }
      goto LABEL_23;
    }
  }
  else if ((*(unsigned char *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  char v16 = *(unsigned char *)(v3 + 144);
  if ((v16 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  if ((v16 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  double v17 = *(double *)(v3 + 136);
  return PB::Writer::write(a2, v17);
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 144) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 4) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 32);
  unint64_t v2 = *(double **)(a1 + 40);
  int v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 80);
  uint64_t v5 = *(double **)(a1 + 88);
  double v7 = *(double **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 88) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  double v9 = *(double **)(a1 + 8);
  uint64_t v8 = *(double **)(a1 + 16);
  unsigned int v10 = *(double **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 16) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  double v12 = *(double **)(a1 + 56);
  unint64_t v11 = *(double **)(a1 + 64);
  char v13 = *(double **)(a2 + 56);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 64) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  if (*(unsigned char *)(a1 + 144))
  {
    if ((*(unsigned char *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 144) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 144) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 8) != 0)
  {
    return 0;
  }
  BOOL v14 = (*(unsigned char *)(a2 + 144) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 144) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 144) & 0x10) != 0 && *(double *)(a1 + 136) == *(double *)(a2 + 136);
  }
  return v14;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::hash_value(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  if ((*((unsigned char *)this + 144) & 4) != 0)
  {
    if (*((double *)this + 15) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 15);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 144) & 1) == 0)
  {
    double v7 = 0.0;
    if ((*((unsigned char *)this + 144) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_20:
    double v8 = 0.0;
    if ((*((unsigned char *)this + 144) & 8) != 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  double v7 = *((double *)this + 13);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((unsigned char *)this + 144) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_8:
  double v8 = *((double *)this + 14);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((unsigned char *)this + 144) & 8) != 0)
  {
LABEL_11:
    double v9 = *((double *)this + 16);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((*((unsigned char *)this + 144) & 0x10) != 0) {
      goto LABEL_14;
    }
LABEL_22:
    double v10 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
  }
LABEL_21:
  double v9 = 0.0;
  if ((*((unsigned char *)this + 144) & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_14:
  double v10 = *((double *)this + 17);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this)
{
  *(void *)this = &unk_270640920;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640920;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BioMotionOnlineLinkLengthUpdate::~BioMotionOnlineLinkLengthUpdate(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  *(void *)this = &unk_270640920;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(this + 20) = v3;
    *(unsigned char *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    char v7 = *((unsigned char *)a2 + 18);
    *(unsigned char *)(this + 20) = v3 | 8;
    *(unsigned char *)(this + 18) = v7;
    return this;
  }
  char v6 = *((unsigned char *)a2 + 17);
  v3 |= 4u;
  *(unsigned char *)(this + 20) = v3;
  *(unsigned char *)(this + 17) = v6;
  if ((*((unsigned char *)a2 + 20) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  if ((const CMMsl::BioMotionOnlineLinkLengthUpdate *)a1 != a2)
  {
    CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    __int16 v8 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 18);
    *(unsigned char *)(a1 + 18) = v9;
    char v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionOnlineLinkLengthUpdate *a2, CMMsl::BioMotionOnlineLinkLengthUpdate *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 17);
  *((unsigned char *)this + 17) = *((unsigned char *)a2 + 17);
  *((unsigned char *)a2 + 17) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 18);
  *((unsigned char *)this + 18) = *((unsigned char *)a2 + 18);
  *((unsigned char *)a2 + 18) = v3;
  return result;
}

double CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640920;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640920;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return result;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = &unk_270640920;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v5 = *(_WORD *)(a2 + 16);
    char v6 = *(unsigned char *)(a2 + 18);
    int v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v13 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v8;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v5;
    __int16 v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 18);
    *(unsigned char *)(a1 + 18) = v6;
    char v12 = v3;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::formatText(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "updatedLinkLengthX");
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "updatedLinkLengthY");
  if ((*((unsigned char *)this + 20) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "updatedLinkLengthZ");
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::readFrom(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
LABEL_21:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) != 4)
    {
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 20) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_21;
        case 2u:
          *((unsigned char *)this + 20) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *((unsigned char *)this + 16) = v21;
          goto LABEL_21;
        case 3u:
          *((unsigned char *)this + 20) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v23 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v23 = v22 != 0;
          }
          *((unsigned char *)this + 17) = v23;
          goto LABEL_21;
        case 4u:
          *((unsigned char *)this + 20) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v25 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v25 = v24 != 0;
          }
          *((unsigned char *)this + 18) = v25;
          goto LABEL_21;
        default:
          goto LABEL_19;
      }
    }
    int v4 = 0;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2);
      if ((*(unsigned char *)(v3 + 20) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::write(a2);
}

BOOL CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 8) == 0;
  if ((*(unsigned char *)(a1 + 20) & 8) != 0) {
    return (*(unsigned char *)(a2 + 20) & 8) != 0 && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18);
  }
  return v2;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 16);
      if ((*((unsigned char *)this + 20) & 4) != 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 20) & 8) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      uint64_t v4 = 0;
      return v2 ^ *(void *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 17);
  if ((*((unsigned char *)this + 20) & 8) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v4 = *((unsigned __int8 *)this + 18);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4;
}

double CMMsl::BioMotionPose::BioMotionPose(CMMsl::BioMotionPose *this)
{
  *(void *)this = &unk_270640958;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640958;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

void CMMsl::BioMotionPose::~BioMotionPose(CMMsl::BioMotionPose *this)
{
  *(void *)this = &unk_270640958;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionPose::~BioMotionPose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::BioMotionPose *CMMsl::BioMotionPose::BioMotionPose(char **this, char **a2)
{
  *this = (char *)&unk_270640958;
  *(_OWORD *)(this + 1) = 0u;
  uint64_t v4 = this + 1;
  *(_OWORD *)(this + 7) = 0u;
  *(_OWORD *)(this + 13) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  this[15] = 0;
  if (this != a2)
  {
    sub_2572C73EC(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2572C73EC(this + 7, a2[7], a2[8], (a2[8] - a2[7]) >> 3);
    sub_2572C73EC(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
    sub_2572C73EC(this + 10, a2[10], a2[11], (a2[11] - a2[10]) >> 3);
    sub_2572C73EC(this + 13, a2[13], a2[14], (a2[14] - a2[13]) >> 3);
  }
  char v5 = *((unsigned char *)a2 + 144);
  if ((v5 & 4) == 0)
  {
    if (((_BYTE)a2[18] & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    char v9 = a2[16];
    *((unsigned char *)this + 144) |= 1u;
    this[16] = v9;
    if (((_BYTE)a2[18] & 2) == 0) {
      return (CMMsl::BioMotionPose *)this;
    }
    goto LABEL_6;
  }
  int v8 = *((_DWORD *)a2 + 35);
  *((unsigned char *)this + 144) |= 4u;
  *((_DWORD *)this + 35) = v8;
  char v5 = *((unsigned char *)a2 + 144);
  if (v5) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v5 & 2) != 0)
  {
LABEL_6:
    int v6 = *((_DWORD *)a2 + 34);
    *((unsigned char *)this + 144) |= 2u;
    *((_DWORD *)this + 34) = v6;
  }
  return (CMMsl::BioMotionPose *)this;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, char **a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionPose::BioMotionPose(v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPose *a2, CMMsl::BioMotionPose *a3)
{
  int v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v12;
  uint64_t v13 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v13;
  uint64_t v14 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v14;
  uint64_t v15 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v15;
  uint64_t v16 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v16;
  uint64_t v17 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v18 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v18;
  LODWORD(v18) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  double result = *((double *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((double *)a2 + 16) = result;
  LODWORD(v18) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v18;
  return result;
}

uint64_t CMMsl::BioMotionPose::BioMotionPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640958;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v7 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v7, (__n128 *)(a2 + 56));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 80));
  sub_2572C7560(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionPose::BioMotionPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPose::formatText(CMMsl::BioMotionPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  if ((*((unsigned char *)this + 144) & 2) != 0) {
    PB::TextFormatter::format(a2, "modelType");
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "rotationRate", v10);
  }
  char v11 = *((unsigned char *)this + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "status");
    char v11 = *((unsigned char *)this + 144);
  }
  if (v11) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "translation", v14);
  }
  uint64_t v15 = (double *)*((void *)this + 10);
  uint64_t v16 = (double *)*((void *)this + 11);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(a2, "userAcceleration", v17);
  }
  uint64_t v18 = (double *)*((void *)this + 13);
  int v19 = (double *)*((void *)this + 14);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(a2, "velocity", v20);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::BioMotionPose::readFrom(CMMsl::BioMotionPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v20 = *((void *)a2 + 1);
            unint64_t v21 = *((void *)a2 + 2);
            while (v20 < v21 && !*((unsigned char *)a2 + 24))
            {
              BOOL v23 = (char *)*((void *)this + 2);
              unint64_t v22 = *((void *)this + 3);
              if ((unint64_t)v23 >= v22)
              {
                BOOL v25 = (char *)*((void *)this + 1);
                uint64_t v26 = (v23 - v25) >> 3;
                unint64_t v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 61) {
                  goto LABEL_283;
                }
                uint64_t v28 = v22 - (void)v25;
                if (v28 >> 2 > v27) {
                  unint64_t v27 = v28 >> 2;
                }
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v29 = v27;
                }
                if (v29)
                {
                  unint64_t v29 = (unint64_t)sub_2572C7528(v29);
                  BOOL v25 = (char *)*((void *)this + 1);
                  BOOL v23 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v30 = 0;
                }
                uint64_t v31 = (void *)(v29 + 8 * v26);
                void *v31 = 0;
                int v24 = v31 + 1;
                while (v23 != v25)
                {
                  uint64_t v32 = *((void *)v23 - 1);
                  v23 -= 8;
                  *--uint64_t v31 = v32;
                }
                *((void *)this + 1) = v31;
                *((void *)this + 2) = v24;
                *((void *)this + 3) = v29 + 8 * v30;
                if (v25) {
                  operator delete(v25);
                }
              }
              else
              {
                *(void *)BOOL v23 = 0;
                int v24 = v23 + 8;
              }
              *((void *)this + 2) = v24;
              unint64_t v33 = *((void *)a2 + 1);
              if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
                goto LABEL_160;
              }
              *(v24 - 1) = *(void *)(*(void *)a2 + v33);
              unint64_t v21 = *((void *)a2 + 2);
              unint64_t v20 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v20;
            }
            goto LABEL_161;
          }
          unint64_t v108 = (char *)*((void *)this + 2);
          unint64_t v107 = *((void *)this + 3);
          if ((unint64_t)v108 >= v107)
          {
            char v126 = (char *)*((void *)this + 1);
            uint64_t v127 = (v108 - v126) >> 3;
            unint64_t v128 = v127 + 1;
            if ((unint64_t)(v127 + 1) >> 61) {
              goto LABEL_283;
            }
            uint64_t v129 = v107 - (void)v126;
            if (v129 >> 2 > v128) {
              unint64_t v128 = v129 >> 2;
            }
            if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v130 = v128;
            }
            if (v130)
            {
              unint64_t v130 = (unint64_t)sub_2572C7528(v130);
              char v126 = (char *)*((void *)this + 1);
              unint64_t v108 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v131 = 0;
            }
            unint64_t v156 = (void *)(v130 + 8 * v127);
            *unint64_t v156 = 0;
            uint64_t v109 = v156 + 1;
            while (v108 != v126)
            {
              uint64_t v157 = *((void *)v108 - 1);
              v108 -= 8;
              *--unint64_t v156 = v157;
            }
            *((void *)this + 1) = v156;
            *((void *)this + 2) = v109;
            *((void *)this + 3) = v130 + 8 * v131;
            if (v126) {
              operator delete(v126);
            }
          }
          else
          {
            *(void *)unint64_t v108 = 0;
            uint64_t v109 = v108 + 8;
          }
          *((void *)this + 2) = v109;
          goto LABEL_269;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v34 = *((void *)a2 + 1);
            unint64_t v35 = *((void *)a2 + 2);
            while (v34 < v35 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v37 = (char *)*((void *)this + 8);
              unint64_t v36 = *((void *)this + 9);
              if ((unint64_t)v37 >= v36)
              {
                char v39 = (char *)*((void *)this + 7);
                uint64_t v40 = (v37 - v39) >> 3;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 61) {
                  goto LABEL_283;
                }
                uint64_t v42 = v36 - (void)v39;
                if (v42 >> 2 > v41) {
                  unint64_t v41 = v42 >> 2;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  unint64_t v43 = (unint64_t)sub_2572C7528(v43);
                  char v39 = (char *)*((void *)this + 7);
                  unint64_t v37 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v44 = 0;
                }
                uint64_t v45 = (void *)(v43 + 8 * v40);
                *uint64_t v45 = 0;
                unint64_t v38 = v45 + 1;
                while (v37 != v39)
                {
                  uint64_t v46 = *((void *)v37 - 1);
                  v37 -= 8;
                  *--uint64_t v45 = v46;
                }
                *((void *)this + 7) = v45;
                *((void *)this + 8) = v38;
                *((void *)this + 9) = v43 + 8 * v44;
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                *(void *)unint64_t v37 = 0;
                unint64_t v38 = v37 + 8;
              }
              *((void *)this + 8) = v38;
              unint64_t v47 = *((void *)a2 + 1);
              if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((void *)a2 + 2)) {
                goto LABEL_160;
              }
              *(v38 - 1) = *(void *)(*(void *)a2 + v47);
              unint64_t v35 = *((void *)a2 + 2);
              unint64_t v34 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v34;
            }
            goto LABEL_161;
          }
          uint64_t v111 = (char *)*((void *)this + 8);
          unint64_t v110 = *((void *)this + 9);
          if ((unint64_t)v111 >= v110)
          {
            unint64_t v132 = (char *)*((void *)this + 7);
            uint64_t v133 = (v111 - v132) >> 3;
            unint64_t v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 61) {
              goto LABEL_283;
            }
            uint64_t v135 = v110 - (void)v132;
            if (v135 >> 2 > v134) {
              unint64_t v134 = v135 >> 2;
            }
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v136 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v136 = v134;
            }
            if (v136)
            {
              unint64_t v136 = (unint64_t)sub_2572C7528(v136);
              unint64_t v132 = (char *)*((void *)this + 7);
              uint64_t v111 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v137 = 0;
            }
            unint64_t v158 = (void *)(v136 + 8 * v133);
            *unint64_t v158 = 0;
            uint64_t v109 = v158 + 1;
            while (v111 != v132)
            {
              uint64_t v159 = *((void *)v111 - 1);
              v111 -= 8;
              *--unint64_t v158 = v159;
            }
            *((void *)this + 7) = v158;
            *((void *)this + 8) = v109;
            *((void *)this + 9) = v136 + 8 * v137;
            if (v132) {
              operator delete(v132);
            }
          }
          else
          {
            *(void *)uint64_t v111 = 0;
            uint64_t v109 = v111 + 8;
          }
          *((void *)this + 8) = v109;
          goto LABEL_269;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v48 = *((void *)a2 + 1);
            unint64_t v49 = *((void *)a2 + 2);
            while (v48 < v49 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v51 = (char *)*((void *)this + 5);
              unint64_t v50 = *((void *)this + 6);
              if ((unint64_t)v51 >= v50)
              {
                char v53 = (char *)*((void *)this + 4);
                uint64_t v54 = (v51 - v53) >> 3;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 61) {
                  goto LABEL_283;
                }
                uint64_t v56 = v50 - (void)v53;
                if (v56 >> 2 > v55) {
                  unint64_t v55 = v56 >> 2;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v57 = v55;
                }
                if (v57)
                {
                  unint64_t v57 = (unint64_t)sub_2572C7528(v57);
                  char v53 = (char *)*((void *)this + 4);
                  unint64_t v51 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v58 = 0;
                }
                uint64_t v59 = (void *)(v57 + 8 * v54);
                *uint64_t v59 = 0;
                unint64_t v52 = v59 + 1;
                while (v51 != v53)
                {
                  uint64_t v60 = *((void *)v51 - 1);
                  v51 -= 8;
                  *--uint64_t v59 = v60;
                }
                *((void *)this + 4) = v59;
                *((void *)this + 5) = v52;
                *((void *)this + 6) = v57 + 8 * v58;
                if (v53) {
                  operator delete(v53);
                }
              }
              else
              {
                *(void *)unint64_t v51 = 0;
                unint64_t v52 = v51 + 8;
              }
              *((void *)this + 5) = v52;
              unint64_t v61 = *((void *)a2 + 1);
              if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)a2 + 2)) {
                goto LABEL_160;
              }
              *(v52 - 1) = *(void *)(*(void *)a2 + v61);
              unint64_t v49 = *((void *)a2 + 2);
              unint64_t v48 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v48;
            }
            goto LABEL_161;
          }
          uint64_t v113 = (char *)*((void *)this + 5);
          unint64_t v112 = *((void *)this + 6);
          if ((unint64_t)v113 >= v112)
          {
            unint64_t v138 = (char *)*((void *)this + 4);
            uint64_t v139 = (v113 - v138) >> 3;
            unint64_t v140 = v139 + 1;
            if ((unint64_t)(v139 + 1) >> 61) {
              goto LABEL_283;
            }
            uint64_t v141 = v112 - (void)v138;
            if (v141 >> 2 > v140) {
              unint64_t v140 = v141 >> 2;
            }
            if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v142 = v140;
            }
            if (v142)
            {
              unint64_t v142 = (unint64_t)sub_2572C7528(v142);
              unint64_t v138 = (char *)*((void *)this + 4);
              uint64_t v113 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v143 = 0;
            }
            unint64_t v160 = (void *)(v142 + 8 * v139);
            *unint64_t v160 = 0;
            uint64_t v109 = v160 + 1;
            while (v113 != v138)
            {
              uint64_t v161 = *((void *)v113 - 1);
              v113 -= 8;
              *--unint64_t v160 = v161;
            }
            *((void *)this + 4) = v160;
            *((void *)this + 5) = v109;
            *((void *)this + 6) = v142 + 8 * v143;
            if (v138) {
              operator delete(v138);
            }
          }
          else
          {
            *(void *)uint64_t v113 = 0;
            uint64_t v109 = v113 + 8;
          }
          *((void *)this + 5) = v109;
          goto LABEL_269;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v62 = *((void *)a2 + 1);
            unint64_t v63 = *((void *)a2 + 2);
            while (v62 < v63 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v65 = (char *)*((void *)this + 11);
              unint64_t v64 = *((void *)this + 12);
              if ((unint64_t)v65 >= v64)
              {
                unsigned int v67 = (char *)*((void *)this + 10);
                uint64_t v68 = (v65 - v67) >> 3;
                unint64_t v69 = v68 + 1;
                if ((unint64_t)(v68 + 1) >> 61) {
                  goto LABEL_283;
                }
                uint64_t v70 = v64 - (void)v67;
                if (v70 >> 2 > v69) {
                  unint64_t v69 = v70 >> 2;
                }
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v71 = v69;
                }
                if (v71)
                {
                  unint64_t v71 = (unint64_t)sub_2572C7528(v71);
                  unsigned int v67 = (char *)*((void *)this + 10);
                  unint64_t v65 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v72 = 0;
                }
                uint64_t v73 = (void *)(v71 + 8 * v68);
                *uint64_t v73 = 0;
                char v66 = v73 + 1;
                while (v65 != v67)
                {
                  uint64_t v74 = *((void *)v65 - 1);
                  v65 -= 8;
                  *--uint64_t v73 = v74;
                }
                *((void *)this + 10) = v73;
                *((void *)this + 11) = v66;
                *((void *)this + 12) = v71 + 8 * v72;
                if (v67) {
                  operator delete(v67);
                }
              }
              else
              {
                *(void *)unint64_t v65 = 0;
                char v66 = v65 + 8;
              }
              *((void *)this + 11) = v66;
              unint64_t v75 = *((void *)a2 + 1);
              if (v75 > 0xFFFFFFFFFFFFFFF7 || v75 + 8 > *((void *)a2 + 2)) {
                goto LABEL_160;
              }
              *(v66 - 1) = *(void *)(*(void *)a2 + v75);
              unint64_t v63 = *((void *)a2 + 2);
              unint64_t v62 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v62;
            }
            goto LABEL_161;
          }
          uint64_t v115 = (char *)*((void *)this + 11);
          unint64_t v114 = *((void *)this + 12);
          if ((unint64_t)v115 >= v114)
          {
            unint64_t v144 = (char *)*((void *)this + 10);
            uint64_t v145 = (v115 - v144) >> 3;
            unint64_t v146 = v145 + 1;
            if ((unint64_t)(v145 + 1) >> 61) {
              goto LABEL_283;
            }
            uint64_t v147 = v114 - (void)v144;
            if (v147 >> 2 > v146) {
              unint64_t v146 = v147 >> 2;
            }
            if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v148 = v146;
            }
            if (v148)
            {
              unint64_t v148 = (unint64_t)sub_2572C7528(v148);
              unint64_t v144 = (char *)*((void *)this + 10);
              uint64_t v115 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v149 = 0;
            }
            unint64_t v162 = (void *)(v148 + 8 * v145);
            *unint64_t v162 = 0;
            uint64_t v109 = v162 + 1;
            while (v115 != v144)
            {
              uint64_t v163 = *((void *)v115 - 1);
              v115 -= 8;
              *--unint64_t v162 = v163;
            }
            *((void *)this + 10) = v162;
            *((void *)this + 11) = v109;
            *((void *)this + 12) = v148 + 8 * v149;
            if (v144) {
              operator delete(v144);
            }
          }
          else
          {
            *(void *)uint64_t v115 = 0;
            uint64_t v109 = v115 + 8;
          }
          *((void *)this + 11) = v109;
          goto LABEL_269;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v76 = *((void *)a2 + 1);
            unint64_t v77 = *((void *)a2 + 2);
            while (v76 < v77 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v79 = (char *)*((void *)this + 14);
              unint64_t v78 = *((void *)this + 15);
              if ((unint64_t)v79 >= v78)
              {
                unint64_t v81 = (char *)*((void *)this + 13);
                uint64_t v82 = (v79 - v81) >> 3;
                unint64_t v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 61) {
                  goto LABEL_283;
                }
                uint64_t v84 = v78 - (void)v81;
                if (v84 >> 2 > v83) {
                  unint64_t v83 = v84 >> 2;
                }
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v83;
                }
                if (v85)
                {
                  unint64_t v85 = (unint64_t)sub_2572C7528(v85);
                  unint64_t v81 = (char *)*((void *)this + 13);
                  unint64_t v79 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v86 = 0;
                }
                unint64_t v87 = (void *)(v85 + 8 * v82);
                *unint64_t v87 = 0;
                unint64_t v80 = v87 + 1;
                while (v79 != v81)
                {
                  uint64_t v88 = *((void *)v79 - 1);
                  v79 -= 8;
                  *--unint64_t v87 = v88;
                }
                *((void *)this + 13) = v87;
                *((void *)this + 14) = v80;
                *((void *)this + 15) = v85 + 8 * v86;
                if (v81) {
                  operator delete(v81);
                }
              }
              else
              {
                *(void *)unint64_t v79 = 0;
                unint64_t v80 = v79 + 8;
              }
              *((void *)this + 14) = v80;
              unint64_t v89 = *((void *)a2 + 1);
              if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((void *)a2 + 2))
              {
LABEL_160:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v80 - 1) = *(void *)(*(void *)a2 + v89);
              unint64_t v77 = *((void *)a2 + 2);
              unint64_t v76 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v76;
            }
LABEL_161:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v117 = (char *)*((void *)this + 14);
            unint64_t v116 = *((void *)this + 15);
            if ((unint64_t)v117 >= v116)
            {
              unint64_t v150 = (char *)*((void *)this + 13);
              uint64_t v151 = (v117 - v150) >> 3;
              unint64_t v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 61) {
LABEL_283:
              }
                sub_2570AFD0C();
              uint64_t v153 = v116 - (void)v150;
              if (v153 >> 2 > v152) {
                unint64_t v152 = v153 >> 2;
              }
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v152;
              }
              if (v154)
              {
                unint64_t v154 = (unint64_t)sub_2572C7528(v154);
                unint64_t v150 = (char *)*((void *)this + 13);
                uint64_t v117 = (char *)*((void *)this + 14);
              }
              else
              {
                uint64_t v155 = 0;
              }
              unint64_t v164 = (void *)(v154 + 8 * v151);
              *unint64_t v164 = 0;
              uint64_t v109 = v164 + 1;
              while (v117 != v150)
              {
                uint64_t v165 = *((void *)v117 - 1);
                v117 -= 8;
                *--unint64_t v164 = v165;
              }
              *((void *)this + 13) = v164;
              *((void *)this + 14) = v109;
              *((void *)this + 15) = v154 + 8 * v155;
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(void *)uint64_t v117 = 0;
              uint64_t v109 = v117 + 8;
            }
            *((void *)this + 14) = v109;
LABEL_269:
            unint64_t v166 = *((void *)a2 + 1);
            if (v166 <= 0xFFFFFFFFFFFFFFF7 && v166 + 8 <= *((void *)a2 + 2))
            {
              *(v109 - 1) = *(void *)(*(void *)a2 + v166);
LABEL_273:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_271:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 6u:
          *((unsigned char *)this + 144) |= 4u;
          unint64_t v90 = *((void *)a2 + 1);
          unint64_t v91 = *((void *)a2 + 2);
          uint64_t v92 = *(void *)a2;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 0;
            do
            {
              unint64_t v96 = v90 + 1;
              *((void *)a2 + 1) = v90 + 1;
              char v97 = *(unsigned char *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0) {
                goto LABEL_230;
              }
              v93 += 7;
              unint64_t v90 = v96;
              BOOL v14 = v94++ > 8;
            }
            while (!v14);
LABEL_178:
            LODWORD(v95) = 0;
            goto LABEL_230;
          }
          char v118 = 0;
          unsigned int v119 = 0;
          uint64_t v95 = 0;
          if (v91 <= v90) {
            unint64_t v91 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v120 = v90 + 1;
              char v121 = *(unsigned char *)(v92 + v90);
              *((void *)a2 + 1) = v120;
              v95 |= (unint64_t)(v121 & 0x7F) << v118;
              if (v121 < 0)
              {
                v118 += 7;
                unint64_t v90 = v120;
                BOOL v14 = v119++ > 8;
                if (v14) {
                  goto LABEL_178;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v95) = 0;
              }
            }
            break;
          }
LABEL_230:
          *((_DWORD *)this + 35) = v95;
          goto LABEL_274;
        case 7u:
          *((unsigned char *)this + 144) |= 1u;
          unint64_t v98 = *((void *)a2 + 1);
          if (v98 > 0xFFFFFFFFFFFFFFF7 || v98 + 8 > *((void *)a2 + 2)) {
            goto LABEL_271;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v98);
          goto LABEL_273;
        case 8u:
          *((unsigned char *)this + 144) |= 2u;
          unint64_t v99 = *((void *)a2 + 1);
          unint64_t v100 = *((void *)a2 + 2);
          uint64_t v101 = *(void *)a2;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            char v102 = 0;
            unsigned int v103 = 0;
            uint64_t v104 = 0;
            do
            {
              unint64_t v105 = v99 + 1;
              *((void *)a2 + 1) = v99 + 1;
              char v106 = *(unsigned char *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0) {
                goto LABEL_233;
              }
              v102 += 7;
              unint64_t v99 = v105;
              BOOL v14 = v103++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v104) = 0;
            goto LABEL_233;
          }
          char v122 = 0;
          unsigned int v123 = 0;
          uint64_t v104 = 0;
          if (v100 <= v99) {
            unint64_t v100 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v124 = v99 + 1;
              char v125 = *(unsigned char *)(v101 + v99);
              *((void *)a2 + 1) = v124;
              v104 |= (unint64_t)(v125 & 0x7F) << v122;
              if (v125 < 0)
              {
                v122 += 7;
                unint64_t v99 = v124;
                BOOL v14 = v123++ > 8;
                if (v14) {
                  goto LABEL_185;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v104) = 0;
              }
            }
            break;
          }
LABEL_233:
          *((_DWORD *)this + 34) = v104;
          goto LABEL_274;
        default:
          goto LABEL_19;
      }
      goto LABEL_274;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_274:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::BioMotionPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(double **)(this + 8);
  uint64_t v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = *(double **)(v3 + 56);
  uint64_t v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(double **)(v3 + 32);
  unint64_t v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(double **)(v3 + 80);
  BOOL v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    double v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  unsigned int v16 = *(double **)(v3 + 104);
  unint64_t v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    double v18 = *v16++;
    this = PB::Writer::write(a2, v18);
  }
  char v19 = *(unsigned char *)(v3 + 144);
  if ((v19 & 4) == 0)
  {
    if ((*(unsigned char *)(v3 + 144) & 1) == 0) {
      goto LABEL_18;
    }
LABEL_21:
    this = PB::Writer::write(a2, *(double *)(v3 + 128));
    if ((*(unsigned char *)(v3 + 144) & 2) == 0) {
      return this;
    }
    goto LABEL_22;
  }
  this = PB::Writer::writeVarInt(a2);
  char v19 = *(unsigned char *)(v3 + 144);
  if (v19) {
    goto LABEL_21;
  }
LABEL_18:
  if ((v19 & 2) == 0) {
    return this;
  }
LABEL_22:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::BioMotionPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  int v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 56);
  uint64_t v5 = *(double **)(a1 + 64);
  double v7 = *(double **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 64) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  double v9 = *(double **)(a1 + 32);
  uint64_t v8 = *(double **)(a1 + 40);
  unsigned int v10 = *(double **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 40) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  double v12 = *(double **)(a1 + 80);
  unint64_t v11 = *(double **)(a1 + 88);
  char v13 = *(double **)(a2 + 80);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 88) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  double v15 = *(double **)(a1 + 104);
  BOOL v14 = *(double **)(a1 + 112);
  unsigned int v16 = *(double **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 112) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  if ((*(unsigned char *)(a1 + 144) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 144) & 4) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 144))
  {
    if ((*(unsigned char *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    return 0;
  }
  BOOL v17 = (*(unsigned char *)(a2 + 144) & 2) == 0;
  if ((*(unsigned char *)(a1 + 144) & 2) != 0) {
    return (*(unsigned char *)(a2 + 144) & 2) != 0 && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136);
  }
  return v17;
}

uint64_t CMMsl::BioMotionPose::hash_value(CMMsl::BioMotionPose *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 144) & 4) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 35);
    if (*((unsigned char *)this + 144))
    {
LABEL_3:
      double v8 = *((double *)this + 16);
      if (v8 == 0.0) {
        double v8 = 0.0;
      }
      if ((*((unsigned char *)this + 144) & 2) != 0) {
        goto LABEL_6;
      }
LABEL_9:
      uint64_t v9 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (*((unsigned char *)this + 144)) {
      goto LABEL_3;
    }
  }
  double v8 = 0.0;
  if ((*((unsigned char *)this + 144) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v9 = *((unsigned int *)this + 34);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(void *)&v8 ^ v9;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this)
{
  *(void *)this = &unk_270640990;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640990;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose(CMMsl::BioMotionPredictedPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640990;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this, const CMMsl::BioMotionPredictedPose *a2)
{
  *(void *)this = &unk_270640990;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 2);
    *(unsigned char *)(this + 28) |= 1u;
    *(void *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 28);
  }
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) |= 2u;
    *(_DWORD *)(this + 24) = v4;
  }
  return this;
}

const CMMsl::BioMotionPredictedPose *CMMsl::BioMotionPredictedPose::operator=(const CMMsl::BioMotionPredictedPose *a1, const CMMsl::BioMotionPredictedPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionPredictedPose::BioMotionPredictedPose((uint64_t)&v8, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v9;
    uint64_t v9 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = *((void *)a1 + 2);
    uint64_t v6 = *((void *)a1 + 3);
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose((CMMsl::BioMotionPredictedPose *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPredictedPose *a2, CMMsl::BioMotionPredictedPose *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640990;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void *CMMsl::BioMotionPredictedPose::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    CMMsl::BioMotionPredictedPose::BioMotionPredictedPose((uint64_t)&v8, a2);
    uint64_t v3 = a1[1];
    a1[1] = v9;
    uint64_t v9 = v3;
    uint64_t v4 = v11;
    uint64_t v5 = a1[2];
    uint64_t v6 = a1[3];
    a1[2] = v10;
    a1[3] = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose((CMMsl::BioMotionPredictedPose *)&v8);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPredictedPose::formatText(CMMsl::BioMotionPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 28) & 2) != 0) {
    PB::TextFormatter::format(a2, "modelType");
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "state");
  }
  if (*((unsigned char *)this + 28)) {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BioMotionPredictedPose::readFrom(CMMsl::BioMotionPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_51;
            }
            unint64_t v33 = v22 + 1;
            char v34 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v33;
            v27 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            unint64_t v22 = v33;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
LABEL_46:
              LODWORD(v27) = 0;
              goto LABEL_51;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_46;
            }
          }
        }
LABEL_51:
        *((_DWORD *)this + 6) = v27;
      }
      else if (v21 == 2)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v30 = *((void *)a2 + 1);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v30);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if (v21 == 1) {
          operator new();
        }
LABEL_19:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_25;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::PoseState::PoseState(CMMsl::PoseState *this)
{
  *(void *)this = &unk_270644120;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270644120;
  *((_DWORD *)this + 11) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 28);
  if (v5)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    char v5 = *(unsigned char *)(v3 + 28);
  }
  if ((v5 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::BioMotionPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::PoseState::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

BOOL CMMsl::PoseState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  uint64_t v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    if (*v7 != *v8) {
      return 0;
    }
    ++v7;
    ++v8;
  }
  BOOL result = (*(unsigned char *)(a2 + 44) & 1) == 0;
  if (*(unsigned char *)(a1 + 44)) {
    return (*(unsigned char *)(a2 + 44) & 1) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  }
  return result;
}

unint64_t CMMsl::BioMotionPredictedPose::hash_value(CMMsl::BioMotionPredictedPose *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::PoseState::hash_value((CMMsl::PoseState *)v2);
  }
  if (*((unsigned char *)this + 28))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v4 = 0;
    return *(void *)&v3 ^ v2 ^ v4;
  }
  double v3 = 0.0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 6);
  return *(void *)&v3 ^ v2 ^ v4;
}

uint64_t CMMsl::BioMotionPredictedPose::makeState(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(void *this)
{
  *this = &unk_2706409C8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_2706409C8;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor(CMMsl::BioMotionPropagatedAnchor *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706409C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(void *this, const CMMsl::BioMotionPropagatedAnchor *a2)
{
  *this = &unk_2706409C8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::BioMotionPropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::operator=(const CMMsl::BioMotionPropagatedAnchor *a1, const CMMsl::BioMotionPropagatedAnchor *a2)
{
  if (a1 != a2)
  {
    CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor((CMMsl::BioMotionPropagatedAnchor *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionPropagatedAnchor *a2, CMMsl::BioMotionPropagatedAnchor *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(void *a1, uint64_t a2)
{
  *a1 = &unk_2706409C8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706409C8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706409C8;
    v6[1] = v4;
    CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor((CMMsl::BioMotionPropagatedAnchor *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::formatText(CMMsl::BioMotionPropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BioMotionPropagatedAnchor::readFrom(CMMsl::BioMotionPropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t this)
{
  *(void *)this = &unk_270644548;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_270644548;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::BioMotionPropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::PropagatedAnchor::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  char v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 16) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    if (*v7 != *v8) {
      return 0;
    }
    ++v7;
    ++v8;
  }
  BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if (*(unsigned char *)(a1 + 48)) {
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return result;
}

CMMsl::PropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::hash_value(CMMsl::BioMotionPropagatedAnchor *this)
{
  BOOL result = (CMMsl::PropagatedAnchor *)*((void *)this + 1);
  if (result) {
    return (CMMsl::PropagatedAnchor *)CMMsl::PropagatedAnchor::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this)
{
  *(void *)this = &unk_270640A00;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640A00;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection(CMMsl::BleedToZeroCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640A00;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this, const CMMsl::BleedToZeroCorrection *a2)
{
  *(void *)this = &unk_270640A00;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    char v2 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, const CMMsl::BleedToZeroCorrection *a2)
{
  if ((const CMMsl::BleedToZeroCorrection *)a1 != a2)
  {
    CMMsl::BleedToZeroCorrection::BleedToZeroCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection((CMMsl::BleedToZeroCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BleedToZeroCorrection *a2, CMMsl::BleedToZeroCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640A00;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::BleedToZeroCorrection::BleedToZeroCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection((CMMsl::BleedToZeroCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::formatText(CMMsl::BleedToZeroCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "withAnchoredStaticPose");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BleedToZeroCorrection::readFrom(CMMsl::BleedToZeroCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
          *((void *)a2 + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 16) = v23;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BleedToZeroCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::BleedToZeroCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::BleedToZeroCorrection::hash_value(CMMsl::BleedToZeroCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::BleedToZeroCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::BodyMetrics::BodyMetrics(uint64_t this)
{
  *(void *)this = &unk_270640A38;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = &unk_270640A38;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::BodyMetrics::~BodyMetrics(CMMsl::BodyMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::BodyMetrics::BodyMetrics(CMMsl::BodyMetrics *this, const CMMsl::BodyMetrics *a2)
{
  *(void *)this = &unk_270640A38;
  *((_DWORD *)this + 16) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *((_DWORD *)a2 + 6);
    __int16 v3 = 16;
    *((_WORD *)this + 32) = 16;
    *((_DWORD *)this + 6) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 7);
    v3 |= 0x20u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x1000) != 0)
  {
    float result = *((float *)a2 + 14);
    v3 |= 0x1000u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 14) = result;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  float result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  float result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  float result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v6 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 5) = v6;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  float result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v7 = *((unsigned char *)a2 + 60);
  v3 |= 0x2000u;
  *((_WORD *)this + 32) = v3;
  *((unsigned char *)this + 60) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_30:
    float result = *((float *)a2 + 2);
    *((_WORD *)this + 32) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
LABEL_29:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 4) = v8;
  if (*((_WORD *)a2 + 32)) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *a1, const CMMsl::BodyMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::BodyMetrics::BodyMetrics((CMMsl::BodyMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BodyMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BodyMetrics *a2, CMMsl::BodyMetrics *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  int v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  int v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  int v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  int v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  int v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  int v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  int v12 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v12;
  int v13 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v13;
  int v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  LOBYTE(v13) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v13;
  int v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::BodyMetrics::BodyMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640A38;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BodyMetrics::BodyMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BodyMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::BodyMetrics::formatText(CMMsl::BodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "adaptiveExerciseMinuteThreshold", *((float *)this + 2));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "age", *((float *)this + 3));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "betaBlockerUse");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "biologicalSex");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "condition");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "gender");
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "heightM", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "hrmax", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "hrmin", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "hronset", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "pal", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "runVo2max", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "vo2max", *((float *)this + 13));
  if ((*((_WORD *)this + 32) & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "weightKG", *((float *)this + 14));
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BodyMetrics::readFrom(CMMsl::BodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_116;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 32) |= 0x10u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_105;
            }
            unint64_t v42 = v20++;
            char v43 = *(unsigned char *)(v21 + v42);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_104:
              unint64_t v2 = v42 + 1;
              goto LABEL_105;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_104;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_105;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_105:
        *((_DWORD *)this + 6) = v24;
        break;
      case 2u:
        *((_WORD *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 3u:
        *((_WORD *)this + 32) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 4u:
        *((_WORD *)this + 32) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 5u:
        *((_WORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 6u:
        *((_WORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 7u:
        *((_WORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 8u:
        *((_WORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 9u:
        *((_WORD *)this + 32) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 0xAu:
        *((_WORD *)this + 32) |= 8u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_110;
            }
            unint64_t v46 = v26++;
            char v47 = *(unsigned char *)(v27 + v46);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_109:
              unint64_t v2 = v46 + 1;
              goto LABEL_110;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_109;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_110;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_110:
        *((_DWORD *)this + 5) = v30;
        break;
      case 0xBu:
        *((_WORD *)this + 32) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_75;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_100;
      case 0xCu:
        *((_WORD *)this + 32) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 60) = v33;
        break;
      case 0xDu:
        *((_WORD *)this + 32) |= 4u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_115;
            }
            unint64_t v50 = v34++;
            char v51 = *(unsigned char *)(v35 + v50);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_114:
              unint64_t v2 = v50 + 1;
              goto LABEL_115;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_114;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_115;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_115:
        *((_DWORD *)this + 4) = v38;
        break;
      case 0xEu:
        *((_WORD *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_100:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_75:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_116:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 64) & 1) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_29:
  float v5 = *(float *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::BodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return v4;
}

uint64_t CMMsl::BodyMetrics::hash_value(CMMsl::BodyMetrics *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0) {
      goto LABEL_6;
    }
LABEL_38:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_39:
    uint64_t v8 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_12;
    }
LABEL_40:
    uint64_t v10 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_41:
    uint64_t v12 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_42:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_43:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_44:
    uint64_t v18 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_45;
  }
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((v1 & 0x20) == 0) {
    goto LABEL_37;
  }
LABEL_3:
  float v3 = *((float *)this + 7);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x1000) == 0) {
    goto LABEL_38;
  }
LABEL_6:
  float v5 = *((float *)this + 14);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x800) == 0) {
    goto LABEL_39;
  }
LABEL_9:
  float v7 = *((float *)this + 13);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_40;
  }
LABEL_12:
  float v9 = *((float *)this + 3);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_41;
  }
LABEL_15:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_42;
  }
LABEL_18:
  float v13 = *((float *)this + 8);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_43;
  }
LABEL_21:
  float v15 = *((float *)this + 10);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_44;
  }
LABEL_24:
  float v17 = *((float *)this + 11);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_27:
    uint64_t v19 = *((unsigned int *)this + 5);
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_28;
    }
LABEL_46:
    uint64_t v21 = 0;
    if ((*((_WORD *)this + 32) & 0x2000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t v19 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0) {
    goto LABEL_46;
  }
LABEL_28:
  float v20 = *((float *)this + 12);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x2000) != 0)
  {
LABEL_31:
    uint64_t v22 = *((unsigned __int8 *)this + 60);
    if ((v1 & 4) != 0) {
      goto LABEL_32;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_32:
    uint64_t v23 = *((unsigned int *)this + 4);
    if (v1) {
      goto LABEL_33;
    }
LABEL_49:
    uint64_t v25 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
  }
LABEL_48:
  uint64_t v23 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_33:
  float v24 = *((float *)this + 2);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
}

void *CMMsl::BraveHeartAccel::BraveHeartAccel(void *this)
{
  *this = &unk_270640A70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_270640A70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartAccel::~BraveHeartAccel(CMMsl::BraveHeartAccel *this)
{
  *(void *)this = &unk_270640A70;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640A70;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640A70;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::BraveHeartAccel::BraveHeartAccel(void *this, const CMMsl::BraveHeartAccel *a2)
{
  this[1] = 0;
  *this = &unk_270640A70;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_2570E5D20(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, const CMMsl::BraveHeartAccel *a2)
{
  if ((const CMMsl::BraveHeartAccel *)a1 != a2)
  {
    CMMsl::BraveHeartAccel::BraveHeartAccel(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_270640A70;
    float v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::BraveHeartAccel *a2, CMMsl::BraveHeartAccel *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::BraveHeartAccel::BraveHeartAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640A70;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270640A70;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v9 = &unk_270640A70;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    uint64_t v12 = (void **)&v10;
    float v9 = &unk_270640A70;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::formatText(CMMsl::BraveHeartAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "accel");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BraveHeartAccel::readFrom(CMMsl::BraveHeartAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2570E6340(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::Accel::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_2570E6438(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::Accel::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::BraveHeartAccel::hash_value(CMMsl::BraveHeartAccel *this)
{
  uint64_t v1 = (CMMsl::Accel **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::Accel **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::Accel::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(void *this)
{
  *this = &unk_270640AA8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_270640AA8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartDeviceMotion::~BraveHeartDeviceMotion(CMMsl::BraveHeartDeviceMotion *this)
{
  *(void *)this = &unk_270640AA8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640AA8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640AA8;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(void *this, const CMMsl::BraveHeartDeviceMotion *a2)
{
  this[1] = 0;
  *this = &unk_270640AA8;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_2570E6824(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, const CMMsl::BraveHeartDeviceMotion *a2)
{
  if ((const CMMsl::BraveHeartDeviceMotion *)a1 != a2)
  {
    CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_270640AA8;
    BOOL v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::BraveHeartDeviceMotion *a2, CMMsl::BraveHeartDeviceMotion *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640AA8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270640AA8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    BOOL v9 = &unk_270640AA8;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    BOOL v9 = &unk_270640AA8;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::formatText(CMMsl::BraveHeartDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "deviceMotion");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BraveHeartDeviceMotion::readFrom(CMMsl::BraveHeartDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2570E6E44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::DeviceMotion::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_2570E6F3C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::DeviceMotion::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::BraveHeartDeviceMotion::hash_value(CMMsl::BraveHeartDeviceMotion *this)
{
  uint64_t v1 = (CMMsl::DeviceMotion **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::DeviceMotion **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::DeviceMotion::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this)
{
  *(void *)this = &unk_270640AE0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_270640AE0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::BraveHeartNatalieData::~BraveHeartNatalieData(CMMsl::BraveHeartNatalieData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this, const CMMsl::BraveHeartNatalieData *a2)
{
  *(void *)this = &unk_270640AE0;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    char v3 = 8;
    *(unsigned char *)(this + 44) = 8;
    *(void *)(this + 32) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 10);
      *(unsigned char *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, const CMMsl::BraveHeartNatalieData *a2)
{
  if ((const CMMsl::BraveHeartNatalieData *)a1 != a2)
  {
    CMMsl::BraveHeartNatalieData::BraveHeartNatalieData((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v9;
    uint64_t v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartNatalieData *a2, CMMsl::BraveHeartNatalieData *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640AE0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640AE0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270640AE0;
    uint64_t v3 = *(void *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    long long v9 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v3;
    uint64_t v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartNatalieData::formatText(CMMsl::BraveHeartNatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "basalNatalies", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "natalies", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "session");
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 4));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BraveHeartNatalieData::readFrom(CMMsl::BraveHeartNatalieData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_56;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 2u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 3u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_50;
      case 4u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_50:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_55;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_54:
              unint64_t v2 = v28 + 1;
              goto LABEL_55;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_54;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_55;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_55:
        *((_DWORD *)this + 10) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_56:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartNatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 44) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::BraveHeartNatalieData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v2;
}

uint64_t CMMsl::BraveHeartNatalieData::hash_value(CMMsl::BraveHeartNatalieData *this)
{
  if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if (*((unsigned char *)this + 44))
  {
LABEL_9:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v5 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
  }
LABEL_18:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v5 = *((int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
}

void *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(void *this)
{
  *this = &unk_270640B18;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_270640B18;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartVO2MaxInput::~BraveHeartVO2MaxInput(CMMsl::BraveHeartVO2MaxInput *this)
{
  *(void *)this = &unk_270640B18;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640B18;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640B18;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(void *this, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  this[1] = 0;
  *this = &unk_270640B18;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_2570E7CE0(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  if ((const CMMsl::BraveHeartVO2MaxInput *)a1 != a2)
  {
    CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = &unk_270640B18;
    char v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::BraveHeartVO2MaxInput *a2, CMMsl::BraveHeartVO2MaxInput *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640B18;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270640B18;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v9 = &unk_270640B18;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    char v9 = &unk_270640B18;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::formatText(CMMsl::BraveHeartVO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "vo2MaxInput");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::readFrom(CMMsl::BraveHeartVO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_2570E8300(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (uint64_t i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartVO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(uint64_t **)(a2 + 8);
  if (v3 - v2 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::VO2MaxInput::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_2570E83F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::VO2MaxInput::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::hash_value(CMMsl::BraveHeartVO2MaxInput *this)
{
  uint64_t v1 = (CMMsl::VO2MaxInput **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::VO2MaxInput **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::VO2MaxInput::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t this)
{
  *(void *)this = &unk_270640B50;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = &unk_270640B50;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::BraveHeartWorkoutEvent::~BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this, const CMMsl::BraveHeartWorkoutEvent *a2)
{
  *(void *)this = &unk_270640B50;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    char v3 = 4;
    *((unsigned char *)this + 24) = 4;
    *((_DWORD *)this + 5) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((_DWORD *)this + 4) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, const CMMsl::BraveHeartWorkoutEvent *a2)
{
  if ((const CMMsl::BraveHeartWorkoutEvent *)a1 != a2)
  {
    CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent((CMMsl::BraveHeartWorkoutEvent *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v6 = v10;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v6;
    uint64_t v9 = v5;
    uint64_t v10 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartWorkoutEvent *a2, CMMsl::BraveHeartWorkoutEvent *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640B50;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640B50;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270640B50;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v10 = *(_DWORD *)(a1 + 24);
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    v9[1] = v7;
    void v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::formatText(CMMsl::BraveHeartWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "eventTime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "eventType");
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BraveHeartWorkoutEvent::readFrom(CMMsl::BraveHeartWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_72;
            }
            unint64_t v40 = v28++;
            char v41 = *(unsigned char *)(v29 + v40);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
LABEL_71:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            unint64_t v2 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v33 = *(unsigned char *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v28 = v2;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 4) = v32;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v36 = v20++;
            char v37 = *(unsigned char *)(v21 + v36);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_66:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v24;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 24) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::BraveHeartWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::hash_value(CMMsl::BraveHeartWorkoutEvent *this)
{
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 5);
    if ((*((unsigned char *)this + 24) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 4);
      if (*((unsigned char *)this + 24)) {
        goto LABEL_4;
      }
LABEL_9:
      double v3 = 0.0;
      return v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return v2 ^ v1 ^ *(void *)&v3;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this)
{
  *(void *)this = &unk_270640B88;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640B88;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BumpToWakeState::~BumpToWakeState(CMMsl::BumpToWakeState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this, const CMMsl::BumpToWakeState *a2)
{
  *(void *)this = &unk_270640B88;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::BumpToWakeState *CMMsl::BumpToWakeState::operator=(const CMMsl::BumpToWakeState *a1, const CMMsl::BumpToWakeState *a2)
{
  if (a1 != a2)
  {
    CMMsl::BumpToWakeState::BumpToWakeState((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BumpToWakeState *a2, CMMsl::BumpToWakeState *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270640B88;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = &unk_270640B88;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BumpToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = &unk_270640B88;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::BumpToWakeState::formatText(CMMsl::BumpToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::BumpToWakeState::readFrom(CMMsl::BumpToWakeState *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BumpToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::BumpToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::BumpToWakeState::hash_value(CMMsl::BumpToWakeState *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

double CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  *(void *)this = &unk_270640BC0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640BC0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CV3DPredictedPose::~CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  *(void *)this = &unk_270640BC0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CV3DPredictedPose::~CV3DPredictedPose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::CV3DPredictedPose *CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this, const CMMsl::CV3DPredictedPose *a2)
{
  *(void *)this = &unk_270640BC0;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((unsigned char *)a2 + 72) & 2) != 0)
  {
    uint64_t v5 = *((void *)a2 + 8);
    *((unsigned char *)this + 72) = 2;
    *((void *)this + 8) = v5;
  }
  if (this != a2)
  {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v6 = *((void *)a2 + 7);
    *((unsigned char *)this + 72) |= 1u;
    *((void *)this + 7) = v6;
  }
  return this;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, const CMMsl::CV3DPredictedPose *a2)
{
  if ((const CMMsl::CV3DPredictedPose *)a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DPredictedPose *a2, CMMsl::CV3DPredictedPose *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::CV3DPredictedPose::CV3DPredictedPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640BC0;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::formatText(CMMsl::CV3DPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  char v8 = *((unsigned char *)this + 72);
  if (v8)
  {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 7));
    char v8 = *((unsigned char *)this + 72);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  }
  uint64_t v9 = (double *)*((void *)this + 4);
  long long v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::CV3DPredictedPose::readFrom(CMMsl::CV3DPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 72) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_115;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v20);
          goto LABEL_117;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              char v24 = (char *)*((void *)this + 2);
              unint64_t v23 = *((void *)this + 3);
              if ((unint64_t)v24 >= v23)
              {
                unint64_t v26 = (char *)*((void *)this + 1);
                uint64_t v27 = (v24 - v26) >> 3;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61) {
                  goto LABEL_125;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 2 > v28) {
                  unint64_t v28 = v29 >> 2;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C7528(v30);
                  unint64_t v26 = (char *)*((void *)this + 1);
                  char v24 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                char v32 = (void *)(v30 + 8 * v27);
                *char v32 = 0;
                char v25 = v32 + 1;
                while (v24 != v26)
                {
                  uint64_t v33 = *((void *)v24 - 1);
                  v24 -= 8;
                  *--char v32 = v33;
                }
                *((void *)this + 1) = v32;
                *((void *)this + 2) = v25;
                *((void *)this + 3) = v30 + 8 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(void *)char v24 = 0;
                char v25 = v24 + 8;
              }
              *((void *)this + 2) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2)) {
                goto LABEL_81;
              }
              *(v25 - 1) = *(void *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v21;
            }
            goto LABEL_82;
          }
          char v51 = (char *)*((void *)this + 2);
          unint64_t v50 = *((void *)this + 3);
          if ((unint64_t)v51 >= v50)
          {
            unint64_t v55 = (char *)*((void *)this + 1);
            uint64_t v56 = (v51 - v55) >> 3;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_125;
            }
            uint64_t v58 = v50 - (void)v55;
            if (v58 >> 2 > v57) {
              unint64_t v57 = v58 >> 2;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v57;
            }
            if (v59)
            {
              unint64_t v59 = (unint64_t)sub_2572C7528(v59);
              unint64_t v55 = (char *)*((void *)this + 1);
              char v51 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v60 = 0;
            }
            unsigned int v67 = (void *)(v59 + 8 * v56);
            *unsigned int v67 = 0;
            unint64_t v52 = v67 + 1;
            while (v51 != v55)
            {
              uint64_t v68 = *((void *)v51 - 1);
              v51 -= 8;
              *--unsigned int v67 = v68;
            }
            *((void *)this + 1) = v67;
            *((void *)this + 2) = v52;
            *((void *)this + 3) = v59 + 8 * v60;
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(void *)char v51 = 0;
            unint64_t v52 = v51 + 8;
          }
          *((void *)this + 2) = v52;
          goto LABEL_113;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            while (v35 < v36 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v38 = (char *)*((void *)this + 5);
              unint64_t v37 = *((void *)this + 6);
              if ((unint64_t)v38 >= v37)
              {
                unint64_t v40 = (char *)*((void *)this + 4);
                uint64_t v41 = (v38 - v40) >> 3;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61) {
                  goto LABEL_125;
                }
                uint64_t v43 = v37 - (void)v40;
                if (v43 >> 2 > v42) {
                  unint64_t v42 = v43 >> 2;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C7528(v44);
                  unint64_t v40 = (char *)*((void *)this + 4);
                  unint64_t v38 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                unint64_t v46 = (void *)(v44 + 8 * v41);
                void *v46 = 0;
                char v39 = v46 + 1;
                while (v38 != v40)
                {
                  uint64_t v47 = *((void *)v38 - 1);
                  v38 -= 8;
                  *--unint64_t v46 = v47;
                }
                *((void *)this + 4) = v46;
                *((void *)this + 5) = v39;
                *((void *)this + 6) = v44 + 8 * v45;
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(void *)unint64_t v38 = 0;
                char v39 = v38 + 8;
              }
              *((void *)this + 5) = v39;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)a2 + 2))
              {
LABEL_81:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v39 - 1) = *(void *)(*(void *)a2 + v48);
              unint64_t v36 = *((void *)a2 + 2);
              unint64_t v35 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v35;
            }
LABEL_82:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v54 = (char *)*((void *)this + 5);
            unint64_t v53 = *((void *)this + 6);
            if ((unint64_t)v54 >= v53)
            {
              unint64_t v61 = (char *)*((void *)this + 4);
              uint64_t v62 = (v54 - v61) >> 3;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61) {
LABEL_125:
              }
                sub_2570AFD0C();
              uint64_t v64 = v53 - (void)v61;
              if (v64 >> 2 > v63) {
                unint64_t v63 = v64 >> 2;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unint64_t v65 = (unint64_t)sub_2572C7528(v65);
                unint64_t v61 = (char *)*((void *)this + 4);
                uint64_t v54 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v66 = 0;
              }
              unint64_t v69 = (void *)(v65 + 8 * v62);
              *unint64_t v69 = 0;
              unint64_t v52 = v69 + 1;
              while (v54 != v61)
              {
                uint64_t v70 = *((void *)v54 - 1);
                v54 -= 8;
                *--unint64_t v69 = v70;
              }
              *((void *)this + 4) = v69;
              *((void *)this + 5) = v52;
              *((void *)this + 6) = v65 + 8 * v66;
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)uint64_t v54 = 0;
              unint64_t v52 = v54 + 8;
            }
            *((void *)this + 5) = v52;
LABEL_113:
            unint64_t v71 = *((void *)a2 + 1);
            if (v71 <= 0xFFFFFFFFFFFFFFF7 && v71 + 8 <= *((void *)a2 + 2))
            {
              *(v52 - 1) = *(void *)(*(void *)a2 + v71);
LABEL_117:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_115:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((unsigned char *)this + 72) |= 1u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
            goto LABEL_115;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v49);
          goto LABEL_117;
        default:
          goto LABEL_19;
      }
      goto LABEL_118;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_118:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::CV3DPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 72) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 64));
  }
  int v4 = *(double **)(v3 + 8);
  long long v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = *(double **)(v3 + 32);
  uint64_t v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if (*(unsigned char *)(v3 + 72))
  {
    double v10 = *(double *)(v3 + 56);
    return PB::Writer::write(a2, v10);
  }
  return this;
}

BOOL CMMsl::CV3DPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v2 = *(double **)(a1 + 16);
  int v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 32);
  long long v5 = *(double **)(a1 + 40);
  double v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 72) & 1) == 0;
  if (*(unsigned char *)(a1 + 72)) {
    return (*(unsigned char *)(a2 + 72) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v8;
}

uint64_t CMMsl::CV3DPredictedPose::hash_value(CMMsl::CV3DPredictedPose *this)
{
  if ((*((unsigned char *)this + 72) & 2) != 0)
  {
    if (*((double *)this + 8) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 8);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 72))
  {
    double v5 = *((double *)this + 7);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5;
}

void CMMsl::CV3DSLAMState::~CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  *(void *)this = &unk_270640BF8;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CV3DSLAMState::~CV3DSLAMState(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::CV3DSLAMState *CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this, const CMMsl::CV3DSLAMState *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_270640BF8;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    uint64_t v5 = *((void *)a2 + 10);
    *((unsigned char *)this + 88) = 1;
    *((void *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_2572C73EC((void *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, const CMMsl::CV3DSLAMState *a2)
{
  if ((const CMMsl::CV3DSLAMState *)a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    int v18 = v3;
    uint64_t v4 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v17;
    uint64_t v17 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = v8;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v16;
    uint64_t v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DSLAMState *a2, CMMsl::CV3DSLAMState *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  return result;
}

uint64_t CMMsl::CV3DSLAMState::CV3DSLAMState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640BF8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 56));
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((uint64_t)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    int v18 = v3;
    uint64_t v4 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v17;
    uint64_t v17 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v7;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = v8;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v16;
    uint64_t v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::formatText(CMMsl::CV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  if (*((unsigned char *)this + 88)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  }
  long long v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  uint64_t v11 = (double *)*((void *)this + 7);
  long long v12 = (double *)*((void *)this + 8);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(a2, "velocity", v13);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::CV3DSLAMState::readFrom(CMMsl::CV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 88) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_153;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v20);
          goto LABEL_155;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              char v24 = (char *)*((void *)this + 2);
              unint64_t v23 = *((void *)this + 3);
              if ((unint64_t)v24 >= v23)
              {
                unint64_t v26 = (char *)*((void *)this + 1);
                uint64_t v27 = (v24 - v26) >> 3;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 61) {
                  goto LABEL_163;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 2 > v28) {
                  unint64_t v28 = v29 >> 2;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C7528(v30);
                  unint64_t v26 = (char *)*((void *)this + 1);
                  char v24 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                char v32 = (void *)(v30 + 8 * v27);
                *char v32 = 0;
                char v25 = v32 + 1;
                while (v24 != v26)
                {
                  uint64_t v33 = *((void *)v24 - 1);
                  v24 -= 8;
                  *--char v32 = v33;
                }
                *((void *)this + 1) = v32;
                *((void *)this + 2) = v25;
                *((void *)this + 3) = v30 + 8 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(void *)char v24 = 0;
                char v25 = v24 + 8;
              }
              *((void *)this + 2) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *(v25 - 1) = *(void *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v21;
            }
            goto LABEL_105;
          }
          uint64_t v64 = (char *)*((void *)this + 2);
          unint64_t v63 = *((void *)this + 3);
          if ((unint64_t)v64 >= v63)
          {
            uint64_t v70 = (char *)*((void *)this + 1);
            uint64_t v71 = (v64 - v70) >> 3;
            unint64_t v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 61) {
              goto LABEL_163;
            }
            uint64_t v73 = v63 - (void)v70;
            if (v73 >> 2 > v72) {
              unint64_t v72 = v73 >> 2;
            }
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74)
            {
              unint64_t v74 = (unint64_t)sub_2572C7528(v74);
              uint64_t v70 = (char *)*((void *)this + 1);
              uint64_t v64 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v75 = 0;
            }
            uint64_t v88 = (void *)(v74 + 8 * v71);
            *uint64_t v88 = 0;
            unint64_t v65 = v88 + 1;
            while (v64 != v70)
            {
              uint64_t v89 = *((void *)v64 - 1);
              v64 -= 8;
              *--uint64_t v88 = v89;
            }
            *((void *)this + 1) = v88;
            *((void *)this + 2) = v65;
            *((void *)this + 3) = v74 + 8 * v75;
            if (v70) {
              operator delete(v70);
            }
          }
          else
          {
            *(void *)uint64_t v64 = 0;
            unint64_t v65 = v64 + 8;
          }
          *((void *)this + 2) = v65;
          goto LABEL_151;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            while (v35 < v36 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v38 = (char *)*((void *)this + 5);
              unint64_t v37 = *((void *)this + 6);
              if ((unint64_t)v38 >= v37)
              {
                unint64_t v40 = (char *)*((void *)this + 4);
                uint64_t v41 = (v38 - v40) >> 3;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 61) {
                  goto LABEL_163;
                }
                uint64_t v43 = v37 - (void)v40;
                if (v43 >> 2 > v42) {
                  unint64_t v42 = v43 >> 2;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C7528(v44);
                  unint64_t v40 = (char *)*((void *)this + 4);
                  unint64_t v38 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                unint64_t v46 = (void *)(v44 + 8 * v41);
                void *v46 = 0;
                char v39 = v46 + 1;
                while (v38 != v40)
                {
                  uint64_t v47 = *((void *)v38 - 1);
                  v38 -= 8;
                  *--unint64_t v46 = v47;
                }
                *((void *)this + 4) = v46;
                *((void *)this + 5) = v39;
                *((void *)this + 6) = v44 + 8 * v45;
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(void *)unint64_t v38 = 0;
                char v39 = v38 + 8;
              }
              *((void *)this + 5) = v39;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *(v39 - 1) = *(void *)(*(void *)a2 + v48);
              unint64_t v36 = *((void *)a2 + 2);
              unint64_t v35 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v35;
            }
            goto LABEL_105;
          }
          unsigned int v67 = (char *)*((void *)this + 5);
          unint64_t v66 = *((void *)this + 6);
          if ((unint64_t)v67 >= v66)
          {
            unint64_t v76 = (char *)*((void *)this + 4);
            uint64_t v77 = (v67 - v76) >> 3;
            unint64_t v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 61) {
              goto LABEL_163;
            }
            uint64_t v79 = v66 - (void)v76;
            if (v79 >> 2 > v78) {
              unint64_t v78 = v79 >> 2;
            }
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v78;
            }
            if (v80)
            {
              unint64_t v80 = (unint64_t)sub_2572C7528(v80);
              unint64_t v76 = (char *)*((void *)this + 4);
              unsigned int v67 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v81 = 0;
            }
            unint64_t v90 = (void *)(v80 + 8 * v77);
            void *v90 = 0;
            unint64_t v65 = v90 + 1;
            while (v67 != v76)
            {
              uint64_t v91 = *((void *)v67 - 1);
              v67 -= 8;
              *--unint64_t v90 = v91;
            }
            *((void *)this + 4) = v90;
            *((void *)this + 5) = v65;
            *((void *)this + 6) = v80 + 8 * v81;
            if (v76) {
              operator delete(v76);
            }
          }
          else
          {
            *(void *)unsigned int v67 = 0;
            unint64_t v65 = v67 + 8;
          }
          *((void *)this + 5) = v65;
          goto LABEL_151;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v49 = *((void *)a2 + 1);
            unint64_t v50 = *((void *)a2 + 2);
            while (v49 < v50 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v52 = (char *)*((void *)this + 8);
              unint64_t v51 = *((void *)this + 9);
              if ((unint64_t)v52 >= v51)
              {
                uint64_t v54 = (char *)*((void *)this + 7);
                uint64_t v55 = (v52 - v54) >> 3;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61) {
                  goto LABEL_163;
                }
                uint64_t v57 = v51 - (void)v54;
                if (v57 >> 2 > v56) {
                  unint64_t v56 = v57 >> 2;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  unint64_t v58 = (unint64_t)sub_2572C7528(v58);
                  uint64_t v54 = (char *)*((void *)this + 7);
                  unint64_t v52 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v59 = 0;
                }
                uint64_t v60 = (void *)(v58 + 8 * v55);
                *uint64_t v60 = 0;
                unint64_t v53 = v60 + 1;
                while (v52 != v54)
                {
                  uint64_t v61 = *((void *)v52 - 1);
                  v52 -= 8;
                  *--uint64_t v60 = v61;
                }
                *((void *)this + 7) = v60;
                *((void *)this + 8) = v53;
                *((void *)this + 9) = v58 + 8 * v59;
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(void *)unint64_t v52 = 0;
                unint64_t v53 = v52 + 8;
              }
              *((void *)this + 8) = v53;
              unint64_t v62 = *((void *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((void *)a2 + 2))
              {
LABEL_104:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v53 - 1) = *(void *)(*(void *)a2 + v62);
              unint64_t v50 = *((void *)a2 + 2);
              unint64_t v49 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v49;
            }
LABEL_105:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v69 = (char *)*((void *)this + 8);
            unint64_t v68 = *((void *)this + 9);
            if ((unint64_t)v69 >= v68)
            {
              uint64_t v82 = (char *)*((void *)this + 7);
              uint64_t v83 = (v69 - v82) >> 3;
              unint64_t v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_163:
              }
                sub_2570AFD0C();
              uint64_t v85 = v68 - (void)v82;
              if (v85 >> 2 > v84) {
                unint64_t v84 = v85 >> 2;
              }
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v84;
              }
              if (v86)
              {
                unint64_t v86 = (unint64_t)sub_2572C7528(v86);
                uint64_t v82 = (char *)*((void *)this + 7);
                unint64_t v69 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v87 = 0;
              }
              uint64_t v92 = (void *)(v86 + 8 * v83);
              void *v92 = 0;
              unint64_t v65 = v92 + 1;
              while (v69 != v82)
              {
                uint64_t v93 = *((void *)v69 - 1);
                v69 -= 8;
                *--uint64_t v92 = v93;
              }
              *((void *)this + 7) = v92;
              *((void *)this + 8) = v65;
              *((void *)this + 9) = v86 + 8 * v87;
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)unint64_t v69 = 0;
              unint64_t v65 = v69 + 8;
            }
            *((void *)this + 8) = v65;
LABEL_151:
            unint64_t v94 = *((void *)a2 + 1);
            if (v94 <= 0xFFFFFFFFFFFFFFF7 && v94 + 8 <= *((void *)a2 + 2))
            {
              *(v65 - 1) = *(void *)(*(void *)a2 + v94);
LABEL_155:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_153:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_156;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_156:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::CV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 88)) {
    this = PB::Writer::write(a2, *(double *)(this + 80));
  }
  int v4 = (double *)v3[1];
  long long v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = (double *)v3[4];
  uint64_t v8 = (double *)v3[5];
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unint64_t v11 = (double *)v3[7];
  unsigned int v10 = (double *)v3[8];
  while (v11 != v10)
  {
    double v12 = *v11++;
    this = PB::Writer::write(a2, v12);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::hash_value(CMMsl::CV3DSLAMState *this)
{
  if (*((unsigned char *)this + 88))
  {
    if (*((double *)this + 10) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 10);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  uint64_t v3 = PBHashBytes();
  return v2 ^ v3 ^ PBHashBytes();
}

uint64_t CMMsl::CVWatchCalories::CVWatchCalories(uint64_t this)
{
  *(void *)this = &unk_270640C30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640C30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::CVWatchCalories::~CVWatchCalories(CMMsl::CVWatchCalories *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::CVWatchCalories::CVWatchCalories(CMMsl::CVWatchCalories *this, const CMMsl::CVWatchCalories *a2)
{
  *(void *)this = &unk_270640C30;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    char v3 = 4;
    *((unsigned char *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, const CMMsl::CVWatchCalories *a2)
{
  if ((const CMMsl::CVWatchCalories *)a1 != a2)
  {
    CMMsl::CVWatchCalories::CVWatchCalories((CMMsl::CVWatchCalories *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CVWatchCalories *a2, CMMsl::CVWatchCalories *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::CVWatchCalories::CVWatchCalories(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640C30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640C30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = &unk_270640C30;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CVWatchCalories::formatText(CMMsl::CVWatchCalories *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CVWatchCalories::readFrom(CMMsl::CVWatchCalories *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v19 == 2)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if (v19 != 1)
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
      {
LABEL_34:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 28) |= 1u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
      goto LABEL_34;
    }
    *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::CVWatchCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::CVWatchCalories::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 1) == 0;
  if (*(unsigned char *)(a1 + 28)) {
    return (*(unsigned char *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::CVWatchCalories::hash_value(CMMsl::CVWatchCalories *this)
{
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
    float v4 = *((float *)this + 6);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if (*((unsigned char *)this + 28)) {
        goto LABEL_6;
      }
LABEL_13:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void *CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(void *this)
{
  *this = &unk_270640C68;
  *(void *)((char *)this + 164) = 0;
  return this;
}

{
  *this = &unk_270640C68;
  *(void *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::CalorieControllerMETsConsumed::~CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  *(void *)this = &unk_270640C68;
  *(void *)((char *)this + 164) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 30);
    uint64_t v3 = 0x2000000;
    *(void *)((char *)this + 164) = 0x2000000;
    *((_DWORD *)this + 30) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 12);
    v3 |= 0x80uLL;
    *(void *)((char *)this + 164) = v3;
    *((_DWORD *)this + 12) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 21);
    v3 |= 0x10000uLL;
    *(void *)((char *)this + 164) = v3;
    *((_DWORD *)this + 21) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_45;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v5 = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 8) = v5;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 35) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 39) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 27) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 10) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 11) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v4 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)((char *)this + 164) = v3;
  *((void *)this + 2) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  char v6 = *((unsigned char *)a2 + 162);
  v3 |= 0x2000000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((unsigned char *)this + 162) = v6;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 16) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 33) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 32) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 31) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 34) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 14) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 29) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 18) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 38) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 19) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 20) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 17) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 26) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 25) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v10 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)((char *)this + 164) = v3;
  *((void *)this + 3) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)((char *)this + 164) = v3;
  *((void *)this + 1) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 36) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000) == 0)
  {
LABEL_33:
    if ((v2 & 0x10) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v12 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 24) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 9) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_72;
  }
LABEL_71:
  char v14 = *((unsigned char *)a2 + 161);
  v3 |= 0x1000000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((unsigned char *)this + 161) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_73;
  }
LABEL_72:
  char v15 = *((unsigned char *)a2 + 160);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 164) = v3;
  *((unsigned char *)this + 160) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_37:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 28) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_75;
  }
LABEL_74:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 22) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x400) == 0) {
      goto LABEL_40;
    }
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 23) = v4;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_40:
    if ((v2 & 0x100) == 0) {
      goto LABEL_41;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 15) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_41:
    if ((v2 & 0x100000000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 164) = v3;
  *((_DWORD *)this + 13) = v4;
  if ((*(void *)((unsigned char *)a2 + 164) & 0x100000000) == 0) {
    return *(float *)&v4;
  }
LABEL_78:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *(void *)((char *)this + 164) = v3 | 0x100000000;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  if (a1 != a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((CMMsl::CalorieControllerMETsConsumed *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CalorieControllerMETsConsumed *a2, CMMsl::CalorieControllerMETsConsumed *a3)
{
  uint64_t v3 = *(void *)((char *)this + 164);
  *(void *)((char *)this + 164) = *(void *)((char *)a2 + 164);
  *(void *)((char *)a2 + 164) = v3;
  int v4 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v3) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  int v8 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v8;
  int v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  int v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  int v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  LOBYTE(v3) = *((unsigned char *)this + 162);
  *((unsigned char *)this + 162) = *((unsigned char *)a2 + 162);
  *((unsigned char *)a2 + 162) = v3;
  LODWORD(v12) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  LODWORD(v12) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v12;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v12) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v12;
  LODWORD(v12) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v12;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v12) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v12) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v12;
  LODWORD(v12) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v12) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  LODWORD(v12) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  LODWORD(v12) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v12;
  LODWORD(v14) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 161);
  *((unsigned char *)this + 161) = *((unsigned char *)a2 + 161);
  *((unsigned char *)a2 + 161) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v14;
  LODWORD(v12) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v12;
  LODWORD(v12) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  LODWORD(v12) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  LODWORD(v14) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  float result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640C68;
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(void *)(a2 + 164) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  float result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::formatText(CMMsl::CalorieControllerMETsConsumed *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activity");
    uint64_t v5 = *(void *)((char *)this + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "avgTruthMets", *((float *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "basalCalories");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "basalMets", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "computeTime", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "currentPace", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "distanceSource");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "duration", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "elevationAscended");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "gradeType");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "heartRate", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "isMotionOverrideSet");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "isStanding");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "isStored");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "now", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "pedDistance", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "pedRawDistance", *((float *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "pushCount");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rawFMMets", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rawHRMets", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "rawTruthMets", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rawWRMets", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "recordInterval", *((double *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "startTime", *((float *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "stepBegin", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "stepCount");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "stepDuration", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "stepEnd", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "totalCalories");
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "userMets", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "vectorMag", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "vectorMagCmSimOnly", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 38));
  if ((*(void *)((unsigned char *)this + 164) & 0x400000000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(a2, "wrMets", *((float *)this + 39));
LABEL_40:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CalorieControllerMETsConsumed::readFrom(CMMsl::CalorieControllerMETsConsumed *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(void *)((char *)this + 164) |= 0x2000000uLL;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v20);
        goto LABEL_240;
      case 2u:
        *(void *)((char *)this + 164) |= 0x80uLL;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v21);
        goto LABEL_240;
      case 3u:
        *(void *)((char *)this + 164) |= 0x10000uLL;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v22);
        goto LABEL_240;
      case 4u:
        *(void *)((char *)this + 164) |= 8uLL;
        unint64_t v23 = *((void *)a2 + 1);
        unint64_t v24 = *((void *)a2 + 2);
        uint64_t v25 = *(void *)a2;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          do
          {
            unint64_t v29 = v23 + 1;
            *((void *)a2 + 1) = v23 + 1;
            char v30 = *(unsigned char *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_250;
            }
            v26 += 7;
            unint64_t v23 = v29;
            BOOL v14 = v27++ > 8;
          }
          while (!v14);
LABEL_176:
          LODWORD(v28) = 0;
          goto LABEL_250;
        }
        char v131 = 0;
        unsigned int v132 = 0;
        uint64_t v28 = 0;
        if (v24 <= v23) {
          unint64_t v24 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v133 = v23 + 1;
            char v134 = *(unsigned char *)(v25 + v23);
            *((void *)a2 + 1) = v133;
            v28 |= (unint64_t)(v134 & 0x7F) << v131;
            if (v134 < 0)
            {
              v131 += 7;
              unint64_t v23 = v133;
              BOOL v14 = v132++ > 8;
              if (v14) {
                goto LABEL_176;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v28) = 0;
            }
          }
          break;
        }
LABEL_250:
        *((_DWORD *)this + 8) = v28;
        goto LABEL_242;
      case 5u:
        *(void *)((char *)this + 164) |= 0x40000000uLL;
        unint64_t v31 = *((void *)a2 + 1);
        if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v31);
        goto LABEL_240;
      case 6u:
        *(void *)((char *)this + 164) |= 0x400000000uLL;
        unint64_t v32 = *((void *)a2 + 1);
        if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v32);
        goto LABEL_240;
      case 7u:
        *(void *)((char *)this + 164) |= 0x400000uLL;
        unint64_t v33 = *((void *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v33);
        goto LABEL_240;
      case 8u:
        *(void *)((char *)this + 164) |= 0x20uLL;
        unint64_t v34 = *((void *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v34);
        goto LABEL_240;
      case 9u:
        *(void *)((char *)this + 164) |= 0x40uLL;
        unint64_t v35 = *((void *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v35);
        goto LABEL_240;
      case 0xAu:
        *(void *)((char *)this + 164) |= 2uLL;
        unint64_t v36 = *((void *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v36);
        uint64_t v37 = *((void *)a2 + 1) + 8;
        goto LABEL_241;
      case 0xBu:
        *(void *)((char *)this + 164) |= 0x2000000000uLL;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 >= *((void *)a2 + 2))
        {
          BOOL v41 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v39 = v38 + 1;
          int v40 = *(unsigned __int8 *)(*(void *)a2 + v38);
          *((void *)a2 + 1) = v39;
          BOOL v41 = v40 != 0;
        }
        *((unsigned char *)this + 162) = v41;
        goto LABEL_242;
      case 0xCu:
        *(void *)((char *)this + 164) |= 0x800uLL;
        unint64_t v42 = *((void *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v42);
        goto LABEL_240;
      case 0xDu:
        *(void *)((char *)this + 164) |= 0x10000000uLL;
        unint64_t v43 = *((void *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v43);
        goto LABEL_240;
      case 0xEu:
        *(void *)((char *)this + 164) |= 0x8000000uLL;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v45 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          do
          {
            unint64_t v50 = v44 + 1;
            *((void *)a2 + 1) = v44 + 1;
            char v51 = *(unsigned char *)(v46 + v44);
            v49 |= (unint64_t)(v51 & 0x7F) << v47;
            if ((v51 & 0x80) == 0) {
              goto LABEL_254;
            }
            v47 += 7;
            unint64_t v44 = v50;
            BOOL v14 = v48++ > 8;
          }
          while (!v14);
LABEL_185:
          LODWORD(v49) = 0;
          goto LABEL_254;
        }
        char v135 = 0;
        unsigned int v136 = 0;
        uint64_t v49 = 0;
        if (v45 <= v44) {
          unint64_t v45 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v45 == v44)
          {
            LODWORD(v49) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v137 = v44 + 1;
            char v138 = *(unsigned char *)(v46 + v44);
            *((void *)a2 + 1) = v137;
            v49 |= (unint64_t)(v138 & 0x7F) << v135;
            if (v138 < 0)
            {
              v135 += 7;
              unint64_t v44 = v137;
              BOOL v14 = v136++ > 8;
              if (v14) {
                goto LABEL_185;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v49) = 0;
            }
          }
          break;
        }
LABEL_254:
        *((_DWORD *)this + 32) = v49;
        goto LABEL_242;
      case 0xFu:
        *(void *)((char *)this + 164) |= 0x4000000uLL;
        unint64_t v52 = *((void *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v52);
        goto LABEL_240;
      case 0x10u:
        *(void *)((char *)this + 164) |= 0x20000000uLL;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v53);
        goto LABEL_240;
      case 0x11u:
        *(void *)((char *)this + 164) |= 0x200uLL;
        unint64_t v54 = *((void *)a2 + 1);
        if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v54);
        goto LABEL_240;
      case 0x12u:
        *(void *)((char *)this + 164) |= 0x1000000uLL;
        unint64_t v55 = *((void *)a2 + 1);
        if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v55);
        goto LABEL_240;
      case 0x13u:
        *(void *)((char *)this + 164) |= 0x2000uLL;
        unint64_t v56 = *((void *)a2 + 1);
        unint64_t v57 = *((void *)a2 + 2);
        uint64_t v58 = *(void *)a2;
        if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v61 = 0;
          do
          {
            unint64_t v62 = v56 + 1;
            *((void *)a2 + 1) = v56 + 1;
            char v63 = *(unsigned char *)(v58 + v56);
            v61 |= (unint64_t)(v63 & 0x7F) << v59;
            if ((v63 & 0x80) == 0) {
              goto LABEL_258;
            }
            v59 += 7;
            unint64_t v56 = v62;
            BOOL v14 = v60++ > 8;
          }
          while (!v14);
LABEL_192:
          LODWORD(v61) = 0;
          goto LABEL_258;
        }
        char v139 = 0;
        unsigned int v140 = 0;
        uint64_t v61 = 0;
        if (v57 <= v56) {
          unint64_t v57 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v57 == v56)
          {
            LODWORD(v61) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v141 = v56 + 1;
            char v142 = *(unsigned char *)(v58 + v56);
            *((void *)a2 + 1) = v141;
            v61 |= (unint64_t)(v142 & 0x7F) << v139;
            if (v142 < 0)
            {
              v139 += 7;
              unint64_t v56 = v141;
              BOOL v14 = v140++ > 8;
              if (v14) {
                goto LABEL_192;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v61) = 0;
            }
          }
          break;
        }
LABEL_258:
        *((_DWORD *)this + 18) = v61;
        goto LABEL_242;
      case 0x14u:
        *(void *)((char *)this + 164) |= 0x200000000uLL;
        unint64_t v64 = *((void *)a2 + 1);
        if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v64);
        goto LABEL_240;
      case 0x15u:
        *(void *)((char *)this + 164) |= 0x4000uLL;
        unint64_t v65 = *((void *)a2 + 1);
        if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v65);
        goto LABEL_240;
      case 0x16u:
        *(void *)((char *)this + 164) |= 0x8000uLL;
        unint64_t v66 = *((void *)a2 + 1);
        if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v66);
        goto LABEL_240;
      case 0x17u:
        *(void *)((char *)this + 164) |= 0x1000uLL;
        unint64_t v67 = *((void *)a2 + 1);
        unint64_t v68 = *((void *)a2 + 2);
        uint64_t v69 = *(void *)a2;
        if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v72 = 0;
          do
          {
            unint64_t v73 = v67 + 1;
            *((void *)a2 + 1) = v67 + 1;
            char v74 = *(unsigned char *)(v69 + v67);
            v72 |= (unint64_t)(v74 & 0x7F) << v70;
            if ((v74 & 0x80) == 0) {
              goto LABEL_262;
            }
            v70 += 7;
            unint64_t v67 = v73;
            BOOL v14 = v71++ > 8;
          }
          while (!v14);
LABEL_199:
          LODWORD(v72) = 0;
          goto LABEL_262;
        }
        char v143 = 0;
        unsigned int v144 = 0;
        uint64_t v72 = 0;
        if (v68 <= v67) {
          unint64_t v68 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v68 == v67)
          {
            LODWORD(v72) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v145 = v67 + 1;
            char v146 = *(unsigned char *)(v69 + v67);
            *((void *)a2 + 1) = v145;
            v72 |= (unint64_t)(v146 & 0x7F) << v143;
            if (v146 < 0)
            {
              v143 += 7;
              unint64_t v67 = v145;
              BOOL v14 = v144++ > 8;
              if (v14) {
                goto LABEL_199;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v72) = 0;
            }
          }
          break;
        }
LABEL_262:
        *((_DWORD *)this + 17) = v72;
        goto LABEL_242;
      case 0x18u:
        *(void *)((char *)this + 164) |= 0x200000uLL;
        unint64_t v75 = *((void *)a2 + 1);
        if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v75);
        goto LABEL_240;
      case 0x19u:
        *(void *)((char *)this + 164) |= 0x100000uLL;
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v76);
        goto LABEL_240;
      case 0x1Au:
        *(void *)((char *)this + 164) |= 4uLL;
        unint64_t v77 = *((void *)a2 + 1);
        unint64_t v78 = *((void *)a2 + 2);
        uint64_t v79 = *(void *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v82 = 0;
          do
          {
            unint64_t v83 = v77 + 1;
            *((void *)a2 + 1) = v77 + 1;
            char v84 = *(unsigned char *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_266;
            }
            v80 += 7;
            unint64_t v77 = v83;
            BOOL v14 = v81++ > 8;
          }
          while (!v14);
LABEL_206:
          uint64_t v82 = 0;
          goto LABEL_266;
        }
        char v147 = 0;
        unsigned int v148 = 0;
        uint64_t v82 = 0;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            uint64_t v82 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v149 = v77 + 1;
            char v150 = *(unsigned char *)(v79 + v77);
            *((void *)a2 + 1) = v149;
            v82 |= (unint64_t)(v150 & 0x7F) << v147;
            if (v150 < 0)
            {
              v147 += 7;
              unint64_t v77 = v149;
              BOOL v14 = v148++ > 8;
              if (v14) {
                goto LABEL_206;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v82 = 0;
            }
          }
          break;
        }
LABEL_266:
        *((void *)this + 3) = v82;
        goto LABEL_242;
      case 0x1Bu:
        *(void *)((char *)this + 164) |= 1uLL;
        unint64_t v85 = *((void *)a2 + 1);
        unint64_t v86 = *((void *)a2 + 2);
        uint64_t v87 = *(void *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v90 = 0;
          do
          {
            unint64_t v91 = v85 + 1;
            *((void *)a2 + 1) = v85 + 1;
            char v92 = *(unsigned char *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0) {
              goto LABEL_282;
            }
            v88 += 7;
            unint64_t v85 = v91;
            BOOL v14 = v89++ > 8;
          }
          while (!v14);
LABEL_213:
          uint64_t v90 = 0;
          goto LABEL_282;
        }
        char v151 = 0;
        unsigned int v152 = 0;
        uint64_t v90 = 0;
        if (v86 <= v85) {
          unint64_t v86 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v86 == v85)
          {
            uint64_t v90 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v153 = v85 + 1;
            char v154 = *(unsigned char *)(v87 + v85);
            *((void *)a2 + 1) = v153;
            v90 |= (unint64_t)(v154 & 0x7F) << v151;
            if (v154 < 0)
            {
              v151 += 7;
              unint64_t v85 = v153;
              BOOL v14 = v152++ > 8;
              if (v14) {
                goto LABEL_213;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v90 = 0;
            }
          }
          break;
        }
LABEL_282:
        *((void *)this + 1) = v90;
        goto LABEL_242;
      case 0x1Cu:
        *(void *)((char *)this + 164) |= 0x80000000uLL;
        unint64_t v93 = *((void *)a2 + 1);
        if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v93);
        goto LABEL_240;
      case 0x1Du:
        *(void *)((char *)this + 164) |= 0x80000uLL;
        unint64_t v94 = *((void *)a2 + 1);
        unint64_t v95 = *((void *)a2 + 2);
        uint64_t v96 = *(void *)a2;
        if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
        {
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v99 = 0;
          do
          {
            unint64_t v100 = v94 + 1;
            *((void *)a2 + 1) = v94 + 1;
            char v101 = *(unsigned char *)(v96 + v94);
            v99 |= (unint64_t)(v101 & 0x7F) << v97;
            if ((v101 & 0x80) == 0) {
              goto LABEL_271;
            }
            v97 += 7;
            unint64_t v94 = v100;
            BOOL v14 = v98++ > 8;
          }
          while (!v14);
LABEL_220:
          LODWORD(v99) = 0;
          goto LABEL_271;
        }
        char v155 = 0;
        unsigned int v156 = 0;
        uint64_t v99 = 0;
        if (v95 <= v94) {
          unint64_t v95 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v95 == v94)
          {
            LODWORD(v99) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v157 = v94 + 1;
            char v158 = *(unsigned char *)(v96 + v94);
            *((void *)a2 + 1) = v157;
            v99 |= (unint64_t)(v158 & 0x7F) << v155;
            if (v158 < 0)
            {
              v155 += 7;
              unint64_t v94 = v157;
              BOOL v14 = v156++ > 8;
              if (v14) {
                goto LABEL_220;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v99) = 0;
            }
          }
          break;
        }
LABEL_271:
        *((_DWORD *)this + 24) = v99;
        goto LABEL_242;
      case 0x1Eu:
        *(void *)((char *)this + 164) |= 0x10uLL;
        unint64_t v102 = *((void *)a2 + 1);
        unint64_t v103 = *((void *)a2 + 2);
        uint64_t v104 = *(void *)a2;
        if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
        {
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v107 = 0;
          do
          {
            unint64_t v108 = v102 + 1;
            *((void *)a2 + 1) = v102 + 1;
            char v109 = *(unsigned char *)(v104 + v102);
            v107 |= (unint64_t)(v109 & 0x7F) << v105;
            if ((v109 & 0x80) == 0) {
              goto LABEL_275;
            }
            v105 += 7;
            unint64_t v102 = v108;
            BOOL v14 = v106++ > 8;
          }
          while (!v14);
LABEL_227:
          LODWORD(v107) = 0;
          goto LABEL_275;
        }
        char v159 = 0;
        unsigned int v160 = 0;
        uint64_t v107 = 0;
        if (v103 <= v102) {
          unint64_t v103 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v103 == v102)
          {
            LODWORD(v107) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v161 = v102 + 1;
            char v162 = *(unsigned char *)(v104 + v102);
            *((void *)a2 + 1) = v161;
            v107 |= (unint64_t)(v162 & 0x7F) << v159;
            if (v162 < 0)
            {
              v159 += 7;
              unint64_t v102 = v161;
              BOOL v14 = v160++ > 8;
              if (v14) {
                goto LABEL_227;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v107) = 0;
            }
          }
          break;
        }
LABEL_275:
        *((_DWORD *)this + 9) = v107;
        goto LABEL_242;
      case 0x1Fu:
        *(void *)((char *)this + 164) |= 0x1000000000uLL;
        unint64_t v110 = *((void *)a2 + 1);
        if (v110 >= *((void *)a2 + 2))
        {
          BOOL v113 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v111 = v110 + 1;
          int v112 = *(unsigned __int8 *)(*(void *)a2 + v110);
          *((void *)a2 + 1) = v111;
          BOOL v113 = v112 != 0;
        }
        *((unsigned char *)this + 161) = v113;
        goto LABEL_242;
      case 0x20u:
        *(void *)((char *)this + 164) |= 0x800000000uLL;
        unint64_t v114 = *((void *)a2 + 1);
        if (v114 >= *((void *)a2 + 2))
        {
          BOOL v117 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v115 = v114 + 1;
          int v116 = *(unsigned __int8 *)(*(void *)a2 + v114);
          *((void *)a2 + 1) = v115;
          BOOL v117 = v116 != 0;
        }
        *((unsigned char *)this + 160) = v117;
        goto LABEL_242;
      case 0x21u:
        *(void *)((char *)this + 164) |= 0x800000uLL;
        unint64_t v118 = *((void *)a2 + 1);
        if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v118);
        goto LABEL_240;
      case 0x22u:
        *(void *)((char *)this + 164) |= 0x20000uLL;
        unint64_t v119 = *((void *)a2 + 1);
        if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v119);
        goto LABEL_240;
      case 0x23u:
        *(void *)((char *)this + 164) |= 0x40000uLL;
        unint64_t v120 = *((void *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v120);
        goto LABEL_240;
      case 0x24u:
        *(void *)((char *)this + 164) |= 0x400uLL;
        unint64_t v121 = *((void *)a2 + 1);
        unint64_t v122 = *((void *)a2 + 2);
        uint64_t v123 = *(void *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          do
          {
            unint64_t v127 = v121 + 1;
            *((void *)a2 + 1) = v121 + 1;
            char v128 = *(unsigned char *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0) {
              goto LABEL_279;
            }
            v124 += 7;
            unint64_t v121 = v127;
            BOOL v14 = v125++ > 8;
          }
          while (!v14);
LABEL_238:
          LODWORD(v126) = 0;
          goto LABEL_279;
        }
        char v163 = 0;
        unsigned int v164 = 0;
        uint64_t v126 = 0;
        if (v122 <= v121) {
          unint64_t v122 = *((void *)a2 + 1);
        }
        break;
      case 0x25u:
        *(void *)((char *)this + 164) |= 0x100uLL;
        unint64_t v129 = *((void *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v129);
        goto LABEL_240;
      case 0x26u:
        *(void *)((char *)this + 164) |= 0x100000000uLL;
        unint64_t v130 = *((void *)a2 + 1);
        if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v130);
LABEL_240:
          uint64_t v37 = *((void *)a2 + 1) + 4;
LABEL_241:
          *((void *)a2 + 1) = v37;
        }
        else
        {
LABEL_169:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_242;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v122 == v121)
      {
        LODWORD(v126) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_279;
      }
      unint64_t v165 = v121 + 1;
      char v166 = *(unsigned char *)(v123 + v121);
      *((void *)a2 + 1) = v165;
      v126 |= (unint64_t)(v166 & 0x7F) << v163;
      if ((v166 & 0x80) == 0) {
        break;
      }
      v163 += 7;
      unint64_t v121 = v165;
      BOOL v14 = v164++ > 8;
      if (v14) {
        goto LABEL_238;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v126) = 0;
    }
LABEL_279:
    *((_DWORD *)this + 15) = v126;
LABEL_242:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_242;
  }
  return result;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 164);
  if ((v4 & 0x2000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 120));
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0) {
      goto LABEL_38;
    }
LABEL_76:
    this = PB::Writer::write(a2, *(float *)(v3 + 52));
    if ((*(void *)(v3 + 164) & 0x100000000) == 0) {
      return this;
    }
    goto LABEL_77;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) != 0) {
    goto LABEL_76;
  }
LABEL_38:
  if ((v4 & 0x100000000) == 0) {
    return this;
  }
LABEL_77:
  float v5 = *(float *)(v3 + 148);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::CalorieControllerMETsConsumed::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 164);
  uint64_t v3 = *(void *)(a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x100000000) == 0;
  if ((v2 & 0x100000000) != 0) {
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  }
  return v4;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::hash_value(CMMsl::CalorieControllerMETsConsumed *this)
{
  uint64_t v1 = *(void *)((char *)this + 164);
  if ((v1 & 0x2000000) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_104:
    uint64_t v74 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_6;
    }
LABEL_105:
    uint64_t v73 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_106;
  }
  float v62 = *((float *)this + 30);
  if (v62 == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = LODWORD(v62);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_104;
  }
LABEL_3:
  float v3 = *((float *)this + 12);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v74 = v4;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_105;
  }
LABEL_6:
  float v5 = *((float *)this + 21);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v73 = v6;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    uint64_t v72 = *((int *)this + 8);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_10;
    }
LABEL_107:
    uint64_t v71 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_13;
    }
LABEL_108:
    uint64_t v70 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_16;
    }
LABEL_109:
    uint64_t v69 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_19;
    }
LABEL_110:
    uint64_t v68 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_22;
    }
LABEL_111:
    uint64_t v67 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_25;
    }
LABEL_112:
    double v66 = 0.0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_113;
  }
LABEL_106:
  uint64_t v72 = 0;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_107;
  }
LABEL_10:
  float v7 = *((float *)this + 35);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v71 = v8;
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_108;
  }
LABEL_13:
  float v9 = *((float *)this + 39);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v70 = v10;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_109;
  }
LABEL_16:
  float v11 = *((float *)this + 27);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v69 = v12;
  if ((v1 & 0x20) == 0) {
    goto LABEL_110;
  }
LABEL_19:
  float v13 = *((float *)this + 10);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v68 = v14;
  if ((v1 & 0x40) == 0) {
    goto LABEL_111;
  }
LABEL_22:
  float v15 = *((float *)this + 11);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v67 = v16;
  if ((v1 & 2) == 0) {
    goto LABEL_112;
  }
LABEL_25:
  double v17 = *((double *)this + 2);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  double v66 = v17;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_28:
    uint64_t v65 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_114:
    uint64_t v64 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_32;
    }
LABEL_115:
    uint64_t v21 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_116;
  }
LABEL_113:
  uint64_t v65 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_114;
  }
LABEL_29:
  float v18 = *((float *)this + 16);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  uint64_t v64 = v19;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_115;
  }
LABEL_32:
  float v20 = *((float *)this + 33);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x8000000) != 0)
  {
LABEL_36:
    uint64_t v22 = *((int *)this + 32);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_37;
    }
LABEL_117:
    uint64_t v24 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_41;
    }
LABEL_118:
    uint64_t v26 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_119:
    uint64_t v28 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_49;
    }
LABEL_120:
    uint64_t v30 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_121;
  }
LABEL_116:
  uint64_t v22 = 0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_117;
  }
LABEL_37:
  float v23 = *((float *)this + 31);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_118;
  }
LABEL_41:
  float v25 = *((float *)this + 34);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = LODWORD(v25);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_119;
  }
LABEL_45:
  float v27 = *((float *)this + 14);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_120;
  }
LABEL_49:
  float v29 = *((float *)this + 29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = LODWORD(v29);
  }
  if ((v1 & 0x2000) != 0)
  {
LABEL_53:
    uint64_t v31 = *((int *)this + 18);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_54;
    }
LABEL_122:
    uint64_t v33 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_58;
    }
LABEL_123:
    uint64_t v35 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_62;
    }
LABEL_124:
    uint64_t v37 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_66;
    }
    goto LABEL_125;
  }
LABEL_121:
  uint64_t v31 = 0;
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_122;
  }
LABEL_54:
  float v32 = *((float *)this + 38);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_123;
  }
LABEL_58:
  float v34 = *((float *)this + 19);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_124;
  }
LABEL_62:
  float v36 = *((float *)this + 20);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = LODWORD(v36);
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_66:
    uint64_t v38 = *((int *)this + 17);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_67;
    }
LABEL_126:
    uint64_t v40 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_71;
    }
LABEL_127:
    uint64_t v42 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_75;
    }
    goto LABEL_128;
  }
LABEL_125:
  uint64_t v38 = 0;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_126;
  }
LABEL_67:
  float v39 = *((float *)this + 26);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_127;
  }
LABEL_71:
  float v41 = *((float *)this + 25);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 4) != 0)
  {
LABEL_75:
    uint64_t v43 = *((void *)this + 3);
    if (v1) {
      goto LABEL_76;
    }
    goto LABEL_129;
  }
LABEL_128:
  uint64_t v43 = 0;
  if (v1)
  {
LABEL_76:
    uint64_t v44 = *((void *)this + 1);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_77;
    }
LABEL_130:
    uint64_t v46 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_80;
    }
    goto LABEL_131;
  }
LABEL_129:
  uint64_t v44 = 0;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_130;
  }
LABEL_77:
  float v45 = *((float *)this + 36);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_80:
    uint64_t v47 = *((int *)this + 24);
    if ((v1 & 0x10) != 0) {
      goto LABEL_81;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v47 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_81:
    uint64_t v48 = *((int *)this + 9);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_82;
    }
    goto LABEL_133;
  }
LABEL_132:
  uint64_t v48 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_82:
    uint64_t v49 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_134;
  }
LABEL_133:
  uint64_t v49 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_83:
    uint64_t v50 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_84;
    }
LABEL_135:
    uint64_t v52 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_87;
    }
LABEL_136:
    uint64_t v54 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_90;
    }
LABEL_137:
    uint64_t v56 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_93;
    }
    goto LABEL_138;
  }
LABEL_134:
  uint64_t v50 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_135;
  }
LABEL_84:
  float v51 = *((float *)this + 28);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_136;
  }
LABEL_87:
  float v53 = *((float *)this + 22);
  uint64_t v54 = LODWORD(v53);
  if (v53 == 0.0) {
    uint64_t v54 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_137;
  }
LABEL_90:
  float v55 = *((float *)this + 23);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_93:
    uint64_t v57 = *((unsigned int *)this + 15);
    if ((v1 & 0x100) != 0) {
      goto LABEL_94;
    }
    goto LABEL_139;
  }
LABEL_138:
  uint64_t v57 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_94:
    float v58 = *((float *)this + 13);
    uint64_t v59 = LODWORD(v58);
    if (v58 == 0.0) {
      uint64_t v59 = 0;
    }
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_97;
    }
LABEL_140:
    uint64_t v61 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(void *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
  }
LABEL_139:
  uint64_t v59 = 0;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_140;
  }
LABEL_97:
  float v60 = *((float *)this + 37);
  uint64_t v61 = LODWORD(v60);
  if (v60 == 0.0) {
    uint64_t v61 = 0;
  }
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(void *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this)
{
  *(void *)this = &unk_270640CA0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_270640CA0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::CalorimetryPauseEvent::~CalorimetryPauseEvent(CMMsl::CalorimetryPauseEvent *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this, const CMMsl::CalorimetryPauseEvent *a2)
{
  *(void *)this = &unk_270640CA0;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = &unk_270640CA0;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v7 = &unk_270640CA0;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void *v7;
  char v8;
  int v9;

  if (a1 != a2)
  {
    float v7 = &unk_270640CA0;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CalorimetryPauseEvent *a2, CMMsl::CalorimetryPauseEvent *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270640CA0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_270640CA0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::formatText(CMMsl::CalorimetryPauseEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "pause");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CalorimetryPauseEvent::readFrom(CMMsl::CalorimetryPauseEvent *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CalorimetryPauseEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::CalorimetryPauseEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::hash_value(CMMsl::CalorimetryPauseEvent *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this)
{
  *(void *)this = &unk_270640CD8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = &unk_270640CD8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::CatherineHealthKitData::~CatherineHealthKitData(CMMsl::CatherineHealthKitData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this, const CMMsl::CatherineHealthKitData *a2)
{
  *(void *)this = &unk_270640CD8;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 36) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 36))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 36) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  uint64_t v6 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 36) = v3;
  *(void *)(this + 16) = v6;
  if ((*((unsigned char *)a2 + 36) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, const CMMsl::CatherineHealthKitData *a2)
{
  if ((const CMMsl::CatherineHealthKitData *)a1 != a2)
  {
    CMMsl::CatherineHealthKitData::CatherineHealthKitData((uint64_t)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    *(void *)&long long v3 = v10;
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v3;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CatherineHealthKitData *a2, CMMsl::CatherineHealthKitData *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640CD8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640CD8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270640CD8;
    uint64_t v3 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::CatherineHealthKitData::formatText(CMMsl::CatherineHealthKitData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hkType");
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "hr", *((double *)this + 2));
  if ((*((unsigned char *)this + 36) & 4) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CatherineHealthKitData::readFrom(CMMsl::CatherineHealthKitData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_53;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 36) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      case 2u:
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      case 3u:
        *((unsigned char *)this + 36) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_47:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 36) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_52;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_51:
              unint64_t v2 = v28 + 1;
              goto LABEL_52;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_51;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_52;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_52:
        *((_DWORD *)this + 8) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CatherineHealthKitData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::CatherineHealthKitData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 8) == 0;
  if ((*(unsigned char *)(a1 + 36) & 8) != 0) {
    return (*(unsigned char *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::CatherineHealthKitData::hash_value(CMMsl::CatherineHealthKitData *this)
{
  if ((*((unsigned char *)this + 36) & 4) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 36)) {
      goto LABEL_3;
    }
LABEL_13:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 2) != 0)
  {
LABEL_6:
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
  }
LABEL_14:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v4 = *((unsigned int *)this + 8);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this)
{
  *(void *)this = &unk_270640D10;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = &unk_270640D10;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::ClefCalibration::~ClefCalibration(CMMsl::ClefCalibration *this)
{
  *(void *)this = &unk_270640D10;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640D10;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270640D10;
  double v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this, const CMMsl::ClefCalibration *a2)
{
  *(void *)this = &unk_270640D10;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 9);
    char v3 = 2;
    *(unsigned char *)(this + 64) = 2;
    *(_DWORD *)(this + 36) = v4;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 11);
    v3 |= 8u;
    *(unsigned char *)(this + 64) = v3;
    *(_DWORD *)(this + 44) = v5;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if (v2)
  {
    int v7 = *((_DWORD *)a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(this + 64) = v3;
    *(_DWORD *)(this + 32) = v7;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 4u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v8;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v9 = *((unsigned char *)a2 + 60);
  v3 |= 0x80u;
  *(unsigned char *)(this + 64) = v3;
  *(unsigned char *)(this + 60) = v9;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x10u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v10;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x20u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v11;
  if ((*((unsigned char *)a2 + 64) & 0x40) != 0)
  {
LABEL_12:
    int v6 = *((_DWORD *)a2 + 14);
    *(unsigned char *)(this + 64) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v6;
  }
LABEL_13:
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_2570EF468(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, const CMMsl::ClefCalibration *a2)
{
  if ((const CMMsl::ClefCalibration *)a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    int v5 = &unk_270640D10;
    int v7 = (void **)&v6;
    sub_2572C6D4C(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ClefCalibration *a2, CMMsl::ClefCalibration *a3)
{
  int v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  int v5 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  int v6 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LOBYTE(v7) = *(unsigned char *)(this + 60);
  *(unsigned char *)(this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v7;
  int v8 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v9 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  int v10 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  uint64_t v11 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  return this;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640D10;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(void *)(a1 + 8))
  {
    sub_2572C6DA0((void *)(a1 + 8));
    operator delete(*(void **)v4);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    int v5 = &unk_270640D10;
    int v7 = (void **)&v6;
    sub_2572C6D4C(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::ClefCalibration::formatText(CMMsl::ClefCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "gain");
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location");
  if ((*((unsigned char *)this + 64) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "offset");
LABEL_5:
  uint64_t v6 = (uint64_t *)*((void *)this + 1);
  int v7 = (uint64_t *)*((void *)this + 2);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "point");
  }
  char v9 = *((unsigned char *)this + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensor");
    char v9 = *((unsigned char *)this + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "tempCalA");
  char v9 = *((unsigned char *)this + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "tempCalB");
  char v9 = *((unsigned char *)this + 64);
  if ((v9 & 0x80) == 0)
  {
LABEL_11:
    if ((v9 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "tempCalEnabled");
  if ((*((unsigned char *)this + 64) & 0x40) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "tempCalT0");
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ClefCalibration::readFrom(CMMsl::ClefCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 64) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_148;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_108:
          LODWORD(v26) = 0;
          goto LABEL_148;
        }
        char v93 = 0;
        unsigned int v94 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v95 = v21 + 1;
            char v96 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v95;
            v26 |= (unint64_t)(v96 & 0x7F) << v93;
            if (v96 < 0)
            {
              v93 += 7;
              unint64_t v21 = v95;
              BOOL v14 = v94++ > 8;
              if (v14) {
                goto LABEL_108;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_148:
        *((_DWORD *)this + 9) = v26;
        goto LABEL_20;
      case 2u:
        *((unsigned char *)this + 64) |= 8u;
        unint64_t v57 = *((void *)a2 + 1);
        unint64_t v58 = *((void *)a2 + 2);
        uint64_t v59 = *(void *)a2;
        if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          do
          {
            unint64_t v63 = v57 + 1;
            *((void *)a2 + 1) = v57 + 1;
            char v64 = *(unsigned char *)(v59 + v57);
            v62 |= (unint64_t)(v64 & 0x7F) << v60;
            if ((v64 & 0x80) == 0) {
              goto LABEL_151;
            }
            v60 += 7;
            unint64_t v57 = v63;
            BOOL v14 = v61++ > 8;
          }
          while (!v14);
LABEL_115:
          LODWORD(v62) = 0;
          goto LABEL_151;
        }
        char v97 = 0;
        unsigned int v98 = 0;
        uint64_t v62 = 0;
        if (v58 <= v57) {
          unint64_t v58 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v58 == v57)
          {
            LODWORD(v62) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v99 = v57 + 1;
            char v100 = *(unsigned char *)(v59 + v57);
            *((void *)a2 + 1) = v99;
            v62 |= (unint64_t)(v100 & 0x7F) << v97;
            if (v100 < 0)
            {
              v97 += 7;
              unint64_t v57 = v99;
              BOOL v14 = v98++ > 8;
              if (v14) {
                goto LABEL_115;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v62) = 0;
            }
          }
          break;
        }
LABEL_151:
        *((_DWORD *)this + 11) = v62;
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          do
          {
            unint64_t v39 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v40 = *(unsigned char *)(v35 + v33);
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if ((v40 & 0x80) == 0) {
              goto LABEL_139;
            }
            v36 += 7;
            unint64_t v33 = v39;
            BOOL v14 = v37++ > 8;
          }
          while (!v14);
LABEL_87:
          LODWORD(v38) = 0;
          goto LABEL_139;
        }
        char v81 = 0;
        unsigned int v82 = 0;
        uint64_t v38 = 0;
        if (v34 <= v33) {
          unint64_t v34 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v34 == v33)
          {
            LODWORD(v38) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v83 = v33 + 1;
            char v84 = *(unsigned char *)(v35 + v33);
            *((void *)a2 + 1) = v83;
            v38 |= (unint64_t)(v84 & 0x7F) << v81;
            if (v84 < 0)
            {
              v81 += 7;
              unint64_t v33 = v83;
              BOOL v14 = v82++ > 8;
              if (v14) {
                goto LABEL_87;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v38) = 0;
            }
          }
          break;
        }
LABEL_139:
        *((_DWORD *)this + 8) = v38;
        goto LABEL_20;
      case 4u:
        *((unsigned char *)this + 64) |= 4u;
        unint64_t v41 = *((void *)a2 + 1);
        unint64_t v42 = *((void *)a2 + 2);
        uint64_t v43 = *(void *)a2;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v46 = 0;
          do
          {
            unint64_t v47 = v41 + 1;
            *((void *)a2 + 1) = v41 + 1;
            char v48 = *(unsigned char *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0) {
              goto LABEL_142;
            }
            v44 += 7;
            unint64_t v41 = v47;
            BOOL v14 = v45++ > 8;
          }
          while (!v14);
LABEL_94:
          LODWORD(v46) = 0;
          goto LABEL_142;
        }
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v46 = 0;
        if (v42 <= v41) {
          unint64_t v42 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v87 = v41 + 1;
            char v88 = *(unsigned char *)(v43 + v41);
            *((void *)a2 + 1) = v87;
            v46 |= (unint64_t)(v88 & 0x7F) << v85;
            if (v88 < 0)
            {
              v85 += 7;
              unint64_t v41 = v87;
              BOOL v14 = v86++ > 8;
              if (v14) {
                goto LABEL_94;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v46) = 0;
            }
          }
          break;
        }
LABEL_142:
        *((_DWORD *)this + 10) = v46;
        goto LABEL_20;
      case 5u:
        *((unsigned char *)this + 64) |= 0x80u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 >= *((void *)a2 + 2))
        {
          BOOL v32 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v30 = v29 + 1;
          int v31 = *(unsigned __int8 *)(*(void *)a2 + v29);
          *((void *)a2 + 1) = v30;
          BOOL v32 = v31 != 0;
        }
        *((unsigned char *)this + 60) = v32;
        goto LABEL_20;
      case 6u:
        *((unsigned char *)this + 64) |= 0x10u;
        unint64_t v65 = *((void *)a2 + 1);
        unint64_t v66 = *((void *)a2 + 2);
        uint64_t v67 = *(void *)a2;
        if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v70 = 0;
          do
          {
            unint64_t v71 = v65 + 1;
            *((void *)a2 + 1) = v65 + 1;
            char v72 = *(unsigned char *)(v67 + v65);
            v70 |= (unint64_t)(v72 & 0x7F) << v68;
            if ((v72 & 0x80) == 0) {
              goto LABEL_154;
            }
            v68 += 7;
            unint64_t v65 = v71;
            BOOL v14 = v69++ > 8;
          }
          while (!v14);
LABEL_122:
          LODWORD(v70) = 0;
          goto LABEL_154;
        }
        char v101 = 0;
        unsigned int v102 = 0;
        uint64_t v70 = 0;
        if (v66 <= v65) {
          unint64_t v66 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v66 == v65)
          {
            LODWORD(v70) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v103 = v65 + 1;
            char v104 = *(unsigned char *)(v67 + v65);
            *((void *)a2 + 1) = v103;
            v70 |= (unint64_t)(v104 & 0x7F) << v101;
            if (v104 < 0)
            {
              v101 += 7;
              unint64_t v65 = v103;
              BOOL v14 = v102++ > 8;
              if (v14) {
                goto LABEL_122;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v70) = 0;
            }
          }
          break;
        }
LABEL_154:
        *((_DWORD *)this + 12) = v70;
        goto LABEL_20;
      case 7u:
        *((unsigned char *)this + 64) |= 0x20u;
        unint64_t v73 = *((void *)a2 + 1);
        unint64_t v74 = *((void *)a2 + 2);
        uint64_t v75 = *(void *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          do
          {
            unint64_t v79 = v73 + 1;
            *((void *)a2 + 1) = v73 + 1;
            char v80 = *(unsigned char *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0) {
              goto LABEL_157;
            }
            v76 += 7;
            unint64_t v73 = v79;
            BOOL v14 = v77++ > 8;
          }
          while (!v14);
LABEL_129:
          LODWORD(v78) = 0;
          goto LABEL_157;
        }
        char v105 = 0;
        unsigned int v106 = 0;
        uint64_t v78 = 0;
        if (v74 <= v73) {
          unint64_t v74 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v107 = v73 + 1;
            char v108 = *(unsigned char *)(v75 + v73);
            *((void *)a2 + 1) = v107;
            v78 |= (unint64_t)(v108 & 0x7F) << v105;
            if (v108 < 0)
            {
              v105 += 7;
              unint64_t v73 = v107;
              BOOL v14 = v106++ > 8;
              if (v14) {
                goto LABEL_129;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v78) = 0;
            }
          }
          break;
        }
LABEL_157:
        *((_DWORD *)this + 13) = v78;
        goto LABEL_20;
      case 8u:
        *((unsigned char *)this + 64) |= 0x40u;
        unint64_t v49 = *((void *)a2 + 1);
        unint64_t v50 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          do
          {
            unint64_t v55 = v49 + 1;
            *((void *)a2 + 1) = v49 + 1;
            char v56 = *(unsigned char *)(v51 + v49);
            v54 |= (unint64_t)(v56 & 0x7F) << v52;
            if ((v56 & 0x80) == 0) {
              goto LABEL_145;
            }
            v52 += 7;
            unint64_t v49 = v55;
            BOOL v14 = v53++ > 8;
          }
          while (!v14);
LABEL_101:
          LODWORD(v54) = 0;
          goto LABEL_145;
        }
        char v89 = 0;
        unsigned int v90 = 0;
        uint64_t v54 = 0;
        if (v50 <= v49) {
          unint64_t v50 = *((void *)a2 + 1);
        }
        break;
      case 9u:
        operator new();
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v50 == v49)
      {
        LODWORD(v54) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_145;
      }
      unint64_t v91 = v49 + 1;
      char v92 = *(unsigned char *)(v51 + v49);
      *((void *)a2 + 1) = v91;
      v54 |= (unint64_t)(v92 & 0x7F) << v89;
      if ((v92 & 0x80) == 0) {
        break;
      }
      v89 += 7;
      unint64_t v49 = v91;
      BOOL v14 = v90++ > 8;
      if (v14) {
        goto LABEL_101;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v54) = 0;
    }
LABEL_145:
    *((_DWORD *)this + 14) = v54;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sub_2570F0278(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::ClefCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 64) & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v4 & 0x40) != 0) {
LABEL_9:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_10:
  uint64_t v6 = *(const PB::Base ***)(v3 + 8);
  char v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    int v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  return this;
}

BOOL CMMsl::ClefCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  int v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & v2 & 0x80) == 0)
  {
    if (((v3 | v2) & 0x80) != 0) {
      return 0;
    }
LABEL_25:
    if ((v2 & 0x10) != 0)
    {
      if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
        return 0;
      }
    }
    else if ((v3 & 0x10) != 0)
    {
      return 0;
    }
    if ((v2 & 0x20) != 0)
    {
      if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
        return 0;
      }
    }
    else if ((v3 & 0x20) != 0)
    {
      return 0;
    }
    if ((v2 & 0x40) != 0)
    {
      if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
        return 0;
      }
    }
    else if ((v3 & 0x40) != 0)
    {
      return 0;
    }
    return sub_2570F0528(*(void *)(a1 + 8), *(void *)(a1 + 16), *(uint64_t **)(a2 + 8), *(void *)(a2 + 16));
  }
  if (*(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60)) {
    goto LABEL_25;
  }
  return 0;
}

BOOL sub_2570F0528(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  char v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::ClefCalibrationPoint::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::ClefCalibration::hash_value(CMMsl::ClefCalibration *this)
{
  if ((*((unsigned char *)this + 64) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 64) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 11);
      if (*((unsigned char *)this + 64)) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if (*((unsigned char *)this + 64))
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 8);
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 64) & 4) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 10);
    if ((*((unsigned char *)this + 64) & 0x80) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 64) & 0x80) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 60);
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 64) & 0x10) != 0)
  {
LABEL_7:
    uint64_t v6 = *((int *)this + 12);
    if ((*((unsigned char *)this + 64) & 0x20) != 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 64) & 0x40) != 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 64) & 0x20) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v7 = *((int *)this + 13);
  if ((*((unsigned char *)this + 64) & 0x40) != 0)
  {
LABEL_9:
    uint64_t v8 = *((int *)this + 14);
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = 0;
LABEL_18:
  unsigned int v10 = (uint64_t *)*((void *)this + 1);
  BOOL v9 = (uint64_t *)*((void *)this + 2);
  if (v10 == v9)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v13 = *v10++;
      uint64_t v12 = v13;
      char v14 = *(unsigned char *)(v13 + 20);
      uint64_t v15 = *(int *)(v13 + 8);
      uint64_t v16 = *(int *)(v13 + 12);
      if ((v14 & 1) == 0) {
        uint64_t v15 = 0;
      }
      uint64_t v17 = *(int *)(v12 + 16);
      if ((v14 & 4) == 0) {
        uint64_t v17 = 0;
      }
      if ((v14 & 2) != 0) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = 0;
      }
      v11 ^= v15 ^ v17 ^ v18;
    }
    while (v10 != v9);
  }
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v11;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this)
{
  *(void *)this = &unk_270640D48;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640D48;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ClefCalibrationPoint::~ClefCalibrationPoint(CMMsl::ClefCalibrationPoint *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this, const CMMsl::ClefCalibrationPoint *a2)
{
  *(void *)this = &unk_270640D48;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 20) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 20) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(unsigned char *)(this + 20) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::operator=(uint64_t a1, const CMMsl::ClefCalibrationPoint *a2)
{
  if ((const CMMsl::ClefCalibrationPoint *)a1 != a2)
  {
    CMMsl::ClefCalibrationPoint::ClefCalibrationPoint((uint64_t)v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefCalibrationPoint *a2, CMMsl::ClefCalibrationPoint *a3)
{
  int v3 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t result, _DWORD *a2)
{
  *(void *)BOOL result = &unk_270640D48;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(void *)BOOL result = &unk_270640D48;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefCalibrationPoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v6 = &unk_270640D48;
    long long v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 20) = 0;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::ClefCalibrationPoint::formatText(CMMsl::ClefCalibrationPoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "base");
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "distance");
  if ((*((unsigned char *)this + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "peak");
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ClefCalibrationPoint::readFrom(CMMsl::ClefCalibrationPoint *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v45 = v27++;
            char v46 = *(unsigned char *)(v28 + v45);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            BOOL v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_82:
          unint64_t v3 = v45 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 3) = v31;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 20) |= 4u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v49 = v33++;
            char v50 = *(unsigned char *)(v34 + v49);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0) {
              break;
            }
            v47 += 7;
            BOOL v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_87:
          unint64_t v3 = v49 + 1;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_DWORD *)this + 4) = v37;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_78;
            }
            unint64_t v41 = v20++;
            char v42 = *(unsigned char *)(v21 + v41);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0) {
              break;
            }
            v39 += 7;
            BOOL v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_77:
          unint64_t v3 = v41 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
LABEL_31:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_31;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefCalibrationPoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 20) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::ClefCalibrationPoint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::ClefCalibrationPoint::hash_value(CMMsl::ClefCalibrationPoint *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  uint64_t v1 = *((int *)this + 2);
  if ((*((unsigned char *)this + 20) & 4) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v3 = *((int *)this + 3);
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::ClefMeasurement::ClefMeasurement(uint64_t this)
{
  *(void *)this = &unk_270640D80;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_270640D80;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefMeasurement::~ClefMeasurement(CMMsl::ClefMeasurement *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ClefMeasurement::ClefMeasurement(CMMsl::ClefMeasurement *this, const CMMsl::ClefMeasurement *a2)
{
  *(void *)this = &unk_270640D80;
  *((_DWORD *)this + 4) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 16) = 1;
    *((float *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    *((unsigned char *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, const CMMsl::ClefMeasurement *a2)
{
  if ((const CMMsl::ClefMeasurement *)a1 != a2)
  {
    CMMsl::ClefMeasurement::ClefMeasurement((CMMsl::ClefMeasurement *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ClefMeasurement *a2, CMMsl::ClefMeasurement *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::ClefMeasurement::ClefMeasurement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640D80;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270640D80;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_270640D80;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::ClefMeasurement::formatText(CMMsl::ClefMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "concha", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "tragus", *((float *)this + 3));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ClefMeasurement::readFrom(CMMsl::ClefMeasurement *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 4;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::ClefMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::ClefMeasurement::hash_value(CMMsl::ClefMeasurement *this)
{
  if (*((unsigned char *)this + 16))
  {
    float v4 = *((float *)this + 2);
    uint64_t v1 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v1 = 0;
    }
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this)
{
  *(void *)this = &unk_270640DB8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_270640DB8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefTemperature::~ClefTemperature(CMMsl::ClefTemperature *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this, const CMMsl::ClefTemperature *a2)
{
  *(void *)this = &unk_270640DB8;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    int v3 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t CMMsl::ClefTemperature::operator=(uint64_t a1, const CMMsl::ClefTemperature *a2)
{
  if ((const CMMsl::ClefTemperature *)a1 != a2)
  {
    CMMsl::ClefTemperature::ClefTemperature((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefTemperature *a2, CMMsl::ClefTemperature *a3)
{
  int v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  int v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t result, _DWORD *a2)
{
  *(void *)uint64_t result = &unk_270640DB8;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(void *)uint64_t result = &unk_270640DB8;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefTemperature::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v7[0] = &unk_270640DB8;
    int v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(void *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::ClefTemperature::formatText(CMMsl::ClefTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "conchaTemp");
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "tragusTemp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ClefTemperature::readFrom(CMMsl::ClefTemperature *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v38 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)a2 + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v34 = v19++;
            char v35 = *(unsigned char *)(v20 + v34);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_59:
          unint64_t v3 = v34 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v3 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v3;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::ClefTemperature::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 2) == 0;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    return (*(unsigned char *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

uint64_t CMMsl::ClefTemperature::hash_value(CMMsl::ClefTemperature *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((int *)this + 2);
    if ((*((unsigned char *)this + 16) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this)
{
  *(void *)this = &unk_270640DF0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640DF0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CoarseElevationChange::~CoarseElevationChange(CMMsl::CoarseElevationChange *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this, const CMMsl::CoarseElevationChange *a2)
{
  *(void *)this = &unk_270640DF0;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::CoarseElevationChange *CMMsl::CoarseElevationChange::operator=(const CMMsl::CoarseElevationChange *a1, const CMMsl::CoarseElevationChange *a2)
{
  if (a1 != a2)
  {
    CMMsl::CoarseElevationChange::CoarseElevationChange((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CoarseElevationChange *a2, CMMsl::CoarseElevationChange *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640DF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640DF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CoarseElevationChange::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270640DF0;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CoarseElevationChange::formatText(CMMsl::CoarseElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "elevationAscended");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CoarseElevationChange::readFrom(CMMsl::CoarseElevationChange *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CoarseElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::CoarseElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::CoarseElevationChange::hash_value(CMMsl::CoarseElevationChange *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::Compass::Compass(uint64_t this)
{
  *(void *)this = &unk_270640E28;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = &unk_270640E28;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::Compass::~Compass(CMMsl::Compass *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::Compass::Compass(CMMsl::Compass *this, const CMMsl::Compass *a2)
{
  *(void *)this = &unk_270640E28;
  *((_DWORD *)this + 17) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 34) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x800) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 14);
    v3 |= 0x800u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 14) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x2000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 16);
    v3 |= 0x2000u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 16) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 4) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 5) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v5 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v5;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v4;
  if ((*((_WORD *)a2 + 34) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_WORD *)this + 34) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *a1, const CMMsl::Compass *a2)
{
  if (a1 != a2)
  {
    CMMsl::Compass::Compass((CMMsl::Compass *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Compass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Compass *a2, CMMsl::Compass *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::Compass::Compass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640E28;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Compass::Compass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Compass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::Compass::formatText(CMMsl::Compass *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "calibrationLevel");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 34) & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 16));
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Compass::readFrom(CMMsl::Compass *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_84;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_78;
      case 2u:
        *((_WORD *)this + 34) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 3u:
        *((_WORD *)this + 34) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 4u:
        *((_WORD *)this + 34) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 5u:
        *((_WORD *)this + 34) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 6u:
        *((_WORD *)this + 34) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 7u:
        *((_WORD *)this + 34) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 8u:
        *((_WORD *)this + 34) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 9u:
        *((_WORD *)this + 34) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 0xAu:
        *((_WORD *)this + 34) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x20u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_82:
              unint64_t v2 = v28 + 1;
              goto LABEL_83;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_82;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_83;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_83:
        *((_DWORD *)this + 8) = v24;
        break;
      case 0xCu:
        *((_WORD *)this + 34) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 0xDu:
        *((_WORD *)this + 34) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_68;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_77;
      case 0xEu:
        *((_WORD *)this + 34) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_77:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_78:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_68:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_84:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Compass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::write(a2, *(float *)(v3 + 40));
    if ((*(_WORD *)(v3 + 68) & 0x40) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_29:
  float v5 = *(float *)(v3 + 36);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::Compass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

uint64_t CMMsl::Compass::hash_value(CMMsl::Compass *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x800) != 0) {
      goto LABEL_3;
    }
LABEL_43:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0) {
      goto LABEL_6;
    }
LABEL_44:
    uint64_t v6 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_45:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_12;
    }
LABEL_46:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_15;
    }
LABEL_47:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_48:
    uint64_t v14 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_49:
    uint64_t v16 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_50:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_51:
    uint64_t v20 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
    goto LABEL_52;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x800) == 0) {
    goto LABEL_43;
  }
LABEL_3:
  float v3 = *((float *)this + 14);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x2000) == 0) {
    goto LABEL_44;
  }
LABEL_6:
  float v5 = *((float *)this + 16);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_45;
  }
LABEL_9:
  float v7 = *((float *)this + 4);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_46;
  }
LABEL_12:
  float v9 = *((float *)this + 11);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_47;
  }
LABEL_15:
  float v11 = *((float *)this + 12);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x400) == 0) {
    goto LABEL_48;
  }
LABEL_18:
  float v13 = *((float *)this + 13);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_49;
  }
LABEL_21:
  float v15 = *((float *)this + 5);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_50;
  }
LABEL_24:
  float v17 = *((float *)this + 6);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_51;
  }
LABEL_27:
  float v19 = *((float *)this + 7);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    uint64_t v21 = *((int *)this + 8);
    if ((*((_WORD *)this + 34) & 0x1000) != 0) {
      goto LABEL_31;
    }
LABEL_53:
    uint64_t v23 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
LABEL_52:
  uint64_t v21 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0) {
    goto LABEL_53;
  }
LABEL_31:
  float v22 = *((float *)this + 15);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_34:
    float v24 = *((float *)this + 10);
    uint64_t v25 = LODWORD(v24);
    if (v24 == 0.0) {
      uint64_t v25 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_37;
    }
LABEL_55:
    uint64_t v27 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
  }
LABEL_54:
  uint64_t v25 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_55;
  }
LABEL_37:
  float v26 = *((float *)this + 9);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this)
{
  *(void *)this = &unk_270640E60;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270640E60;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CompassAlignment::~CompassAlignment(CMMsl::CompassAlignment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this, const CMMsl::CompassAlignment *a2)
{
  *(void *)this = &unk_270640E60;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::CompassAlignment *CMMsl::CompassAlignment::operator=(const CMMsl::CompassAlignment *a1, const CMMsl::CompassAlignment *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassAlignment::CompassAlignment((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CompassAlignment *a2, CMMsl::CompassAlignment *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CompassAlignment::CompassAlignment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640E60;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640E60;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CompassAlignment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270640E60;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CompassAlignment::formatText(CMMsl::CompassAlignment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "compassJustAlignedToStableField");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CompassAlignment::readFrom(CMMsl::CompassAlignment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassAlignment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::CompassAlignment::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::CompassAlignment::hash_value(CMMsl::CompassAlignment *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::CompassCalibration::CompassCalibration(uint64_t this)
{
  *(void *)this = &unk_270640E98;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = &unk_270640E98;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibration::~CompassCalibration(CMMsl::CompassCalibration *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::CompassCalibration::CompassCalibration(CMMsl::CompassCalibration *this, const CMMsl::CompassCalibration *a2)
{
  *(void *)this = &unk_270640E98;
  *((_DWORD *)this + 20) = 0;
  int v2 = *((_DWORD *)a2 + 20);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    int v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v5 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v5;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v6 = *((unsigned char *)a2 + 77);
  v3 |= 0x20000u;
  *((_DWORD *)this + 20) = v3;
  *((unsigned char *)this + 77) = v6;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v7 = *((unsigned char *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((unsigned char *)this + 76) = v7;
  if ((*((_DWORD *)a2 + 20) & 0x100) == 0) {
    return *(float *)&v4;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 20) = v3 | 0x100;
  *((_DWORD *)this + 11) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *a1, const CMMsl::CompassCalibration *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassCalibration::CompassCalibration((CMMsl::CompassCalibration *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibration *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibration *a2, CMMsl::CompassCalibration *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 77);
  *((unsigned char *)this + 77) = *((unsigned char *)a2 + 77);
  *((unsigned char *)a2 + 77) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v5;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::CompassCalibration::CompassCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640E98;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassCalibration::CompassCalibration((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibration *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassCalibration::formatText(CMMsl::CompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "apAwake");
    int v5 = *((_DWORD *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "calibrationLevel");
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "coverage", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "hasConsistency");
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "poseX", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "poseY", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "poseZ", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 18));
  if (*((_DWORD *)this + 20)) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_20:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CompassCalibration::readFrom(CMMsl::CompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_98;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_92;
      case 2u:
        *((_DWORD *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 3u:
        *((_DWORD *)this + 20) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 4u:
        *((_DWORD *)this + 20) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 5u:
        *((_DWORD *)this + 20) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 6u:
        *((_DWORD *)this + 20) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 7u:
        *((_DWORD *)this + 20) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 8u:
        *((_DWORD *)this + 20) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 9u:
        *((_DWORD *)this + 20) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 0xAu:
        *((_DWORD *)this + 20) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 0xBu:
        *((_DWORD *)this + 20) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 0xCu:
        *((_DWORD *)this + 20) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 0xDu:
        *((_DWORD *)this + 20) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 0xEu:
        *((_DWORD *)this + 20) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_78;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_91;
      case 0xFu:
        *((_DWORD *)this + 20) |= 0x10u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_97;
            }
            unint64_t v32 = v20++;
            char v33 = *(unsigned char *)(v21 + v32);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_96:
              unint64_t v2 = v32 + 1;
              goto LABEL_97;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_96;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_97;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_97:
        *((_DWORD *)this + 7) = v24;
        break;
      case 0x10u:
        *((_DWORD *)this + 20) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 77) = v27;
        break;
      case 0x11u:
        *((_DWORD *)this + 20) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 76) = v29;
        break;
      case 0x12u:
        *((_DWORD *)this + 20) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_91:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_92:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_78:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_98:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 80);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 80) & 0x100) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_37:
  float v5 = *(float *)(v3 + 44);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::CompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 80);
  int v3 = *(_DWORD *)(a2 + 80);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 80) & 0x100) == 0;
  if ((v2 & 0x100) != 0) {
    return (v3 & 0x100) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  }
  return v4;
}

uint64_t CMMsl::CompassCalibration::hash_value(CMMsl::CompassCalibration *this)
{
  int v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_51:
    uint64_t v4 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_52:
    uint64_t v6 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_53:
    uint64_t v8 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
LABEL_54:
    uint64_t v10 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_15;
    }
LABEL_55:
    uint64_t v12 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_56:
    uint64_t v14 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_21;
    }
LABEL_57:
    uint64_t v16 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_58:
    uint64_t v18 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_27;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_30;
    }
LABEL_60:
    uint64_t v22 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_33;
    }
LABEL_61:
    uint64_t v24 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_36;
    }
LABEL_62:
    uint64_t v26 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_39;
    }
LABEL_63:
    uint64_t v28 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
    goto LABEL_64;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_51;
  }
LABEL_3:
  float v3 = *((float *)this + 4);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_52;
  }
LABEL_6:
  float v5 = *((float *)this + 5);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_53;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_54;
  }
LABEL_12:
  float v9 = *((float *)this + 16);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_55;
  }
LABEL_15:
  float v11 = *((float *)this + 17);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_56;
  }
LABEL_18:
  float v13 = *((float *)this + 18);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_21:
  float v15 = *((float *)this + 15);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_58;
  }
LABEL_24:
  float v17 = *((float *)this + 8);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_59;
  }
LABEL_27:
  float v19 = *((float *)this + 9);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_30:
  float v21 = *((float *)this + 10);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_33:
  float v23 = *((float *)this + 12);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_62;
  }
LABEL_36:
  float v25 = *((float *)this + 13);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_63;
  }
LABEL_39:
  float v27 = *((float *)this + 14);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    uint64_t v29 = *((int *)this + 7);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v29 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_43:
    uint64_t v30 = *((unsigned __int8 *)this + 77);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v30 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_44:
    uint64_t v31 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x100) != 0) {
      goto LABEL_45;
    }
LABEL_67:
    uint64_t v33 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
  }
LABEL_66:
  uint64_t v31 = 0;
  if ((v1 & 0x100) == 0) {
    goto LABEL_67;
  }
LABEL_45:
  float v32 = *((float *)this + 11);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
}

uint64_t CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t this)
{
  *(void *)this = &unk_270640ED0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = &unk_270640ED0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibrationAttempt::~CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this, const CMMsl::CompassCalibrationAttempt *a2)
{
  *(void *)this = &unk_270640ED0;
  *((_DWORD *)this + 20) = 0;
  int v2 = *((_DWORD *)a2 + 20);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    int v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    int v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  char v5 = *((unsigned char *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((unsigned char *)this + 76) = v5;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v6 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 11) = v6;
  if ((*((_DWORD *)a2 + 20) & 0x200) == 0) {
    return *(float *)&v4;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 20) = v3 | 0x200;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *a1, const CMMsl::CompassCalibrationAttempt *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt((CMMsl::CompassCalibrationAttempt *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibrationAttempt *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibrationAttempt *a2, CMMsl::CompassCalibrationAttempt *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v3;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  int v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640ED0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibrationAttempt *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassCalibrationAttempt::formatText(CMMsl::CompassCalibrationAttempt *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "coverage2d", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "coverage3d", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isPlanar");
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "numberOfSamples");
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timeSpan", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 20);
  if ((v5 & 1) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_DWORD *)this + 20) & 0x8000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 18));
LABEL_19:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CompassCalibrationAttempt::readFrom(CMMsl::CompassCalibrationAttempt *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_94;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_88;
      case 2u:
        *((_DWORD *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 3u:
        *((_DWORD *)this + 20) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 4u:
        *((_DWORD *)this + 20) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 5u:
        *((_DWORD *)this + 20) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 6u:
        *((_DWORD *)this + 20) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 7u:
        *((_DWORD *)this + 20) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 8u:
        *((_DWORD *)this + 20) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 9u:
        *((_DWORD *)this + 20) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xAu:
        *((_DWORD *)this + 20) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xBu:
        *((_DWORD *)this + 20) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 76) = v21;
        break;
      case 0xCu:
        *((_DWORD *)this + 20) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xDu:
        *((_DWORD *)this + 20) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xEu:
        *((_DWORD *)this + 20) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xFu:
        *((_DWORD *)this + 20) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x10u:
        *((_DWORD *)this + 20) |= 0x100u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_93;
            }
            unint64_t v30 = v22++;
            char v31 = *(unsigned char *)(v23 + v30);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_92:
              unint64_t v2 = v30 + 1;
              goto LABEL_93;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_92;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_93;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_93:
        *((_DWORD *)this + 11) = v26;
        break;
      case 0x11u:
        *((_DWORD *)this + 20) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_87:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_88:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibrationAttempt::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 80);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 80) & 0x200) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_35:
  float v5 = *(float *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::CompassCalibrationAttempt::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 80);
  int v3 = *(_DWORD *)(a2 + 80);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 80) & 0x200) == 0;
  if ((v2 & 0x200) != 0) {
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  }
  return v4;
}

uint64_t CMMsl::CompassCalibrationAttempt::hash_value(CMMsl::CompassCalibrationAttempt *this)
{
  int v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_50:
    uint64_t v4 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_51:
    uint64_t v6 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_52:
    uint64_t v8 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_12;
    }
LABEL_53:
    uint64_t v10 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_15;
    }
LABEL_54:
    uint64_t v12 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_18;
    }
LABEL_55:
    uint64_t v14 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_21;
    }
LABEL_56:
    uint64_t v16 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_24;
    }
LABEL_57:
    uint64_t v18 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_27;
    }
LABEL_58:
    uint64_t v20 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_59;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_50;
  }
LABEL_3:
  float v3 = *((float *)this + 4);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_51;
  }
LABEL_6:
  float v5 = *((float *)this + 5);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_52;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_53;
  }
LABEL_12:
  float v9 = *((float *)this + 14);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_54;
  }
LABEL_15:
  float v11 = *((float *)this + 15);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_55;
  }
LABEL_18:
  float v13 = *((float *)this + 16);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_56;
  }
LABEL_21:
  float v15 = *((float *)this + 13);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_57;
  }
LABEL_24:
  float v17 = *((float *)this + 7);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_58;
  }
LABEL_27:
  float v19 = *((float *)this + 18);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_30:
    uint64_t v21 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_60:
    uint64_t v23 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_34;
    }
LABEL_61:
    uint64_t v25 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_37;
    }
LABEL_62:
    uint64_t v27 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_40;
    }
LABEL_63:
    uint64_t v29 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_43;
    }
    goto LABEL_64;
  }
LABEL_59:
  uint64_t v21 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_60;
  }
LABEL_31:
  float v22 = *((float *)this + 8);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_61;
  }
LABEL_34:
  float v24 = *((float *)this + 9);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_37:
  float v26 = *((float *)this + 10);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_63;
  }
LABEL_40:
  float v28 = *((float *)this + 17);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_43:
    uint64_t v30 = *((unsigned int *)this + 11);
    if ((v1 & 0x200) != 0) {
      goto LABEL_44;
    }
LABEL_65:
    uint64_t v32 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
  }
LABEL_64:
  uint64_t v30 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_65;
  }
LABEL_44:
  float v31 = *((float *)this + 12);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
}

double CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this)
{
  *(void *)this = &unk_270640F08;
  *((_DWORD *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270640F08;
  *((_DWORD *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CompassConstraints::~CompassConstraints(CMMsl::CompassConstraints *this)
{
  *(void *)this = &unk_270640F08;
  double v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CompassConstraints::~CompassConstraints(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::CompassConstraints *CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this, const CMMsl::CompassConstraints *a2)
{
  *(void *)this = &unk_270640F08;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  int v5 = *((_DWORD *)a2 + 31);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 7);
    int v6 = 1;
    *((_DWORD *)this + 31) = 1;
    *((void *)this + 7) = v7;
    int v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x80u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 22) = v8;
    int v5 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v5 & 0x4000) != 0)
  {
    int v13 = *((_DWORD *)a2 + 29);
    v6 |= 0x4000u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 29) = v13;
    int v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 17);
  v6 |= 4u;
  *((_DWORD *)this + 31) = v6;
  *((_DWORD *)this + 17) = v14;
  if ((*((_DWORD *)a2 + 31) & 0x20) != 0)
  {
LABEL_9:
    int v9 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 31) = v6 | 0x20;
    *((_DWORD *)this + 20) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x800) != 0)
  {
    int v15 = *((_DWORD *)a2 + 26);
    *((_DWORD *)this + 31) |= 0x800u;
    *((_DWORD *)this + 26) = v15;
    int v10 = *((_DWORD *)a2 + 31);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }
  int v16 = *((_DWORD *)a2 + 23);
  *((_DWORD *)this + 31) |= 0x100u;
  *((_DWORD *)this + 23) = v16;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v17 = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 31) |= 2u;
  *((_DWORD *)this + 16) = v17;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v18 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 31) |= 0x10u;
  *((_DWORD *)this + 19) = v18;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v19 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 31) |= 8u;
  *((_DWORD *)this + 18) = v19;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v20 = *((_DWORD *)a2 + 25);
  *((_DWORD *)this + 31) |= 0x400u;
  *((_DWORD *)this + 25) = v20;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  char v21 = *((unsigned char *)a2 + 121);
  *((_DWORD *)this + 31) |= 0x10000u;
  *((unsigned char *)this + 121) = v21;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v22 = *((unsigned char *)a2 + 120);
  *((_DWORD *)this + 31) |= 0x8000u;
  *((unsigned char *)this + 120) = v22;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v23 = *((_DWORD *)a2 + 24);
  *((_DWORD *)this + 31) |= 0x200u;
  *((_DWORD *)this + 24) = v23;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0) {
      goto LABEL_23;
    }
LABEL_39:
    int v25 = *((_DWORD *)a2 + 21);
    *((_DWORD *)this + 31) |= 0x40u;
    *((_DWORD *)this + 21) = v25;
    if ((*((_DWORD *)a2 + 31) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_24;
  }
LABEL_38:
  int v24 = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 31) |= 0x1000u;
  *((_DWORD *)this + 27) = v24;
  int v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x40) != 0) {
    goto LABEL_39;
  }
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    int v11 = *((_DWORD *)a2 + 28);
    *((_DWORD *)this + 31) |= 0x2000u;
    *((_DWORD *)this + 28) = v11;
  }
  return this;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, const CMMsl::CompassConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((CMMsl::CompassConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassConstraints *a2, CMMsl::CompassConstraints *a3)
{
  int v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LOBYTE(v10) = *((unsigned char *)this + 121);
  *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
  *((unsigned char *)a2 + 121) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v10;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  float result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

uint64_t CMMsl::CompassConstraints::CompassConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640F08;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassConstraints::formatText(CMMsl::CompassConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 124) & 2) != 0) {
    PB::TextFormatter::format(a2, "attitudeDelta", *((float *)this + 16));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "calibratedField", v7);
  }
  int v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "doCorrection");
    int v8 = *((_DWORD *)this + 31);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_30;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 17));
  int v8 = *((_DWORD *)this + 31);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isOnSphere");
  int v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isRotating");
  if ((*((_DWORD *)this + 31) & 0x10000) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "isTraversingSphere");
LABEL_11:
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "predictedField", v11);
  }
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "scale", *((float *)this + 20));
    int v12 = *((_DWORD *)this + 31);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
  }
  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timerUnitDistanceThreshold", *((float *)this + 21));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 22));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferDelta", *((float *)this + 23));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferMax", *((float *)this + 24));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "unitDistanceReference", *((float *)this + 25));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "unitDistanceSmallBufferDelta", *((float *)this + 26));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "unitDistanceThreshold", *((float *)this + 27));
  int v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x2000) == 0)
  {
LABEL_23:
    if ((v12 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "unitDistanceThresholdApplied", *((float *)this + 28));
  if ((*((_DWORD *)this + 31) & 0x4000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "vertical", *((float *)this + 29));
LABEL_25:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::CompassConstraints::readFrom(CMMsl::CompassConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 31) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_195;
        case 2u:
          *((_DWORD *)this + 31) |= 0x80u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v22);
          goto LABEL_194;
        case 3u:
          *((_DWORD *)this + 31) |= 0x4000u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v23);
          goto LABEL_194;
        case 4u:
          *((_DWORD *)this + 31) |= 4u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_194;
        case 5u:
          *((_DWORD *)this + 31) |= 0x20u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_194;
        case 6u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v26 = *((void *)a2 + 1);
            unint64_t v27 = *((void *)a2 + 2);
            while (v26 < v27 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v29 = (char *)*((void *)this + 2);
              unint64_t v28 = *((void *)this + 3);
              if ((unint64_t)v29 >= v28)
              {
                float v31 = (char *)*((void *)this + 1);
                uint64_t v32 = (v29 - v31) >> 2;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 62) {
                  goto LABEL_205;
                }
                uint64_t v34 = v28 - (void)v31;
                if (v34 >> 1 > v33) {
                  unint64_t v33 = v34 >> 1;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35)
                {
                  unint64_t v35 = (unint64_t)sub_2572C76F0(v35);
                  float v31 = (char *)*((void *)this + 1);
                  uint64_t v29 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v36 = 0;
                }
                unsigned int v37 = (_DWORD *)(v35 + 4 * v32);
                *unsigned int v37 = 0;
                uint64_t v30 = v37 + 1;
                while (v29 != v31)
                {
                  int v38 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *--unsigned int v37 = v38;
                }
                *((void *)this + 1) = v37;
                *((void *)this + 2) = v30;
                *((void *)this + 3) = v35 + 4 * v36;
                if (v31) {
                  operator delete(v31);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v29 = 0;
                uint64_t v30 = v29 + 4;
              }
              *((void *)this + 2) = v30;
              unint64_t v39 = *((void *)a2 + 1);
              if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
                goto LABEL_150;
              }
              *(v30 - 1) = *(_DWORD *)(*(void *)a2 + v39);
              unint64_t v27 = *((void *)a2 + 2);
              unint64_t v26 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v26;
            }
            goto LABEL_151;
          }
          unint64_t v87 = (char *)*((void *)this + 2);
          unint64_t v86 = *((void *)this + 3);
          if ((unint64_t)v87 >= v86)
          {
            unint64_t v99 = (char *)*((void *)this + 1);
            uint64_t v100 = (v87 - v99) >> 2;
            unint64_t v101 = v100 + 1;
            if ((unint64_t)(v100 + 1) >> 62) {
              goto LABEL_205;
            }
            uint64_t v102 = v86 - (void)v99;
            if (v102 >> 1 > v101) {
              unint64_t v101 = v102 >> 1;
            }
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v103 = v101;
            }
            if (v103)
            {
              unint64_t v103 = (unint64_t)sub_2572C76F0(v103);
              unint64_t v99 = (char *)*((void *)this + 1);
              unint64_t v87 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v104 = 0;
            }
            unint64_t v111 = (_DWORD *)(v103 + 4 * v100);
            *unint64_t v111 = 0;
            char v88 = v111 + 1;
            while (v87 != v99)
            {
              int v112 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *--unint64_t v111 = v112;
            }
            *((void *)this + 1) = v111;
            *((void *)this + 2) = v88;
            *((void *)this + 3) = v103 + 4 * v104;
            if (v99) {
              operator delete(v99);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v87 = 0;
            char v88 = v87 + 4;
          }
          *((void *)this + 2) = v88;
          goto LABEL_190;
        case 7u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)a2 + 1);
            unint64_t v41 = *((void *)a2 + 2);
            while (v40 < v41 && !*((unsigned char *)a2 + 24))
            {
              char v43 = (char *)*((void *)this + 5);
              unint64_t v42 = *((void *)this + 6);
              if ((unint64_t)v43 >= v42)
              {
                unint64_t v45 = (char *)*((void *)this + 4);
                uint64_t v46 = (v43 - v45) >> 2;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 62) {
                  goto LABEL_205;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 1 > v47) {
                  unint64_t v47 = v48 >> 1;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unint64_t v49 = (unint64_t)sub_2572C76F0(v49);
                  unint64_t v45 = (char *)*((void *)this + 4);
                  char v43 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v50 = 0;
                }
                uint64_t v51 = (_DWORD *)(v49 + 4 * v46);
                _DWORD *v51 = 0;
                unsigned int v44 = v51 + 1;
                while (v43 != v45)
                {
                  int v52 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *--uint64_t v51 = v52;
                }
                *((void *)this + 4) = v51;
                *((void *)this + 5) = v44;
                *((void *)this + 6) = v49 + 4 * v50;
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(_DWORD *)char v43 = 0;
                unsigned int v44 = v43 + 4;
              }
              *((void *)this + 5) = v44;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2))
              {
LABEL_150:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_DWORD *)(*(void *)a2 + v53);
              unint64_t v41 = *((void *)a2 + 2);
              unint64_t v40 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v40;
            }
LABEL_151:
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v90 = (char *)*((void *)this + 5);
            unint64_t v89 = *((void *)this + 6);
            if ((unint64_t)v90 >= v89)
            {
              char v105 = (char *)*((void *)this + 4);
              uint64_t v106 = (v90 - v105) >> 2;
              unint64_t v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62) {
LABEL_205:
              }
                sub_2570AFD0C();
              uint64_t v108 = v89 - (void)v105;
              if (v108 >> 1 > v107) {
                unint64_t v107 = v108 >> 1;
              }
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v107;
              }
              if (v109)
              {
                unint64_t v109 = (unint64_t)sub_2572C76F0(v109);
                char v105 = (char *)*((void *)this + 4);
                unsigned int v90 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v110 = 0;
              }
              BOOL v113 = (_DWORD *)(v109 + 4 * v106);
              *BOOL v113 = 0;
              char v88 = v113 + 1;
              while (v90 != v105)
              {
                int v114 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *--BOOL v113 = v114;
              }
              *((void *)this + 4) = v113;
              *((void *)this + 5) = v88;
              *((void *)this + 6) = v109 + 4 * v110;
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v90 = 0;
              char v88 = v90 + 4;
            }
            *((void *)this + 5) = v88;
LABEL_190:
            unint64_t v115 = *((void *)a2 + 1);
            if (v115 <= 0xFFFFFFFFFFFFFFFBLL && v115 + 4 <= *((void *)a2 + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(void *)a2 + v115);
LABEL_194:
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_195:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_192:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 8u:
          *((_DWORD *)this + 31) |= 0x800u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v54);
          goto LABEL_194;
        case 9u:
          *((_DWORD *)this + 31) |= 0x100u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v55);
          goto LABEL_194;
        case 0xAu:
          *((_DWORD *)this + 31) |= 2u;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v56);
          goto LABEL_194;
        case 0xBu:
          *((_DWORD *)this + 31) |= 0x10u;
          unint64_t v57 = *((void *)a2 + 1);
          unint64_t v58 = *((void *)a2 + 2);
          uint64_t v59 = *(void *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_172;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }
            while (!v14);
LABEL_138:
            LODWORD(v62) = 0;
            goto LABEL_172;
          }
          char v91 = 0;
          unsigned int v92 = 0;
          uint64_t v62 = 0;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v93 = v57 + 1;
              char v94 = *(unsigned char *)(v59 + v57);
              *((void *)a2 + 1) = v93;
              v62 |= (unint64_t)(v94 & 0x7F) << v91;
              if (v94 < 0)
              {
                v91 += 7;
                unint64_t v57 = v93;
                BOOL v14 = v92++ > 8;
                if (v14) {
                  goto LABEL_138;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v62) = 0;
              }
            }
            break;
          }
LABEL_172:
          *((_DWORD *)this + 19) = v62;
          goto LABEL_196;
        case 0xCu:
          *((_DWORD *)this + 31) |= 8u;
          unint64_t v65 = *((void *)a2 + 1);
          unint64_t v66 = *((void *)a2 + 2);
          uint64_t v67 = *(void *)a2;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            char v68 = 0;
            unsigned int v69 = 0;
            uint64_t v70 = 0;
            do
            {
              unint64_t v71 = v65 + 1;
              *((void *)a2 + 1) = v65 + 1;
              char v72 = *(unsigned char *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0) {
                goto LABEL_175;
              }
              v68 += 7;
              unint64_t v65 = v71;
              BOOL v14 = v69++ > 8;
            }
            while (!v14);
LABEL_145:
            LODWORD(v70) = 0;
            goto LABEL_175;
          }
          char v95 = 0;
          unsigned int v96 = 0;
          uint64_t v70 = 0;
          if (v66 <= v65) {
            unint64_t v66 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v97 = v65 + 1;
              char v98 = *(unsigned char *)(v67 + v65);
              *((void *)a2 + 1) = v97;
              v70 |= (unint64_t)(v98 & 0x7F) << v95;
              if (v98 < 0)
              {
                v95 += 7;
                unint64_t v65 = v97;
                BOOL v14 = v96++ > 8;
                if (v14) {
                  goto LABEL_145;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v70) = 0;
              }
            }
            break;
          }
LABEL_175:
          *((_DWORD *)this + 18) = v70;
          goto LABEL_196;
        case 0xDu:
          *((_DWORD *)this + 31) |= 0x400u;
          unint64_t v73 = *((void *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v73);
          goto LABEL_194;
        case 0xEu:
          *((_DWORD *)this + 31) |= 0x10000u;
          unint64_t v74 = *((void *)a2 + 1);
          if (v74 >= *((void *)a2 + 2))
          {
            BOOL v77 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v75 = v74 + 1;
            int v76 = *(unsigned __int8 *)(*(void *)a2 + v74);
            *((void *)a2 + 1) = v75;
            BOOL v77 = v76 != 0;
          }
          *((unsigned char *)this + 121) = v77;
          goto LABEL_196;
        case 0xFu:
          *((_DWORD *)this + 31) |= 0x8000u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 >= *((void *)a2 + 2))
          {
            BOOL v81 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v79 = v78 + 1;
            int v80 = *(unsigned __int8 *)(*(void *)a2 + v78);
            *((void *)a2 + 1) = v79;
            BOOL v81 = v80 != 0;
          }
          *((unsigned char *)this + 120) = v81;
          goto LABEL_196;
        case 0x10u:
          *((_DWORD *)this + 31) |= 0x200u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v82);
          goto LABEL_194;
        case 0x11u:
          *((_DWORD *)this + 31) |= 0x1000u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v83);
          goto LABEL_194;
        case 0x12u:
          *((_DWORD *)this + 31) |= 0x40u;
          unint64_t v84 = *((void *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v84);
          goto LABEL_194;
        case 0x13u:
          *((_DWORD *)this + 31) |= 0x2000u;
          unint64_t v85 = *((void *)a2 + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)a2 + 2)) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v85);
          goto LABEL_194;
        default:
          goto LABEL_19;
      }
      goto LABEL_196;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_196:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::CompassConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 124);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_29:
    this = PB::Writer::write(a2, *(float *)(v3 + 68));
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0) {
    goto LABEL_29;
  }
LABEL_5:
  if ((v4 & 0x20) != 0) {
LABEL_6:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
LABEL_7:
  uint64_t v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(float **)(v3 + 32);
  char v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 104));
    int v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0) {
        goto LABEL_16;
      }
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0) {
      goto LABEL_24;
    }
LABEL_41:
    this = PB::Writer::write(a2, *(float *)(v3 + 84));
    if ((*(_DWORD *)(v3 + 124) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_42;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) != 0) {
    goto LABEL_41;
  }
LABEL_24:
  if ((v11 & 0x2000) == 0) {
    return this;
  }
LABEL_42:
  float v12 = *(float *)(v3 + 112);
  return PB::Writer::write(a2, v12);
}

BOOL CMMsl::CompassConstraints::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 124);
  int v3 = *(_DWORD *)(a2 + 124);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 8);
  int v4 = *(float **)(a1 + 16);
  uint64_t v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 32);
  float v7 = *(float **)(a1 + 40);
  char v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 40) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v10 = (*(_DWORD *)(a2 + 124) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0) {
    return (v3 & 0x2000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  }
  return v10;
}

uint64_t CMMsl::CompassConstraints::hash_value(CMMsl::CompassConstraints *this)
{
  int v2 = *((_DWORD *)this + 31);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v5 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v7 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  if (*((double *)this + 7) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 7);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  float v4 = *((float *)this + 22);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v2 & 0x4000) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  float v6 = *((float *)this + 29);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((v2 & 4) != 0)
  {
LABEL_11:
    float v8 = *((float *)this + 17);
    if (v8 == 0.0) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = LODWORD(v8);
    }
    if ((v2 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v11 = 0;
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((v2 & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v10 = *((float *)this + 20);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = LODWORD(v10);
  }
LABEL_26:
  uint64_t v12 = PBHashBytes();
  uint64_t v13 = PBHashBytes();
  int v14 = *((_DWORD *)this + 31);
  if ((v14 & 0x800) == 0)
  {
    uint64_t v15 = 0;
    if ((v14 & 0x100) != 0) {
      goto LABEL_28;
    }
LABEL_56:
    uint64_t v17 = 0;
    if ((v14 & 2) != 0) {
      goto LABEL_31;
    }
LABEL_57:
    uint64_t v19 = 0;
    if ((v14 & 0x10) != 0) {
      goto LABEL_34;
    }
    goto LABEL_58;
  }
  float v34 = *((float *)this + 26);
  uint64_t v15 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v14 & 0x100) == 0) {
    goto LABEL_56;
  }
LABEL_28:
  float v16 = *((float *)this + 23);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v14 & 2) == 0) {
    goto LABEL_57;
  }
LABEL_31:
  float v18 = *((float *)this + 16);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v14 & 0x10) != 0)
  {
LABEL_34:
    uint64_t v20 = *((unsigned int *)this + 19);
    if ((v14 & 8) != 0) {
      goto LABEL_35;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v20 = 0;
  if ((v14 & 8) != 0)
  {
LABEL_35:
    uint64_t v21 = *((unsigned int *)this + 18);
    if ((v14 & 0x400) != 0) {
      goto LABEL_36;
    }
LABEL_60:
    uint64_t v23 = 0;
    if ((v14 & 0x10000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_61;
  }
LABEL_59:
  uint64_t v21 = 0;
  if ((v14 & 0x400) == 0) {
    goto LABEL_60;
  }
LABEL_36:
  float v22 = *((float *)this + 25);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v14 & 0x10000) != 0)
  {
LABEL_39:
    uint64_t v24 = *((unsigned __int8 *)this + 121);
    if ((v14 & 0x8000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v24 = 0;
  if ((v14 & 0x8000) != 0)
  {
LABEL_40:
    uint64_t v25 = *((unsigned __int8 *)this + 120);
    if ((v14 & 0x200) != 0) {
      goto LABEL_41;
    }
LABEL_63:
    uint64_t v27 = 0;
    if ((v14 & 0x1000) != 0) {
      goto LABEL_44;
    }
LABEL_64:
    uint64_t v29 = 0;
    if ((v14 & 0x40) != 0) {
      goto LABEL_47;
    }
    goto LABEL_65;
  }
LABEL_62:
  uint64_t v25 = 0;
  if ((v14 & 0x200) == 0) {
    goto LABEL_63;
  }
LABEL_41:
  float v26 = *((float *)this + 24);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v14 & 0x1000) == 0) {
    goto LABEL_64;
  }
LABEL_44:
  float v28 = *((float *)this + 27);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v14 & 0x40) != 0)
  {
LABEL_47:
    float v30 = *((float *)this + 21);
    uint64_t v31 = LODWORD(v30);
    if (v30 == 0.0) {
      uint64_t v31 = 0;
    }
    if ((v14 & 0x2000) != 0) {
      goto LABEL_50;
    }
LABEL_66:
    uint64_t v33 = 0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
  }
LABEL_65:
  uint64_t v31 = 0;
  if ((v14 & 0x2000) == 0) {
    goto LABEL_66;
  }
LABEL_50:
  float v32 = *((float *)this + 28);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
}

void *CMMsl::CompassCorrection::CompassCorrection(void *this)
{
  *this = &unk_270640F40;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640F40;
  this[1] = 0;
  return this;
}

void CMMsl::CompassCorrection::~CompassCorrection(CMMsl::CompassCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640F40;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CompassCorrection::~CompassCorrection(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::CompassCorrection::CompassCorrection(void *this, const CMMsl::CompassCorrection *a2)
{
  *this = &unk_270640F40;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::CompassCorrection *CMMsl::CompassCorrection::operator=(const CMMsl::CompassCorrection *a1, const CMMsl::CompassCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::CompassCorrection::CompassCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::CompassCorrection::~CompassCorrection((CMMsl::CompassCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CompassCorrection *a2, CMMsl::CompassCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::CompassCorrection::CompassCorrection(void *a1, uint64_t a2)
{
  *a1 = &unk_270640F40;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640F40;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::CompassCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640F40;
    v6[1] = v4;
    CMMsl::CompassCorrection::~CompassCorrection((CMMsl::CompassCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::CompassCorrection::formatText(CMMsl::CompassCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CompassCorrection::readFrom(CMMsl::CompassCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::CompassCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  }
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CompassCorrection::hash_value(CMMsl::CompassCorrection *this)
{
  BOOL result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::CompassCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this)
{
  *(void *)this = &unk_270640F78;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_270640F78;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::ComplexHandMotion::~ComplexHandMotion(CMMsl::ComplexHandMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this, const CMMsl::ComplexHandMotion *a2)
{
  *(void *)this = &unk_270640F78;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_10:
    char v7 = *((unsigned char *)a2 + 24);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(unsigned char *)(this + 24) = v7;
    return this;
  }
  char v6 = *((unsigned char *)a2 + 25);
  v3 |= 8u;
  *(unsigned char *)(this + 28) = v3;
  *(unsigned char *)(this + 25) = v6;
  if ((*((unsigned char *)a2 + 28) & 4) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, const CMMsl::ComplexHandMotion *a2)
{
  if ((const CMMsl::ComplexHandMotion *)a1 != a2)
  {
    CMMsl::ComplexHandMotion::ComplexHandMotion((uint64_t)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v9;
    int v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v8;
    __int16 v8 = v3;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ComplexHandMotion *a2, CMMsl::ComplexHandMotion *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v3) = *((unsigned char *)this + 25);
  *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
  *((unsigned char *)a2 + 25) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 24);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  *((unsigned char *)a2 + 24) = v3;
  return result;
}

double CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270640F78;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270640F78;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    __int16 v8 = &unk_270640F78;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    __int16 v4 = *(_WORD *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v4;
    __int16 v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::ComplexHandMotion::formatText(CMMsl::ComplexHandMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "finalDecision");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "instantDecision");
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timeStart", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timeStop", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ComplexHandMotion::readFrom(CMMsl::ComplexHandMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 3u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 25) = v21;
        break;
      case 4u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 24) = v23;
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ComplexHandMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2);
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::write(a2);
}

BOOL CMMsl::ComplexHandMotion::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::ComplexHandMotion::hash_value(CMMsl::ComplexHandMotion *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_11:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v4 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v3 = *((unsigned __int8 *)this + 25);
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v4 = *((unsigned __int8 *)this + 24);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v4;
}

void *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(void *this)
{
  *this = &unk_270640FB0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640FB0;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640FB0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(void *this, const CMMsl::ConstrainedIntegratorModelPredictedPose *a2)
{
  *this = &unk_270640FB0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ConstrainedIntegratorModelPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(const CMMsl::ConstrainedIntegratorModelPredictedPose *a1, const CMMsl::ConstrainedIntegratorModelPredictedPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose((CMMsl::ConstrainedIntegratorModelPredictedPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorModelPredictedPose *a2, CMMsl::ConstrainedIntegratorModelPredictedPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(void *a1, uint64_t a2)
{
  *a1 = &unk_270640FB0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640FB0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640FB0;
    v6[1] = v4;
    CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose((CMMsl::ConstrainedIntegratorModelPredictedPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::formatText(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::readFrom(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::ConstrainedIntegratorModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::hash_value(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  BOOL result = (CMMsl::BioMotionPredictedPose *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(void *this)
{
  *this = &unk_270640FE8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270640FE8;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose(CMMsl::ConstrainedIntegratorPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270640FE8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(void *this, const CMMsl::ConstrainedIntegratorPose *a2)
{
  *this = &unk_270640FE8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ConstrainedIntegratorPose *CMMsl::ConstrainedIntegratorPose::operator=(const CMMsl::ConstrainedIntegratorPose *a1, const CMMsl::ConstrainedIntegratorPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose((CMMsl::ConstrainedIntegratorPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorPose *a2, CMMsl::ConstrainedIntegratorPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(void *a1, uint64_t a2)
{
  *a1 = &unk_270640FE8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270640FE8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270640FE8;
    v6[1] = v4;
    CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose((CMMsl::ConstrainedIntegratorPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::formatText(CMMsl::ConstrainedIntegratorPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ConstrainedIntegratorPose::readFrom(CMMsl::ConstrainedIntegratorPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::ConstrainedIntegratorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionPose *CMMsl::ConstrainedIntegratorPose::hash_value(CMMsl::ConstrainedIntegratorPose *this)
{
  BOOL result = (CMMsl::BioMotionPose *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ConstrainedIntegratorPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t this)
{
  *(void *)this = &unk_270641020;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = &unk_270641020;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::CoprocessorReplyGaitMetrics::~CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  *(void *)this = &unk_270641020;
  *((_DWORD *)this + 23) = 0;
  int v2 = *((_DWORD *)a2 + 23);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 23) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 22);
    v3 |= 0x80000u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 22) = result;
    int v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    float result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 7) = result;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v6 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 8) = v6;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 6) = v7;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 14) = v8;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 11) = v9;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 10) = v10;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 12) = v11;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 13) = v12;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 9) = v13;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }
LABEL_40:
  float result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0) {
      return result;
    }
LABEL_42:
    float result = *((float *)a2 + 21);
    *((_DWORD *)this + 23) = v3 | 0x40000;
    *((float *)this + 21) = result;
    return result;
  }
LABEL_41:
  float result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 20) = result;
  if ((*((_DWORD *)a2 + 23) & 0x40000) != 0) {
    goto LABEL_42;
  }
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *a1, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics((CMMsl::CoprocessorReplyGaitMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CoprocessorReplyGaitMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CoprocessorReplyGaitMetrics *a2, CMMsl::CoprocessorReplyGaitMetrics *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  int v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  int v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  int v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  int v11 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  int v12 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v12;
  int v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  int v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  float result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641020;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  float result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CoprocessorReplyGaitMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::formatText(CMMsl::CoprocessorReplyGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 23);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "deviceSide");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gaitPhase");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle");
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "timestamp");
  if ((*((_DWORD *)this + 23) & 0x80000) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
LABEL_22:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::readFrom(CMMsl::CoprocessorReplyGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_229;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 23) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_188;
            }
            unint64_t v76 = v20++;
            char v77 = *(unsigned char *)(v21 + v76);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0) {
              break;
            }
            v74 += 7;
            BOOL v14 = v75++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_187:
              unint64_t v2 = v76 + 1;
              goto LABEL_188;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_187;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_188;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_188:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 23) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 3u:
        *((_DWORD *)this + 23) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 4u:
        *((_DWORD *)this + 23) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 5u:
        *((_DWORD *)this + 23) |= 0x20u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_193;
            }
            unint64_t v80 = v26++;
            char v81 = *(unsigned char *)(v27 + v80);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0) {
              break;
            }
            v78 += 7;
            BOOL v14 = v79++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_192:
              unint64_t v2 = v80 + 1;
              goto LABEL_193;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_192;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_193;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_193:
        *((_DWORD *)this + 8) = v30;
        break;
      case 6u:
        *((_DWORD *)this + 23) |= 8u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_198;
            }
            unint64_t v84 = v32++;
            char v85 = *(unsigned char *)(v33 + v84);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v85 & 0x7F) << v82;
            if ((v85 & 0x80) == 0) {
              break;
            }
            v82 += 7;
            BOOL v14 = v83++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_197:
              unint64_t v2 = v84 + 1;
              goto LABEL_198;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_197;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_198;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_198:
        *((_DWORD *)this + 6) = v36;
        break;
      case 7u:
        *((_DWORD *)this + 23) |= 0x800u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v86 = 0;
          unsigned int v87 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_203;
            }
            unint64_t v88 = v38++;
            char v89 = *(unsigned char *)(v39 + v88);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v89 & 0x7F) << v86;
            if ((v89 & 0x80) == 0) {
              break;
            }
            v86 += 7;
            BOOL v14 = v87++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_202:
              unint64_t v2 = v88 + 1;
              goto LABEL_203;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_202;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_203;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_203:
        *((_DWORD *)this + 14) = v42;
        break;
      case 8u:
        *((_DWORD *)this + 23) |= 0x100u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_208;
            }
            unint64_t v92 = v44++;
            char v93 = *(unsigned char *)(v45 + v92);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v93 & 0x7F) << v90;
            if ((v93 & 0x80) == 0) {
              break;
            }
            v90 += 7;
            BOOL v14 = v91++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_207:
              unint64_t v2 = v92 + 1;
              goto LABEL_208;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_207;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_208;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_208:
        *((_DWORD *)this + 11) = v48;
        break;
      case 9u:
        *((_DWORD *)this + 23) |= 0x80u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_213;
            }
            unint64_t v96 = v50++;
            char v97 = *(unsigned char *)(v51 + v96);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v97 & 0x7F) << v94;
            if ((v97 & 0x80) == 0) {
              break;
            }
            v94 += 7;
            BOOL v14 = v95++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_212:
              unint64_t v2 = v96 + 1;
              goto LABEL_213;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_212;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_213;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_213:
        *((_DWORD *)this + 10) = v54;
        break;
      case 0xAu:
        *((_DWORD *)this + 23) |= 0x200u;
        unint64_t v56 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v57 = *(void *)a2;
        if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v2)
        {
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v60 = 0;
          if (v2 <= v56) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v56)
            {
              LODWORD(v60) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_218;
            }
            unint64_t v100 = v56++;
            char v101 = *(unsigned char *)(v57 + v100);
            *((void *)a2 + 1) = v56;
            v60 |= (unint64_t)(v101 & 0x7F) << v98;
            if ((v101 & 0x80) == 0) {
              break;
            }
            v98 += 7;
            BOOL v14 = v99++ > 8;
            if (v14)
            {
              LODWORD(v60) = 0;
LABEL_217:
              unint64_t v2 = v100 + 1;
              goto LABEL_218;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v60) = 0;
          }
          goto LABEL_217;
        }
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        do
        {
          unint64_t v2 = v56 + 1;
          *((void *)a2 + 1) = v56 + 1;
          char v61 = *(unsigned char *)(v57 + v56);
          v60 |= (unint64_t)(v61 & 0x7F) << v58;
          if ((v61 & 0x80) == 0) {
            goto LABEL_218;
          }
          v58 += 7;
          unint64_t v56 = v2;
          BOOL v14 = v59++ > 8;
        }
        while (!v14);
        LODWORD(v60) = 0;
LABEL_218:
        *((_DWORD *)this + 12) = v60;
        break;
      case 0xBu:
        *((_DWORD *)this + 23) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0xCu:
        *((_DWORD *)this + 23) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0xDu:
        *((_DWORD *)this + 23) |= 0x400u;
        unint64_t v62 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v63 = *(void *)a2;
        if (v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v2)
        {
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v66 = 0;
          if (v2 <= v62) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v62)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_223;
            }
            unint64_t v104 = v62++;
            char v105 = *(unsigned char *)(v63 + v104);
            *((void *)a2 + 1) = v62;
            v66 |= (unint64_t)(v105 & 0x7F) << v102;
            if ((v105 & 0x80) == 0) {
              break;
            }
            v102 += 7;
            BOOL v14 = v103++ > 8;
            if (v14)
            {
              LODWORD(v66) = 0;
LABEL_222:
              unint64_t v2 = v104 + 1;
              goto LABEL_223;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v66) = 0;
          }
          goto LABEL_222;
        }
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v66 = 0;
        do
        {
          unint64_t v2 = v62 + 1;
          *((void *)a2 + 1) = v62 + 1;
          char v67 = *(unsigned char *)(v63 + v62);
          v66 |= (unint64_t)(v67 & 0x7F) << v64;
          if ((v67 & 0x80) == 0) {
            goto LABEL_223;
          }
          v64 += 7;
          unint64_t v62 = v2;
          BOOL v14 = v65++ > 8;
        }
        while (!v14);
        LODWORD(v66) = 0;
LABEL_223:
        *((_DWORD *)this + 13) = v66;
        break;
      case 0xEu:
        *((_DWORD *)this + 23) |= 0x40u;
        unint64_t v68 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v69 = *(void *)a2;
        if (v68 > 0xFFFFFFFFFFFFFFF5 || v68 + 10 > v2)
        {
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v72 = 0;
          if (v2 <= v68) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v68)
            {
              LODWORD(v72) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_228;
            }
            unint64_t v108 = v68++;
            char v109 = *(unsigned char *)(v69 + v108);
            *((void *)a2 + 1) = v68;
            v72 |= (unint64_t)(v109 & 0x7F) << v106;
            if ((v109 & 0x80) == 0) {
              break;
            }
            v106 += 7;
            BOOL v14 = v107++ > 8;
            if (v14)
            {
              LODWORD(v72) = 0;
LABEL_227:
              unint64_t v2 = v108 + 1;
              goto LABEL_228;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v72) = 0;
          }
          goto LABEL_227;
        }
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v72 = 0;
        do
        {
          unint64_t v2 = v68 + 1;
          *((void *)a2 + 1) = v68 + 1;
          char v73 = *(unsigned char *)(v69 + v68);
          v72 |= (unint64_t)(v73 & 0x7F) << v70;
          if ((v73 & 0x80) == 0) {
            goto LABEL_228;
          }
          v70 += 7;
          unint64_t v68 = v2;
          BOOL v14 = v71++ > 8;
        }
        while (!v14);
        LODWORD(v72) = 0;
LABEL_228:
        *((_DWORD *)this + 9) = v72;
        break;
      case 0xFu:
        *((_DWORD *)this + 23) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0x10u:
        *((_DWORD *)this + 23) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0x11u:
        *((_DWORD *)this + 23) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0x12u:
        *((_DWORD *)this + 23) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0x13u:
        *((_DWORD *)this + 23) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_118;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_183;
      case 0x14u:
        *((_DWORD *)this + 23) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_183:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_118:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_229:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 92);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_20;
    }
LABEL_40:
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 92) & 0x40000) == 0) {
      return this;
    }
    goto LABEL_41;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_40;
  }
LABEL_20:
  if ((v4 & 0x40000) == 0) {
    return this;
  }
LABEL_41:
  float v5 = *(float *)(v3 + 84);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::CoprocessorReplyGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 92);
  int v3 = *(_DWORD *)(a2 + 92);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0) {
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  }
  return v4;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::hash_value(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  int v1 = *((_DWORD *)this + 23);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_3;
    }
LABEL_45:
    uint64_t v4 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_46:
    uint64_t v6 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_9;
    }
LABEL_47:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 0x80000) == 0) {
    goto LABEL_45;
  }
LABEL_3:
  float v3 = *((float *)this + 22);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_46;
  }
LABEL_6:
  float v5 = *((float *)this + 7);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_47;
  }
LABEL_9:
  float v7 = *((float *)this + 18);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_12:
    uint64_t v9 = *((unsigned int *)this + 8);
    if ((v1 & 8) != 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned int *)this + 6);
    if ((v1 & 0x800) != 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    uint64_t v11 = *((unsigned int *)this + 14);
    if ((v1 & 0x100) != 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    uint64_t v12 = *((unsigned int *)this + 11);
    if ((v1 & 0x80) != 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v12 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_16:
    uint64_t v13 = *((unsigned int *)this + 10);
    if ((v1 & 0x200) != 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v13 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_17:
    uint64_t v14 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
LABEL_54:
    uint64_t v16 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_21;
    }
LABEL_55:
    uint64_t v18 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v14 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_54;
  }
LABEL_18:
  float v15 = *((float *)this + 5);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_55;
  }
LABEL_21:
  float v17 = *((float *)this + 4);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_24:
    uint64_t v19 = *((unsigned int *)this + 13);
    if ((v1 & 0x40) != 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v19 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_25:
    uint64_t v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_26;
    }
LABEL_58:
    uint64_t v22 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_29;
    }
LABEL_59:
    uint64_t v24 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_32;
    }
LABEL_60:
    uint64_t v26 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_35;
    }
LABEL_61:
    uint64_t v28 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_62;
  }
LABEL_57:
  uint64_t v20 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_26:
  float v21 = *((float *)this + 15);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_59;
  }
LABEL_29:
  float v23 = *((float *)this + 16);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_60;
  }
LABEL_32:
  float v25 = *((float *)this + 17);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_61;
  }
LABEL_35:
  float v27 = *((float *)this + 19);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x20000) != 0)
  {
LABEL_38:
    float v29 = *((float *)this + 20);
    uint64_t v30 = LODWORD(v29);
    if (v29 == 0.0) {
      uint64_t v30 = 0;
    }
    if ((v1 & 0x40000) != 0) {
      goto LABEL_41;
    }
LABEL_63:
    uint64_t v32 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
  }
LABEL_62:
  uint64_t v30 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_63;
  }
LABEL_41:
  float v31 = *((float *)this + 21);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
}

uint64_t CMMsl::CourseConstraints::CourseConstraints(uint64_t this)
{
  *(void *)this = &unk_270641058;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270641058;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CourseConstraints::~CourseConstraints(CMMsl::CourseConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::CourseConstraints::CourseConstraints(CMMsl::CourseConstraints *this, const CMMsl::CourseConstraints *a2)
{
  *(void *)this = &unk_270641058;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *((void *)a2 + 1);
  *((unsigned char *)this + 20) = 1;
  *((void *)this + 1) = v3;
  char v2 = 3;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, const CMMsl::CourseConstraints *a2)
{
  if ((const CMMsl::CourseConstraints *)a1 != a2)
  {
    CMMsl::CourseConstraints::CourseConstraints((CMMsl::CourseConstraints *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CourseConstraints *a2, CMMsl::CourseConstraints *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::CourseConstraints::CourseConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641058;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270641058;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270641058;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::CourseConstraints::formatText(CMMsl::CourseConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 4));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CourseConstraints::readFrom(CMMsl::CourseConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

BOOL CMMsl::CourseConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::CourseConstraints::hash_value(CMMsl::CourseConstraints *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ *(void *)&v1;
}

void *CMMsl::CourseCorrection::CourseCorrection(void *this)
{
  *this = &unk_270641090;
  this[1] = 0;
  return this;
}

{
  *this = &unk_270641090;
  this[1] = 0;
  return this;
}

void CMMsl::CourseCorrection::~CourseCorrection(CMMsl::CourseCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641090;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::CourseCorrection::~CourseCorrection(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::CourseCorrection::CourseCorrection(void *this, const CMMsl::CourseCorrection *a2)
{
  *this = &unk_270641090;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::CourseCorrection *CMMsl::CourseCorrection::operator=(const CMMsl::CourseCorrection *a1, const CMMsl::CourseCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::CourseCorrection::CourseCorrection(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::CourseCorrection::~CourseCorrection((CMMsl::CourseCorrection *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CourseCorrection *a2, CMMsl::CourseCorrection *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::CourseCorrection::CourseCorrection(void *a1, uint64_t a2)
{
  *a1 = &unk_270641090;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270641090;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::CourseCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270641090;
    v6[1] = v4;
    CMMsl::CourseCorrection::~CourseCorrection((CMMsl::CourseCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::CourseCorrection::formatText(CMMsl::CourseCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::CourseCorrection::readFrom(CMMsl::CourseCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

BOOL CMMsl::CourseCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  }
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CourseCorrection::hash_value(CMMsl::CourseCorrection *this)
{
  BOOL result = (CMMsl::DeviceMotionCorrection *)*((void *)this + 1);
  if (result) {
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::CourseCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::DeviceMotion::~DeviceMotion(CMMsl::DeviceMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::DeviceMotion::DeviceMotion(CMMsl::DeviceMotion *this, const CMMsl::DeviceMotion *a2)
{
  *(void *)this = &unk_2706410C8;
  *((_DWORD *)this + 31) = 0;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    int v3 = 16;
    *((_DWORD *)this + 31) = 16;
    *((void *)this + 5) = v4;
    int v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 31) = v3;
    *((void *)this + 2) = v4;
    int v2 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 31) = v3;
    *((void *)this + 3) = v4;
    int v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v4 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 31) = v3;
  *((void *)this + 4) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v4 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 31) = v3;
  *((void *)this + 1) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 27) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 20) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 21) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v5 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 14) = v5;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 19) = v6;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 13) = v7;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v8 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 23) = v8;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v9 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 28) = v9;
  int v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_50;
  }
LABEL_49:
  char v10 = *((unsigned char *)a2 + 120);
  v3 |= 0x800000u;
  *((_DWORD *)this + 31) = v3;
  *((unsigned char *)this + 120) = v10;
  if ((*((_DWORD *)a2 + 31) & 0x400000) == 0) {
    return *(float *)&v4;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 31) = v3 | 0x400000;
  *((_DWORD *)this + 29) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, const CMMsl::DeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((CMMsl::DeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DeviceMotion *a2, CMMsl::DeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v8) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v8;
  LODWORD(v8) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  int v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  int v10 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  int v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  int v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  int v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v13;
  float result = *((float *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((float *)a2 + 29) = result;
  return result;
}

float CMMsl::DeviceMotion::DeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706410C8;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  float result = *(float *)(a2 + 116);
  *(float *)(a1 + 116) = result;
  return result;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotion::formatText(CMMsl::DeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 12));
    int v5 = *((_DWORD *)this + 31);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clientID");
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isGyroOn");
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel");
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "mode");
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "status");
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "variant");
  if ((*((_DWORD *)this + 31) & 0x400000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(a2, "visionCompassBias", *((float *)this + 29));
LABEL_26:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DeviceMotion::readFrom(CMMsl::DeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_155;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 31) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 2u:
        *((_DWORD *)this + 31) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 3u:
        *((_DWORD *)this + 31) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 4u:
        *((_DWORD *)this + 31) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_38;
      case 5u:
        *((_DWORD *)this + 31) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_38:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_154;
      case 6u:
        *((_DWORD *)this + 31) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 7u:
        *((_DWORD *)this + 31) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 8u:
        *((_DWORD *)this + 31) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 9u:
        *((_DWORD *)this + 31) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0xAu:
        *((_DWORD *)this + 31) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0xBu:
        *((_DWORD *)this + 31) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0xCu:
        *((_DWORD *)this + 31) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0xDu:
        *((_DWORD *)this + 31) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0xEu:
        *((_DWORD *)this + 31) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0xFu:
        *((_DWORD *)this + 31) |= 0x80u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_164;
            }
            unint64_t v54 = v20++;
            char v55 = *(unsigned char *)(v21 + v54);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_163:
              unint64_t v2 = v54 + 1;
              goto LABEL_164;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_163;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_164;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_164:
        *((_DWORD *)this + 14) = v24;
        break;
      case 0x10u:
        *((_DWORD *)this + 31) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0x11u:
        *((_DWORD *)this + 31) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0x12u:
        *((_DWORD *)this + 31) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_114;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_153;
      case 0x13u:
        *((_DWORD *)this + 31) |= 0x1000u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_169;
            }
            unint64_t v58 = v26++;
            char v59 = *(unsigned char *)(v27 + v58);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_168:
              unint64_t v2 = v58 + 1;
              goto LABEL_169;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_168;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_169;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_169:
        *((_DWORD *)this + 19) = v30;
        break;
      case 0x14u:
        *((_DWORD *)this + 31) |= 0x40u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_174;
            }
            unint64_t v62 = v32++;
            char v63 = *(unsigned char *)(v33 + v62);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_173:
              unint64_t v2 = v62 + 1;
              goto LABEL_174;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_173;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_174;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_174:
        *((_DWORD *)this + 13) = v36;
        break;
      case 0x15u:
        *((_DWORD *)this + 31) |= 0x10000u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_179;
            }
            unint64_t v66 = v38++;
            char v67 = *(unsigned char *)(v39 + v66);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_178:
              unint64_t v2 = v66 + 1;
              goto LABEL_179;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_178;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_179;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_179:
        *((_DWORD *)this + 23) = v42;
        break;
      case 0x16u:
        *((_DWORD *)this + 31) |= 0x200000u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_184;
            }
            unint64_t v70 = v44++;
            char v71 = *(unsigned char *)(v45 + v70);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_183:
              unint64_t v2 = v70 + 1;
              goto LABEL_184;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_183;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_184;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_184:
        *((_DWORD *)this + 28) = v48;
        break;
      case 0x17u:
        *((_DWORD *)this + 31) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v51 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v50 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v51 = v50 != 0;
        }
        *((unsigned char *)this + 120) = v51;
        break;
      case 0x18u:
        *((_DWORD *)this + 31) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_153:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_154:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_114:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_155:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 124);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 124) & 0x400000) == 0) {
      return this;
    }
    goto LABEL_49;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x400000) == 0) {
    return this;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 116);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::DeviceMotion::hash_value(CMMsl::DeviceMotion *this)
{
  int v1 = *((_DWORD *)this + 31);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_63:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_64:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_65:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_66:
    double v6 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_15;
    }
LABEL_67:
    uint64_t v8 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_18;
    }
LABEL_68:
    uint64_t v10 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_21;
    }
LABEL_69:
    uint64_t v12 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_70:
    uint64_t v14 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_27;
    }
LABEL_71:
    uint64_t v16 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_30;
    }
LABEL_72:
    uint64_t v18 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_33;
    }
LABEL_73:
    uint64_t v20 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_36;
    }
LABEL_74:
    uint64_t v22 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_39;
    }
LABEL_75:
    uint64_t v24 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
    goto LABEL_76;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_63;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_64;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_65;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_67;
  }
LABEL_15:
  float v7 = *((float *)this + 25);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_68;
  }
LABEL_18:
  float v9 = *((float *)this + 26);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_69;
  }
LABEL_21:
  float v11 = *((float *)this + 27);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_70;
  }
LABEL_24:
  float v13 = *((float *)this + 20);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_71;
  }
LABEL_27:
  float v15 = *((float *)this + 21);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_72;
  }
LABEL_30:
  float v17 = *((float *)this + 22);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_73;
  }
LABEL_33:
  float v19 = *((float *)this + 15);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_74;
  }
LABEL_36:
  float v21 = *((float *)this + 16);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_75;
  }
LABEL_39:
  float v23 = *((float *)this + 17);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    uint64_t v25 = *((int *)this + 14);
    if ((v1 & 0x800) != 0) {
      goto LABEL_43;
    }
LABEL_77:
    uint64_t v27 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_46;
    }
LABEL_78:
    uint64_t v29 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_49;
    }
LABEL_79:
    uint64_t v31 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_52;
    }
    goto LABEL_80;
  }
LABEL_76:
  uint64_t v25 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_77;
  }
LABEL_43:
  float v26 = *((float *)this + 18);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_78;
  }
LABEL_46:
  float v28 = *((float *)this + 24);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_79;
  }
LABEL_49:
  float v30 = *((float *)this + 12);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_52:
    uint64_t v32 = *((unsigned int *)this + 19);
    if ((v1 & 0x40) != 0) {
      goto LABEL_53;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v32 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_53:
    uint64_t v33 = *((unsigned int *)this + 13);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v33 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_54:
    uint64_t v34 = *((unsigned int *)this + 23);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v34 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_55:
    uint64_t v35 = *((unsigned int *)this + 28);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v35 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_56:
    uint64_t v36 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_57;
    }
LABEL_85:
    uint64_t v38 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_84:
  uint64_t v36 = 0;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_85;
  }
LABEL_57:
  float v37 = *((float *)this + 29);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this)
{
  *(void *)this = &unk_270641100;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270641100;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn(CMMsl::DeviceMotionAlwaysOn *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270641100;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this, const CMMsl::DeviceMotionAlwaysOn *a2)
{
  *(void *)this = &unk_270641100;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 20);
  if (v2)
  {
    char v3 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 20);
  }
  if ((v2 & 2) != 0)
  {
    char v4 = *((unsigned char *)a2 + 17);
    *(unsigned char *)(this + 20) |= 2u;
    *(unsigned char *)(this + 17) = v4;
  }
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, const CMMsl::DeviceMotionAlwaysOn *a2)
{
  if ((const CMMsl::DeviceMotionAlwaysOn *)a1 != a2)
  {
    CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    __int16 v8 = v4;
    CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn((CMMsl::DeviceMotionAlwaysOn *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DeviceMotionAlwaysOn *a2, CMMsl::DeviceMotionAlwaysOn *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 17);
  *(unsigned char *)(this + 17) = *((unsigned char *)a2 + 17);
  *((unsigned char *)a2 + 17) = v4;
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641100;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    __int16 v8 = v4;
    CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn((CMMsl::DeviceMotionAlwaysOn *)v6);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::formatText(CMMsl::DeviceMotionAlwaysOn *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "deviceMotion");
  }
  char v6 = *((unsigned char *)this + 20);
  if (v6)
  {
    PB::TextFormatter::format(a2, "inQuiescentMode");
    char v6 = *((unsigned char *)this + 20);
  }
  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(a2, "shouldGyroBeOn");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DeviceMotionAlwaysOn::readFrom(CMMsl::DeviceMotionAlwaysOn *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_23:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 17) = v24;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 >= *((void *)a2 + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v26 = v25 + 1;
          int v27 = *(unsigned __int8 *)(*(void *)a2 + v25);
          *((void *)a2 + 1) = v26;
          BOOL v28 = v27 != 0;
        }
        *((unsigned char *)this + 16) = v28;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
LABEL_19:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_23;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 20);
  if (v5)
  {
    this = PB::Writer::write(a2);
    char v5 = *(unsigned char *)(v3 + 20);
  }
  if ((v5 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::DeviceMotionAlwaysOn::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

unint64_t CMMsl::DeviceMotionAlwaysOn::hash_value(CMMsl::DeviceMotionAlwaysOn *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  }
  if (*((unsigned char *)this + 20))
  {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v4 = *((unsigned __int8 *)this + 17);
  return v3 ^ v2 ^ v4;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::makeDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  *(void *)this = &unk_270641138;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::DeviceMotionCorrection *CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this, const CMMsl::DeviceMotionCorrection *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (void *)((char *)this + 56);
  *(void *)this = &unk_270641138;
  *(_OWORD *)((char *)this + 104) = 0u;
  char v6 = (void *)((char *)this + 104);
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if (*((unsigned char *)a2 + 160))
  {
    uint64_t v7 = *((void *)a2 + 19);
    *((unsigned char *)this + 160) = 1;
    *((void *)this + 19) = v7;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_2572C75B4(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4((void *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, const CMMsl::DeviceMotionCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCorrection *a2, CMMsl::DeviceMotionCorrection *a3)
{
  int v3 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  double result = *((double *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((double *)a2 + 19) = result;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v11;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  uint64_t v17 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v17;
  uint64_t v18 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v18;
  uint64_t v19 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v19;
  uint64_t v20 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v20;
  uint64_t v21 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v21;
  uint64_t v22 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v22;
  return result;
}

uint64_t CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641138;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a2 + 160) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  sub_2572C7560(a1 + 104, (__n128 *)(a2 + 104));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(a1 + 80, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 128, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCorrection::formatText(CMMsl::DeviceMotionCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "dx", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "estimate", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "measurement", v13);
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "noisevariance", v16);
  }
  uint64_t v17 = (float *)*((void *)this + 13);
  uint64_t v18 = (float *)*((void *)this + 14);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(a2, "residual", v19);
  }
  uint64_t v20 = (float *)*((void *)this + 16);
  uint64_t v21 = (float *)*((void *)this + 17);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(a2, "statevariance", v22);
  }
  if (*((unsigned char *)this + 160)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::DeviceMotionCorrection::readFrom(CMMsl::DeviceMotionCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 160) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_276;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_278;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            while (v22 < v23 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v25 = (char *)*((void *)this + 5);
              unint64_t v24 = *((void *)this + 6);
              if ((unint64_t)v25 >= v24)
              {
                int v27 = (char *)*((void *)this + 4);
                uint64_t v28 = (v25 - v27) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_286;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v31 = (unint64_t)sub_2572C76F0(v31);
                  int v27 = (char *)*((void *)this + 4);
                  unint64_t v25 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                uint64_t v33 = (_DWORD *)(v31 + 4 * v28);
                *uint64_t v33 = 0;
                unint64_t v26 = v33 + 1;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--uint64_t v33 = v34;
                }
                *((void *)this + 4) = v33;
                *((void *)this + 5) = v26;
                *((void *)this + 6) = v31 + 4 * v32;
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v25 = 0;
                unint64_t v26 = v25 + 4;
              }
              *((void *)this + 5) = v26;
              unint64_t v35 = *((void *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)a2 + v35);
              unint64_t v23 = *((void *)a2 + 2);
              unint64_t v22 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v22;
            }
            goto LABEL_171;
          }
          unsigned int v107 = (char *)*((void *)this + 5);
          unint64_t v106 = *((void *)this + 6);
          if ((unint64_t)v107 >= v106)
          {
            unint64_t v119 = (char *)*((void *)this + 4);
            uint64_t v120 = (v107 - v119) >> 2;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62) {
              goto LABEL_286;
            }
            uint64_t v122 = v106 - (void)v119;
            if (v122 >> 1 > v121) {
              unint64_t v121 = v122 >> 1;
            }
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v121;
            }
            if (v123)
            {
              unint64_t v123 = (unint64_t)sub_2572C76F0(v123);
              unint64_t v119 = (char *)*((void *)this + 4);
              unsigned int v107 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v124 = 0;
            }
            char v155 = (_DWORD *)(v123 + 4 * v120);
            *char v155 = 0;
            unint64_t v108 = v155 + 1;
            while (v107 != v119)
            {
              int v156 = *((_DWORD *)v107 - 1);
              v107 -= 4;
              *--char v155 = v156;
            }
            *((void *)this + 4) = v155;
            *((void *)this + 5) = v108;
            *((void *)this + 6) = v123 + 4 * v124;
            if (v119) {
              operator delete(v119);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v107 = 0;
            unint64_t v108 = v107 + 4;
          }
          *((void *)this + 5) = v108;
          goto LABEL_274;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            while (v36 < v37 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v39 = (char *)*((void *)this + 8);
              unint64_t v38 = *((void *)this + 9);
              if ((unint64_t)v39 >= v38)
              {
                unsigned int v41 = (char *)*((void *)this + 7);
                uint64_t v42 = (v39 - v41) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_286;
                }
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
                  unsigned int v41 = (char *)*((void *)this + 7);
                  uint64_t v39 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                unsigned int v47 = (_DWORD *)(v45 + 4 * v42);
                *unsigned int v47 = 0;
                char v40 = v47 + 1;
                while (v39 != v41)
                {
                  int v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--unsigned int v47 = v48;
                }
                *((void *)this + 7) = v47;
                *((void *)this + 8) = v40;
                *((void *)this + 9) = v45 + 4 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v39 = 0;
                char v40 = v39 + 4;
              }
              *((void *)this + 8) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
              unint64_t v37 = *((void *)a2 + 2);
              unint64_t v36 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v36;
            }
            goto LABEL_171;
          }
          uint64_t v110 = (char *)*((void *)this + 8);
          unint64_t v109 = *((void *)this + 9);
          if ((unint64_t)v110 >= v109)
          {
            unsigned int v125 = (char *)*((void *)this + 7);
            uint64_t v126 = (v110 - v125) >> 2;
            unint64_t v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 62) {
              goto LABEL_286;
            }
            uint64_t v128 = v109 - (void)v125;
            if (v128 >> 1 > v127) {
              unint64_t v127 = v128 >> 1;
            }
            if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v129 = v127;
            }
            if (v129)
            {
              unint64_t v129 = (unint64_t)sub_2572C76F0(v129);
              unsigned int v125 = (char *)*((void *)this + 7);
              uint64_t v110 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v130 = 0;
            }
            unint64_t v157 = (_DWORD *)(v129 + 4 * v126);
            *unint64_t v157 = 0;
            unint64_t v108 = v157 + 1;
            while (v110 != v125)
            {
              int v158 = *((_DWORD *)v110 - 1);
              v110 -= 4;
              *--unint64_t v157 = v158;
            }
            *((void *)this + 7) = v157;
            *((void *)this + 8) = v108;
            *((void *)this + 9) = v129 + 4 * v130;
            if (v125) {
              operator delete(v125);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v110 = 0;
            unint64_t v108 = v110 + 4;
          }
          *((void *)this + 8) = v108;
          goto LABEL_274;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            while (v50 < v51 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v53 = (char *)*((void *)this + 14);
              unint64_t v52 = *((void *)this + 15);
              if ((unint64_t)v53 >= v52)
              {
                char v55 = (char *)*((void *)this + 13);
                uint64_t v56 = (v53 - v55) >> 2;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  goto LABEL_286;
                }
                uint64_t v58 = v52 - (void)v55;
                if (v58 >> 1 > v57) {
                  unint64_t v57 = v58 >> 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v57;
                }
                if (v59)
                {
                  unint64_t v59 = (unint64_t)sub_2572C76F0(v59);
                  char v55 = (char *)*((void *)this + 13);
                  unsigned int v53 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v60 = 0;
                }
                unsigned int v61 = (_DWORD *)(v59 + 4 * v56);
                *unsigned int v61 = 0;
                unint64_t v54 = v61 + 1;
                while (v53 != v55)
                {
                  int v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--unsigned int v61 = v62;
                }
                *((void *)this + 13) = v61;
                *((void *)this + 14) = v54;
                *((void *)this + 15) = v59 + 4 * v60;
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v53 = 0;
                unint64_t v54 = v53 + 4;
              }
              *((void *)this + 14) = v54;
              unint64_t v63 = *((void *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              unint64_t v51 = *((void *)a2 + 2);
              unint64_t v50 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v50;
            }
            goto LABEL_171;
          }
          int v112 = (char *)*((void *)this + 14);
          unint64_t v111 = *((void *)this + 15);
          if ((unint64_t)v112 >= v111)
          {
            char v131 = (char *)*((void *)this + 13);
            uint64_t v132 = (v112 - v131) >> 2;
            unint64_t v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62) {
              goto LABEL_286;
            }
            uint64_t v134 = v111 - (void)v131;
            if (v134 >> 1 > v133) {
              unint64_t v133 = v134 >> 1;
            }
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v135 = v133;
            }
            if (v135)
            {
              unint64_t v135 = (unint64_t)sub_2572C76F0(v135);
              char v131 = (char *)*((void *)this + 13);
              int v112 = (char *)*((void *)this + 14);
            }
            else
            {
              uint64_t v136 = 0;
            }
            char v159 = (_DWORD *)(v135 + 4 * v132);
            *char v159 = 0;
            unint64_t v108 = v159 + 1;
            while (v112 != v131)
            {
              int v160 = *((_DWORD *)v112 - 1);
              v112 -= 4;
              *--char v159 = v160;
            }
            *((void *)this + 13) = v159;
            *((void *)this + 14) = v108;
            *((void *)this + 15) = v135 + 4 * v136;
            if (v131) {
              operator delete(v131);
            }
          }
          else
          {
            *(_DWORD *)int v112 = 0;
            unint64_t v108 = v112 + 4;
          }
          *((void *)this + 14) = v108;
          goto LABEL_274;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v64 = *((void *)a2 + 1);
            unint64_t v65 = *((void *)a2 + 2);
            while (v64 < v65 && !*((unsigned char *)a2 + 24))
            {
              char v67 = (char *)*((void *)this + 2);
              unint64_t v66 = *((void *)this + 3);
              if ((unint64_t)v67 >= v66)
              {
                unsigned int v69 = (char *)*((void *)this + 1);
                uint64_t v70 = (v67 - v69) >> 2;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62) {
                  goto LABEL_286;
                }
                uint64_t v72 = v66 - (void)v69;
                if (v72 >> 1 > v71) {
                  unint64_t v71 = v72 >> 1;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73)
                {
                  unint64_t v73 = (unint64_t)sub_2572C76F0(v73);
                  unsigned int v69 = (char *)*((void *)this + 1);
                  char v67 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v74 = 0;
                }
                unsigned int v75 = (_DWORD *)(v73 + 4 * v70);
                *unsigned int v75 = 0;
                char v68 = v75 + 1;
                while (v67 != v69)
                {
                  int v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--unsigned int v75 = v76;
                }
                *((void *)this + 1) = v75;
                *((void *)this + 2) = v68;
                *((void *)this + 3) = v73 + 4 * v74;
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *(_DWORD *)char v67 = 0;
                char v68 = v67 + 4;
              }
              *((void *)this + 2) = v68;
              unint64_t v77 = *((void *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *(v68 - 1) = *(_DWORD *)(*(void *)a2 + v77);
              unint64_t v65 = *((void *)a2 + 2);
              unint64_t v64 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v64;
            }
            goto LABEL_171;
          }
          int v114 = (char *)*((void *)this + 2);
          unint64_t v113 = *((void *)this + 3);
          if ((unint64_t)v114 >= v113)
          {
            unint64_t v137 = (char *)*((void *)this + 1);
            uint64_t v138 = (v114 - v137) >> 2;
            unint64_t v139 = v138 + 1;
            if ((unint64_t)(v138 + 1) >> 62) {
              goto LABEL_286;
            }
            uint64_t v140 = v113 - (void)v137;
            if (v140 >> 1 > v139) {
              unint64_t v139 = v140 >> 1;
            }
            if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v141 = v139;
            }
            if (v141)
            {
              unint64_t v141 = (unint64_t)sub_2572C76F0(v141);
              unint64_t v137 = (char *)*((void *)this + 1);
              int v114 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v142 = 0;
            }
            unint64_t v161 = (_DWORD *)(v141 + 4 * v138);
            *unint64_t v161 = 0;
            unint64_t v108 = v161 + 1;
            while (v114 != v137)
            {
              int v162 = *((_DWORD *)v114 - 1);
              v114 -= 4;
              *--unint64_t v161 = v162;
            }
            *((void *)this + 1) = v161;
            *((void *)this + 2) = v108;
            *((void *)this + 3) = v141 + 4 * v142;
            if (v137) {
              operator delete(v137);
            }
          }
          else
          {
            *(_DWORD *)int v114 = 0;
            unint64_t v108 = v114 + 4;
          }
          *((void *)this + 2) = v108;
          goto LABEL_274;
        case 6u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v78 = *((void *)a2 + 1);
            unint64_t v79 = *((void *)a2 + 2);
            while (v78 < v79 && !*((unsigned char *)a2 + 24))
            {
              char v81 = (char *)*((void *)this + 11);
              unint64_t v80 = *((void *)this + 12);
              if ((unint64_t)v81 >= v80)
              {
                unsigned int v83 = (char *)*((void *)this + 10);
                uint64_t v84 = (v81 - v83) >> 2;
                unint64_t v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 62) {
                  goto LABEL_286;
                }
                uint64_t v86 = v80 - (void)v83;
                if (v86 >> 1 > v85) {
                  unint64_t v85 = v86 >> 1;
                }
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v85;
                }
                if (v87)
                {
                  unint64_t v87 = (unint64_t)sub_2572C76F0(v87);
                  unsigned int v83 = (char *)*((void *)this + 10);
                  char v81 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v88 = 0;
                }
                char v89 = (_DWORD *)(v87 + 4 * v84);
                *char v89 = 0;
                char v82 = v89 + 1;
                while (v81 != v83)
                {
                  int v90 = *((_DWORD *)v81 - 1);
                  v81 -= 4;
                  *--char v89 = v90;
                }
                *((void *)this + 10) = v89;
                *((void *)this + 11) = v82;
                *((void *)this + 12) = v87 + 4 * v88;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(_DWORD *)char v81 = 0;
                char v82 = v81 + 4;
              }
              *((void *)this + 11) = v82;
              unint64_t v91 = *((void *)a2 + 1);
              if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *(v82 - 1) = *(_DWORD *)(*(void *)a2 + v91);
              unint64_t v79 = *((void *)a2 + 2);
              unint64_t v78 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v78;
            }
            goto LABEL_171;
          }
          int v116 = (char *)*((void *)this + 11);
          unint64_t v115 = *((void *)this + 12);
          if ((unint64_t)v116 >= v115)
          {
            char v143 = (char *)*((void *)this + 10);
            uint64_t v144 = (v116 - v143) >> 2;
            unint64_t v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62) {
              goto LABEL_286;
            }
            uint64_t v146 = v115 - (void)v143;
            if (v146 >> 1 > v145) {
              unint64_t v145 = v146 >> 1;
            }
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v147 = v145;
            }
            if (v147)
            {
              unint64_t v147 = (unint64_t)sub_2572C76F0(v147);
              char v143 = (char *)*((void *)this + 10);
              int v116 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v148 = 0;
            }
            char v163 = (_DWORD *)(v147 + 4 * v144);
            *char v163 = 0;
            unint64_t v108 = v163 + 1;
            while (v116 != v143)
            {
              int v164 = *((_DWORD *)v116 - 1);
              v116 -= 4;
              *--char v163 = v164;
            }
            *((void *)this + 10) = v163;
            *((void *)this + 11) = v108;
            *((void *)this + 12) = v147 + 4 * v148;
            if (v143) {
              operator delete(v143);
            }
          }
          else
          {
            *(_DWORD *)int v116 = 0;
            unint64_t v108 = v116 + 4;
          }
          *((void *)this + 11) = v108;
          goto LABEL_274;
        case 7u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v92 = *((void *)a2 + 1);
            unint64_t v93 = *((void *)a2 + 2);
            while (v92 < v93 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v95 = (char *)*((void *)this + 17);
              unint64_t v94 = *((void *)this + 18);
              if ((unint64_t)v95 >= v94)
              {
                char v97 = (char *)*((void *)this + 16);
                uint64_t v98 = (v95 - v97) >> 2;
                unint64_t v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 62) {
                  goto LABEL_286;
                }
                uint64_t v100 = v94 - (void)v97;
                if (v100 >> 1 > v99) {
                  unint64_t v99 = v100 >> 1;
                }
                if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v101 = v99;
                }
                if (v101)
                {
                  unint64_t v101 = (unint64_t)sub_2572C76F0(v101);
                  char v97 = (char *)*((void *)this + 16);
                  unsigned int v95 = (char *)*((void *)this + 17);
                }
                else
                {
                  uint64_t v102 = 0;
                }
                unsigned int v103 = (_DWORD *)(v101 + 4 * v98);
                *unsigned int v103 = 0;
                unint64_t v96 = v103 + 1;
                while (v95 != v97)
                {
                  int v104 = *((_DWORD *)v95 - 1);
                  v95 -= 4;
                  *--unsigned int v103 = v104;
                }
                *((void *)this + 16) = v103;
                *((void *)this + 17) = v96;
                *((void *)this + 18) = v101 + 4 * v102;
                if (v97) {
                  operator delete(v97);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v95 = 0;
                unint64_t v96 = v95 + 4;
              }
              *((void *)this + 17) = v96;
              unint64_t v105 = *((void *)a2 + 1);
              if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)a2 + 2))
              {
LABEL_170:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v96 - 1) = *(_DWORD *)(*(void *)a2 + v105);
              unint64_t v93 = *((void *)a2 + 2);
              unint64_t v92 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v92;
            }
LABEL_171:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v118 = (char *)*((void *)this + 17);
            unint64_t v117 = *((void *)this + 18);
            if ((unint64_t)v118 >= v117)
            {
              unint64_t v149 = (char *)*((void *)this + 16);
              uint64_t v150 = (v118 - v149) >> 2;
              unint64_t v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 62) {
LABEL_286:
              }
                sub_2570AFD0C();
              uint64_t v152 = v117 - (void)v149;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                unint64_t v153 = (unint64_t)sub_2572C76F0(v153);
                unint64_t v149 = (char *)*((void *)this + 16);
                unint64_t v118 = (char *)*((void *)this + 17);
              }
              else
              {
                uint64_t v154 = 0;
              }
              unint64_t v165 = (_DWORD *)(v153 + 4 * v150);
              *unint64_t v165 = 0;
              unint64_t v108 = v165 + 1;
              while (v118 != v149)
              {
                int v166 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *--unint64_t v165 = v166;
              }
              *((void *)this + 16) = v165;
              *((void *)this + 17) = v108;
              *((void *)this + 18) = v153 + 4 * v154;
              if (v149) {
                operator delete(v149);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v118 = 0;
              unint64_t v108 = v118 + 4;
            }
            *((void *)this + 17) = v108;
LABEL_274:
            unint64_t v167 = *((void *)a2 + 1);
            if (v167 <= 0xFFFFFFFFFFFFFFFBLL && v167 + 4 <= *((void *)a2 + 2))
            {
              *(v108 - 1) = *(_DWORD *)(*(void *)a2 + v167);
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_278:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_276:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_279;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_279:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::DeviceMotionCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 160)) {
    this = PB::Writer::write(a2, *(double *)(this + 152));
  }
  int v4 = (float *)v3[4];
  uint64_t v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = (float *)v3[7];
  uint64_t v8 = (float *)v3[8];
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = (float *)v3[13];
  unint64_t v11 = (float *)v3[14];
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = (float *)v3[1];
  BOOL v14 = (float *)v3[2];
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  unsigned int v16 = (float *)v3[10];
  unint64_t v17 = (float *)v3[11];
  while (v16 != v17)
  {
    float v18 = *v16++;
    this = PB::Writer::write(a2, v18);
  }
  unint64_t v20 = (float *)v3[16];
  int v19 = (float *)v3[17];
  while (v20 != v19)
  {
    float v21 = *v20++;
    this = PB::Writer::write(a2, v21);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCorrection::hash_value(CMMsl::DeviceMotionCorrection *this)
{
  if (*((unsigned char *)this + 160))
  {
    if (*((double *)this + 19) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 19);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = v2 ^ v3 ^ PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = v5 ^ PBHashBytes();
  return v4 ^ v6 ^ PBHashBytes();
}

double CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  *(void *)this = &unk_270641170;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641170;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  *(void *)this = &unk_270641170;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::DeviceMotionCovariance *CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this, const CMMsl::DeviceMotionCovariance *a2)
{
  *(void *)this = &unk_270641170;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, const CMMsl::DeviceMotionCovariance *a2)
{
  if ((const CMMsl::DeviceMotionCovariance *)a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v7;
    long long v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCovariance *a2, CMMsl::DeviceMotionCovariance *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641170;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v7;
    long long v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::formatText(CMMsl::DeviceMotionCovariance *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "biasvariance", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "statevariance", v10);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::DeviceMotionCovariance::readFrom(CMMsl::DeviceMotionCovariance *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        if (v19 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          while (v37 < v38 && !*((unsigned char *)a2 + 24))
          {
            char v40 = (char *)*((void *)this + 5);
            unint64_t v39 = *((void *)this + 6);
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v42 = (char *)*((void *)this + 4);
              uint64_t v43 = (v40 - v42) >> 2;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62) {
                goto LABEL_125;
              }
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 1 > v44) {
                unint64_t v44 = v45 >> 1;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                unint64_t v46 = (unint64_t)sub_2572C76F0(v46);
                uint64_t v42 = (char *)*((void *)this + 4);
                char v40 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v47 = 0;
              }
              int v48 = (_DWORD *)(v46 + 4 * v43);
              *int v48 = 0;
              unsigned int v41 = v48 + 1;
              while (v40 != v42)
              {
                int v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *--int v48 = v49;
              }
              *((void *)this + 4) = v48;
              *((void *)this + 5) = v41;
              *((void *)this + 6) = v46 + 4 * v47;
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(_DWORD *)char v40 = 0;
              unsigned int v41 = v40 + 4;
            }
            *((void *)this + 5) = v41;
            unint64_t v50 = *((void *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
              goto LABEL_81;
            }
            *(v41 - 1) = *(_DWORD *)(*(void *)a2 + v50);
            unint64_t v38 = *((void *)a2 + 2);
            unint64_t v37 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v37;
          }
          goto LABEL_82;
        }
        char v55 = (char *)*((void *)this + 5);
        unint64_t v54 = *((void *)this + 6);
        if ((unint64_t)v55 >= v54)
        {
          int v62 = (char *)*((void *)this + 4);
          uint64_t v63 = (v55 - v62) >> 2;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
LABEL_125:
          }
            sub_2570AFD0C();
          uint64_t v65 = v54 - (void)v62;
          if (v65 >> 1 > v64) {
            unint64_t v64 = v65 >> 1;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            unint64_t v66 = (unint64_t)sub_2572C76F0(v66);
            int v62 = (char *)*((void *)this + 4);
            char v55 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v67 = 0;
          }
          uint64_t v70 = (_DWORD *)(v66 + 4 * v63);
          _DWORD *v70 = 0;
          unsigned int v53 = v70 + 1;
          while (v55 != v62)
          {
            int v71 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *--uint64_t v70 = v71;
          }
          *((void *)this + 4) = v70;
          *((void *)this + 5) = v53;
          *((void *)this + 6) = v66 + 4 * v67;
          if (v62) {
            operator delete(v62);
          }
        }
        else
        {
          *(_DWORD *)char v55 = 0;
          unsigned int v53 = v55 + 4;
        }
        *((void *)this + 5) = v53;
LABEL_113:
        unint64_t v72 = *((void *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
          goto LABEL_115;
        }
        *(v53 - 1) = *(_DWORD *)(*(void *)a2 + v72);
        uint64_t v22 = *((void *)a2 + 1) + 4;
        goto LABEL_117;
      }
      if (v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_118;
      }
      *((unsigned char *)this + 64) |= 1u;
      unint64_t v21 = *((void *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
      {
LABEL_115:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((void *)this + 7) = *(void *)(*(void *)a2 + v21);
      uint64_t v22 = *((void *)a2 + 1) + 8;
LABEL_117:
      *((void *)a2 + 1) = v22;
LABEL_118:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v19 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v23 = *((void *)a2 + 1);
      unint64_t v24 = *((void *)a2 + 2);
      while (v23 < v24 && !*((unsigned char *)a2 + 24))
      {
        unint64_t v26 = (char *)*((void *)this + 2);
        unint64_t v25 = *((void *)this + 3);
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v28 = (char *)*((void *)this + 1);
          uint64_t v29 = (v26 - v28) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            goto LABEL_125;
          }
          uint64_t v31 = v25 - (void)v28;
          if (v31 >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            unint64_t v32 = (unint64_t)sub_2572C76F0(v32);
            uint64_t v28 = (char *)*((void *)this + 1);
            unint64_t v26 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v33 = 0;
          }
          int v34 = (_DWORD *)(v32 + 4 * v29);
          _DWORD *v34 = 0;
          int v27 = v34 + 1;
          while (v26 != v28)
          {
            int v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *--int v34 = v35;
          }
          *((void *)this + 1) = v34;
          *((void *)this + 2) = v27;
          *((void *)this + 3) = v32 + 4 * v33;
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v26 = 0;
          int v27 = v26 + 4;
        }
        *((void *)this + 2) = v27;
        unint64_t v36 = *((void *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2))
        {
LABEL_81:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v27 - 1) = *(_DWORD *)(*(void *)a2 + v36);
        unint64_t v24 = *((void *)a2 + 2);
        unint64_t v23 = *((void *)a2 + 1) + 4;
        *((void *)a2 + 1) = v23;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    unint64_t v52 = (char *)*((void *)this + 2);
    unint64_t v51 = *((void *)this + 3);
    if ((unint64_t)v52 >= v51)
    {
      uint64_t v56 = (char *)*((void *)this + 1);
      uint64_t v57 = (v52 - v56) >> 2;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62) {
        goto LABEL_125;
      }
      uint64_t v59 = v51 - (void)v56;
      if (v59 >> 1 > v58) {
        unint64_t v58 = v59 >> 1;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        unint64_t v60 = (unint64_t)sub_2572C76F0(v60);
        uint64_t v56 = (char *)*((void *)this + 1);
        unint64_t v52 = (char *)*((void *)this + 2);
      }
      else
      {
        uint64_t v61 = 0;
      }
      char v68 = (_DWORD *)(v60 + 4 * v57);
      *char v68 = 0;
      unsigned int v53 = v68 + 1;
      while (v52 != v56)
      {
        int v69 = *((_DWORD *)v52 - 1);
        v52 -= 4;
        *--char v68 = v69;
      }
      *((void *)this + 1) = v68;
      *((void *)this + 2) = v53;
      *((void *)this + 3) = v60 + 4 * v61;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v52 = 0;
      unsigned int v53 = v52 + 4;
    }
    *((void *)this + 2) = v53;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionCovariance::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56));
  }
  int v4 = (float *)v3[4];
  long long v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v8 = (float *)v3[1];
  float v7 = (float *)v3[2];
  while (v8 != v7)
  {
    float v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

BOOL CMMsl::DeviceMotionCovariance::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  unint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  int v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  float v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::hash_value(CMMsl::DeviceMotionCovariance *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

uint64_t CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t this)
{
  *(void *)this = &unk_2706411A8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = &unk_2706411A8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::DirectionOfTravelMetrics::~DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this, const CMMsl::DirectionOfTravelMetrics *a2)
{
  *(void *)this = &unk_2706411A8;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 28) = 2;
    *((void *)this + 2) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 28) = v3;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((unsigned char *)this + 28) = v3 | 4;
    *((_DWORD *)this + 6) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, const CMMsl::DirectionOfTravelMetrics *a2)
{
  if ((const CMMsl::DirectionOfTravelMetrics *)a1 != a2)
  {
    CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics((CMMsl::DirectionOfTravelMetrics *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DirectionOfTravelMetrics *a2, CMMsl::DirectionOfTravelMetrics *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706411A8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706411A8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_2706411A8;
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    int v11 = *(_DWORD *)(a1 + 28);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::DirectionOfTravelMetrics::formatText(CMMsl::DirectionOfTravelMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "theta", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DirectionOfTravelMetrics::readFrom(CMMsl::DirectionOfTravelMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if (v19 == 2)
        {
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_34;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        }
        else
        {
          if (v19 != 1)
          {
LABEL_27:
            uint64_t result = PB::Reader::skip(a2);
            if (!result) {
              return result;
            }
            unint64_t v2 = *((void *)a2 + 1);
            goto LABEL_38;
          }
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_34:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_38;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        }
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::DirectionOfTravelMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

BOOL CMMsl::DirectionOfTravelMetrics::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::DirectionOfTravelMetrics::hash_value(CMMsl::DirectionOfTravelMetrics *this)
{
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 28))
    {
LABEL_3:
      double v2 = *((double *)this + 1);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v4 = 0;
      return *(void *)&v2 ^ *(void *)&v1 ^ v4;
    }
  }
  else
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v3 = *((float *)this + 6);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ v4;
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this)
{
  *(void *)this = &unk_2706411E0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_2706411E0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DisplacingState::~DisplacingState(CMMsl::DisplacingState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this, const CMMsl::DisplacingState *a2)
{
  *(void *)this = &unk_2706411E0;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::DisplacingState *CMMsl::DisplacingState::operator=(const CMMsl::DisplacingState *a1, const CMMsl::DisplacingState *a2)
{
  if (a1 != a2)
  {
    CMMsl::DisplacingState::DisplacingState((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DisplacingState *a2, CMMsl::DisplacingState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DisplacingState::DisplacingState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706411E0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706411E0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DisplacingState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_2706411E0;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    void v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DisplacingState::formatText(CMMsl::DisplacingState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "displacingState");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DisplacingState::readFrom(CMMsl::DisplacingState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplacingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

BOOL CMMsl::DisplacingState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::DisplacingState::hash_value(CMMsl::DisplacingState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this)
{
  *(void *)this = &unk_270641218;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_270641218;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::DisplayStatus::~DisplayStatus(CMMsl::DisplayStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this, const CMMsl::DisplayStatus *a2)
{
  *(void *)this = &unk_270641218;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(void *)this = &unk_270641218;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::DisplayStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = &unk_270641218;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void *v7;
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = &unk_270641218;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DisplayStatus *a2, CMMsl::DisplayStatus *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270641218;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)uint64_t result = &unk_270641218;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::DisplayStatus::formatText(CMMsl::DisplayStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "displayOn");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::DisplayStatus::readFrom(CMMsl::DisplayStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplayStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL CMMsl::DisplayStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::DisplayStatus::hash_value(CMMsl::DisplayStatus *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

double CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  *(void *)this = &unk_270641250;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641250;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  *(void *)this = &unk_270641250;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::DoTEstimatorHandSwing *CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this, const CMMsl::DoTEstimatorHandSwing *a2)
{
  *(void *)this = &unk_270641250;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  char v5 = (void *)((char *)this + 56);
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if ((*((_WORD *)a2 + 84) & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 16);
    *((_WORD *)this + 84) = 2;
    *((void *)this + 16) = v6;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  __int16 v7 = *((_WORD *)a2 + 84);
  if ((v7 & 0x20) != 0)
  {
    int v12 = *((_DWORD *)a2 + 37);
    *((_WORD *)this + 84) |= 0x20u;
    *((_DWORD *)this + 37) = v12;
    __int16 v7 = *((_WORD *)a2 + 84);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v13 = *((void *)a2 + 15);
  *((_WORD *)this + 84) |= 1u;
  *((void *)this + 15) = v13;
  if ((*((_WORD *)a2 + 84) & 0x100) != 0)
  {
LABEL_8:
    int v8 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 84) |= 0x100u;
    *((_DWORD *)this + 40) = v8;
  }
LABEL_9:
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 0x10) != 0)
  {
    int v14 = *((_DWORD *)a2 + 36);
    *((_WORD *)this + 84) |= 0x10u;
    *((_DWORD *)this + 36) = v14;
    __int16 v9 = *((_WORD *)a2 + 84);
    if ((v9 & 0x200) == 0)
    {
LABEL_15:
      if ((v9 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
  }
  else if ((*((_WORD *)a2 + 84) & 0x200) == 0)
  {
    goto LABEL_15;
  }
  char v15 = *((unsigned char *)a2 + 164);
  *((_WORD *)this + 84) |= 0x200u;
  *((unsigned char *)this + 164) = v15;
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 4) == 0)
  {
LABEL_16:
    if ((v9 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v16 = *((_DWORD *)a2 + 34);
  *((_WORD *)this + 84) |= 4u;
  *((_DWORD *)this + 34) = v16;
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 8) == 0)
  {
LABEL_17:
    if ((v9 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v17 = *((_DWORD *)a2 + 35);
  *((_WORD *)this + 84) |= 8u;
  *((_DWORD *)this + 35) = v17;
  __int16 v9 = *((_WORD *)a2 + 84);
  if ((v9 & 0x40) == 0)
  {
LABEL_18:
    if ((v9 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_30:
  int v18 = *((_DWORD *)a2 + 38);
  *((_WORD *)this + 84) |= 0x40u;
  *((_DWORD *)this + 38) = v18;
  if ((*((_WORD *)a2 + 84) & 0x80) != 0)
  {
LABEL_19:
    int v10 = *((_DWORD *)a2 + 39);
    *((_WORD *)this + 84) |= 0x80u;
    *((_DWORD *)this + 39) = v10;
  }
LABEL_20:
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, const CMMsl::DoTEstimatorHandSwing *a2)
{
  if (a1 != a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorHandSwing *a2, CMMsl::DoTEstimatorHandSwing *a3)
{
  int v3 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  uint64_t v4 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 164);
  *((unsigned char *)this + 164) = *((unsigned char *)a2 + 164);
  *((unsigned char *)a2 + 164) = v13;
  LODWORD(v11) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v11;
  LODWORD(v11) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v11;
  LODWORD(v13) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v13;
  double result = *(double *)((char *)a2 + 156);
  uint64_t v15 = *(void *)((char *)this + 156);
  *(double *)((char *)this + 156) = result;
  *(void *)((char *)a2 + 156) = v15;
  uint64_t v16 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v16;
  uint64_t v17 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v17;
  uint64_t v18 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v18;
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  uint64_t v20 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  return result;
}

uint64_t CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(void *)a1 = &unk_270641250;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  sub_2572C7560(a1 + 80, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v8 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorHandSwing::formatText(CMMsl::DoTEstimatorHandSwing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 84);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "AzABufferMean", *((float *)this + 34));
    __int16 v5 = *((_WORD *)this + 84);
  }
  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(a2, "AzBBufferMean", *((float *)this + 35));
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "cachedAttitude", v8);
  }
  uint64_t v9 = *((void *)this + 13);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "candidateA");
  }
  uint64_t v10 = *((void *)this + 14);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "candidateB");
  }
  uint64_t v11 = (float *)*((void *)this + 4);
  uint64_t v12 = (float *)*((void *)this + 5);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "currAttitude", v13);
  }
  __int16 v14 = *((_WORD *)this + 84);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "disambiguationFlag");
    __int16 v14 = *((_WORD *)this + 84);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "lastDoTUpdateTime", *((double *)this + 15));
  if ((*((_WORD *)this + 84) & 0x20) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "lastEstimatedDoTAngleRad", *((float *)this + 37));
LABEL_17:
  uint64_t v15 = (float *)*((void *)this + 7);
  uint64_t v16 = (float *)*((void *)this + 8);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v17);
  }
  uint64_t v18 = (float *)*((void *)this + 10);
  uint64_t v19 = (float *)*((void *)this + 11);
  while (v18 != v19)
  {
    float v20 = *v18++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v20);
  }
  __int16 v21 = *((_WORD *)this + 84);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "newDisambiguation");
    __int16 v21 = *((_WORD *)this + 84);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0) {
        goto LABEL_24;
      }
      goto LABEL_35;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "numAbortedPeaks");
  __int16 v21 = *((_WORD *)this + 84);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "numLargeYawDetections");
  __int16 v21 = *((_WORD *)this + 84);
  if ((v21 & 0x100) == 0)
  {
LABEL_25:
    if ((v21 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "stateFSM");
  if ((*((_WORD *)this + 84) & 2) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
LABEL_27:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::DoTEstimatorHandSwing::readFrom(CMMsl::DoTEstimatorHandSwing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 84) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_285;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v20);
          goto LABEL_80;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v22 = *((void *)a2 + 2);
            while (v21 < v22 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v24 = (char *)*((void *)this + 11);
              unint64_t v23 = *((void *)this + 12);
              if ((unint64_t)v24 >= v23)
              {
                char v26 = (char *)*((void *)this + 10);
                uint64_t v27 = (v24 - v26) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  goto LABEL_298;
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  unint64_t v30 = (unint64_t)sub_2572C76F0(v30);
                  char v26 = (char *)*((void *)this + 10);
                  uint64_t v24 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                unint64_t v32 = (_DWORD *)(v30 + 4 * v27);
                *unint64_t v32 = 0;
                char v25 = v32 + 1;
                while (v24 != v26)
                {
                  int v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *--unint64_t v32 = v33;
                }
                *((void *)this + 10) = v32;
                *((void *)this + 11) = v25;
                *((void *)this + 12) = v30 + 4 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v24 = 0;
                char v25 = v24 + 4;
              }
              *((void *)this + 11) = v25;
              unint64_t v34 = *((void *)a2 + 1);
              if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
                goto LABEL_167;
              }
              *(v25 - 1) = *(_DWORD *)(*(void *)a2 + v34);
              unint64_t v22 = *((void *)a2 + 2);
              unint64_t v21 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v21;
            }
            goto LABEL_168;
          }
          unint64_t v119 = (char *)*((void *)this + 11);
          unint64_t v118 = *((void *)this + 12);
          if ((unint64_t)v119 >= v118)
          {
            char v143 = (char *)*((void *)this + 10);
            uint64_t v144 = (v119 - v143) >> 2;
            unint64_t v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62) {
              goto LABEL_298;
            }
            uint64_t v146 = v118 - (void)v143;
            if (v146 >> 1 > v145) {
              unint64_t v145 = v146 >> 1;
            }
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v147 = v145;
            }
            if (v147)
            {
              unint64_t v147 = (unint64_t)sub_2572C76F0(v147);
              char v143 = (char *)*((void *)this + 10);
              unint64_t v119 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v148 = 0;
            }
            unint64_t v167 = (_DWORD *)(v147 + 4 * v144);
            *unint64_t v167 = 0;
            uint64_t v120 = v167 + 1;
            while (v119 != v143)
            {
              int v168 = *((_DWORD *)v119 - 1);
              v119 -= 4;
              *--unint64_t v167 = v168;
            }
            *((void *)this + 10) = v167;
            *((void *)this + 11) = v120;
            *((void *)this + 12) = v147 + 4 * v148;
            if (v143) {
              operator delete(v143);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v119 = 0;
            uint64_t v120 = v119 + 4;
          }
          *((void *)this + 11) = v120;
          goto LABEL_283;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            while (v35 < v36 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v38 = (char *)*((void *)this + 8);
              unint64_t v37 = *((void *)this + 9);
              if ((unint64_t)v38 >= v37)
              {
                char v40 = (char *)*((void *)this + 7);
                uint64_t v41 = (v38 - v40) >> 2;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62) {
                  goto LABEL_298;
                }
                uint64_t v43 = v37 - (void)v40;
                if (v43 >> 1 > v42) {
                  unint64_t v42 = v43 >> 1;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C76F0(v44);
                  char v40 = (char *)*((void *)this + 7);
                  unint64_t v38 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                unint64_t v46 = (_DWORD *)(v44 + 4 * v41);
                _DWORD *v46 = 0;
                unint64_t v39 = v46 + 1;
                while (v38 != v40)
                {
                  int v47 = *((_DWORD *)v38 - 1);
                  v38 -= 4;
                  *--unint64_t v46 = v47;
                }
                *((void *)this + 7) = v46;
                *((void *)this + 8) = v39;
                *((void *)this + 9) = v44 + 4 * v45;
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v38 = 0;
                unint64_t v39 = v38 + 4;
              }
              *((void *)this + 8) = v39;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
                goto LABEL_167;
              }
              *(v39 - 1) = *(_DWORD *)(*(void *)a2 + v48);
              unint64_t v36 = *((void *)a2 + 2);
              unint64_t v35 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v35;
            }
            goto LABEL_168;
          }
          uint64_t v122 = (char *)*((void *)this + 8);
          unint64_t v121 = *((void *)this + 9);
          if ((unint64_t)v122 >= v121)
          {
            unint64_t v149 = (char *)*((void *)this + 7);
            uint64_t v150 = (v122 - v149) >> 2;
            unint64_t v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 62) {
              goto LABEL_298;
            }
            uint64_t v152 = v121 - (void)v149;
            if (v152 >> 1 > v151) {
              unint64_t v151 = v152 >> 1;
            }
            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v153 = v151;
            }
            if (v153)
            {
              unint64_t v153 = (unint64_t)sub_2572C76F0(v153);
              unint64_t v149 = (char *)*((void *)this + 7);
              uint64_t v122 = (char *)*((void *)this + 8);
            }
            else
            {
              uint64_t v154 = 0;
            }
            uint64_t v169 = (_DWORD *)(v153 + 4 * v150);
            *uint64_t v169 = 0;
            uint64_t v120 = v169 + 1;
            while (v122 != v149)
            {
              int v170 = *((_DWORD *)v122 - 1);
              v122 -= 4;
              *--uint64_t v169 = v170;
            }
            *((void *)this + 7) = v169;
            *((void *)this + 8) = v120;
            *((void *)this + 9) = v153 + 4 * v154;
            if (v149) {
              operator delete(v149);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v122 = 0;
            uint64_t v120 = v122 + 4;
          }
          *((void *)this + 8) = v120;
          goto LABEL_283;
        case 4u:
          *((_WORD *)this + 84) |= 0x20u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_285;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_287;
        case 5u:
          *((_WORD *)this + 84) |= 1u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
            goto LABEL_285;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v50);
LABEL_80:
          uint64_t v51 = *((void *)a2 + 1) + 8;
          goto LABEL_288;
        case 6u:
          *((_WORD *)this + 84) |= 0x100u;
          unint64_t v52 = *((void *)a2 + 1);
          unint64_t v53 = *((void *)a2 + 2);
          uint64_t v54 = *(void *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)a2 + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_245;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v14 = v56++ > 8;
            }
            while (!v14);
LABEL_179:
            LODWORD(v57) = 0;
            goto LABEL_245;
          }
          char v123 = 0;
          unsigned int v124 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              LODWORD(v57) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v125 = v52 + 1;
              char v126 = *(unsigned char *)(v54 + v52);
              *((void *)a2 + 1) = v125;
              v57 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                unint64_t v52 = v125;
                BOOL v14 = v124++ > 8;
                if (v14) {
                  goto LABEL_179;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v57) = 0;
              }
            }
            break;
          }
LABEL_245:
          *((_DWORD *)this + 40) = v57;
          goto LABEL_289;
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          *((_WORD *)this + 84) |= 0x10u;
          unint64_t v60 = *((void *)a2 + 1);
          unint64_t v61 = *((void *)a2 + 2);
          uint64_t v62 = *(void *)a2;
          if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
          {
            char v63 = 0;
            unsigned int v64 = 0;
            uint64_t v65 = 0;
            do
            {
              unint64_t v66 = v60 + 1;
              *((void *)a2 + 1) = v60 + 1;
              char v67 = *(unsigned char *)(v62 + v60);
              v65 |= (unint64_t)(v67 & 0x7F) << v63;
              if ((v67 & 0x80) == 0) {
                goto LABEL_248;
              }
              v63 += 7;
              unint64_t v60 = v66;
              BOOL v14 = v64++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v65) = 0;
            goto LABEL_248;
          }
          char v127 = 0;
          unsigned int v128 = 0;
          uint64_t v65 = 0;
          if (v61 <= v60) {
            unint64_t v61 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v61 == v60)
            {
              LODWORD(v65) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v129 = v60 + 1;
              char v130 = *(unsigned char *)(v62 + v60);
              *((void *)a2 + 1) = v129;
              v65 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                unint64_t v60 = v129;
                BOOL v14 = v128++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v65) = 0;
              }
            }
            break;
          }
LABEL_248:
          *((_DWORD *)this + 36) = v65;
          goto LABEL_289;
        case 0xAu:
          *((_WORD *)this + 84) |= 0x200u;
          unint64_t v68 = *((void *)a2 + 1);
          if (v68 >= *((void *)a2 + 2))
          {
            BOOL v71 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v69 = v68 + 1;
            int v70 = *(unsigned __int8 *)(*(void *)a2 + v68);
            *((void *)a2 + 1) = v69;
            BOOL v71 = v70 != 0;
          }
          *((unsigned char *)this + 164) = v71;
          goto LABEL_289;
        case 0xBu:
          *((_WORD *)this + 84) |= 4u;
          unint64_t v72 = *((void *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
            goto LABEL_285;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v72);
          goto LABEL_287;
        case 0xCu:
          *((_WORD *)this + 84) |= 8u;
          unint64_t v73 = *((void *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
            goto LABEL_285;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v73);
          goto LABEL_287;
        case 0xDu:
          *((_WORD *)this + 84) |= 0x40u;
          unint64_t v74 = *((void *)a2 + 1);
          unint64_t v75 = *((void *)a2 + 2);
          uint64_t v76 = *(void *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)a2 + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_251;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
LABEL_195:
            LODWORD(v79) = 0;
            goto LABEL_251;
          }
          char v131 = 0;
          unsigned int v132 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v133 = v74 + 1;
              char v134 = *(unsigned char *)(v76 + v74);
              *((void *)a2 + 1) = v133;
              v79 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                unint64_t v74 = v133;
                BOOL v14 = v132++ > 8;
                if (v14) {
                  goto LABEL_195;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v79) = 0;
              }
            }
            break;
          }
LABEL_251:
          *((_DWORD *)this + 38) = v79;
          goto LABEL_289;
        case 0xEu:
          *((_WORD *)this + 84) |= 0x80u;
          unint64_t v82 = *((void *)a2 + 1);
          unint64_t v83 = *((void *)a2 + 2);
          uint64_t v84 = *(void *)a2;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            char v85 = 0;
            unsigned int v86 = 0;
            uint64_t v87 = 0;
            do
            {
              unint64_t v88 = v82 + 1;
              *((void *)a2 + 1) = v82 + 1;
              char v89 = *(unsigned char *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0) {
                goto LABEL_254;
              }
              v85 += 7;
              unint64_t v82 = v88;
              BOOL v14 = v86++ > 8;
            }
            while (!v14);
LABEL_202:
            LODWORD(v87) = 0;
            goto LABEL_254;
          }
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v87 = 0;
          if (v83 <= v82) {
            unint64_t v83 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v137 = v82 + 1;
              char v138 = *(unsigned char *)(v84 + v82);
              *((void *)a2 + 1) = v137;
              v87 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                unint64_t v82 = v137;
                BOOL v14 = v136++ > 8;
                if (v14) {
                  goto LABEL_202;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v87) = 0;
              }
            }
            break;
          }
LABEL_254:
          *((_DWORD *)this + 39) = v87;
          goto LABEL_289;
        case 0xFu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v90 = *((void *)a2 + 1);
            unint64_t v91 = *((void *)a2 + 2);
            while (v90 < v91 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v93 = (char *)*((void *)this + 2);
              unint64_t v92 = *((void *)this + 3);
              if ((unint64_t)v93 >= v92)
              {
                unsigned int v95 = (char *)*((void *)this + 1);
                uint64_t v96 = (v93 - v95) >> 2;
                unint64_t v97 = v96 + 1;
                if ((unint64_t)(v96 + 1) >> 62) {
                  goto LABEL_298;
                }
                uint64_t v98 = v92 - (void)v95;
                if (v98 >> 1 > v97) {
                  unint64_t v97 = v98 >> 1;
                }
                if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v99 = v97;
                }
                if (v99)
                {
                  unint64_t v99 = (unint64_t)sub_2572C76F0(v99);
                  unsigned int v95 = (char *)*((void *)this + 1);
                  unint64_t v93 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v100 = 0;
                }
                unint64_t v101 = (_DWORD *)(v99 + 4 * v96);
                *unint64_t v101 = 0;
                unint64_t v94 = v101 + 1;
                while (v93 != v95)
                {
                  int v102 = *((_DWORD *)v93 - 1);
                  v93 -= 4;
                  *--unint64_t v101 = v102;
                }
                *((void *)this + 1) = v101;
                *((void *)this + 2) = v94;
                *((void *)this + 3) = v99 + 4 * v100;
                if (v95) {
                  operator delete(v95);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v93 = 0;
                unint64_t v94 = v93 + 4;
              }
              *((void *)this + 2) = v94;
              unint64_t v103 = *((void *)a2 + 1);
              if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((void *)a2 + 2)) {
                goto LABEL_167;
              }
              *(v94 - 1) = *(_DWORD *)(*(void *)a2 + v103);
              unint64_t v91 = *((void *)a2 + 2);
              unint64_t v90 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v90;
            }
            goto LABEL_168;
          }
          uint64_t v140 = (char *)*((void *)this + 2);
          unint64_t v139 = *((void *)this + 3);
          if ((unint64_t)v140 >= v139)
          {
            char v155 = (char *)*((void *)this + 1);
            uint64_t v156 = (v140 - v155) >> 2;
            unint64_t v157 = v156 + 1;
            if ((unint64_t)(v156 + 1) >> 62) {
              goto LABEL_298;
            }
            uint64_t v158 = v139 - (void)v155;
            if (v158 >> 1 > v157) {
              unint64_t v157 = v158 >> 1;
            }
            if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v159 = v157;
            }
            if (v159)
            {
              unint64_t v159 = (unint64_t)sub_2572C76F0(v159);
              char v155 = (char *)*((void *)this + 1);
              uint64_t v140 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v160 = 0;
            }
            int v171 = (_DWORD *)(v159 + 4 * v156);
            *int v171 = 0;
            uint64_t v120 = v171 + 1;
            while (v140 != v155)
            {
              int v172 = *((_DWORD *)v140 - 1);
              v140 -= 4;
              *--int v171 = v172;
            }
            *((void *)this + 1) = v171;
            *((void *)this + 2) = v120;
            *((void *)this + 3) = v159 + 4 * v160;
            if (v155) {
              operator delete(v155);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v140 = 0;
            uint64_t v120 = v140 + 4;
          }
          *((void *)this + 2) = v120;
          goto LABEL_283;
        case 0x10u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v104 = *((void *)a2 + 1);
            unint64_t v105 = *((void *)a2 + 2);
            while (v104 < v105 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v107 = (char *)*((void *)this + 5);
              unint64_t v106 = *((void *)this + 6);
              if ((unint64_t)v107 >= v106)
              {
                unint64_t v109 = (char *)*((void *)this + 4);
                uint64_t v110 = (v107 - v109) >> 2;
                unint64_t v111 = v110 + 1;
                if ((unint64_t)(v110 + 1) >> 62) {
                  goto LABEL_298;
                }
                uint64_t v112 = v106 - (void)v109;
                if (v112 >> 1 > v111) {
                  unint64_t v111 = v112 >> 1;
                }
                if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v113 = v111;
                }
                if (v113)
                {
                  unint64_t v113 = (unint64_t)sub_2572C76F0(v113);
                  unint64_t v109 = (char *)*((void *)this + 4);
                  unsigned int v107 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v114 = 0;
                }
                unint64_t v115 = (_DWORD *)(v113 + 4 * v110);
                *unint64_t v115 = 0;
                unint64_t v108 = v115 + 1;
                while (v107 != v109)
                {
                  int v116 = *((_DWORD *)v107 - 1);
                  v107 -= 4;
                  *--unint64_t v115 = v116;
                }
                *((void *)this + 4) = v115;
                *((void *)this + 5) = v108;
                *((void *)this + 6) = v113 + 4 * v114;
                if (v109) {
                  operator delete(v109);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v107 = 0;
                unint64_t v108 = v107 + 4;
              }
              *((void *)this + 5) = v108;
              unint64_t v117 = *((void *)a2 + 1);
              if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)a2 + 2))
              {
LABEL_167:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v108 - 1) = *(_DWORD *)(*(void *)a2 + v117);
              unint64_t v105 = *((void *)a2 + 2);
              unint64_t v104 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v104;
            }
LABEL_168:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v142 = (char *)*((void *)this + 5);
            unint64_t v141 = *((void *)this + 6);
            if ((unint64_t)v142 >= v141)
            {
              unint64_t v161 = (char *)*((void *)this + 4);
              uint64_t v162 = (v142 - v161) >> 2;
              unint64_t v163 = v162 + 1;
              if ((unint64_t)(v162 + 1) >> 62) {
LABEL_298:
              }
                sub_2570AFD0C();
              uint64_t v164 = v141 - (void)v161;
              if (v164 >> 1 > v163) {
                unint64_t v163 = v164 >> 1;
              }
              if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v165 = v163;
              }
              if (v165)
              {
                unint64_t v165 = (unint64_t)sub_2572C76F0(v165);
                unint64_t v161 = (char *)*((void *)this + 4);
                uint64_t v142 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v166 = 0;
              }
              int v173 = (_DWORD *)(v165 + 4 * v162);
              _DWORD *v173 = 0;
              uint64_t v120 = v173 + 1;
              while (v142 != v161)
              {
                int v174 = *((_DWORD *)v142 - 1);
                v142 -= 4;
                *--int v173 = v174;
              }
              *((void *)this + 4) = v173;
              *((void *)this + 5) = v120;
              *((void *)this + 6) = v165 + 4 * v166;
              if (v161) {
                operator delete(v161);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v142 = 0;
              uint64_t v120 = v142 + 4;
            }
            *((void *)this + 5) = v120;
LABEL_283:
            unint64_t v175 = *((void *)a2 + 1);
            if (v175 <= 0xFFFFFFFFFFFFFFFBLL && v175 + 4 <= *((void *)a2 + 2))
            {
              *(v120 - 1) = *(_DWORD *)(*(void *)a2 + v175);
LABEL_287:
              uint64_t v51 = *((void *)a2 + 1) + 4;
LABEL_288:
              *((void *)a2 + 1) = v51;
            }
            else
            {
LABEL_285:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_289;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_289:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t this)
{
  *(void *)this = &unk_2706454D0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_2706454D0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(_WORD *)(this + 168) & 2) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 128));
  }
  int v4 = *(float **)(v3 + 80);
  __int16 v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v7 = *(float **)(v3 + 56);
  uint64_t v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  __int16 v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 148));
    __int16 v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0) {
LABEL_12:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_13:
  unint64_t v11 = *(const PB::Base **)(v3 + 104);
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  unint64_t v12 = *(const PB::Base **)(v3 + 112);
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12);
  }
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0) {
        goto LABEL_20;
      }
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  this = PB::Writer::write(a2);
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
LABEL_38:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0) {
    goto LABEL_38;
  }
LABEL_22:
  if ((v13 & 0x80) != 0) {
LABEL_23:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_24:
  BOOL v14 = *(float **)(v3 + 8);
  char v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    float v16 = *v14++;
    this = PB::Writer::write(a2, v16);
  }
  char v18 = *(float **)(v3 + 32);
  unint64_t v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    float v19 = *v18++;
    this = PB::Writer::write(a2, v19);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorHandSwing::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 168);
  __int16 v5 = *(_WORD *)(a2 + 168);
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  uint64_t v7 = *(float **)(a1 + 80);
  float v6 = *(float **)(a1 + 88);
  uint64_t v8 = *(float **)(a2 + 80);
  if ((char *)v6 - (char *)v7 != *(void *)(a2 + 88) - (void)v8) {
    return 0;
  }
  while (v7 != v6)
  {
    if (*v7 != *v8) {
      return 0;
    }
    ++v7;
    ++v8;
  }
  __int16 v10 = *(float **)(a1 + 56);
  float v9 = *(float **)(a1 + 64);
  unint64_t v11 = *(float **)(a2 + 56);
  if ((char *)v9 - (char *)v10 != *(void *)(a2 + 64) - (void)v11) {
    return 0;
  }
  while (v10 != v9)
  {
    if (*v10 != *v11) {
      return 0;
    }
    ++v10;
    ++v11;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if (v4)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 168) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 168) & 0x100) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 168) & 0x100) != 0)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a2 + 104);
  if (v12)
  {
    if (!v13 || !CMMsl::SwingDoTCandidate::operator==(v12, v13)) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v15 = *(void *)(a2 + 112);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_39;
    }
    return 0;
  }
  if (!v15 || !CMMsl::SwingDoTCandidate::operator==(v14, v15)) {
    return 0;
  }
LABEL_39:
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  unint64_t v17 = *(float **)(a1 + 8);
  float v16 = *(float **)(a1 + 16);
  char v18 = *(float **)(a2 + 8);
  if ((char *)v16 - (char *)v17 != *(void *)(a2 + 16) - (void)v18) {
    return 0;
  }
  while (v17 != v16)
  {
    if (*v17 != *v18) {
      return 0;
    }
    ++v17;
    ++v18;
  }
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 40);
  unint64_t v21 = *(float **)(a2 + 32);
  if (v19 - v20 != *(void *)(a2 + 40) - (void)v21) {
    return 0;
  }
  if (v20 == v19) {
    return 1;
  }
  uint64_t v22 = v20 + 4;
  do
  {
    float v23 = *v21++;
    BOOL result = *(float *)(v22 - 4) == v23;
    BOOL v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

BOOL CMMsl::SwingDoTCandidate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

unint64_t CMMsl::DoTEstimatorHandSwing::hash_value(CMMsl::DoTEstimatorHandSwing *this)
{
  if ((*((_WORD *)this + 84) & 2) != 0)
  {
    if (*((double *)this + 16) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 16);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  __int16 v5 = *((_WORD *)this + 84);
  if ((v5 & 0x20) != 0)
  {
    float v9 = *((float *)this + 37);
    if (v9 == 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = LODWORD(v9);
    }
    if (v5)
    {
LABEL_8:
      if (*((double *)this + 15) == 0.0) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = *((void *)this + 15);
      }
      if ((*((_WORD *)this + 84) & 0x100) != 0) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (v5) {
      goto LABEL_8;
    }
  }
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 84) & 0x100) != 0)
  {
LABEL_12:
    uint64_t v8 = *((int *)this + 40);
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = 0;
LABEL_19:
  __int16 v10 = (CMMsl::SwingDoTCandidate *)*((void *)this + 13);
  if (v10) {
    uint64_t v11 = CMMsl::SwingDoTCandidate::hash_value(v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unint64_t v12 = *((void *)this + 14);
  if (v12) {
    unint64_t v12 = CMMsl::SwingDoTCandidate::hash_value((CMMsl::SwingDoTCandidate *)v12);
  }
  if ((v5 & 0x10) != 0)
  {
    uint64_t v13 = *((int *)this + 36);
    if ((v5 & 0x200) != 0)
    {
LABEL_26:
      uint64_t v14 = *((unsigned __int8 *)this + 164);
      if ((v5 & 4) != 0) {
        goto LABEL_27;
      }
LABEL_37:
      uint64_t v16 = 0;
      if ((v5 & 8) != 0) {
        goto LABEL_30;
      }
LABEL_38:
      uint64_t v18 = 0;
      if ((v5 & 0x40) != 0) {
        goto LABEL_33;
      }
LABEL_39:
      uint64_t v19 = 0;
      if ((v5 & 0x80) != 0) {
        goto LABEL_34;
      }
LABEL_40:
      uint64_t v20 = 0;
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if ((v5 & 0x200) != 0) {
      goto LABEL_26;
    }
  }
  uint64_t v14 = 0;
  if ((v5 & 4) == 0) {
    goto LABEL_37;
  }
LABEL_27:
  float v15 = *((float *)this + 34);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v5 & 8) == 0) {
    goto LABEL_38;
  }
LABEL_30:
  float v17 = *((float *)this + 35);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v5 & 0x40) == 0) {
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v19 = *((int *)this + 38);
  if ((v5 & 0x80) == 0) {
    goto LABEL_40;
  }
LABEL_34:
  uint64_t v20 = *((int *)this + 39);
LABEL_41:
  unint64_t v21 = v3 ^ v2 ^ v4 ^ v6 ^ v7 ^ v8 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19;
  uint64_t v22 = v20 ^ PBHashBytes();
  return v21 ^ v22 ^ PBHashBytes();
}

uint64_t CMMsl::DoTEstimatorHandSwing::makeCandidateA(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::makeCandidateB(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

double CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  *(void *)this = &unk_270641288;
  *((_DWORD *)this + 51) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_270641288;
  *((_DWORD *)this + 51) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

void CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  *(void *)this = &unk_270641288;
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::DoTEstimatorWithTNB *CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this, const CMMsl::DoTEstimatorWithTNB *a2)
{
  *(void *)this = &unk_270641288;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  __int16 v5 = (void *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (void *)((char *)this + 104);
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v7 = (void *)((char *)this + 152);
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  if (*((unsigned char *)a2 + 204))
  {
    uint64_t v8 = *((void *)a2 + 23);
    *((unsigned char *)this + 204) = 1;
    *((void *)this + 23) = v8;
  }
  if (this != a2)
  {
    sub_2572C75B4(v7, *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
    sub_2572C75B4((void *)this + 10, *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v9 = *((unsigned char *)a2 + 204);
  if ((v9 & 2) != 0)
  {
    int v13 = *((_DWORD *)a2 + 48);
    *((unsigned char *)this + 204) |= 2u;
    *((_DWORD *)this + 48) = v13;
    char v9 = *((unsigned char *)a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }
  char v14 = *((unsigned char *)a2 + 200);
  *((unsigned char *)this + 204) |= 8u;
  *((unsigned char *)this + 200) = v14;
  char v9 = *((unsigned char *)a2 + 204);
  if ((v9 & 0x10) == 0)
  {
LABEL_8:
    if ((v9 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_21:
  char v15 = *((unsigned char *)a2 + 201);
  *((unsigned char *)this + 204) |= 0x10u;
  *((unsigned char *)this + 201) = v15;
  if ((*((unsigned char *)a2 + 204) & 0x20) != 0)
  {
LABEL_9:
    char v10 = *((unsigned char *)a2 + 202);
    *((unsigned char *)this + 204) |= 0x20u;
    *((unsigned char *)this + 202) = v10;
  }
LABEL_10:
  if (*((void *)a2 + 22)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C75B4(v6, *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  }
  if ((*((unsigned char *)a2 + 204) & 4) != 0)
  {
    int v11 = *((_DWORD *)a2 + 49);
    *((unsigned char *)this + 204) |= 4u;
    *((_DWORD *)this + 49) = v11;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 16, *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    sub_2572C75B4(v5, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, const CMMsl::DoTEstimatorWithTNB *a2)
{
  if (a1 != a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorWithTNB *a2, CMMsl::DoTEstimatorWithTNB *a3)
{
  int v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  uint64_t v4 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v4;
  uint64_t v5 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v5;
  uint64_t v6 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v6;
  uint64_t v7 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v7;
  uint64_t v8 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v9;
  uint64_t v10 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  LODWORD(v4) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v4;
  LOBYTE(v16) = *((unsigned char *)this + 200);
  *((unsigned char *)this + 200) = *((unsigned char *)a2 + 200);
  *((unsigned char *)a2 + 200) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 201);
  *((unsigned char *)this + 201) = *((unsigned char *)a2 + 201);
  *((unsigned char *)a2 + 201) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 202);
  *((unsigned char *)this + 202) = *((unsigned char *)a2 + 202);
  *((unsigned char *)a2 + 202) = v16;
  uint64_t v17 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v17;
  uint64_t v18 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v18;
  uint64_t v19 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v19;
  uint64_t v20 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v20;
  float result = *((float *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((float *)a2 + 49) = result;
  uint64_t v22 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  uint64_t v24 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v24;
  uint64_t v25 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v25;
  uint64_t v26 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v26;
  uint64_t v27 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v27;
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270641288;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v6 = a1 + 8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  sub_2572C7560(a1 + 152, (__n128 *)(a2 + 152));
  sub_2572C7560(v5, (__n128 *)(a2 + 80));
  sub_2572C7560(v6, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
  uint64_t v7 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  uint64_t v8 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_2572C7560(a1 + 104, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  sub_2572C7560(a1 + 128, (__n128 *)(a2 + 128));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorWithTNB::formatText(CMMsl::DoTEstimatorWithTNB *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "TNBFrame");
  }
  if ((*((unsigned char *)this + 204) & 2) != 0) {
    PB::TextFormatter::format(a2, "dotQuality", *((float *)this + 48));
  }
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "dotVector", v8);
  }
  if ((*((unsigned char *)this + 204) & 8) != 0) {
    PB::TextFormatter::format(a2, "fusingGaze");
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "gazeVector", v11);
  }
  char v12 = *((unsigned char *)this + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "hasStep");
    char v12 = *((unsigned char *)this + 204);
  }
  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(a2, "hasValidTNBFrame");
  }
  uint64_t v13 = (float *)*((void *)this + 7);
  uint64_t v14 = (float *)*((void *)this + 8);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v15);
  }
  uint64_t v16 = (float *)*((void *)this + 10);
  uint64_t v17 = (float *)*((void *)this + 11);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v18);
  }
  uint64_t v19 = (float *)*((void *)this + 13);
  uint64_t v20 = (float *)*((void *)this + 14);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(a2, "rawDoTVector", v21);
  }
  uint64_t v22 = (float *)*((void *)this + 16);
  uint64_t v23 = (float *)*((void *)this + 17);
  while (v22 != v23)
  {
    float v24 = *v22++;
    PB::TextFormatter::format(a2, "rawInertialRotationRate", v24);
  }
  uint64_t v25 = (float *)*((void *)this + 19);
  uint64_t v26 = (float *)*((void *)this + 20);
  while (v25 != v26)
  {
    float v27 = *v25++;
    PB::TextFormatter::format(a2, "rawInertialUserAccel", v27);
  }
  char v28 = *((unsigned char *)this + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 49));
    char v28 = *((unsigned char *)this + 204);
  }
  if (v28) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 23));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::DoTEstimatorWithTNB::readFrom(CMMsl::DoTEstimatorWithTNB *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 204) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_336;
          }
          *((void *)this + 23) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_339;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            while (v22 < v23 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v25 = (char *)*((void *)this + 20);
              unint64_t v24 = *((void *)this + 21);
              if ((unint64_t)v25 >= v24)
              {
                float v27 = (char *)*((void *)this + 19);
                uint64_t v28 = (v25 - v27) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v31 = (unint64_t)sub_2572C76F0(v31);
                  float v27 = (char *)*((void *)this + 19);
                  uint64_t v25 = (char *)*((void *)this + 20);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                int v33 = (_DWORD *)(v31 + 4 * v28);
                *int v33 = 0;
                uint64_t v26 = v33 + 1;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--int v33 = v34;
                }
                *((void *)this + 19) = v33;
                *((void *)this + 20) = v26;
                *((void *)this + 21) = v31 + 4 * v32;
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v25 = 0;
                uint64_t v26 = v25 + 4;
              }
              *((void *)this + 20) = v26;
              unint64_t v35 = *((void *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
                goto LABEL_207;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)a2 + v35);
              unint64_t v23 = *((void *)a2 + 2);
              unint64_t v22 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v22;
            }
            goto LABEL_208;
          }
          char v135 = (char *)*((void *)this + 20);
          unint64_t v134 = *((void *)this + 21);
          if ((unint64_t)v135 >= v134)
          {
            unint64_t v149 = (char *)*((void *)this + 19);
            uint64_t v150 = (v135 - v149) >> 2;
            unint64_t v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 62) {
              goto LABEL_347;
            }
            uint64_t v152 = v134 - (void)v149;
            if (v152 >> 1 > v151) {
              unint64_t v151 = v152 >> 1;
            }
            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v153 = v151;
            }
            if (v153)
            {
              unint64_t v153 = (unint64_t)sub_2572C76F0(v153);
              unint64_t v149 = (char *)*((void *)this + 19);
              char v135 = (char *)*((void *)this + 20);
            }
            else
            {
              uint64_t v154 = 0;
            }
            uint64_t v191 = (_DWORD *)(v153 + 4 * v150);
            *uint64_t v191 = 0;
            unsigned int v136 = v191 + 1;
            while (v135 != v149)
            {
              int v192 = *((_DWORD *)v135 - 1);
              v135 -= 4;
              *--uint64_t v191 = v192;
            }
            *((void *)this + 19) = v191;
            *((void *)this + 20) = v136;
            *((void *)this + 21) = v153 + 4 * v154;
            if (v149) {
              operator delete(v149);
            }
          }
          else
          {
            *(_DWORD *)char v135 = 0;
            unsigned int v136 = v135 + 4;
          }
          *((void *)this + 20) = v136;
          goto LABEL_334;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            while (v36 < v37 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v39 = (char *)*((void *)this + 11);
              unint64_t v38 = *((void *)this + 12);
              if ((unint64_t)v39 >= v38)
              {
                uint64_t v41 = (char *)*((void *)this + 10);
                uint64_t v42 = (v39 - v41) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
                  uint64_t v41 = (char *)*((void *)this + 10);
                  unint64_t v39 = (char *)*((void *)this + 11);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                int v47 = (_DWORD *)(v45 + 4 * v42);
                *int v47 = 0;
                char v40 = v47 + 1;
                while (v39 != v41)
                {
                  int v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--int v47 = v48;
                }
                *((void *)this + 10) = v47;
                *((void *)this + 11) = v40;
                *((void *)this + 12) = v45 + 4 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v39 = 0;
                char v40 = v39 + 4;
              }
              *((void *)this + 11) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
                goto LABEL_207;
              }
              *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
              unint64_t v37 = *((void *)a2 + 2);
              unint64_t v36 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v36;
            }
            goto LABEL_208;
          }
          char v138 = (char *)*((void *)this + 11);
          unint64_t v137 = *((void *)this + 12);
          if ((unint64_t)v138 >= v137)
          {
            char v155 = (char *)*((void *)this + 10);
            uint64_t v156 = (v138 - v155) >> 2;
            unint64_t v157 = v156 + 1;
            if ((unint64_t)(v156 + 1) >> 62) {
              goto LABEL_347;
            }
            uint64_t v158 = v137 - (void)v155;
            if (v158 >> 1 > v157) {
              unint64_t v157 = v158 >> 1;
            }
            if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v159 = v157;
            }
            if (v159)
            {
              unint64_t v159 = (unint64_t)sub_2572C76F0(v159);
              char v155 = (char *)*((void *)this + 10);
              char v138 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v160 = 0;
            }
            uint64_t v193 = (_DWORD *)(v159 + 4 * v156);
            *uint64_t v193 = 0;
            unsigned int v136 = v193 + 1;
            while (v138 != v155)
            {
              int v194 = *((_DWORD *)v138 - 1);
              v138 -= 4;
              *--uint64_t v193 = v194;
            }
            *((void *)this + 10) = v193;
            *((void *)this + 11) = v136;
            *((void *)this + 12) = v159 + 4 * v160;
            if (v155) {
              operator delete(v155);
            }
          }
          else
          {
            *(_DWORD *)char v138 = 0;
            unsigned int v136 = v138 + 4;
          }
          *((void *)this + 11) = v136;
          goto LABEL_334;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            while (v50 < v51 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v53 = (char *)*((void *)this + 2);
              unint64_t v52 = *((void *)this + 3);
              if ((unint64_t)v53 >= v52)
              {
                char v55 = (char *)*((void *)this + 1);
                uint64_t v56 = (v53 - v55) >> 2;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v58 = v52 - (void)v55;
                if (v58 >> 1 > v57) {
                  unint64_t v57 = v58 >> 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v57;
                }
                if (v59)
                {
                  unint64_t v59 = (unint64_t)sub_2572C76F0(v59);
                  char v55 = (char *)*((void *)this + 1);
                  unint64_t v53 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v60 = 0;
                }
                unint64_t v61 = (_DWORD *)(v59 + 4 * v56);
                *unint64_t v61 = 0;
                uint64_t v54 = v61 + 1;
                while (v53 != v55)
                {
                  int v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *--unint64_t v61 = v62;
                }
                *((void *)this + 1) = v61;
                *((void *)this + 2) = v54;
                *((void *)this + 3) = v59 + 4 * v60;
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v53 = 0;
                uint64_t v54 = v53 + 4;
              }
              *((void *)this + 2) = v54;
              unint64_t v63 = *((void *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2)) {
                goto LABEL_207;
              }
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              unint64_t v51 = *((void *)a2 + 2);
              unint64_t v50 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v50;
            }
            goto LABEL_208;
          }
          uint64_t v140 = (char *)*((void *)this + 2);
          unint64_t v139 = *((void *)this + 3);
          if ((unint64_t)v140 >= v139)
          {
            unint64_t v161 = (char *)*((void *)this + 1);
            uint64_t v162 = (v140 - v161) >> 2;
            unint64_t v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) >> 62) {
              goto LABEL_347;
            }
            uint64_t v164 = v139 - (void)v161;
            if (v164 >> 1 > v163) {
              unint64_t v163 = v164 >> 1;
            }
            if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v165 = v163;
            }
            if (v165)
            {
              unint64_t v165 = (unint64_t)sub_2572C76F0(v165);
              unint64_t v161 = (char *)*((void *)this + 1);
              uint64_t v140 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v166 = 0;
            }
            uint64_t v195 = (_DWORD *)(v165 + 4 * v162);
            *uint64_t v195 = 0;
            unsigned int v136 = v195 + 1;
            while (v140 != v161)
            {
              int v196 = *((_DWORD *)v140 - 1);
              v140 -= 4;
              *--uint64_t v195 = v196;
            }
            *((void *)this + 1) = v195;
            *((void *)this + 2) = v136;
            *((void *)this + 3) = v165 + 4 * v166;
            if (v161) {
              operator delete(v161);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v140 = 0;
            unsigned int v136 = v140 + 4;
          }
          *((void *)this + 2) = v136;
          goto LABEL_334;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v64 = *((void *)a2 + 1);
            unint64_t v65 = *((void *)a2 + 2);
            while (v64 < v65 && !*((unsigned char *)a2 + 24))
            {
              char v67 = (char *)*((void *)this + 5);
              unint64_t v66 = *((void *)this + 6);
              if ((unint64_t)v67 >= v66)
              {
                unint64_t v69 = (char *)*((void *)this + 4);
                uint64_t v70 = (v67 - v69) >> 2;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v72 = v66 - (void)v69;
                if (v72 >> 1 > v71) {
                  unint64_t v71 = v72 >> 1;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73)
                {
                  unint64_t v73 = (unint64_t)sub_2572C76F0(v73);
                  unint64_t v69 = (char *)*((void *)this + 4);
                  char v67 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v74 = 0;
                }
                unint64_t v75 = (_DWORD *)(v73 + 4 * v70);
                *unint64_t v75 = 0;
                unint64_t v68 = v75 + 1;
                while (v67 != v69)
                {
                  int v76 = *((_DWORD *)v67 - 1);
                  v67 -= 4;
                  *--unint64_t v75 = v76;
                }
                *((void *)this + 4) = v75;
                *((void *)this + 5) = v68;
                *((void *)this + 6) = v73 + 4 * v74;
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *(_DWORD *)char v67 = 0;
                unint64_t v68 = v67 + 4;
              }
              *((void *)this + 5) = v68;
              unint64_t v77 = *((void *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
                goto LABEL_207;
              }
              *(v68 - 1) = *(_DWORD *)(*(void *)a2 + v77);
              unint64_t v65 = *((void *)a2 + 2);
              unint64_t v64 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v64;
            }
            goto LABEL_208;
          }
          uint64_t v142 = (char *)*((void *)this + 5);
          unint64_t v141 = *((void *)this + 6);
          if ((unint64_t)v142 >= v141)
          {
            unint64_t v167 = (char *)*((void *)this + 4);
            uint64_t v168 = (v142 - v167) >> 2;
            unint64_t v169 = v168 + 1;
            if ((unint64_t)(v168 + 1) >> 62) {
              goto LABEL_347;
            }
            uint64_t v170 = v141 - (void)v167;
            if (v170 >> 1 > v169) {
              unint64_t v169 = v170 >> 1;
            }
            if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v171 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v171 = v169;
            }
            if (v171)
            {
              unint64_t v171 = (unint64_t)sub_2572C76F0(v171);
              unint64_t v167 = (char *)*((void *)this + 4);
              uint64_t v142 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v172 = 0;
            }
            int v197 = (_DWORD *)(v171 + 4 * v168);
            _DWORD *v197 = 0;
            unsigned int v136 = v197 + 1;
            while (v142 != v167)
            {
              int v198 = *((_DWORD *)v142 - 1);
              v142 -= 4;
              *--int v197 = v198;
            }
            *((void *)this + 4) = v197;
            *((void *)this + 5) = v136;
            *((void *)this + 6) = v171 + 4 * v172;
            if (v167) {
              operator delete(v167);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v142 = 0;
            unsigned int v136 = v142 + 4;
          }
          *((void *)this + 5) = v136;
          goto LABEL_334;
        case 6u:
          *((unsigned char *)this + 204) |= 2u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
            goto LABEL_336;
          }
          *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v78);
          goto LABEL_338;
        case 7u:
          *((unsigned char *)this + 204) |= 8u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 >= *((void *)a2 + 2))
          {
            BOOL v82 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v80 = v79 + 1;
            int v81 = *(unsigned __int8 *)(*(void *)a2 + v79);
            *((void *)a2 + 1) = v80;
            BOOL v82 = v81 != 0;
          }
          *((unsigned char *)this + 200) = v82;
          goto LABEL_340;
        case 8u:
          *((unsigned char *)this + 204) |= 0x10u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 >= *((void *)a2 + 2))
          {
            BOOL v86 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v84 = v83 + 1;
            int v85 = *(unsigned __int8 *)(*(void *)a2 + v83);
            *((void *)a2 + 1) = v84;
            BOOL v86 = v85 != 0;
          }
          *((unsigned char *)this + 201) = v86;
          goto LABEL_340;
        case 9u:
          *((unsigned char *)this + 204) |= 0x20u;
          unint64_t v87 = *((void *)a2 + 1);
          if (v87 >= *((void *)a2 + 2))
          {
            BOOL v90 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v88 = v87 + 1;
            int v89 = *(unsigned __int8 *)(*(void *)a2 + v87);
            *((void *)a2 + 1) = v88;
            BOOL v90 = v89 != 0;
          }
          *((unsigned char *)this + 202) = v90;
          goto LABEL_340;
        case 0xAu:
          operator new();
        case 0xBu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v91 = *((void *)a2 + 1);
            unint64_t v92 = *((void *)a2 + 2);
            while (v91 < v92 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v94 = (char *)*((void *)this + 14);
              unint64_t v93 = *((void *)this + 15);
              if ((unint64_t)v94 >= v93)
              {
                uint64_t v96 = (char *)*((void *)this + 13);
                uint64_t v97 = (v94 - v96) >> 2;
                unint64_t v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v99 = v93 - (void)v96;
                if (v99 >> 1 > v98) {
                  unint64_t v98 = v99 >> 1;
                }
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v100 = v98;
                }
                if (v100)
                {
                  unint64_t v100 = (unint64_t)sub_2572C76F0(v100);
                  uint64_t v96 = (char *)*((void *)this + 13);
                  unint64_t v94 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v101 = 0;
                }
                int v102 = (_DWORD *)(v100 + 4 * v97);
                *int v102 = 0;
                unsigned int v95 = v102 + 1;
                while (v94 != v96)
                {
                  int v103 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *--int v102 = v103;
                }
                *((void *)this + 13) = v102;
                *((void *)this + 14) = v95;
                *((void *)this + 15) = v100 + 4 * v101;
                if (v96) {
                  operator delete(v96);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v94 = 0;
                unsigned int v95 = v94 + 4;
              }
              *((void *)this + 14) = v95;
              unint64_t v104 = *((void *)a2 + 1);
              if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)a2 + 2)) {
                goto LABEL_207;
              }
              *(v95 - 1) = *(_DWORD *)(*(void *)a2 + v104);
              unint64_t v92 = *((void *)a2 + 2);
              unint64_t v91 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v91;
            }
            goto LABEL_208;
          }
          uint64_t v144 = (char *)*((void *)this + 14);
          unint64_t v143 = *((void *)this + 15);
          if ((unint64_t)v144 >= v143)
          {
            int v173 = (char *)*((void *)this + 13);
            uint64_t v174 = (v144 - v173) >> 2;
            unint64_t v175 = v174 + 1;
            if ((unint64_t)(v174 + 1) >> 62) {
              goto LABEL_347;
            }
            uint64_t v176 = v143 - (void)v173;
            if (v176 >> 1 > v175) {
              unint64_t v175 = v176 >> 1;
            }
            if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v177 = v175;
            }
            if (v177)
            {
              unint64_t v177 = (unint64_t)sub_2572C76F0(v177);
              int v173 = (char *)*((void *)this + 13);
              uint64_t v144 = (char *)*((void *)this + 14);
            }
            else
            {
              uint64_t v178 = 0;
            }
            int v199 = (_DWORD *)(v177 + 4 * v174);
            *int v199 = 0;
            unsigned int v136 = v199 + 1;
            while (v144 != v173)
            {
              int v200 = *((_DWORD *)v144 - 1);
              v144 -= 4;
              *--int v199 = v200;
            }
            *((void *)this + 13) = v199;
            *((void *)this + 14) = v136;
            *((void *)this + 15) = v177 + 4 * v178;
            if (v173) {
              operator delete(v173);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v144 = 0;
            unsigned int v136 = v144 + 4;
          }
          *((void *)this + 14) = v136;
          goto LABEL_334;
        case 0xCu:
          *((unsigned char *)this + 204) |= 4u;
          unint64_t v105 = *((void *)a2 + 1);
          if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)a2 + 2)) {
            goto LABEL_336;
          }
          *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v105);
          goto LABEL_338;
        case 0xDu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v106 = *((void *)a2 + 1);
            unint64_t v107 = *((void *)a2 + 2);
            while (v106 < v107 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v109 = (char *)*((void *)this + 17);
              unint64_t v108 = *((void *)this + 18);
              if ((unint64_t)v109 >= v108)
              {
                unint64_t v111 = (char *)*((void *)this + 16);
                uint64_t v112 = (v109 - v111) >> 2;
                unint64_t v113 = v112 + 1;
                if ((unint64_t)(v112 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v114 = v108 - (void)v111;
                if (v114 >> 1 > v113) {
                  unint64_t v113 = v114 >> 1;
                }
                if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v115 = v113;
                }
                if (v115)
                {
                  unint64_t v115 = (unint64_t)sub_2572C76F0(v115);
                  unint64_t v111 = (char *)*((void *)this + 16);
                  unint64_t v109 = (char *)*((void *)this + 17);
                }
                else
                {
                  uint64_t v116 = 0;
                }
                unint64_t v117 = (_DWORD *)(v115 + 4 * v112);
                *unint64_t v117 = 0;
                uint64_t v110 = v117 + 1;
                while (v109 != v111)
                {
                  int v118 = *((_DWORD *)v109 - 1);
                  v109 -= 4;
                  *--unint64_t v117 = v118;
                }
                *((void *)this + 16) = v117;
                *((void *)this + 17) = v110;
                *((void *)this + 18) = v115 + 4 * v116;
                if (v111) {
                  operator delete(v111);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v109 = 0;
                uint64_t v110 = v109 + 4;
              }
              *((void *)this + 17) = v110;
              unint64_t v119 = *((void *)a2 + 1);
              if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
                goto LABEL_207;
              }
              *(v110 - 1) = *(_DWORD *)(*(void *)a2 + v119);
              unint64_t v107 = *((void *)a2 + 2);
              unint64_t v106 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v106;
            }
            goto LABEL_208;
          }
          uint64_t v146 = (char *)*((void *)this + 17);
          unint64_t v145 = *((void *)this + 18);
          if ((unint64_t)v146 >= v145)
          {
            int v179 = (char *)*((void *)this + 16);
            uint64_t v180 = (v146 - v179) >> 2;
            unint64_t v181 = v180 + 1;
            if ((unint64_t)(v180 + 1) >> 62) {
              goto LABEL_347;
            }
            uint64_t v182 = v145 - (void)v179;
            if (v182 >> 1 > v181) {
              unint64_t v181 = v182 >> 1;
            }
            if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v183 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v183 = v181;
            }
            if (v183)
            {
              unint64_t v183 = (unint64_t)sub_2572C76F0(v183);
              int v179 = (char *)*((void *)this + 16);
              uint64_t v146 = (char *)*((void *)this + 17);
            }
            else
            {
              uint64_t v184 = 0;
            }
            int v201 = (_DWORD *)(v183 + 4 * v180);
            *int v201 = 0;
            unsigned int v136 = v201 + 1;
            while (v146 != v179)
            {
              int v202 = *((_DWORD *)v146 - 1);
              v146 -= 4;
              *--int v201 = v202;
            }
            *((void *)this + 16) = v201;
            *((void *)this + 17) = v136;
            *((void *)this + 18) = v183 + 4 * v184;
            if (v179) {
              operator delete(v179);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v146 = 0;
            unsigned int v136 = v146 + 4;
          }
          *((void *)this + 17) = v136;
          goto LABEL_334;
        case 0xEu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v120 = *((void *)a2 + 1);
            unint64_t v121 = *((void *)a2 + 2);
            while (v120 < v121 && !*((unsigned char *)a2 + 24))
            {
              char v123 = (char *)*((void *)this + 8);
              unint64_t v122 = *((void *)this + 9);
              if ((unint64_t)v123 >= v122)
              {
                unint64_t v125 = (char *)*((void *)this + 7);
                uint64_t v126 = (v123 - v125) >> 2;
                unint64_t v127 = v126 + 1;
                if ((unint64_t)(v126 + 1) >> 62) {
                  goto LABEL_347;
                }
                uint64_t v128 = v122 - (void)v125;
                if (v128 >> 1 > v127) {
                  unint64_t v127 = v128 >> 1;
                }
                if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v129 = v127;
                }
                if (v129)
                {
                  unint64_t v129 = (unint64_t)sub_2572C76F0(v129);
                  unint64_t v125 = (char *)*((void *)this + 7);
                  char v123 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v130 = 0;
                }
                char v131 = (_DWORD *)(v129 + 4 * v126);
                *char v131 = 0;
                unsigned int v124 = v131 + 1;
                while (v123 != v125)
                {
                  int v132 = *((_DWORD *)v123 - 1);
                  v123 -= 4;
                  *--char v131 = v132;
                }
                *((void *)this + 7) = v131;
                *((void *)this + 8) = v124;
                *((void *)this + 9) = v129 + 4 * v130;
                if (v125) {
                  operator delete(v125);
                }
              }
              else
              {
                *(_DWORD *)char v123 = 0;
                unsigned int v124 = v123 + 4;
              }
              *((void *)this + 8) = v124;
              unint64_t v133 = *((void *)a2 + 1);
              if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)a2 + 2))
              {
LABEL_207:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v124 - 1) = *(_DWORD *)(*(void *)a2 + v133);
              unint64_t v121 = *((void *)a2 + 2);
              unint64_t v120 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v120;
            }
LABEL_208:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v148 = (char *)*((void *)this + 8);
            unint64_t v147 = *((void *)this + 9);
            if ((unint64_t)v148 >= v147)
            {
              uint64_t v185 = (char *)*((void *)this + 7);
              uint64_t v186 = (v148 - v185) >> 2;
              unint64_t v187 = v186 + 1;
              if ((unint64_t)(v186 + 1) >> 62) {
LABEL_347:
              }
                sub_2570AFD0C();
              uint64_t v188 = v147 - (void)v185;
              if (v188 >> 1 > v187) {
                unint64_t v187 = v188 >> 1;
              }
              if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v189 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v189 = v187;
              }
              if (v189)
              {
                unint64_t v189 = (unint64_t)sub_2572C76F0(v189);
                uint64_t v185 = (char *)*((void *)this + 7);
                uint64_t v148 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v190 = 0;
              }
              int v203 = (_DWORD *)(v189 + 4 * v186);
              *int v203 = 0;
              unsigned int v136 = v203 + 1;
              while (v148 != v185)
              {
                int v204 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v203 = v204;
              }
              *((void *)this + 7) = v203;
              *((void *)this + 8) = v136;
              *((void *)this + 9) = v189 + 4 * v190;
              if (v185) {
                operator delete(v185);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v148 = 0;
              unsigned int v136 = v148 + 4;
            }
            *((void *)this + 8) = v136;
LABEL_334:
            unint64_t v205 = *((void *)a2 + 1);
            if (v205 <= 0xFFFFFFFFFFFFFFFBLL && v205 + 4 <= *((void *)a2 + 2))
            {
              *(v136 - 1) = *(_DWORD *)(*(void *)a2 + v205);
LABEL_338:
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_339:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_336:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_340;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_340:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::DoTEstimatorWithTNB::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 204)) {
    this = PB::Writer::write(a2, *(double *)(this + 184));
  }
  int v4 = *(float **)(v3 + 152);
  uint64_t v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v7 = *(float **)(v3 + 80);
  uint64_t v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(float **)(v3 + 8);
  unint64_t v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  char v13 = *(float **)(v3 + 32);
  BOOL v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    float v15 = *v13++;
    this = PB::Writer::write(a2, v15);
  }
  char v16 = *(unsigned char *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 192));
    char v16 = *(unsigned char *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }
  else if ((*(unsigned char *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2);
  char v16 = *(unsigned char *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  if ((*(unsigned char *)(v3 + 204) & 0x20) != 0) {
LABEL_19:
  }
    this = PB::Writer::write(a2);
LABEL_20:
  unint64_t v17 = *(const PB::Base **)(v3 + 176);
  if (v17) {
    this = PB::Writer::writeSubmessage(a2, v17);
  }
  char v18 = *(float **)(v3 + 104);
  int v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    float v20 = *v18++;
    this = PB::Writer::write(a2, v20);
  }
  if ((*(unsigned char *)(v3 + 204) & 4) != 0) {
    this = PB::Writer::write(a2, *(float *)(v3 + 196));
  }
  uint64_t v21 = *(float **)(v3 + 128);
  unint64_t v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    float v23 = *v21++;
    this = PB::Writer::write(a2, v23);
  }
  uint64_t v25 = *(float **)(v3 + 56);
  unint64_t v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    float v26 = *v25++;
    this = PB::Writer::write(a2, v26);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorWithTNB::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 204))
  {
    if ((*(unsigned char *)(a2 + 204) & 1) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 204))
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 152);
  unint64_t v2 = *(float **)(a1 + 160);
  int v4 = *(float **)(a2 + 152);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 160) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 80);
  uint64_t v5 = *(float **)(a1 + 88);
  uint64_t v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 88) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 8);
  uint64_t v8 = *(float **)(a1 + 16);
  unsigned int v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 16) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  float v12 = *(float **)(a1 + 32);
  unint64_t v11 = *(float **)(a1 + 40);
  char v13 = *(float **)(a2 + 32);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 40) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  if ((*(unsigned char *)(a1 + 204) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 2) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 204) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 8) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 204) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 204) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 204) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 204) & 0x20) != 0)
  {
    return 0;
  }
  char v29 = *(unsigned char *)(a2 + 204);
  char v30 = *(unsigned char *)(a1 + 204);
  uint64_t v14 = *(void *)(a1 + 176);
  uint64_t v15 = *(void *)(a2 + 176);
  if (v14)
  {
    if (!v15 || !CMMsl::AccelTNBFrame::operator==(v14, v15)) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  unint64_t v17 = *(float **)(a1 + 104);
  char v16 = *(float **)(a1 + 112);
  char v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(void *)(a2 + 112) - (void)v18) {
    return 0;
  }
  while (v17 != v16)
  {
    if (*v17 != *v18) {
      return 0;
    }
    ++v17;
    ++v18;
  }
  if ((v30 & 4) != 0)
  {
    if ((v29 & 4) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v29 & 4) != 0)
  {
    return 0;
  }
  float v20 = *(float **)(a1 + 128);
  int v19 = *(float **)(a1 + 136);
  uint64_t v21 = *(float **)(a2 + 128);
  if ((char *)v19 - (char *)v20 != *(void *)(a2 + 136) - (void)v21) {
    return 0;
  }
  while (v20 != v19)
  {
    if (*v20 != *v21) {
      return 0;
    }
    ++v20;
    ++v21;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v24 = *(float **)(a2 + 56);
  if (v22 - v23 != *(void *)(a2 + 64) - (void)v24) {
    return 0;
  }
  if (v23 == v22) {
    return 1;
  }
  uint64_t v25 = v23 + 4;
  do
  {
    float v26 = *v24++;
    BOOL result = *(float *)(v25 - 4) == v26;
    BOOL v28 = *(float *)(v25 - 4) != v26 || v25 == v22;
    v25 += 4;
  }
  while (!v28);
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::hash_value(CMMsl::DoTEstimatorWithTNB *this)
{
  if (*((unsigned char *)this + 204))
  {
    double v2 = *((double *)this + 23);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    double v19 = v2;
  }
  else
  {
    double v19 = 0.0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  if ((*((unsigned char *)this + 204) & 2) != 0)
  {
    float v11 = *((float *)this + 48);
    if (v11 == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = LODWORD(v11);
    }
    if ((*((unsigned char *)this + 204) & 8) != 0)
    {
LABEL_8:
      uint64_t v8 = *((unsigned __int8 *)this + 200);
      if ((*((unsigned char *)this + 204) & 0x10) != 0) {
        goto LABEL_9;
      }
LABEL_16:
      uint64_t v9 = 0;
      if ((*((unsigned char *)this + 204) & 0x20) != 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 204) & 8) != 0) {
      goto LABEL_8;
    }
  }
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 204) & 0x10) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  uint64_t v9 = *((unsigned __int8 *)this + 201);
  if ((*((unsigned char *)this + 204) & 0x20) != 0)
  {
LABEL_10:
    uint64_t v10 = *((unsigned __int8 *)this + 202);
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v10 = 0;
LABEL_18:
  float v12 = (CMMsl::AccelTNBFrame *)*((void *)this + 22);
  if (v12) {
    uint64_t v13 = CMMsl::AccelTNBFrame::hash_value(v12);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = PBHashBytes();
  if ((*((unsigned char *)this + 204) & 4) != 0)
  {
    float v16 = *((float *)this + 49);
    uint64_t v15 = LODWORD(v16);
    if (v16 == 0.0) {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v17 = v3 ^ *(void *)&v19 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v13 ^ v14 ^ v15 ^ PBHashBytes();
  return v17 ^ PBHashBytes();
}

uint64_t CMMsl::DoTEstimatorWithTNB::makeTNBFrame(uint64_t this)
{
  if (!*(void *)(this + 176)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t this)
{
  *(void *)this = &unk_2706412C0;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(void *)this = &unk_2706412C0;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

void CMMsl::DopplerDebugRecord::~DopplerDebugRecord(CMMsl::DopplerDebugRecord *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(CMMsl::DopplerDebugRecord *this, const CMMsl::DopplerDebugRecord *a2)
{
  *(void *)this = &unk_2706412C0;
  *((_DWORD *)this + 30) = 0;
  int v2 = *((_DWORD *)a2 + 30);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 30) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 27) = v4;
    int v2 = *((_DWORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 24);
    v3 |= 0x200000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 24) = v4;
    int v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 28) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 20) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v5 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 19) = v5;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 16) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v6 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 15) = v6;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = v7;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 4) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 29) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 5) = v8;
  if ((*((_DWORD *)a2 + 30) & 0x40000) == 0) {
    return *(float *)&v4;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 30) = v3 | 0x40000;
  *((_DWORD *)this + 21) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, const CMMsl::DopplerDebugRecord *a2)
{
  if (a1 != a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((CMMsl::DopplerDebugRecord *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerDebugRecord *a2, CMMsl::DopplerDebugRecord *a3)
{
  int v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  int v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  int v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  float result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706412C0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerDebugRecord::formatText(CMMsl::DopplerDebugRecord *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasFraction", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cookie");
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "currentRange", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "distanceReleaseThreshold", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "distanceTriggerThreshold", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "habcBiasCorrectedDenominator", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumFramesCaptured");
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumerator", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaseline", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaselineSigma", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "habcDenominator", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "habcNumFramesCaptured");
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "habcNumerator", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "habcRateBaseline", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "habcRateBaselineSigma", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "numBaselineCaptureFrames");
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "numEffSpads", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "rateScalingFactor", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "reflectanceEstimate", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "signalDeltaNCounts", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "signalRateBaselineKcpss", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "signalRateBaselineSigmaKcpss", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "signalRateNoiseMarginKcpss", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "signalRateSigmaKcpss", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "signalRateTriggerThresholdNCounts", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "smudgeTimeoutCountdownMs", *((float *)this + 29));
  if (*((_DWORD *)this + 30)) {
LABEL_28:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_29:
  return MEMORY[0x270F587F0](a2);
}