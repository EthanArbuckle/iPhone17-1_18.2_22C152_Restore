void CMMsl::MobilitySmoothedGaitMetrics::~MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  uint64_t vars8;

  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  *(void *)this = &unk_270643358;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 6) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((unsigned char *)a2 + 40) & 2) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  *((unsigned char *)this + 40) = v3 | 2;
  *((_DWORD *)this + 4) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  if ((const CMMsl::MobilitySmoothedGaitMetrics *)a1 != a2)
  {
    CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics((CMMsl::MobilitySmoothedGaitMetrics *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilitySmoothedGaitMetrics *a2, CMMsl::MobilitySmoothedGaitMetrics *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643358;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270643358;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = &unk_270643358;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::formatText(CMMsl::MobilitySmoothedGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbability", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "stepLength", *((float *)this + 8));
  if ((*((unsigned char *)this + 40) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 9));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::readFrom(CMMsl::MobilitySmoothedGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_47;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_46;
      case 2u:
        *((unsigned char *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((unsigned char *)this + 40) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_45:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_46:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_47:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 28));
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::hash_value(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 9);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 5);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 7);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 4);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification(CMMsl::ModelBasedBioMotionClassification *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270643390;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(void *this, const CMMsl::ModelBasedBioMotionClassification *a2)
{
  *this = &unk_270643390;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ModelBasedBioMotionClassification *CMMsl::ModelBasedBioMotionClassification::operator=(const CMMsl::ModelBasedBioMotionClassification *a1, const CMMsl::ModelBasedBioMotionClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification((CMMsl::ModelBasedBioMotionClassification *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ModelBasedBioMotionClassification *a2, CMMsl::ModelBasedBioMotionClassification *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(void *a1, uint64_t a2)
{
  *a1 = &unk_270643390;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270643390;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270643390;
    v6[1] = v4;
    CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification((CMMsl::ModelBasedBioMotionClassification *)v6);
  }
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::formatText(CMMsl::ModelBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ModelBasedBioMotionClassification::readFrom(CMMsl::ModelBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::BioMotionClassification *CMMsl::ModelBasedBioMotionClassification::hash_value(CMMsl::ModelBasedBioMotionClassification *this)
{
  uint64_t result = (CMMsl::BioMotionClassification *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionActivity::~MotionActivity(CMMsl::MotionActivity *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this, const CMMsl::MotionActivity *a2)
{
  *(void *)this = &unk_2706433C8;
  *(_DWORD *)(this + 116) = 0;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 23);
    int v3 = 0x10000;
    *(_DWORD *)(this + 116) = 0x10000;
    *(_DWORD *)(this + 92) = v4;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x200u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 64) = v5;
    int v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 48) = v6;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 68) = v7;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  char v8 = *((unsigned char *)a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 108) = v8;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v9;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v10 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 24) = v10;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v11 = *((unsigned char *)a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 109) = v11;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 60) = v12;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v13 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 8) = v13;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v14 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 16) = v14;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v15 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v15;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v16 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v16;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  char v17 = *((unsigned char *)a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 113) = v17;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v18 = *((unsigned char *)a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 112) = v18;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v19 = *((unsigned char *)a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 110) = v19;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  char v20 = *((unsigned char *)a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 114) = v20;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v21 = *((unsigned char *)a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 111) = v21;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v22;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v23 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 56) = v23;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v24 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 52) = v24;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v25;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v26 = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v26;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v27 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 32) = v27;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v28 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 40) = v28;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0) {
      return this;
    }
LABEL_56:
    int v30 = *((_DWORD *)a2 + 20);
    *(_DWORD *)(this + 116) = v3 | 0x2000;
    *(_DWORD *)(this + 80) = v30;
    return this;
  }
LABEL_55:
  int v29 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v29;
  if ((*((_DWORD *)a2 + 29) & 0x2000) != 0) {
    goto LABEL_56;
  }
  return this;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, const CMMsl::MotionActivity *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivity *a2, CMMsl::MotionActivity *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  int v4 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  int v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  int v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  int v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 108);
  *((unsigned char *)this + 108) = *((unsigned char *)a2 + 108);
  *((unsigned char *)a2 + 108) = v7;
  int v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  LOBYTE(v7) = *((unsigned char *)this + 109);
  *((unsigned char *)this + 109) = *((unsigned char *)a2 + 109);
  *((unsigned char *)a2 + 109) = v7;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  int v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  int v14 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 110);
  *((unsigned char *)this + 110) = *((unsigned char *)a2 + 110);
  *((unsigned char *)a2 + 110) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 114);
  *((unsigned char *)this + 114) = *((unsigned char *)a2 + 114);
  *((unsigned char *)a2 + 114) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 111);
  *((unsigned char *)this + 111) = *((unsigned char *)a2 + 111);
  *((unsigned char *)a2 + 111) = v14;
  int v15 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v15;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  LODWORD(v12) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  int v16 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v16;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  LODWORD(v18) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v18;
  LODWORD(v18) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  return result;
}

double CMMsl::MotionActivity::MotionActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706433C8;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 110) = *(unsigned char *)(a2 + 110);
  *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
  *(unsigned char *)(a1 + 111) = *(unsigned char *)(a2 + 111);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionActivity::formatText(CMMsl::MotionActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "confidence");
    int v5 = *((_DWORD *)this + 29);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "estExitTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "exitState");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isStanding");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isVehicleConnected");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "mountedConfidence");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "mountedState");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "rawConfidence");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "rawType");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "source");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "type");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "typeYouth");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "vehicularBasebandHint");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "vehicularBtHint");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "vehicularConfidence");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "vehicularGpsHint");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "vehicularMotionHint");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "vehicularWifiHint");
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "workoutDetectionTime", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "workoutDetectionType");
  if ((*((_DWORD *)this + 29) & 0x10) != 0) {
LABEL_28:
  }
    PB::TextFormatter::format(a2, "workoutEscalationTime");
LABEL_29:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionActivity::readFrom(CMMsl::MotionActivity *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 29) |= 0x10000u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_254;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_156:
          LODWORD(v26) = 0;
          goto LABEL_254;
        }
        char v154 = 0;
        unsigned int v155 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v156 = v21 + 1;
            char v157 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v156;
            v26 |= (unint64_t)(v157 & 0x7F) << v154;
            if (v157 < 0)
            {
              v154 += 7;
              unint64_t v21 = v156;
              BOOL v14 = v155++ > 8;
              if (v14) {
                goto LABEL_156;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_254:
        *((_DWORD *)this + 23) = v26;
        goto LABEL_20;
      case 2u:
        *((_DWORD *)this + 29) |= 0x200u;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_258;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_163:
          LODWORD(v34) = 0;
          goto LABEL_258;
        }
        char v158 = 0;
        unsigned int v159 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v160 = v29 + 1;
            char v161 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v160;
            v34 |= (unint64_t)(v161 & 0x7F) << v158;
            if (v161 < 0)
            {
              v158 += 7;
              unint64_t v29 = v160;
              BOOL v14 = v159++ > 8;
              if (v14) {
                goto LABEL_163;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_258:
        *((_DWORD *)this + 16) = v34;
        goto LABEL_20;
      case 3u:
        *((_DWORD *)this + 29) |= 0x20u;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_262;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_170:
          LODWORD(v42) = 0;
          goto LABEL_262;
        }
        char v162 = 0;
        unsigned int v163 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v164 = v37 + 1;
            char v165 = *(unsigned char *)(v39 + v37);
            *((void *)a2 + 1) = v164;
            v42 |= (unint64_t)(v165 & 0x7F) << v162;
            if (v165 < 0)
            {
              v162 += 7;
              unint64_t v37 = v164;
              BOOL v14 = v163++ > 8;
              if (v14) {
                goto LABEL_170;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v42) = 0;
            }
          }
          break;
        }
LABEL_262:
        *((_DWORD *)this + 12) = v42;
        goto LABEL_20;
      case 4u:
        *((_DWORD *)this + 29) |= 0x400u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        uint64_t v47 = *(void *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          do
          {
            unint64_t v51 = v45 + 1;
            *((void *)a2 + 1) = v45 + 1;
            char v52 = *(unsigned char *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0) {
              goto LABEL_266;
            }
            v48 += 7;
            unint64_t v45 = v51;
            BOOL v14 = v49++ > 8;
          }
          while (!v14);
LABEL_177:
          LODWORD(v50) = 0;
          goto LABEL_266;
        }
        char v166 = 0;
        unsigned int v167 = 0;
        uint64_t v50 = 0;
        if (v46 <= v45) {
          unint64_t v46 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v168 = v45 + 1;
            char v169 = *(unsigned char *)(v47 + v45);
            *((void *)a2 + 1) = v168;
            v50 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              unint64_t v45 = v168;
              BOOL v14 = v167++ > 8;
              if (v14) {
                goto LABEL_177;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v50) = 0;
            }
          }
          break;
        }
LABEL_266:
        *((_DWORD *)this + 17) = v50;
        goto LABEL_20;
      case 5u:
        *((_DWORD *)this + 29) |= 0x100000u;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 >= *((void *)a2 + 2))
        {
          BOOL v56 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v54 = v53 + 1;
          int v55 = *(unsigned __int8 *)(*(void *)a2 + v53);
          *((void *)a2 + 1) = v54;
          BOOL v56 = v55 != 0;
        }
        *((unsigned char *)this + 108) = v56;
        goto LABEL_20;
      case 6u:
        *((_DWORD *)this + 29) |= 0x8000u;
        unint64_t v57 = *((void *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v57);
        goto LABEL_118;
      case 7u:
        *((_DWORD *)this + 29) |= 4u;
        unint64_t v58 = *((void *)a2 + 1);
        if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v58);
        goto LABEL_249;
      case 8u:
        *((_DWORD *)this + 29) |= 0x200000u;
        unint64_t v59 = *((void *)a2 + 1);
        if (v59 >= *((void *)a2 + 2))
        {
          BOOL v62 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v60 = v59 + 1;
          int v61 = *(unsigned __int8 *)(*(void *)a2 + v59);
          *((void *)a2 + 1) = v60;
          BOOL v62 = v61 != 0;
        }
        *((unsigned char *)this + 109) = v62;
        goto LABEL_20;
      case 9u:
        *((_DWORD *)this + 29) |= 0x100u;
        unint64_t v63 = *((void *)a2 + 1);
        unint64_t v64 = *((void *)a2 + 2);
        uint64_t v65 = *(void *)a2;
        if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v68 = 0;
          do
          {
            unint64_t v69 = v63 + 1;
            *((void *)a2 + 1) = v63 + 1;
            char v70 = *(unsigned char *)(v65 + v63);
            v68 |= (unint64_t)(v70 & 0x7F) << v66;
            if ((v70 & 0x80) == 0) {
              goto LABEL_270;
            }
            v66 += 7;
            unint64_t v63 = v69;
            BOOL v14 = v67++ > 8;
          }
          while (!v14);
LABEL_188:
          LODWORD(v68) = 0;
          goto LABEL_270;
        }
        char v170 = 0;
        unsigned int v171 = 0;
        uint64_t v68 = 0;
        if (v64 <= v63) {
          unint64_t v64 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v64 == v63)
          {
            LODWORD(v68) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v172 = v63 + 1;
            char v173 = *(unsigned char *)(v65 + v63);
            *((void *)a2 + 1) = v172;
            v68 |= (unint64_t)(v173 & 0x7F) << v170;
            if (v173 < 0)
            {
              v170 += 7;
              unint64_t v63 = v172;
              BOOL v14 = v171++ > 8;
              if (v14) {
                goto LABEL_188;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v68) = 0;
            }
          }
          break;
        }
LABEL_270:
        *((_DWORD *)this + 15) = v68;
        goto LABEL_20;
      case 0xAu:
        *((_DWORD *)this + 29) |= 1u;
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v71);
        goto LABEL_249;
      case 0xBu:
        *((_DWORD *)this + 29) |= 2u;
        unint64_t v72 = *((void *)a2 + 1);
        if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v72);
        goto LABEL_249;
      case 0xCu:
        *((_DWORD *)this + 29) |= 0x1000u;
        unint64_t v73 = *((void *)a2 + 1);
        unint64_t v74 = *((void *)a2 + 2);
        uint64_t v75 = *(void *)a2;
        if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          do
          {
            unint64_t v79 = v73 + 1;
            *((void *)a2 + 1) = v73 + 1;
            char v80 = *(unsigned char *)(v75 + v73);
            v78 |= (unint64_t)(v80 & 0x7F) << v76;
            if ((v80 & 0x80) == 0) {
              goto LABEL_274;
            }
            v76 += 7;
            unint64_t v73 = v79;
            BOOL v14 = v77++ > 8;
          }
          while (!v14);
LABEL_195:
          LODWORD(v78) = 0;
          goto LABEL_274;
        }
        char v174 = 0;
        unsigned int v175 = 0;
        uint64_t v78 = 0;
        if (v74 <= v73) {
          unint64_t v74 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v74 == v73)
          {
            LODWORD(v78) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v176 = v73 + 1;
            char v177 = *(unsigned char *)(v75 + v73);
            *((void *)a2 + 1) = v176;
            v78 |= (unint64_t)(v177 & 0x7F) << v174;
            if (v177 < 0)
            {
              v174 += 7;
              unint64_t v73 = v176;
              BOOL v14 = v175++ > 8;
              if (v14) {
                goto LABEL_195;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v78) = 0;
            }
          }
          break;
        }
LABEL_274:
        *((_DWORD *)this + 19) = v78;
        goto LABEL_20;
      case 0xDu:
        *((_DWORD *)this + 29) |= 0x800u;
        unint64_t v81 = *((void *)a2 + 1);
        unint64_t v82 = *((void *)a2 + 2);
        uint64_t v83 = *(void *)a2;
        if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
        {
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v86 = 0;
          do
          {
            unint64_t v87 = v81 + 1;
            *((void *)a2 + 1) = v81 + 1;
            char v88 = *(unsigned char *)(v83 + v81);
            v86 |= (unint64_t)(v88 & 0x7F) << v84;
            if ((v88 & 0x80) == 0) {
              goto LABEL_278;
            }
            v84 += 7;
            unint64_t v81 = v87;
            BOOL v14 = v85++ > 8;
          }
          while (!v14);
LABEL_202:
          LODWORD(v86) = 0;
          goto LABEL_278;
        }
        char v178 = 0;
        unsigned int v179 = 0;
        uint64_t v86 = 0;
        if (v82 <= v81) {
          unint64_t v82 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v82 == v81)
          {
            LODWORD(v86) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v180 = v81 + 1;
            char v181 = *(unsigned char *)(v83 + v81);
            *((void *)a2 + 1) = v180;
            v86 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              unint64_t v81 = v180;
              BOOL v14 = v179++ > 8;
              if (v14) {
                goto LABEL_202;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v86) = 0;
            }
          }
          break;
        }
LABEL_278:
        *((_DWORD *)this + 18) = v86;
        goto LABEL_20;
      case 0xEu:
        *((_DWORD *)this + 29) |= 0x2000000u;
        unint64_t v89 = *((void *)a2 + 1);
        if (v89 >= *((void *)a2 + 2))
        {
          BOOL v92 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v90 = v89 + 1;
          int v91 = *(unsigned __int8 *)(*(void *)a2 + v89);
          *((void *)a2 + 1) = v90;
          BOOL v92 = v91 != 0;
        }
        *((unsigned char *)this + 113) = v92;
        goto LABEL_20;
      case 0xFu:
        *((_DWORD *)this + 29) |= 0x1000000u;
        unint64_t v93 = *((void *)a2 + 1);
        if (v93 >= *((void *)a2 + 2))
        {
          BOOL v96 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v94 = v93 + 1;
          int v95 = *(unsigned __int8 *)(*(void *)a2 + v93);
          *((void *)a2 + 1) = v94;
          BOOL v96 = v95 != 0;
        }
        *((unsigned char *)this + 112) = v96;
        goto LABEL_20;
      case 0x10u:
        *((_DWORD *)this + 29) |= 0x400000u;
        unint64_t v97 = *((void *)a2 + 1);
        if (v97 >= *((void *)a2 + 2))
        {
          BOOL v100 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v98 = v97 + 1;
          int v99 = *(unsigned __int8 *)(*(void *)a2 + v97);
          *((void *)a2 + 1) = v98;
          BOOL v100 = v99 != 0;
        }
        *((unsigned char *)this + 110) = v100;
        goto LABEL_20;
      case 0x11u:
        *((_DWORD *)this + 29) |= 0x4000000u;
        unint64_t v101 = *((void *)a2 + 1);
        if (v101 >= *((void *)a2 + 2))
        {
          BOOL v104 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v102 = v101 + 1;
          int v103 = *(unsigned __int8 *)(*(void *)a2 + v101);
          *((void *)a2 + 1) = v102;
          BOOL v104 = v103 != 0;
        }
        *((unsigned char *)this + 114) = v104;
        goto LABEL_20;
      case 0x12u:
        *((_DWORD *)this + 29) |= 0x800000u;
        unint64_t v105 = *((void *)a2 + 1);
        if (v105 >= *((void *)a2 + 2))
        {
          BOOL v108 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v106 = v105 + 1;
          int v107 = *(unsigned __int8 *)(*(void *)a2 + v105);
          *((void *)a2 + 1) = v106;
          BOOL v108 = v107 != 0;
        }
        *((unsigned char *)this + 111) = v108;
        goto LABEL_20;
      case 0x13u:
        *((_DWORD *)this + 29) |= 0x40000u;
        unint64_t v109 = *((void *)a2 + 1);
        unint64_t v110 = *((void *)a2 + 2);
        uint64_t v111 = *(void *)a2;
        if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
        {
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v114 = 0;
          do
          {
            unint64_t v115 = v109 + 1;
            *((void *)a2 + 1) = v109 + 1;
            char v116 = *(unsigned char *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0) {
              goto LABEL_282;
            }
            v112 += 7;
            unint64_t v109 = v115;
            BOOL v14 = v113++ > 8;
          }
          while (!v14);
LABEL_219:
          LODWORD(v114) = 0;
          goto LABEL_282;
        }
        char v182 = 0;
        unsigned int v183 = 0;
        uint64_t v114 = 0;
        if (v110 <= v109) {
          unint64_t v110 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v184 = v109 + 1;
            char v185 = *(unsigned char *)(v111 + v109);
            *((void *)a2 + 1) = v184;
            v114 |= (unint64_t)(v185 & 0x7F) << v182;
            if (v185 < 0)
            {
              v182 += 7;
              unint64_t v109 = v184;
              BOOL v14 = v183++ > 8;
              if (v14) {
                goto LABEL_219;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v114) = 0;
            }
          }
          break;
        }
LABEL_282:
        *((_DWORD *)this + 25) = v114;
        goto LABEL_20;
      case 0x14u:
        *((_DWORD *)this + 29) |= 0x80u;
        unint64_t v117 = *((void *)a2 + 1);
        if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v117);
        goto LABEL_118;
      case 0x15u:
        *((_DWORD *)this + 29) |= 0x40u;
        unint64_t v118 = *((void *)a2 + 1);
        if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v118);
        goto LABEL_118;
      case 0x16u:
        *((_DWORD *)this + 29) |= 0x4000u;
        unint64_t v119 = *((void *)a2 + 1);
        if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
          goto LABEL_128;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v119);
LABEL_118:
        uint64_t v120 = *((void *)a2 + 1) + 4;
        goto LABEL_250;
      case 0x17u:
        *((_DWORD *)this + 29) |= 0x80000u;
        unint64_t v121 = *((void *)a2 + 1);
        unint64_t v122 = *((void *)a2 + 2);
        uint64_t v123 = *(void *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          do
          {
            unint64_t v127 = v121 + 1;
            *((void *)a2 + 1) = v121 + 1;
            char v128 = *(unsigned char *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0) {
              goto LABEL_286;
            }
            v124 += 7;
            unint64_t v121 = v127;
            BOOL v14 = v125++ > 8;
          }
          while (!v14);
LABEL_226:
          LODWORD(v126) = 0;
          goto LABEL_286;
        }
        char v186 = 0;
        unsigned int v187 = 0;
        uint64_t v126 = 0;
        if (v122 <= v121) {
          unint64_t v122 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v188 = v121 + 1;
            char v189 = *(unsigned char *)(v123 + v121);
            *((void *)a2 + 1) = v188;
            v126 |= (unint64_t)(v189 & 0x7F) << v186;
            if (v189 < 0)
            {
              v186 += 7;
              unint64_t v121 = v188;
              BOOL v14 = v187++ > 8;
              if (v14) {
                goto LABEL_226;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v126) = 0;
            }
          }
          break;
        }
LABEL_286:
        *((_DWORD *)this + 26) = v126;
        goto LABEL_20;
      case 0x18u:
        *((_DWORD *)this + 29) |= 8u;
        unint64_t v129 = *((void *)a2 + 1);
        if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v129);
LABEL_249:
          uint64_t v120 = *((void *)a2 + 1) + 8;
LABEL_250:
          *((void *)a2 + 1) = v120;
        }
        else
        {
LABEL_128:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0x19u:
        *((_DWORD *)this + 29) |= 0x10u;
        unint64_t v130 = *((void *)a2 + 1);
        unint64_t v131 = *((void *)a2 + 2);
        uint64_t v132 = *(void *)a2;
        if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
        {
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v135 = 0;
          do
          {
            unint64_t v136 = v130 + 1;
            *((void *)a2 + 1) = v130 + 1;
            char v137 = *(unsigned char *)(v132 + v130);
            v135 |= (unint64_t)(v137 & 0x7F) << v133;
            if ((v137 & 0x80) == 0) {
              goto LABEL_290;
            }
            v133 += 7;
            unint64_t v130 = v136;
            BOOL v14 = v134++ > 8;
          }
          while (!v14);
LABEL_233:
          uint64_t v135 = 0;
          goto LABEL_290;
        }
        char v190 = 0;
        unsigned int v191 = 0;
        uint64_t v135 = 0;
        if (v131 <= v130) {
          unint64_t v131 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v131 == v130)
          {
            uint64_t v135 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v192 = v130 + 1;
            char v193 = *(unsigned char *)(v132 + v130);
            *((void *)a2 + 1) = v192;
            v135 |= (unint64_t)(v193 & 0x7F) << v190;
            if (v193 < 0)
            {
              v190 += 7;
              unint64_t v130 = v192;
              BOOL v14 = v191++ > 8;
              if (v14) {
                goto LABEL_233;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v135 = 0;
            }
          }
          break;
        }
LABEL_290:
        *((void *)this + 5) = v135;
        goto LABEL_20;
      case 0x1Au:
        *((_DWORD *)this + 29) |= 0x20000u;
        unint64_t v138 = *((void *)a2 + 1);
        unint64_t v139 = *((void *)a2 + 2);
        uint64_t v140 = *(void *)a2;
        if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
        {
          char v141 = 0;
          unsigned int v142 = 0;
          uint64_t v143 = 0;
          do
          {
            unint64_t v144 = v138 + 1;
            *((void *)a2 + 1) = v138 + 1;
            char v145 = *(unsigned char *)(v140 + v138);
            v143 |= (unint64_t)(v145 & 0x7F) << v141;
            if ((v145 & 0x80) == 0) {
              goto LABEL_294;
            }
            v141 += 7;
            unint64_t v138 = v144;
            BOOL v14 = v142++ > 8;
          }
          while (!v14);
LABEL_240:
          LODWORD(v143) = 0;
          goto LABEL_294;
        }
        char v194 = 0;
        unsigned int v195 = 0;
        uint64_t v143 = 0;
        if (v139 <= v138) {
          unint64_t v139 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v196 = v138 + 1;
            char v197 = *(unsigned char *)(v140 + v138);
            *((void *)a2 + 1) = v196;
            v143 |= (unint64_t)(v197 & 0x7F) << v194;
            if (v197 < 0)
            {
              v194 += 7;
              unint64_t v138 = v196;
              BOOL v14 = v195++ > 8;
              if (v14) {
                goto LABEL_240;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v143) = 0;
            }
          }
          break;
        }
LABEL_294:
        *((_DWORD *)this + 24) = v143;
        goto LABEL_20;
      case 0x1Bu:
        *((_DWORD *)this + 29) |= 0x2000u;
        unint64_t v146 = *((void *)a2 + 1);
        unint64_t v147 = *((void *)a2 + 2);
        uint64_t v148 = *(void *)a2;
        if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
        {
          char v149 = 0;
          unsigned int v150 = 0;
          uint64_t v151 = 0;
          do
          {
            unint64_t v152 = v146 + 1;
            *((void *)a2 + 1) = v146 + 1;
            char v153 = *(unsigned char *)(v148 + v146);
            v151 |= (unint64_t)(v153 & 0x7F) << v149;
            if ((v153 & 0x80) == 0) {
              goto LABEL_298;
            }
            v149 += 7;
            unint64_t v146 = v152;
            BOOL v14 = v150++ > 8;
          }
          while (!v14);
LABEL_247:
          LODWORD(v151) = 0;
          goto LABEL_298;
        }
        char v198 = 0;
        unsigned int v199 = 0;
        uint64_t v151 = 0;
        if (v147 <= v146) {
          unint64_t v147 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v147 == v146)
      {
        LODWORD(v151) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_298;
      }
      unint64_t v200 = v146 + 1;
      char v201 = *(unsigned char *)(v148 + v146);
      *((void *)a2 + 1) = v200;
      v151 |= (unint64_t)(v201 & 0x7F) << v198;
      if ((v201 & 0x80) == 0) {
        break;
      }
      v198 += 7;
      unint64_t v146 = v200;
      BOOL v14 = v199++ > 8;
      if (v14) {
        goto LABEL_247;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v151) = 0;
    }
LABEL_298:
    *((_DWORD *)this + 20) = v151;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x10000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_DWORD *)(v3 + 116) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_55;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v4 & 0x2000) == 0) {
    return this;
  }
LABEL_55:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::MotionActivity::hash_value(CMMsl::MotionActivity *this)
{
  int v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x10000) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 23);
    if ((v1 & 0x200) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 16);
      if ((v1 & 0x20) != 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((v1 & 0x400) != 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 17);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_7;
    }
LABEL_50:
    uint64_t v8 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_51:
    double v9 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v6 = 0;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_50;
  }
LABEL_7:
  float v7 = *((float *)this + 22);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_51;
  }
LABEL_10:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned __int8 *)this + 109);
    if ((v1 & 0x100) != 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_14:
    uint64_t v11 = *((unsigned int *)this + 15);
    if (v1) {
      goto LABEL_15;
    }
LABEL_54:
    double v12 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_18;
    }
LABEL_55:
    double v13 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v11 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_15:
  double v12 = *((double *)this + 1);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_55;
  }
LABEL_18:
  double v13 = *((double *)this + 2);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_21:
    uint64_t v14 = *((unsigned int *)this + 19);
    if ((v1 & 0x800) != 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_22:
    uint64_t v15 = *((unsigned int *)this + 18);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_23:
    uint64_t v16 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_24:
    uint64_t v17 = *((unsigned __int8 *)this + 112);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v17 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_25:
    uint64_t v18 = *((unsigned __int8 *)this + 110);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v18 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_26:
    uint64_t v19 = *((unsigned __int8 *)this + 114);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v19 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_27:
    uint64_t v20 = *((unsigned __int8 *)this + 111);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v20 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    uint64_t v21 = *((unsigned int *)this + 25);
    if ((v1 & 0x80) != 0) {
      goto LABEL_29;
    }
LABEL_64:
    uint64_t v23 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_32;
    }
LABEL_65:
    uint64_t v25 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_35;
    }
LABEL_66:
    uint64_t v27 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_67;
  }
LABEL_63:
  uint64_t v21 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_64;
  }
LABEL_29:
  float v22 = *((float *)this + 14);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_65;
  }
LABEL_32:
  float v24 = *((float *)this + 13);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_66;
  }
LABEL_35:
  float v26 = *((float *)this + 21);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_38:
    uint64_t v28 = *((unsigned int *)this + 26);
    if ((v1 & 8) != 0) {
      goto LABEL_39;
    }
LABEL_68:
    double v29 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
    goto LABEL_69;
  }
LABEL_67:
  uint64_t v28 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_68;
  }
LABEL_39:
  double v29 = *((double *)this + 4);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    uint64_t v30 = *((void *)this + 5);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_43;
    }
LABEL_70:
    uint64_t v31 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_44;
    }
LABEL_71:
    uint64_t v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(void *)&v29 ^ v30 ^ v31 ^ v32;
  }
LABEL_69:
  uint64_t v30 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_70;
  }
LABEL_43:
  uint64_t v31 = *((unsigned int *)this + 24);
  if ((v1 & 0x2000) == 0) {
    goto LABEL_71;
  }
LABEL_44:
  uint64_t v32 = *((unsigned int *)this + 20);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(void *)&v29 ^ v30 ^ v31 ^ v32;
}

void CMMsl::MotionActivityReplay::~MotionActivityReplay(CMMsl::MotionActivityReplay *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this, const CMMsl::MotionActivityReplay *a2)
{
  *(void *)this = &unk_270643400;
  *(_DWORD *)(this + 36) = 0;
  __int16 v2 = *((_WORD *)a2 + 18);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 36) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    __int16 v2 = *((_WORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 34) = v7;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  char v8 = *((unsigned char *)a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 35) = v8;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v9 = *((unsigned char *)a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 32) = v9;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 33) = v10;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 36) = v3 | 4;
    *(_DWORD *)(this + 20) = v12;
    return this;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v11;
  if ((*((_WORD *)a2 + 18) & 4) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, const CMMsl::MotionActivityReplay *a2)
{
  if ((const CMMsl::MotionActivityReplay *)a1 != a2)
  {
    CMMsl::MotionActivityReplay::MotionActivityReplay((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivityReplay *a2, CMMsl::MotionActivityReplay *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 34);
  *((unsigned char *)this + 34) = *((unsigned char *)a2 + 34);
  *((unsigned char *)a2 + 34) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 35);
  *((unsigned char *)this + 35) = *((unsigned char *)a2 + 35);
  *((unsigned char *)a2 + 35) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 32);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 33);
  *((unsigned char *)this + 33) = *((unsigned char *)a2 + 33);
  *((unsigned char *)a2 + 33) = v6;
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  return result;
}

double CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643400;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionActivityReplay::MotionActivityReplay((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::MotionActivityReplay::formatText(CMMsl::MotionActivityReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 18);
  if (v5)
  {
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineFrom");
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineTo");
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "workoutLocationType");
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "workoutPause");
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "workoutResume");
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "workoutStart");
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "workoutStop");
  if ((*((_WORD *)this + 18) & 0x10) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "workoutType");
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionActivityReplay::readFrom(CMMsl::MotionActivityReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 18) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 2u:
        *((_WORD *)this + 18) |= 0x10u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_108;
            }
            unint64_t v55 = v21++;
            char v56 = *(unsigned char *)(v22 + v55);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v56 & 0x7F) << v53;
            if ((v56 & 0x80) == 0) {
              break;
            }
            v53 += 7;
            BOOL v14 = v54++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_107:
              unint64_t v2 = v55 + 1;
              goto LABEL_108;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_107;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_108;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_108:
        *((_DWORD *)this + 7) = v25;
        break;
      case 3u:
        *((_WORD *)this + 18) |= 8u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_113;
            }
            unint64_t v59 = v27++;
            char v60 = *(unsigned char *)(v28 + v59);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v60 & 0x7F) << v57;
            if ((v60 & 0x80) == 0) {
              break;
            }
            v57 += 7;
            BOOL v14 = v58++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
LABEL_112:
              unint64_t v2 = v59 + 1;
              goto LABEL_113;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
          goto LABEL_112;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_113;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        LODWORD(v31) = 0;
LABEL_113:
        *((_DWORD *)this + 6) = v31;
        break;
      case 0xAu:
        *((_WORD *)this + 18) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v34 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v34 = v33 != 0;
        }
        *((unsigned char *)this + 34) = v34;
        break;
      case 0xBu:
        *((_WORD *)this + 18) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v36 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v36 = v35 != 0;
        }
        *((unsigned char *)this + 35) = v36;
        break;
      case 0xCu:
        *((_WORD *)this + 18) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v38 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v38 = v37 != 0;
        }
        *((unsigned char *)this + 32) = v38;
        break;
      case 0xDu:
        *((_WORD *)this + 18) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v40 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v40 = v39 != 0;
        }
        *((unsigned char *)this + 33) = v40;
        break;
      case 0x15u:
        *((_WORD *)this + 18) |= 2u;
        unint64_t v41 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v42 = *(void *)a2;
        if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
        {
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v45 = 0;
          if (v2 <= v41) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v41)
            {
              LODWORD(v45) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_118;
            }
            unint64_t v63 = v41++;
            char v64 = *(unsigned char *)(v42 + v63);
            *((void *)a2 + 1) = v41;
            v45 |= (unint64_t)(v64 & 0x7F) << v61;
            if ((v64 & 0x80) == 0) {
              break;
            }
            v61 += 7;
            BOOL v14 = v62++ > 8;
            if (v14)
            {
              LODWORD(v45) = 0;
LABEL_117:
              unint64_t v2 = v63 + 1;
              goto LABEL_118;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v45) = 0;
          }
          goto LABEL_117;
        }
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        do
        {
          unint64_t v2 = v41 + 1;
          *((void *)a2 + 1) = v41 + 1;
          char v46 = *(unsigned char *)(v42 + v41);
          v45 |= (unint64_t)(v46 & 0x7F) << v43;
          if ((v46 & 0x80) == 0) {
            goto LABEL_118;
          }
          v43 += 7;
          unint64_t v41 = v2;
          BOOL v14 = v44++ > 8;
        }
        while (!v14);
        LODWORD(v45) = 0;
LABEL_118:
        *((_DWORD *)this + 4) = v45;
        break;
      case 0x16u:
        *((_WORD *)this + 18) |= 4u;
        unint64_t v47 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v48 = *(void *)a2;
        if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v51 = 0;
          if (v2 <= v47) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v47)
            {
              LODWORD(v51) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_123;
            }
            unint64_t v67 = v47++;
            char v68 = *(unsigned char *)(v48 + v67);
            *((void *)a2 + 1) = v47;
            v51 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            BOOL v14 = v66++ > 8;
            if (v14)
            {
              LODWORD(v51) = 0;
LABEL_122:
              unint64_t v2 = v67 + 1;
              goto LABEL_123;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v51) = 0;
          }
          goto LABEL_122;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        do
        {
          unint64_t v2 = v47 + 1;
          *((void *)a2 + 1) = v47 + 1;
          char v52 = *(unsigned char *)(v48 + v47);
          v51 |= (unint64_t)(v52 & 0x7F) << v49;
          if ((v52 & 0x80) == 0) {
            goto LABEL_123;
          }
          v49 += 7;
          unint64_t v47 = v2;
          BOOL v14 = v50++ > 8;
        }
        while (!v14);
        LODWORD(v51) = 0;
LABEL_123:
        *((_DWORD *)this + 5) = v51;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionActivityReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_19:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::MotionActivityReplay::hash_value(CMMsl::MotionActivityReplay *this)
{
  __int16 v1 = *((_WORD *)this + 18);
  if (v1)
  {
    double v2 = *((double *)this + 1);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 7);
      if ((v1 & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 6);
    if ((v1 & 0x80) != 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 34);
    if ((*((_WORD *)this + 18) & 0x100) != 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 18) & 0x100) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 35);
    if ((v1 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v6 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned __int8 *)this + 32);
    if ((v1 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v7 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 33);
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_20:
    uint64_t v9 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_21:
    uint64_t v10 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_19:
  uint64_t v8 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v9 = *((int *)this + 4);
  if ((v1 & 4) == 0) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v10 = *((int *)this + 5);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MotionContextActivity::~MotionContextActivity(CMMsl::MotionContextActivity *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270643438;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionContextActivity::~MotionContextActivity(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t this, const CMMsl::MotionContextActivity *a2)
{
  *(void *)this = &unk_270643438;
  *(void *)(this + 8) = 0;
  *(void *)(this + 24) = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = 2;
    *(_DWORD *)(this + 24) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 28) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 2);
    *(unsigned char *)(this + 28) = v2;
    *(void *)(this + 16) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::MotionContextActivity *CMMsl::MotionContextActivity::operator=(const CMMsl::MotionContextActivity *a1, const CMMsl::MotionContextActivity *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionContextActivity::MotionContextActivity((uint64_t)&v8, a2);
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v3 = *((void *)a1 + 3);
    uint64_t v5 = v11;
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v5;
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    uint64_t v6 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v9;
    uint64_t v9 = v6;
    CMMsl::MotionContextActivity::~MotionContextActivity((CMMsl::MotionContextActivity *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionContextActivity *a2, CMMsl::MotionContextActivity *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  return result;
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643438;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *CMMsl::MotionContextActivity::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    CMMsl::MotionContextActivity::MotionContextActivity((uint64_t)&v8, a2);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1[3];
    uint64_t v5 = v11;
    a1[2] = v10;
    a1[3] = v5;
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    uint64_t v6 = a1[1];
    a1[1] = v9;
    uint64_t v9 = v6;
    CMMsl::MotionContextActivity::~MotionContextActivity((CMMsl::MotionContextActivity *)&v8);
  }
  return a1;
}

uint64_t CMMsl::MotionContextActivity::formatText(CMMsl::MotionContextActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "impulse");
  }
  char v6 = *((unsigned char *)this + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state");
    char v6 = *((unsigned char *)this + 28);
  }
  if (v6) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionContextActivity::readFrom(CMMsl::MotionContextActivity *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v21 == 2)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v30 = *((void *)a2 + 1);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v30);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v21 == 1)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        uint64_t v24 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_51;
            }
            unint64_t v33 = v22 + 1;
            char v34 = *(unsigned char *)(v24 + v22);
            *((void *)a2 + 1) = v33;
            v27 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            unint64_t v22 = v33;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
LABEL_46:
              LODWORD(v27) = 0;
              goto LABEL_51;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_46;
            }
          }
        }
LABEL_51:
        *((_DWORD *)this + 6) = v27;
      }
      else
      {
LABEL_19:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_25;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionContextActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 28);
  }
  if (v4) {
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t CMMsl::MotionContextActivity::hash_value(CMMsl::MotionContextActivity *this)
{
  if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
LABEL_7:
    double v2 = 0.0;
    goto LABEL_8;
  }
  uint64_t v1 = *((int *)this + 6);
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
LABEL_8:
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(int *)(v3 + 16);
    if ((*(unsigned char *)(v3 + 20) & 2) == 0) {
      uint64_t v4 = 0;
    }
    BOOL v5 = *(double *)(v3 + 8) == 0.0 || (*(unsigned char *)(v3 + 20) & 1) == 0;
    uint64_t v6 = *(void *)(v3 + 8);
    if (v5) {
      uint64_t v6 = 0;
    }
    uint64_t v3 = v6 ^ v4;
  }
  return *(void *)&v2 ^ v1 ^ v3;
}

uint64_t CMMsl::MotionContextActivity::makeImpulse(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionGPSLocation::~MotionGPSLocation(CMMsl::MotionGPSLocation *this)
{
  *(void *)this = &unk_270643470;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionGPSLocation::~MotionGPSLocation(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this, const CMMsl::MotionGPSLocation *a2)
{
  *(void *)this = &unk_270643470;
  *(void *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *((void *)a2 + 12);
    int v3 = 2048;
    *(_DWORD *)(this + 180) = 2048;
    *(void *)(this + 96) = v4;
    int v2 = *((_DWORD *)a2 + 45);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 7);
    v3 |= 0x40u;
    *(_DWORD *)(this + 180) = v3;
    *(void *)(this + 56) = v5;
    int v2 = *((_DWORD *)a2 + 45);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    uint64_t v10 = *((void *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 180) = v3;
    *(void *)(this + 64) = v10;
    int v2 = *((_DWORD *)a2 + 45);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v11 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 80) = v11;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v12 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 88) = v12;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v13 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 48) = v13;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v14 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 16) = v14;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 24) = v15;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 8) = v16;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = *((void *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 120) = v17;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x800000) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v18 = *((_DWORD *)a2 + 41);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 164) = v18;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v19 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 104) = v19;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v20 = *((_DWORD *)a2 + 42);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 168) = v20;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v21 = *((_DWORD *)a2 + 43);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 172) = v21;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v22 = *((_DWORD *)a2 + 35);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 140) = v22;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x80000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v23 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 148) = v23;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 144) = v24;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v25 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 72) = v25;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v26 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 32) = v26;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v27 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 40) = v27;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v28 = *((_DWORD *)a2 + 39);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 156) = v28;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 176) = *((_DWORD *)a2 + 44);
  *(_DWORD *)(this + 180) = v3;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v29 = *((_DWORD *)a2 + 40);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 160) = v29;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_58:
  int v30 = *((_DWORD *)a2 + 34);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 136) = v30;
  if ((*((_DWORD *)a2 + 45) & 0x100000) != 0)
  {
LABEL_29:
    int v6 = *((_DWORD *)a2 + 38);
    *(_DWORD *)(this + 180) = v3 | 0x100000;
    *(_DWORD *)(this + 152) = v6;
  }
LABEL_30:
  if (*((void *)a2 + 14)) {
    operator new();
  }
  int v7 = *((_DWORD *)a2 + 45);
  if ((v7 & 0x8000) != 0)
  {
    int v8 = *((_DWORD *)a2 + 33);
    *(_DWORD *)(this + 180) |= 0x8000u;
    *(_DWORD *)(this + 132) = v8;
    int v7 = *((_DWORD *)a2 + 45);
  }
  if ((v7 & 0x4000) != 0)
  {
    int v9 = *((_DWORD *)a2 + 32);
    *(_DWORD *)(this + 180) |= 0x4000u;
    *(_DWORD *)(this + 128) = v9;
  }
  return this;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, const CMMsl::MotionGPSLocation *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v5, v3);
    CMMsl::MotionGPSLocation::~MotionGPSLocation((CMMsl::MotionGPSLocation *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionGPSLocation *a2, CMMsl::MotionGPSLocation *a3)
{
  int v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v13;
  int v14 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  uint64_t v15 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  int v16 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v16;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  LODWORD(v15) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  uint64_t v17 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  int v20 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v20;
  int v21 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v21;
  int v22 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v22;
  int v23 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v23;
  int v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  uint64_t v25 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v25;
  LODWORD(v25) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v25;
  float result = *((float *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((float *)a2 + 32) = result;
  return result;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643470;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v5, v3);
    CMMsl::MotionGPSLocation::~MotionGPSLocation((CMMsl::MotionGPSLocation *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionGPSLocation::formatText(CMMsl::MotionGPSLocation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 45);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 45);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "demConfidence", *((float *)this + 32));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "demNumContiguousFlatPoints");
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "gnssModesOfOperation");
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 35));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 36));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 37));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "notificationType");
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "originDevice");
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "roadClass");
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
  if ((*((_DWORD *)this + 45) & 0x1000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 13));
LABEL_24:
  uint64_t v6 = *((void *)this + 14);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "trackRunData");
  }
  int v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(a2, "type");
    int v7 = *((_DWORD *)this + 45);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 42));
  int v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "undulationModel");
  int v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 15));
  if ((*((_DWORD *)this + 45) & 0x4000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(a2, "wayForm");
LABEL_32:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionGPSLocation::readFrom(CMMsl::MotionGPSLocation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 45) |= 0x800u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v20);
        goto LABEL_91;
      case 2u:
        *((_DWORD *)this + 45) |= 0x40u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v21);
        goto LABEL_91;
      case 3u:
        *((_DWORD *)this + 45) |= 0x80u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v22);
        goto LABEL_91;
      case 4u:
        *((_DWORD *)this + 45) |= 0x200u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v23);
        goto LABEL_91;
      case 5u:
        *((_DWORD *)this + 45) |= 0x400u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v24);
        goto LABEL_91;
      case 6u:
        *((_DWORD *)this + 45) |= 0x20u;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v25);
        goto LABEL_91;
      case 7u:
        *((_DWORD *)this + 45) |= 2u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v26);
        goto LABEL_91;
      case 8u:
        *((_DWORD *)this + 45) |= 4u;
        unint64_t v27 = *((void *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v27);
        goto LABEL_91;
      case 9u:
        *((_DWORD *)this + 45) |= 1u;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v28);
        goto LABEL_91;
      case 0xAu:
        *((_DWORD *)this + 45) |= 0x2000u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v29);
        goto LABEL_91;
      case 0xBu:
        *((_DWORD *)this + 45) |= 0x800000u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        uint64_t v32 = *(void *)a2;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          do
          {
            unint64_t v36 = v30 + 1;
            *((void *)a2 + 1) = v30 + 1;
            char v37 = *(unsigned char *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0) {
              goto LABEL_212;
            }
            v33 += 7;
            unint64_t v30 = v36;
            BOOL v14 = v34++ > 8;
          }
          while (!v14);
LABEL_144:
          LODWORD(v35) = 0;
          goto LABEL_212;
        }
        char v104 = 0;
        unsigned int v105 = 0;
        uint64_t v35 = 0;
        if (v31 <= v30) {
          unint64_t v31 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v106 = v30 + 1;
            char v107 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v106;
            v35 |= (unint64_t)(v107 & 0x7F) << v104;
            if (v107 < 0)
            {
              v104 += 7;
              unint64_t v30 = v106;
              BOOL v14 = v105++ > 8;
              if (v14) {
                goto LABEL_144;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v35) = 0;
            }
          }
          break;
        }
LABEL_212:
        *((_DWORD *)this + 41) = v35;
        goto LABEL_197;
      case 0xCu:
        *((_DWORD *)this + 45) |= 0x1000u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v38);
        goto LABEL_91;
      case 0xDu:
        *((_DWORD *)this + 45) |= 0x1000000u;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v39);
        goto LABEL_195;
      case 0xEu:
        *((_DWORD *)this + 45) |= 0x2000000u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v41 = *((void *)a2 + 2);
        uint64_t v42 = *(void *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          do
          {
            unint64_t v46 = v40 + 1;
            *((void *)a2 + 1) = v40 + 1;
            char v47 = *(unsigned char *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0) {
              goto LABEL_215;
            }
            v43 += 7;
            unint64_t v40 = v46;
            BOOL v14 = v44++ > 8;
          }
          while (!v14);
LABEL_151:
          LODWORD(v45) = 0;
          goto LABEL_215;
        }
        char v108 = 0;
        unsigned int v109 = 0;
        uint64_t v45 = 0;
        if (v41 <= v40) {
          unint64_t v41 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v41 == v40)
          {
            LODWORD(v45) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v110 = v40 + 1;
            char v111 = *(unsigned char *)(v42 + v40);
            *((void *)a2 + 1) = v110;
            v45 |= (unint64_t)(v111 & 0x7F) << v108;
            if (v111 < 0)
            {
              v108 += 7;
              unint64_t v40 = v110;
              BOOL v14 = v109++ > 8;
              if (v14) {
                goto LABEL_151;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v45) = 0;
            }
          }
          break;
        }
LABEL_215:
        *((_DWORD *)this + 43) = v45;
        goto LABEL_197;
      case 0xFu:
        *((_DWORD *)this + 45) |= 0x20000u;
        unint64_t v48 = *((void *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v48);
        goto LABEL_195;
      case 0x10u:
        *((_DWORD *)this + 45) |= 0x80000u;
        unint64_t v49 = *((void *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v49);
        goto LABEL_195;
      case 0x11u:
        *((_DWORD *)this + 45) |= 0x40000u;
        unint64_t v50 = *((void *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v50);
        goto LABEL_195;
      case 0x12u:
        *((_DWORD *)this + 45) |= 0x100u;
        unint64_t v51 = *((void *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v51);
        goto LABEL_91;
      case 0x13u:
        *((_DWORD *)this + 45) |= 8u;
        unint64_t v52 = *((void *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v52);
        goto LABEL_91;
      case 0x14u:
        *((_DWORD *)this + 45) |= 0x10u;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
          goto LABEL_137;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v53);
LABEL_91:
        uint64_t v54 = *((void *)a2 + 1) + 8;
        goto LABEL_196;
      case 0x15u:
        *((_DWORD *)this + 45) |= 0x200000u;
        unint64_t v55 = *((void *)a2 + 1);
        unint64_t v56 = *((void *)a2 + 2);
        uint64_t v57 = *(void *)a2;
        if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v60 = 0;
          do
          {
            unint64_t v61 = v55 + 1;
            *((void *)a2 + 1) = v55 + 1;
            char v62 = *(unsigned char *)(v57 + v55);
            v60 |= (unint64_t)(v62 & 0x7F) << v58;
            if ((v62 & 0x80) == 0) {
              goto LABEL_218;
            }
            v58 += 7;
            unint64_t v55 = v61;
            BOOL v14 = v59++ > 8;
          }
          while (!v14);
LABEL_158:
          LODWORD(v60) = 0;
          goto LABEL_218;
        }
        char v112 = 0;
        unsigned int v113 = 0;
        uint64_t v60 = 0;
        if (v56 <= v55) {
          unint64_t v56 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v56 == v55)
          {
            LODWORD(v60) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v114 = v55 + 1;
            char v115 = *(unsigned char *)(v57 + v55);
            *((void *)a2 + 1) = v114;
            v60 |= (unint64_t)(v115 & 0x7F) << v112;
            if (v115 < 0)
            {
              v112 += 7;
              unint64_t v55 = v114;
              BOOL v14 = v113++ > 8;
              if (v14) {
                goto LABEL_158;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v60) = 0;
            }
          }
          break;
        }
LABEL_218:
        *((_DWORD *)this + 39) = v60;
        goto LABEL_197;
      case 0x16u:
        *((_DWORD *)this + 45) |= 0x4000000u;
        unint64_t v63 = *((void *)a2 + 1);
        unint64_t v64 = *((void *)a2 + 2);
        uint64_t v65 = *(void *)a2;
        if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v68 = 0;
          do
          {
            unint64_t v69 = v63 + 1;
            *((void *)a2 + 1) = v63 + 1;
            char v70 = *(unsigned char *)(v65 + v63);
            v68 |= (unint64_t)(v70 & 0x7F) << v66;
            if ((v70 & 0x80) == 0) {
              goto LABEL_221;
            }
            v66 += 7;
            unint64_t v63 = v69;
            BOOL v14 = v67++ > 8;
          }
          while (!v14);
LABEL_165:
          LODWORD(v68) = 0;
          goto LABEL_221;
        }
        char v116 = 0;
        unsigned int v117 = 0;
        uint64_t v68 = 0;
        if (v64 <= v63) {
          unint64_t v64 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v64 == v63)
          {
            LODWORD(v68) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v118 = v63 + 1;
            char v119 = *(unsigned char *)(v65 + v63);
            *((void *)a2 + 1) = v118;
            v68 |= (unint64_t)(v119 & 0x7F) << v116;
            if (v119 < 0)
            {
              v116 += 7;
              unint64_t v63 = v118;
              BOOL v14 = v117++ > 8;
              if (v14) {
                goto LABEL_165;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v68) = 0;
            }
          }
          break;
        }
LABEL_221:
        *((_DWORD *)this + 44) = v68;
        goto LABEL_197;
      case 0x17u:
        *((_DWORD *)this + 45) |= 0x400000u;
        unint64_t v71 = *((void *)a2 + 1);
        unint64_t v72 = *((void *)a2 + 2);
        uint64_t v73 = *(void *)a2;
        if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v76 = 0;
          do
          {
            unint64_t v77 = v71 + 1;
            *((void *)a2 + 1) = v71 + 1;
            char v78 = *(unsigned char *)(v73 + v71);
            v76 |= (unint64_t)(v78 & 0x7F) << v74;
            if ((v78 & 0x80) == 0) {
              goto LABEL_224;
            }
            v74 += 7;
            unint64_t v71 = v77;
            BOOL v14 = v75++ > 8;
          }
          while (!v14);
LABEL_172:
          LODWORD(v76) = 0;
          goto LABEL_224;
        }
        char v120 = 0;
        unsigned int v121 = 0;
        uint64_t v76 = 0;
        if (v72 <= v71) {
          unint64_t v72 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v72 == v71)
          {
            LODWORD(v76) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v122 = v71 + 1;
            char v123 = *(unsigned char *)(v73 + v71);
            *((void *)a2 + 1) = v122;
            v76 |= (unint64_t)(v123 & 0x7F) << v120;
            if (v123 < 0)
            {
              v120 += 7;
              unint64_t v71 = v122;
              BOOL v14 = v121++ > 8;
              if (v14) {
                goto LABEL_172;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v76) = 0;
            }
          }
          break;
        }
LABEL_224:
        *((_DWORD *)this + 40) = v76;
        goto LABEL_197;
      case 0x18u:
        *((_DWORD *)this + 45) |= 0x10000u;
        unint64_t v79 = *((void *)a2 + 1);
        unint64_t v80 = *((void *)a2 + 2);
        uint64_t v81 = *(void *)a2;
        if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
        {
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = 0;
          do
          {
            unint64_t v85 = v79 + 1;
            *((void *)a2 + 1) = v79 + 1;
            char v86 = *(unsigned char *)(v81 + v79);
            v84 |= (unint64_t)(v86 & 0x7F) << v82;
            if ((v86 & 0x80) == 0) {
              goto LABEL_227;
            }
            v82 += 7;
            unint64_t v79 = v85;
            BOOL v14 = v83++ > 8;
          }
          while (!v14);
LABEL_179:
          LODWORD(v84) = 0;
          goto LABEL_227;
        }
        char v124 = 0;
        unsigned int v125 = 0;
        uint64_t v84 = 0;
        if (v80 <= v79) {
          unint64_t v80 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v80 == v79)
          {
            LODWORD(v84) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v126 = v79 + 1;
            char v127 = *(unsigned char *)(v81 + v79);
            *((void *)a2 + 1) = v126;
            v84 |= (unint64_t)(v127 & 0x7F) << v124;
            if (v127 < 0)
            {
              v124 += 7;
              unint64_t v79 = v126;
              BOOL v14 = v125++ > 8;
              if (v14) {
                goto LABEL_179;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v84) = 0;
            }
          }
          break;
        }
LABEL_227:
        *((_DWORD *)this + 34) = v84;
        goto LABEL_197;
      case 0x19u:
        *((_DWORD *)this + 45) |= 0x100000u;
        unint64_t v87 = *((void *)a2 + 1);
        unint64_t v88 = *((void *)a2 + 2);
        uint64_t v89 = *(void *)a2;
        if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
        {
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v92 = 0;
          do
          {
            unint64_t v93 = v87 + 1;
            *((void *)a2 + 1) = v87 + 1;
            char v94 = *(unsigned char *)(v89 + v87);
            v92 |= (unint64_t)(v94 & 0x7F) << v90;
            if ((v94 & 0x80) == 0) {
              goto LABEL_230;
            }
            v90 += 7;
            unint64_t v87 = v93;
            BOOL v14 = v91++ > 8;
          }
          while (!v14);
LABEL_186:
          LODWORD(v92) = 0;
          goto LABEL_230;
        }
        char v128 = 0;
        unsigned int v129 = 0;
        uint64_t v92 = 0;
        if (v88 <= v87) {
          unint64_t v88 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v88 == v87)
          {
            LODWORD(v92) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v130 = v87 + 1;
            char v131 = *(unsigned char *)(v89 + v87);
            *((void *)a2 + 1) = v130;
            v92 |= (unint64_t)(v131 & 0x7F) << v128;
            if (v131 < 0)
            {
              v128 += 7;
              unint64_t v87 = v130;
              BOOL v14 = v129++ > 8;
              if (v14) {
                goto LABEL_186;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v92) = 0;
            }
          }
          break;
        }
LABEL_230:
        *((_DWORD *)this + 38) = v92;
        goto LABEL_197;
      case 0x1Au:
        operator new();
      case 0x1Bu:
        *((_DWORD *)this + 45) |= 0x8000u;
        unint64_t v95 = *((void *)a2 + 1);
        unint64_t v96 = *((void *)a2 + 2);
        uint64_t v97 = *(void *)a2;
        if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
        {
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v100 = 0;
          do
          {
            unint64_t v101 = v95 + 1;
            *((void *)a2 + 1) = v95 + 1;
            char v102 = *(unsigned char *)(v97 + v95);
            v100 |= (unint64_t)(v102 & 0x7F) << v98;
            if ((v102 & 0x80) == 0) {
              goto LABEL_233;
            }
            v98 += 7;
            unint64_t v95 = v101;
            BOOL v14 = v99++ > 8;
          }
          while (!v14);
LABEL_193:
          LODWORD(v100) = 0;
          goto LABEL_233;
        }
        char v132 = 0;
        unsigned int v133 = 0;
        uint64_t v100 = 0;
        if (v96 <= v95) {
          unint64_t v96 = *((void *)a2 + 1);
        }
        break;
      case 0x1Cu:
        *((_DWORD *)this + 45) |= 0x4000u;
        unint64_t v103 = *((void *)a2 + 1);
        if (v103 <= 0xFFFFFFFFFFFFFFFBLL && v103 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v103);
LABEL_195:
          uint64_t v54 = *((void *)a2 + 1) + 4;
LABEL_196:
          *((void *)a2 + 1) = v54;
        }
        else
        {
LABEL_137:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_197;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v96 == v95)
      {
        LODWORD(v100) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_233;
      }
      unint64_t v134 = v95 + 1;
      char v135 = *(unsigned char *)(v97 + v95);
      *((void *)a2 + 1) = v134;
      v100 |= (unint64_t)(v135 & 0x7F) << v132;
      if ((v135 & 0x80) == 0) {
        break;
      }
      v132 += 7;
      unint64_t v95 = v134;
      BOOL v14 = v133++ > 8;
      if (v14) {
        goto LABEL_193;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v100) = 0;
    }
LABEL_233:
    *((_DWORD *)this + 33) = v100;
LABEL_197:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_197;
  }
  return result;
}

uint64_t CMMsl::MotionGPSLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 180);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 96));
    int v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0) {
LABEL_26:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_27:
  int v5 = *(const PB::Base **)(v3 + 112);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  int v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    int v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
  {
    float v7 = *(float *)(v3 + 128);
    return PB::Writer::write(a2, v7);
  }
  return this;
}

unint64_t CMMsl::MotionGPSLocation::hash_value(CMMsl::MotionGPSLocation *this)
{
  uint64_t v1 = this;
  int v2 = *((_DWORD *)this + 45);
  if ((v2 & 0x800) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_82:
    uint64_t v4 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_7;
    }
LABEL_83:
    uint64_t v5 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_11;
    }
LABEL_84:
    uint64_t v6 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_85:
    uint64_t v7 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_19;
    }
LABEL_86:
    uint64_t v8 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_23;
    }
LABEL_87:
    uint64_t v9 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_27;
    }
LABEL_88:
    uint64_t v10 = 0;
    if (v2) {
      goto LABEL_31;
    }
LABEL_89:
    uint64_t v11 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_35;
    }
LABEL_90:
    uint64_t v12 = 0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
  if (*((double *)this + 12) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 12);
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_82;
  }
LABEL_3:
  if (*((double *)this + 7) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 7);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_83;
  }
LABEL_7:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 8);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_84;
  }
LABEL_11:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)this + 10);
  }
  if ((v2 & 0x400) == 0) {
    goto LABEL_85;
  }
LABEL_15:
  if (*((double *)this + 11) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 11);
  }
  if ((v2 & 0x20) == 0) {
    goto LABEL_86;
  }
LABEL_19:
  if (*((double *)this + 6) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 6);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_87;
  }
LABEL_23:
  if (*((double *)this + 2) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 2);
  }
  if ((v2 & 4) == 0) {
    goto LABEL_88;
  }
LABEL_27:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 3);
  }
  if ((v2 & 1) == 0) {
    goto LABEL_89;
  }
LABEL_31:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *((void *)this + 1);
  }
  if ((v2 & 0x2000) == 0) {
    goto LABEL_90;
  }
LABEL_35:
  if (*((double *)this + 15) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 15);
  }
  if ((v2 & 0x800000) != 0)
  {
LABEL_39:
    uint64_t v13 = *((unsigned int *)this + 41);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_40;
    }
LABEL_92:
    uint64_t v14 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_44;
    }
LABEL_93:
    uint64_t v16 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_94;
  }
LABEL_91:
  uint64_t v13 = 0;
  if ((v2 & 0x1000) == 0) {
    goto LABEL_92;
  }
LABEL_40:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 13);
  }
  if ((v2 & 0x1000000) == 0) {
    goto LABEL_93;
  }
LABEL_44:
  float v15 = *((float *)this + 42);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = LODWORD(v15);
  }
  if ((v2 & 0x2000000) != 0)
  {
LABEL_48:
    uint64_t v17 = *((unsigned int *)this + 43);
    if ((v2 & 0x20000) != 0) {
      goto LABEL_49;
    }
LABEL_95:
    uint64_t v19 = 0;
    if ((v2 & 0x80000) != 0) {
      goto LABEL_53;
    }
LABEL_96:
    uint64_t v21 = 0;
    if ((v2 & 0x40000) != 0) {
      goto LABEL_57;
    }
LABEL_97:
    uint64_t v23 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_61;
    }
LABEL_98:
    uint64_t v24 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_65;
    }
LABEL_99:
    uint64_t v25 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_69;
    }
LABEL_100:
    uint64_t v26 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_101;
  }
LABEL_94:
  uint64_t v17 = 0;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_95;
  }
LABEL_49:
  float v18 = *((float *)this + 35);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v2 & 0x80000) == 0) {
    goto LABEL_96;
  }
LABEL_53:
  float v20 = *((float *)this + 37);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v2 & 0x40000) == 0) {
    goto LABEL_97;
  }
LABEL_57:
  float v22 = *((float *)this + 36);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = LODWORD(v22);
  }
  if ((v2 & 0x100) == 0) {
    goto LABEL_98;
  }
LABEL_61:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 9);
  }
  if ((v2 & 8) == 0) {
    goto LABEL_99;
  }
LABEL_65:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *((void *)this + 4);
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_100;
  }
LABEL_69:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *((void *)this + 5);
  }
  if ((v2 & 0x200000) != 0)
  {
LABEL_73:
    uint64_t v27 = *((unsigned int *)this + 39);
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_74;
    }
    goto LABEL_102;
  }
LABEL_101:
  uint64_t v27 = 0;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_74:
    uint64_t v28 = *((int *)this + 44);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_75;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v28 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_75:
    uint64_t v29 = *((int *)this + 40);
    if ((v2 & 0x10000) != 0) {
      goto LABEL_76;
    }
LABEL_104:
    uint64_t v30 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_105;
  }
LABEL_103:
  uint64_t v29 = 0;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_104;
  }
LABEL_76:
  uint64_t v30 = *((unsigned int *)this + 34);
  if ((v2 & 0x100000) != 0)
  {
LABEL_77:
    uint64_t v61 = *((int *)this + 38);
    goto LABEL_106;
  }
LABEL_105:
  uint64_t v61 = 0;
LABEL_106:
  unint64_t v31 = *((void *)this + 14);
  if (v31)
  {
    uint64_t v58 = v3;
    uint64_t v50 = v25;
    uint64_t v32 = v4;
    uint64_t v56 = v5;
    uint64_t v48 = v27;
    uint64_t v33 = v6;
    uint64_t v54 = v7;
    uint64_t v45 = v30;
    uint64_t v46 = v29;
    uint64_t v34 = v8;
    uint64_t v35 = v9;
    uint64_t v52 = v23;
    uint64_t v36 = v10;
    uint64_t v60 = v11;
    uint64_t v53 = v21;
    char v37 = v1;
    uint64_t v59 = v12;
    uint64_t v51 = v24;
    uint64_t v38 = v13;
    uint64_t v57 = v14;
    uint64_t v49 = v26;
    uint64_t v39 = v16;
    uint64_t v55 = v17;
    uint64_t v47 = v28;
    uint64_t v40 = v19;
    unint64_t v31 = CMMsl::TrackRunData::hash_value((CMMsl::TrackRunData *)v31);
    uint64_t v19 = v40;
    uint64_t v7 = v54;
    uint64_t v17 = v55;
    uint64_t v16 = v39;
    uint64_t v5 = v56;
    uint64_t v14 = v57;
    uint64_t v13 = v38;
    uint64_t v12 = v59;
    uint64_t v11 = v60;
    uint64_t v1 = v37;
    uint64_t v21 = v53;
    uint64_t v10 = v36;
    uint64_t v24 = v51;
    uint64_t v23 = v52;
    uint64_t v9 = v35;
    uint64_t v30 = v45;
    uint64_t v8 = v34;
    uint64_t v29 = v46;
    uint64_t v28 = v47;
    uint64_t v6 = v33;
    uint64_t v27 = v48;
    uint64_t v26 = v49;
    uint64_t v4 = v32;
    uint64_t v25 = v50;
    uint64_t v3 = v58;
  }
  if ((v2 & 0x8000) == 0)
  {
    uint64_t v41 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_110;
    }
LABEL_114:
    uint64_t v43 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
  }
  uint64_t v41 = *((int *)v1 + 33);
  if ((v2 & 0x4000) == 0) {
    goto LABEL_114;
  }
LABEL_110:
  float v42 = *((float *)v1 + 32);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
}

uint64_t CMMsl::MotionGPSLocation::makeTrackRunData(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionHint::~MotionHint(CMMsl::MotionHint *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this, const CMMsl::MotionHint *a2)
{
  *(void *)this = &unk_2706434A8;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) = v3 | 4;
    *(_DWORD *)(this + 20) = v6;
  }
  return this;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, const CMMsl::MotionHint *a2)
{
  if ((const CMMsl::MotionHint *)a1 != a2)
  {
    CMMsl::MotionHint::MotionHint((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionHint *a2, CMMsl::MotionHint *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

double CMMsl::MotionHint::MotionHint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706434A8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706434A8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = &unk_2706434A8;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionHint::formatText(CMMsl::MotionHint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "event");
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "value");
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionHint::readFrom(CMMsl::MotionHint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v36 = v22++;
            char v37 = *(unsigned char *)(v23 + v36);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
LABEL_66:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v2 = v22 + 1;
            *((void *)a2 + 1) = v22 + 1;
            char v27 = *(unsigned char *)(v23 + v22);
            v26 |= (unint64_t)(v27 & 0x7F) << v24;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v22 = v2;
            BOOL v14 = v25++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v26;
      }
      else if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_72;
            }
            unint64_t v40 = v28++;
            char v41 = *(unsigned char *)(v29 + v40);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              goto LABEL_71;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
LABEL_71:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          while (1)
          {
            unint64_t v2 = v28 + 1;
            *((void *)a2 + 1) = v28 + 1;
            char v33 = *(unsigned char *)(v29 + v28);
            v32 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v28 = v2;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
              break;
            }
          }
        }
LABEL_72:
        *((_DWORD *)this + 4) = v32;
      }
      else if (v19 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_27;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionHint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::MotionHint::hash_value(CMMsl::MotionHint *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ *(void *)&v1 ^ v3;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 5);
  return v2 ^ *(void *)&v1 ^ v3;
}

void CMMsl::MotionLocation::~MotionLocation(CMMsl::MotionLocation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this, const CMMsl::MotionLocation *a2)
{
  *(void *)this = &unk_2706434E0;
  *(_DWORD *)(this + 220) = 0;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *((void *)a2 + 19);
    int v3 = 0x40000;
    *(_DWORD *)(this + 220) = 0x40000;
    *(void *)(this + 152) = v4;
    int v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 220) = v3;
    *(void *)(this + 72) = v5;
    int v2 = *((_DWORD *)a2 + 55);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *((void *)a2 + 10);
    v3 |= 0x200u;
    *(_DWORD *)(this + 220) = v3;
    *(void *)(this + 80) = v6;
    int v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 136) = v7;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v8 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 144) = v8;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v9 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 64) = v9;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 16) = v10;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 24) = v11;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v12 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 8) = v12;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v13 = *((void *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 168) = v13;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v14 = *((_DWORD *)a2 + 51);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 204) = v14;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v15 = *((void *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 160) = v15;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v16 = *((_DWORD *)a2 + 52);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 208) = v16;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v17 = *((_DWORD *)a2 + 53);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 212) = v17;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v18 = *((_DWORD *)a2 + 44);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 176) = v18;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v19 = *((_DWORD *)a2 + 46);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 184) = v19;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v20 = *((_DWORD *)a2 + 45);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 180) = v20;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v21 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 96) = v21;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v22 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 32) = v22;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v23 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 40) = v23;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v24 = *((_DWORD *)a2 + 48);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 192) = v24;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v25 = *((_DWORD *)a2 + 50);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 200) = v25;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v26 = *((_DWORD *)a2 + 47);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 188) = v26;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v27 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 48) = v27;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v28 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 56) = v28;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v29 = *((void *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 128) = v29;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v30 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 88) = v30;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }
LABEL_62:
  char v31 = *((unsigned char *)a2 + 216);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 220) = v3;
  *(unsigned char *)(this + 216) = v31;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v32 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 104) = v32;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v33 = *((void *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 120) = v33;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0) {
      return this;
    }
LABEL_66:
    int v35 = *((_DWORD *)a2 + 49);
    *(_DWORD *)(this + 220) = v3 | 0x4000000;
    *(_DWORD *)(this + 196) = v35;
    return this;
  }
LABEL_65:
  uint64_t v34 = *((void *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 112) = v34;
  if ((*((_DWORD *)a2 + 55) & 0x4000000) != 0) {
    goto LABEL_66;
  }
  return this;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, const CMMsl::MotionLocation *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLocation *a2, CMMsl::MotionLocation *a3)
{
  int v3 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v7;
  uint64_t v8 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v13;
  int v14 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v14;
  uint64_t v15 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v15;
  LODWORD(v15) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v15;
  int v16 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v16;
  LODWORD(v15) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v15;
  LODWORD(v15) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v15;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  int v20 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v20;
  int v21 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v21;
  int v22 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v22;
  uint64_t v23 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v23;
  uint64_t v24 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v24;
  uint64_t v25 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  LOBYTE(v22) = *((unsigned char *)this + 216);
  *((unsigned char *)this + 216) = *((unsigned char *)a2 + 216);
  *((unsigned char *)a2 + 216) = v22;
  uint64_t v27 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v27;
  uint64_t v28 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v28;
  double result = *((double *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((double *)a2 + 14) = result;
  int v30 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v30;
  return result;
}

double CMMsl::MotionLocation::MotionLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706434E0;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  double result = *(double *)(a2 + 112);
  *(double *)(a1 + 112) = result;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  return result;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionLocation::formatText(CMMsl::MotionLocation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 55);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 55);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 44));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 45));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 46));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isPrefilteredLocation");
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "matchQuality");
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "originDevice");
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawAltitude", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rawUndulation", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rawUndulationModel");
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rawVerticalAccuracy", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "signalEnvironment");
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "type");
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 52));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "undulationModel");
  if ((*((_DWORD *)this + 55) & 0x100000) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 21));
LABEL_34:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionLocation::readFrom(CMMsl::MotionLocation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_190;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 55) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 2u:
        *((_DWORD *)this + 55) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 3u:
        *((_DWORD *)this + 55) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 4u:
        *((_DWORD *)this + 55) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 5u:
        *((_DWORD *)this + 55) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 6u:
        *((_DWORD *)this + 55) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 7u:
        *((_DWORD *)this + 55) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 8u:
        *((_DWORD *)this + 55) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 9u:
        *((_DWORD *)this + 55) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0xAu:
        *((_DWORD *)this + 55) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0xBu:
        *((_DWORD *)this + 55) |= 0x10000000u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_199;
            }
            unint64_t v60 = v20++;
            char v61 = *(unsigned char *)(v21 + v60);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_198:
              unint64_t v2 = v60 + 1;
              goto LABEL_199;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_198;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_199;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_199:
        *((_DWORD *)this + 51) = v24;
        break;
      case 0xCu:
        *((_DWORD *)this + 55) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0xDu:
        *((_DWORD *)this + 55) |= 0x20000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_82;
      case 0xEu:
        *((_DWORD *)this + 55) |= 0x40000000u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_204;
            }
            unint64_t v64 = v26++;
            char v65 = *(unsigned char *)(v27 + v64);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            BOOL v14 = v63++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_203:
              unint64_t v2 = v64 + 1;
              goto LABEL_204;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_203;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_204;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_204:
        *((_DWORD *)this + 53) = v30;
        break;
      case 0xFu:
        *((_DWORD *)this + 55) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_82;
      case 0x10u:
        *((_DWORD *)this + 55) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_82;
      case 0x11u:
        *((_DWORD *)this + 55) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_82:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_189;
      case 0x12u:
        *((_DWORD *)this + 55) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x13u:
        *((_DWORD *)this + 55) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x14u:
        *((_DWORD *)this + 55) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x15u:
        *((_DWORD *)this + 55) |= 0x2000000u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_209;
            }
            unint64_t v68 = v32++;
            char v69 = *(unsigned char *)(v33 + v68);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v69 & 0x7F) << v66;
            if ((v69 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            BOOL v14 = v67++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_208:
              unint64_t v2 = v68 + 1;
              goto LABEL_209;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_208;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_209;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_209:
        *((_DWORD *)this + 48) = v36;
        break;
      case 0x16u:
        *((_DWORD *)this + 55) |= 0x8000000u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_214;
            }
            unint64_t v72 = v38++;
            char v73 = *(unsigned char *)(v39 + v72);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v73 & 0x7F) << v70;
            if ((v73 & 0x80) == 0) {
              break;
            }
            v70 += 7;
            BOOL v14 = v71++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_213:
              unint64_t v2 = v72 + 1;
              goto LABEL_214;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_213;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_214;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_214:
        *((_DWORD *)this + 50) = v42;
        break;
      case 0x17u:
        *((_DWORD *)this + 55) |= 0x1000000u;
        unint64_t v44 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v45 = *(void *)a2;
        if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
        {
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v48 = 0;
          if (v2 <= v44) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v44)
            {
              LODWORD(v48) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_219;
            }
            unint64_t v76 = v44++;
            char v77 = *(unsigned char *)(v45 + v76);
            *((void *)a2 + 1) = v44;
            v48 |= (unint64_t)(v77 & 0x7F) << v74;
            if ((v77 & 0x80) == 0) {
              break;
            }
            v74 += 7;
            BOOL v14 = v75++ > 8;
            if (v14)
            {
              LODWORD(v48) = 0;
LABEL_218:
              unint64_t v2 = v76 + 1;
              goto LABEL_219;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v48) = 0;
          }
          goto LABEL_218;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        do
        {
          unint64_t v2 = v44 + 1;
          *((void *)a2 + 1) = v44 + 1;
          char v49 = *(unsigned char *)(v45 + v44);
          v48 |= (unint64_t)(v49 & 0x7F) << v46;
          if ((v49 & 0x80) == 0) {
            goto LABEL_219;
          }
          v46 += 7;
          unint64_t v44 = v2;
          BOOL v14 = v47++ > 8;
        }
        while (!v14);
        LODWORD(v48) = 0;
LABEL_219:
        *((_DWORD *)this + 47) = v48;
        break;
      case 0x18u:
        *((_DWORD *)this + 55) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x19u:
        *((_DWORD *)this + 55) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x1Au:
        *((_DWORD *)this + 55) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x1Bu:
        *((_DWORD *)this + 55) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x1Cu:
        *((_DWORD *)this + 55) |= 0x80000000;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v51 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v50 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v51 = v50 != 0;
        }
        *((unsigned char *)this + 216) = v51;
        break;
      case 0x1Du:
        *((_DWORD *)this + 55) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x1Eu:
        *((_DWORD *)this + 55) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_135;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_188;
      case 0x1Fu:
        *((_DWORD *)this + 55) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
LABEL_188:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_189:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_135:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x20u:
        *((_DWORD *)this + 55) |= 0x4000000u;
        unint64_t v52 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v53 = *(void *)a2;
        if (v52 > 0xFFFFFFFFFFFFFFF5 || v52 + 10 > v2)
        {
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v56 = 0;
          if (v2 <= v52) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v52)
            {
              LODWORD(v56) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_224;
            }
            unint64_t v80 = v52++;
            char v81 = *(unsigned char *)(v53 + v80);
            *((void *)a2 + 1) = v52;
            v56 |= (unint64_t)(v81 & 0x7F) << v78;
            if ((v81 & 0x80) == 0) {
              break;
            }
            v78 += 7;
            BOOL v14 = v79++ > 8;
            if (v14)
            {
              LODWORD(v56) = 0;
LABEL_223:
              unint64_t v2 = v80 + 1;
              goto LABEL_224;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v56) = 0;
          }
          goto LABEL_223;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        do
        {
          unint64_t v2 = v52 + 1;
          *((void *)a2 + 1) = v52 + 1;
          char v57 = *(unsigned char *)(v53 + v52);
          v56 |= (unint64_t)(v57 & 0x7F) << v54;
          if ((v57 & 0x80) == 0) {
            goto LABEL_224;
          }
          v54 += 7;
          unint64_t v52 = v2;
          BOOL v14 = v55++ > 8;
        }
        while (!v14);
        LODWORD(v56) = 0;
LABEL_224:
        *((_DWORD *)this + 49) = v56;
        break;
      default:
        goto LABEL_19;
    }
LABEL_190:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 220);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152));
    int v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 208));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 180));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    this = PB::Writer::write(a2, *(double *)(v3 + 112));
    if ((*(_DWORD *)(v3 + 220) & 0x4000000) == 0) {
      return this;
    }
    goto LABEL_65;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x4000000) == 0) {
    return this;
  }
LABEL_65:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::MotionLocation::hash_value(CMMsl::MotionLocation *this)
{
  int v1 = *((_DWORD *)this + 55);
  if ((v1 & 0x40000) == 0)
  {
    double v39 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_102:
    uint64_t v2 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_7;
    }
LABEL_103:
    double v43 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_10;
    }
LABEL_104:
    double v42 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_13;
    }
LABEL_105:
    double v41 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_16;
    }
LABEL_106:
    double v40 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_19;
    }
LABEL_107:
    uint64_t v7 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_23;
    }
LABEL_108:
    uint64_t v8 = 0;
    if (v1) {
      goto LABEL_27;
    }
LABEL_109:
    uint64_t v9 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_31;
    }
LABEL_110:
    uint64_t v10 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_111;
  }
  double v37 = *((double *)this + 19);
  if (v37 == 0.0) {
    double v37 = 0.0;
  }
  double v39 = v37;
  if ((v1 & 0x100) == 0) {
    goto LABEL_102;
  }
LABEL_3:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 9);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_103;
  }
LABEL_7:
  double v3 = *((double *)this + 10);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v43 = v3;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_104;
  }
LABEL_10:
  double v4 = *((double *)this + 17);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  double v42 = v4;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_105;
  }
LABEL_13:
  double v5 = *((double *)this + 18);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v41 = v5;
  if ((v1 & 0x80) == 0) {
    goto LABEL_106;
  }
LABEL_16:
  double v6 = *((double *)this + 8);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v40 = v6;
  if ((v1 & 2) == 0) {
    goto LABEL_107;
  }
LABEL_19:
  if (*((double *)this + 2) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 2);
  }
  if ((v1 & 4) == 0) {
    goto LABEL_108;
  }
LABEL_23:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 3);
  }
  if ((v1 & 1) == 0) {
    goto LABEL_109;
  }
LABEL_27:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 1);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_110;
  }
LABEL_31:
  if (*((double *)this + 21) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 21);
  }
  if ((v1 & 0x10000000) != 0)
  {
LABEL_35:
    uint64_t v11 = *((unsigned int *)this + 51);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_36;
    }
LABEL_112:
    uint64_t v12 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_40;
    }
LABEL_113:
    uint64_t v14 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_114;
  }
LABEL_111:
  uint64_t v11 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_112;
  }
LABEL_36:
  if (*((double *)this + 20) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 20);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_113;
  }
LABEL_40:
  float v13 = *((float *)this + 52);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = LODWORD(v13);
  }
  if ((v1 & 0x40000000) != 0)
  {
LABEL_44:
    uint64_t v15 = *((unsigned int *)this + 53);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_45;
    }
LABEL_115:
    uint64_t v17 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_49;
    }
LABEL_116:
    uint64_t v19 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_53;
    }
LABEL_117:
    uint64_t v21 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_57;
    }
LABEL_118:
    uint64_t v22 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_61;
    }
LABEL_119:
    uint64_t v23 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_65;
    }
LABEL_120:
    uint64_t v24 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_69;
    }
    goto LABEL_121;
  }
LABEL_114:
  uint64_t v15 = 0;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_115;
  }
LABEL_45:
  float v16 = *((float *)this + 44);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_116;
  }
LABEL_49:
  float v18 = *((float *)this + 46);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_117;
  }
LABEL_53:
  float v20 = *((float *)this + 45);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_118;
  }
LABEL_57:
  if (*((double *)this + 12) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 12);
  }
  if ((v1 & 8) == 0) {
    goto LABEL_119;
  }
LABEL_61:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *((void *)this + 4);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_120;
  }
LABEL_65:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 5);
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_69:
    uint64_t v25 = *((unsigned int *)this + 48);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_70;
    }
    goto LABEL_122;
  }
LABEL_121:
  uint64_t v25 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_70:
    uint64_t v26 = *((unsigned int *)this + 50);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_71;
    }
    goto LABEL_123;
  }
LABEL_122:
  uint64_t v26 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_71:
    uint64_t v27 = *((unsigned int *)this + 47);
    if ((v1 & 0x20) != 0) {
      goto LABEL_72;
    }
LABEL_124:
    uint64_t v28 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_76;
    }
LABEL_125:
    uint64_t v29 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_80;
    }
LABEL_126:
    uint64_t v30 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_84;
    }
LABEL_127:
    uint64_t v31 = 0;
    if (v1 < 0) {
      goto LABEL_88;
    }
    goto LABEL_128;
  }
LABEL_123:
  uint64_t v27 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_124;
  }
LABEL_72:
  if (*((double *)this + 6) == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *((void *)this + 6);
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_125;
  }
LABEL_76:
  if (*((double *)this + 7) == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = *((void *)this + 7);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_126;
  }
LABEL_80:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *((void *)this + 16);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_127;
  }
LABEL_84:
  if (*((double *)this + 11) == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *((void *)this + 11);
  }
  if (v1 < 0)
  {
LABEL_88:
    uint64_t v32 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_89;
    }
LABEL_129:
    double v33 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_92;
    }
LABEL_130:
    double v34 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_95;
    }
    goto LABEL_131;
  }
LABEL_128:
  uint64_t v32 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_129;
  }
LABEL_89:
  double v33 = *((double *)this + 13);
  if (v33 == 0.0) {
    double v33 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_130;
  }
LABEL_92:
  double v34 = *((double *)this + 15);
  if (v34 == 0.0) {
    double v34 = 0.0;
  }
  if ((v1 & 0x2000) != 0)
  {
LABEL_95:
    double v35 = *((double *)this + 14);
    if (v35 == 0.0) {
      double v35 = 0.0;
    }
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_98;
    }
LABEL_132:
    uint64_t v36 = 0;
    return v2 ^ *(void *)&v39 ^ *(void *)&v43 ^ *(void *)&v42 ^ *(void *)&v41 ^ *(void *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(void *)&v33 ^ *(void *)&v34 ^ *(void *)&v35 ^ v36;
  }
LABEL_131:
  double v35 = 0.0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_132;
  }
LABEL_98:
  uint64_t v36 = *((unsigned int *)this + 49);
  return v2 ^ *(void *)&v39 ^ *(void *)&v43 ^ *(void *)&v42 ^ *(void *)&v41 ^ *(void *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(void *)&v33 ^ *(void *)&v34 ^ *(void *)&v35 ^ v36;
}

void CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  *(void *)this = &unk_270643518;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::MotionLoiAltitudeData *CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(char **this, char **a2)
{
  *this = (char *)&unk_270643518;
  *(_OWORD *)(this + 1) = 0u;
  double v3 = this + 1;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  if (this != a2)
  {
    sub_2572C73EC(v3, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2572C73EC(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
  }
  return (CMMsl::MotionLoiAltitudeData *)this;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, char **a2)
{
  if ((char **)a1 != a2)
  {
    CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v3;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)&v7);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::MotionLoiAltitudeData *a2, CMMsl::MotionLoiAltitudeData *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643518;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

{
  uint64_t v4;

  *(void *)a1 = &unk_270643518;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v11 = &unk_270643518;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    long long v12 = v7;
    long long v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v6;
    *(void *)(a1 + 48) = v5;
    long long v14 = v9;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)&v11);
  }
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::formatText(CMMsl::MotionLoiAltitudeData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "loiAltitude", v7);
  }
  long long v8 = (double *)*((void *)this + 4);
  long long v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "loiVerticalUncertainty", v10);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::MotionLoiAltitudeData::readFrom(CMMsl::MotionLoiAltitudeData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_47;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_47;
        }
      }
LABEL_20:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if (v19 != 2)
        {
          unint64_t v52 = (char *)*((void *)this + 5);
          unint64_t v51 = *((void *)this + 6);
          if ((unint64_t)v52 >= v51)
          {
            unsigned int v59 = (char *)*((void *)this + 4);
            uint64_t v60 = (v52 - v59) >> 3;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61) {
LABEL_119:
            }
              sub_2570AFD0C();
            uint64_t v62 = v51 - (void)v59;
            if (v62 >> 2 > v61) {
              unint64_t v61 = v62 >> 2;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63)
            {
              unint64_t v63 = (unint64_t)sub_2572C7528(v63);
              unsigned int v59 = (char *)*((void *)this + 4);
              unint64_t v52 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v64 = 0;
            }
            unsigned int v67 = (void *)(v63 + 8 * v60);
            *unsigned int v67 = 0;
            int v50 = v67 + 1;
            while (v52 != v59)
            {
              uint64_t v68 = *((void *)v52 - 1);
              v52 -= 8;
              *--unsigned int v67 = v68;
            }
            *((void *)this + 4) = v67;
            *((void *)this + 5) = v50;
            *((void *)this + 6) = v63 + 8 * v64;
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(void *)unint64_t v52 = 0;
            int v50 = v52 + 8;
          }
          *((void *)this + 5) = v50;
          goto LABEL_111;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v35 = *((void *)a2 + 2);
        while (v34 < v35 && !*((unsigned char *)a2 + 24))
        {
          double v37 = (char *)*((void *)this + 5);
          unint64_t v36 = *((void *)this + 6);
          if ((unint64_t)v37 >= v36)
          {
            double v39 = (char *)*((void *)this + 4);
            uint64_t v40 = (v37 - v39) >> 3;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61) {
              goto LABEL_119;
            }
            uint64_t v42 = v36 - (void)v39;
            if (v42 >> 2 > v41) {
              unint64_t v41 = v42 >> 2;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              unint64_t v43 = (unint64_t)sub_2572C7528(v43);
              double v39 = (char *)*((void *)this + 4);
              double v37 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v44 = 0;
            }
            uint64_t v45 = (void *)(v43 + 8 * v40);
            *uint64_t v45 = 0;
            unint64_t v38 = v45 + 1;
            while (v37 != v39)
            {
              uint64_t v46 = *((void *)v37 - 1);
              v37 -= 8;
              *--uint64_t v45 = v46;
            }
            *((void *)this + 4) = v45;
            *((void *)this + 5) = v38;
            *((void *)this + 6) = v43 + 8 * v44;
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(void *)double v37 = 0;
            unint64_t v38 = v37 + 8;
          }
          *((void *)this + 5) = v38;
          unint64_t v47 = *((void *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((void *)a2 + 2))
          {
LABEL_79:
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v38 - 1) = *(void *)(*(void *)a2 + v47);
          unint64_t v35 = *((void *)a2 + 2);
          unint64_t v34 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v34;
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_47:
          if ((PB::Reader::skip(a2) & 1) == 0) {
            return 0;
          }
          goto LABEL_48;
        }
        if (v19 != 2)
        {
          char v49 = (char *)*((void *)this + 2);
          unint64_t v48 = *((void *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            uint64_t v53 = (char *)*((void *)this + 1);
            uint64_t v54 = (v49 - v53) >> 3;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 61) {
              goto LABEL_119;
            }
            uint64_t v56 = v48 - (void)v53;
            if (v56 >> 2 > v55) {
              unint64_t v55 = v56 >> 2;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              unint64_t v57 = (unint64_t)sub_2572C7528(v57);
              uint64_t v53 = (char *)*((void *)this + 1);
              char v49 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v58 = 0;
            }
            char v65 = (void *)(v57 + 8 * v54);
            *char v65 = 0;
            int v50 = v65 + 1;
            while (v49 != v53)
            {
              uint64_t v66 = *((void *)v49 - 1);
              v49 -= 8;
              *--char v65 = v66;
            }
            *((void *)this + 1) = v65;
            *((void *)this + 2) = v50;
            *((void *)this + 3) = v57 + 8 * v58;
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(void *)char v49 = 0;
            int v50 = v49 + 8;
          }
          *((void *)this + 2) = v50;
LABEL_111:
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *((void *)a2 + 2))
          {
            *(v50 - 1) = *(void *)(*(void *)a2 + v69);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_48;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        while (v20 < v21 && !*((unsigned char *)a2 + 24))
        {
          uint64_t v23 = (char *)*((void *)this + 2);
          unint64_t v22 = *((void *)this + 3);
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v25 = (char *)*((void *)this + 1);
            uint64_t v26 = (v23 - v25) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              goto LABEL_119;
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              unint64_t v29 = (unint64_t)sub_2572C7528(v29);
              uint64_t v25 = (char *)*((void *)this + 1);
              uint64_t v23 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v30 = 0;
            }
            uint64_t v31 = (void *)(v29 + 8 * v26);
            *uint64_t v31 = 0;
            uint64_t v24 = v31 + 1;
            while (v23 != v25)
            {
              uint64_t v32 = *((void *)v23 - 1);
              v23 -= 8;
              *--uint64_t v31 = v32;
            }
            *((void *)this + 1) = v31;
            *((void *)this + 2) = v24;
            *((void *)this + 3) = v29 + 8 * v30;
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
            uint64_t v24 = v23 + 8;
          }
          *((void *)this + 2) = v24;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
            goto LABEL_79;
          }
          *(v24 - 1) = *(void *)(*(void *)a2 + v33);
          unint64_t v21 = *((void *)a2 + 2);
          unint64_t v20 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v20;
        }
      }
      PB::Reader::recallMark();
LABEL_48:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiAltitudeData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(double **)(this + 8);
  uint64_t v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v8 = *(double **)(v3 + 32);
  double v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    double v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::hash_value(CMMsl::MotionLoiAltitudeData *this)
{
  uint64_t v1 = PBHashBytes();
  return PBHashBytes() ^ v1;
}

void CMMsl::MotionLoiData::~MotionLoiData(CMMsl::MotionLoiData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this, const CMMsl::MotionLoiData *a2)
{
  *(void *)this = &unk_270643550;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    __int16 v3 = 64;
    *(_WORD *)(this + 92) = 64;
    *(void *)(this + 56) = v4;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 48) = v5;
    __int16 v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 8) = v7;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v9;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 72) = v10;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v11 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 64) = v11;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 16) = v12;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v13;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_26:
    char v15 = *((unsigned char *)a2 + 88);
    *(_WORD *)(this + 92) = v3 | 0x800;
    *(unsigned char *)(this + 88) = v15;
    return this;
  }
LABEL_25:
  uint64_t v14 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 46) & 0x800) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *a1, const CMMsl::MotionLoiData *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionLoiData::MotionLoiData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLoiData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLoiData *a2, CMMsl::MotionLoiData *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v12;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v3) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v3;
  return result;
}

double CMMsl::MotionLoiData::MotionLoiData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643550;
  *(_DWORD *)(a1 + 84) = -1;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionLoiData::MotionLoiData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLoiData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionLoiData::formatText(CMMsl::MotionLoiData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 46);
  if (v5)
  {
    PB::TextFormatter::format(a2, "arrivalDate", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 46);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((*((_WORD *)this + 46) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "confidenceOfGeoLocation", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "departureDate", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "distanceToLoi", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "hashedLatLong");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "type");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "uncertaintyOfGeoLocation", *((double *)this + 8));
  if ((*((_WORD *)this + 46) & 0x100) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "withinDistance", *((double *)this + 9));
LABEL_14:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionLoiData::readFrom(CMMsl::MotionLoiData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_94;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 46) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 2u:
        *((_WORD *)this + 46) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 3u:
        *((_WORD *)this + 46) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 4u:
        *((_WORD *)this + 46) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 5u:
        *((_WORD *)this + 46) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 6u:
        *((_WORD *)this + 46) |= 0x200u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v36 = v20++;
            char v37 = *(unsigned char *)(v21 + v36);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_87:
              unint64_t v2 = v36 + 1;
              goto LABEL_88;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_87;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_88;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_88:
        *((_DWORD *)this + 20) = v24;
        break;
      case 7u:
        *((_WORD *)this + 46) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 8u:
        *((_WORD *)this + 46) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 9u:
        *((_WORD *)this + 46) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_83;
      case 0xAu:
        *((_WORD *)this + 46) |= 0x400u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_93;
            }
            unint64_t v40 = v26++;
            char v41 = *(unsigned char *)(v27 + v40);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_92:
              unint64_t v2 = v40 + 1;
              goto LABEL_93;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_92;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_93;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_93:
        *((_DWORD *)this + 21) = v30;
        break;
      case 0xBu:
        *((_WORD *)this + 46) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_83:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xCu:
        *((_WORD *)this + 46) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 88) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
    if ((*(_WORD *)(v3 + 92) & 0x800) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_25:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::MotionLoiData::hash_value(CMMsl::MotionLoiData *this)
{
  __int16 v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if (v1) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x200) != 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x200) != 0)
  {
LABEL_15:
    uint64_t v7 = *((unsigned int *)this + 20);
    if ((*((_WORD *)this + 46) & 0x100) != 0) {
      goto LABEL_16;
    }
LABEL_38:
    double v8 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_19;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_40:
    double v10 = 0.0;
    if ((*((_WORD *)this + 46) & 0x400) != 0) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 46) & 0x100) == 0) {
    goto LABEL_38;
  }
LABEL_16:
  double v8 = *((double *)this + 9);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_39;
  }
LABEL_19:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_40;
  }
LABEL_22:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    uint64_t v11 = *((int *)this + 21);
    if ((v1 & 8) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_26:
    double v12 = *((double *)this + 4);
    if (v12 == 0.0) {
      double v12 = 0.0;
    }
    if ((*((_WORD *)this + 46) & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v13 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ *(void *)&v12 ^ v13;
  }
LABEL_42:
  double v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  uint64_t v13 = *((unsigned __int8 *)this + 88);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ *(void *)&v12 ^ v13;
}

void CMMsl::MotionStateUpdate::~MotionStateUpdate(CMMsl::MotionStateUpdate *this)
{
  *(void *)this = &unk_270643588;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionStateUpdate::~MotionStateUpdate(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t this, const CMMsl::MotionStateUpdate *a2)
{
  *(void *)this = &unk_270643588;
  *(void *)(this + 32) = 0;
  *(void *)(this + 192) = 0;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x8000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 25);
    uint64_t v3 = 0x8000;
    *(void *)(this + 192) = 0x8000;
    *(_DWORD *)(this + 100) = v4;
    uint64_t v2 = *((void *)a2 + 24);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 18);
    v3 |= 0x100uLL;
    *(void *)(this + 192) = v3;
    *(_DWORD *)(this + 72) = v5;
    uint64_t v2 = *((void *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    int v9 = *((_DWORD *)a2 + 26);
    v3 |= 0x10000uLL;
    *(void *)(this + 192) = v3;
    *(_DWORD *)(this + 104) = v9;
    uint64_t v2 = *((void *)a2 + 24);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_49;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  int v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 108) = v10;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x800uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 84) = v11;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v12 = *((_DWORD *)a2 + 37);
  v3 |= 0x8000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 148) = v12;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v13 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 92) = v13;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 88) = v14;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v15 = *((_DWORD *)a2 + 34);
  v3 |= 0x1000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 136) = v15;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v16 = *((void *)a2 + 5);
  v3 |= 8uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 40) = v16;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v17 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 8) = v17;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v18 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 24) = v18;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v19 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 16) = v19;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v20 = *((_DWORD *)a2 + 17);
  v3 |= 0x80uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 68) = v20;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v21 = *((_DWORD *)a2 + 39);
  v3 |= 0x20000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 156) = v21;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v22 = *((_DWORD *)a2 + 36);
  v3 |= 0x4000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 144) = v22;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v23 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 96) = v23;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x400000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v24 = *((_DWORD *)a2 + 32);
  v3 |= 0x400000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 128) = v24;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v25 = *((_DWORD *)a2 + 31);
  v3 |= 0x200000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 124) = v25;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v26 = *((_DWORD *)a2 + 33);
  v3 |= 0x800000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 132) = v26;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v27 = *((void *)a2 + 6);
  v3 |= 0x10uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 48) = v27;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v28 = *((_DWORD *)a2 + 45);
  v3 |= 0x800000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 180) = v28;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v29 = *((_DWORD *)a2 + 40);
  v3 |= 0x40000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 160) = v29;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x100000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v30 = *((_DWORD *)a2 + 30);
  v3 |= 0x100000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 120) = v30;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_69:
  int v31 = *((_DWORD *)a2 + 29);
  v3 |= 0x80000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 116) = v31;
  if ((*((void *)a2 + 24) & 0x40000) != 0)
  {
LABEL_30:
    int v6 = *((_DWORD *)a2 + 28);
    *(void *)(this + 192) = v3 | 0x40000;
    *(_DWORD *)(this + 112) = v6;
  }
LABEL_31:
  if (*((void *)a2 + 4)) {
    operator new();
  }
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x400) != 0)
  {
    int v32 = *((_DWORD *)a2 + 20);
    *(void *)(this + 192) |= 0x400uLL;
    *(_DWORD *)(this + 80) = v32;
    uint64_t v7 = *((void *)a2 + 24);
    if ((v7 & 0x200) == 0)
    {
LABEL_35:
      if ((v7 & 0x2000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_73;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  int v33 = *((_DWORD *)a2 + 19);
  *(void *)(this + 192) |= 0x200uLL;
  *(_DWORD *)(this + 76) = v33;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x1000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v34 = *((_DWORD *)a2 + 35);
  *(void *)(this + 192) |= 0x2000000uLL;
  *(_DWORD *)(this + 140) = v34;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v7 & 0x20) == 0) {
      goto LABEL_38;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v35 = *((_DWORD *)a2 + 46);
  *(void *)(this + 192) |= 0x1000000000uLL;
  *(_DWORD *)(this + 184) = v35;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v36 = *((void *)a2 + 7);
  *(void *)(this + 192) |= 0x20uLL;
  *(void *)(this + 56) = v36;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v37 = *((_DWORD *)a2 + 38);
  *(void *)(this + 192) |= 0x10000000uLL;
  *(_DWORD *)(this + 152) = v37;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x40) == 0) {
      goto LABEL_41;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v38 = *((_DWORD *)a2 + 47);
  *(void *)(this + 192) |= 0x2000000000uLL;
  *(_DWORD *)(this + 188) = v38;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x40) == 0)
  {
LABEL_41:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v39 = *((_DWORD *)a2 + 16);
  *(void *)(this + 192) |= 0x40uLL;
  *(_DWORD *)(this + 64) = v39;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v40 = *((_DWORD *)a2 + 41);
  *(void *)(this + 192) |= 0x80000000uLL;
  *(_DWORD *)(this + 164) = v40;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x200000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v41 = *((_DWORD *)a2 + 42);
  *(void *)(this + 192) |= 0x100000000uLL;
  *(_DWORD *)(this + 168) = v41;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_81:
  int v42 = *((_DWORD *)a2 + 43);
  *(void *)(this + 192) |= 0x200000000uLL;
  *(_DWORD *)(this + 172) = v42;
  if ((*((void *)a2 + 24) & 0x400000000) == 0) {
    return this;
  }
LABEL_45:
  int v8 = *((_DWORD *)a2 + 44);
  *(void *)(this + 192) |= 0x400000000uLL;
  *(_DWORD *)(this + 176) = v8;
  return this;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, const CMMsl::MotionStateUpdate *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v5, v3);
    CMMsl::MotionStateUpdate::~MotionStateUpdate((CMMsl::MotionStateUpdate *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionStateUpdate *a2, CMMsl::MotionStateUpdate *a3)
{
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v6;
  *((void *)a2 + 3) = v4;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LODWORD(v7) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  LODWORD(v8) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v8;
  LODWORD(v8) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v8;
  LODWORD(v8) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  LODWORD(v8) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  LODWORD(v8) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  LODWORD(v10) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v10;
  LODWORD(v10) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  LODWORD(v10) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v10;
  LODWORD(v10) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  *((_DWORD *)a2 + 28) = v8;
  *((void *)a2 + 4) = v5;
  LODWORD(v10) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v10;
  LODWORD(v8) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v8;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  LODWORD(v11) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v11;
  LODWORD(v11) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v11;
  LODWORD(v11) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  LODWORD(v10) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v10;
  LODWORD(v10) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v10;
  float result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v11) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v11;
  return result;
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643588;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  return a1;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v5, v3);
    CMMsl::MotionStateUpdate::~MotionStateUpdate((CMMsl::MotionStateUpdate *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionStateUpdate::formatText(CMMsl::MotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "alsLux");
    uint64_t v5 = *((void *)this + 24);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_48;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "caltype");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "confidence");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 19));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 20));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "exitState");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "hidTimestamp", *((double *)this + 1));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "isMoving");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "isVehicular");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "machineFrequency", *((float *)this + 24));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "motionType");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "mounted");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "mountedConfidence");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "now");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rawConfidence");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rawIsVehicular");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rawMotionType");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rowStrokeAmplitude", *((float *)this + 31));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rowStrokeFrequency", *((float *)this + 32));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rowStrokePower", *((float *)this + 33));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "seq");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 35));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "standing");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "startTime");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "turn");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "typeYouth");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vectorMagnitude", *((float *)this + 39));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vehicleExitState");
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 41));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 42));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 43));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "vehicleType");
  if ((*((void *)this + 24) & 0x800000000) != 0) {
LABEL_34:
  }
    PB::TextFormatter::format(a2, "vehicularConfidence");
LABEL_35:
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "vehicularFlags");
  }
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "wallStartTime", *((double *)this + 5));
    uint64_t v7 = *((void *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_81;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(a2, "workoutDetectionTime");
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0) {
      goto LABEL_41;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "workoutDetectionType");
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "workoutEscalationTime");
  if ((*((void *)this + 24) & 0x2000000000) != 0) {
LABEL_42:
  }
    PB::TextFormatter::format(a2, "youthClassificationReason");
LABEL_43:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionStateUpdate::readFrom(CMMsl::MotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((void *)this + 24) |= 0x8000uLL;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_448;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_249:
          LODWORD(v26) = 0;
          goto LABEL_448;
        }
        char v235 = 0;
        unsigned int v236 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            LODWORD(v26) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v237 = v21 + 1;
            char v238 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v237;
            v26 |= (unint64_t)(v238 & 0x7F) << v235;
            if (v238 < 0)
            {
              v235 += 7;
              unint64_t v21 = v237;
              BOOL v14 = v236++ > 8;
              if (v14) {
                goto LABEL_249;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v26) = 0;
            }
          }
          break;
        }
LABEL_448:
        *((_DWORD *)this + 25) = v26;
        goto LABEL_20;
      case 2u:
        *((void *)this + 24) |= 0x100uLL;
        unint64_t v29 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)a2 + 1) = v29 + 1;
            char v36 = *(unsigned char *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_451;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }
          while (!v14);
LABEL_256:
          LODWORD(v34) = 0;
          goto LABEL_451;
        }
        char v239 = 0;
        unsigned int v240 = 0;
        uint64_t v34 = 0;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v241 = v29 + 1;
            char v242 = *(unsigned char *)(v31 + v29);
            *((void *)a2 + 1) = v241;
            v34 |= (unint64_t)(v242 & 0x7F) << v239;
            if (v242 < 0)
            {
              v239 += 7;
              unint64_t v29 = v241;
              BOOL v14 = v240++ > 8;
              if (v14) {
                goto LABEL_256;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v34) = 0;
            }
          }
          break;
        }
LABEL_451:
        *((_DWORD *)this + 18) = v34;
        goto LABEL_20;
      case 3u:
        *((void *)this + 24) |= 0x10000uLL;
        unint64_t v37 = *((void *)a2 + 1);
        unint64_t v38 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)a2 + 1) = v37 + 1;
            char v44 = *(unsigned char *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_454;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }
          while (!v14);
LABEL_263:
          LODWORD(v42) = 0;
          goto LABEL_454;
        }
        char v243 = 0;
        unsigned int v244 = 0;
        uint64_t v42 = 0;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v245 = v37 + 1;
            char v246 = *(unsigned char *)(v39 + v37);
            *((void *)a2 + 1) = v245;
            v42 |= (unint64_t)(v246 & 0x7F) << v243;
            if (v246 < 0)
            {
              v243 += 7;
              unint64_t v37 = v245;
              BOOL v14 = v244++ > 8;
              if (v14) {
                goto LABEL_263;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v42) = 0;
            }
          }
          break;
        }
LABEL_454:
        *((_DWORD *)this + 26) = v42;
        goto LABEL_20;
      case 4u:
        *((void *)this + 24) |= 0x20000uLL;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v46 = *((void *)a2 + 2);
        uint64_t v47 = *(void *)a2;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          do
          {
            unint64_t v51 = v45 + 1;
            *((void *)a2 + 1) = v45 + 1;
            char v52 = *(unsigned char *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0) {
              goto LABEL_457;
            }
            v48 += 7;
            unint64_t v45 = v51;
            BOOL v14 = v49++ > 8;
          }
          while (!v14);
LABEL_270:
          LODWORD(v50) = 0;
          goto LABEL_457;
        }
        char v247 = 0;
        unsigned int v248 = 0;
        uint64_t v50 = 0;
        if (v46 <= v45) {
          unint64_t v46 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v249 = v45 + 1;
            char v250 = *(unsigned char *)(v47 + v45);
            *((void *)a2 + 1) = v249;
            v50 |= (unint64_t)(v250 & 0x7F) << v247;
            if (v250 < 0)
            {
              v247 += 7;
              unint64_t v45 = v249;
              BOOL v14 = v248++ > 8;
              if (v14) {
                goto LABEL_270;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v50) = 0;
            }
          }
          break;
        }
LABEL_457:
        *((_DWORD *)this + 27) = v50;
        goto LABEL_20;
      case 5u:
        *((void *)this + 24) |= 0x800uLL;
        unint64_t v53 = *((void *)a2 + 1);
        unint64_t v54 = *((void *)a2 + 2);
        uint64_t v55 = *(void *)a2;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v58 = 0;
          do
          {
            unint64_t v59 = v53 + 1;
            *((void *)a2 + 1) = v53 + 1;
            char v60 = *(unsigned char *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0) {
              goto LABEL_460;
            }
            v56 += 7;
            unint64_t v53 = v59;
            BOOL v14 = v57++ > 8;
          }
          while (!v14);
LABEL_277:
          LODWORD(v58) = 0;
          goto LABEL_460;
        }
        char v251 = 0;
        unsigned int v252 = 0;
        uint64_t v58 = 0;
        if (v54 <= v53) {
          unint64_t v54 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v253 = v53 + 1;
            char v254 = *(unsigned char *)(v55 + v53);
            *((void *)a2 + 1) = v253;
            v58 |= (unint64_t)(v254 & 0x7F) << v251;
            if (v254 < 0)
            {
              v251 += 7;
              unint64_t v53 = v253;
              BOOL v14 = v252++ > 8;
              if (v14) {
                goto LABEL_277;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v58) = 0;
            }
          }
          break;
        }
LABEL_460:
        *((_DWORD *)this + 21) = v58;
        goto LABEL_20;
      case 6u:
        *((void *)this + 24) |= 0x8000000uLL;
        unint64_t v61 = *((void *)a2 + 1);
        unint64_t v62 = *((void *)a2 + 2);
        uint64_t v63 = *(void *)a2;
        if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v66 = 0;
          do
          {
            unint64_t v67 = v61 + 1;
            *((void *)a2 + 1) = v61 + 1;
            char v68 = *(unsigned char *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0) {
              goto LABEL_463;
            }
            v64 += 7;
            unint64_t v61 = v67;
            BOOL v14 = v65++ > 8;
          }
          while (!v14);
LABEL_284:
          LODWORD(v66) = 0;
          goto LABEL_463;
        }
        char v255 = 0;
        unsigned int v256 = 0;
        uint64_t v66 = 0;
        if (v62 <= v61) {
          unint64_t v62 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v257 = v61 + 1;
            char v258 = *(unsigned char *)(v63 + v61);
            *((void *)a2 + 1) = v257;
            v66 |= (unint64_t)(v258 & 0x7F) << v255;
            if (v258 < 0)
            {
              v255 += 7;
              unint64_t v61 = v257;
              BOOL v14 = v256++ > 8;
              if (v14) {
                goto LABEL_284;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v66) = 0;
            }
          }
          break;
        }
LABEL_463:
        *((_DWORD *)this + 37) = v66;
        goto LABEL_20;
      case 7u:
        *((void *)this + 24) |= 0x2000uLL;
        unint64_t v69 = *((void *)a2 + 1);
        unint64_t v70 = *((void *)a2 + 2);
        uint64_t v71 = *(void *)a2;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v74 = 0;
          do
          {
            unint64_t v75 = v69 + 1;
            *((void *)a2 + 1) = v69 + 1;
            char v76 = *(unsigned char *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0) {
              goto LABEL_466;
            }
            v72 += 7;
            unint64_t v69 = v75;
            BOOL v14 = v73++ > 8;
          }
          while (!v14);
LABEL_291:
          LODWORD(v74) = 0;
          goto LABEL_466;
        }
        char v259 = 0;
        unsigned int v260 = 0;
        uint64_t v74 = 0;
        if (v70 <= v69) {
          unint64_t v70 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v261 = v69 + 1;
            char v262 = *(unsigned char *)(v71 + v69);
            *((void *)a2 + 1) = v261;
            v74 |= (unint64_t)(v262 & 0x7F) << v259;
            if (v262 < 0)
            {
              v259 += 7;
              unint64_t v69 = v261;
              BOOL v14 = v260++ > 8;
              if (v14) {
                goto LABEL_291;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v74) = 0;
            }
          }
          break;
        }
LABEL_466:
        *((_DWORD *)this + 23) = v74;
        goto LABEL_20;
      case 8u:
        *((void *)this + 24) |= 0x1000uLL;
        unint64_t v77 = *((void *)a2 + 1);
        unint64_t v78 = *((void *)a2 + 2);
        uint64_t v79 = *(void *)a2;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v82 = 0;
          do
          {
            unint64_t v83 = v77 + 1;
            *((void *)a2 + 1) = v77 + 1;
            char v84 = *(unsigned char *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_469;
            }
            v80 += 7;
            unint64_t v77 = v83;
            BOOL v14 = v81++ > 8;
          }
          while (!v14);
LABEL_298:
          LODWORD(v82) = 0;
          goto LABEL_469;
        }
        char v263 = 0;
        unsigned int v264 = 0;
        uint64_t v82 = 0;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v265 = v77 + 1;
            char v266 = *(unsigned char *)(v79 + v77);
            *((void *)a2 + 1) = v265;
            v82 |= (unint64_t)(v266 & 0x7F) << v263;
            if (v266 < 0)
            {
              v263 += 7;
              unint64_t v77 = v265;
              BOOL v14 = v264++ > 8;
              if (v14) {
                goto LABEL_298;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v82) = 0;
            }
          }
          break;
        }
LABEL_469:
        *((_DWORD *)this + 22) = v82;
        goto LABEL_20;
      case 9u:
        *((void *)this + 24) |= 0x1000000uLL;
        unint64_t v85 = *((void *)a2 + 1);
        unint64_t v86 = *((void *)a2 + 2);
        uint64_t v87 = *(void *)a2;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v90 = 0;
          do
          {
            unint64_t v91 = v85 + 1;
            *((void *)a2 + 1) = v85 + 1;
            char v92 = *(unsigned char *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0) {
              goto LABEL_472;
            }
            v88 += 7;
            unint64_t v85 = v91;
            BOOL v14 = v89++ > 8;
          }
          while (!v14);
LABEL_305:
          LODWORD(v90) = 0;
          goto LABEL_472;
        }
        char v267 = 0;
        unsigned int v268 = 0;
        uint64_t v90 = 0;
        if (v86 <= v85) {
          unint64_t v86 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v269 = v85 + 1;
            char v270 = *(unsigned char *)(v87 + v85);
            *((void *)a2 + 1) = v269;
            v90 |= (unint64_t)(v270 & 0x7F) << v267;
            if (v270 < 0)
            {
              v267 += 7;
              unint64_t v85 = v269;
              BOOL v14 = v268++ > 8;
              if (v14) {
                goto LABEL_305;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v90) = 0;
            }
          }
          break;
        }
LABEL_472:
        *((_DWORD *)this + 34) = v90;
        goto LABEL_20;
      case 0xAu:
        *((void *)this + 24) |= 8uLL;
        unint64_t v93 = *((void *)a2 + 1);
        if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v93);
        goto LABEL_96;
      case 0xBu:
        *((void *)this + 24) |= 1uLL;
        unint64_t v94 = *((void *)a2 + 1);
        if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v94);
LABEL_96:
        uint64_t v95 = *((void *)a2 + 1) + 8;
        goto LABEL_420;
      case 0xCu:
        *((void *)this + 24) |= 4uLL;
        unint64_t v96 = *((void *)a2 + 1);
        unint64_t v97 = *((void *)a2 + 2);
        uint64_t v98 = *(void *)a2;
        if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
        {
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v101 = 0;
          do
          {
            unint64_t v102 = v96 + 1;
            *((void *)a2 + 1) = v96 + 1;
            char v103 = *(unsigned char *)(v98 + v96);
            v101 |= (unint64_t)(v103 & 0x7F) << v99;
            if ((v103 & 0x80) == 0) {
              goto LABEL_475;
            }
            v99 += 7;
            unint64_t v96 = v102;
            BOOL v14 = v100++ > 8;
          }
          while (!v14);
LABEL_312:
          uint64_t v101 = 0;
          goto LABEL_475;
        }
        char v271 = 0;
        unsigned int v272 = 0;
        uint64_t v101 = 0;
        if (v97 <= v96) {
          unint64_t v97 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v97 == v96)
          {
            uint64_t v101 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v273 = v96 + 1;
            char v274 = *(unsigned char *)(v98 + v96);
            *((void *)a2 + 1) = v273;
            v101 |= (unint64_t)(v274 & 0x7F) << v271;
            if (v274 < 0)
            {
              v271 += 7;
              unint64_t v96 = v273;
              BOOL v14 = v272++ > 8;
              if (v14) {
                goto LABEL_312;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v101 = 0;
            }
          }
          break;
        }
LABEL_475:
        *((void *)this + 3) = v101;
        goto LABEL_20;
      case 0xDu:
        *((void *)this + 24) |= 2uLL;
        unint64_t v104 = *((void *)a2 + 1);
        unint64_t v105 = *((void *)a2 + 2);
        uint64_t v106 = *(void *)a2;
        if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
        {
          char v107 = 0;
          unsigned int v108 = 0;
          uint64_t v109 = 0;
          do
          {
            unint64_t v110 = v104 + 1;
            *((void *)a2 + 1) = v104 + 1;
            char v111 = *(unsigned char *)(v106 + v104);
            v109 |= (unint64_t)(v111 & 0x7F) << v107;
            if ((v111 & 0x80) == 0) {
              goto LABEL_478;
            }
            v107 += 7;
            unint64_t v104 = v110;
            BOOL v14 = v108++ > 8;
          }
          while (!v14);
LABEL_319:
          uint64_t v109 = 0;
          goto LABEL_478;
        }
        char v275 = 0;
        unsigned int v276 = 0;
        uint64_t v109 = 0;
        if (v105 <= v104) {
          unint64_t v105 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v105 == v104)
          {
            uint64_t v109 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v277 = v104 + 1;
            char v278 = *(unsigned char *)(v106 + v104);
            *((void *)a2 + 1) = v277;
            v109 |= (unint64_t)(v278 & 0x7F) << v275;
            if (v278 < 0)
            {
              v275 += 7;
              unint64_t v104 = v277;
              BOOL v14 = v276++ > 8;
              if (v14) {
                goto LABEL_319;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v109 = 0;
            }
          }
          break;
        }
LABEL_478:
        *((void *)this + 2) = v109;
        goto LABEL_20;
      case 0xEu:
        *((void *)this + 24) |= 0x80uLL;
        unint64_t v112 = *((void *)a2 + 1);
        unint64_t v113 = *((void *)a2 + 2);
        uint64_t v114 = *(void *)a2;
        if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
        {
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v117 = 0;
          do
          {
            unint64_t v118 = v112 + 1;
            *((void *)a2 + 1) = v112 + 1;
            char v119 = *(unsigned char *)(v114 + v112);
            v117 |= (unint64_t)(v119 & 0x7F) << v115;
            if ((v119 & 0x80) == 0) {
              goto LABEL_481;
            }
            v115 += 7;
            unint64_t v112 = v118;
            BOOL v14 = v116++ > 8;
          }
          while (!v14);
LABEL_326:
          LODWORD(v117) = 0;
          goto LABEL_481;
        }
        char v279 = 0;
        unsigned int v280 = 0;
        uint64_t v117 = 0;
        if (v113 <= v112) {
          unint64_t v113 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v113 == v112)
          {
            LODWORD(v117) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v281 = v112 + 1;
            char v282 = *(unsigned char *)(v114 + v112);
            *((void *)a2 + 1) = v281;
            v117 |= (unint64_t)(v282 & 0x7F) << v279;
            if (v282 < 0)
            {
              v279 += 7;
              unint64_t v112 = v281;
              BOOL v14 = v280++ > 8;
              if (v14) {
                goto LABEL_326;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v117) = 0;
            }
          }
          break;
        }
LABEL_481:
        *((_DWORD *)this + 17) = v117;
        goto LABEL_20;
      case 0xFu:
        *((void *)this + 24) |= 0x20000000uLL;
        unint64_t v120 = *((void *)a2 + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v120);
        goto LABEL_419;
      case 0x10u:
        *((void *)this + 24) |= 0x4000000uLL;
        unint64_t v121 = *((void *)a2 + 1);
        unint64_t v122 = *((void *)a2 + 2);
        uint64_t v123 = *(void *)a2;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          do
          {
            unint64_t v127 = v121 + 1;
            *((void *)a2 + 1) = v121 + 1;
            char v128 = *(unsigned char *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0) {
              goto LABEL_484;
            }
            v124 += 7;
            unint64_t v121 = v127;
            BOOL v14 = v125++ > 8;
          }
          while (!v14);
LABEL_333:
          LODWORD(v126) = 0;
          goto LABEL_484;
        }
        char v283 = 0;
        unsigned int v284 = 0;
        uint64_t v126 = 0;
        if (v122 <= v121) {
          unint64_t v122 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v285 = v121 + 1;
            char v286 = *(unsigned char *)(v123 + v121);
            *((void *)a2 + 1) = v285;
            v126 |= (unint64_t)(v286 & 0x7F) << v283;
            if (v286 < 0)
            {
              v283 += 7;
              unint64_t v121 = v285;
              BOOL v14 = v284++ > 8;
              if (v14) {
                goto LABEL_333;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v126) = 0;
            }
          }
          break;
        }
LABEL_484:
        *((_DWORD *)this + 36) = v126;
        goto LABEL_20;
      case 0x11u:
        *((void *)this + 24) |= 0x4000uLL;
        unint64_t v129 = *((void *)a2 + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v129);
        goto LABEL_419;
      case 0x12u:
        *((void *)this + 24) |= 0x400000uLL;
        unint64_t v130 = *((void *)a2 + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v130);
        goto LABEL_419;
      case 0x13u:
        *((void *)this + 24) |= 0x200000uLL;
        unint64_t v131 = *((void *)a2 + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v131);
        goto LABEL_419;
      case 0x14u:
        *((void *)this + 24) |= 0x800000uLL;
        unint64_t v132 = *((void *)a2 + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v132);
        goto LABEL_419;
      case 0x15u:
        *((void *)this + 24) |= 0x10uLL;
        unint64_t v133 = *((void *)a2 + 1);
        unint64_t v134 = *((void *)a2 + 2);
        uint64_t v135 = *(void *)a2;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v138 = 0;
          do
          {
            unint64_t v139 = v133 + 1;
            *((void *)a2 + 1) = v133 + 1;
            char v140 = *(unsigned char *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0) {
              goto LABEL_487;
            }
            v136 += 7;
            unint64_t v133 = v139;
            BOOL v14 = v137++ > 8;
          }
          while (!v14);
LABEL_340:
          uint64_t v138 = 0;
          goto LABEL_487;
        }
        char v287 = 0;
        unsigned int v288 = 0;
        uint64_t v138 = 0;
        if (v134 <= v133) {
          unint64_t v134 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v134 == v133)
          {
            uint64_t v138 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v289 = v133 + 1;
            char v290 = *(unsigned char *)(v135 + v133);
            *((void *)a2 + 1) = v289;
            v138 |= (unint64_t)(v290 & 0x7F) << v287;
            if (v290 < 0)
            {
              v287 += 7;
              unint64_t v133 = v289;
              BOOL v14 = v288++ > 8;
              if (v14) {
                goto LABEL_340;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v138 = 0;
            }
          }
          break;
        }
LABEL_487:
        *((void *)this + 6) = v138;
        goto LABEL_20;
      case 0x16u:
        *((void *)this + 24) |= 0x800000000uLL;
        unint64_t v141 = *((void *)a2 + 1);
        unint64_t v142 = *((void *)a2 + 2);
        uint64_t v143 = *(void *)a2;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v146 = 0;
          do
          {
            unint64_t v147 = v141 + 1;
            *((void *)a2 + 1) = v141 + 1;
            char v148 = *(unsigned char *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0) {
              goto LABEL_490;
            }
            v144 += 7;
            unint64_t v141 = v147;
            BOOL v14 = v145++ > 8;
          }
          while (!v14);
LABEL_347:
          LODWORD(v146) = 0;
          goto LABEL_490;
        }
        char v291 = 0;
        unsigned int v292 = 0;
        uint64_t v146 = 0;
        if (v142 <= v141) {
          unint64_t v142 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v293 = v141 + 1;
            char v294 = *(unsigned char *)(v143 + v141);
            *((void *)a2 + 1) = v293;
            v146 |= (unint64_t)(v294 & 0x7F) << v291;
            if (v294 < 0)
            {
              v291 += 7;
              unint64_t v141 = v293;
              BOOL v14 = v292++ > 8;
              if (v14) {
                goto LABEL_347;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v146) = 0;
            }
          }
          break;
        }
LABEL_490:
        *((_DWORD *)this + 45) = v146;
        goto LABEL_20;
      case 0x17u:
        *((void *)this + 24) |= 0x40000000uLL;
        unint64_t v149 = *((void *)a2 + 1);
        unint64_t v150 = *((void *)a2 + 2);
        uint64_t v151 = *(void *)a2;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v154 = 0;
          do
          {
            unint64_t v155 = v149 + 1;
            *((void *)a2 + 1) = v149 + 1;
            char v156 = *(unsigned char *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0) {
              goto LABEL_493;
            }
            v152 += 7;
            unint64_t v149 = v155;
            BOOL v14 = v153++ > 8;
          }
          while (!v14);
LABEL_354:
          LODWORD(v154) = 0;
          goto LABEL_493;
        }
        char v295 = 0;
        unsigned int v296 = 0;
        uint64_t v154 = 0;
        if (v150 <= v149) {
          unint64_t v150 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v297 = v149 + 1;
            char v298 = *(unsigned char *)(v151 + v149);
            *((void *)a2 + 1) = v297;
            v154 |= (unint64_t)(v298 & 0x7F) << v295;
            if (v298 < 0)
            {
              v295 += 7;
              unint64_t v149 = v297;
              BOOL v14 = v296++ > 8;
              if (v14) {
                goto LABEL_354;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v154) = 0;
            }
          }
          break;
        }
LABEL_493:
        *((_DWORD *)this + 40) = v154;
        goto LABEL_20;
      case 0x18u:
        *((void *)this + 24) |= 0x100000uLL;
        unint64_t v157 = *((void *)a2 + 1);
        unint64_t v158 = *((void *)a2 + 2);
        uint64_t v159 = *(void *)a2;
        if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
        {
          char v160 = 0;
          unsigned int v161 = 0;
          uint64_t v162 = 0;
          do
          {
            unint64_t v163 = v157 + 1;
            *((void *)a2 + 1) = v157 + 1;
            char v164 = *(unsigned char *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0) {
              goto LABEL_496;
            }
            v160 += 7;
            unint64_t v157 = v163;
            BOOL v14 = v161++ > 8;
          }
          while (!v14);
LABEL_361:
          LODWORD(v162) = 0;
          goto LABEL_496;
        }
        char v299 = 0;
        unsigned int v300 = 0;
        uint64_t v162 = 0;
        if (v158 <= v157) {
          unint64_t v158 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v301 = v157 + 1;
            char v302 = *(unsigned char *)(v159 + v157);
            *((void *)a2 + 1) = v301;
            v162 |= (unint64_t)(v302 & 0x7F) << v299;
            if (v302 < 0)
            {
              v299 += 7;
              unint64_t v157 = v301;
              BOOL v14 = v300++ > 8;
              if (v14) {
                goto LABEL_361;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v162) = 0;
            }
          }
          break;
        }
LABEL_496:
        *((_DWORD *)this + 30) = v162;
        goto LABEL_20;
      case 0x19u:
        *((void *)this + 24) |= 0x80000uLL;
        unint64_t v165 = *((void *)a2 + 1);
        unint64_t v166 = *((void *)a2 + 2);
        uint64_t v167 = *(void *)a2;
        if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
        {
          char v168 = 0;
          unsigned int v169 = 0;
          uint64_t v170 = 0;
          do
          {
            unint64_t v171 = v165 + 1;
            *((void *)a2 + 1) = v165 + 1;
            char v172 = *(unsigned char *)(v167 + v165);
            v170 |= (unint64_t)(v172 & 0x7F) << v168;
            if ((v172 & 0x80) == 0) {
              goto LABEL_499;
            }
            v168 += 7;
            unint64_t v165 = v171;
            BOOL v14 = v169++ > 8;
          }
          while (!v14);
LABEL_368:
          LODWORD(v170) = 0;
          goto LABEL_499;
        }
        char v303 = 0;
        unsigned int v304 = 0;
        uint64_t v170 = 0;
        if (v166 <= v165) {
          unint64_t v166 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v166 == v165)
          {
            LODWORD(v170) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v305 = v165 + 1;
            char v306 = *(unsigned char *)(v167 + v165);
            *((void *)a2 + 1) = v305;
            v170 |= (unint64_t)(v306 & 0x7F) << v303;
            if (v306 < 0)
            {
              v303 += 7;
              unint64_t v165 = v305;
              BOOL v14 = v304++ > 8;
              if (v14) {
                goto LABEL_368;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v170) = 0;
            }
          }
          break;
        }
LABEL_499:
        *((_DWORD *)this + 29) = v170;
        goto LABEL_20;
      case 0x1Au:
        *((void *)this + 24) |= 0x40000uLL;
        unint64_t v173 = *((void *)a2 + 1);
        unint64_t v174 = *((void *)a2 + 2);
        uint64_t v175 = *(void *)a2;
        if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
        {
          char v176 = 0;
          unsigned int v177 = 0;
          uint64_t v178 = 0;
          do
          {
            unint64_t v179 = v173 + 1;
            *((void *)a2 + 1) = v173 + 1;
            char v180 = *(unsigned char *)(v175 + v173);
            v178 |= (unint64_t)(v180 & 0x7F) << v176;
            if ((v180 & 0x80) == 0) {
              goto LABEL_502;
            }
            v176 += 7;
            unint64_t v173 = v179;
            BOOL v14 = v177++ > 8;
          }
          while (!v14);
LABEL_375:
          LODWORD(v178) = 0;
          goto LABEL_502;
        }
        char v307 = 0;
        unsigned int v308 = 0;
        uint64_t v178 = 0;
        if (v174 <= v173) {
          unint64_t v174 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v174 == v173)
          {
            LODWORD(v178) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v309 = v173 + 1;
            char v310 = *(unsigned char *)(v175 + v173);
            *((void *)a2 + 1) = v309;
            v178 |= (unint64_t)(v310 & 0x7F) << v307;
            if (v310 < 0)
            {
              v307 += 7;
              unint64_t v173 = v309;
              BOOL v14 = v308++ > 8;
              if (v14) {
                goto LABEL_375;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v178) = 0;
            }
          }
          break;
        }
LABEL_502:
        *((_DWORD *)this + 28) = v178;
        goto LABEL_20;
      case 0x1Bu:
        operator new();
      case 0x1Cu:
        *((void *)this + 24) |= 0x400uLL;
        unint64_t v181 = *((void *)a2 + 1);
        if (v181 > 0xFFFFFFFFFFFFFFFBLL || v181 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v181);
        goto LABEL_419;
      case 0x1Du:
        *((void *)this + 24) |= 0x200uLL;
        unint64_t v182 = *((void *)a2 + 1);
        if (v182 > 0xFFFFFFFFFFFFFFFBLL || v182 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v182);
        goto LABEL_419;
      case 0x1Eu:
        *((void *)this + 24) |= 0x2000000uLL;
        unint64_t v183 = *((void *)a2 + 1);
        if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v183);
        goto LABEL_419;
      case 0x1Fu:
        *((void *)this + 24) |= 0x1000000000uLL;
        unint64_t v184 = *((void *)a2 + 1);
        unint64_t v185 = *((void *)a2 + 2);
        uint64_t v186 = *(void *)a2;
        if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
        {
          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v189 = 0;
          do
          {
            unint64_t v190 = v184 + 1;
            *((void *)a2 + 1) = v184 + 1;
            char v191 = *(unsigned char *)(v186 + v184);
            v189 |= (unint64_t)(v191 & 0x7F) << v187;
            if ((v191 & 0x80) == 0) {
              goto LABEL_505;
            }
            v187 += 7;
            unint64_t v184 = v190;
            BOOL v14 = v188++ > 8;
          }
          while (!v14);
LABEL_382:
          LODWORD(v189) = 0;
          goto LABEL_505;
        }
        char v311 = 0;
        unsigned int v312 = 0;
        uint64_t v189 = 0;
        if (v185 <= v184) {
          unint64_t v185 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v185 == v184)
          {
            LODWORD(v189) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v313 = v184 + 1;
            char v314 = *(unsigned char *)(v186 + v184);
            *((void *)a2 + 1) = v313;
            v189 |= (unint64_t)(v314 & 0x7F) << v311;
            if (v314 < 0)
            {
              v311 += 7;
              unint64_t v184 = v313;
              BOOL v14 = v312++ > 8;
              if (v14) {
                goto LABEL_382;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v189) = 0;
            }
          }
          break;
        }
LABEL_505:
        *((_DWORD *)this + 46) = v189;
        goto LABEL_20;
      case 0x20u:
        *((void *)this + 24) |= 0x20uLL;
        unint64_t v192 = *((void *)a2 + 1);
        unint64_t v193 = *((void *)a2 + 2);
        uint64_t v194 = *(void *)a2;
        if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
        {
          char v195 = 0;
          unsigned int v196 = 0;
          uint64_t v197 = 0;
          do
          {
            unint64_t v198 = v192 + 1;
            *((void *)a2 + 1) = v192 + 1;
            char v199 = *(unsigned char *)(v194 + v192);
            v197 |= (unint64_t)(v199 & 0x7F) << v195;
            if ((v199 & 0x80) == 0) {
              goto LABEL_508;
            }
            v195 += 7;
            unint64_t v192 = v198;
            BOOL v14 = v196++ > 8;
          }
          while (!v14);
LABEL_389:
          uint64_t v197 = 0;
          goto LABEL_508;
        }
        char v315 = 0;
        unsigned int v316 = 0;
        uint64_t v197 = 0;
        if (v193 <= v192) {
          unint64_t v193 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v193 == v192)
          {
            uint64_t v197 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v317 = v192 + 1;
            char v318 = *(unsigned char *)(v194 + v192);
            *((void *)a2 + 1) = v317;
            v197 |= (unint64_t)(v318 & 0x7F) << v315;
            if (v318 < 0)
            {
              v315 += 7;
              unint64_t v192 = v317;
              BOOL v14 = v316++ > 8;
              if (v14) {
                goto LABEL_389;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v197 = 0;
            }
          }
          break;
        }
LABEL_508:
        *((void *)this + 7) = v197;
        goto LABEL_20;
      case 0x21u:
        *((void *)this + 24) |= 0x10000000uLL;
        unint64_t v200 = *((void *)a2 + 1);
        unint64_t v201 = *((void *)a2 + 2);
        uint64_t v202 = *(void *)a2;
        if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
        {
          char v203 = 0;
          unsigned int v204 = 0;
          uint64_t v205 = 0;
          do
          {
            unint64_t v206 = v200 + 1;
            *((void *)a2 + 1) = v200 + 1;
            char v207 = *(unsigned char *)(v202 + v200);
            v205 |= (unint64_t)(v207 & 0x7F) << v203;
            if ((v207 & 0x80) == 0) {
              goto LABEL_511;
            }
            v203 += 7;
            unint64_t v200 = v206;
            BOOL v14 = v204++ > 8;
          }
          while (!v14);
LABEL_396:
          LODWORD(v205) = 0;
          goto LABEL_511;
        }
        char v319 = 0;
        unsigned int v320 = 0;
        uint64_t v205 = 0;
        if (v201 <= v200) {
          unint64_t v201 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v201 == v200)
          {
            LODWORD(v205) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v321 = v200 + 1;
            char v322 = *(unsigned char *)(v202 + v200);
            *((void *)a2 + 1) = v321;
            v205 |= (unint64_t)(v322 & 0x7F) << v319;
            if (v322 < 0)
            {
              v319 += 7;
              unint64_t v200 = v321;
              BOOL v14 = v320++ > 8;
              if (v14) {
                goto LABEL_396;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v205) = 0;
            }
          }
          break;
        }
LABEL_511:
        *((_DWORD *)this + 38) = v205;
        goto LABEL_20;
      case 0x22u:
        *((void *)this + 24) |= 0x2000000000uLL;
        unint64_t v208 = *((void *)a2 + 1);
        unint64_t v209 = *((void *)a2 + 2);
        uint64_t v210 = *(void *)a2;
        if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
        {
          char v211 = 0;
          unsigned int v212 = 0;
          uint64_t v213 = 0;
          do
          {
            unint64_t v214 = v208 + 1;
            *((void *)a2 + 1) = v208 + 1;
            char v215 = *(unsigned char *)(v210 + v208);
            v213 |= (unint64_t)(v215 & 0x7F) << v211;
            if ((v215 & 0x80) == 0) {
              goto LABEL_514;
            }
            v211 += 7;
            unint64_t v208 = v214;
            BOOL v14 = v212++ > 8;
          }
          while (!v14);
LABEL_403:
          LODWORD(v213) = 0;
          goto LABEL_514;
        }
        char v323 = 0;
        unsigned int v324 = 0;
        uint64_t v213 = 0;
        if (v209 <= v208) {
          unint64_t v209 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v209 == v208)
          {
            LODWORD(v213) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v325 = v208 + 1;
            char v326 = *(unsigned char *)(v210 + v208);
            *((void *)a2 + 1) = v325;
            v213 |= (unint64_t)(v326 & 0x7F) << v323;
            if (v326 < 0)
            {
              v323 += 7;
              unint64_t v208 = v325;
              BOOL v14 = v324++ > 8;
              if (v14) {
                goto LABEL_403;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v213) = 0;
            }
          }
          break;
        }
LABEL_514:
        *((_DWORD *)this + 47) = v213;
        goto LABEL_20;
      case 0x23u:
        *((void *)this + 24) |= 0x40uLL;
        unint64_t v216 = *((void *)a2 + 1);
        unint64_t v217 = *((void *)a2 + 2);
        uint64_t v218 = *(void *)a2;
        if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
        {
          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v221 = 0;
          do
          {
            unint64_t v222 = v216 + 1;
            *((void *)a2 + 1) = v216 + 1;
            char v223 = *(unsigned char *)(v218 + v216);
            v221 |= (unint64_t)(v223 & 0x7F) << v219;
            if ((v223 & 0x80) == 0) {
              goto LABEL_517;
            }
            v219 += 7;
            unint64_t v216 = v222;
            BOOL v14 = v220++ > 8;
          }
          while (!v14);
LABEL_410:
          LODWORD(v221) = 0;
          goto LABEL_517;
        }
        char v327 = 0;
        unsigned int v328 = 0;
        uint64_t v221 = 0;
        if (v217 <= v216) {
          unint64_t v217 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v217 == v216)
          {
            LODWORD(v221) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v329 = v216 + 1;
            char v330 = *(unsigned char *)(v218 + v216);
            *((void *)a2 + 1) = v329;
            v221 |= (unint64_t)(v330 & 0x7F) << v327;
            if (v330 < 0)
            {
              v327 += 7;
              unint64_t v216 = v329;
              BOOL v14 = v328++ > 8;
              if (v14) {
                goto LABEL_410;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v221) = 0;
            }
          }
          break;
        }
LABEL_517:
        *((_DWORD *)this + 16) = v221;
        goto LABEL_20;
      case 0x24u:
        *((void *)this + 24) |= 0x80000000uLL;
        unint64_t v224 = *((void *)a2 + 1);
        if (v224 > 0xFFFFFFFFFFFFFFFBLL || v224 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v224);
        goto LABEL_419;
      case 0x25u:
        *((void *)this + 24) |= 0x100000000uLL;
        unint64_t v225 = *((void *)a2 + 1);
        if (v225 > 0xFFFFFFFFFFFFFFFBLL || v225 + 4 > *((void *)a2 + 2)) {
          goto LABEL_235;
        }
        *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v225);
        goto LABEL_419;
      case 0x26u:
        *((void *)this + 24) |= 0x200000000uLL;
        unint64_t v226 = *((void *)a2 + 1);
        if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v226);
LABEL_419:
          uint64_t v95 = *((void *)a2 + 1) + 4;
LABEL_420:
          *((void *)a2 + 1) = v95;
        }
        else
        {
LABEL_235:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 0x27u:
        *((void *)this + 24) |= 0x400000000uLL;
        unint64_t v227 = *((void *)a2 + 1);
        unint64_t v228 = *((void *)a2 + 2);
        uint64_t v229 = *(void *)a2;
        if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
        {
          char v230 = 0;
          unsigned int v231 = 0;
          uint64_t v232 = 0;
          do
          {
            unint64_t v233 = v227 + 1;
            *((void *)a2 + 1) = v227 + 1;
            char v234 = *(unsigned char *)(v229 + v227);
            v232 |= (unint64_t)(v234 & 0x7F) << v230;
            if ((v234 & 0x80) == 0) {
              goto LABEL_520;
            }
            v230 += 7;
            unint64_t v227 = v233;
            BOOL v14 = v231++ > 8;
          }
          while (!v14);
LABEL_417:
          LODWORD(v232) = 0;
          goto LABEL_520;
        }
        char v331 = 0;
        unsigned int v332 = 0;
        uint64_t v232 = 0;
        if (v228 <= v227) {
          unint64_t v228 = *((void *)a2 + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v228 == v227)
      {
        LODWORD(v232) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_520;
      }
      unint64_t v333 = v227 + 1;
      char v334 = *(unsigned char *)(v229 + v227);
      *((void *)a2 + 1) = v333;
      v232 |= (unint64_t)(v334 & 0x7F) << v331;
      if ((v334 & 0x80) == 0) {
        break;
      }
      v331 += 7;
      unint64_t v227 = v333;
      BOOL v14 = v332++ > 8;
      if (v14) {
        goto LABEL_417;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v232) = 0;
    }
LABEL_520:
    *((_DWORD *)this + 44) = v232;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this)
{
  *(void *)this = &unk_270645888;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_270645888;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 192);
  if ((v4 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    uint64_t v4 = *(void *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2);
  if ((*(void *)(v3 + 192) & 0x40000) != 0) {
LABEL_27:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_28:
  uint64_t v5 = *(const PB::Base **)(v3 + 32);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5);
  }
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_41;
    }
LABEL_79:
    this = PB::Writer::write(a2, *(float *)(v3 + 172));
    if ((*(void *)(v3 + 192) & 0x400000000) == 0) {
      return this;
    }
    goto LABEL_80;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x200000000) != 0) {
    goto LABEL_79;
  }
LABEL_41:
  if ((v6 & 0x400000000) == 0) {
    return this;
  }
LABEL_80:
  return PB::Writer::writeVarInt(a2);
}

BOOL CMMsl::VehicularFlagsData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 8) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if (*(unsigned char *)(a1 + 20)) {
    return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return v2;
}

unint64_t CMMsl::MotionStateUpdate::hash_value(CMMsl::MotionStateUpdate *this)
{
  __int16 v1 = this;
  uint64_t v2 = *((void *)this + 24);
  if ((v2 & 0x8000) != 0)
  {
    uint64_t v3 = *((unsigned int *)this + 25);
    if ((v2 & 0x100) != 0)
    {
LABEL_3:
      uint64_t v4 = *((unsigned int *)this + 18);
      if ((v2 & 0x10000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_4:
    uint64_t v5 = *((unsigned int *)this + 26);
    if ((v2 & 0x20000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v5 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    uint64_t v6 = *((unsigned int *)this + 27);
    if ((v2 & 0x800) != 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_6:
    uint64_t v7 = *((unsigned int *)this + 21);
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v7 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_7:
    uint64_t v8 = *((unsigned int *)this + 37);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v8 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_8:
    uint64_t v9 = *((unsigned int *)this + 23);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v9 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_9:
    uint64_t v10 = *((unsigned int *)this + 22);
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_10:
    uint64_t v11 = *((unsigned int *)this + 34);
    if ((v2 & 8) != 0) {
      goto LABEL_11;
    }
LABEL_54:
    uint64_t v12 = 0;
    if (v2) {
      goto LABEL_15;
    }
LABEL_55:
    uint64_t v13 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v11 = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_54;
  }
LABEL_11:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 5);
  }
  if ((v2 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_15:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 1);
  }
  if ((v2 & 4) != 0)
  {
LABEL_19:
    uint64_t v14 = *((void *)this + 3);
    if ((v2 & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_20:
    uint64_t v15 = *((void *)this + 2);
    if ((v2 & 0x80) != 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_21:
    uint64_t v16 = *((unsigned int *)this + 17);
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_22;
    }
LABEL_59:
    uint64_t v18 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_58:
  uint64_t v16 = 0;
  if ((v2 & 0x20000000) == 0) {
    goto LABEL_59;
  }
LABEL_22:
  float v17 = *((float *)this + 39);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = LODWORD(v17);
  }
  if ((v2 & 0x4000000) != 0)
  {
LABEL_26:
    uint64_t v61 = *((unsigned int *)this + 36);
    if ((v2 & 0x4000) != 0) {
      goto LABEL_27;
    }
LABEL_61:
    uint64_t v71 = 0;
    if ((v2 & 0x400000) != 0) {
      goto LABEL_30;
    }
LABEL_62:
    uint64_t v70 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_33;
    }
LABEL_63:
    uint64_t v69 = 0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_36;
    }
LABEL_64:
    uint64_t v68 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_39;
    }
    goto LABEL_65;
  }
LABEL_60:
  uint64_t v61 = 0;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_61;
  }
LABEL_27:
  float v19 = *((float *)this + 24);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v71 = v20;
  if ((v2 & 0x400000) == 0) {
    goto LABEL_62;
  }
LABEL_30:
  float v21 = *((float *)this + 32);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v70 = v22;
  if ((v2 & 0x200000) == 0) {
    goto LABEL_63;
  }
LABEL_33:
  float v23 = *((float *)this + 31);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v69 = v24;
  if ((v2 & 0x800000) == 0) {
    goto LABEL_64;
  }
LABEL_36:
  float v25 = *((float *)this + 33);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v68 = v26;
  if ((v2 & 0x10) != 0)
  {
LABEL_39:
    uint64_t v67 = *((void *)this + 6);
    if ((v2 & 0x800000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v67 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_40:
    uint64_t v66 = *((unsigned int *)this + 45);
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v66 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_41:
    uint64_t v65 = *((unsigned int *)this + 40);
    if ((v2 & 0x100000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v65 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_42:
    uint64_t v64 = *((unsigned int *)this + 30);
    if ((v2 & 0x80000) != 0) {
      goto LABEL_43;
    }
LABEL_69:
    uint64_t v63 = 0;
    if ((v2 & 0x40000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_70;
  }
LABEL_68:
  uint64_t v64 = 0;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_69;
  }
LABEL_43:
  uint64_t v63 = *((unsigned int *)this + 29);
  if ((v2 & 0x40000) != 0)
  {
LABEL_44:
    uint64_t v62 = *((unsigned int *)this + 28);
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v62 = 0;
LABEL_71:
  unint64_t v27 = *((void *)this + 4);
  if (v27)
  {
    uint64_t v57 = v8;
    uint64_t v58 = v9;
    uint64_t v28 = v3;
    uint64_t v60 = v11;
    uint64_t v29 = v4;
    uint64_t v59 = v13;
    uint64_t v30 = v5;
    uint64_t v55 = v14;
    uint64_t v56 = v16;
    uint64_t v31 = v6;
    uint64_t v32 = v15;
    uint64_t v33 = v7;
    uint64_t v34 = v12;
    unint64_t v35 = v1;
    unint64_t v27 = CMMsl::VehicularFlagsData::hash_value((CMMsl::VehicularFlagsData *)v27);
    __int16 v1 = v35;
    uint64_t v12 = v34;
    uint64_t v7 = v33;
    uint64_t v15 = v32;
    uint64_t v6 = v31;
    uint64_t v14 = v55;
    uint64_t v16 = v56;
    uint64_t v5 = v30;
    uint64_t v4 = v29;
    uint64_t v9 = v58;
    uint64_t v13 = v59;
    uint64_t v11 = v60;
    uint64_t v3 = v28;
    uint64_t v8 = v57;
  }
  if ((v2 & 0x400) == 0)
  {
    uint64_t v36 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_75;
    }
LABEL_99:
    uint64_t v38 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_78;
    }
LABEL_100:
    uint64_t v40 = 0;
    if ((v2 & 0x1000000000) != 0) {
      goto LABEL_81;
    }
    goto LABEL_101;
  }
  float v53 = *((float *)v1 + 20);
  uint64_t v36 = LODWORD(v53);
  if (v53 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_99;
  }
LABEL_75:
  float v37 = *((float *)v1 + 19);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v2 & 0x2000000) == 0) {
    goto LABEL_100;
  }
LABEL_78:
  float v39 = *((float *)v1 + 35);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_81:
    uint64_t v41 = *((unsigned int *)v1 + 46);
    if ((v2 & 0x20) != 0) {
      goto LABEL_82;
    }
    goto LABEL_102;
  }
LABEL_101:
  uint64_t v41 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_82:
    uint64_t v42 = *((void *)v1 + 7);
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v42 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_83:
    uint64_t v43 = *((unsigned int *)v1 + 38);
    if ((v2 & 0x2000000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_104;
  }
LABEL_103:
  uint64_t v43 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_84:
    uint64_t v44 = *((unsigned int *)v1 + 47);
    if ((v2 & 0x40) != 0) {
      goto LABEL_85;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t v44 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_85:
    uint64_t v45 = *((unsigned int *)v1 + 16);
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_86;
    }
LABEL_106:
    uint64_t v47 = 0;
    if ((v2 & 0x100000000) != 0) {
      goto LABEL_89;
    }
LABEL_107:
    uint64_t v49 = 0;
    if ((v2 & 0x200000000) != 0) {
      goto LABEL_92;
    }
    goto LABEL_108;
  }
LABEL_105:
  uint64_t v45 = 0;
  if ((v2 & 0x80000000) == 0) {
    goto LABEL_106;
  }
LABEL_86:
  float v46 = *((float *)v1 + 41);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  if ((v2 & 0x100000000) == 0) {
    goto LABEL_107;
  }
LABEL_89:
  float v48 = *((float *)v1 + 42);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
LABEL_92:
    float v50 = *((float *)v1 + 43);
    uint64_t v51 = LODWORD(v50);
    if (v50 == 0.0) {
      uint64_t v51 = 0;
    }
    if ((v2 & 0x400000000) != 0) {
      goto LABEL_95;
    }
LABEL_109:
    uint64_t v52 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
  }
LABEL_108:
  uint64_t v51 = 0;
  if ((v2 & 0x400000000) == 0) {
    goto LABEL_109;
  }
LABEL_95:
  uint64_t v52 = *((unsigned int *)v1 + 44);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
}

uint64_t CMMsl::MotionStateUpdate::makeVehicularFlags(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionWifiAssociation::~MotionWifiAssociation(CMMsl::MotionWifiAssociation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this, const CMMsl::MotionWifiAssociation *a2)
{
  *(void *)this = &unk_2706435C0;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = &unk_2706435C0;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void *v7;
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = &unk_2706435C0;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiAssociation *a2, CMMsl::MotionWifiAssociation *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::formatText(CMMsl::MotionWifiAssociation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isWifiAssociated");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionWifiAssociation::readFrom(CMMsl::MotionWifiAssociation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v20 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v19 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v20 = v19 != 0;
        }
        *((unsigned char *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiAssociation::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::hash_value(CMMsl::MotionWifiAssociation *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void CMMsl::MotionWifiLocation::~MotionWifiLocation(CMMsl::MotionWifiLocation *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706435F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionWifiLocation::~MotionWifiLocation(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::MotionWifiLocation::MotionWifiLocation(void *this, const CMMsl::MotionWifiLocation *a2)
{
  *this = &unk_2706435F8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::MotionWifiLocation *CMMsl::MotionWifiLocation::operator=(const CMMsl::MotionWifiLocation *a1, const CMMsl::MotionWifiLocation *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionWifiLocation::MotionWifiLocation(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::MotionWifiLocation::~MotionWifiLocation((CMMsl::MotionWifiLocation *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiLocation *a2, CMMsl::MotionWifiLocation *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::MotionWifiLocation::MotionWifiLocation(void *a1, uint64_t a2)
{
  *a1 = &unk_2706435F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706435F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706435F8;
    v6[1] = v4;
    CMMsl::MotionWifiLocation::~MotionWifiLocation((CMMsl::MotionWifiLocation *)v6);
  }
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::formatText(CMMsl::MotionWifiLocation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MotionWifiLocation::readFrom(CMMsl::MotionWifiLocation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::MotionGPSLocation *CMMsl::MotionWifiLocation::hash_value(CMMsl::MotionWifiLocation *this)
{
  uint64_t result = (CMMsl::MotionGPSLocation *)*((void *)this + 1);
  if (result) {
    return (CMMsl::MotionGPSLocation *)CMMsl::MotionGPSLocation::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::MotionWifiLocation::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MovementStats::~MovementStats(CMMsl::MovementStats *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::MovementStats::MovementStats(CMMsl::MovementStats *this, const CMMsl::MovementStats *a2)
{
  *(void *)this = &unk_270643630;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::MovementStats::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = &unk_270643630;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void *v8;
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = &unk_270643630;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    unint64_t v10 = v5;
    uint64_t v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStats *a2, CMMsl::MovementStats *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::MovementStats::formatText(CMMsl::MovementStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "walkingVariable01", *((float *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MovementStats::readFrom(CMMsl::MovementStats *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_25;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_25:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_25;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStats::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8));
  }
  return this;
}

float CMMsl::MovementStats::hash_value(CMMsl::MovementStats *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

void CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  *(void *)this = &unk_270643668;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::MovementStatsGravityProjection *CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this, const CMMsl::MovementStatsGravityProjection *a2)
{
  *(void *)this = &unk_270643668;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  char v5 = *((unsigned char *)a2 + 76);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    char v6 = 2;
    *((unsigned char *)this + 76) = 2;
    *((void *)this + 8) = v7;
    char v5 = *((unsigned char *)a2 + 76);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 76))
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 7);
    v6 |= 1u;
    *((unsigned char *)this + 76) = v6;
    *((void *)this + 7) = v8;
    char v5 = *((unsigned char *)a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    int v9 = *((_DWORD *)a2 + 18);
    *((unsigned char *)this + 76) = v6 | 4;
    *((_DWORD *)this + 18) = v9;
  }
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, const CMMsl::MovementStatsGravityProjection *a2)
{
  if ((const CMMsl::MovementStatsGravityProjection *)a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsGravityProjection *a2, CMMsl::MovementStatsGravityProjection *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v12;
  return result;
}

uint64_t CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643668;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::formatText(CMMsl::MovementStatsGravityProjection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  if (*((unsigned char *)this + 76)) {
    PB::TextFormatter::format(a2, "adjustedTimestamp", *((double *)this + 7));
  }
  long long v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "gravity", v10);
  }
  char v11 = *((unsigned char *)this + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "rawProjectedSignal", *((float *)this + 18));
    char v11 = *((unsigned char *)this + 76);
  }
  if ((v11 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::MovementStatsGravityProjection::readFrom(CMMsl::MovementStatsGravityProjection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 76) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_116;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_90:
            uint64_t v25 = 0;
            goto LABEL_116;
          }
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v61 = v20 + 1;
              char v62 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v61;
              v25 |= (unint64_t)(v62 & 0x7F) << v59;
              if (v62 < 0)
              {
                v59 += 7;
                unint64_t v20 = v61;
                BOOL v14 = v60++ > 8;
                if (v14) {
                  goto LABEL_90;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v25 = 0;
              }
            }
            break;
          }
LABEL_116:
          *((void *)this + 8) = v25;
          goto LABEL_137;
        case 2u:
          *((unsigned char *)this + 76) |= 1u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)a2 + 2)) {
            goto LABEL_133;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v28);
          uint64_t v29 = *((void *)a2 + 1) + 8;
          goto LABEL_136;
        case 3u:
          *((unsigned char *)this + 76) |= 4u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
            goto LABEL_133;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v30);
          goto LABEL_135;
        case 4u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v31 = *((void *)a2 + 1);
            unint64_t v32 = *((void *)a2 + 2);
            while (v31 < v32 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v34 = (char *)*((void *)this + 5);
              unint64_t v33 = *((void *)this + 6);
              if ((unint64_t)v34 >= v33)
              {
                uint64_t v36 = (char *)*((void *)this + 4);
                uint64_t v37 = (v34 - v36) >> 2;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62) {
                  goto LABEL_146;
                }
                uint64_t v39 = v33 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  unint64_t v40 = (unint64_t)sub_2572C76F0(v40);
                  uint64_t v36 = (char *)*((void *)this + 4);
                  uint64_t v34 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v41 = 0;
                }
                uint64_t v42 = (_DWORD *)(v40 + 4 * v37);
                *uint64_t v42 = 0;
                unint64_t v35 = v42 + 1;
                while (v34 != v36)
                {
                  int v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *--uint64_t v42 = v43;
                }
                *((void *)this + 4) = v42;
                *((void *)this + 5) = v35;
                *((void *)this + 6) = v40 + 4 * v41;
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v34 = 0;
                unint64_t v35 = v34 + 4;
              }
              *((void *)this + 5) = v35;
              unint64_t v44 = *((void *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
                goto LABEL_95;
              }
              *(v35 - 1) = *(_DWORD *)(*(void *)a2 + v44);
              unint64_t v32 = *((void *)a2 + 2);
              unint64_t v31 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v31;
            }
            goto LABEL_96;
          }
          uint64_t v64 = (char *)*((void *)this + 5);
          unint64_t v63 = *((void *)this + 6);
          if ((unint64_t)v64 >= v63)
          {
            uint64_t v68 = (char *)*((void *)this + 4);
            uint64_t v69 = (v64 - v68) >> 2;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62) {
              goto LABEL_146;
            }
            uint64_t v71 = v63 - (void)v68;
            if (v71 >> 1 > v70) {
              unint64_t v70 = v71 >> 1;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v70;
            }
            if (v72)
            {
              unint64_t v72 = (unint64_t)sub_2572C76F0(v72);
              uint64_t v68 = (char *)*((void *)this + 4);
              uint64_t v64 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v73 = 0;
            }
            char v80 = (_DWORD *)(v72 + 4 * v69);
            *char v80 = 0;
            uint64_t v65 = v80 + 1;
            while (v64 != v68)
            {
              int v81 = *((_DWORD *)v64 - 1);
              v64 -= 4;
              *--char v80 = v81;
            }
            *((void *)this + 4) = v80;
            *((void *)this + 5) = v65;
            *((void *)this + 6) = v72 + 4 * v73;
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v64 = 0;
            uint64_t v65 = v64 + 4;
          }
          *((void *)this + 5) = v65;
          goto LABEL_131;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v45 = *((void *)a2 + 1);
            unint64_t v46 = *((void *)a2 + 2);
            while (v45 < v46 && !*((unsigned char *)a2 + 24))
            {
              float v48 = (char *)*((void *)this + 2);
              unint64_t v47 = *((void *)this + 3);
              if ((unint64_t)v48 >= v47)
              {
                float v50 = (char *)*((void *)this + 1);
                uint64_t v51 = (v48 - v50) >> 2;
                unint64_t v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 62) {
                  goto LABEL_146;
                }
                uint64_t v53 = v47 - (void)v50;
                if (v53 >> 1 > v52) {
                  unint64_t v52 = v53 >> 1;
                }
                if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v54 = v52;
                }
                if (v54)
                {
                  unint64_t v54 = (unint64_t)sub_2572C76F0(v54);
                  float v50 = (char *)*((void *)this + 1);
                  float v48 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v55 = 0;
                }
                uint64_t v56 = (_DWORD *)(v54 + 4 * v51);
                *uint64_t v56 = 0;
                uint64_t v49 = v56 + 1;
                while (v48 != v50)
                {
                  int v57 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *--uint64_t v56 = v57;
                }
                *((void *)this + 1) = v56;
                *((void *)this + 2) = v49;
                *((void *)this + 3) = v54 + 4 * v55;
                if (v50) {
                  operator delete(v50);
                }
              }
              else
              {
                *(_DWORD *)float v48 = 0;
                uint64_t v49 = v48 + 4;
              }
              *((void *)this + 2) = v49;
              unint64_t v58 = *((void *)a2 + 1);
              if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2))
              {
LABEL_95:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v49 - 1) = *(_DWORD *)(*(void *)a2 + v58);
              unint64_t v46 = *((void *)a2 + 2);
              unint64_t v45 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v45;
            }
LABEL_96:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v67 = (char *)*((void *)this + 2);
            unint64_t v66 = *((void *)this + 3);
            if ((unint64_t)v67 >= v66)
            {
              uint64_t v74 = (char *)*((void *)this + 1);
              uint64_t v75 = (v67 - v74) >> 2;
              unint64_t v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62) {
LABEL_146:
              }
                sub_2570AFD0C();
              uint64_t v77 = v66 - (void)v74;
              if (v77 >> 1 > v76) {
                unint64_t v76 = v77 >> 1;
              }
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v76;
              }
              if (v78)
              {
                unint64_t v78 = (unint64_t)sub_2572C76F0(v78);
                uint64_t v74 = (char *)*((void *)this + 1);
                uint64_t v67 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v79 = 0;
              }
              uint64_t v82 = (_DWORD *)(v78 + 4 * v75);
              *uint64_t v82 = 0;
              uint64_t v65 = v82 + 1;
              while (v67 != v74)
              {
                int v83 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *--uint64_t v82 = v83;
              }
              *((void *)this + 1) = v82;
              *((void *)this + 2) = v65;
              *((void *)this + 3) = v78 + 4 * v79;
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v67 = 0;
              uint64_t v65 = v67 + 4;
            }
            *((void *)this + 2) = v65;
LABEL_131:
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *((void *)a2 + 2))
            {
              *(v65 - 1) = *(_DWORD *)(*(void *)a2 + v84);
LABEL_135:
              uint64_t v29 = *((void *)a2 + 1) + 4;
LABEL_136:
              *((void *)a2 + 1) = v29;
            }
            else
            {
LABEL_133:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_137;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_137:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::MovementStatsGravityProjection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 76) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    this = PB::Writer::write(a2, *(double *)(v3 + 56));
    if ((*(unsigned char *)(v3 + 76) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 76);
  if (v4) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v4 & 4) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 72));
LABEL_5:
  uint64_t v5 = *(float **)(v3 + 32);
  long long v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  char v9 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    float v10 = *v9++;
    this = PB::Writer::write(a2, v10);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::hash_value(CMMsl::MovementStatsGravityProjection *this)
{
  if ((*((unsigned char *)this + 76) & 2) != 0)
  {
    uint64_t v1 = *((void *)this + 8);
    if (*((unsigned char *)this + 76))
    {
LABEL_3:
      double v2 = *((double *)this + 7);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 76) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      uint64_t v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 76)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 76) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  float v3 = *((float *)this + 18);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
LABEL_12:
  uint64_t v5 = *(void *)&v2 ^ v1 ^ v4 ^ PBHashBytes();
  return v5 ^ PBHashBytes();
}

void CMMsl::MovementStatsSignal::~MovementStatsSignal(CMMsl::MovementStatsSignal *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(CMMsl::MovementStatsSignal *this, const CMMsl::MovementStatsSignal *a2)
{
  *(void *)this = &unk_2706436A0;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 4) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((unsigned char *)a2 + 40) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  *((unsigned char *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 7) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, const CMMsl::MovementStatsSignal *a2)
{
  if ((const CMMsl::MovementStatsSignal *)a1 != a2)
  {
    CMMsl::MovementStatsSignal::MovementStatsSignal((CMMsl::MovementStatsSignal *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsSignal *a2, CMMsl::MovementStatsSignal *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706436A0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706436A0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = &unk_2706436A0;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsSignal::formatText(CMMsl::MovementStatsSignal *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalRotationRateFiltered", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "sample", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "verticalRotationRateFiltered", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "verticalUserAcceleration", *((float *)this + 8));
  if ((*((unsigned char *)this + 40) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "walkSpeedFilteredSample", *((float *)this + 9));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::MovementStatsSignal::readFrom(CMMsl::MovementStatsSignal *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_47;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_46;
      case 2u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((unsigned char *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((unsigned char *)this + 40) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_45:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_46:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_47:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::MovementStatsSignal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 20));
    if ((*(unsigned char *)(v3 + 40) & 0x10) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 28);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::MovementStatsSignal::hash_value(CMMsl::MovementStatsSignal *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 9);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 8);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 5);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 7);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::NatalieData::~NatalieData(CMMsl::NatalieData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this, const CMMsl::NatalieData *a2)
{
  *(void *)this = &unk_2706436D8;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    __int16 v3 = 16;
    *(_WORD *)(this + 68) = 16;
    *(void *)(this + 40) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    char v6 = *((unsigned char *)a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(unsigned char *)(this + 65) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 16) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 24) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v12 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x200;
    *(unsigned char *)(this + 64) = v14;
    return this;
  }
LABEL_23:
  uint64_t v13 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 8) = v13;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *a1, const CMMsl::NatalieData *a2)
{
  if (a1 != a2)
  {
    CMMsl::NatalieData::NatalieData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NatalieData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::NatalieData *a2, CMMsl::NatalieData *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 65);
  *((unsigned char *)this + 65) = *((unsigned char *)a2 + 65);
  *((unsigned char *)a2 + 65) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  int v8 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  int v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v9) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v9;
  return result;
}

double CMMsl::NatalieData::NatalieData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706436D8;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NatalieData::NatalieData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NatalieData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::NatalieData::formatText(CMMsl::NatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "duration", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "fGpsAvailability");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "fractionalGrade", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "gradeType");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "hrmin", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isStanding");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "metSource");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "rawGradeType");
  if ((*((_WORD *)this + 34) & 0x10) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 5));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::NatalieData::readFrom(CMMsl::NatalieData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_124;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 2u:
        *((_WORD *)this + 34) |= 0x20u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_108;
            }
            unint64_t v50 = v20++;
            char v51 = *(unsigned char *)(v21 + v50);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_107:
              unint64_t v2 = v50 + 1;
              goto LABEL_108;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_107;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_108;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_108:
        *((_DWORD *)this + 12) = v24;
        break;
      case 3u:
        *((_WORD *)this + 34) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 65) = v27;
        break;
      case 4u:
        *((_WORD *)this + 34) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 5u:
        *((_WORD *)this + 34) |= 0x40u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_113;
            }
            unint64_t v54 = v28++;
            char v55 = *(unsigned char *)(v29 + v54);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_112:
              unint64_t v2 = v54 + 1;
              goto LABEL_113;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
          goto LABEL_112;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        do
        {
          unint64_t v2 = v28 + 1;
          *((void *)a2 + 1) = v28 + 1;
          char v33 = *(unsigned char *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0) {
            goto LABEL_113;
          }
          v30 += 7;
          unint64_t v28 = v2;
          BOOL v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_113:
        *((_DWORD *)this + 13) = v32;
        break;
      case 6u:
        *((_WORD *)this + 34) |= 0x100u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_118;
            }
            unint64_t v58 = v34++;
            char v59 = *(unsigned char *)(v35 + v58);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_117:
              unint64_t v2 = v58 + 1;
              goto LABEL_118;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_117;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_118;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_118:
        *((_DWORD *)this + 15) = v38;
        break;
      case 7u:
        *((_WORD *)this + 34) |= 0x80u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_123;
            }
            unint64_t v62 = v40++;
            char v63 = *(unsigned char *)(v41 + v62);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_122:
              unint64_t v2 = v62 + 1;
              goto LABEL_123;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_122;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_123;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_123:
        *((_DWORD *)this + 14) = v44;
        break;
      case 8u:
        *((_WORD *)this + 34) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 9u:
        *((_WORD *)this + 34) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_103;
      case 0xAu:
        *((_WORD *)this + 34) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_103:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_67:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 64) = v47;
        break;
      default:
        goto LABEL_19;
    }
LABEL_124:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::NatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(_WORD *)(v3 + 68) & 0x200) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if (v4) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_23:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::NatalieData::hash_value(CMMsl::NatalieData *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 0x10) != 0)
  {
    double v2 = *((double *)this + 5);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 12);
      if ((*((_WORD *)this + 34) & 0x400) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 34) & 0x400) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 65);
    if ((v1 & 2) != 0) {
      goto LABEL_5;
    }
LABEL_26:
    double v5 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_5:
  double v5 = *((double *)this + 2);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 34) & 0x100) != 0)
  {
LABEL_9:
    uint64_t v7 = *((unsigned int *)this + 15);
    if ((v1 & 0x80) != 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v7 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    uint64_t v8 = *((unsigned int *)this + 14);
    if ((v1 & 4) != 0) {
      goto LABEL_11;
    }
LABEL_30:
    double v9 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_14;
    }
LABEL_31:
    double v10 = 0.0;
    if (v1) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_30;
  }
LABEL_11:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_14:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if (v1)
  {
LABEL_17:
    double v11 = *((double *)this + 1);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_20;
    }
LABEL_33:
    uint64_t v12 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v12;
  }
LABEL_32:
  double v11 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_33;
  }
LABEL_20:
  uint64_t v12 = *((unsigned __int8 *)this + 64);
  return v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v12;
}

void CMMsl::NonlinearBiasFit::~NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  *(void *)this = &unk_270643710;
  double v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::NonlinearBiasFit::~NonlinearBiasFit(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::NonlinearBiasFit *CMMsl::NonlinearBiasFit::NonlinearBiasFit(char **this, char **a2)
{
  *this = (char *)&unk_270643710;
  *(_OWORD *)(this + 1) = 0u;
  uint64_t v4 = this + 1;
  *(_OWORD *)(this + 7) = 0u;
  double v5 = this + 7;
  *(_OWORD *)(this + 13) = 0u;
  uint64_t v6 = this + 13;
  *(_OWORD *)(this + 19) = 0u;
  uint64_t v7 = this + 19;
  *((_DWORD *)this + 45) = 0;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  *(_OWORD *)(this + 9) = 0u;
  *(_OWORD *)(this + 11) = 0u;
  *(_OWORD *)(this + 15) = 0u;
  *(_OWORD *)(this + 17) = 0u;
  this[21] = 0;
  if (this != a2)
  {
    sub_2572C75B4(this + 16, a2[16], a2[17], (a2[17] - a2[16]) >> 2);
    sub_2572C75B4(v6, a2[13], a2[14], (a2[14] - a2[13]) >> 2);
    sub_2572C75B4(v7, a2[19], a2[20], (a2[20] - a2[19]) >> 2);
  }
  if (*((unsigned char *)a2 + 180))
  {
    int v8 = *((_DWORD *)a2 + 44);
    *((unsigned char *)this + 180) |= 1u;
    *((_DWORD *)this + 44) = v8;
  }
  if (this != a2)
  {
    sub_2572C75B4(this + 10, a2[10], a2[11], (a2[11] - a2[10]) >> 2);
    sub_2572C75B4(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
    sub_2572C75B4(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 2);
    sub_2572C75B4(v5, a2[7], a2[8], (a2[8] - a2[7]) >> 2);
  }
  return (CMMsl::NonlinearBiasFit *)this;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, char **a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit(v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::NonlinearBiasFit *a2, CMMsl::NonlinearBiasFit *a3)
{
  int v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  uint64_t v4 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v4;
  uint64_t v5 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v5;
  uint64_t v6 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v6;
  uint64_t v7 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v7;
  uint64_t v8 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v8;
  uint64_t v9 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v9;
  uint64_t v10 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v10;
  uint64_t v11 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v11;
  uint64_t v12 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v12;
  float result = *((float *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((float *)a2 + 44) = result;
  uint64_t v14 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v14;
  uint64_t v15 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v15;
  uint64_t v16 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v16;
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v17;
  uint64_t v18 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  uint64_t v20 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v20;
  uint64_t v21 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v21;
  uint64_t v22 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v22;
  uint64_t v23 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v23;
  uint64_t v24 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v24;
  uint64_t v25 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v25;
  return result;
}

uint64_t CMMsl::NonlinearBiasFit::NonlinearBiasFit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643710;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  sub_2572C7560(a1 + 128, (__n128 *)(a2 + 128));
  sub_2572C7560(a1 + 104, (__n128 *)(a2 + 104));
  sub_2572C7560(a1 + 152, (__n128 *)(a2 + 152));
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  sub_2572C7560(v5, (__n128 *)(a2 + 80));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

uint64_t CMMsl::NonlinearBiasFit::formatText(CMMsl::NonlinearBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)this + 11);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "error");
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)this + 2);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(a2, "errorX");
  }
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *((void *)this + 5);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(a2, "errorY");
  }
  uint64_t v11 = *((void *)this + 7);
  uint64_t v12 = *((void *)this + 8);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(a2, "errorZ");
  }
  char v13 = (float *)*((void *)this + 13);
  uint64_t v14 = (float *)*((void *)this + 14);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "intercept", v15);
  }
  if (*((unsigned char *)this + 180)) {
    PB::TextFormatter::format(a2, "overlap", *((float *)this + 44));
  }
  uint64_t v16 = (float *)*((void *)this + 16);
  uint64_t v17 = (float *)*((void *)this + 17);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(a2, "slope", v18);
  }
  uint64_t v19 = (float *)*((void *)this + 19);
  uint64_t v20 = (float *)*((void *)this + 20);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(a2, "temperature", v21);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::NonlinearBiasFit::readFrom(CMMsl::NonlinearBiasFit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v76 = v10++ > 8;
        if (v76) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v18 = v11 & 7;
      if (v18 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v19 = *((void *)a2 + 1);
            unint64_t v20 = *((void *)a2 + 2);
            while (v19 < v20 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v22 = (char *)*((void *)this + 17);
              unint64_t v21 = *((void *)this + 18);
              if ((unint64_t)v22 >= v21)
              {
                uint64_t v24 = (char *)*((void *)this + 16);
                uint64_t v25 = (v22 - v24) >> 2;
                unint64_t v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 62) {
                  goto LABEL_479;
                }
                uint64_t v27 = v21 - (void)v24;
                if (v27 >> 1 > v26) {
                  unint64_t v26 = v27 >> 1;
                }
                if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v26;
                }
                if (v28)
                {
                  unint64_t v28 = (unint64_t)sub_2572C76F0(v28);
                  uint64_t v24 = (char *)*((void *)this + 16);
                  uint64_t v22 = (char *)*((void *)this + 17);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                char v30 = (_DWORD *)(v28 + 4 * v25);
                *char v30 = 0;
                uint64_t v23 = v30 + 1;
                while (v22 != v24)
                {
                  int v31 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *--char v30 = v31;
                }
                *((void *)this + 16) = v30;
                *((void *)this + 17) = v23;
                *((void *)this + 18) = v28 + 4 * v29;
                if (v24) {
                  operator delete(v24);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v22 = 0;
                uint64_t v23 = v22 + 4;
              }
              *((void *)this + 17) = v23;
              unint64_t v32 = *((void *)a2 + 1);
              if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
                goto LABEL_293;
              }
              *(v23 - 1) = *(_DWORD *)(*(void *)a2 + v32);
              unint64_t v20 = *((void *)a2 + 2);
              unint64_t v19 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v19;
            }
            goto LABEL_294;
          }
          char v160 = (char *)*((void *)this + 17);
          unint64_t v159 = *((void *)this + 18);
          if ((unint64_t)v160 >= v159)
          {
            uint64_t v175 = (char *)*((void *)this + 16);
            uint64_t v176 = (v160 - v175) >> 2;
            unint64_t v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62) {
              goto LABEL_479;
            }
            uint64_t v178 = v159 - (void)v175;
            if (v178 >> 1 > v177) {
              unint64_t v177 = v178 >> 1;
            }
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v179 = v177;
            }
            if (v179)
            {
              unint64_t v179 = (unint64_t)sub_2572C76F0(v179);
              uint64_t v175 = (char *)*((void *)this + 16);
              char v160 = (char *)*((void *)this + 17);
            }
            else
            {
              uint64_t v180 = 0;
            }
            unint64_t v217 = (_DWORD *)(v179 + 4 * v176);
            *unint64_t v217 = 0;
            unsigned int v161 = v217 + 1;
            while (v160 != v175)
            {
              int v218 = *((_DWORD *)v160 - 1);
              v160 -= 4;
              *--unint64_t v217 = v218;
            }
            *((void *)this + 16) = v217;
            *((void *)this + 17) = v161;
            *((void *)this + 18) = v179 + 4 * v180;
            if (v175) {
              operator delete(v175);
            }
          }
          else
          {
            *(_DWORD *)char v160 = 0;
            unsigned int v161 = v160 + 4;
          }
          *((void *)this + 17) = v161;
          goto LABEL_372;
        case 2u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v33 = *((void *)a2 + 1);
            unint64_t v34 = *((void *)a2 + 2);
            while (v33 < v34 && !*((unsigned char *)a2 + 24))
            {
              char v36 = (char *)*((void *)this + 14);
              unint64_t v35 = *((void *)this + 15);
              if ((unint64_t)v36 >= v35)
              {
                uint64_t v38 = (char *)*((void *)this + 13);
                uint64_t v39 = (v36 - v38) >> 2;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62) {
                  goto LABEL_479;
                }
                uint64_t v41 = v35 - (void)v38;
                if (v41 >> 1 > v40) {
                  unint64_t v40 = v41 >> 1;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42)
                {
                  unint64_t v42 = (unint64_t)sub_2572C76F0(v42);
                  uint64_t v38 = (char *)*((void *)this + 13);
                  char v36 = (char *)*((void *)this + 14);
                }
                else
                {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = (_DWORD *)(v42 + 4 * v39);
                *uint64_t v44 = 0;
                unsigned int v37 = v44 + 1;
                while (v36 != v38)
                {
                  int v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *--uint64_t v44 = v45;
                }
                *((void *)this + 13) = v44;
                *((void *)this + 14) = v37;
                *((void *)this + 15) = v42 + 4 * v43;
                if (v38) {
                  operator delete(v38);
                }
              }
              else
              {
                *(_DWORD *)char v36 = 0;
                unsigned int v37 = v36 + 4;
              }
              *((void *)this + 14) = v37;
              unint64_t v46 = *((void *)a2 + 1);
              if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)a2 + 2)) {
                goto LABEL_293;
              }
              *(v37 - 1) = *(_DWORD *)(*(void *)a2 + v46);
              unint64_t v34 = *((void *)a2 + 2);
              unint64_t v33 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v33;
            }
            goto LABEL_294;
          }
          unint64_t v163 = (char *)*((void *)this + 14);
          unint64_t v162 = *((void *)this + 15);
          if ((unint64_t)v163 >= v162)
          {
            unint64_t v181 = (char *)*((void *)this + 13);
            uint64_t v182 = (v163 - v181) >> 2;
            unint64_t v183 = v182 + 1;
            if ((unint64_t)(v182 + 1) >> 62) {
              goto LABEL_479;
            }
            uint64_t v184 = v162 - (void)v181;
            if (v184 >> 1 > v183) {
              unint64_t v183 = v184 >> 1;
            }
            if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v185 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v185 = v183;
            }
            if (v185)
            {
              unint64_t v185 = (unint64_t)sub_2572C76F0(v185);
              unint64_t v181 = (char *)*((void *)this + 13);
              unint64_t v163 = (char *)*((void *)this + 14);
            }
            else
            {
              uint64_t v186 = 0;
            }
            char v219 = (_DWORD *)(v185 + 4 * v182);
            *char v219 = 0;
            unsigned int v161 = v219 + 1;
            while (v163 != v181)
            {
              int v220 = *((_DWORD *)v163 - 1);
              v163 -= 4;
              *--char v219 = v220;
            }
            *((void *)this + 13) = v219;
            *((void *)this + 14) = v161;
            *((void *)this + 15) = v185 + 4 * v186;
            if (v181) {
              operator delete(v181);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v163 = 0;
            unsigned int v161 = v163 + 4;
          }
          *((void *)this + 14) = v161;
          goto LABEL_372;
        case 3u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v47 = *((void *)a2 + 1);
            unint64_t v48 = *((void *)a2 + 2);
            while (v47 < v48 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v50 = (char *)*((void *)this + 20);
              unint64_t v49 = *((void *)this + 21);
              if ((unint64_t)v50 >= v49)
              {
                char v52 = (char *)*((void *)this + 19);
                uint64_t v53 = (v50 - v52) >> 2;
                unint64_t v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62) {
                  goto LABEL_479;
                }
                uint64_t v55 = v49 - (void)v52;
                if (v55 >> 1 > v54) {
                  unint64_t v54 = v55 >> 1;
                }
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v56 = v54;
                }
                if (v56)
                {
                  unint64_t v56 = (unint64_t)sub_2572C76F0(v56);
                  char v52 = (char *)*((void *)this + 19);
                  unint64_t v50 = (char *)*((void *)this + 20);
                }
                else
                {
                  uint64_t v57 = 0;
                }
                unint64_t v58 = (_DWORD *)(v56 + 4 * v53);
                *unint64_t v58 = 0;
                char v51 = v58 + 1;
                while (v50 != v52)
                {
                  int v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *--unint64_t v58 = v59;
                }
                *((void *)this + 19) = v58;
                *((void *)this + 20) = v51;
                *((void *)this + 21) = v56 + 4 * v57;
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v50 = 0;
                char v51 = v50 + 4;
              }
              *((void *)this + 20) = v51;
              unint64_t v60 = *((void *)a2 + 1);
              if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2))
              {
LABEL_293:
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_294;
              }
              *(v51 - 1) = *(_DWORD *)(*(void *)a2 + v60);
              unint64_t v48 = *((void *)a2 + 2);
              unint64_t v47 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v47;
            }
            goto LABEL_294;
          }
          unint64_t v165 = (char *)*((void *)this + 20);
          unint64_t v164 = *((void *)this + 21);
          if ((unint64_t)v165 >= v164)
          {
            char v187 = (char *)*((void *)this + 19);
            uint64_t v188 = (v165 - v187) >> 2;
            unint64_t v189 = v188 + 1;
            if ((unint64_t)(v188 + 1) >> 62) {
LABEL_479:
            }
              sub_2570AFD0C();
            uint64_t v190 = v164 - (void)v187;
            if (v190 >> 1 > v189) {
              unint64_t v189 = v190 >> 1;
            }
            if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v191 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v191 = v189;
            }
            if (v191)
            {
              unint64_t v191 = (unint64_t)sub_2572C76F0(v191);
              char v187 = (char *)*((void *)this + 19);
              unint64_t v165 = (char *)*((void *)this + 20);
            }
            else
            {
              uint64_t v192 = 0;
            }
            uint64_t v221 = (_DWORD *)(v191 + 4 * v188);
            *uint64_t v221 = 0;
            unsigned int v161 = v221 + 1;
            while (v165 != v187)
            {
              int v222 = *((_DWORD *)v165 - 1);
              v165 -= 4;
              *--uint64_t v221 = v222;
            }
            *((void *)this + 19) = v221;
            *((void *)this + 20) = v161;
            *((void *)this + 21) = v191 + 4 * v192;
            if (v187) {
              operator delete(v187);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v165 = 0;
            unsigned int v161 = v165 + 4;
          }
          *((void *)this + 20) = v161;
LABEL_372:
          unint64_t v223 = *((void *)a2 + 1);
          if (v223 <= 0xFFFFFFFFFFFFFFFBLL && v223 + 4 <= *((void *)a2 + 2))
          {
            *(v161 - 1) = *(_DWORD *)(*(void *)a2 + v223);
LABEL_376:
            *((void *)a2 + 1) += 4;
          }
          else
          {
LABEL_374:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_470;
        case 4u:
          *((unsigned char *)this + 180) |= 1u;
          unint64_t v61 = *((void *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
            goto LABEL_374;
          }
          *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v61);
          goto LABEL_376;
        case 5u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v62 = (char *)*((void *)this + 11);
              do
              {
                unint64_t v63 = *((void *)this + 12);
                if ((unint64_t)v62 >= v63)
                {
                  uint64_t v64 = (char *)*((void *)this + 10);
                  uint64_t v65 = (v62 - v64) >> 2;
                  unint64_t v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 62) {
                    goto LABEL_480;
                  }
                  uint64_t v67 = v63 - (void)v64;
                  if (v67 >> 1 > v66) {
                    unint64_t v66 = v67 >> 1;
                  }
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v68 = v66;
                  }
                  if (v68)
                  {
                    unint64_t v68 = (unint64_t)sub_2572C76F0(v68);
                    uint64_t v64 = (char *)*((void *)this + 10);
                    unint64_t v62 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    uint64_t v69 = 0;
                  }
                  unint64_t v70 = (_DWORD *)(v68 + 4 * v65);
                  *unint64_t v70 = 0;
                  uint64_t v71 = (char *)(v70 + 1);
                  while (v62 != v64)
                  {
                    int v72 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--unint64_t v70 = v72;
                  }
                  *((void *)this + 10) = v70;
                  *((void *)this + 11) = v71;
                  *((void *)this + 12) = v68 + 4 * v69;
                  if (v64) {
                    operator delete(v64);
                  }
                  unint64_t v62 = v71;
                }
                else
                {
                  *(_DWORD *)unint64_t v62 = 0;
                  v62 += 4;
                }
                *((void *)this + 11) = v62;
                unint64_t v74 = *((void *)a2 + 1);
                unint64_t v73 = *((void *)a2 + 2);
                uint64_t v75 = *(void *)a2;
                BOOL v76 = v74 > 0xFFFFFFFFFFFFFFF5 || v74 + 10 > v73;
                if (v76)
                {
                  char v77 = 0;
                  unsigned int v78 = 0;
                  uint64_t v84 = 0;
                  if (v73 <= v74) {
                    uint64_t v79 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v79 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v79 == v74) {
                      goto LABEL_278;
                    }
                    unint64_t v80 = v74++;
                    char v81 = *(unsigned char *)(v75 + v80);
                    *((void *)a2 + 1) = v74;
                    v84 |= (unint64_t)(v81 & 0x7F) << v77;
                    if ((v81 & 0x80) == 0) {
                      break;
                    }
                    v77 += 7;
                    BOOL v76 = v78++ > 8;
                    if (v76)
                    {
                      LODWORD(v84) = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v84) = 0;
                  }
LABEL_139:
                  unint64_t v85 = v80 + 1;
                }
                else
                {
                  char v82 = 0;
                  unsigned int v83 = 0;
                  uint64_t v84 = 0;
                  while (1)
                  {
                    unint64_t v85 = v74 + 1;
                    *((void *)a2 + 1) = v74 + 1;
                    char v86 = *(unsigned char *)(v75 + v74);
                    v84 |= (unint64_t)(v86 & 0x7F) << v82;
                    if ((v86 & 0x80) == 0) {
                      break;
                    }
                    v82 += 7;
                    unint64_t v74 = v85;
                    BOOL v76 = v83++ > 8;
                    if (v76)
                    {
                      LODWORD(v84) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v62 - 1) = v84;
              }
              while (v85 < v73 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_294;
          }
          uint64_t v167 = (char *)*((void *)this + 11);
          unint64_t v166 = *((void *)this + 12);
          if ((unint64_t)v167 >= v166)
          {
            unint64_t v193 = (char *)*((void *)this + 10);
            uint64_t v194 = (v167 - v193) >> 2;
            unint64_t v195 = v194 + 1;
            if ((unint64_t)(v194 + 1) >> 62) {
              goto LABEL_480;
            }
            uint64_t v196 = v166 - (void)v193;
            if (v196 >> 1 > v195) {
              unint64_t v195 = v196 >> 1;
            }
            if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v197 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v197 = v195;
            }
            if (v197)
            {
              unint64_t v197 = (unint64_t)sub_2572C76F0(v197);
              unint64_t v193 = (char *)*((void *)this + 10);
              uint64_t v167 = (char *)*((void *)this + 11);
            }
            else
            {
              uint64_t v198 = 0;
            }
            unint64_t v224 = (_DWORD *)(v197 + 4 * v194);
            *unint64_t v224 = 0;
            char v168 = v224 + 1;
            while (v167 != v193)
            {
              int v225 = *((_DWORD *)v167 - 1);
              v167 -= 4;
              *--unint64_t v224 = v225;
            }
            *((void *)this + 10) = v224;
            *((void *)this + 11) = v168;
            *((void *)this + 12) = v197 + 4 * v198;
            if (v193) {
              operator delete(v193);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v167 = 0;
            char v168 = v167 + 4;
          }
          *((void *)this + 11) = v168;
          unint64_t v226 = *((void *)a2 + 1);
          unint64_t v227 = *((void *)a2 + 2);
          uint64_t v228 = *(void *)a2;
          char v229 = 0;
          unsigned int v230 = 0;
          if (v226 <= 0xFFFFFFFFFFFFFFF5 && v226 + 10 <= v227)
          {
            uint64_t v234 = 0;
            while (1)
            {
              unint64_t v235 = v226 + 1;
              *((void *)a2 + 1) = v226 + 1;
              char v236 = *(unsigned char *)(v228 + v226);
              v234 |= (unint64_t)(v236 & 0x7F) << v229;
              if ((v236 & 0x80) == 0) {
                goto LABEL_469;
              }
              v229 += 7;
              unint64_t v226 = v235;
              BOOL v76 = v230++ > 8;
              if (v76) {
                goto LABEL_468;
              }
            }
          }
          uint64_t v234 = 0;
          if (v227 <= v226) {
            unint64_t v227 = *((void *)a2 + 1);
          }
          while (v227 != v226)
          {
            unint64_t v232 = v226 + 1;
            char v233 = *(unsigned char *)(v228 + v226);
            *((void *)a2 + 1) = v232;
            v234 |= (unint64_t)(v233 & 0x7F) << v229;
            if ((v233 & 0x80) == 0) {
              goto LABEL_462;
            }
            v229 += 7;
            unint64_t v226 = v232;
            BOOL v76 = v230++ > 8;
            if (v76) {
              goto LABEL_468;
            }
          }
          goto LABEL_461;
        case 6u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v62 = (char *)*((void *)this + 2);
              do
              {
                unint64_t v87 = *((void *)this + 3);
                if ((unint64_t)v62 >= v87)
                {
                  char v88 = (char *)*((void *)this + 1);
                  uint64_t v89 = (v62 - v88) >> 2;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 62) {
                    goto LABEL_480;
                  }
                  uint64_t v91 = v87 - (void)v88;
                  if (v91 >> 1 > v90) {
                    unint64_t v90 = v91 >> 1;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    unint64_t v92 = (unint64_t)sub_2572C76F0(v92);
                    char v88 = (char *)*((void *)this + 1);
                    unint64_t v62 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v93 = 0;
                  }
                  unint64_t v94 = (_DWORD *)(v92 + 4 * v89);
                  *unint64_t v94 = 0;
                  uint64_t v95 = (char *)(v94 + 1);
                  while (v62 != v88)
                  {
                    int v96 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--unint64_t v94 = v96;
                  }
                  *((void *)this + 1) = v94;
                  *((void *)this + 2) = v95;
                  *((void *)this + 3) = v92 + 4 * v93;
                  if (v88) {
                    operator delete(v88);
                  }
                  unint64_t v62 = v95;
                }
                else
                {
                  *(_DWORD *)unint64_t v62 = 0;
                  v62 += 4;
                }
                *((void *)this + 2) = v62;
                unint64_t v98 = *((void *)a2 + 1);
                unint64_t v97 = *((void *)a2 + 2);
                uint64_t v99 = *(void *)a2;
                if (v98 > 0xFFFFFFFFFFFFFFF5 || v98 + 10 > v97)
                {
                  char v101 = 0;
                  unsigned int v102 = 0;
                  uint64_t v108 = 0;
                  if (v97 <= v98) {
                    uint64_t v103 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v103 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v103 == v98) {
                      goto LABEL_278;
                    }
                    unint64_t v104 = v98++;
                    char v105 = *(unsigned char *)(v99 + v104);
                    *((void *)a2 + 1) = v98;
                    v108 |= (unint64_t)(v105 & 0x7F) << v101;
                    if ((v105 & 0x80) == 0) {
                      break;
                    }
                    v101 += 7;
                    BOOL v76 = v102++ > 8;
                    if (v76)
                    {
                      LODWORD(v108) = 0;
                      goto LABEL_184;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v108) = 0;
                  }
LABEL_184:
                  unint64_t v109 = v104 + 1;
                }
                else
                {
                  char v106 = 0;
                  unsigned int v107 = 0;
                  uint64_t v108 = 0;
                  while (1)
                  {
                    unint64_t v109 = v98 + 1;
                    *((void *)a2 + 1) = v98 + 1;
                    char v110 = *(unsigned char *)(v99 + v98);
                    v108 |= (unint64_t)(v110 & 0x7F) << v106;
                    if ((v110 & 0x80) == 0) {
                      break;
                    }
                    v106 += 7;
                    unint64_t v98 = v109;
                    BOOL v76 = v107++ > 8;
                    if (v76)
                    {
                      LODWORD(v108) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v62 - 1) = v108;
              }
              while (v109 < v97 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_294;
          }
          uint64_t v170 = (char *)*((void *)this + 2);
          unint64_t v169 = *((void *)this + 3);
          if ((unint64_t)v170 >= v169)
          {
            char v199 = (char *)*((void *)this + 1);
            uint64_t v200 = (v170 - v199) >> 2;
            unint64_t v201 = v200 + 1;
            if ((unint64_t)(v200 + 1) >> 62) {
              goto LABEL_480;
            }
            uint64_t v202 = v169 - (void)v199;
            if (v202 >> 1 > v201) {
              unint64_t v201 = v202 >> 1;
            }
            if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v203 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v203 = v201;
            }
            if (v203)
            {
              unint64_t v203 = (unint64_t)sub_2572C76F0(v203);
              char v199 = (char *)*((void *)this + 1);
              uint64_t v170 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v204 = 0;
            }
            unint64_t v237 = (_DWORD *)(v203 + 4 * v200);
            *unint64_t v237 = 0;
            char v168 = v237 + 1;
            while (v170 != v199)
            {
              int v238 = *((_DWORD *)v170 - 1);
              v170 -= 4;
              *--unint64_t v237 = v238;
            }
            *((void *)this + 1) = v237;
            *((void *)this + 2) = v168;
            *((void *)this + 3) = v203 + 4 * v204;
            if (v199) {
              operator delete(v199);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v170 = 0;
            char v168 = v170 + 4;
          }
          *((void *)this + 2) = v168;
          unint64_t v239 = *((void *)a2 + 1);
          unint64_t v240 = *((void *)a2 + 2);
          uint64_t v241 = *(void *)a2;
          char v242 = 0;
          unsigned int v243 = 0;
          if (v239 <= 0xFFFFFFFFFFFFFFF5 && v239 + 10 <= v240)
          {
            uint64_t v234 = 0;
            while (1)
            {
              unint64_t v247 = v239 + 1;
              *((void *)a2 + 1) = v239 + 1;
              char v248 = *(unsigned char *)(v241 + v239);
              v234 |= (unint64_t)(v248 & 0x7F) << v242;
              if ((v248 & 0x80) == 0) {
                goto LABEL_469;
              }
              v242 += 7;
              unint64_t v239 = v247;
              BOOL v76 = v243++ > 8;
              if (v76) {
                goto LABEL_468;
              }
            }
          }
          uint64_t v234 = 0;
          if (v240 <= v239) {
            unint64_t v240 = *((void *)a2 + 1);
          }
          while (v240 != v239)
          {
            unint64_t v245 = v239 + 1;
            char v246 = *(unsigned char *)(v241 + v239);
            *((void *)a2 + 1) = v245;
            v234 |= (unint64_t)(v246 & 0x7F) << v242;
            if ((v246 & 0x80) == 0) {
              goto LABEL_462;
            }
            v242 += 7;
            unint64_t v239 = v245;
            BOOL v76 = v243++ > 8;
            if (v76) {
              goto LABEL_468;
            }
          }
          goto LABEL_461;
        case 7u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v62 = (char *)*((void *)this + 5);
              do
              {
                unint64_t v111 = *((void *)this + 6);
                if ((unint64_t)v62 >= v111)
                {
                  unint64_t v112 = (char *)*((void *)this + 4);
                  uint64_t v113 = (v62 - v112) >> 2;
                  unint64_t v114 = v113 + 1;
                  if ((unint64_t)(v113 + 1) >> 62) {
                    goto LABEL_480;
                  }
                  uint64_t v115 = v111 - (void)v112;
                  if (v115 >> 1 > v114) {
                    unint64_t v114 = v115 >> 1;
                  }
                  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v116 = v114;
                  }
                  if (v116)
                  {
                    unint64_t v116 = (unint64_t)sub_2572C76F0(v116);
                    unint64_t v112 = (char *)*((void *)this + 4);
                    unint64_t v62 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v117 = 0;
                  }
                  unint64_t v118 = (_DWORD *)(v116 + 4 * v113);
                  *unint64_t v118 = 0;
                  char v119 = (char *)(v118 + 1);
                  while (v62 != v112)
                  {
                    int v120 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--unint64_t v118 = v120;
                  }
                  *((void *)this + 4) = v118;
                  *((void *)this + 5) = v119;
                  *((void *)this + 6) = v116 + 4 * v117;
                  if (v112) {
                    operator delete(v112);
                  }
                  unint64_t v62 = v119;
                }
                else
                {
                  *(_DWORD *)unint64_t v62 = 0;
                  v62 += 4;
                }
                *((void *)this + 5) = v62;
                unint64_t v122 = *((void *)a2 + 1);
                unint64_t v121 = *((void *)a2 + 2);
                uint64_t v123 = *(void *)a2;
                if (v122 > 0xFFFFFFFFFFFFFFF5 || v122 + 10 > v121)
                {
                  char v125 = 0;
                  unsigned int v126 = 0;
                  uint64_t v132 = 0;
                  if (v121 <= v122) {
                    uint64_t v127 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v127 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v127 == v122) {
                      goto LABEL_278;
                    }
                    unint64_t v128 = v122++;
                    char v129 = *(unsigned char *)(v123 + v128);
                    *((void *)a2 + 1) = v122;
                    v132 |= (unint64_t)(v129 & 0x7F) << v125;
                    if ((v129 & 0x80) == 0) {
                      break;
                    }
                    v125 += 7;
                    BOOL v76 = v126++ > 8;
                    if (v76)
                    {
                      LODWORD(v132) = 0;
                      goto LABEL_229;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v132) = 0;
                  }
LABEL_229:
                  unint64_t v133 = v128 + 1;
                }
                else
                {
                  char v130 = 0;
                  unsigned int v131 = 0;
                  uint64_t v132 = 0;
                  while (1)
                  {
                    unint64_t v133 = v122 + 1;
                    *((void *)a2 + 1) = v122 + 1;
                    char v134 = *(unsigned char *)(v123 + v122);
                    v132 |= (unint64_t)(v134 & 0x7F) << v130;
                    if ((v134 & 0x80) == 0) {
                      break;
                    }
                    v130 += 7;
                    unint64_t v122 = v133;
                    BOOL v76 = v131++ > 8;
                    if (v76)
                    {
                      LODWORD(v132) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v62 - 1) = v132;
              }
              while (v133 < v121 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_294;
          }
          char v172 = (char *)*((void *)this + 5);
          unint64_t v171 = *((void *)this + 6);
          if ((unint64_t)v172 >= v171)
          {
            uint64_t v205 = (char *)*((void *)this + 4);
            uint64_t v206 = (v172 - v205) >> 2;
            unint64_t v207 = v206 + 1;
            if ((unint64_t)(v206 + 1) >> 62) {
              goto LABEL_480;
            }
            uint64_t v208 = v171 - (void)v205;
            if (v208 >> 1 > v207) {
              unint64_t v207 = v208 >> 1;
            }
            if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v209 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v209 = v207;
            }
            if (v209)
            {
              unint64_t v209 = (unint64_t)sub_2572C76F0(v209);
              uint64_t v205 = (char *)*((void *)this + 4);
              char v172 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v210 = 0;
            }
            unint64_t v249 = (_DWORD *)(v209 + 4 * v206);
            *unint64_t v249 = 0;
            char v168 = v249 + 1;
            while (v172 != v205)
            {
              int v250 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *--unint64_t v249 = v250;
            }
            *((void *)this + 4) = v249;
            *((void *)this + 5) = v168;
            *((void *)this + 6) = v209 + 4 * v210;
            if (v205) {
              operator delete(v205);
            }
          }
          else
          {
            *(_DWORD *)char v172 = 0;
            char v168 = v172 + 4;
          }
          *((void *)this + 5) = v168;
          unint64_t v251 = *((void *)a2 + 1);
          unint64_t v252 = *((void *)a2 + 2);
          uint64_t v253 = *(void *)a2;
          char v254 = 0;
          unsigned int v255 = 0;
          if (v251 <= 0xFFFFFFFFFFFFFFF5 && v251 + 10 <= v252)
          {
            uint64_t v234 = 0;
            while (1)
            {
              unint64_t v259 = v251 + 1;
              *((void *)a2 + 1) = v251 + 1;
              char v260 = *(unsigned char *)(v253 + v251);
              v234 |= (unint64_t)(v260 & 0x7F) << v254;
              if ((v260 & 0x80) == 0) {
                goto LABEL_469;
              }
              v254 += 7;
              unint64_t v251 = v259;
              BOOL v76 = v255++ > 8;
              if (v76) {
                goto LABEL_468;
              }
            }
          }
          uint64_t v234 = 0;
          if (v252 <= v251) {
            unint64_t v252 = *((void *)a2 + 1);
          }
          while (v252 != v251)
          {
            unint64_t v257 = v251 + 1;
            char v258 = *(unsigned char *)(v253 + v251);
            *((void *)a2 + 1) = v257;
            v234 |= (unint64_t)(v258 & 0x7F) << v254;
            if ((v258 & 0x80) == 0) {
              goto LABEL_462;
            }
            v254 += 7;
            unint64_t v251 = v257;
            BOOL v76 = v255++ > 8;
            if (v76) {
              goto LABEL_468;
            }
          }
          goto LABEL_461;
        case 8u:
          if (v18 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v62 = (char *)*((void *)this + 8);
              do
              {
                unint64_t v135 = *((void *)this + 9);
                if ((unint64_t)v62 >= v135)
                {
                  char v136 = (char *)*((void *)this + 7);
                  uint64_t v137 = (v62 - v136) >> 2;
                  unint64_t v138 = v137 + 1;
                  if ((unint64_t)(v137 + 1) >> 62) {
                    goto LABEL_480;
                  }
                  uint64_t v139 = v135 - (void)v136;
                  if (v139 >> 1 > v138) {
                    unint64_t v138 = v139 >> 1;
                  }
                  if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v140 = v138;
                  }
                  if (v140)
                  {
                    unint64_t v140 = (unint64_t)sub_2572C76F0(v140);
                    char v136 = (char *)*((void *)this + 7);
                    unint64_t v62 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v141 = 0;
                  }
                  unint64_t v142 = (_DWORD *)(v140 + 4 * v137);
                  *unint64_t v142 = 0;
                  uint64_t v143 = (char *)(v142 + 1);
                  while (v62 != v136)
                  {
                    int v144 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *--unint64_t v142 = v144;
                  }
                  *((void *)this + 7) = v142;
                  *((void *)this + 8) = v143;
                  *((void *)this + 9) = v140 + 4 * v141;
                  if (v136) {
                    operator delete(v136);
                  }
                  unint64_t v62 = v143;
                }
                else
                {
                  *(_DWORD *)unint64_t v62 = 0;
                  v62 += 4;
                }
                *((void *)this + 8) = v62;
                unint64_t v146 = *((void *)a2 + 1);
                unint64_t v145 = *((void *)a2 + 2);
                uint64_t v147 = *(void *)a2;
                if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v145)
                {
                  char v154 = 0;
                  unsigned int v155 = 0;
                  uint64_t v156 = 0;
                  while (1)
                  {
                    unint64_t v157 = v146 + 1;
                    *((void *)a2 + 1) = v146 + 1;
                    char v158 = *(unsigned char *)(v147 + v146);
                    v156 |= (unint64_t)(v158 & 0x7F) << v154;
                    if ((v158 & 0x80) == 0) {
                      goto LABEL_275;
                    }
                    v154 += 7;
                    unint64_t v146 = v157;
                    BOOL v76 = v155++ > 8;
                    if (v76)
                    {
                      LODWORD(v156) = 0;
                      goto LABEL_275;
                    }
                  }
                }
                char v149 = 0;
                unsigned int v150 = 0;
                uint64_t v156 = 0;
                if (v145 <= v146) {
                  uint64_t v151 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v151 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v151 == v146)
                  {
LABEL_278:
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v62 - 1) = 0;
                    goto LABEL_294;
                  }
                  unint64_t v152 = v146++;
                  char v153 = *(unsigned char *)(v147 + v152);
                  *((void *)a2 + 1) = v146;
                  v156 |= (unint64_t)(v153 & 0x7F) << v149;
                  if ((v153 & 0x80) == 0) {
                    break;
                  }
                  v149 += 7;
                  BOOL v76 = v150++ > 8;
                  if (v76)
                  {
                    LODWORD(v156) = 0;
                    goto LABEL_274;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v156) = 0;
                }
LABEL_274:
                unint64_t v157 = v152 + 1;
LABEL_275:
                *((_DWORD *)v62 - 1) = v156;
              }
              while (v157 < v145 && !*((unsigned char *)a2 + 24));
            }
LABEL_294:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v174 = (char *)*((void *)this + 8);
            unint64_t v173 = *((void *)this + 9);
            if ((unint64_t)v174 >= v173)
            {
              char v211 = (char *)*((void *)this + 7);
              uint64_t v212 = (v174 - v211) >> 2;
              unint64_t v213 = v212 + 1;
              if ((unint64_t)(v212 + 1) >> 62) {
LABEL_480:
              }
                sub_2570AFD0C();
              uint64_t v214 = v173 - (void)v211;
              if (v214 >> 1 > v213) {
                unint64_t v213 = v214 >> 1;
              }
              if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v215 = v213;
              }
              if (v215)
              {
                unint64_t v215 = (unint64_t)sub_2572C76F0(v215);
                char v211 = (char *)*((void *)this + 7);
                unint64_t v174 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v216 = 0;
              }
              unint64_t v261 = (_DWORD *)(v215 + 4 * v212);
              *unint64_t v261 = 0;
              char v168 = v261 + 1;
              while (v174 != v211)
              {
                int v262 = *((_DWORD *)v174 - 1);
                v174 -= 4;
                *--unint64_t v261 = v262;
              }
              *((void *)this + 7) = v261;
              *((void *)this + 8) = v168;
              *((void *)this + 9) = v215 + 4 * v216;
              if (v211) {
                operator delete(v211);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v174 = 0;
              char v168 = v174 + 4;
            }
            *((void *)this + 8) = v168;
            unint64_t v263 = *((void *)a2 + 1);
            unint64_t v264 = *((void *)a2 + 2);
            uint64_t v265 = *(void *)a2;
            char v266 = 0;
            unsigned int v267 = 0;
            if (v263 > 0xFFFFFFFFFFFFFFF5 || v263 + 10 > v264)
            {
              uint64_t v234 = 0;
              if (v264 <= v263) {
                unint64_t v264 = *((void *)a2 + 1);
              }
              while (v264 != v263)
              {
                unint64_t v269 = v263 + 1;
                char v270 = *(unsigned char *)(v265 + v263);
                *((void *)a2 + 1) = v269;
                v234 |= (unint64_t)(v270 & 0x7F) << v266;
                if ((v270 & 0x80) == 0)
                {
LABEL_462:
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v234) = 0;
                  }
                  goto LABEL_469;
                }
                v266 += 7;
                unint64_t v263 = v269;
                BOOL v76 = v267++ > 8;
                if (v76)
                {
LABEL_468:
                  LODWORD(v234) = 0;
                  goto LABEL_469;
                }
              }
LABEL_461:
              LODWORD(v234) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              uint64_t v234 = 0;
              while (1)
              {
                unint64_t v271 = v263 + 1;
                *((void *)a2 + 1) = v263 + 1;
                char v272 = *(unsigned char *)(v265 + v263);
                v234 |= (unint64_t)(v272 & 0x7F) << v266;
                if ((v272 & 0x80) == 0) {
                  break;
                }
                v266 += 7;
                unint64_t v263 = v271;
                BOOL v76 = v267++ > 8;
                if (v76) {
                  goto LABEL_468;
                }
              }
            }
LABEL_469:
            *(v168 - 1) = v234;
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_470;
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_21;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v76 = v15++ > 8;
    }
    while (!v76);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_470:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::NonlinearBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(float **)(this + 128);
  uint64_t v5 = *(float **)(this + 136);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v7 = *(float **)(v3 + 104);
  uint64_t v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  unsigned int v10 = *(float **)(v3 + 152);
  unint64_t v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12);
  }
  if (*(unsigned char *)(v3 + 180)) {
    this = PB::Writer::write(a2, *(float *)(v3 + 176));
  }
  uint64_t v13 = *(void *)(v3 + 80);
  uint64_t v14 = *(void *)(v3 + 88);
  while (v13 != v14)
  {
    v13 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v15 = *(void *)(v3 + 8);
  uint64_t v16 = *(void *)(v3 + 16);
  while (v15 != v16)
  {
    v15 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v17 = *(void *)(v3 + 32);
  uint64_t v18 = *(void *)(v3 + 40);
  while (v17 != v18)
  {
    v17 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v20 = *(void *)(v3 + 56);
  uint64_t v19 = *(void *)(v3 + 64);
  while (v20 != v19)
  {
    v20 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::NonlinearBiasFit::hash_value(CMMsl::NonlinearBiasFit *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 180))
  {
    float v6 = *((float *)this + 44);
    uint64_t v5 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = v3 ^ v2 ^ v4 ^ v5;
  uint64_t v8 = PBHashBytes();
  uint64_t v9 = v8 ^ PBHashBytes();
  uint64_t v10 = v7 ^ v9 ^ PBHashBytes();
  return v10 ^ PBHashBytes();
}

void CMMsl::ODTPose::~ODTPose(CMMsl::ODTPose *this)
{
  *(void *)this = &unk_270643748;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ODTPose::~ODTPose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::ODTPose *CMMsl::ODTPose::ODTPose(CMMsl::ODTPose *this, const CMMsl::ODTPose *a2)
{
  *(void *)this = &unk_270643748;
  *((void *)this + 1) = 0;
  uint64_t v3 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v4 = *((void *)a2 + 4);
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 4) = v4;
  }
  if (this != a2) {
    sub_2572C73EC(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  return this;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, const CMMsl::ODTPose *a2)
{
  if ((const CMMsl::ODTPose *)a1 != a2)
  {
    CMMsl::ODTPose::ODTPose((CMMsl::ODTPose *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ODTPose *a2, CMMsl::ODTPose *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643748;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(void *)a1 = &unk_270643748;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v12 = &unk_270643748;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    int v16 = v7;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v4;
    uint64_t v15 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v13 = v9;
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v5;
    uint64_t v14 = v10;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v12);
  }
  return a1;
}

uint64_t CMMsl::ODTPose::formatText(CMMsl::ODTPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "pose", v7);
  }
  if (*((unsigned char *)this + 40)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::ODTPose::readFrom(CMMsl::ODTPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if ((v11 & 7) != 2)
        {
          unint64_t v35 = (char *)*((void *)this + 2);
          unint64_t v34 = *((void *)this + 3);
          if ((unint64_t)v35 >= v34)
          {
            unsigned int v37 = (char *)*((void *)this + 1);
            uint64_t v38 = (v35 - v37) >> 3;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
LABEL_82:
            }
              sub_2570AFD0C();
            uint64_t v40 = v34 - (void)v37;
            if (v40 >> 2 > v39) {
              unint64_t v39 = v40 >> 2;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              unint64_t v41 = (unint64_t)sub_2572C7528(v41);
              unsigned int v37 = (char *)*((void *)this + 1);
              unint64_t v35 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v42 = 0;
            }
            uint64_t v43 = (void *)(v41 + 8 * v38);
            *uint64_t v43 = 0;
            char v36 = v43 + 1;
            while (v35 != v37)
            {
              uint64_t v44 = *((void *)v35 - 1);
              v35 -= 8;
              *--uint64_t v43 = v44;
            }
            *((void *)this + 1) = v43;
            *((void *)this + 2) = v36;
            *((void *)this + 3) = v41 + 8 * v42;
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *(void *)unint64_t v35 = 0;
            char v36 = v35 + 8;
          }
          *((void *)this + 2) = v36;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)a2 + 2))
          {
LABEL_72:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_75;
          }
          *(v36 - 1) = *(void *)(*(void *)a2 + v45);
          goto LABEL_74;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        while (v20 < v21 && !*((unsigned char *)a2 + 24))
        {
          uint64_t v23 = (char *)*((void *)this + 2);
          unint64_t v22 = *((void *)this + 3);
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v25 = (char *)*((void *)this + 1);
            uint64_t v26 = (v23 - v25) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              goto LABEL_82;
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              unint64_t v29 = (unint64_t)sub_2572C7528(v29);
              uint64_t v25 = (char *)*((void *)this + 1);
              uint64_t v23 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v30 = 0;
            }
            int v31 = (void *)(v29 + 8 * v26);
            *int v31 = 0;
            uint64_t v24 = v31 + 1;
            while (v23 != v25)
            {
              uint64_t v32 = *((void *)v23 - 1);
              v23 -= 8;
              *--int v31 = v32;
            }
            *((void *)this + 1) = v31;
            *((void *)this + 2) = v24;
            *((void *)this + 3) = v29 + 8 * v30;
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(void *)uint64_t v23 = 0;
            uint64_t v24 = v23 + 8;
          }
          *((void *)this + 2) = v24;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2))
          {
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v24 - 1) = *(void *)(*(void *)a2 + v33);
          unint64_t v21 = *((void *)a2 + 2);
          unint64_t v20 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v20;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v11 >> 3) == 1)
        {
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v19 = *((void *)a2 + 1);
          if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
            goto LABEL_72;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
LABEL_74:
          *((void *)a2 + 1) += 8;
          goto LABEL_75;
        }
LABEL_26:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
LABEL_75:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ODTPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 40)) {
    this = PB::Writer::write(a2, *(double *)(this + 32));
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    this = PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t CMMsl::ODTPose::hash_value(CMMsl::ODTPose *this)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 4);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::Odometer::~Odometer(CMMsl::Odometer *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this, const CMMsl::Odometer *a2)
{
  *(void *)this = &unk_270643780;
  *(_DWORD *)(this + 100) = 0;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 8);
    __int16 v3 = 128;
    *(_WORD *)(this + 100) = 128;
    *(void *)(this + 64) = v4;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 100) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 100) = v3;
    *(void *)(this + 8) = v6;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 24) = v7;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v8 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 56) = v8;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v9 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 48) = v9;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v10 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v11 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 32) = v11;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v12 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 72) = v12;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v13;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v14;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v15 = *((_DWORD *)a2 + 23);
  v3 |= 0x1000u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v15;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      return this;
    }
LABEL_30:
    char v17 = *((unsigned char *)a2 + 96);
    *(_WORD *)(this + 100) = v3 | 0x2000;
    *(unsigned char *)(this + 96) = v17;
    return this;
  }
LABEL_29:
  int v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v16;
  if ((*((_WORD *)a2 + 50) & 0x2000) != 0) {
    goto LABEL_30;
  }
  return this;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *a1, const CMMsl::Odometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::Odometer::Odometer((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Odometer *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Odometer *a2, CMMsl::Odometer *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  double result = *((double *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((double *)a2 + 9) = result;
  int v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  int v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  int v15 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v15;
  int v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v16;
  return result;
}

double CMMsl::Odometer::Odometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643780;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Odometer::Odometer((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Odometer *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::Odometer::formatText(CMMsl::Odometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 50);
  if (v5)
  {
    PB::TextFormatter::format(a2, "accuracy", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 50);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "batchedLocationFixType");
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "gpsAltitude", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "gpsSpeedAccuracy", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "originDevice");
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quality");
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "rawSpeed", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "trackRunOdometerHasBeenCorrected");
  if ((*((_WORD *)this + 50) & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "type");
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Odometer::readFrom(CMMsl::Odometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_132;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 50) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 2u:
        *((_WORD *)this + 50) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 3u:
        *((_WORD *)this + 50) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 4u:
        *((_WORD *)this + 50) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 5u:
        *((_WORD *)this + 50) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 6u:
        *((_WORD *)this + 50) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 7u:
        *((_WORD *)this + 50) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 8u:
        *((_WORD *)this + 50) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_49;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_111;
      case 9u:
        *((_WORD *)this + 50) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
LABEL_111:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_49:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xAu:
        *((_WORD *)this + 50) |= 0x400u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_116;
            }
            unint64_t v48 = v20++;
            char v49 = *(unsigned char *)(v21 + v48);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_115:
              unint64_t v2 = v48 + 1;
              goto LABEL_116;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_115;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_116;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_116:
        *((_DWORD *)this + 21) = v24;
        break;
      case 0xBu:
        *((_WORD *)this + 50) |= 0x800u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_121;
            }
            unint64_t v52 = v26++;
            char v53 = *(unsigned char *)(v27 + v52);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_120:
              unint64_t v2 = v52 + 1;
              goto LABEL_121;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_120;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_121;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_121:
        *((_DWORD *)this + 22) = v30;
        break;
      case 0xCu:
        *((_WORD *)this + 50) |= 0x1000u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_126;
            }
            unint64_t v56 = v32++;
            char v57 = *(unsigned char *)(v33 + v56);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_125:
              unint64_t v2 = v56 + 1;
              goto LABEL_126;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_125;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_126;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_126:
        *((_DWORD *)this + 23) = v36;
        break;
      case 0xDu:
        *((_WORD *)this + 50) |= 0x200u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_131;
            }
            unint64_t v60 = v38++;
            char v61 = *(unsigned char *)(v39 + v60);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_130:
              unint64_t v2 = v60 + 1;
              goto LABEL_131;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_130;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_131;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_131:
        *((_DWORD *)this + 20) = v42;
        break;
      case 0xEu:
        *((_WORD *)this + 50) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v45 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v45 = v44 != 0;
        }
        *((unsigned char *)this + 96) = v45;
        break;
      default:
        goto LABEL_19;
    }
LABEL_132:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::Odometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 100) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::Odometer::hash_value(CMMsl::Odometer *this)
{
  __int16 v1 = *((_WORD *)this + 50);
  if ((v1 & 0x80) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_35:
    double v3 = 0.0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_36:
    double v4 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_37:
    double v5 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_38:
    double v6 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_39:
    double v7 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_40:
    double v8 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_41:
    double v9 = 0.0;
    if ((*((_WORD *)this + 50) & 0x100) != 0) {
      goto LABEL_24;
    }
LABEL_42:
    double v10 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0) {
      goto LABEL_27;
    }
    goto LABEL_43;
  }
  double v2 = *((double *)this + 8);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_35;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_6:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_37;
  }
LABEL_9:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_12:
  double v6 = *((double *)this + 7);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_39;
  }
LABEL_15:
  double v7 = *((double *)this + 6);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_40;
  }
LABEL_18:
  double v8 = *((double *)this + 5);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_41;
  }
LABEL_21:
  double v9 = *((double *)this + 4);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x100) == 0) {
    goto LABEL_42;
  }
LABEL_24:
  double v10 = *((double *)this + 9);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_27:
    uint64_t v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 50) & 0x800) != 0) {
      goto LABEL_28;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 50) & 0x800) != 0)
  {
LABEL_28:
    uint64_t v12 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 50) & 0x1000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 50) & 0x1000) != 0)
  {
LABEL_29:
    uint64_t v13 = *((unsigned int *)this + 23);
    if ((*((_WORD *)this + 50) & 0x200) != 0) {
      goto LABEL_30;
    }
LABEL_46:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 50) & 0x2000) != 0) {
      goto LABEL_31;
    }
LABEL_47:
    uint64_t v15 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
  }
LABEL_45:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0) {
    goto LABEL_46;
  }
LABEL_30:
  uint64_t v14 = *((unsigned int *)this + 20);
  if ((*((_WORD *)this + 50) & 0x2000) == 0) {
    goto LABEL_47;
  }
LABEL_31:
  uint64_t v15 = *((unsigned __int8 *)this + 96);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
}

void CMMsl::OdometerWithAltitude::~OdometerWithAltitude(CMMsl::OdometerWithAltitude *this)
{
  *(void *)this = &unk_2706437B8;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::OdometerWithAltitude::~OdometerWithAltitude(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this, const CMMsl::OdometerWithAltitude *a2)
{
  *(void *)this = &unk_2706437B8;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  if (*((void *)a2 + 9)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    *(unsigned char *)(this + 80) |= 4u;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_5:
      if ((v2 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)a2 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)a2 + 4);
  *(unsigned char *)(this + 80) |= 8u;
  *(void *)(this + 32) = v5;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_6:
    if ((v2 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v6 = *((void *)a2 + 7);
  *(unsigned char *)(this + 80) |= 0x40u;
  *(void *)(this + 56) = v6;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_7:
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = *((void *)a2 + 8);
  *(unsigned char *)(this + 80) |= 0x80u;
  *(void *)(this + 64) = v7;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 2) == 0)
  {
LABEL_8:
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *((void *)a2 + 2);
  *(unsigned char *)(this + 80) |= 2u;
  *(void *)(this + 16) = v8;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = *((void *)a2 + 1);
  *(unsigned char *)(this + 80) |= 1u;
  *(void *)(this + 8) = v9;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_19:
  uint64_t v10 = *((void *)a2 + 6);
  *(unsigned char *)(this + 80) |= 0x20u;
  *(void *)(this + 48) = v10;
  if ((*((unsigned char *)a2 + 80) & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v3 = *((void *)a2 + 5);
  *(unsigned char *)(this + 80) |= 0x10u;
  *(void *)(this + 40) = v3;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, const CMMsl::OdometerWithAltitude *a2)
{
  if ((const CMMsl::OdometerWithAltitude *)a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v5;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    long long v14 = v6;
    CMMsl::OdometerWithAltitude::~OdometerWithAltitude((CMMsl::OdometerWithAltitude *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OdometerWithAltitude *a2, CMMsl::OdometerWithAltitude *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706437B8;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v5;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    long long v14 = v6;
    CMMsl::OdometerWithAltitude::~OdometerWithAltitude((CMMsl::OdometerWithAltitude *)v10);
  }
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::formatText(CMMsl::OdometerWithAltitude *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 80);
  if (v5)
  {
    PB::TextFormatter::format(a2, "gpsCourseAccuracy", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((unsigned char *)this + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsCourseRadians", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 5));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    PB::TextFormatter::format(a2, "smoothedGPSAltitude", *((double *)this + 7));
    if ((*((unsigned char *)this + 80) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 6));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 0x40) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "smoothedGPSAltitudeUncertainty", *((double *)this + 8));
LABEL_9:
  uint64_t v6 = *((void *)this + 9);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::OdometerWithAltitude::readFrom(CMMsl::OdometerWithAltitude *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        *((unsigned char *)this + 80) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v20);
        goto LABEL_49;
      case 3u:
        *((unsigned char *)this + 80) |= 8u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v21);
        goto LABEL_49;
      case 4u:
        *((unsigned char *)this + 80) |= 0x40u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v22);
        goto LABEL_49;
      case 5u:
        *((unsigned char *)this + 80) |= 0x80u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v23);
        goto LABEL_49;
      case 6u:
        *((unsigned char *)this + 80) |= 2u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v24);
        goto LABEL_49;
      case 7u:
        *((unsigned char *)this + 80) |= 1u;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v25);
        goto LABEL_49;
      case 8u:
        *((unsigned char *)this + 80) |= 0x20u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v26);
        goto LABEL_49;
      case 9u:
        *((unsigned char *)this + 80) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 5) = *(void *)(*(void *)a2 + v27);
LABEL_49:
          *((void *)a2 + 1) += 8;
        }
        else
        {
LABEL_47:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_50:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_50;
  }
  return result;
}

uint64_t CMMsl::OdometerWithAltitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 72);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24));
    char v5 = *(unsigned char *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
    if ((*(unsigned char *)(v3 + 80) & 0x10) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v5 & 0x10) == 0) {
    return this;
  }
LABEL_19:
  double v6 = *(double *)(v3 + 40);
  return PB::Writer::write(a2, v6);
}

unint64_t CMMsl::OdometerWithAltitude::hash_value(CMMsl::OdometerWithAltitude *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2) {
    unint64_t v2 = CMMsl::Odometer::hash_value((CMMsl::Odometer *)v2);
  }
  if ((*((unsigned char *)this + 80) & 4) == 0)
  {
    double v3 = 0.0;
    if ((*((unsigned char *)this + 80) & 8) != 0) {
      goto LABEL_5;
    }
LABEL_29:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 80) & 0x40) != 0) {
      goto LABEL_8;
    }
LABEL_30:
    double v5 = 0.0;
    if ((*((unsigned char *)this + 80) & 0x80) != 0) {
      goto LABEL_11;
    }
LABEL_31:
    double v6 = 0.0;
    if ((*((unsigned char *)this + 80) & 2) != 0) {
      goto LABEL_14;
    }
LABEL_32:
    double v7 = 0.0;
    if (*((unsigned char *)this + 80)) {
      goto LABEL_17;
    }
LABEL_33:
    double v8 = 0.0;
    if ((*((unsigned char *)this + 80) & 0x20) != 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 8) == 0) {
    goto LABEL_29;
  }
LABEL_5:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 0x40) == 0) {
    goto LABEL_30;
  }
LABEL_8:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_11:
  double v6 = *((double *)this + 8);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 2) == 0) {
    goto LABEL_32;
  }
LABEL_14:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 1) == 0) {
    goto LABEL_33;
  }
LABEL_17:
  double v8 = *((double *)this + 1);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 0x20) != 0)
  {
LABEL_20:
    double v9 = *((double *)this + 6);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((*((unsigned char *)this + 80) & 0x10) != 0) {
      goto LABEL_23;
    }
LABEL_35:
    double v10 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
  }
LABEL_34:
  double v9 = 0.0;
  if ((*((unsigned char *)this + 80) & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_23:
  double v10 = *((double *)this + 5);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
}

uint64_t CMMsl::OdometerWithAltitude::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

void CMMsl::OnsetHeartRateData::~OnsetHeartRateData(CMMsl::OnsetHeartRateData *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this, const CMMsl::OnsetHeartRateData *a2)
{
  *(void *)this = &unk_2706437F0;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) != 0)
  {
    int v4 = *((_DWORD *)a2 + 13);
    __int16 v3 = 64;
    *(_WORD *)(this + 68) = 64;
    *(_DWORD *)(this + 52) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(void *)(this + 16) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 8) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v8 = *((unsigned char *)a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(unsigned char *)(this + 64) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v10 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 32) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 24) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_22:
    int v13 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 68) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v13;
    return this;
  }
LABEL_21:
  int v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v12;
  if ((*((_WORD *)a2 + 34) & 0x20) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, const CMMsl::OnsetHeartRateData *a2)
{
  if ((const CMMsl::OnsetHeartRateData *)a1 != a2)
  {
    CMMsl::OnsetHeartRateData::OnsetHeartRateData((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    LOBYTE(v3) = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v14;
    char v14 = v3;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OnsetHeartRateData *a2, CMMsl::OnsetHeartRateData *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  int v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  int v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  LOBYTE(v5) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v5;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  int v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  return result;
}

double CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706437F0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::OnsetHeartRateData::OnsetHeartRateData((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    LOBYTE(v3) = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v14;
    char v14 = v3;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::OnsetHeartRateData::formatText(CMMsl::OnsetHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if (v5)
  {
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "context");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "dataSource");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "error");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "interpolation");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "mode");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "sinceLastGood", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  if ((*((_WORD *)this + 34) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::OnsetHeartRateData::readFrom(CMMsl::OnsetHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_120;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 0x40u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_104;
            }
            unint64_t v48 = v20++;
            char v49 = *(unsigned char *)(v21 + v48);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_103:
              unint64_t v2 = v48 + 1;
              goto LABEL_104;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_103;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_104;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_104:
        *((_DWORD *)this + 13) = v24;
        break;
      case 2u:
        *((_WORD *)this + 34) |= 0x80u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_109;
            }
            unint64_t v52 = v26++;
            char v53 = *(unsigned char *)(v27 + v52);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_108:
              unint64_t v2 = v52 + 1;
              goto LABEL_109;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_108;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_109;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_109:
        *((_DWORD *)this + 14) = v30;
        break;
      case 3u:
        *((_WORD *)this + 34) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_53;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 4u:
        *((_WORD *)this + 34) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_53;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 5u:
        *((_WORD *)this + 34) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 64) = v33;
        break;
      case 6u:
        *((_WORD *)this + 34) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_53;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 7u:
        *((_WORD *)this + 34) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_53;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_99;
      case 8u:
        *((_WORD *)this + 34) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_99:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_53:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 34) |= 0x100u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v56 = v34++;
            char v57 = *(unsigned char *)(v35 + v56);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0) {
              break;
            }
            v54 += 7;
            BOOL v14 = v55++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_113:
              unint64_t v2 = v56 + 1;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_113;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v2 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_114;
          }
          v36 += 7;
          unint64_t v34 = v2;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_114:
        *((_DWORD *)this + 15) = v38;
        break;
      case 0xAu:
        *((_WORD *)this + 34) |= 0x20u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_119;
            }
            unint64_t v60 = v40++;
            char v61 = *(unsigned char *)(v41 + v60);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_118:
              unint64_t v2 = v60 + 1;
              goto LABEL_119;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_118;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_119;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_119:
        *((_DWORD *)this + 12) = v44;
        break;
      default:
        goto LABEL_19;
    }
LABEL_120:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::OnsetHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 68) & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_21:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::OnsetHeartRateData::hash_value(CMMsl::OnsetHeartRateData *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 0x40) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 13);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 14);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
LABEL_24:
      double v4 = 0.0;
      if (v1) {
        goto LABEL_7;
      }
LABEL_25:
      double v5 = 0.0;
      if ((*((_WORD *)this + 34) & 0x200) != 0) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_4:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_7:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x200) != 0)
  {
LABEL_10:
    uint64_t v6 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10) != 0) {
      goto LABEL_11;
    }
LABEL_27:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_14;
    }
LABEL_28:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_17;
    }
LABEL_29:
    double v9 = 0.0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_20;
    }
LABEL_30:
    uint64_t v10 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_31:
    uint64_t v11 = 0;
    return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11;
  }
LABEL_26:
  uint64_t v6 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_11:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_29;
  }
LABEL_17:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_30;
  }
LABEL_20:
  uint64_t v10 = *((unsigned int *)this + 15);
  if ((v1 & 0x20) == 0) {
    goto LABEL_31;
  }
LABEL_21:
  uint64_t v11 = *((unsigned int *)this + 12);
  return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11;
}

void CMMsl::Orientation::~Orientation(CMMsl::Orientation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this, const CMMsl::Orientation *a2)
{
  *(void *)this = &unk_270643828;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::Orientation *CMMsl::Orientation::operator=(const CMMsl::Orientation *a1, const CMMsl::Orientation *a2)
{
  if (a1 != a2)
  {
    CMMsl::Orientation::Orientation((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Orientation *a2, CMMsl::Orientation *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Orientation::Orientation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643828;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643828;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Orientation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270643828;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Orientation::formatText(CMMsl::Orientation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "orientation");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Orientation::readFrom(CMMsl::Orientation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Orientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::Orientation::hash_value(CMMsl::Orientation *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::PDRAlgType::~PDRAlgType(CMMsl::PDRAlgType *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t this, const CMMsl::PDRAlgType *a2)
{
  *(void *)this = &unk_270643860;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PDRAlgType::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = &unk_270643860;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = &unk_270643860;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PDRAlgType *a2, CMMsl::PDRAlgType *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::PDRAlgType::formatText(CMMsl::PDRAlgType *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRAlgType::readFrom(CMMsl::PDRAlgType *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRAlgType::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::PDRAlgType::hash_value(CMMsl::PDRAlgType *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void CMMsl::PDRDOTEstimatorState::~PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this, const CMMsl::PDRDOTEstimatorState *a2)
{
  *(void *)this = &unk_270643898;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorState *a2)
{
  if ((const CMMsl::PDRDOTEstimatorState *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState((CMMsl::PDRDOTEstimatorState *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorState *a2, CMMsl::PDRDOTEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643898;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643898;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270643898;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorState::formatText(CMMsl::PDRDOTEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRDOTEstimatorState::readFrom(CMMsl::PDRDOTEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRDOTEstimatorState::hash_value(CMMsl::PDRDOTEstimatorState *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateArmSwing::~PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  *(void *)this = &unk_2706438D0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateArmSwing *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing((CMMsl::PDRDOTEstimatorStateArmSwing *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateArmSwing *a2, CMMsl::PDRDOTEstimatorStateArmSwing *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706438D0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706438D0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_2706438D0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::formatText(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::readFrom(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBody::~PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  *(void *)this = &unk_270643908;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody((CMMsl::PDRDOTEstimatorStateBody *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBody *a2, CMMsl::PDRDOTEstimatorStateBody *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643908;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643908;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270643908;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::formatText(CMMsl::PDRDOTEstimatorStateBody *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::readFrom(CMMsl::PDRDOTEstimatorStateBody *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::hash_value(CMMsl::PDRDOTEstimatorStateBody *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  *(void *)this = &unk_270643940;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PDRDOTEstimatorStateBodyDebug *CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  *(void *)this = &unk_270643940;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 72) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v6 = *((unsigned char *)a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*((unsigned char *)a2 + 72) & 8) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    char v10 = *((unsigned char *)a2 + 69);
    *((unsigned char *)this + 72) |= 8u;
    *((unsigned char *)this + 69) = v10;
    if ((*((unsigned char *)a2 + 72) & 4) == 0) {
      return this;
    }
    goto LABEL_8;
  }
  int v9 = *((_DWORD *)a2 + 16);
  *((unsigned char *)this + 72) |= 2u;
  *((_DWORD *)this + 16) = v9;
  char v6 = *((unsigned char *)a2 + 72);
  if ((v6 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    char v7 = *((unsigned char *)a2 + 68);
    *((unsigned char *)this + 72) |= 4u;
    *((unsigned char *)this + 68) = v7;
  }
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateBodyDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 69);
    *(unsigned char *)(a1 + 69) = v16;
    char v16 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v15;
    char v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBodyDebug *a2, CMMsl::PDRDOTEstimatorStateBodyDebug *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  float result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LOBYTE(v10) = *((unsigned char *)this + 69);
  *((unsigned char *)this + 69) = *((unsigned char *)a2 + 69);
  *((unsigned char *)a2 + 69) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643940;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 69);
    *(unsigned char *)(a1 + 69) = v16;
    char v16 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v15;
    char v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::formatText(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "dotVector", v7);
  }
  if ((*((unsigned char *)this + 72) & 4) != 0) {
    PB::TextFormatter::format(a2, "hasValidTNBFrame");
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "headingVector", v10);
  }
  char v11 = *((unsigned char *)this + 72);
  if ((v11 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "isPedestrian");
    char v11 = *((unsigned char *)this + 72);
    if ((v11 & 1) == 0)
    {
LABEL_9:
      if ((v11 & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((*((unsigned char *)this + 72) & 1) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  if ((*((unsigned char *)this + 72) & 2) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "uncertainty", *((float *)this + 16));
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::readFrom(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 72) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_123;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_126;
        case 2u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            while (v22 < v23 && !*((unsigned char *)a2 + 24))
            {
              char v25 = (char *)*((void *)this + 2);
              unint64_t v24 = *((void *)this + 3);
              if ((unint64_t)v25 >= v24)
              {
                unsigned int v27 = (char *)*((void *)this + 1);
                uint64_t v28 = (v25 - v27) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_134;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v31 = (unint64_t)sub_2572C76F0(v31);
                  unsigned int v27 = (char *)*((void *)this + 1);
                  char v25 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                BOOL v33 = (_DWORD *)(v31 + 4 * v28);
                *BOOL v33 = 0;
                char v26 = v33 + 1;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *--BOOL v33 = v34;
                }
                *((void *)this + 1) = v33;
                *((void *)this + 2) = v26;
                *((void *)this + 3) = v31 + 4 * v32;
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)char v25 = 0;
                char v26 = v25 + 4;
              }
              *((void *)this + 2) = v26;
              unint64_t v35 = *((void *)a2 + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
                goto LABEL_89;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)a2 + v35);
              unint64_t v23 = *((void *)a2 + 2);
              unint64_t v22 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v22;
            }
            goto LABEL_90;
          }
          unint64_t v60 = (char *)*((void *)this + 2);
          unint64_t v59 = *((void *)this + 3);
          if ((unint64_t)v60 >= v59)
          {
            uint64_t v64 = (char *)*((void *)this + 1);
            uint64_t v65 = (v60 - v64) >> 2;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              goto LABEL_134;
            }
            uint64_t v67 = v59 - (void)v64;
            if (v67 >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              unint64_t v68 = (unint64_t)sub_2572C76F0(v68);
              uint64_t v64 = (char *)*((void *)this + 1);
              unint64_t v60 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v69 = 0;
            }
            BOOL v76 = (_DWORD *)(v68 + 4 * v65);
            *BOOL v76 = 0;
            char v61 = v76 + 1;
            while (v60 != v64)
            {
              int v77 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--BOOL v76 = v77;
            }
            *((void *)this + 1) = v76;
            *((void *)this + 2) = v61;
            *((void *)this + 3) = v68 + 4 * v69;
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v60 = 0;
            char v61 = v60 + 4;
          }
          *((void *)this + 2) = v61;
          goto LABEL_121;
        case 3u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v36 = *((void *)a2 + 1);
            unint64_t v37 = *((void *)a2 + 2);
            while (v36 < v37 && !*((unsigned char *)a2 + 24))
            {
              char v39 = (char *)*((void *)this + 5);
              unint64_t v38 = *((void *)this + 6);
              if ((unint64_t)v39 >= v38)
              {
                uint64_t v41 = (char *)*((void *)this + 4);
                uint64_t v42 = (v39 - v41) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_134;
                }
                uint64_t v44 = v38 - (void)v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)sub_2572C76F0(v45);
                  uint64_t v41 = (char *)*((void *)this + 4);
                  char v39 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                unsigned int v47 = (_DWORD *)(v45 + 4 * v42);
                *unsigned int v47 = 0;
                unint64_t v40 = v47 + 1;
                while (v39 != v41)
                {
                  int v48 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *--unsigned int v47 = v48;
                }
                *((void *)this + 4) = v47;
                *((void *)this + 5) = v40;
                *((void *)this + 6) = v45 + 4 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *(_DWORD *)char v39 = 0;
                unint64_t v40 = v39 + 4;
              }
              *((void *)this + 5) = v40;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2))
              {
LABEL_89:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
              unint64_t v37 = *((void *)a2 + 2);
              unint64_t v36 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v36;
            }
LABEL_90:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v63 = (char *)*((void *)this + 5);
            unint64_t v62 = *((void *)this + 6);
            if ((unint64_t)v63 >= v62)
            {
              unint64_t v70 = (char *)*((void *)this + 4);
              uint64_t v71 = (v63 - v70) >> 2;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 62) {
LABEL_134:
              }
                sub_2570AFD0C();
              uint64_t v73 = v62 - (void)v70;
              if (v73 >> 1 > v72) {
                unint64_t v72 = v73 >> 1;
              }
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v72;
              }
              if (v74)
              {
                unint64_t v74 = (unint64_t)sub_2572C76F0(v74);
                unint64_t v70 = (char *)*((void *)this + 4);
                unint64_t v63 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v75 = 0;
              }
              unsigned int v78 = (_DWORD *)(v74 + 4 * v71);
              *unsigned int v78 = 0;
              char v61 = v78 + 1;
              while (v63 != v70)
              {
                int v79 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *--unsigned int v78 = v79;
              }
              *((void *)this + 4) = v78;
              *((void *)this + 5) = v61;
              *((void *)this + 6) = v74 + 4 * v75;
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v63 = 0;
              char v61 = v63 + 4;
            }
            *((void *)this + 5) = v61;
LABEL_121:
            unint64_t v80 = *((void *)a2 + 1);
            if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *((void *)a2 + 2))
            {
              *(v61 - 1) = *(_DWORD *)(*(void *)a2 + v80);
LABEL_125:
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_126:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_123:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 4u:
          *((unsigned char *)this + 72) |= 2u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_123;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_125;
        case 5u:
          *((unsigned char *)this + 72) |= 8u;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 >= *((void *)a2 + 2))
          {
            BOOL v54 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v52 = v51 + 1;
            int v53 = *(unsigned __int8 *)(*(void *)a2 + v51);
            *((void *)a2 + 1) = v52;
            BOOL v54 = v53 != 0;
          }
          *((unsigned char *)this + 69) = v54;
          goto LABEL_127;
        case 6u:
          *((unsigned char *)this + 72) |= 4u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 >= *((void *)a2 + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)a2 + v55);
            *((void *)a2 + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *((unsigned char *)this + 68) = v58;
          goto LABEL_127;
        default:
          goto LABEL_19;
      }
      goto LABEL_127;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_127:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 72)) {
    this = PB::Writer::write(a2, *(double *)(this + 56));
  }
  int v4 = *(float **)(v3 + 8);
  long long v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 72) & 4) == 0) {
      return this;
    }
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  if ((v10 & 4) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  if (*((unsigned char *)this + 72))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 72) & 2) == 0)
  {
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 72) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 72) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  float v8 = *((float *)this + 16);
  uint64_t v5 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 72) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v6 = *((unsigned __int8 *)this + 69);
  if ((*((unsigned char *)this + 72) & 4) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::PDRDOTEstimatorStateDebug::~PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  *(void *)this = &unk_270643978;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug((CMMsl::PDRDOTEstimatorStateDebug *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateDebug *a2, CMMsl::PDRDOTEstimatorStateDebug *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643978;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643978;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270643978;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::formatText(CMMsl::PDRDOTEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dotMeasurement", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotMeasurementUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::readFrom(CMMsl::PDRDOTEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::hash_value(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateHeading::~PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  *(void *)this = &unk_2706439B0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateHeading *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading((CMMsl::PDRDOTEstimatorStateHeading *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateHeading *a2, CMMsl::PDRDOTEstimatorStateHeading *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706439B0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706439B0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_2706439B0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::formatText(CMMsl::PDRDOTEstimatorStateHeading *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::readFrom(CMMsl::PDRDOTEstimatorStateHeading *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::hash_value(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::~PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  *(void *)this = &unk_2706439E8;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 5) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 9) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((unsigned char *)a2 + 40) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 40) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  if ((const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody((CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706439E8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706439E8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = &unk_2706439E8;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::formatText(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dotDeltaBufferMaxAbs", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotDeltaBufferVar", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "dotErrorEstimate", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "dotRelativeChangeOverBuffer", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "headingDeltaBufferVar", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "headingRelativeChangeOverBuffer", *((float *)this + 9));
  if (*((unsigned char *)this + 40)) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::readFrom(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_47;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_46;
      case 2u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 4u:
        *((unsigned char *)this + 40) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((unsigned char *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_45:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_46:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_47:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 28));
    if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 8);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 9);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 7);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 6);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  *(void *)this = &unk_270643A20;
  float v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PDRDOTMeasurementSelectorState *CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  *(void *)this = &unk_270643A20;
  *((void *)this + 1) = 0;
  float v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) = 1;
    *((void *)this + 4) = v6;
    char v5 = 5;
    if ((*((unsigned char *)a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*((unsigned char *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *((unsigned char *)this + 52) |= 2u;
    *((void *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  if ((const CMMsl::PDRDOTMeasurementSelectorState *)a1 != a2)
  {
    CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTMeasurementSelectorState *a2, CMMsl::PDRDOTMeasurementSelectorState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643A20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = &unk_270643A20;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v11 = &unk_270643A20;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v15 = *(void *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v12 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 32);
    long long v9 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    long long v14 = v8;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::formatText(CMMsl::PDRDOTMeasurementSelectorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 52) & 4) != 0) {
    PB::TextFormatter::format(a2, "placementFiltered");
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbabilityFiltered", v7);
  }
  char v8 = *((unsigned char *)this + 52);
  if (v8)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::readFrom(CMMsl::PDRDOTMeasurementSelectorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 52) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_93;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
        goto LABEL_60;
      case 2u:
        *((unsigned char *)this + 52) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_82;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_68:
          LODWORD(v25) = 0;
          goto LABEL_82;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v46 = v20 + 1;
            char v47 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v46;
            v25 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              unint64_t v20 = v46;
              BOOL v14 = v45++ > 8;
              if (v14) {
                goto LABEL_68;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 12) = v25;
        break;
      case 3u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v31 = (char *)*((void *)this + 2);
            unint64_t v30 = *((void *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              BOOL v33 = (char *)*((void *)this + 1);
              uint64_t v34 = (v31 - v33) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_104;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                unint64_t v37 = (unint64_t)sub_2572C76F0(v37);
                BOOL v33 = (char *)*((void *)this + 1);
                unint64_t v31 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v38 = 0;
              }
              char v39 = (_DWORD *)(v37 + 4 * v34);
              *char v39 = 0;
              uint64_t v32 = v39 + 1;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--char v39 = v40;
              }
              *((void *)this + 1) = v39;
              *((void *)this + 2) = v32;
              *((void *)this + 3) = v37 + 4 * v38;
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v31 = 0;
              uint64_t v32 = v31 + 4;
            }
            *((void *)this + 2) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v49 = (char *)*((void *)this + 2);
          unint64_t v48 = *((void *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            unint64_t v51 = (char *)*((void *)this + 1);
            uint64_t v52 = (v49 - v51) >> 2;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
LABEL_104:
            }
              sub_2570AFD0C();
            uint64_t v54 = v48 - (void)v51;
            if (v54 >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              unint64_t v55 = (unint64_t)sub_2572C76F0(v55);
              unint64_t v51 = (char *)*((void *)this + 1);
              unint64_t v49 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v56 = 0;
            }
            int v57 = (_DWORD *)(v55 + 4 * v52);
            *int v57 = 0;
            unint64_t v50 = v57 + 1;
            while (v49 != v51)
            {
              int v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--int v57 = v58;
            }
            *((void *)this + 1) = v57;
            *((void *)this + 2) = v50;
            *((void *)this + 3) = v55 + 4 * v56;
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v49 = 0;
            unint64_t v50 = v49 + 4;
          }
          *((void *)this + 2) = v50;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((void *)a2 + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(void *)a2 + v59);
            uint64_t v43 = *((void *)a2 + 1) + 4;
LABEL_61:
            *((void *)a2 + 1) = v43;
          }
          else
          {
LABEL_93:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 4u:
        *((unsigned char *)this + 52) |= 2u;
        unint64_t v42 = *((void *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
          goto LABEL_93;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v42);
LABEL_60:
        uint64_t v43 = *((void *)a2 + 1) + 8;
        goto LABEL_61;
      default:
        goto LABEL_19;
    }
LABEL_94:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_94;
  }
  return 0;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::hash_value(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  if (*((unsigned char *)this + 52))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 52) & 2) != 0)
  {
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ *(void *)&v5 ^ v4;
}

void CMMsl::PDRFeatures::~PDRFeatures(CMMsl::PDRFeatures *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRFeatures::PDRFeatures(CMMsl::PDRFeatures *this, const CMMsl::PDRFeatures *a2)
{
  *(void *)this = &unk_270643A58;
  *((_DWORD *)this + 27) = 0;
  int v2 = *((_DWORD *)a2 + 27);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 27) = 1;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 22);
    v3 |= 0x40000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 22) = LODWORD(result);
    int v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 24);
    v3 |= 0x100000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 24) = LODWORD(result);
    int v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 23) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 25) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 26) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 19) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 21) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_48:
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 27) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  if ((*((_DWORD *)a2 + 27) & 2) != 0) {
    goto LABEL_48;
  }
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, const CMMsl::PDRFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((CMMsl::PDRFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRFeatures *a2, CMMsl::PDRFeatures *a3)
{
  int v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRFeatures::PDRFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643A58;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PDRFeatures::formatText(CMMsl::PDRFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "pitchMean", *((float *)this + 6));
    int v5 = *((_DWORD *)this + 27);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pitchStd", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rollMeanAbs", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rollStd", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYHigh", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYPed", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZHigh", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZPed", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "rotRateInerXYMean", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotRateInerXYStd", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "rotRateInerZMean", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rotRateInerZStd", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYHigh", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYPed", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZHigh", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZPed", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelInerXYMean", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelInerXYStd", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelInerZMean", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelInerZStd", *((float *)this + 25));
  if ((*((_DWORD *)this + 27) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "yawStd", *((float *)this + 26));
LABEL_25:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRFeatures::readFrom(CMMsl::PDRFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_96;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 27) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_89;
      case 2u:
        *((_DWORD *)this + 27) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 3u:
        *((_DWORD *)this + 27) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 4u:
        *((_DWORD *)this + 27) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 5u:
        *((_DWORD *)this + 27) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 6u:
        *((_DWORD *)this + 27) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 7u:
        *((_DWORD *)this + 27) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 8u:
        *((_DWORD *)this + 27) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 9u:
        *((_DWORD *)this + 27) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0xAu:
        *((_DWORD *)this + 27) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0xBu:
        *((_DWORD *)this + 27) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0xCu:
        *((_DWORD *)this + 27) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0xDu:
        *((_DWORD *)this + 27) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0xEu:
        *((_DWORD *)this + 27) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0xFu:
        *((_DWORD *)this + 27) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x10u:
        *((_DWORD *)this + 27) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x11u:
        *((_DWORD *)this + 27) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x12u:
        *((_DWORD *)this + 27) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x13u:
        *((_DWORD *)this + 27) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x14u:
        *((_DWORD *)this + 27) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x15u:
        *((_DWORD *)this + 27) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_94;
      case 0x16u:
        *((_DWORD *)this + 27) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_92;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_94:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_95;
      case 0x17u:
        *((_DWORD *)this + 27) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_92:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_89:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_95:
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_96:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 108);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 108) & 2) == 0) {
      return this;
    }
    goto LABEL_47;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_47:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRFeatures::hash_value(CMMsl::PDRFeatures *this)
{
  int v1 = *((_DWORD *)this + 27);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_3;
    }
LABEL_72:
    uint64_t v4 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_6;
    }
LABEL_73:
    uint64_t v6 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_9;
    }
LABEL_74:
    uint64_t v8 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_12;
    }
LABEL_75:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_76:
    uint64_t v12 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_18;
    }
LABEL_77:
    uint64_t v14 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_21;
    }
LABEL_78:
    uint64_t v16 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_79:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_27;
    }
LABEL_80:
    uint64_t v20 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_30;
    }
LABEL_81:
    uint64_t v22 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_33;
    }
LABEL_82:
    uint64_t v24 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_36;
    }
LABEL_83:
    uint64_t v26 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_39;
    }
LABEL_84:
    uint64_t v28 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
LABEL_85:
    uint64_t v30 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_45;
    }
LABEL_86:
    uint64_t v32 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_48;
    }
LABEL_87:
    uint64_t v34 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_51;
    }
LABEL_88:
    uint64_t v36 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_54;
    }
LABEL_89:
    uint64_t v38 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_57;
    }
LABEL_90:
    uint64_t v40 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_60;
    }
LABEL_91:
    uint64_t v42 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_92;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_72;
  }
LABEL_3:
  float v3 = *((float *)this + 22);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_73;
  }
LABEL_6:
  float v5 = *((float *)this + 24);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_74;
  }
LABEL_9:
  float v7 = *((float *)this + 23);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_75;
  }
LABEL_12:
  float v9 = *((float *)this + 25);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_76;
  }
LABEL_15:
  float v11 = *((float *)this + 14);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_77;
  }
LABEL_18:
  float v13 = *((float *)this + 16);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_78;
  }
LABEL_21:
  float v15 = *((float *)this + 15);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_79;
  }
LABEL_24:
  float v17 = *((float *)this + 17);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_80;
  }
LABEL_27:
  float v19 = *((float *)this + 6);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_81;
  }
LABEL_30:
  float v21 = *((float *)this + 8);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_82;
  }
LABEL_33:
  float v23 = *((float *)this + 7);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_83;
  }
LABEL_36:
  float v25 = *((float *)this + 9);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_84;
  }
LABEL_39:
  float v27 = *((float *)this + 26);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_85;
  }
LABEL_42:
  float v29 = *((float *)this + 11);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_86;
  }
LABEL_45:
  float v31 = *((float *)this + 10);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_87;
  }
LABEL_48:
  float v33 = *((float *)this + 13);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_88;
  }
LABEL_51:
  float v35 = *((float *)this + 12);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_89;
  }
LABEL_54:
  float v37 = *((float *)this + 19);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_90;
  }
LABEL_57:
  float v39 = *((float *)this + 18);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_91;
  }
LABEL_60:
  float v41 = *((float *)this + 21);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_63:
    float v43 = *((float *)this + 20);
    uint64_t v44 = LODWORD(v43);
    if (v43 == 0.0) {
      uint64_t v44 = 0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_66;
    }
LABEL_93:
    double v45 = 0.0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(void *)&v45;
  }
LABEL_92:
  uint64_t v44 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_93;
  }
LABEL_66:
  double v45 = *((double *)this + 2);
  if (v45 == 0.0) {
    double v45 = 0.0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(void *)&v45;
}

void CMMsl::PDRFenceReference::~PDRFenceReference(CMMsl::PDRFenceReference *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::PDRFenceReference::PDRFenceReference(CMMsl::PDRFenceReference *this, const CMMsl::PDRFenceReference *a2)
{
  *(void *)this = &unk_270643A90;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *((void *)a2 + 1);
  *((unsigned char *)this + 20) = 1;
  *((void *)this + 1) = v3;
  char v2 = 3;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, const CMMsl::PDRFenceReference *a2)
{
  if ((const CMMsl::PDRFenceReference *)a1 != a2)
  {
    CMMsl::PDRFenceReference::PDRFenceReference((CMMsl::PDRFenceReference *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceReference *a2, CMMsl::PDRFenceReference *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PDRFenceReference::PDRFenceReference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643A90;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270643A90;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270643A90;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PDRFenceReference::formatText(CMMsl::PDRFenceReference *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRFenceReference::readFrom(CMMsl::PDRFenceReference *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t CMMsl::PDRFenceReference::hash_value(CMMsl::PDRFenceReference *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ *(void *)&v1;
}

void CMMsl::PDRFenceState::~PDRFenceState(CMMsl::PDRFenceState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this, const CMMsl::PDRFenceState *a2)
{
  *(void *)this = &unk_270643AC8;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v11 = *((unsigned char *)a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(unsigned char *)(this + 64) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 16) = v12;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v13;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v14;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_28:
    int v16 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 68) = v3 | 4;
    *(_DWORD *)(this + 24) = v16;
    return this;
  }
LABEL_27:
  int v15 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v15;
  if ((*((_WORD *)a2 + 34) & 4) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *a1, const CMMsl::PDRFenceState *a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRFenceState::PDRFenceState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFenceState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceState *a2, CMMsl::PDRFenceState *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v3;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  return result;
}

float CMMsl::PDRFenceState::PDRFenceState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643AC8;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PDRFenceState::PDRFenceState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFenceState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PDRFenceState::formatText(CMMsl::PDRFenceState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "didExceedRadius");
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fenceID");
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionRefX", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionRefY", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionRefZ", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionUncX", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionUncY", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "positionUncZ", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "positionX", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "positionY", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "positionZ", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 34) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRFenceState::readFrom(CMMsl::PDRFenceState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_83;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 34) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_49;
      case 2u:
        *((_WORD *)this + 34) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 3u:
        *((_WORD *)this + 34) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 4u:
        *((_WORD *)this + 34) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 5u:
        *((_WORD *)this + 34) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 6u:
        *((_WORD *)this + 34) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 7u:
        *((_WORD *)this + 34) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 8u:
        *((_WORD *)this + 34) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 64) = v21;
        break;
      case 9u:
        *((_WORD *)this + 34) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_49:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_77;
      case 0xAu:
        *((_WORD *)this + 34) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 0xBu:
        *((_WORD *)this + 34) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 0xCu:
        *((_WORD *)this + 34) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_76:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_77:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_58:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xDu:
        *((_WORD *)this + 34) |= 4u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_82;
            }
            unint64_t v30 = v22++;
            char v31 = *(unsigned char *)(v23 + v30);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_81:
              unint64_t v2 = v30 + 1;
              goto LABEL_82;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_81;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_82;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_82:
        *((_DWORD *)this + 6) = v26;
        break;
      default:
        goto LABEL_19;
    }
LABEL_83:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(float *)(v3 + 36));
    if ((*(_WORD *)(v3 + 68) & 4) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_27:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PDRFenceState::hash_value(CMMsl::PDRFenceState *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_3;
    }
LABEL_38:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_40:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_41:
    uint64_t v10 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_42:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_18;
    }
LABEL_43:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 34) & 0x1000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_38;
  }
LABEL_3:
  float v3 = *((float *)this + 13);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x400) == 0) {
    goto LABEL_39;
  }
LABEL_6:
  float v5 = *((float *)this + 14);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x800) == 0) {
    goto LABEL_40;
  }
LABEL_9:
  float v7 = *((float *)this + 15);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_12:
  float v9 = *((float *)this + 10);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_15:
  float v11 = *((float *)this + 11);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_43;
  }
LABEL_18:
  float v13 = *((float *)this + 12);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x1000) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_45:
    double v16 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_25;
    }
LABEL_46:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_28;
    }
LABEL_47:
    uint64_t v20 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v15 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_45;
  }
LABEL_22:
  double v16 = *((double *)this + 2);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_46;
  }
LABEL_25:
  float v17 = *((float *)this + 7);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_47;
  }
LABEL_28:
  float v19 = *((float *)this + 8);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    float v21 = *((float *)this + 9);
    uint64_t v22 = LODWORD(v21);
    if (v21 == 0.0) {
      uint64_t v22 = 0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_34;
    }
LABEL_49:
    uint64_t v23 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_48:
  uint64_t v22 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_49;
  }
LABEL_34:
  uint64_t v23 = *((unsigned int *)this + 6);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

void CMMsl::PDRImpulse::~PDRImpulse(CMMsl::PDRImpulse *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRImpulse::PDRImpulse(CMMsl::PDRImpulse *this, const CMMsl::PDRImpulse *a2)
{
  *(void *)this = &unk_270643B00;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

const CMMsl::PDRImpulse *CMMsl::PDRImpulse::operator=(const CMMsl::PDRImpulse *a1, const CMMsl::PDRImpulse *a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRImpulse::PDRImpulse((CMMsl::PDRImpulse *)v7, a2);
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v3 = *((void *)a1 + 2);
    uint64_t v5 = v9;
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRImpulse *a2, CMMsl::PDRImpulse *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PDRImpulse::PDRImpulse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643B00;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643B00;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PDRImpulse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270643B00;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v6;
    v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PDRImpulse::formatText(CMMsl::PDRImpulse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "type");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRImpulse::readFrom(CMMsl::PDRImpulse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              LODWORD(v23) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v23) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRImpulse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t CMMsl::PDRImpulse::hash_value(CMMsl::PDRImpulse *this)
{
  if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_7:
    double v2 = 0.0;
    return *(void *)&v2 ^ v1;
  }
  uint64_t v1 = *((int *)this + 4);
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ v1;
}

void CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this)
{
  *(void *)this = &unk_270643B38;
  double v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PDRPedestrianClassifierState *CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this, const CMMsl::PDRPedestrianClassifierState *a2)
{
  *(void *)this = &unk_270643B38;
  *((void *)this + 1) = 0;
  char v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) = 1;
    *((void *)this + 4) = v6;
    char v5 = 5;
    if ((*((unsigned char *)a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*((unsigned char *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    char v7 = *((unsigned char *)a2 + 48);
    *((unsigned char *)this + 52) = v5;
    *((unsigned char *)this + 48) = v7;
  }
LABEL_6:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *((unsigned char *)this + 52) |= 2u;
    *((void *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, const CMMsl::PDRPedestrianClassifierState *a2)
{
  if ((const CMMsl::PDRPedestrianClassifierState *)a1 != a2)
  {
    CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v13;
    int v13 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v12;
    char v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPedestrianClassifierState *a2, CMMsl::PDRPedestrianClassifierState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v3;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643B38;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = &unk_270643B38;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v13 = &unk_270643B38;
    int v3 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    char v4 = *(unsigned char *)(a2 + 48);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v18 = *(_DWORD *)(a1 + 52);
    char v7 = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v4;
    char v17 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v14 = v8;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v5;
    uint64_t v15 = v9;
    long long v10 = *(_OWORD *)(a1 + 32);
    long long v11 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) = v3;
    *(_OWORD *)(a1 + 32) = v11;
    long long v16 = v10;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)&v13);
  }
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::formatText(CMMsl::PDRPedestrianClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 52) & 4) != 0) {
    PB::TextFormatter::format(a2, "isPedestrian");
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "pedestrianClassProbability", v7);
  }
  char v8 = *((unsigned char *)this + 52);
  if (v8)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PDRPedestrianClassifierState::readFrom(CMMsl::PDRPedestrianClassifierState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 52) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_79;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
        goto LABEL_55;
      case 2u:
        *((unsigned char *)this + 52) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
          *((void *)a2 + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 48) = v23;
        break;
      case 3u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          while (v24 < v25 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v27 = (char *)*((void *)this + 2);
            unint64_t v26 = *((void *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              char v29 = (char *)*((void *)this + 1);
              uint64_t v30 = (v27 - v29) >> 2;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
                goto LABEL_88;
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v33 = (unint64_t)sub_2572C76F0(v33);
                char v29 = (char *)*((void *)this + 1);
                unsigned int v27 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v34 = 0;
              }
              float v35 = (_DWORD *)(v33 + 4 * v30);
              *float v35 = 0;
              unint64_t v28 = v35 + 1;
              while (v27 != v29)
              {
                int v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *--float v35 = v36;
              }
              *((void *)this + 1) = v35;
              *((void *)this + 2) = v28;
              *((void *)this + 3) = v33 + 4 * v34;
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v27 = 0;
              unint64_t v28 = v27 + 4;
            }
            *((void *)this + 2) = v28;
            unint64_t v37 = *((void *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_DWORD *)(*(void *)a2 + v37);
            unint64_t v25 = *((void *)a2 + 2);
            unint64_t v24 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          float v41 = (char *)*((void *)this + 2);
          unint64_t v40 = *((void *)this + 3);
          if ((unint64_t)v41 >= v40)
          {
            float v43 = (char *)*((void *)this + 1);
            uint64_t v44 = (v41 - v43) >> 2;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62) {
LABEL_88:
            }
              sub_2570AFD0C();
            uint64_t v46 = v40 - (void)v43;
            if (v46 >> 1 > v45) {
              unint64_t v45 = v46 >> 1;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47)
            {
              unint64_t v47 = (unint64_t)sub_2572C76F0(v47);
              float v43 = (char *)*((void *)this + 1);
              float v41 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v48 = 0;
            }
            unint64_t v49 = (_DWORD *)(v47 + 4 * v44);
            *unint64_t v49 = 0;
            uint64_t v42 = v49 + 1;
            while (v41 != v43)
            {
              int v50 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *--unint64_t v49 = v50;
            }
            *((void *)this + 1) = v49;
            *((void *)this + 2) = v42;
            *((void *)this + 3) = v47 + 4 * v48;
            if (v43) {
              operator delete(v43);
            }
          }
          else
          {
            *(_DWORD *)float v41 = 0;
            uint64_t v42 = v41 + 4;
          }
          *((void *)this + 2) = v42;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *((void *)a2 + 2))
          {
            *(v42 - 1) = *(_DWORD *)(*(void *)a2 + v51);
            uint64_t v39 = *((void *)a2 + 1) + 4;
LABEL_56:
            *((void *)a2 + 1) = v39;
          }
          else
          {
LABEL_79:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 4u:
        *((unsigned char *)this + 52) |= 2u;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2)) {
          goto LABEL_79;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v38);
LABEL_55:
        uint64_t v39 = *((void *)a2 + 1) + 8;
        goto LABEL_56;
      default:
        goto LABEL_19;
    }
LABEL_80:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_80;
  }
  return 0;
}

uint64_t CMMsl::PDRPedestrianClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::write(a2);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::hash_value(CMMsl::PDRPedestrianClassifierState *this)
{
  if (*((unsigned char *)this + 52))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 48);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 52) & 2) != 0)
  {
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ *(void *)&v5 ^ v4;
}

void CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this)
{
  *(void *)this = &unk_270643B70;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PDRPlacementClassifierState *CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this, const CMMsl::PDRPlacementClassifierState *a2)
{
  *(void *)this = &unk_270643B70;
  *((void *)this + 1) = 0;
  uint64_t v4 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) = 1;
    *((void *)this + 4) = v6;
    char v5 = 5;
    if ((*((unsigned char *)a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*((unsigned char *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *((unsigned char *)this + 52) |= 2u;
    *((void *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, const CMMsl::PDRPlacementClassifierState *a2)
{
  if ((const CMMsl::PDRPlacementClassifierState *)a1 != a2)
  {
    CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPlacementClassifierState *a2, CMMsl::PDRPlacementClassifierState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643B70;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = &unk_270643B70;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v11 = &unk_270643B70;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v15 = *(void *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v12 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 32);
    long long v9 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    long long v14 = v8;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::formatText(CMMsl::PDRPlacementClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 52) & 4) != 0) {
    PB::TextFormatter::format(a2, "placement");
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbability", v7);
  }
  char v8 = *((unsigned char *)this + 52);
  if (v8)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PDRPlacementClassifierState::readFrom(CMMsl::PDRPlacementClassifierState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 52) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
          goto LABEL_93;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
        goto LABEL_60;
      case 2u:
        *((unsigned char *)this + 52) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          do
          {
            unint64_t v26 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              goto LABEL_82;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
          }
          while (!v14);
LABEL_68:
          LODWORD(v25) = 0;
          goto LABEL_82;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v25 = 0;
        if (v21 <= v20) {
          unint64_t v21 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v21 == v20)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v46 = v20 + 1;
            char v47 = *(unsigned char *)(v22 + v20);
            *((void *)a2 + 1) = v46;
            v25 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              unint64_t v20 = v46;
              BOOL v14 = v45++ > 8;
              if (v14) {
                goto LABEL_68;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v25) = 0;
            }
          }
          break;
        }
LABEL_82:
        *((_DWORD *)this + 12) = v25;
        break;
      case 3u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v31 = (char *)*((void *)this + 2);
            unint64_t v30 = *((void *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              unint64_t v33 = (char *)*((void *)this + 1);
              uint64_t v34 = (v31 - v33) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_104;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                unint64_t v37 = (unint64_t)sub_2572C76F0(v37);
                unint64_t v33 = (char *)*((void *)this + 1);
                unint64_t v31 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v38 = 0;
              }
              uint64_t v39 = (_DWORD *)(v37 + 4 * v34);
              *uint64_t v39 = 0;
              uint64_t v32 = v39 + 1;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--uint64_t v39 = v40;
              }
              *((void *)this + 1) = v39;
              *((void *)this + 2) = v32;
              *((void *)this + 3) = v37 + 4 * v38;
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v31 = 0;
              uint64_t v32 = v31 + 4;
            }
            *((void *)this + 2) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v49 = (char *)*((void *)this + 2);
          unint64_t v48 = *((void *)this + 3);
          if ((unint64_t)v49 >= v48)
          {
            unint64_t v51 = (char *)*((void *)this + 1);
            uint64_t v52 = (v49 - v51) >> 2;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
LABEL_104:
            }
              sub_2570AFD0C();
            uint64_t v54 = v48 - (void)v51;
            if (v54 >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              unint64_t v55 = (unint64_t)sub_2572C76F0(v55);
              unint64_t v51 = (char *)*((void *)this + 1);
              unint64_t v49 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v56 = 0;
            }
            int v57 = (_DWORD *)(v55 + 4 * v52);
            *int v57 = 0;
            int v50 = v57 + 1;
            while (v49 != v51)
            {
              int v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--int v57 = v58;
            }
            *((void *)this + 1) = v57;
            *((void *)this + 2) = v50;
            *((void *)this + 3) = v55 + 4 * v56;
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v49 = 0;
            int v50 = v49 + 4;
          }
          *((void *)this + 2) = v50;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((void *)a2 + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(void *)a2 + v59);
            uint64_t v43 = *((void *)a2 + 1) + 4;
LABEL_61:
            *((void *)a2 + 1) = v43;
          }
          else
          {
LABEL_93:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 4u:
        *((unsigned char *)this + 52) |= 2u;
        unint64_t v42 = *((void *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
          goto LABEL_93;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v42);
LABEL_60:
        uint64_t v43 = *((void *)a2 + 1) + 8;
        goto LABEL_61;
      default:
        goto LABEL_19;
    }
LABEL_94:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_94;
  }
  return 0;
}

uint64_t CMMsl::PDRPlacementClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::hash_value(CMMsl::PDRPlacementClassifierState *this)
{
  if (*((unsigned char *)this + 52))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 52) & 2) != 0)
  {
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ *(void *)&v5 ^ v4;
}

void CMMsl::PDRSpeedEstimatorState::~PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this, const CMMsl::PDRSpeedEstimatorState *a2)
{
  *(void *)this = &unk_270643BA8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorState *a2)
{
  if ((const CMMsl::PDRSpeedEstimatorState *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState((CMMsl::PDRSpeedEstimatorState *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorState *a2, CMMsl::PDRSpeedEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643BA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643BA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270643BA8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorState::formatText(CMMsl::PDRSpeedEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRSpeedEstimatorState::readFrom(CMMsl::PDRSpeedEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRSpeedEstimatorState::hash_value(CMMsl::PDRSpeedEstimatorState *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRSpeedEstimatorStateDebug::~PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  *(void *)this = &unk_270643BE0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  if ((const CMMsl::PDRSpeedEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug((CMMsl::PDRSpeedEstimatorStateDebug *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorStateDebug *a2, CMMsl::PDRSpeedEstimatorStateDebug *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643BE0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643BE0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_270643BE0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::formatText(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::readFrom(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_39;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_32;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_35;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_32:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_38;
      case 4u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_37:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_38:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_35:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_39:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::hash_value(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRVelocityEstimatorState::~PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this, const CMMsl::PDRVelocityEstimatorState *a2)
{
  *(void *)this = &unk_270643C18;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 48) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((unsigned char *)this + 48) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((unsigned char *)this + 48) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_18:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 48) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  if ((*((unsigned char *)a2 + 48) & 2) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, const CMMsl::PDRVelocityEstimatorState *a2)
{
  if ((const CMMsl::PDRVelocityEstimatorState *)a1 != a2)
  {
    CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState((CMMsl::PDRVelocityEstimatorState *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRVelocityEstimatorState *a2, CMMsl::PDRVelocityEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643C18;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643C18;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_270643C18;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    int v13 = *(_DWORD *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 40);
    long long v4 = *(_OWORD *)(a1 + 24);
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    long long v10 = v6;
    long long v11 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRVelocityEstimatorState::formatText(CMMsl::PDRVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    if ((*((unsigned char *)this + 48) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PDRVelocityEstimatorState::readFrom(CMMsl::PDRVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_51;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_44;
      case 2u:
        *((unsigned char *)this + 48) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_49;
      case 3u:
        *((unsigned char *)this + 48) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_49;
      case 4u:
        *((unsigned char *)this + 48) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_49;
      case 5u:
        *((unsigned char *)this + 48) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_49;
      case 6u:
        *((unsigned char *)this + 48) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_49;
      case 7u:
        *((unsigned char *)this + 48) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_47;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_49:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_50;
      case 8u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_47:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_44:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_50:
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_51:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PDRVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 32));
    if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_17:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PDRVelocityEstimatorState::hash_value(CMMsl::PDRVelocityEstimatorState *this)
{
  if ((*((unsigned char *)this + 48) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 48) & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 48) & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 48) & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 0x20) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v2 = *((float *)this + 9);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 48) & 0x40) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v4 = *((float *)this + 10);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 48) & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v6 = *((float *)this + 11);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 48) & 4) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v10 = *((float *)this + 7);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 8);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    double v14 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(void *)&v14;
  }
LABEL_32:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  double v14 = *((double *)this + 2);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(void *)&v14;
}

void CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(CMMsl::PTSConsumedGNSS *this)
{
  *(void *)this = &unk_270643C50;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(void *this, const CMMsl::PTSConsumedGNSS *a2)
{
  *this = &unk_270643C50;
  this[1] = 0;
  this[2] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, const CMMsl::PTSConsumedGNSS *a2)
{
  if ((const CMMsl::PTSConsumedGNSS *)a1 != a2)
  {
    CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSConsumedGNSS *a2, CMMsl::PTSConsumedGNSS *a3)
{
  uint64_t v3 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

void *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(void *a1, uint64_t a2)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  *a1 = &unk_270643C50;
  a1[2] = 0;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = a1[2];
  a1[2] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v5);
  }
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::formatText(CMMsl::PTSConsumedGNSS *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "signalEnvironment");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PTSConsumedGNSS::readFrom(CMMsl::PTSConsumedGNSS *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSConsumedGNSS::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 16);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

unint64_t CMMsl::PTSConsumedGNSS::hash_value(CMMsl::PTSConsumedGNSS *this)
{
  unint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v2 = CMMsl::LocationOscarEmu::hash_value((CMMsl::LocationOscarEmu *)v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 12);
    uint64_t v3 = *(int *)(v3 + 8);
    if ((v4 & 1) == 0) {
      uint64_t v3 = 0;
    }
  }
  return v3 ^ v2;
}

uint64_t CMMsl::PTSConsumedGNSS::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::makeSignalEnvironment(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PTSForwardPropagation::~PTSForwardPropagation(CMMsl::PTSForwardPropagation *this)
{
  *(void *)this = &unk_270643C88;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSForwardPropagation::~PTSForwardPropagation(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t this, const CMMsl::PTSForwardPropagation *a2)
{
  *(void *)this = &unk_270643C88;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    char v3 = 32;
    *(unsigned char *)(this + 64) = 32;
    *(void *)(this + 56) = v4;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 32) = v5;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 5);
    v3 |= 0x10u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 40) = v7;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 4u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 24) = v8;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_16:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 8) = v9;
  if ((*((unsigned char *)a2 + 64) & 2) != 0)
  {
LABEL_10:
    uint64_t v6 = *((void *)a2 + 2);
    *(unsigned char *)(this + 64) = v3 | 2;
    *(void *)(this + 16) = v6;
  }
LABEL_11:
  if (*((void *)a2 + 6)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, const CMMsl::PTSForwardPropagation *a2)
{
  if ((const CMMsl::PTSForwardPropagation *)a1 != a2)
  {
    CMMsl::PTSForwardPropagation::PTSForwardPropagation((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v6;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v14;
    uint64_t v14 = v8;
    CMMsl::PTSForwardPropagation::~PTSForwardPropagation((CMMsl::PTSForwardPropagation *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PTSForwardPropagation *a2, CMMsl::PTSForwardPropagation *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643C88;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSForwardPropagation::PTSForwardPropagation((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v6;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v14;
    uint64_t v14 = v8;
    CMMsl::PTSForwardPropagation::~PTSForwardPropagation((CMMsl::PTSForwardPropagation *)v10);
  }
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::formatText(CMMsl::PTSForwardPropagation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "course", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 4));
  if ((*((unsigned char *)this + 64) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "longitude", *((double *)this + 5));
LABEL_7:
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "signalEnvironment");
  }
  if ((*((unsigned char *)this + 64) & 0x20) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PTSForwardPropagation::readFrom(CMMsl::PTSForwardPropagation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 64) |= 0x20u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v20);
        goto LABEL_43;
      case 2u:
        *((unsigned char *)this + 64) |= 8u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v21);
        goto LABEL_43;
      case 3u:
        *((unsigned char *)this + 64) |= 0x10u;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v22);
        goto LABEL_43;
      case 4u:
        *((unsigned char *)this + 64) |= 4u;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v23);
        goto LABEL_43;
      case 5u:
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v24);
        goto LABEL_43;
      case 6u:
        *((unsigned char *)this + 64) |= 2u;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v25);
LABEL_43:
          *((void *)a2 + 1) += 8;
        }
        else
        {
LABEL_40:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 7u:
        operator new();
      default:
        goto LABEL_19;
    }
LABEL_44:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_44;
  }
  return result;
}

uint64_t CMMsl::PTSForwardPropagation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  if ((*(unsigned char *)(v3 + 64) & 2) != 0) {
LABEL_7:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
LABEL_8:
  char v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5);
  }
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::hash_value(CMMsl::PTSForwardPropagation *this)
{
  if ((*((unsigned char *)this + 64) & 0x20) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    double v4 = 0.0;
    if (*((unsigned char *)this + 64)) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  double v1 = *((double *)this + 7);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 4) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if (*((unsigned char *)this + 64))
  {
LABEL_12:
    double v5 = *((double *)this + 1);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 64) & 2) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    double v6 = 0.0;
    goto LABEL_26;
  }
LABEL_24:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 64) & 2) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
LABEL_26:
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    char v8 = *(unsigned char *)(v7 + 12);
    uint64_t v7 = *(int *)(v7 + 8);
    if ((v8 & 1) == 0) {
      uint64_t v7 = 0;
    }
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7;
}

uint64_t CMMsl::PTSForwardPropagation::makeSignalEnvironment(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute(CMMsl::PTSMapMatchedRoute *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270643CC0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(void *this, const CMMsl::PTSMapMatchedRoute *a2)
{
  *this = &unk_270643CC0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PTSMapMatchedRoute *CMMsl::PTSMapMatchedRoute::operator=(const CMMsl::PTSMapMatchedRoute *a1, const CMMsl::PTSMapMatchedRoute *a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute((CMMsl::PTSMapMatchedRoute *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSMapMatchedRoute *a2, CMMsl::PTSMapMatchedRoute *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(void *a1, uint64_t a2)
{
  *a1 = &unk_270643CC0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270643CC0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270643CC0;
    v6[1] = v4;
    CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute((CMMsl::PTSMapMatchedRoute *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::formatText(CMMsl::PTSMapMatchedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PTSMapMatchedRoute::readFrom(CMMsl::PTSMapMatchedRoute *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSMapMatchedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSMapMatchedRoute::hash_value(CMMsl::PTSMapMatchedRoute *this)
{
  uint64_t result = (CMMsl::PTSForwardPropagation *)*((void *)this + 1);
  if (result) {
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PTSMapMatchedRoute::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute(CMMsl::PTSReconstructedRoute *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270643CF8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(void *this, const CMMsl::PTSReconstructedRoute *a2)
{
  *this = &unk_270643CF8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PTSReconstructedRoute *CMMsl::PTSReconstructedRoute::operator=(const CMMsl::PTSReconstructedRoute *a1, const CMMsl::PTSReconstructedRoute *a2)
{
  if (a1 != a2)
  {
    CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute((CMMsl::PTSReconstructedRoute *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSReconstructedRoute *a2, CMMsl::PTSReconstructedRoute *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(void *a1, uint64_t a2)
{
  *a1 = &unk_270643CF8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270643CF8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270643CF8;
    v6[1] = v4;
    CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute((CMMsl::PTSReconstructedRoute *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::formatText(CMMsl::PTSReconstructedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PTSReconstructedRoute::readFrom(CMMsl::PTSReconstructedRoute *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSReconstructedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSReconstructedRoute::hash_value(CMMsl::PTSReconstructedRoute *this)
{
  uint64_t result = (CMMsl::PTSForwardPropagation *)*((void *)this + 1);
  if (result) {
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PTSReconstructedRoute::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PdrMLModelOutput::~PdrMLModelOutput(CMMsl::PdrMLModelOutput *this)
{
  *(void *)this = &unk_270643D30;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PdrMLModelOutput::~PdrMLModelOutput(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PdrMLModelOutput *CMMsl::PdrMLModelOutput::PdrMLModelOutput(CMMsl::PdrMLModelOutput *this, const CMMsl::PdrMLModelOutput *a2)
{
  *(void *)this = &unk_270643D30;
  *((void *)this + 1) = 0;
  unint64_t v3 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v4 = *((void *)a2 + 4);
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 4) = v4;
  }
  if (this != a2) {
    sub_2572C73EC(v3, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, const CMMsl::PdrMLModelOutput *a2)
{
  if ((const CMMsl::PdrMLModelOutput *)a1 != a2)
  {
    CMMsl::PdrMLModelOutput::PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PdrMLModelOutput *a2, CMMsl::PdrMLModelOutput *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643D30;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(void *)a1 = &unk_270643D30;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v12 = &unk_270643D30;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    int v16 = v7;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v4;
    uint64_t v15 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v13 = v9;
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v5;
    uint64_t v14 = v10;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::formatText(CMMsl::PdrMLModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 40)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "velocity", v7);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PdrMLModelOutput::readFrom(CMMsl::PdrMLModelOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        if ((v11 & 7) != 2)
        {
          unint64_t v35 = (char *)*((void *)this + 2);
          unint64_t v34 = *((void *)this + 3);
          if ((unint64_t)v35 >= v34)
          {
            unint64_t v37 = (char *)*((void *)this + 1);
            uint64_t v38 = (v35 - v37) >> 3;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
LABEL_82:
            }
              sub_2570AFD0C();
            uint64_t v40 = v34 - (void)v37;
            if (v40 >> 2 > v39) {
              unint64_t v39 = v40 >> 2;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              unint64_t v41 = (unint64_t)sub_2572C7528(v41);
              unint64_t v37 = (char *)*((void *)this + 1);
              unint64_t v35 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v42 = 0;
            }
            uint64_t v43 = (void *)(v41 + 8 * v38);
            *uint64_t v43 = 0;
            uint64_t v36 = v43 + 1;
            while (v35 != v37)
            {
              uint64_t v44 = *((void *)v35 - 1);
              v35 -= 8;
              *--uint64_t v43 = v44;
            }
            *((void *)this + 1) = v43;
            *((void *)this + 2) = v36;
            *((void *)this + 3) = v41 + 8 * v42;
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            *(void *)unint64_t v35 = 0;
            uint64_t v36 = v35 + 8;
          }
          *((void *)this + 2) = v36;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)a2 + 2))
          {
LABEL_72:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_75;
          }
          *(v36 - 1) = *(void *)(*(void *)a2 + v45);
          goto LABEL_74;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        while (v20 < v21 && !*((unsigned char *)a2 + 24))
        {
          unint64_t v23 = (char *)*((void *)this + 2);
          unint64_t v22 = *((void *)this + 3);
          if ((unint64_t)v23 >= v22)
          {
            unint64_t v25 = (char *)*((void *)this + 1);
            uint64_t v26 = (v23 - v25) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              goto LABEL_82;
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              unint64_t v29 = (unint64_t)sub_2572C7528(v29);
              unint64_t v25 = (char *)*((void *)this + 1);
              unint64_t v23 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v30 = 0;
            }
            unint64_t v31 = (void *)(v29 + 8 * v26);
            *unint64_t v31 = 0;
            unint64_t v24 = v31 + 1;
            while (v23 != v25)
            {
              uint64_t v32 = *((void *)v23 - 1);
              v23 -= 8;
              *--unint64_t v31 = v32;
            }
            *((void *)this + 1) = v31;
            *((void *)this + 2) = v24;
            *((void *)this + 3) = v29 + 8 * v30;
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(void *)unint64_t v23 = 0;
            unint64_t v24 = v23 + 8;
          }
          *((void *)this + 2) = v24;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2))
          {
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v24 - 1) = *(void *)(*(void *)a2 + v33);
          unint64_t v21 = *((void *)a2 + 2);
          unint64_t v20 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v20;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v11 >> 3) == 1)
        {
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v19 = *((void *)a2 + 1);
          if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *((void *)a2 + 2)) {
            goto LABEL_72;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v19);
LABEL_74:
          *((void *)a2 + 1) += 8;
          goto LABEL_75;
        }
LABEL_26:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
LABEL_75:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PdrMLModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 40)) {
    this = PB::Writer::write(a2, *(double *)(this + 32));
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    this = PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::hash_value(CMMsl::PdrMLModelOutput *this)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 4);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::PearlAttitude::~PearlAttitude(CMMsl::PearlAttitude *this)
{
  *(void *)this = &unk_270643D68;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PearlAttitude::~PearlAttitude(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PearlAttitude *CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this, const CMMsl::PearlAttitude *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (void *)((char *)this + 8);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_270643D68;
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  __int16 v5 = *((_WORD *)a2 + 62);
  if (v5)
  {
    uint64_t v7 = *((void *)a2 + 10);
    __int16 v6 = 1;
    *((_WORD *)this + 62) = 1;
    *((void *)this + 10) = v7;
    __int16 v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x40u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 27) = v8;
    __int16 v5 = *((_WORD *)a2 + 62);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    int v13 = *((_DWORD *)a2 + 26);
    v6 |= 0x20u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 26) = v13;
    __int16 v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 30) = v14;
  __int16 v5 = *((_WORD *)a2 + 62);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v15 = *((_DWORD *)a2 + 22);
  v6 |= 2u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 22) = v15;
  __int16 v5 = *((_WORD *)a2 + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_24:
  int v16 = *((_DWORD *)a2 + 28);
  v6 |= 0x80u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 28) = v16;
  if ((*((_WORD *)a2 + 62) & 0x10) != 0)
  {
LABEL_11:
    int v9 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 62) = v6 | 0x10;
    *((_DWORD *)this + 25) = v9;
  }
LABEL_12:
  if (this != a2) {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 62);
  if ((v10 & 8) != 0)
  {
    int v17 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 62) |= 8u;
    *((_DWORD *)this + 24) = v17;
    __int16 v10 = *((_WORD *)a2 + 62);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)a2 + 62) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  int v18 = *((_DWORD *)a2 + 29);
  *((_WORD *)this + 62) |= 0x100u;
  *((_DWORD *)this + 29) = v18;
  if ((*((_WORD *)a2 + 62) & 4) != 0)
  {
LABEL_17:
    int v11 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 62) |= 4u;
    *((_DWORD *)this + 23) = v11;
  }
LABEL_18:
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4((void *)this + 7, *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, const CMMsl::PearlAttitude *a2)
{
  if (a1 != a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((CMMsl::PearlAttitude *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PearlAttitude *a2, CMMsl::PearlAttitude *a3)
{
  int v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  int v5 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  int v6 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  float result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::PearlAttitude::PearlAttitude(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643D68;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  sub_2572C7560(v5, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

uint64_t CMMsl::PearlAttitude::formatText(CMMsl::PearlAttitude *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 62);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "distance", *((float *)this + 22));
    __int16 v5 = *((_WORD *)this + 62);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "focalLength", *((float *)this + 23));
  __int16 v5 = *((_WORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "height", *((float *)this + 24));
  if ((*((_WORD *)this + 62) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "orientation");
LABEL_6:
  int v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "origin", v8);
  }
  if ((*((_WORD *)this + 62) & 0x20) != 0) {
    PB::TextFormatter::format(a2, "pitch", *((float *)this + 26));
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  __int16 v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "principlePoint", v11);
  }
  __int16 v12 = *((_WORD *)this + 62);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "roll", *((float *)this + 27));
    __int16 v12 = *((_WORD *)this + 62);
  }
  if (v12) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  }
  uint64_t v13 = (float *)*((void *)this + 7);
  uint64_t v14 = (float *)*((void *)this + 8);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "transform", v15);
  }
  __int16 v16 = *((_WORD *)this + 62);
  if ((v16 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "type");
    __int16 v16 = *((_WORD *)this + 62);
    if ((v16 & 0x100) == 0)
    {
LABEL_20:
      if ((v16 & 0x200) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)this + 62) & 0x100) == 0)
  {
    goto LABEL_20;
  }
  PB::TextFormatter::format(a2, "width", *((float *)this + 29));
  if ((*((_WORD *)this + 62) & 0x200) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 30));
LABEL_22:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PearlAttitude::readFrom(CMMsl::PearlAttitude *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 62) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_213;
        case 2u:
          *((_WORD *)this + 62) |= 0x40u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v22);
          goto LABEL_212;
        case 3u:
          *((_WORD *)this + 62) |= 0x20u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v23);
          goto LABEL_212;
        case 4u:
          *((_WORD *)this + 62) |= 0x200u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_212;
        case 5u:
          *((_WORD *)this + 62) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_212;
        case 6u:
          *((_WORD *)this + 62) |= 0x80u;
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          uint64_t v28 = *(void *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)a2 + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_183;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v14 = v30++ > 8;
            }
            while (!v14);
LABEL_139:
            LODWORD(v31) = 0;
            goto LABEL_183;
          }
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v89 = v26 + 1;
              char v90 = *(unsigned char *)(v28 + v26);
              *((void *)a2 + 1) = v89;
              v31 |= (unint64_t)(v90 & 0x7F) << v87;
              if (v90 < 0)
              {
                v87 += 7;
                unint64_t v26 = v89;
                BOOL v14 = v88++ > 8;
                if (v14) {
                  goto LABEL_139;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v31) = 0;
              }
            }
            break;
          }
LABEL_183:
          *((_DWORD *)this + 28) = v31;
          goto LABEL_214;
        case 7u:
          *((_WORD *)this + 62) |= 0x10u;
          unint64_t v34 = *((void *)a2 + 1);
          unint64_t v35 = *((void *)a2 + 2);
          uint64_t v36 = *(void *)a2;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v39 = 0;
            do
            {
              unint64_t v40 = v34 + 1;
              *((void *)a2 + 1) = v34 + 1;
              char v41 = *(unsigned char *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0) {
                goto LABEL_186;
              }
              v37 += 7;
              unint64_t v34 = v40;
              BOOL v14 = v38++ > 8;
            }
            while (!v14);
LABEL_146:
            LODWORD(v39) = 0;
            goto LABEL_186;
          }
          char v91 = 0;
          unsigned int v92 = 0;
          uint64_t v39 = 0;
          if (v35 <= v34) {
            unint64_t v35 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v93 = v34 + 1;
              char v94 = *(unsigned char *)(v36 + v34);
              *((void *)a2 + 1) = v93;
              v39 |= (unint64_t)(v94 & 0x7F) << v91;
              if (v94 < 0)
              {
                v91 += 7;
                unint64_t v34 = v93;
                BOOL v14 = v92++ > 8;
                if (v14) {
                  goto LABEL_146;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v39) = 0;
              }
            }
            break;
          }
LABEL_186:
          *((_DWORD *)this + 25) = v39;
          goto LABEL_214;
        case 8u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v42 = *((void *)a2 + 1);
            unint64_t v43 = *((void *)a2 + 2);
            while (v42 < v43 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v45 = (char *)*((void *)this + 2);
              unint64_t v44 = *((void *)this + 3);
              if ((unint64_t)v45 >= v44)
              {
                char v47 = (char *)*((void *)this + 1);
                uint64_t v48 = (v45 - v47) >> 2;
                unint64_t v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 62) {
                  goto LABEL_223;
                }
                uint64_t v50 = v44 - (void)v47;
                if (v50 >> 1 > v49) {
                  unint64_t v49 = v50 >> 1;
                }
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v51 = v49;
                }
                if (v51)
                {
                  unint64_t v51 = (unint64_t)sub_2572C76F0(v51);
                  char v47 = (char *)*((void *)this + 1);
                  unint64_t v45 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v52 = 0;
                }
                unint64_t v53 = (_DWORD *)(v51 + 4 * v48);
                *unint64_t v53 = 0;
                unint64_t v46 = v53 + 1;
                while (v45 != v47)
                {
                  int v54 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *--unint64_t v53 = v54;
                }
                *((void *)this + 1) = v53;
                *((void *)this + 2) = v46;
                *((void *)this + 3) = v51 + 4 * v52;
                if (v47) {
                  operator delete(v47);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v45 = 0;
                unint64_t v46 = v45 + 4;
              }
              *((void *)this + 2) = v46;
              unint64_t v55 = *((void *)a2 + 1);
              if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
                goto LABEL_153;
              }
              *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
              unint64_t v43 = *((void *)a2 + 2);
              unint64_t v42 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v42;
            }
            goto LABEL_154;
          }
          int v96 = (char *)*((void *)this + 2);
          unint64_t v95 = *((void *)this + 3);
          if ((unint64_t)v96 >= v95)
          {
            unsigned int v102 = (char *)*((void *)this + 1);
            uint64_t v103 = (v96 - v102) >> 2;
            unint64_t v104 = v103 + 1;
            if ((unint64_t)(v103 + 1) >> 62) {
              goto LABEL_223;
            }
            uint64_t v105 = v95 - (void)v102;
            if (v105 >> 1 > v104) {
              unint64_t v104 = v105 >> 1;
            }
            if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v104;
            }
            if (v106)
            {
              unint64_t v106 = (unint64_t)sub_2572C76F0(v106);
              unsigned int v102 = (char *)*((void *)this + 1);
              int v96 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v107 = 0;
            }
            int v120 = (_DWORD *)(v106 + 4 * v103);
            *int v120 = 0;
            unint64_t v97 = v120 + 1;
            while (v96 != v102)
            {
              int v121 = *((_DWORD *)v96 - 1);
              v96 -= 4;
              *--int v120 = v121;
            }
            *((void *)this + 1) = v120;
            *((void *)this + 2) = v97;
            *((void *)this + 3) = v106 + 4 * v107;
            if (v102) {
              operator delete(v102);
            }
          }
          else
          {
            *(_DWORD *)int v96 = 0;
            unint64_t v97 = v96 + 4;
          }
          *((void *)this + 2) = v97;
          goto LABEL_208;
        case 9u:
          *((_WORD *)this + 62) |= 8u;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v56);
          goto LABEL_212;
        case 0xAu:
          *((_WORD *)this + 62) |= 0x100u;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v57);
          goto LABEL_212;
        case 0xBu:
          *((_WORD *)this + 62) |= 4u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2)) {
            goto LABEL_210;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v58);
          goto LABEL_212;
        case 0xCu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v59 = *((void *)a2 + 1);
            unint64_t v60 = *((void *)a2 + 2);
            while (v59 < v60 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v62 = (char *)*((void *)this + 5);
              unint64_t v61 = *((void *)this + 6);
              if ((unint64_t)v62 >= v61)
              {
                uint64_t v64 = (char *)*((void *)this + 4);
                uint64_t v65 = (v62 - v64) >> 2;
                unint64_t v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 62) {
                  goto LABEL_223;
                }
                uint64_t v67 = v61 - (void)v64;
                if (v67 >> 1 > v66) {
                  unint64_t v66 = v67 >> 1;
                }
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68)
                {
                  unint64_t v68 = (unint64_t)sub_2572C76F0(v68);
                  uint64_t v64 = (char *)*((void *)this + 4);
                  unint64_t v62 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v69 = 0;
                }
                unint64_t v70 = (_DWORD *)(v68 + 4 * v65);
                *unint64_t v70 = 0;
                unint64_t v63 = v70 + 1;
                while (v62 != v64)
                {
                  int v71 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *--unint64_t v70 = v71;
                }
                *((void *)this + 4) = v70;
                *((void *)this + 5) = v63;
                *((void *)this + 6) = v68 + 4 * v69;
                if (v64) {
                  operator delete(v64);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v62 = 0;
                unint64_t v63 = v62 + 4;
              }
              *((void *)this + 5) = v63;
              unint64_t v72 = *((void *)a2 + 1);
              if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
                goto LABEL_153;
              }
              *(v63 - 1) = *(_DWORD *)(*(void *)a2 + v72);
              unint64_t v60 = *((void *)a2 + 2);
              unint64_t v59 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v59;
            }
            goto LABEL_154;
          }
          uint64_t v99 = (char *)*((void *)this + 5);
          unint64_t v98 = *((void *)this + 6);
          if ((unint64_t)v99 >= v98)
          {
            uint64_t v108 = (char *)*((void *)this + 4);
            uint64_t v109 = (v99 - v108) >> 2;
            unint64_t v110 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 62) {
              goto LABEL_223;
            }
            uint64_t v111 = v98 - (void)v108;
            if (v111 >> 1 > v110) {
              unint64_t v110 = v111 >> 1;
            }
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v112 = v110;
            }
            if (v112)
            {
              unint64_t v112 = (unint64_t)sub_2572C76F0(v112);
              uint64_t v108 = (char *)*((void *)this + 4);
              uint64_t v99 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v113 = 0;
            }
            unint64_t v122 = (_DWORD *)(v112 + 4 * v109);
            *unint64_t v122 = 0;
            unint64_t v97 = v122 + 1;
            while (v99 != v108)
            {
              int v123 = *((_DWORD *)v99 - 1);
              v99 -= 4;
              *--unint64_t v122 = v123;
            }
            *((void *)this + 4) = v122;
            *((void *)this + 5) = v97;
            *((void *)this + 6) = v112 + 4 * v113;
            if (v108) {
              operator delete(v108);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v99 = 0;
            unint64_t v97 = v99 + 4;
          }
          *((void *)this + 5) = v97;
          goto LABEL_208;
        case 0xDu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v73 = *((void *)a2 + 1);
            unint64_t v74 = *((void *)a2 + 2);
            while (v73 < v74 && !*((unsigned char *)a2 + 24))
            {
              BOOL v76 = (char *)*((void *)this + 8);
              unint64_t v75 = *((void *)this + 9);
              if ((unint64_t)v76 >= v75)
              {
                unsigned int v78 = (char *)*((void *)this + 7);
                uint64_t v79 = (v76 - v78) >> 2;
                unint64_t v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 62) {
                  goto LABEL_223;
                }
                uint64_t v81 = v75 - (void)v78;
                if (v81 >> 1 > v80) {
                  unint64_t v80 = v81 >> 1;
                }
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v82 = v80;
                }
                if (v82)
                {
                  unint64_t v82 = (unint64_t)sub_2572C76F0(v82);
                  unsigned int v78 = (char *)*((void *)this + 7);
                  BOOL v76 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v83 = 0;
                }
                uint64_t v84 = (_DWORD *)(v82 + 4 * v79);
                *uint64_t v84 = 0;
                int v77 = v84 + 1;
                while (v76 != v78)
                {
                  int v85 = *((_DWORD *)v76 - 1);
                  v76 -= 4;
                  *--uint64_t v84 = v85;
                }
                *((void *)this + 7) = v84;
                *((void *)this + 8) = v77;
                *((void *)this + 9) = v82 + 4 * v83;
                if (v78) {
                  operator delete(v78);
                }
              }
              else
              {
                *(_DWORD *)BOOL v76 = 0;
                int v77 = v76 + 4;
              }
              *((void *)this + 8) = v77;
              unint64_t v86 = *((void *)a2 + 1);
              if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((void *)a2 + 2))
              {
LABEL_153:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v77 - 1) = *(_DWORD *)(*(void *)a2 + v86);
              unint64_t v74 = *((void *)a2 + 2);
              unint64_t v73 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v73;
            }
LABEL_154:
            PB::Reader::recallMark();
          }
          else
          {
            char v101 = (char *)*((void *)this + 8);
            unint64_t v100 = *((void *)this + 9);
            if ((unint64_t)v101 >= v100)
            {
              unint64_t v114 = (char *)*((void *)this + 7);
              uint64_t v115 = (v101 - v114) >> 2;
              unint64_t v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62) {
LABEL_223:
              }
                sub_2570AFD0C();
              uint64_t v117 = v100 - (void)v114;
              if (v117 >> 1 > v116) {
                unint64_t v116 = v117 >> 1;
              }
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v118 = v116;
              }
              if (v118)
              {
                unint64_t v118 = (unint64_t)sub_2572C76F0(v118);
                unint64_t v114 = (char *)*((void *)this + 7);
                char v101 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v119 = 0;
              }
              char v124 = (_DWORD *)(v118 + 4 * v115);
              *char v124 = 0;
              unint64_t v97 = v124 + 1;
              while (v101 != v114)
              {
                int v125 = *((_DWORD *)v101 - 1);
                v101 -= 4;
                *--char v124 = v125;
              }
              *((void *)this + 7) = v124;
              *((void *)this + 8) = v97;
              *((void *)this + 9) = v118 + 4 * v119;
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              *(_DWORD *)char v101 = 0;
              unint64_t v97 = v101 + 4;
            }
            *((void *)this + 8) = v97;
LABEL_208:
            unint64_t v126 = *((void *)a2 + 1);
            if (v126 <= 0xFFFFFFFFFFFFFFFBLL && v126 + 4 <= *((void *)a2 + 2))
            {
              *(v97 - 1) = *(_DWORD *)(*(void *)a2 + v126);
LABEL_212:
              uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_213:
              *((void *)a2 + 1) = v21;
            }
            else
            {
LABEL_210:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_214;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_214:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::PearlAttitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 124);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80));
    __int16 v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_7:
  if ((v4 & 0x10) != 0) {
LABEL_8:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_9:
  __int16 v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    this = PB::Writer::write(a2, *(float *)(v3 + 116));
    if ((*(_WORD *)(v3 + 124) & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v8 & 4) != 0) {
LABEL_15:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
LABEL_16:
  char v9 = *(float **)(v3 + 32);
  unsigned int v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    this = PB::Writer::write(a2, v11);
  }
  char v13 = *(float **)(v3 + 56);
  unint64_t v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    float v14 = *v13++;
    this = PB::Writer::write(a2, v14);
  }
  return this;
}

uint64_t CMMsl::PearlAttitude::hash_value(CMMsl::PearlAttitude *this)
{
  __int16 v2 = *((_WORD *)this + 62);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((_WORD *)this + 62) & 0x200) != 0) {
      goto LABEL_11;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_28:
    uint64_t v11 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t v12 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  if (*((double *)this + 10) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 10);
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_3:
  float v4 = *((float *)this + 27);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v2 & 0x20) == 0) {
    goto LABEL_26;
  }
LABEL_7:
  float v6 = *((float *)this + 26);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((*((_WORD *)this + 62) & 0x200) == 0) {
    goto LABEL_27;
  }
LABEL_11:
  float v8 = *((float *)this + 30);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_28;
  }
LABEL_15:
  float v10 = *((float *)this + 22);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = LODWORD(v10);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v12 = *((unsigned int *)this + 28);
  if ((v2 & 0x10) != 0)
  {
LABEL_20:
    uint64_t v13 = *((unsigned int *)this + 25);
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v13 = 0;
LABEL_31:
  uint64_t v14 = PBHashBytes();
  __int16 v15 = *((_WORD *)this + 62);
  if ((v15 & 8) != 0)
  {
    float v21 = *((float *)this + 24);
    uint64_t v16 = LODWORD(v21);
    if (v21 == 0.0) {
      uint64_t v16 = 0;
    }
    if ((*((_WORD *)this + 62) & 0x100) != 0)
    {
LABEL_33:
      float v17 = *((float *)this + 29);
      uint64_t v18 = LODWORD(v17);
      if (v17 == 0.0) {
        uint64_t v18 = 0;
      }
      if ((v15 & 4) != 0) {
        goto LABEL_36;
      }
LABEL_43:
      uint64_t v20 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 62) & 0x100) != 0) {
      goto LABEL_33;
    }
  }
  uint64_t v18 = 0;
  if ((v15 & 4) == 0) {
    goto LABEL_43;
  }
LABEL_36:
  float v19 = *((float *)this + 23);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
LABEL_44:
  uint64_t v22 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v16 ^ v18 ^ v20 ^ v14;
  uint64_t v23 = PBHashBytes();
  return v22 ^ v23 ^ PBHashBytes();
}

void CMMsl::PedOdomFusionExtendedModeSegment::~PedOdomFusionExtendedModeSegment(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  *(void *)this = &unk_270643DA0;
  *(_DWORD *)(this + 56) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 56) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 56) = v3;
    *(void *)(this + 32) = v5;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 56) = v3;
    *(void *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 56) = v3;
  *(void *)(this + 8) = v7;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(unsigned char *)(this + 56) = v3;
  *(void *)(this + 40) = v8;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_16:
    int v10 = *((_DWORD *)a2 + 12);
    *(unsigned char *)(this + 56) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v10;
    return this;
  }
LABEL_15:
  char v9 = *((unsigned char *)a2 + 52);
  v3 |= 0x40u;
  *(unsigned char *)(this + 56) = v3;
  *(unsigned char *)(this + 52) = v9;
  if ((*((unsigned char *)a2 + 56) & 0x20) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  if ((const CMMsl::PedOdomFusionExtendedModeSegment *)a1 != a2)
  {
    CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 52);
    *(unsigned char *)(a1 + 52) = v14;
    char v14 = v3;
    int v7 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedOdomFusionExtendedModeSegment *a2, CMMsl::PedOdomFusionExtendedModeSegment *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  LOBYTE(v3) = *((unsigned char *)this + 52);
  *((unsigned char *)this + 52) = *((unsigned char *)a2 + 52);
  *((unsigned char *)a2 + 52) = v3;
  int v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  return result;
}

double CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643DA0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643DA0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v12 = &unk_270643DA0;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    char v5 = *(unsigned char *)(a2 + 52);
    int v6 = *(_DWORD *)(a2 + 48);
    int v18 = *(_DWORD *)(a1 + 56);
    long long v14 = *(_OWORD *)(a1 + 24);
    long long v7 = *(_OWORD *)(a1 + 8);
    long long v8 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    long long v13 = v7;
    *(void *)&long long v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v4;
    uint64_t v15 = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 52);
    *(unsigned char *)(a1 + 52) = v5;
    char v17 = v3;
    int v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v6;
    int v16 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::formatText(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "batchedLocationFixType");
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "distOdom", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "distPed", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isValid");
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "timeStart", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timeStop", *((double *)this + 4));
  if ((*((unsigned char *)this + 56) & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "uncOdom", *((double *)this + 5));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::readFrom(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_63;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 56) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 2u:
        *((unsigned char *)this + 56) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 3u:
        *((unsigned char *)this + 56) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 4u:
        *((unsigned char *)this + 56) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_57;
      case 5u:
        *((unsigned char *)this + 56) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_57:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((unsigned char *)this + 56) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 52) = v21;
        break;
      case 7u:
        *((unsigned char *)this + 56) |= 0x20u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v30 = v22++;
            char v31 = *(unsigned char *)(v23 + v30);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_61:
              unint64_t v2 = v30 + 1;
              goto LABEL_62;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_61;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_62;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_62:
        *((_DWORD *)this + 12) = v26;
        break;
      default:
        goto LABEL_19;
    }
LABEL_63:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::hash_value(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  if ((*((unsigned char *)this + 56) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_20:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_21:
    double v3 = 0.0;
    if (*((unsigned char *)this + 56)) {
      goto LABEL_9;
    }
LABEL_22:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_23:
    double v5 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_24:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_16;
    }
LABEL_25:
    uint64_t v7 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ v7;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 8) == 0) {
    goto LABEL_20;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 2) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    goto LABEL_22;
  }
LABEL_9:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x10) == 0) {
    goto LABEL_23;
  }
LABEL_12:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_15:
  uint64_t v6 = *((unsigned __int8 *)this + 52);
  if ((*((unsigned char *)this + 56) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_16:
  uint64_t v7 = *((int *)this + 12);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ v7;
}

void CMMsl::PedestrianCalorieModelDebugging::~PedestrianCalorieModelDebugging(CMMsl::PedestrianCalorieModelDebugging *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  *(void *)this = &unk_270643DD8;
  *(_DWORD *)(this + 116) = 0;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 8);
    __int16 v3 = 128;
    *(_WORD *)(this + 116) = 128;
    *(void *)(this + 64) = v4;
    __int16 v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 58) & 0x2000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 27);
    v3 |= 0x2000u;
    *(_WORD *)(this + 116) = v3;
    *(_DWORD *)(this + 108) = v5;
    __int16 v2 = *((_WORD *)a2 + 58);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 116) = v3;
    *(void *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 56) = v7;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 8) = v9;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 16) = v10;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v11 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 96) = v11;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v12 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v13 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 72) = v13;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v14 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 48) = v14;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v15 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 88) = v15;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v16 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 116) = v3;
  *(void *)(this + 80) = v16;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }
LABEL_32:
  char v17 = *((unsigned char *)a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(this + 116) = v3;
  *(unsigned char *)(this + 113) = v17;
  __int16 v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      return this;
    }
LABEL_34:
    int v19 = *((_DWORD *)a2 + 26);
    *(_WORD *)(this + 116) = v3 | 0x1000;
    *(_DWORD *)(this + 104) = v19;
    return this;
  }
LABEL_33:
  char v18 = *((unsigned char *)a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(this + 116) = v3;
  *(unsigned char *)(this + 112) = v18;
  if ((*((_WORD *)a2 + 58) & 0x1000) != 0) {
    goto LABEL_34;
  }
  return this;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *a1, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  if (a1 != a2)
  {
    CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PedestrianCalorieModelDebugging *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedestrianCalorieModelDebugging *a2, CMMsl::PedestrianCalorieModelDebugging *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v15;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  LOBYTE(v5) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v5;
  int v17 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  return result;
}

double CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643DD8;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  double result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PedestrianCalorieModelDebugging *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::formatText(CMMsl::PedestrianCalorieModelDebugging *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 58);
  if (v5)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 58);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "duration", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gradeType");
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isIndoor");
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isMotionOverrideSet");
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "metsWR", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "steps");
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "stepsDuration", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "truthMetsGradeCorrected", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 58);
  if ((v5 & 0x400) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "truthMetsStrollerCorrected", *((double *)this + 11));
  if ((*((_WORD *)this + 58) & 0x800) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 12));
LABEL_18:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::readFrom(CMMsl::PedestrianCalorieModelDebugging *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_107;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 58) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 2u:
        *((_WORD *)this + 58) |= 0x2000u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_101;
            }
            unint64_t v38 = v20++;
            char v39 = *(unsigned char *)(v21 + v38);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_100:
              unint64_t v2 = v38 + 1;
              goto LABEL_101;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_100;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_101;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_101:
        *((_DWORD *)this + 27) = v24;
        break;
      case 3u:
        *((_WORD *)this + 58) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 4u:
        *((_WORD *)this + 58) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 5u:
        *((_WORD *)this + 58) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 6u:
        *((_WORD *)this + 58) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 7u:
        *((_WORD *)this + 58) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 8u:
        *((_WORD *)this + 58) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 9u:
        *((_WORD *)this + 58) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 0xAu:
        *((_WORD *)this + 58) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 0xBu:
        *((_WORD *)this + 58) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 0xCu:
        *((_WORD *)this + 58) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_65;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_96;
      case 0xDu:
        *((_WORD *)this + 58) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
LABEL_96:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_65:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0xEu:
        *((_WORD *)this + 58) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 113) = v27;
        break;
      case 0xFu:
        *((_WORD *)this + 58) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 112) = v29;
        break;
      case 0x10u:
        *((_WORD *)this + 58) |= 0x1000u;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v34 = 0;
          if (v2 <= v30) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_106;
            }
            unint64_t v42 = v30++;
            char v43 = *(unsigned char *)(v31 + v42);
            *((void *)a2 + 1) = v30;
            v34 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_105:
              unint64_t v2 = v42 + 1;
              goto LABEL_106;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v34) = 0;
          }
          goto LABEL_105;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        do
        {
          unint64_t v2 = v30 + 1;
          *((void *)a2 + 1) = v30 + 1;
          char v35 = *(unsigned char *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0) {
            goto LABEL_106;
          }
          v32 += 7;
          unint64_t v30 = v2;
          BOOL v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_106:
        *((_DWORD *)this + 26) = v34;
        break;
      default:
        goto LABEL_19;
    }
LABEL_107:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    __int16 v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 116) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_33;
  }
LABEL_31:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_32;
  }
LABEL_16:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_33:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::hash_value(CMMsl::PedestrianCalorieModelDebugging *this)
{
  __int16 v1 = *((_WORD *)this + 58);
  if ((v1 & 0x80) != 0)
  {
    double v2 = *((double *)this + 8);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((*((_WORD *)this + 58) & 0x2000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 27);
      if ((v1 & 4) != 0) {
        goto LABEL_4;
      }
LABEL_44:
      double v4 = 0.0;
      if ((v1 & 0x40) != 0) {
        goto LABEL_7;
      }
LABEL_45:
      double v5 = 0.0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_10;
      }
LABEL_46:
      double v6 = 0.0;
      if (v1) {
        goto LABEL_13;
      }
LABEL_47:
      double v7 = 0.0;
      if ((v1 & 2) != 0) {
        goto LABEL_16;
      }
LABEL_48:
      double v8 = 0.0;
      if ((*((_WORD *)this + 58) & 0x800) != 0) {
        goto LABEL_19;
      }
LABEL_49:
      double v9 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_22;
      }
LABEL_50:
      double v10 = 0.0;
      if ((*((_WORD *)this + 58) & 0x100) != 0) {
        goto LABEL_25;
      }
LABEL_51:
      double v11 = 0.0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_28;
      }
LABEL_52:
      double v12 = 0.0;
      if ((*((_WORD *)this + 58) & 0x400) != 0) {
        goto LABEL_31;
      }
LABEL_53:
      double v13 = 0.0;
      if ((*((_WORD *)this + 58) & 0x200) != 0) {
        goto LABEL_34;
      }
LABEL_54:
      double v14 = 0.0;
      if ((*((_WORD *)this + 58) & 0x8000) != 0) {
        goto LABEL_37;
      }
      goto LABEL_55;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 58) & 0x2000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_44;
  }
LABEL_4:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_45;
  }
LABEL_7:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_46;
  }
LABEL_10:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_13:
  double v7 = *((double *)this + 1);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_48;
  }
LABEL_16:
  double v8 = *((double *)this + 2);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x800) == 0) {
    goto LABEL_49;
  }
LABEL_19:
  double v9 = *((double *)this + 12);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_50;
  }
LABEL_22:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x100) == 0) {
    goto LABEL_51;
  }
LABEL_25:
  double v11 = *((double *)this + 9);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_52;
  }
LABEL_28:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_31:
  double v13 = *((double *)this + 11);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x200) == 0) {
    goto LABEL_54;
  }
LABEL_34:
  double v14 = *((double *)this + 10);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((*((_WORD *)this + 58) & 0x8000) != 0)
  {
LABEL_37:
    uint64_t v15 = *((unsigned __int8 *)this + 113);
    if ((*((_WORD *)this + 58) & 0x4000) != 0) {
      goto LABEL_38;
    }
LABEL_56:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 58) & 0x1000) != 0) {
      goto LABEL_39;
    }
LABEL_57:
    uint64_t v17 = 0;
    return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ v17;
  }
LABEL_55:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 58) & 0x4000) == 0) {
    goto LABEL_56;
  }
LABEL_38:
  uint64_t v16 = *((unsigned __int8 *)this + 112);
  if ((*((_WORD *)this + 58) & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_39:
  uint64_t v17 = *((unsigned int *)this + 26);
  return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ v17;
}

void CMMsl::PedestrianFenceExit::~PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t this, const CMMsl::PedestrianFenceExit *a2)
{
  *(void *)this = &unk_270643E10;
  *(void *)(this + 28) = 0xFFFFFFFFLL;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 32) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, const CMMsl::PedestrianFenceExit *a2)
{
  if ((const CMMsl::PedestrianFenceExit *)a1 != a2)
  {
    CMMsl::PedestrianFenceExit::PedestrianFenceExit((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v4;
    *(void *)&long long v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v9;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PedestrianFenceExit *a2, CMMsl::PedestrianFenceExit *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  int v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  return result;
}

float CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643E10;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270643E10;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = &unk_270643E10;
    int v3 = *(_DWORD *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    int v10 = v5;
    uint64_t v6 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v4;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PedestrianFenceExit::formatText(CMMsl::PedestrianFenceExit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampExit", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestampSet", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "userResponse");
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PedestrianFenceExit::readFrom(CMMsl::PedestrianFenceExit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_54;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_32;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_29:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_48;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_48:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_32:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_53;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_52:
              unint64_t v2 = v28 + 1;
              goto LABEL_53;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_52;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_53;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_53:
        *((_DWORD *)this + 7) = v24;
        break;
      default:
        goto LABEL_19;
    }
LABEL_54:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedestrianFenceExit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 24));
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PedestrianFenceExit::hash_value(CMMsl::PedestrianFenceExit *this)
{
  if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
LABEL_13:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_6:
    float v3 = *((float *)this + 6);
    uint64_t v4 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v4 = 0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v5 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v4 ^ v5;
  }
LABEL_14:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v5 = *((int *)this + 7);
  return *(void *)&v2 ^ *(void *)&v1 ^ v4 ^ v5;
}

void CMMsl::PedometerPathStraightness::~PedometerPathStraightness(CMMsl::PedometerPathStraightness *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(CMMsl::PedometerPathStraightness *this, const CMMsl::PedometerPathStraightness *a2)
{
  *(void *)this = &unk_270643E48;
  *((_DWORD *)this + 14) = 0;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 56) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((unsigned char *)this + 56) = v3;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 2) = result;
  char v2 = *((unsigned char *)a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 56) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((unsigned char *)this + 56) = v3;
  *((double *)this + 6) = result;
  if (*((unsigned char *)a2 + 56)) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, const CMMsl::PedometerPathStraightness *a2)
{
  if ((const CMMsl::PedometerPathStraightness *)a1 != a2)
  {
    CMMsl::PedometerPathStraightness::PedometerPathStraightness((CMMsl::PedometerPathStraightness *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedometerPathStraightness *a2, CMMsl::PedometerPathStraightness *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643E48;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643E48;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = &unk_270643E48;
    int v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    int v13 = *(_DWORD *)(a1 + 56);
    long long v11 = *(_OWORD *)(a1 + 24);
    long long v12 = *(_OWORD *)(a1 + 40);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PedometerPathStraightness::formatText(CMMsl::PedometerPathStraightness *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 56);
  if (v5)
  {
    PB::TextFormatter::format(a2, "complexHandMotionPercentage", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "straightnessMetric", *((double *)this + 5));
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "walkPercentage", *((double *)this + 6));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PedometerPathStraightness::readFrom(CMMsl::PedometerPathStraightness *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_43;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 56) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((unsigned char *)this + 56) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((unsigned char *)this + 56) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((unsigned char *)this + 56) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((unsigned char *)this + 56) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((unsigned char *)this + 56) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_42:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PedometerPathStraightness::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
    if ((*(unsigned char *)(v3 + 56) & 1) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PedometerPathStraightness::hash_value(CMMsl::PedometerPathStraightness *this)
{
  if ((*((unsigned char *)this + 56) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 56) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 56) & 0x20) != 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 2) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 56) & 0x20) != 0)
  {
LABEL_12:
    double v5 = *((double *)this + 6);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if (*((unsigned char *)this + 56)) {
      goto LABEL_15;
    }
LABEL_25:
    double v6 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
LABEL_24:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void CMMsl::PeerState::~PeerState(CMMsl::PeerState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this, const CMMsl::PeerState *a2)
{
  *(void *)this = &unk_270643E80;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::PeerState *CMMsl::PeerState::operator=(const CMMsl::PeerState *a1, const CMMsl::PeerState *a2)
{
  if (a1 != a2)
  {
    CMMsl::PeerState::PeerState((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PeerState *a2, CMMsl::PeerState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::PeerState::PeerState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643E80;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643E80;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PeerState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270643E80;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PeerState::formatText(CMMsl::PeerState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "motionState");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PeerState::readFrom(CMMsl::PeerState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PeerState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::PeerState::hash_value(CMMsl::PeerState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::PencilDeviceMotion::~PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  *(void *)this = &unk_270643EB8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PencilDeviceMotion::~PencilDeviceMotion(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PencilDeviceMotion *CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this, const CMMsl::PencilDeviceMotion *a2)
{
  *(void *)this = &unk_270643EB8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C75B4((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v4 = *((unsigned char *)a2 + 48);
  if ((v4 & 2) != 0)
  {
    int v5 = *((_DWORD *)a2 + 11);
    *((unsigned char *)this + 48) |= 2u;
    *((_DWORD *)this + 11) = v5;
    char v4 = *((unsigned char *)a2 + 48);
  }
  if (v4)
  {
    int v6 = *((_DWORD *)a2 + 10);
    *((unsigned char *)this + 48) |= 1u;
    *((_DWORD *)this + 10) = v6;
  }
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, const CMMsl::PencilDeviceMotion *a2)
{
  if ((const CMMsl::PencilDeviceMotion *)a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v4;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PencilDeviceMotion *a2, CMMsl::PencilDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::PencilDeviceMotion::PencilDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643EB8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v4;
    long long v9 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    uint64_t v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::formatText(CMMsl::PencilDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "gyroBias", v7);
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "super");
  }
  char v9 = *((unsigned char *)this + 48);
  if (v9)
  {
    PB::TextFormatter::format(a2, "temperatureGyro", *((float *)this + 10));
    char v9 = *((unsigned char *)this + 48);
  }
  if ((v9 & 2) != 0) {
    PB::TextFormatter::format(a2, "temperatureGyroBias", *((float *)this + 11));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PencilDeviceMotion::readFrom(CMMsl::PencilDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v19 = *((void *)a2 + 1);
          unint64_t v20 = *((void *)a2 + 2);
          while (v19 < v20 && !*((unsigned char *)a2 + 24))
          {
            char v22 = (char *)*((void *)this + 2);
            unint64_t v21 = *((void *)this + 3);
            if ((unint64_t)v22 >= v21)
            {
              uint64_t v24 = (char *)*((void *)this + 1);
              uint64_t v25 = (v22 - v24) >> 2;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 62) {
                goto LABEL_84;
              }
              uint64_t v27 = v21 - (void)v24;
              if (v27 >> 1 > v26) {
                unint64_t v26 = v27 >> 1;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unint64_t v28 = (unint64_t)sub_2572C76F0(v28);
                uint64_t v24 = (char *)*((void *)this + 1);
                char v22 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v29 = 0;
              }
              unint64_t v30 = (_DWORD *)(v28 + 4 * v25);
              *unint64_t v30 = 0;
              unsigned int v23 = v30 + 1;
              while (v22 != v24)
              {
                int v31 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *--unint64_t v30 = v31;
              }
              *((void *)this + 1) = v30;
              *((void *)this + 2) = v23;
              *((void *)this + 3) = v28 + 4 * v29;
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(_DWORD *)char v22 = 0;
              unsigned int v23 = v22 + 4;
            }
            *((void *)this + 2) = v23;
            unint64_t v32 = *((void *)a2 + 1);
            if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v23 - 1) = *(_DWORD *)(*(void *)a2 + v32);
            unint64_t v20 = *((void *)a2 + 2);
            unint64_t v19 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v19;
          }
          PB::Reader::recallMark();
        }
        else
        {
          char v36 = (char *)*((void *)this + 2);
          unint64_t v35 = *((void *)this + 3);
          if ((unint64_t)v36 >= v35)
          {
            unint64_t v38 = (char *)*((void *)this + 1);
            uint64_t v39 = (v36 - v38) >> 2;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62) {
LABEL_84:
            }
              sub_2570AFD0C();
            uint64_t v41 = v35 - (void)v38;
            if (v41 >> 1 > v40) {
              unint64_t v40 = v41 >> 1;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              unint64_t v42 = (unint64_t)sub_2572C76F0(v42);
              unint64_t v38 = (char *)*((void *)this + 1);
              char v36 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v43 = 0;
            }
            unint64_t v44 = (_DWORD *)(v42 + 4 * v39);
            *unint64_t v44 = 0;
            unsigned int v37 = v44 + 1;
            while (v36 != v38)
            {
              int v45 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *--unint64_t v44 = v45;
            }
            *((void *)this + 1) = v44;
            *((void *)this + 2) = v37;
            *((void *)this + 3) = v42 + 4 * v43;
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(_DWORD *)char v36 = 0;
            unsigned int v37 = v36 + 4;
          }
          *((void *)this + 2) = v37;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= *((void *)a2 + 2))
          {
            *(v37 - 1) = *(_DWORD *)(*(void *)a2 + v46);
LABEL_76:
            *((void *)a2 + 1) += 4;
          }
          else
          {
LABEL_74:
            *((unsigned char *)a2 + 24) = 1;
          }
        }
        break;
      case 3u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v33 = *((void *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
          goto LABEL_74;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v33);
        goto LABEL_76;
      case 4u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v34 = *((void *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
          goto LABEL_74;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v34);
        goto LABEL_76;
      default:
        goto LABEL_19;
    }
LABEL_77:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_77;
  }
  return 0;
}

uint64_t CMMsl::PencilDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  long long v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  char v8 = *(unsigned char *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 44));
    char v8 = *(unsigned char *)(v3 + 48);
  }
  if (v8)
  {
    float v9 = *(float *)(v3 + 40);
    return PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::hash_value(CMMsl::PencilDeviceMotion *this)
{
  unint64_t v2 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 4);
  if (v2) {
    uint64_t v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    float v8 = *((float *)this + 11);
    uint64_t v5 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v5 = 0;
    }
    if (*((unsigned char *)this + 48)) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v7 = 0;
    return v4 ^ v3 ^ v5 ^ v7;
  }
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  float v6 = *((float *)this + 10);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::PencilDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void CMMsl::PencilFusionDMYawAlignmentUpdate::~PencilFusionDMYawAlignmentUpdate(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  *(void *)this = &unk_270643EF0;
  *(_DWORD *)(this + 64) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *((void *)a2 + 6);
    char v3 = 32;
    *(unsigned char *)(this + 64) = 32;
    *(void *)(this + 48) = v4;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 64) = v3;
    *(void *)(this + 32) = v6;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 14);
  v3 |= 0x40u;
  *(unsigned char *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v7;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 40) = v8;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 8) = v9;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_18:
    int v11 = *((_DWORD *)a2 + 15);
    *(unsigned char *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 60) = v11;
    return this;
  }
LABEL_17:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 64) = v3;
  *(void *)(this + 16) = v10;
  if ((*((unsigned char *)a2 + 64) & 0x80) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  if ((const CMMsl::PencilFusionDMYawAlignmentUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v4;
    long long v11 = v3;
    *(void *)&long long v4 = v14;
    *(void *)&long long v3 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v4;
    int v6 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v6;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v7;
    uint64_t v13 = v3;
    uint64_t v14 = v5;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionDMYawAlignmentUpdate *a2, CMMsl::PencilFusionDMYawAlignmentUpdate *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  int v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  return result;
}

double CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643EF0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643EF0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 24);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v11 = &unk_270643EF0;
    int v17 = *(_DWORD *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v4;
    long long v12 = v9;
    long long v13 = v8;
    *(void *)&long long v9 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = v3;
    *(void *)(a1 + 56) = v9;
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::formatText(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "firstRingSensorTimeStampMicroSeconds");
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds");
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "medianBufferNumSamples");
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "medianNorthAlignmentEstimateRad", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "newNorthAlignmentEstimateRad", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "numRingSensorSamples");
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timeElapsedSinceLastUpdateMicroSeconds");
  if ((*((unsigned char *)this + 64) & 0x20) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
LABEL_10:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::readFrom(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_26;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_26:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 64) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_108;
      case 2u:
        *((unsigned char *)this + 64) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_36;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_108;
      case 3u:
        *((unsigned char *)this + 64) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_108:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_36:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 64) |= 0x40u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_113;
            }
            unint64_t v53 = v21++;
            char v54 = *(unsigned char *)(v22 + v53);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v54 & 0x7F) << v51;
            if ((v54 & 0x80) == 0) {
              break;
            }
            v51 += 7;
            BOOL v14 = v52++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
LABEL_112:
              unint64_t v2 = v53 + 1;
              goto LABEL_113;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
          goto LABEL_112;
        }
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_113;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
        }
        while (!v14);
        LODWORD(v25) = 0;
LABEL_113:
        *((_DWORD *)this + 14) = v25;
        break;
      case 5u:
        *((unsigned char *)this + 64) |= 0x10u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_118;
            }
            unint64_t v57 = v27++;
            char v58 = *(unsigned char *)(v28 + v57);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v58 & 0x7F) << v55;
            if ((v58 & 0x80) == 0) {
              break;
            }
            v55 += 7;
            BOOL v14 = v56++ > 8;
            if (v14)
            {
              uint64_t v31 = 0;
LABEL_117:
              unint64_t v2 = v57 + 1;
              goto LABEL_118;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v31 = 0;
          }
          goto LABEL_117;
        }
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unint64_t v2 = v27 + 1;
          *((void *)a2 + 1) = v27 + 1;
          char v32 = *(unsigned char *)(v28 + v27);
          v31 |= (unint64_t)(v32 & 0x7F) << v29;
          if ((v32 & 0x80) == 0) {
            goto LABEL_118;
          }
          v29 += 7;
          unint64_t v27 = v2;
          BOOL v14 = v30++ > 8;
        }
        while (!v14);
        uint64_t v31 = 0;
LABEL_118:
        *((void *)this + 5) = v31;
        break;
      case 6u:
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v34 = *(void *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v33)
            {
              uint64_t v37 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_123;
            }
            unint64_t v61 = v33++;
            char v62 = *(unsigned char *)(v34 + v61);
            *((void *)a2 + 1) = v33;
            v37 |= (unint64_t)(v62 & 0x7F) << v59;
            if ((v62 & 0x80) == 0) {
              break;
            }
            v59 += 7;
            BOOL v14 = v60++ > 8;
            if (v14)
            {
              uint64_t v37 = 0;
LABEL_122:
              unint64_t v2 = v61 + 1;
              goto LABEL_123;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v37 = 0;
          }
          goto LABEL_122;
        }
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        do
        {
          unint64_t v2 = v33 + 1;
          *((void *)a2 + 1) = v33 + 1;
          char v38 = *(unsigned char *)(v34 + v33);
          v37 |= (unint64_t)(v38 & 0x7F) << v35;
          if ((v38 & 0x80) == 0) {
            goto LABEL_123;
          }
          v35 += 7;
          unint64_t v33 = v2;
          BOOL v14 = v36++ > 8;
        }
        while (!v14);
        uint64_t v37 = 0;
LABEL_123:
        *((void *)this + 1) = v37;
        break;
      case 7u:
        *((unsigned char *)this + 64) |= 2u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              uint64_t v43 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_128;
            }
            unint64_t v65 = v39++;
            char v66 = *(unsigned char *)(v40 + v65);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v66 & 0x7F) << v63;
            if ((v66 & 0x80) == 0) {
              break;
            }
            v63 += 7;
            BOOL v14 = v64++ > 8;
            if (v14)
            {
              uint64_t v43 = 0;
LABEL_127:
              unint64_t v2 = v65 + 1;
              goto LABEL_128;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v43 = 0;
          }
          goto LABEL_127;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        do
        {
          unint64_t v2 = v39 + 1;
          *((void *)a2 + 1) = v39 + 1;
          char v44 = *(unsigned char *)(v40 + v39);
          v43 |= (unint64_t)(v44 & 0x7F) << v41;
          if ((v44 & 0x80) == 0) {
            goto LABEL_128;
          }
          v41 += 7;
          unint64_t v39 = v2;
          BOOL v14 = v42++ > 8;
        }
        while (!v14);
        uint64_t v43 = 0;
LABEL_128:
        *((void *)this + 2) = v43;
        break;
      case 8u:
        *((unsigned char *)this + 64) |= 0x80u;
        unint64_t v45 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v46 = *(void *)a2;
        if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
        {
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v49 = 0;
          if (v2 <= v45) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v45)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_133;
            }
            unint64_t v69 = v45++;
            char v70 = *(unsigned char *)(v46 + v69);
            *((void *)a2 + 1) = v45;
            v49 |= (unint64_t)(v70 & 0x7F) << v67;
            if ((v70 & 0x80) == 0) {
              break;
            }
            v67 += 7;
            BOOL v14 = v68++ > 8;
            if (v14)
            {
              LODWORD(v49) = 0;
LABEL_132:
              unint64_t v2 = v69 + 1;
              goto LABEL_133;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v49) = 0;
          }
          goto LABEL_132;
        }
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v49 = 0;
        do
        {
          unint64_t v2 = v45 + 1;
          *((void *)a2 + 1) = v45 + 1;
          char v50 = *(unsigned char *)(v46 + v45);
          v49 |= (unint64_t)(v50 & 0x7F) << v47;
          if ((v50 & 0x80) == 0) {
            goto LABEL_133;
          }
          v47 += 7;
          unint64_t v45 = v2;
          BOOL v14 = v48++ > 8;
        }
        while (!v14);
        LODWORD(v49) = 0;
LABEL_133:
        *((_DWORD *)this + 15) = v49;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 64) & 0x80) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_17:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  if ((*((unsigned char *)this + 64) & 0x20) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_18:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x40) != 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  double v1 = *((double *)this + 6);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 8) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  double v3 = *((double *)this + 4);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x40) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 14);
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 64) & 0x10) != 0)
  {
LABEL_10:
    uint64_t v5 = *((void *)this + 5);
    if (*((unsigned char *)this + 64)) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v5 = 0;
  if (*((unsigned char *)this + 64))
  {
LABEL_11:
    uint64_t v6 = *((void *)this + 1);
    if ((*((unsigned char *)this + 64) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_22:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 64) & 0x80) != 0) {
      goto LABEL_13;
    }
LABEL_23:
    uint64_t v8 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 64) & 2) == 0) {
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v7 = *((void *)this + 2);
  if ((*((unsigned char *)this + 64) & 0x80) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v8 = *((unsigned int *)this + 15);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this)
{
  *(void *)this = &unk_270643F28;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  double v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PencilFusionReplayResult *CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this, const CMMsl::PencilFusionReplayResult *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_270643F28;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 64) & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) |= 4u;
    *((void *)this + 7) = v4;
  }
  if (this != a2) {
    sub_2572C73EC((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  char v5 = *((unsigned char *)a2 + 64);
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 64) |= 1u;
    *((void *)this + 4) = v6;
    char v5 = *((unsigned char *)a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 5);
    *((unsigned char *)this + 64) |= 2u;
    *((void *)this + 5) = v7;
  }
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, const CMMsl::PencilFusionReplayResult *a2)
{
  if ((const CMMsl::PencilFusionReplayResult *)a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = v16;
    *(void *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    long long v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PencilFusionReplayResult *a2, CMMsl::PencilFusionReplayResult *a3)
{
  int v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *(void *)(this + 48);
  uint64_t v5 = *(void *)(this + 56);
  uint64_t v6 = *((void *)a2 + 7);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *(void *)(this + 56) = v6;
  *((void *)a2 + 6) = v4;
  *((void *)a2 + 7) = v5;
  uint64_t v7 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *(void *)(this + 24);
  uint64_t v10 = *(void *)(this + 32);
  uint64_t v11 = *((void *)a2 + 4);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *(void *)(this + 32) = v11;
  *((void *)a2 + 3) = v9;
  *((void *)a2 + 4) = v10;
  uint64_t v12 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643F28;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((uint64_t)v11, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = v16;
    *(void *)(a1 + 48) = v15;
    *(void *)(a1 + 56) = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    uint64_t v8 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    long long v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::formatText(CMMsl::PencilFusionReplayResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lastAuxTimeStampMicroSeconds");
    char v5 = *((unsigned char *)this + 64);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds");
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  long long v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "qSP", v8);
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "super");
  }
  if ((*((unsigned char *)this + 64) & 4) != 0) {
    PB::TextFormatter::format(a2, "timeStampMicroSeconds");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PencilFusionReplayResult::readFrom(CMMsl::PencilFusionReplayResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            operator new();
          case 2u:
            *((unsigned char *)this + 64) |= 4u;
            unint64_t v20 = *((void *)a2 + 1);
            unint64_t v21 = *((void *)a2 + 2);
            uint64_t v22 = *(void *)a2;
            if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
            {
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v26 = v20 + 1;
                *((void *)a2 + 1) = v20 + 1;
                char v27 = *(unsigned char *)(v22 + v20);
                v25 |= (unint64_t)(v27 & 0x7F) << v23;
                if ((v27 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v23 += 7;
                unint64_t v20 = v26;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
LABEL_80:
              uint64_t v25 = 0;
              goto LABEL_110;
            }
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v21 == v20)
              {
                uint64_t v25 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v60 = v20 + 1;
                char v61 = *(unsigned char *)(v22 + v20);
                *((void *)a2 + 1) = v60;
                v25 |= (unint64_t)(v61 & 0x7F) << v58;
                if (v61 < 0)
                {
                  v58 += 7;
                  unint64_t v20 = v60;
                  BOOL v14 = v59++ > 8;
                  if (v14) {
                    goto LABEL_80;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
              }
              break;
            }
LABEL_110:
            *((void *)this + 7) = v25;
            goto LABEL_20;
          case 3u:
            if ((v11 & 7) == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v28 = *((void *)a2 + 1);
              unint64_t v29 = *((void *)a2 + 2);
              while (v28 < v29 && !*((unsigned char *)a2 + 24))
              {
                uint64_t v31 = (char *)*((void *)this + 2);
                unint64_t v30 = *((void *)this + 3);
                if ((unint64_t)v31 >= v30)
                {
                  unint64_t v33 = (char *)*((void *)this + 1);
                  uint64_t v34 = (v31 - v33) >> 3;
                  unint64_t v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 61) {
                    goto LABEL_132;
                  }
                  uint64_t v36 = v30 - (void)v33;
                  if (v36 >> 2 > v35) {
                    unint64_t v35 = v36 >> 2;
                  }
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v35;
                  }
                  if (v37)
                  {
                    unint64_t v37 = (unint64_t)sub_2572C7528(v37);
                    unint64_t v33 = (char *)*((void *)this + 1);
                    uint64_t v31 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    uint64_t v38 = 0;
                  }
                  unint64_t v39 = (void *)(v37 + 8 * v34);
                  *unint64_t v39 = 0;
                  char v32 = v39 + 1;
                  while (v31 != v33)
                  {
                    uint64_t v40 = *((void *)v31 - 1);
                    v31 -= 8;
                    *--unint64_t v39 = v40;
                  }
                  *((void *)this + 1) = v39;
                  *((void *)this + 2) = v32;
                  *((void *)this + 3) = v37 + 8 * v38;
                  if (v33) {
                    operator delete(v33);
                  }
                }
                else
                {
                  *(void *)uint64_t v31 = 0;
                  char v32 = v31 + 8;
                }
                *((void *)this + 2) = v32;
                unint64_t v41 = *((void *)a2 + 1);
                if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)a2 + 2))
                {
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v32 - 1) = *(void *)(*(void *)a2 + v41);
                unint64_t v29 = *((void *)a2 + 2);
                unint64_t v28 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v28;
              }
              PB::Reader::recallMark();
            }
            else
            {
              char v63 = (char *)*((void *)this + 2);
              unint64_t v62 = *((void *)this + 3);
              if ((unint64_t)v63 >= v62)
              {
                unint64_t v73 = (char *)*((void *)this + 1);
                uint64_t v74 = (v63 - v73) >> 3;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61) {
LABEL_132:
                }
                  sub_2570AFD0C();
                uint64_t v76 = v62 - (void)v73;
                if (v76 >> 2 > v75) {
                  unint64_t v75 = v76 >> 2;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77)
                {
                  unint64_t v77 = (unint64_t)sub_2572C7528(v77);
                  unint64_t v73 = (char *)*((void *)this + 1);
                  char v63 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v78 = 0;
                }
                uint64_t v79 = (void *)(v77 + 8 * v74);
                *uint64_t v79 = 0;
                unsigned int v64 = v79 + 1;
                while (v63 != v73)
                {
                  uint64_t v80 = *((void *)v63 - 1);
                  v63 -= 8;
                  *--uint64_t v79 = v80;
                }
                *((void *)this + 1) = v79;
                *((void *)this + 2) = v64;
                *((void *)this + 3) = v77 + 8 * v78;
                if (v73) {
                  operator delete(v73);
                }
              }
              else
              {
                *(void *)char v63 = 0;
                unsigned int v64 = v63 + 8;
              }
              *((void *)this + 2) = v64;
              unint64_t v81 = *((void *)a2 + 1);
              if (v81 <= 0xFFFFFFFFFFFFFFF7 && v81 + 8 <= *((void *)a2 + 2))
              {
                *(v64 - 1) = *(void *)(*(void *)a2 + v81);
                *((void *)a2 + 1) += 8;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
            }
LABEL_20:
            unint64_t v2 = *((void *)a2 + 1);
            unint64_t v3 = *((void *)a2 + 2);
            int v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0) {
              return v4 == 0;
            }
            continue;
          case 4u:
            *((unsigned char *)this + 64) |= 1u;
            unint64_t v42 = *((void *)a2 + 1);
            unint64_t v43 = *((void *)a2 + 2);
            uint64_t v44 = *(void *)a2;
            if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
            {
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v48 = v42 + 1;
                *((void *)a2 + 1) = v42 + 1;
                char v49 = *(unsigned char *)(v44 + v42);
                v47 |= (unint64_t)(v49 & 0x7F) << v45;
                if ((v49 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v45 += 7;
                unint64_t v42 = v48;
                BOOL v14 = v46++ > 8;
              }
              while (!v14);
LABEL_89:
              uint64_t v47 = 0;
              goto LABEL_113;
            }
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v47 = 0;
            if (v43 <= v42) {
              unint64_t v43 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v43 == v42)
              {
                uint64_t v47 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v67 = v42 + 1;
                char v68 = *(unsigned char *)(v44 + v42);
                *((void *)a2 + 1) = v67;
                v47 |= (unint64_t)(v68 & 0x7F) << v65;
                if (v68 < 0)
                {
                  v65 += 7;
                  unint64_t v42 = v67;
                  BOOL v14 = v66++ > 8;
                  if (v14) {
                    goto LABEL_89;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v47 = 0;
                }
              }
              break;
            }
LABEL_113:
            *((void *)this + 4) = v47;
            goto LABEL_20;
          case 5u:
            *((unsigned char *)this + 64) |= 2u;
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            uint64_t v52 = *(void *)a2;
            if (v50 <= 0xFFFFFFFFFFFFFFF5 && v50 + 10 <= v51)
            {
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v56 = v50 + 1;
                *((void *)a2 + 1) = v50 + 1;
                char v57 = *(unsigned char *)(v52 + v50);
                v55 |= (unint64_t)(v57 & 0x7F) << v53;
                if ((v57 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v53 += 7;
                unint64_t v50 = v56;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
LABEL_96:
              uint64_t v55 = 0;
              goto LABEL_116;
            }
            char v69 = 0;
            unsigned int v70 = 0;
            uint64_t v55 = 0;
            if (v51 <= v50) {
              unint64_t v51 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v51 == v50)
              {
                uint64_t v55 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v71 = v50 + 1;
                char v72 = *(unsigned char *)(v52 + v50);
                *((void *)a2 + 1) = v71;
                v55 |= (unint64_t)(v72 & 0x7F) << v69;
                if (v72 < 0)
                {
                  v69 += 7;
                  unint64_t v50 = v71;
                  BOOL v14 = v70++ > 8;
                  if (v14) {
                    goto LABEL_96;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v55 = 0;
                }
              }
              break;
            }
LABEL_116:
            *((void *)this + 5) = v55;
            goto LABEL_20;
          default:
            goto LABEL_19;
        }
      }
      int v4 = 0;
      return v4 == 0;
    }
    break;
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_25;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if (PB::Reader::skip(a2)) {
    goto LABEL_20;
  }
  return 0;
}

uint64_t CMMsl::PencilFusionReplayResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 48);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if ((*(unsigned char *)(v3 + 64) & 4) != 0) {
    this = PB::Writer::writeVarInt(a2);
  }
  char v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  char v8 = *(unsigned char *)(v3 + 64);
  if (v8)
  {
    this = PB::Writer::writeVarInt(a2);
    char v8 = *(unsigned char *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::hash_value(CMMsl::PencilFusionReplayResult *this)
{
  unint64_t v2 = (CMMsl::PencilFusionResult *)*((void *)this + 6);
  if (v2) {
    uint64_t v3 = CMMsl::PencilFusionResult::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 64) & 4) != 0) {
    uint64_t v4 = *((void *)this + 7);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = PBHashBytes();
  if (*((unsigned char *)this + 64))
  {
    uint64_t v6 = *((void *)this + 4);
    if ((*((unsigned char *)this + 64) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = 0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v5;
  }
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 64) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v7 = *((void *)this + 5);
  return v4 ^ v3 ^ v6 ^ v7 ^ v5;
}

uint64_t CMMsl::PencilFusionReplayResult::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

void CMMsl::PencilFusionResult::~PencilFusionResult(CMMsl::PencilFusionResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this, const CMMsl::PencilFusionResult *a2)
{
  *(void *)this = &unk_270643F60;
  *(_DWORD *)(this + 76) = 0;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    __int16 v3 = 16;
    *(_WORD *)(this + 76) = 16;
    *(void *)(this + 40) = v4;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 76) = v3;
    *(void *)(this + 48) = v5;
    __int16 v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *((void *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 76) = v3;
    *(void *)(this + 56) = v6;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 16) = v9;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 32) = v10;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      return this;
    }
LABEL_20:
    char v12 = *((unsigned char *)a2 + 72);
    *(_WORD *)(this + 76) = v3 | 0x100;
    *(unsigned char *)(this + 72) = v12;
    return this;
  }
LABEL_19:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 76) = v3;
  *(void *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 38) & 0x100) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, const CMMsl::PencilFusionResult *a2)
{
  if ((const CMMsl::PencilFusionResult *)a1 != a2)
  {
    CMMsl::PencilFusionResult::PencilFusionResult((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v16;
    uint64_t v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v4;
    long long v5 = v15;
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v5;
    int v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    int v18 = v8;
    long long v14 = v7;
    long long v15 = v6;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v17;
    char v17 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionResult *a2, CMMsl::PencilFusionResult *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 72);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  *((unsigned char *)a2 + 72) = v11;
  return result;
}

double CMMsl::PencilFusionResult::PencilFusionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643F60;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return result;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilFusionResult::PencilFusionResult((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v16;
    uint64_t v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v4;
    long long v5 = v15;
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v5;
    int v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    int v18 = v8;
    long long v14 = v7;
    long long v15 = v6;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v17;
    char v17 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionResult::formatText(CMMsl::PencilFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 38);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 38);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "estimated");
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "estimationUpdateIndex");
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "rollAngle", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "x", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "y", *((double *)this + 7));
  if ((*((_WORD *)this + 38) & 0x80) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "z", *((double *)this + 8));
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PencilFusionResult::readFrom(CMMsl::PencilFusionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_69;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 38) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_63;
      case 2u:
        *((_WORD *)this + 38) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_63;
      case 3u:
        *((_WORD *)this + 38) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_63;
      case 4u:
        *((_WORD *)this + 38) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_63;
      case 5u:
        *((_WORD *)this + 38) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_63;
      case 6u:
        *((_WORD *)this + 38) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_63;
      case 7u:
        *((_WORD *)this + 38) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_63:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 8u:
        *((_WORD *)this + 38) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_68;
            }
            unint64_t v30 = v20++;
            char v31 = *(unsigned char *)(v21 + v30);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_67:
              unint64_t v2 = v30 + 1;
              goto LABEL_68;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_67;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_68;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_68:
        *((void *)this + 3) = v24;
        break;
      case 9u:
        *((_WORD *)this + 38) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 72) = v27;
        break;
      default:
        goto LABEL_19;
    }
LABEL_69:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 76);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::writeVarInt(a2);
    if ((*(_WORD *)(v3 + 76) & 0x100) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_19:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::PencilFusionResult::hash_value(CMMsl::PencilFusionResult *this)
{
  __int16 v1 = *((_WORD *)this + 38);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    double v4 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_29:
    double v6 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_30:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_31:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_32:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0) {
      goto LABEL_22;
    }
LABEL_33:
    uint64_t v10 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  double v4 = *((double *)this + 7);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  double v5 = *((double *)this + 8);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_18:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v9 = *((void *)this + 3);
  if ((*((_WORD *)this + 38) & 0x100) == 0) {
    goto LABEL_33;
  }
LABEL_22:
  uint64_t v10 = *((unsigned __int8 *)this + 72);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10;
}

void CMMsl::PencilFusionRingSensorTrustModelUpdate::~PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  *(void *)this = &unk_270643F98;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 32) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 28);
    v3 |= 8u;
    *((unsigned char *)this + 32) = v3;
    *((unsigned char *)this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if (*((unsigned char *)a2 + 32)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  if ((const CMMsl::PencilFusionRingSensorTrustModelUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate((CMMsl::PencilFusionRingSensorTrustModelUpdate *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v10;
    char v10 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionRingSensorTrustModelUpdate *a2, CMMsl::PencilFusionRingSensorTrustModelUpdate *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 28);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = v3;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643F98;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643F98;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v11 = &unk_270643F98;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    char v4 = *(unsigned char *)(a2 + 28);
    int v5 = *(_DWORD *)(a2 + 24);
    int v15 = *(_DWORD *)(a1 + 32);
    char v6 = *(unsigned char *)(a1 + 28);
    *(unsigned char *)(a1 + 28) = v4;
    char v14 = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    int v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    long long v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    long long v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::formatText(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "avgRelOmegaRps", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ringSensorTrustModelMode");
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "trustPencilRingSensorBool");
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::readFrom(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_54;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 2u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 28) = v21;
        break;
      case 3u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_53;
            }
            unint64_t v30 = v22++;
            char v31 = *(unsigned char *)(v23 + v30);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_52:
              unint64_t v2 = v30 + 1;
              goto LABEL_53;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_52;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_53;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_53:
        *((_DWORD *)this + 6) = v26;
        break;
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_48:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_54:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 28);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 6);
    if (*((unsigned char *)this + 32)) {
      goto LABEL_5;
    }
LABEL_13:
    double v4 = 0.0;
    return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
}

void CMMsl::PencilTipForce::~PencilTipForce(CMMsl::PencilTipForce *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PencilTipForce::PencilTipForce(CMMsl::PencilTipForce *this, const CMMsl::PencilTipForce *a2)
{
  *(void *)this = &unk_270643FD0;
  *((_DWORD *)this + 6) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = 1;
    *((double *)this + 1) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, const CMMsl::PencilTipForce *a2)
{
  if ((const CMMsl::PencilTipForce *)a1 != a2)
  {
    CMMsl::PencilTipForce::PencilTipForce((CMMsl::PencilTipForce *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTipForce *a2, CMMsl::PencilTipForce *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PencilTipForce::PencilTipForce(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270643FD0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270643FD0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270643FD0;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PencilTipForce::formatText(CMMsl::PencilTipForce *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "tipForce", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PencilTipForce::readFrom(CMMsl::PencilTipForce *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilTipForce::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t CMMsl::PencilTipForce::hash_value(CMMsl::PencilTipForce *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

void CMMsl::PencilTouch::~PencilTouch(CMMsl::PencilTouch *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PencilTouch::PencilTouch(CMMsl::PencilTouch *this, const CMMsl::PencilTouch *a2)
{
  *(void *)this = &unk_270644008;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    __int16 v3 = 32;
    *((_WORD *)this + 44) = 32;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    double result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v5 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 21) = v5;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v6 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v6;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *a1, const CMMsl::PencilTouch *a2)
{
  if (a1 != a2)
  {
    CMMsl::PencilTouch::PencilTouch((CMMsl::PencilTouch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PencilTouch *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTouch *a2, CMMsl::PencilTouch *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  int v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  int v11 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v13;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::PencilTouch::PencilTouch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644008;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PencilTouch::PencilTouch((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PencilTouch *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PencilTouch::formatText(CMMsl::PencilTouch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeAngleConfidence", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "azimuthAngleConfidence", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pathFlags");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pathStage");
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionConfidence", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "x", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "y", *((double *)this + 8));
  if ((*((_WORD *)this + 44) & 0x100) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "z", *((double *)this + 9));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PencilTouch::readFrom(CMMsl::PencilTouch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_90;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 2u:
        *((_WORD *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 3u:
        *((_WORD *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 4u:
        *((_WORD *)this + 44) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 5u:
        *((_WORD *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 6u:
        *((_WORD *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 7u:
        *((_WORD *)this + 44) |= 0x400u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_84;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_83:
              unint64_t v2 = v34 + 1;
              goto LABEL_84;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_83;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_84;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_84:
        *((_DWORD *)this + 21) = v24;
        break;
      case 8u:
        *((_WORD *)this + 44) |= 0x200u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_89;
            }
            unint64_t v38 = v26++;
            char v39 = *(unsigned char *)(v27 + v38);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            BOOL v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_88:
              unint64_t v2 = v38 + 1;
              goto LABEL_89;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_88;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_89;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_89:
        *((_DWORD *)this + 20) = v30;
        break;
      case 9u:
        *((_WORD *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 0xAu:
        *((_WORD *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_79;
      case 0xBu:
        *((_WORD *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_79:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_90:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PencilTouch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48));
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 32));
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PencilTouch::hash_value(CMMsl::PencilTouch *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 0x20) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_32:
    double v3 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_6;
    }
LABEL_33:
    double v4 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_9;
    }
LABEL_34:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_35:
    double v6 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
LABEL_36:
    double v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x400) != 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
  double v2 = *((double *)this + 6);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_32;
  }
LABEL_3:
  double v3 = *((double *)this + 7);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_6:
  double v4 = *((double *)this + 8);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x100) == 0) {
    goto LABEL_34;
  }
LABEL_9:
  double v5 = *((double *)this + 9);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_36;
  }
LABEL_15:
  double v7 = *((double *)this + 3);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_18:
    uint64_t v8 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_19:
    uint64_t v9 = *((unsigned int *)this + 20);
    if ((v1 & 2) != 0) {
      goto LABEL_20;
    }
LABEL_39:
    double v10 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_23;
    }
    goto LABEL_40;
  }
LABEL_38:
  uint64_t v9 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_20:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_23:
    double v11 = *((double *)this + 4);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_26;
    }
LABEL_41:
    double v12 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
  }
LABEL_40:
  double v11 = 0.0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_41;
  }
LABEL_26:
  double v12 = *((double *)this + 5);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12;
}

void CMMsl::PhysicalEffortInput::~PhysicalEffortInput(CMMsl::PhysicalEffortInput *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this, const CMMsl::PhysicalEffortInput *a2)
{
  *(void *)this = &unk_270644040;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 28) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, const CMMsl::PhysicalEffortInput *a2)
{
  if ((const CMMsl::PhysicalEffortInput *)a1 != a2)
  {
    CMMsl::PhysicalEffortInput::PhysicalEffortInput((uint64_t)&v5, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v6 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v7;
    uint64_t v7 = v3;
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortInput *a2, CMMsl::PhysicalEffortInput *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  return result;
}

double CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644040;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644040;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v6 = &unk_270644040;
    uint64_t v3 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortInput::formatText(CMMsl::PhysicalEffortInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleTime", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "wrMets", *((double *)this + 2));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PhysicalEffortInput::readFrom(CMMsl::PhysicalEffortInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_27;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v19 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 4u;
      unint64_t v21 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      uint64_t v22 = *(void *)a2;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v25 = 0;
        if (v2 <= v21) {
          unint64_t v2 = *((void *)a2 + 1);
        }
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_52;
          }
          unint64_t v29 = v21++;
          char v30 = *(unsigned char *)(v22 + v29);
          *((void *)a2 + 1) = v21;
          v25 |= (unint64_t)(v30 & 0x7F) << v27;
          if ((v30 & 0x80) == 0) {
            break;
          }
          v27 += 7;
          BOOL v14 = v28++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          LODWORD(v25) = 0;
        }
LABEL_51:
        unint64_t v2 = v29 + 1;
      }
      else
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (1)
        {
          unint64_t v2 = v21 + 1;
          *((void *)a2 + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            break;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *((_DWORD *)this + 6) = v25;
      goto LABEL_53;
    }
    if (v19 == 2)
    {
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v19 != 1)
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::PhysicalEffortInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PhysicalEffortInput::hash_value(CMMsl::PhysicalEffortInput *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 2);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 28) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      uint64_t v3 = 0;
      return *(void *)&v2 ^ *(void *)&v1 ^ v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v3 = *((unsigned int *)this + 6);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3;
}

void CMMsl::PhysicalEffortSample::~PhysicalEffortSample(CMMsl::PhysicalEffortSample *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this, const CMMsl::PhysicalEffortSample *a2)
{
  *(void *)this = &unk_270644078;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 44) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 44))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v8;
  if ((*((unsigned char *)a2 + 44) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, const CMMsl::PhysicalEffortSample *a2)
{
  if ((const CMMsl::PhysicalEffortSample *)a1 != a2)
  {
    CMMsl::PhysicalEffortSample::PhysicalEffortSample((uint64_t)&v7, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortSample *a2, CMMsl::PhysicalEffortSample *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  int v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  int v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  return result;
}

double CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644078;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644078;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v9 = &unk_270644078;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v11 = *(void *)(a1 + 24);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v10 = v5;
    long long v7 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortSample::formatText(CMMsl::PhysicalEffortSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "algorithmVersion");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "sampleStopReason");
  if ((*((unsigned char *)this + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PhysicalEffortSample::readFrom(CMMsl::PhysicalEffortSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_91;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_75;
      case 2u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_75;
      case 3u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_75:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_80;
            }
            unint64_t v40 = v20++;
            char v41 = *(unsigned char *)(v21 + v40);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_79:
              unint64_t v2 = v40 + 1;
              goto LABEL_80;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_79;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_80;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_80:
        *((_DWORD *)this + 8) = v24;
        break;
      case 5u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_85;
            }
            unint64_t v44 = v26++;
            char v45 = *(unsigned char *)(v27 + v44);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_84:
              unint64_t v2 = v44 + 1;
              goto LABEL_85;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_84;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_85;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_85:
        *((_DWORD *)this + 9) = v30;
        break;
      case 6u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_90;
            }
            unint64_t v48 = v32++;
            char v49 = *(unsigned char *)(v33 + v48);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_89:
              unint64_t v2 = v48 + 1;
              goto LABEL_90;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_89;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_90;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_90:
        *((_DWORD *)this + 10) = v36;
        break;
      default:
        goto LABEL_19;
    }
LABEL_91:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PhysicalEffortSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::PhysicalEffortSample::hash_value(CMMsl::PhysicalEffortSample *this)
{
  if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_16:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_16;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_9:
    uint64_t v4 = *((unsigned int *)this + 8);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v6 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_17:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v5 = *((unsigned int *)this + 9);
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v6 = *((unsigned int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::PocketDetectionPacket::~PocketDetectionPacket(CMMsl::PocketDetectionPacket *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(CMMsl::PocketDetectionPacket *this, const CMMsl::PocketDetectionPacket *a2)
{
  *(void *)this = &unk_2706440B0;
  *((_DWORD *)this + 21) = 0;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *((_DWORD *)a2 + 19);
    __int16 v3 = 512;
    *((_WORD *)this + 42) = 512;
    *((_DWORD *)this + 19) = v4;
    __int16 v2 = *((_WORD *)a2 + 42);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 42);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 42);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v6 = *((unsigned char *)a2 + 80);
  v3 |= 0x400u;
  *((_WORD *)this + 42) = v3;
  *((unsigned char *)this + 80) = v6;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 7);
    *((_WORD *)this + 42) = v3 | 0x40;
    *((double *)this + 7) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 42) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  if ((*((_WORD *)a2 + 42) & 0x40) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *a1, const CMMsl::PocketDetectionPacket *a2)
{
  if (a1 != a2)
  {
    CMMsl::PocketDetectionPacket::PocketDetectionPacket((CMMsl::PocketDetectionPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PocketDetectionPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PocketDetectionPacket *a2, CMMsl::PocketDetectionPacket *a3)
{
  int v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  int v4 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  LOBYTE(v4) = *((unsigned char *)this + 80);
  *((unsigned char *)this + 80) = *((unsigned char *)a2 + 80);
  *((unsigned char *)a2 + 80) = v4;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  LODWORD(v11) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v11;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706440B0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PocketDetectionPacket::PocketDetectionPacket((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PocketDetectionPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PocketDetectionPacket::formatText(CMMsl::PocketDetectionPacket *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 42);
  if (v5)
  {
    PB::TextFormatter::format(a2, "ambient", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 42);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*((_WORD *)this + 42) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineAccuracy", *((float *)this + 18));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "flags", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "header");
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intensity", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pocketFlag");
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pocketProbability", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 42);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "temperature", *((double *)this + 7));
  if ((*((_WORD *)this + 42) & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "ts", *((double *)this + 8));
LABEL_13:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PocketDetectionPacket::readFrom(CMMsl::PocketDetectionPacket *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_76;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 42) |= 0x200u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_75;
            }
            unint64_t v30 = v20++;
            char v31 = *(unsigned char *)(v21 + v30);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_74:
              unint64_t v2 = v30 + 1;
              goto LABEL_75;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_74;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_75;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_75:
        *((_DWORD *)this + 19) = v24;
        break;
      case 2u:
        *((_WORD *)this + 42) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 3u:
        *((_WORD *)this + 42) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 4u:
        *((_WORD *)this + 42) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 5u:
        *((_WORD *)this + 42) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 6u:
        *((_WORD *)this + 42) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 7u:
        *((_WORD *)this + 42) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 8u:
        *((_WORD *)this + 42) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 80) = v27;
        break;
      case 9u:
        *((_WORD *)this + 42) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_69;
      case 0xAu:
        *((_WORD *)this + 42) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_58;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_70;
      case 0xBu:
        *((_WORD *)this + 42) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
LABEL_69:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_70:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_58:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_76:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PocketDetectionPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 84);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 72));
    if ((*(_WORD *)(v3 + 84) & 0x40) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 56);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PocketDetectionPacket::hash_value(CMMsl::PocketDetectionPacket *this)
{
  __int16 v1 = *((_WORD *)this + 42);
  if ((v1 & 0x200) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_32:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_33:
    double v4 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_34:
    double v5 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_35:
    double v6 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_36:
    double v7 = 0.0;
    if (v1) {
      goto LABEL_18;
    }
LABEL_37:
    double v8 = 0.0;
    if ((*((_WORD *)this + 42) & 0x400) != 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
  uint64_t v2 = *((unsigned int *)this + 19);
  if ((v1 & 0x80) == 0) {
    goto LABEL_32;
  }
LABEL_3:
  double v3 = *((double *)this + 8);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_33;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_34;
  }
LABEL_9:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_12:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_36;
  }
LABEL_15:
  double v7 = *((double *)this + 4);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_18:
  double v8 = *((double *)this + 1);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 42) & 0x400) != 0)
  {
LABEL_21:
    uint64_t v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x20) != 0) {
      goto LABEL_22;
    }
LABEL_39:
    double v10 = 0.0;
    if ((*((_WORD *)this + 42) & 0x100) != 0) {
      goto LABEL_25;
    }
    goto LABEL_40;
  }
LABEL_38:
  uint64_t v9 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_39;
  }
LABEL_22:
  double v10 = *((double *)this + 6);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 42) & 0x100) != 0)
  {
LABEL_25:
    float v11 = *((float *)this + 18);
    uint64_t v12 = LODWORD(v11);
    if (v11 == 0.0) {
      uint64_t v12 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_28;
    }
LABEL_41:
    double v13 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ *(void *)&v10 ^ v12 ^ *(void *)&v13;
  }
LABEL_40:
  uint64_t v12 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_28:
  double v13 = *((double *)this + 7);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ *(void *)&v10 ^ v12 ^ *(void *)&v13;
}

void CMMsl::Pose::~Pose(CMMsl::Pose *this)
{
  *(void *)this = &unk_2706440E8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Pose::~Pose(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::Pose *CMMsl::Pose::Pose(CMMsl::Pose *this, const CMMsl::Pose *a2)
{
  *(void *)this = &unk_2706440E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  double v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_2572C73EC(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_2572C73EC((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, const CMMsl::Pose *a2)
{
  if ((const CMMsl::Pose *)a1 != a2)
  {
    CMMsl::Pose::Pose((CMMsl::Pose *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Pose *a2, CMMsl::Pose *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::Pose::Pose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706440E8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Pose::Pose((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

uint64_t CMMsl::Pose::formatText(CMMsl::Pose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "position", v10);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::Pose::readFrom(CMMsl::Pose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        if (v19 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          while (v36 < v37 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v39 = (char *)*((void *)this + 2);
            unint64_t v38 = *((void *)this + 3);
            if ((unint64_t)v39 >= v38)
            {
              char v41 = (char *)*((void *)this + 1);
              uint64_t v42 = (v39 - v41) >> 3;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61) {
                goto LABEL_125;
              }
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 2 > v43) {
                unint64_t v43 = v44 >> 2;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                unint64_t v45 = (unint64_t)sub_2572C7528(v45);
                char v41 = (char *)*((void *)this + 1);
                unsigned int v39 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v46 = 0;
              }
              unsigned int v47 = (void *)(v45 + 8 * v42);
              *unsigned int v47 = 0;
              unint64_t v40 = v47 + 1;
              while (v39 != v41)
              {
                uint64_t v48 = *((void *)v39 - 1);
                v39 -= 8;
                *--unsigned int v47 = v48;
              }
              *((void *)this + 1) = v47;
              *((void *)this + 2) = v40;
              *((void *)this + 3) = v45 + 8 * v46;
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(void *)unsigned int v39 = 0;
              unint64_t v40 = v39 + 8;
            }
            *((void *)this + 2) = v40;
            unint64_t v49 = *((void *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)a2 + 2)) {
              goto LABEL_81;
            }
            *(v40 - 1) = *(void *)(*(void *)a2 + v49);
            unint64_t v37 = *((void *)a2 + 2);
            unint64_t v36 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v36;
          }
          goto LABEL_82;
        }
        unsigned int v54 = (char *)*((void *)this + 2);
        unint64_t v53 = *((void *)this + 3);
        if ((unint64_t)v54 >= v53)
        {
          char v61 = (char *)*((void *)this + 1);
          uint64_t v62 = (v54 - v61) >> 3;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61) {
LABEL_125:
          }
            sub_2570AFD0C();
          uint64_t v64 = v53 - (void)v61;
          if (v64 >> 2 > v63) {
            unint64_t v63 = v64 >> 2;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            unint64_t v65 = (unint64_t)sub_2572C7528(v65);
            char v61 = (char *)*((void *)this + 1);
            unsigned int v54 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v66 = 0;
          }
          char v69 = (void *)(v65 + 8 * v62);
          *char v69 = 0;
          uint64_t v52 = v69 + 1;
          while (v54 != v61)
          {
            uint64_t v70 = *((void *)v54 - 1);
            v54 -= 8;
            *--char v69 = v70;
          }
          *((void *)this + 1) = v69;
          *((void *)this + 2) = v52;
          *((void *)this + 3) = v65 + 8 * v66;
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *(void *)unsigned int v54 = 0;
          uint64_t v52 = v54 + 8;
        }
        *((void *)this + 2) = v52;
LABEL_113:
        unint64_t v71 = *((void *)a2 + 1);
        if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((void *)a2 + 2)) {
          goto LABEL_115;
        }
        *(v52 - 1) = *(void *)(*(void *)a2 + v71);
        goto LABEL_117;
      }
      if (v20 != 1)
      {
LABEL_27:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_118;
      }
      *((unsigned char *)this + 64) |= 1u;
      unint64_t v21 = *((void *)a2 + 1);
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
      {
LABEL_115:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_118;
      }
      *((void *)this + 7) = *(void *)(*(void *)a2 + v21);
LABEL_117:
      *((void *)a2 + 1) += 8;
LABEL_118:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v19 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v22 = *((void *)a2 + 1);
      unint64_t v23 = *((void *)a2 + 2);
      while (v22 < v23 && !*((unsigned char *)a2 + 24))
      {
        char v25 = (char *)*((void *)this + 5);
        unint64_t v24 = *((void *)this + 6);
        if ((unint64_t)v25 >= v24)
        {
          BOOL v27 = (char *)*((void *)this + 4);
          uint64_t v28 = (v25 - v27) >> 3;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61) {
            goto LABEL_125;
          }
          uint64_t v30 = v24 - (void)v27;
          if (v30 >> 2 > v29) {
            unint64_t v29 = v30 >> 2;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            unint64_t v31 = (unint64_t)sub_2572C7528(v31);
            BOOL v27 = (char *)*((void *)this + 4);
            char v25 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v33 = (void *)(v31 + 8 * v28);
          *uint64_t v33 = 0;
          int v26 = v33 + 1;
          while (v25 != v27)
          {
            uint64_t v34 = *((void *)v25 - 1);
            v25 -= 8;
            *--uint64_t v33 = v34;
          }
          *((void *)this + 4) = v33;
          *((void *)this + 5) = v26;
          *((void *)this + 6) = v31 + 8 * v32;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)char v25 = 0;
          int v26 = v25 + 8;
        }
        *((void *)this + 5) = v26;
        unint64_t v35 = *((void *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)a2 + 2))
        {
LABEL_81:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v26 - 1) = *(void *)(*(void *)a2 + v35);
        unint64_t v23 = *((void *)a2 + 2);
        unint64_t v22 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v22;
      }
LABEL_82:
      PB::Reader::recallMark();
      goto LABEL_118;
    }
    unint64_t v51 = (char *)*((void *)this + 5);
    unint64_t v50 = *((void *)this + 6);
    if ((unint64_t)v51 >= v50)
    {
      uint64_t v55 = (char *)*((void *)this + 4);
      uint64_t v56 = (v51 - v55) >> 3;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
        goto LABEL_125;
      }
      uint64_t v58 = v50 - (void)v55;
      if (v58 >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        unint64_t v59 = (unint64_t)sub_2572C7528(v59);
        uint64_t v55 = (char *)*((void *)this + 4);
        unint64_t v51 = (char *)*((void *)this + 5);
      }
      else
      {
        uint64_t v60 = 0;
      }
      unint64_t v67 = (void *)(v59 + 8 * v56);
      *unint64_t v67 = 0;
      uint64_t v52 = v67 + 1;
      while (v51 != v55)
      {
        uint64_t v68 = *((void *)v51 - 1);
        v51 -= 8;
        *--unint64_t v67 = v68;
      }
      *((void *)this + 4) = v67;
      *((void *)this + 5) = v52;
      *((void *)this + 6) = v59 + 8 * v60;
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      *(void *)unint64_t v51 = 0;
      uint64_t v52 = v51 + 8;
    }
    *((void *)this + 5) = v52;
    goto LABEL_113;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56));
  }
  int v4 = (double *)v3[1];
  long long v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    this = PB::Writer::write(a2, v9);
  }
  return this;
}

uint64_t CMMsl::Pose::hash_value(CMMsl::Pose *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void CMMsl::PoseState::~PoseState(CMMsl::PoseState *this)
{
  *(void *)this = &unk_270644120;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PoseState::~PoseState(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PoseState *CMMsl::PoseState::PoseState(CMMsl::PoseState *this, const CMMsl::PoseState *a2)
{
  *(void *)this = &unk_270644120;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C73EC((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  if (*((unsigned char *)a2 + 44))
  {
    char v4 = *((unsigned char *)a2 + 40);
    *((unsigned char *)this + 44) |= 1u;
    *((unsigned char *)this + 40) = v4;
  }
  return this;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, const CMMsl::PoseState *a2)
{
  if ((const CMMsl::PoseState *)a1 != a2)
  {
    CMMsl::PoseState::PoseState((CMMsl::PoseState *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PoseState *a2, CMMsl::PoseState *a3)
{
  int v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  LOBYTE(v7) = *(unsigned char *)(this + 40);
  *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return this;
}

uint64_t CMMsl::PoseState::PoseState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644120;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PoseState::PoseState((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    int v11 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v10;
    char v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PoseState::formatText(CMMsl::PoseState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "pose");
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  if (*((unsigned char *)this + 44)) {
    PB::TextFormatter::format(a2, "wasCorrected");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PoseState::readFrom(CMMsl::PoseState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
          *((void *)a2 + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 40) = v23;
      }
      else if (v19 == 2)
      {
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          while (v24 < v25 && !*((unsigned char *)a2 + 24))
          {
            BOOL v27 = (char *)*((void *)this + 2);
            unint64_t v26 = *((void *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              unint64_t v29 = (char *)*((void *)this + 1);
              uint64_t v30 = (v27 - v29) >> 3;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 61) {
                goto LABEL_83;
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 2 > v31) {
                unint64_t v31 = v32 >> 2;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v33 = (unint64_t)sub_2572C7528(v33);
                unint64_t v29 = (char *)*((void *)this + 1);
                BOOL v27 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v34 = 0;
              }
              unint64_t v35 = (void *)(v33 + 8 * v30);
              *unint64_t v35 = 0;
              uint64_t v28 = v35 + 1;
              while (v27 != v29)
              {
                uint64_t v36 = *((void *)v27 - 1);
                v27 -= 8;
                *--unint64_t v35 = v36;
              }
              *((void *)this + 1) = v35;
              *((void *)this + 2) = v28;
              *((void *)this + 3) = v33 + 8 * v34;
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(void *)BOOL v27 = 0;
              uint64_t v28 = v27 + 8;
            }
            *((void *)this + 2) = v28;
            unint64_t v37 = *((void *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((void *)a2 + 2))
            {
              *((unsigned char *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(void *)(*(void *)a2 + v37);
            unint64_t v25 = *((void *)a2 + 2);
            unint64_t v24 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v24;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unsigned int v39 = (char *)*((void *)this + 2);
          unint64_t v38 = *((void *)this + 3);
          if ((unint64_t)v39 >= v38)
          {
            char v41 = (char *)*((void *)this + 1);
            uint64_t v42 = (v39 - v41) >> 3;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61) {
LABEL_83:
            }
              sub_2570AFD0C();
            uint64_t v44 = v38 - (void)v41;
            if (v44 >> 2 > v43) {
              unint64_t v43 = v44 >> 2;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              unint64_t v45 = (unint64_t)sub_2572C7528(v45);
              char v41 = (char *)*((void *)this + 1);
              unsigned int v39 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v46 = 0;
            }
            unsigned int v47 = (void *)(v45 + 8 * v42);
            *unsigned int v47 = 0;
            unint64_t v40 = v47 + 1;
            while (v39 != v41)
            {
              uint64_t v48 = *((void *)v39 - 1);
              v39 -= 8;
              *--unsigned int v47 = v48;
            }
            *((void *)this + 1) = v47;
            *((void *)this + 2) = v40;
            *((void *)this + 3) = v45 + 8 * v46;
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(void *)unsigned int v39 = 0;
            unint64_t v40 = v39 + 8;
          }
          *((void *)this + 2) = v40;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((void *)a2 + 2))
          {
            *(v40 - 1) = *(void *)(*(void *)a2 + v49);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
        }
      }
      else
      {
        if (v19 == 1) {
          operator new();
        }
LABEL_19:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PoseState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 32);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if (*(unsigned char *)(v3 + 44))
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t CMMsl::PoseState::hash_value(CMMsl::PoseState *this)
{
  unint64_t v2 = (CMMsl::Pose *)*((void *)this + 4);
  if (v2) {
    uint64_t v3 = CMMsl::Pose::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 44)) {
    uint64_t v5 = *((unsigned __int8 *)this + 40);
  }
  else {
    uint64_t v5 = 0;
  }
  return v4 ^ v3 ^ v5;
}

uint64_t CMMsl::PoseState::makePose(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void CMMsl::PostureJoint::~PostureJoint(CMMsl::PostureJoint *this)
{
  *(void *)this = &unk_270644158;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PostureJoint::~PostureJoint(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PostureJoint *CMMsl::PostureJoint::PostureJoint(char **this, char **a2)
{
  *this = (char *)&unk_270644158;
  *(_OWORD *)(this + 1) = 0u;
  uint64_t v4 = this + 1;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  this[7] = 0;
  if (this != a2)
  {
    sub_2572C73EC(v4, a2[1], a2[2], (a2[2] - a2[1]) >> 3);
    sub_2572C73EC(this + 4, a2[4], a2[5], (a2[5] - a2[4]) >> 3);
  }
  if (*((unsigned char *)a2 + 60))
  {
    int v5 = *((_DWORD *)a2 + 14);
    *((unsigned char *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return (CMMsl::PostureJoint *)this;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, char **a2)
{
  if ((char **)a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint(&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v11;
    uint64_t v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PostureJoint *a2, CMMsl::PostureJoint *a3)
{
  int v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  LODWORD(v9) = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  return this;
}

uint64_t CMMsl::PostureJoint::PostureJoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644158;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint((uint64_t)&v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v11;
    uint64_t v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PostureJoint::formatText(CMMsl::PostureJoint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 60)) {
    PB::TextFormatter::format(a2, "jointName");
  }
  long long v5 = (double *)*((void *)this + 1);
  uint64_t v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "rotation", v7);
  }
  long long v8 = (double *)*((void *)this + 4);
  long long v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PostureJoint::readFrom(CMMsl::PostureJoint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
        if (v14) {
          goto LABEL_48;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_48;
      }
    }
LABEL_20:
    int v19 = v11 & 7;
    if (v19 == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 60) |= 1u;
      unint64_t v36 = *((void *)a2 + 1);
      unint64_t v37 = *((void *)a2 + 2);
      uint64_t v38 = *(void *)a2;
      if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v37)
      {
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v41 = 0;
        if (v37 <= v36) {
          unint64_t v37 = *((void *)a2 + 1);
        }
        while (1)
        {
          if (v37 == v36)
          {
            LODWORD(v41) = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_117;
          }
          unint64_t v63 = v36 + 1;
          char v64 = *(unsigned char *)(v38 + v36);
          *((void *)a2 + 1) = v63;
          v41 |= (unint64_t)(v64 & 0x7F) << v61;
          if ((v64 & 0x80) == 0) {
            break;
          }
          v61 += 7;
          unint64_t v36 = v63;
          BOOL v14 = v62++ > 8;
          if (v14)
          {
LABEL_93:
            LODWORD(v41) = 0;
            goto LABEL_117;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          LODWORD(v41) = 0;
        }
      }
      else
      {
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        while (1)
        {
          unint64_t v42 = v36 + 1;
          *((void *)a2 + 1) = v36 + 1;
          char v43 = *(unsigned char *)(v38 + v36);
          v41 |= (unint64_t)(v43 & 0x7F) << v39;
          if ((v43 & 0x80) == 0) {
            break;
          }
          v39 += 7;
          unint64_t v36 = v42;
          BOOL v14 = v40++ > 8;
          if (v14) {
            goto LABEL_93;
          }
        }
      }
LABEL_117:
      *((_DWORD *)this + 14) = v41;
      goto LABEL_49;
    }
    if (v20 == 2)
    {
      if (v19 != 2)
      {
        uint64_t v66 = (char *)*((void *)this + 5);
        unint64_t v65 = *((void *)this + 6);
        if ((unint64_t)v66 >= v65)
        {
          unint64_t v73 = (char *)*((void *)this + 4);
          uint64_t v74 = (v66 - v73) >> 3;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 61) {
LABEL_140:
          }
            sub_2570AFD0C();
          uint64_t v76 = v65 - (void)v73;
          if (v76 >> 2 > v75) {
            unint64_t v75 = v76 >> 2;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            unint64_t v77 = (unint64_t)sub_2572C7528(v77);
            unint64_t v73 = (char *)*((void *)this + 4);
            uint64_t v66 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v78 = 0;
          }
          unint64_t v81 = (void *)(v77 + 8 * v74);
          *unint64_t v81 = 0;
          uint64_t v60 = v81 + 1;
          while (v66 != v73)
          {
            uint64_t v82 = *((void *)v66 - 1);
            v66 -= 8;
            *--unint64_t v81 = v82;
          }
          *((void *)this + 4) = v81;
          *((void *)this + 5) = v60;
          *((void *)this + 6) = v77 + 8 * v78;
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *(void *)uint64_t v66 = 0;
          uint64_t v60 = v66 + 8;
        }
        *((void *)this + 5) = v60;
        goto LABEL_132;
      }
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v44 = *((void *)a2 + 1);
      unint64_t v45 = *((void *)a2 + 2);
      while (v44 < v45 && !*((unsigned char *)a2 + 24))
      {
        unsigned int v47 = (char *)*((void *)this + 5);
        unint64_t v46 = *((void *)this + 6);
        if ((unint64_t)v47 >= v46)
        {
          unint64_t v49 = (char *)*((void *)this + 4);
          uint64_t v50 = (v47 - v49) >> 3;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            goto LABEL_140;
          }
          uint64_t v52 = v46 - (void)v49;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            unint64_t v53 = (unint64_t)sub_2572C7528(v53);
            unint64_t v49 = (char *)*((void *)this + 4);
            unsigned int v47 = (char *)*((void *)this + 5);
          }
          else
          {
            uint64_t v54 = 0;
          }
          uint64_t v55 = (void *)(v53 + 8 * v50);
          *uint64_t v55 = 0;
          uint64_t v48 = v55 + 1;
          while (v47 != v49)
          {
            uint64_t v56 = *((void *)v47 - 1);
            v47 -= 8;
            *--uint64_t v55 = v56;
          }
          *((void *)this + 4) = v55;
          *((void *)this + 5) = v48;
          *((void *)this + 6) = v53 + 8 * v54;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(void *)unsigned int v47 = 0;
          uint64_t v48 = v47 + 8;
        }
        *((void *)this + 5) = v48;
        unint64_t v57 = *((void *)a2 + 1);
        if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((void *)a2 + 2))
        {
LABEL_96:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v48 - 1) = *(void *)(*(void *)a2 + v57);
        unint64_t v45 = *((void *)a2 + 2);
        unint64_t v44 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v44;
      }
    }
    else
    {
      if (v20 != 1)
      {
LABEL_48:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_49;
      }
      if (v19 != 2)
      {
        unint64_t v59 = (char *)*((void *)this + 2);
        unint64_t v58 = *((void *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          unint64_t v67 = (char *)*((void *)this + 1);
          uint64_t v68 = (v59 - v67) >> 3;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 61) {
            goto LABEL_140;
          }
          uint64_t v70 = v58 - (void)v67;
          if (v70 >> 2 > v69) {
            unint64_t v69 = v70 >> 2;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            unint64_t v71 = (unint64_t)sub_2572C7528(v71);
            unint64_t v67 = (char *)*((void *)this + 1);
            unint64_t v59 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v72 = 0;
          }
          uint64_t v79 = (void *)(v71 + 8 * v68);
          *uint64_t v79 = 0;
          uint64_t v60 = v79 + 1;
          while (v59 != v67)
          {
            uint64_t v80 = *((void *)v59 - 1);
            v59 -= 8;
            *--uint64_t v79 = v80;
          }
          *((void *)this + 1) = v79;
          *((void *)this + 2) = v60;
          *((void *)this + 3) = v71 + 8 * v72;
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(void *)unint64_t v59 = 0;
          uint64_t v60 = v59 + 8;
        }
        *((void *)this + 2) = v60;
LABEL_132:
        unint64_t v83 = *((void *)a2 + 1);
        if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *((void *)a2 + 2))
        {
          *(v60 - 1) = *(void *)(*(void *)a2 + v83);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_49;
      }
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v21 = *((void *)a2 + 1);
      unint64_t v22 = *((void *)a2 + 2);
      while (v21 < v22 && !*((unsigned char *)a2 + 24))
      {
        unint64_t v24 = (char *)*((void *)this + 2);
        unint64_t v23 = *((void *)this + 3);
        if ((unint64_t)v24 >= v23)
        {
          unint64_t v26 = (char *)*((void *)this + 1);
          uint64_t v27 = (v24 - v26) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            goto LABEL_140;
          }
          uint64_t v29 = v23 - (void)v26;
          if (v29 >> 2 > v28) {
            unint64_t v28 = v29 >> 2;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            unint64_t v30 = (unint64_t)sub_2572C7528(v30);
            unint64_t v26 = (char *)*((void *)this + 1);
            unint64_t v24 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v31 = 0;
          }
          uint64_t v32 = (void *)(v30 + 8 * v27);
          *uint64_t v32 = 0;
          unint64_t v25 = v32 + 1;
          while (v24 != v26)
          {
            uint64_t v33 = *((void *)v24 - 1);
            v24 -= 8;
            *--uint64_t v32 = v33;
          }
          *((void *)this + 1) = v32;
          *((void *)this + 2) = v25;
          *((void *)this + 3) = v30 + 8 * v31;
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(void *)unint64_t v24 = 0;
          unint64_t v25 = v24 + 8;
        }
        *((void *)this + 2) = v25;
        unint64_t v34 = *((void *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2)) {
          goto LABEL_96;
        }
        *(v25 - 1) = *(void *)(*(void *)a2 + v34);
        unint64_t v22 = *((void *)a2 + 2);
        unint64_t v21 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v21;
      }
    }
    PB::Reader::recallMark();
LABEL_49:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::PostureJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  long long v4 = *(double **)(this + 8);
  long long v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  double v7 = *(double **)(v3 + 32);
  uint64_t v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::PostureJoint::hash_value(CMMsl::PostureJoint *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  if (*((unsigned char *)this + 60)) {
    uint64_t v4 = *((int *)this + 14);
  }
  else {
    uint64_t v4 = 0;
  }
  return v3 ^ v2 ^ v4;
}

void CMMsl::PostureSkeleton::~PostureSkeleton(CMMsl::PostureSkeleton *this)
{
  *(void *)this = &unk_270644190;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644190;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_270644190;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_2572C6D4C(&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PostureSkeleton::PostureSkeleton(void *this, const CMMsl::PostureSkeleton *a2)
{
  this[1] = 0;
  *this = &unk_270644190;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

void sub_257252530(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  sub_2570AFA4C(a1);
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, const CMMsl::PostureSkeleton *a2)
{
  if ((const CMMsl::PostureSkeleton *)a1 != a2)
  {
    CMMsl::PostureSkeleton::PostureSkeleton(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    double v6 = &unk_270644190;
    double v9 = (void **)&v7;
    sub_2572C6D4C(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::PostureSkeleton *a2, CMMsl::PostureSkeleton *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::PostureSkeleton::PostureSkeleton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644190;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = &unk_270644190;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_2572C6E0C((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    double v9 = &unk_270644190;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_2572C6E0C((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    unint64_t v12 = (void **)&v10;
    double v9 = &unk_270644190;
    sub_2572C6D4C(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PostureSkeleton::formatText(CMMsl::PostureSkeleton *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "joint");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PostureSkeleton::readFrom(CMMsl::PostureSkeleton *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_257252B5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::PostureSkeleton::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (int i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    long long v5 = *v2++;
  return this;
}

BOOL sub_257252BE0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  long long v5 = a3;
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = *v5++;
    BOOL result = CMMsl::PostureJoint::operator==(*(void *)(v6 - 8), v7);
    BOOL v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t CMMsl::PostureSkeleton::hash_value(CMMsl::PostureSkeleton *this)
{
  uint64_t v1 = (CMMsl::PostureJoint **)*((void *)this + 1);
  unint64_t v2 = (CMMsl::PostureJoint **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::PostureJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::PowerManagementUserActivity::~PowerManagementUserActivity(CMMsl::PowerManagementUserActivity *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this, const CMMsl::PowerManagementUserActivity *a2)
{
  *(void *)this = &unk_2706441C8;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[0] = &unk_2706441C8;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    BOOL v9 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[0] = &unk_2706441C8;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PowerManagementUserActivity *a2, CMMsl::PowerManagementUserActivity *a3)
{
  int v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::formatText(CMMsl::PowerManagementUserActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "userActivity");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PowerManagementUserActivity::readFrom(CMMsl::PowerManagementUserActivity *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_29;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v3 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_42:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_29;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PowerManagementUserActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 16)) {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::hash_value(CMMsl::PowerManagementUserActivity *this)
{
  if (*((unsigned char *)this + 16)) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

void CMMsl::PrecisionFindingDOTEstimate::~PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this, const CMMsl::PrecisionFindingDOTEstimate *a2)
{
  *(void *)this = &unk_270644200;
  *((_DWORD *)this + 6) = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 24) = 2;
    *((double *)this + 2) = result;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 24))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, const CMMsl::PrecisionFindingDOTEstimate *a2)
{
  if ((const CMMsl::PrecisionFindingDOTEstimate *)a1 != a2)
  {
    CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate((CMMsl::PrecisionFindingDOTEstimate *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingDOTEstimate *a2, CMMsl::PrecisionFindingDOTEstimate *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644200;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644200;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = &unk_270644200;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::formatText(CMMsl::PrecisionFindingDOTEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "dot", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::readFrom(CMMsl::PrecisionFindingDOTEstimate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_26;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_30;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          uint64_t result = PB::Reader::skip(a2);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_30:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
      }
      unint64_t v2 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::hash_value(CMMsl::PrecisionFindingDOTEstimate *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if (*((unsigned char *)this + 24)) {
      goto LABEL_3;
    }
LABEL_9:
    double v2 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1;
}

void CMMsl::PrecisionFindingRangeFilter::~PrecisionFindingRangeFilter(CMMsl::PrecisionFindingRangeFilter *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  *(void *)this = &unk_270644238;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 40) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 40))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 40) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    char v10 = *((unsigned char *)a2 + 37);
    *(unsigned char *)(this + 40) = v3 | 0x40;
    *(unsigned char *)(this + 37) = v10;
    return this;
  }
LABEL_15:
  char v9 = *((unsigned char *)a2 + 36);
  v3 |= 0x20u;
  *(unsigned char *)(this + 40) = v3;
  *(unsigned char *)(this + 36) = v9;
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  if ((const CMMsl::PrecisionFindingRangeFilter *)a1 != a2)
  {
    CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v4;
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    int v9 = v5;
    *(void *)&long long v4 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v10;
    uint64_t v10 = v4;
    LOBYTE(v5) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v11;
    char v11 = v5;
    LOBYTE(v5) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v12;
    char v12 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingRangeFilter *a2, CMMsl::PrecisionFindingRangeFilter *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  LOBYTE(v6) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 37);
  *((unsigned char *)this + 37) = *((unsigned char *)a2 + 37);
  *((unsigned char *)a2 + 37) = v6;
  return result;
}

float CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644238;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644238;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  return result;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v11 = &unk_270644238;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    char v5 = *(unsigned char *)(a2 + 36);
    char v6 = *(unsigned char *)(a2 + 37);
    int v17 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v12 = v7;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v13 = v8;
    *(void *)&long long v7 = *(void *)(a1 + 28);
    uint64_t v9 = *(void *)(a2 + 28);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 28) = v9;
    uint64_t v14 = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 36);
    *(unsigned char *)(a1 + 36) = v5;
    char v15 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 37);
    *(unsigned char *)(a1 + 37) = v6;
    char v16 = v3;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::formatText(CMMsl::PrecisionFindingRangeFilter *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "inlierCount");
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isOutlierCurrentSample");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isValidMeasurement");
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "range", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "rangeFrequency", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "rangeShift", *((float *)this + 8));
  if ((*((unsigned char *)this + 40) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::readFrom(CMMsl::PrecisionFindingRangeFilter *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_66;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_29;
      case 2u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_29:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_60;
      case 3u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_65;
            }
            unint64_t v32 = v20++;
            char v33 = *(unsigned char *)(v21 + v32);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_64:
              unint64_t v2 = v32 + 1;
              goto LABEL_65;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_64;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_65;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_65:
        *((_DWORD *)this + 6) = v24;
        break;
      case 4u:
        *((unsigned char *)this + 40) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 5u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_59:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_60:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 6u:
        *((unsigned char *)this + 40) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 36) = v27;
        break;
      case 7u:
        *((unsigned char *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 37) = v29;
        break;
      default:
        goto LABEL_19;
    }
LABEL_66:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::hash_value(CMMsl::PrecisionFindingRangeFilter *this)
{
  if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    double v1 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_3;
    }
LABEL_18:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_6:
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_7;
    }
LABEL_20:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_10;
    }
LABEL_21:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_22:
    uint64_t v8 = 0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_14;
    }
LABEL_23:
    uint64_t v9 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
  }
LABEL_19:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_7:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_10:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_22;
  }
LABEL_13:
  uint64_t v8 = *((unsigned __int8 *)this + 36);
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v9 = *((unsigned __int8 *)this + 37);
  return *(void *)&v2 ^ *(void *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
}

void CMMsl::PrecisionFindingSessionStartStop::~PrecisionFindingSessionStartStop(CMMsl::PrecisionFindingSessionStartStop *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this, const CMMsl::PrecisionFindingSessionStartStop *a2)
{
  *(void *)this = &unk_270644270;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, const CMMsl::PrecisionFindingSessionStartStop *a2)
{
  if ((const CMMsl::PrecisionFindingSessionStartStop *)a1 != a2)
  {
    CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingSessionStartStop *a2, CMMsl::PrecisionFindingSessionStartStop *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644270;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644270;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = &unk_270644270;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::formatText(CMMsl::PrecisionFindingSessionStartStop *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isStart");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::readFrom(CMMsl::PrecisionFindingSessionStartStop *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::hash_value(CMMsl::PrecisionFindingSessionStartStop *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::PrecisionFindingState::~PrecisionFindingState(CMMsl::PrecisionFindingState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(CMMsl::PrecisionFindingState *this, const CMMsl::PrecisionFindingState *a2)
{
  *(void *)this = &unk_2706442A8;
  *((_DWORD *)this + 23) = 0;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    double result = *((double *)a2 + 7);
    __int16 v3 = 64;
    *((_WORD *)this + 46) = 64;
    *((double *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v5 = *((unsigned char *)a2 + 88);
  v3 |= 0x800u;
  *((_WORD *)this + 46) = v3;
  *((unsigned char *)this + 88) = v5;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v6 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 21) = v6;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_28:
    double result = *((double *)a2 + 6);
    *((_WORD *)this + 46) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_27:
  char v7 = *((unsigned char *)a2 + 89);
  v3 |= 0x1000u;
  *((_WORD *)this + 46) = v3;
  *((unsigned char *)this + 89) = v7;
  if ((*((_WORD *)a2 + 46) & 0x20) != 0) {
    goto LABEL_28;
  }
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *a1, const CMMsl::PrecisionFindingState *a2)
{
  if (a1 != a2)
  {
    CMMsl::PrecisionFindingState::PrecisionFindingState((CMMsl::PrecisionFindingState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PrecisionFindingState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingState *a2, CMMsl::PrecisionFindingState *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  LOBYTE(v3) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v3;
  int v12 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  LODWORD(v11) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  LOBYTE(v12) = *((unsigned char *)this + 89);
  *((unsigned char *)this + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v12;
  double result = *((double *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706442A8;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PrecisionFindingState::PrecisionFindingState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PrecisionFindingState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingState::formatText(CMMsl::PrecisionFindingState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "distanceFromParticleFilter", *((float *)this + 20));
    __int16 v5 = *((_WORD *)this + 46);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalAngle", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "horizontalAngleUncertainty", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "horizontalAngleUncertaintyUnfiltered", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isConverged");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isDistanceValid");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "revokeReason");
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "velocityX", *((double *)this + 8));
  if ((*((_WORD *)this + 46) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "velocityY", *((double *)this + 9));
LABEL_15:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PrecisionFindingState::readFrom(CMMsl::PrecisionFindingState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_83;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 46) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 2u:
        *((_WORD *)this + 46) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 3u:
        *((_WORD *)this + 46) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 4u:
        *((_WORD *)this + 46) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 5u:
        *((_WORD *)this + 46) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 6u:
        *((_WORD *)this + 46) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 7u:
        *((_WORD *)this + 46) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 8u:
        *((_WORD *)this + 46) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_76;
      case 9u:
        *((_WORD *)this + 46) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 88) = v21;
        break;
      case 0xAu:
        *((_WORD *)this + 46) |= 0x400u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_82;
            }
            unint64_t v32 = v22++;
            char v33 = *(unsigned char *)(v23 + v32);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_81:
              unint64_t v2 = v32 + 1;
              goto LABEL_82;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_81;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_82;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_82:
        *((_DWORD *)this + 21) = v26;
        break;
      case 0xBu:
        *((_WORD *)this + 46) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_63;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_77;
      case 0xCu:
        *((_WORD *)this + 46) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 89) = v29;
        break;
      case 0xDu:
        *((_WORD *)this + 46) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
LABEL_76:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_77:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_63:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_83:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 92) & 0x20) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_27:
  double v5 = *(double *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PrecisionFindingState::hash_value(CMMsl::PrecisionFindingState *this)
{
  __int16 v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_36:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    double v4 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    double v8 = 0.0;
    if ((*((_WORD *)this + 46) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    double v9 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x100) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  double v9 = *((double *)this + 9);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_24:
    uint64_t v10 = *((unsigned __int8 *)this + 88);
    if ((*((_WORD *)this + 46) & 0x400) != 0) {
      goto LABEL_25;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v10 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    uint64_t v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 46) & 0x200) != 0) {
      goto LABEL_26;
    }
LABEL_45:
    uint64_t v13 = 0;
    if ((*((_WORD *)this + 46) & 0x1000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_46;
  }
LABEL_44:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 46) & 0x200) == 0) {
    goto LABEL_45;
  }
LABEL_26:
  float v12 = *((float *)this + 20);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((*((_WORD *)this + 46) & 0x1000) != 0)
  {
LABEL_29:
    uint64_t v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
LABEL_47:
    double v15 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(void *)&v15;
  }
LABEL_46:
  uint64_t v14 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_47;
  }
LABEL_30:
  double v15 = *((double *)this + 6);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(void *)&v15;
}

void CMMsl::PrecisionFindingVelocityEstimate::~PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  *(void *)this = &unk_2706442E0;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 44) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((unsigned char *)this + 44) = v3;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 4) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((unsigned char *)a2 + 44) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 44) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  if ((const CMMsl::PrecisionFindingVelocityEstimate *)a1 != a2)
  {
    CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate((CMMsl::PrecisionFindingVelocityEstimate *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v4;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVelocityEstimate *a2, CMMsl::PrecisionFindingVelocityEstimate *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706442E0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706442E0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = &unk_2706442E0;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[1] = v6;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 16);
    long long v8 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(void *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v8;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::formatText(CMMsl::PrecisionFindingVelocityEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "noiseVelocityX", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "noiseVelocityY", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "speedUncertainty", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
    if ((*((unsigned char *)this + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::readFrom(CMMsl::PrecisionFindingVelocityEstimate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_50;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_49;
      case 2u:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 3u:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 4u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 5u:
        *((unsigned char *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 6u:
        *((unsigned char *)this + 44) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 7u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_46;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_48;
      case 8u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_46:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_48:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_49:
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_50:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 20));
    if ((*(unsigned char *)(v3 + 44) & 8) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::hash_value(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  if ((*((unsigned char *)this + 44) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 44) & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v2 = *((float *)this + 7);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v8 = *((float *)this + 9);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v10 = *((float *)this + 10);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 44) & 4) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 5);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v15 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  float v14 = *((float *)this + 6);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::PrecisionFindingVerticalState::~PrecisionFindingVerticalState(CMMsl::PrecisionFindingVerticalState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this, const CMMsl::PrecisionFindingVerticalState *a2)
{
  *(void *)this = &unk_270644318;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    __int16 v3 = 16;
    *(_WORD *)(this + 60) = 16;
    *(void *)(this + 40) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 60) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    uint64_t v6 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(void *)(this + 48) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 8) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 24) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 58) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_20:
    char v12 = *((unsigned char *)a2 + 57);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(unsigned char *)(this + 57) = v12;
    return this;
  }
LABEL_19:
  char v11 = *((unsigned char *)a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(unsigned char *)(this + 56) = v11;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, const CMMsl::PrecisionFindingVerticalState *a2)
{
  if ((const CMMsl::PrecisionFindingVerticalState *)a1 != a2)
  {
    CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 58);
    *(unsigned char *)(a1 + 58) = v14;
    char v14 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v12;
    char v12 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a1 + 57) = v13;
    char v13 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVerticalState *a2, CMMsl::PrecisionFindingVerticalState *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  LOBYTE(v3) = *((unsigned char *)this + 58);
  *((unsigned char *)this + 58) = *((unsigned char *)a2 + 58);
  *((unsigned char *)a2 + 58) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v3;
  return result;
}

double CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644318;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return result;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 58);
    *(unsigned char *)(a1 + 58) = v14;
    char v14 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v12;
    char v12 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a1 + 57) = v13;
    char v13 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVerticalState::formatText(CMMsl::PrecisionFindingVerticalState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if (v5)
  {
    PB::TextFormatter::format(a2, "fractionAboveThreshold", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalDistance", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isAboveBelow");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isAboveBelowMessageShowing");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isConverged");
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "likelihoodAboveThreshold", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  if ((*((_WORD *)this + 30) & 0x20) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "verticalDistance", *((double *)this + 6));
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PrecisionFindingVerticalState::readFrom(CMMsl::PrecisionFindingVerticalState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_55;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 30) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 2u:
        *((_WORD *)this + 30) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 3u:
        *((_WORD *)this + 30) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 4u:
        *((_WORD *)this + 30) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 5u:
        *((_WORD *)this + 30) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_42;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_54;
      case 6u:
        *((_WORD *)this + 30) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_54:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_42:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 7u:
        *((_WORD *)this + 30) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 58) = v23;
        break;
      case 8u:
        *((_WORD *)this + 30) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 56) = v21;
        break;
      case 9u:
        *((_WORD *)this + 30) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 57) = v25;
        break;
      default:
        goto LABEL_19;
    }
LABEL_55:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVerticalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_19:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::PrecisionFindingVerticalState::hash_value(CMMsl::PrecisionFindingVerticalState *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 0x10) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_27:
    double v6 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_15;
    }
LABEL_28:
    double v7 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_28;
  }
LABEL_15:
  double v7 = *((double *)this + 3);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_18:
    uint64_t v8 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_30:
    uint64_t v9 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_20;
    }
LABEL_31:
    uint64_t v10 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t v9 = *((unsigned __int8 *)this + 56);
  if ((v1 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v10 = *((unsigned __int8 *)this + 57);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::PredictedRelativeDeviceMotion::~PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  *(void *)this = &unk_270644350;
  *((_DWORD *)this + 20) = 0;
  __int16 v2 = *((_WORD *)a2 + 40);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 40) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((_WORD *)this + 40) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_32:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_31:
  char v5 = *((unsigned char *)a2 + 76);
  v3 |= 0x4000u;
  *((_WORD *)this + 40) = v3;
  *((unsigned char *)this + 76) = v5;
  if ((*((_WORD *)a2 + 40) & 2) != 0) {
    goto LABEL_32;
  }
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *a1, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion((CMMsl::PredictedRelativeDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PredictedRelativeDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PredictedRelativeDeviceMotion *a2, CMMsl::PredictedRelativeDeviceMotion *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  LODWORD(v5) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 76);
  *((unsigned char *)this + 76) = *((unsigned char *)a2 + 76);
  *((unsigned char *)a2 + 76) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644350;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PredictedRelativeDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::formatText(CMMsl::PredictedRelativeDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "qStartW", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "qStartX", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "qStartY", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "qStartZ", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "qStopW", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "qStopX", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "qStopY", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "qStopZ", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rBoresightX", *((float *)this + 16));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rBoresightY", *((float *)this + 17));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rBoresightZ", *((float *)this + 18));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 3));
  if ((*((_WORD *)this + 40) & 0x4000) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "useForwardPrediction");
LABEL_17:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::readFrom(CMMsl::PredictedRelativeDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_73;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 2u:
        *((_WORD *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_71;
      case 3u:
        *((_WORD *)this + 40) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 4u:
        *((_WORD *)this + 40) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 5u:
        *((_WORD *)this + 40) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 6u:
        *((_WORD *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 7u:
        *((_WORD *)this + 40) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 8u:
        *((_WORD *)this + 40) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 9u:
        *((_WORD *)this + 40) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 0xAu:
        *((_WORD *)this + 40) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 0xBu:
        *((_WORD *)this + 40) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 0xCu:
        *((_WORD *)this + 40) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_62;
      case 0xDu:
        *((_WORD *)this + 40) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_67;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_62:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_72;
      case 0xEu:
        *((_WORD *)this + 40) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 76) = v21;
        break;
      case 0xFu:
        *((_WORD *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_71:
          unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_72:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_67:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_73:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 80);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 80) & 2) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_31:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::hash_value(CMMsl::PredictedRelativeDeviceMotion *this)
{
  __int16 v1 = *((_WORD *)this + 40);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
LABEL_46:
    double v3 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_47:
    uint64_t v5 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_48:
    uint64_t v7 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_49:
    uint64_t v9 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_50:
    uint64_t v11 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0) {
      goto LABEL_18;
    }
LABEL_51:
    uint64_t v13 = 0;
    if ((*((_WORD *)this + 40) & 0x200) != 0) {
      goto LABEL_21;
    }
LABEL_52:
    uint64_t v15 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0) {
      goto LABEL_24;
    }
LABEL_53:
    uint64_t v17 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_54:
    uint64_t v19 = 0;
    if ((*((_WORD *)this + 40) & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_55:
    uint64_t v21 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0) {
      goto LABEL_33;
    }
LABEL_56:
    uint64_t v23 = 0;
    if ((*((_WORD *)this + 40) & 0x2000) != 0) {
      goto LABEL_36;
    }
LABEL_57:
    uint64_t v25 = 0;
    if ((*((_WORD *)this + 40) & 0x4000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_58;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_46;
  }
LABEL_3:
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_47;
  }
LABEL_6:
  float v4 = *((float *)this + 9);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_48;
  }
LABEL_9:
  float v6 = *((float *)this + 10);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_49;
  }
LABEL_12:
  float v8 = *((float *)this + 11);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_50;
  }
LABEL_15:
  float v10 = *((float *)this + 8);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x100) == 0) {
    goto LABEL_51;
  }
LABEL_18:
  float v12 = *((float *)this + 13);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x200) == 0) {
    goto LABEL_52;
  }
LABEL_21:
  float v14 = *((float *)this + 14);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_24:
  float v16 = *((float *)this + 15);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_54;
  }
LABEL_27:
  float v18 = *((float *)this + 12);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x800) == 0) {
    goto LABEL_55;
  }
LABEL_30:
  float v20 = *((float *)this + 16);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x1000) == 0) {
    goto LABEL_56;
  }
LABEL_33:
  float v22 = *((float *)this + 17);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x2000) == 0) {
    goto LABEL_57;
  }
LABEL_36:
  float v24 = *((float *)this + 18);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x4000) != 0)
  {
LABEL_39:
    uint64_t v26 = *((unsigned __int8 *)this + 76);
    if ((v1 & 2) != 0) {
      goto LABEL_40;
    }
LABEL_59:
    double v27 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(void *)&v27;
  }
LABEL_58:
  uint64_t v26 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_59;
  }
LABEL_40:
  double v27 = *((double *)this + 2);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(void *)&v27;
}

void CMMsl::Pressure::~Pressure(CMMsl::Pressure *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::Pressure::Pressure(CMMsl::Pressure *this, const CMMsl::Pressure *a2)
{
  *(void *)this = &unk_270644388;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 24) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    *((unsigned char *)this + 24) = v3 | 4;
    *((_DWORD *)this + 5) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, const CMMsl::Pressure *a2)
{
  if ((const CMMsl::Pressure *)a1 != a2)
  {
    CMMsl::Pressure::Pressure((CMMsl::Pressure *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Pressure *a2, CMMsl::Pressure *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::Pressure::Pressure(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644388;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644388;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = &unk_270644388;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    void v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::Pressure::formatText(CMMsl::Pressure *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
  if (*((unsigned char *)this + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_5:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Pressure::readFrom(CMMsl::Pressure *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_27;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_27;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v19 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
        unint64_t v2 = *((void *)a2 + 1) + 4;
        goto LABEL_37;
      }
      if (v19 != 1)
      {
LABEL_27:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_38;
      }
      *((unsigned char *)this + 24) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
      {
LABEL_34:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
      unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_37:
      *((void *)a2 + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 24) |= 4u;
    unint64_t v2 = *((void *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
      goto LABEL_34;
    }
    *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 20);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::Pressure::hash_value(CMMsl::Pressure *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 24) & 2) != 0)
    {
LABEL_3:
      float v2 = *((float *)this + 4);
      uint64_t v3 = LODWORD(v2);
      if (v2 == 0.0) {
        uint64_t v3 = 0;
      }
      if ((*((unsigned char *)this + 24) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_13:
      uint64_t v5 = 0;
      return v3 ^ *(void *)&v1 ^ v5;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5;
}

void CMMsl::PressureCalibration::~PressureCalibration(CMMsl::PressureCalibration *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::PressureCalibration::PressureCalibration(CMMsl::PressureCalibration *this, const CMMsl::PressureCalibration *a2)
{
  *(void *)this = &unk_2706443C0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    float result = *((float *)a2 + 7);
    char v3 = 32;
    *((unsigned char *)this + 32) = 32;
    *((float *)this + 7) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 6);
    v3 |= 0x10u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 6) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    float result = *((float *)a2 + 5);
    v3 |= 8u;
    *((unsigned char *)this + 32) = v3;
    *((float *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 2);
  v3 |= 1u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 2) = result;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_14:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 32) = v3 | 4;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_13:
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((unsigned char *)this + 32) = v3;
  *((float *)this + 3) = result;
  if ((*((unsigned char *)a2 + 32) & 4) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, const CMMsl::PressureCalibration *a2)
{
  if ((const CMMsl::PressureCalibration *)a1 != a2)
  {
    CMMsl::PressureCalibration::PressureCalibration((CMMsl::PressureCalibration *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureCalibration *a2, CMMsl::PressureCalibration *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  int v7 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v7;
  int v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PressureCalibration::PressureCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706443C0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706443C0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = &unk_2706443C0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(void *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PressureCalibration::formatText(CMMsl::PressureCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "inertialX", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialY", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "inertialZ", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "maxTemp", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "medTocFactoryTemp", *((float *)this + 6));
  if ((*((unsigned char *)this + 32) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "medianToc", *((float *)this + 7));
LABEL_8:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureCalibration::readFrom(CMMsl::PressureCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_43;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((unsigned char *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((unsigned char *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((unsigned char *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((unsigned char *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_40;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((unsigned char *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_42:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::PressureCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(float *)(v3 + 12));
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_13:
  float v5 = *(float *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::PressureCalibration::hash_value(CMMsl::PressureCalibration *this)
{
  if ((*((unsigned char *)this + 32) & 0x20) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t v5 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
  float v12 = *((float *)this + 7);
  uint64_t v1 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_22;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_23;
  }
LABEL_9:
  float v6 = *((float *)this + 2);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_12:
    float v8 = *((float *)this + 3);
    uint64_t v9 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v9 = 0;
    }
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  uint64_t v9 = 0;
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_25;
  }
LABEL_15:
  float v10 = *((float *)this + 4);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

void CMMsl::PressureCompensated::~PressureCompensated(CMMsl::PressureCompensated *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706443F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureCompensated::~PressureCompensated(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PressureCompensated::PressureCompensated(void *this, const CMMsl::PressureCompensated *a2)
{
  *this = &unk_2706443F8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureCompensated *CMMsl::PressureCompensated::operator=(const CMMsl::PressureCompensated *a1, const CMMsl::PressureCompensated *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureCompensated::PressureCompensated(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureCompensated::~PressureCompensated((CMMsl::PressureCompensated *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureCompensated *a2, CMMsl::PressureCompensated *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureCompensated::PressureCompensated(void *a1, uint64_t a2)
{
  *a1 = &unk_2706443F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706443F8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureCompensated::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706443F8;
    v6[1] = v4;
    CMMsl::PressureCompensated::~PressureCompensated((CMMsl::PressureCompensated *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureCompensated::formatText(CMMsl::PressureCompensated *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureCompensated::readFrom(CMMsl::PressureCompensated *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureCompensated::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureCompensated::hash_value(CMMsl::PressureCompensated *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureCompensated::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureFiltered::~PressureFiltered(CMMsl::PressureFiltered *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270644430;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureFiltered::~PressureFiltered(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PressureFiltered::PressureFiltered(void *this, const CMMsl::PressureFiltered *a2)
{
  *this = &unk_270644430;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureFiltered *CMMsl::PressureFiltered::operator=(const CMMsl::PressureFiltered *a1, const CMMsl::PressureFiltered *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureFiltered::PressureFiltered(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureFiltered::~PressureFiltered((CMMsl::PressureFiltered *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureFiltered *a2, CMMsl::PressureFiltered *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureFiltered::PressureFiltered(void *a1, uint64_t a2)
{
  *a1 = &unk_270644430;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270644430;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270644430;
    v6[1] = v4;
    CMMsl::PressureFiltered::~PressureFiltered((CMMsl::PressureFiltered *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered::formatText(CMMsl::PressureFiltered *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureFiltered::readFrom(CMMsl::PressureFiltered *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureFiltered::hash_value(CMMsl::PressureFiltered *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureFiltered::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass(CMMsl::PressureFiltered1HzLowPass *this)
{
  *(void *)this = &unk_270644468;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t this, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  *(void *)this = &unk_270644468;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v2;
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  if ((const CMMsl::PressureFiltered1HzLowPass *)a1 != a2)
  {
    CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass((CMMsl::PressureFiltered1HzLowPass *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PressureFiltered1HzLowPass *a2, CMMsl::PressureFiltered1HzLowPass *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  return result;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644468;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass((CMMsl::PressureFiltered1HzLowPass *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::formatText(CMMsl::PressureFiltered1HzLowPass *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureFiltered1HzLowPass::readFrom(CMMsl::PressureFiltered1HzLowPass *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v19);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 24)) {
    this = PB::Writer::write(a2, *(double *)(this + 8));
  }
  int v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(a2, v4);
  }
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::hash_value(CMMsl::PressureFiltered1HzLowPass *this)
{
  if (*((unsigned char *)this + 24))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
  }
  else
  {
    double v1 = 0.0;
  }
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if ((*(unsigned char *)(v2 + 20) & 1) == 0) {
      uint64_t v3 = 0;
    }
    float v4 = *(float *)(v2 + 16);
    BOOL v5 = v4 == 0.0 || (*(unsigned char *)(v2 + 20) & 2) == 0;
    uint64_t v6 = LODWORD(v4);
    if (v5) {
      uint64_t v6 = 0;
    }
    uint64_t v2 = v6 ^ v3;
  }
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureFilteredNoTemperature::~PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this, const CMMsl::PressureFilteredNoTemperature *a2)
{
  *(void *)this = &unk_2706444A0;
  *((_DWORD *)this + 5) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *((unsigned char *)this + 20) = 1;
    *((void *)this + 1) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, const CMMsl::PressureFilteredNoTemperature *a2)
{
  if ((const CMMsl::PressureFilteredNoTemperature *)a1 != a2)
  {
    CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature((CMMsl::PressureFilteredNoTemperature *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureFilteredNoTemperature *a2, CMMsl::PressureFilteredNoTemperature *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706444A0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_2706444A0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v12 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = &unk_2706444A0;
    v10[1] = v7;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PressureFilteredNoTemperature::formatText(CMMsl::PressureFilteredNoTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureFilteredNoTemperature::readFrom(CMMsl::PressureFilteredNoTemperature *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_30;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v19 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v20 = *(void *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v23 = 0;
          if (v2 <= v19) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v19)
            {
              uint64_t v23 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v19++;
            char v29 = *(unsigned char *)(v20 + v28);
            *((void *)a2 + 1) = v19;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v23 = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          while (1)
          {
            unint64_t v2 = v19 + 1;
            *((void *)a2 + 1) = v19 + 1;
            char v24 = *(unsigned char *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v21 += 7;
            unint64_t v19 = v2;
            BOOL v14 = v22++ > 8;
            if (v14)
            {
              uint64_t v23 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((void *)this + 1) = v23;
      }
      else
      {
LABEL_30:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_30;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFilteredNoTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5);
  }
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::hash_value(CMMsl::PressureFilteredNoTemperature *this)
{
  if ((*((unsigned char *)this + 20) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v3 = 0;
    return v3 ^ v1;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ v1;
}

void CMMsl::PressureGps::~PressureGps(CMMsl::PressureGps *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706444D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureGps::~PressureGps(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PressureGps::PressureGps(void *this, const CMMsl::PressureGps *a2)
{
  *this = &unk_2706444D8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureGps *CMMsl::PressureGps::operator=(const CMMsl::PressureGps *a1, const CMMsl::PressureGps *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureGps::PressureGps(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureGps::~PressureGps((CMMsl::PressureGps *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureGps *a2, CMMsl::PressureGps *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureGps::PressureGps(void *a1, uint64_t a2)
{
  *a1 = &unk_2706444D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_2706444D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureGps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_2706444D8;
    v6[1] = v4;
    CMMsl::PressureGps::~PressureGps((CMMsl::PressureGps *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureGps::formatText(CMMsl::PressureGps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureGps::readFrom(CMMsl::PressureGps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureGps::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureGps::hash_value(CMMsl::PressureGps *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureGps::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PressureOscarEmu::~PressureOscarEmu(CMMsl::PressureOscarEmu *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270644510;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PressureOscarEmu::~PressureOscarEmu(this);
  JUMPOUT(0x25A2B2850);
}

void *CMMsl::PressureOscarEmu::PressureOscarEmu(void *this, const CMMsl::PressureOscarEmu *a2)
{
  *this = &unk_270644510;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::PressureOscarEmu *CMMsl::PressureOscarEmu::operator=(const CMMsl::PressureOscarEmu *a1, const CMMsl::PressureOscarEmu *a2)
{
  if (a1 != a2)
  {
    CMMsl::PressureOscarEmu::PressureOscarEmu(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::PressureOscarEmu::~PressureOscarEmu((CMMsl::PressureOscarEmu *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureOscarEmu *a2, CMMsl::PressureOscarEmu *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::PressureOscarEmu::PressureOscarEmu(void *a1, uint64_t a2)
{
  *a1 = &unk_270644510;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_270644510;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = &unk_270644510;
    v6[1] = v4;
    CMMsl::PressureOscarEmu::~PressureOscarEmu((CMMsl::PressureOscarEmu *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::formatText(CMMsl::PressureOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::PressureOscarEmu::readFrom(CMMsl::PressureOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_23;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
LABEL_23:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13) {
        goto LABEL_23;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2);
  }
  return this;
}

CMMsl::Pressure *CMMsl::PressureOscarEmu::hash_value(CMMsl::PressureOscarEmu *this)
{
  uint64_t result = (CMMsl::Pressure *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::PressureOscarEmu::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::PropagatedAnchor::~PropagatedAnchor(CMMsl::PropagatedAnchor *this)
{
  *(void *)this = &unk_270644548;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PropagatedAnchor::~PropagatedAnchor(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::PropagatedAnchor *CMMsl::PropagatedAnchor::PropagatedAnchor(CMMsl::PropagatedAnchor *this, const CMMsl::PropagatedAnchor *a2)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_270644548;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (this != a2) {
    sub_2572C73EC((void *)this + 1, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v4 = *((void *)a2 + 4);
    *((unsigned char *)this + 48) |= 1u;
    *((void *)this + 4) = v4;
  }
  return this;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, const CMMsl::PropagatedAnchor *a2)
{
  if ((const CMMsl::PropagatedAnchor *)a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((CMMsl::PropagatedAnchor *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PropagatedAnchor *a2, CMMsl::PropagatedAnchor *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644548;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_2572C7560(v4, (__n128 *)(a2 + 8));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    uint64_t v7 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::formatText(CMMsl::PropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 48)) {
    PB::TextFormatter::format(a2, "originalTimestamp", *((double *)this + 4));
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "pose");
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::PropagatedAnchor::readFrom(CMMsl::PropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_21;
          }
          v15 += 7;
          unint64_t v2 = v17;
          BOOL v14 = v16++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v19 == 2)
      {
        if ((v11 & 7) != 2)
        {
          unint64_t v36 = (char *)*((void *)this + 2);
          unint64_t v35 = *((void *)this + 3);
          if ((unint64_t)v36 >= v35)
          {
            uint64_t v38 = (char *)*((void *)this + 1);
            uint64_t v39 = (v36 - v38) >> 3;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61) {
LABEL_83:
            }
              sub_2570AFD0C();
            uint64_t v41 = v35 - (void)v38;
            if (v41 >> 2 > v40) {
              unint64_t v40 = v41 >> 2;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              unint64_t v42 = (unint64_t)sub_2572C7528(v42);
              uint64_t v38 = (char *)*((void *)this + 1);
              unint64_t v36 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v43 = 0;
            }
            unint64_t v44 = (void *)(v42 + 8 * v39);
            *unint64_t v44 = 0;
            unint64_t v37 = v44 + 1;
            while (v36 != v38)
            {
              uint64_t v45 = *((void *)v36 - 1);
              v36 -= 8;
              *--unint64_t v44 = v45;
            }
            *((void *)this + 1) = v44;
            *((void *)this + 2) = v37;
            *((void *)this + 3) = v42 + 8 * v43;
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(void *)unint64_t v36 = 0;
            unint64_t v37 = v36 + 8;
          }
          *((void *)this + 2) = v37;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)a2 + 2))
          {
LABEL_73:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_76;
          }
          *(v37 - 1) = *(void *)(*(void *)a2 + v46);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        while (v21 < v22 && !*((unsigned char *)a2 + 24))
        {
          char v24 = (char *)*((void *)this + 2);
          unint64_t v23 = *((void *)this + 3);
          if ((unint64_t)v24 >= v23)
          {
            char v26 = (char *)*((void *)this + 1);
            uint64_t v27 = (v24 - v26) >> 3;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61) {
              goto LABEL_83;
            }
            uint64_t v29 = v23 - (void)v26;
            if (v29 >> 2 > v28) {
              unint64_t v28 = v29 >> 2;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              unint64_t v30 = (unint64_t)sub_2572C7528(v30);
              char v26 = (char *)*((void *)this + 1);
              char v24 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v31 = 0;
            }
            unint64_t v32 = (void *)(v30 + 8 * v27);
            *unint64_t v32 = 0;
            uint64_t v25 = v32 + 1;
            while (v24 != v26)
            {
              uint64_t v33 = *((void *)v24 - 1);
              v24 -= 8;
              *--unint64_t v32 = v33;
            }
            *((void *)this + 1) = v32;
            *((void *)this + 2) = v25;
            *((void *)this + 3) = v30 + 8 * v31;
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(void *)char v24 = 0;
            uint64_t v25 = v24 + 8;
          }
          *((void *)this + 2) = v25;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)a2 + 2))
          {
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v25 - 1) = *(void *)(*(void *)a2 + v34);
          unint64_t v22 = *((void *)a2 + 2);
          unint64_t v21 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v21;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v19 == 1) {
          operator new();
        }
LABEL_19:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 48) |= 1u;
    unint64_t v20 = *((void *)a2 + 1);
    if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
      goto LABEL_73;
    }
    *((void *)this + 4) = *(void *)(*(void *)a2 + v20);
LABEL_75:
    *((void *)a2 + 1) += 8;
    goto LABEL_76;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 40);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  if (*(unsigned char *)(v3 + 48))
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(a2, v8);
  }
  return this;
}

uint64_t CMMsl::PropagatedAnchor::hash_value(CMMsl::PropagatedAnchor *this)
{
  unint64_t v2 = (CMMsl::Pose *)*((void *)this + 5);
  if (v2) {
    uint64_t v3 = CMMsl::Pose::hash_value(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 48))
  {
    double v5 = *((double *)this + 4);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v4 ^ v3 ^ *(void *)&v5;
}

uint64_t CMMsl::PropagatedAnchor::makePose(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

void CMMsl::Prox::~Prox(CMMsl::Prox *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::Prox::Prox(uint64_t this, const CMMsl::Prox *a2)
{
  *(void *)this = &unk_270644580;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::Prox *CMMsl::Prox::operator=(const CMMsl::Prox *a1, const CMMsl::Prox *a2)
{
  if (a1 != a2)
  {
    CMMsl::Prox::Prox((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Prox *a2, CMMsl::Prox *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Prox::Prox(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644580;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644580;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Prox::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = &unk_270644580;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Prox::formatText(CMMsl::Prox *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMask");
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::Prox::readFrom(CMMsl::Prox *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_26;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v28 = v20++;
            char v29 = *(unsigned char *)(v21 + v28);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v26 += 7;
            BOOL v14 = v27++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v28 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_26:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_26;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Prox::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t CMMsl::Prox::hash_value(CMMsl::Prox *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::ProxBaselineEstimatorState::~ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this, const CMMsl::ProxBaselineEstimatorState *a2)
{
  *(void *)this = &unk_2706445B8;
  *((_DWORD *)this + 22) = 0;
  int v2 = *((_DWORD *)a2 + 22);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 22) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 11);
    v3 |= 0x100u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 11) = result;
    int v2 = *((_DWORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    float result = *((float *)a2 + 13);
    v3 |= 0x400u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 13) = result;
    int v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  float result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  float result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  float result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v6 = *((unsigned char *)a2 + 84);
  v3 |= 0x40000u;
  *((_DWORD *)this + 22) = v3;
  *((unsigned char *)this + 84) = v6;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  float result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  float result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  float result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_40:
    float result = *((float *)a2 + 12);
    *((_DWORD *)this + 22) = v3 | 0x200;
    *((float *)this + 12) = result;
    return result;
  }
LABEL_39:
  float result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 18) = result;
  if ((*((_DWORD *)a2 + 22) & 0x200) != 0) {
    goto LABEL_40;
  }
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *a1, const CMMsl::ProxBaselineEstimatorState *a2)
{
  if (a1 != a2)
  {
    CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState((CMMsl::ProxBaselineEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ProxBaselineEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxBaselineEstimatorState *a2, CMMsl::ProxBaselineEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  int v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  int v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  int v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  int v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LOBYTE(v4) = *((unsigned char *)this + 84);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((unsigned char *)a2 + 84) = v4;
  int v11 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v11;
  int v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  int v14 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v14;
  int v15 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v15;
  int v16 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v16;
  int v17 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v17;
  int v18 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v18;
  int v19 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v19;
  int v20 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v20;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706445B8;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  float result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ProxBaselineEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ProxBaselineEstimatorState::formatText(CMMsl::ProxBaselineEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "baselineError", *((float *)this + 4));
    int v5 = *((_DWORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "covariancePostMeasurement00", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "covariancePostMeasurement01", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "covariancePostMeasurement11", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "covariancePreMeasurement00", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "covariancePreMeasurement01", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "covariancePreMeasurement11", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "estimate", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "factoryXTalk", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "gain", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "measurement", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "possibleObstructed");
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "proxBufferMax", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "proxBufferVariance", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "sensitivityCal", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "temperatureCalError", *((float *)this + 20));
  if (*((_DWORD *)this + 22)) {
LABEL_20:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_21:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ProxBaselineEstimatorState::readFrom(CMMsl::ProxBaselineEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_94;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 22) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_103;
            }
            unint64_t v30 = v20++;
            char v31 = *(unsigned char *)(v21 + v30);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_102:
              unint64_t v2 = v30 + 1;
              goto LABEL_103;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_102;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_103;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_103:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_DWORD *)this + 22) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 3u:
        *((_DWORD *)this + 22) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 4u:
        *((_DWORD *)this + 22) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 5u:
        *((_DWORD *)this + 22) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 6u:
        *((_DWORD *)this + 22) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 7u:
        *((_DWORD *)this + 22) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 8u:
        *((_DWORD *)this + 22) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 84) = v27;
        break;
      case 9u:
        *((_DWORD *)this + 22) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xAu:
        *((_DWORD *)this + 22) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xBu:
        *((_DWORD *)this + 22) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xCu:
        *((_DWORD *)this + 22) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xDu:
        *((_DWORD *)this + 22) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xEu:
        *((_DWORD *)this + 22) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0xFu:
        *((_DWORD *)this + 22) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0x10u:
        *((_DWORD *)this + 22) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0x11u:
        *((_DWORD *)this + 22) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0x12u:
        *((_DWORD *)this + 22) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_82;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_93;
      case 0x13u:
        *((_DWORD *)this + 22) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_93:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_82:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_94:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ProxBaselineEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 88);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    int v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    this = PB::Writer::write(a2, *(float *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 88) & 0x200) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_39:
  float v5 = *(float *)(v3 + 48);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::ProxBaselineEstimatorState::hash_value(CMMsl::ProxBaselineEstimatorState *this)
{
  int v1 = *((_DWORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_56:
    uint64_t v4 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_57:
    uint64_t v6 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_9;
    }
LABEL_58:
    uint64_t v8 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_12;
    }
LABEL_59:
    uint64_t v10 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_15;
    }
LABEL_60:
    uint64_t v12 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_18;
    }
LABEL_61:
    uint64_t v14 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 0x100) == 0) {
    goto LABEL_56;
  }
LABEL_3:
  float v3 = *((float *)this + 11);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_57;
  }
LABEL_6:
  float v5 = *((float *)this + 13);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_9:
  float v7 = *((float *)this + 15);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_59;
  }
LABEL_12:
  float v9 = *((float *)this + 14);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_60;
  }
LABEL_15:
  float v11 = *((float *)this + 19);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_61;
  }
LABEL_18:
  float v13 = *((float *)this + 20);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x40000) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 84);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_22;
    }
LABEL_63:
    uint64_t v17 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_25;
    }
LABEL_64:
    uint64_t v19 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_28;
    }
LABEL_65:
    uint64_t v21 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_66:
    uint64_t v23 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_34;
    }
LABEL_67:
    uint64_t v25 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_37;
    }
LABEL_68:
    uint64_t v27 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_40;
    }
LABEL_69:
    uint64_t v29 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_43;
    }
LABEL_70:
    uint64_t v31 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_46;
    }
LABEL_71:
    uint64_t v33 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_72;
  }
LABEL_62:
  uint64_t v15 = 0;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_63;
  }
LABEL_22:
  float v16 = *((float *)this + 17);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_64;
  }
LABEL_25:
  float v18 = *((float *)this + 16);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_65;
  }
LABEL_28:
  float v20 = *((float *)this + 4);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_66;
  }
LABEL_31:
  float v22 = *((float *)this + 8);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_67;
  }
LABEL_34:
  float v24 = *((float *)this + 9);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_68;
  }
LABEL_37:
  float v26 = *((float *)this + 10);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_69;
  }
LABEL_40:
  float v28 = *((float *)this + 5);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_70;
  }
LABEL_43:
  float v30 = *((float *)this + 6);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_71;
  }
LABEL_46:
  float v32 = *((float *)this + 7);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_49:
    float v34 = *((float *)this + 18);
    uint64_t v35 = LODWORD(v34);
    if (v34 == 0.0) {
      uint64_t v35 = 0;
    }
    if ((v1 & 0x200) != 0) {
      goto LABEL_52;
    }
LABEL_73:
    uint64_t v37 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
  }
LABEL_72:
  uint64_t v35 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_73;
  }
LABEL_52:
  float v36 = *((float *)this + 12);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
}

void CMMsl::ProxCalibration::~ProxCalibration(CMMsl::ProxCalibration *this)
{
  *(void *)this = &unk_2706445F0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ProxCalibration::~ProxCalibration(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::ProxCalibration *CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this, const CMMsl::ProxCalibration *a2)
{
  *(void *)this = &unk_2706445F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  char v5 = *((unsigned char *)a2 + 72);
  if ((v5 & 2) != 0)
  {
    int v7 = *((_DWORD *)a2 + 15);
    char v6 = 2;
    *((unsigned char *)this + 72) = 2;
    *((_DWORD *)this + 15) = v7;
    char v5 = *((unsigned char *)a2 + 72);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 72))
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 14);
    v6 |= 1u;
    *((unsigned char *)this + 72) = v6;
    *((_DWORD *)this + 14) = v8;
    char v5 = *((unsigned char *)a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v11 = *((_DWORD *)a2 + 16);
  v6 |= 4u;
  *((unsigned char *)this + 72) = v6;
  *((_DWORD *)this + 16) = v11;
  if ((*((unsigned char *)a2 + 72) & 8) != 0)
  {
LABEL_8:
    int v9 = *((_DWORD *)a2 + 17);
    *((unsigned char *)this + 72) = v6 | 8;
    *((_DWORD *)this + 17) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, const CMMsl::ProxCalibration *a2)
{
  if ((const CMMsl::ProxCalibration *)a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((CMMsl::ProxCalibration *)&v11, a2);
    uint64_t v3 = v16;
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxCalibration *a2, CMMsl::ProxCalibration *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  int v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  float result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  int v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  int v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  return result;
}

uint64_t CMMsl::ProxCalibration::ProxCalibration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706445F0;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  sub_2572C7560(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((uint64_t)&v11, a2);
    uint64_t v3 = v16;
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v3;
    int v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v6;
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

uint64_t CMMsl::ProxCalibration::formatText(CMMsl::ProxCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 72);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bC150RXAVE", *((float *)this + 14));
    char v5 = *((unsigned char *)this + 72);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "gC0RXAVE", *((float *)this + 15));
  }
  int v6 = (float *)*((void *)this + 1);
  long long v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "ntcRamp", v8);
  }
  long long v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "rxXT", v11);
  }
  char v12 = *((unsigned char *)this + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "versionPxCL");
    char v12 = *((unsigned char *)this + 72);
  }
  if ((v12 & 8) != 0) {
    PB::TextFormatter::format(a2, "versionPxTC");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::ProxCalibration::readFrom(CMMsl::ProxCalibration *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 72) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((void *)a2 + 2)) {
            goto LABEL_151;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v20);
          goto LABEL_153;
        case 2u:
          *((unsigned char *)this + 72) |= 1u;
          unint64_t v21 = *((void *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((void *)a2 + 2)) {
            goto LABEL_151;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v21);
          goto LABEL_153;
        case 3u:
          *((unsigned char *)this + 72) |= 4u;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_131;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_97:
            LODWORD(v27) = 0;
            goto LABEL_131;
          }
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v68 = v22 + 1;
              char v69 = *(unsigned char *)(v24 + v22);
              *((void *)a2 + 1) = v68;
              v27 |= (unint64_t)(v69 & 0x7F) << v66;
              if (v69 < 0)
              {
                v66 += 7;
                unint64_t v22 = v68;
                BOOL v14 = v67++ > 8;
                if (v14) {
                  goto LABEL_97;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v27) = 0;
              }
            }
            break;
          }
LABEL_131:
          *((_DWORD *)this + 16) = v27;
          goto LABEL_154;
        case 4u:
          *((unsigned char *)this + 72) |= 8u;
          unint64_t v30 = *((void *)a2 + 1);
          unint64_t v31 = *((void *)a2 + 2);
          uint64_t v32 = *(void *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)a2 + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_134;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_104:
            LODWORD(v35) = 0;
            goto LABEL_134;
          }
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v72 = v30 + 1;
              char v73 = *(unsigned char *)(v32 + v30);
              *((void *)a2 + 1) = v72;
              v35 |= (unint64_t)(v73 & 0x7F) << v70;
              if (v73 < 0)
              {
                v70 += 7;
                unint64_t v30 = v72;
                BOOL v14 = v71++ > 8;
                if (v14) {
                  goto LABEL_104;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v35) = 0;
              }
            }
            break;
          }
LABEL_134:
          *((_DWORD *)this + 17) = v35;
          goto LABEL_154;
        case 5u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v38 = *((void *)a2 + 1);
            unint64_t v39 = *((void *)a2 + 2);
            while (v38 < v39 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v41 = (char *)*((void *)this + 2);
              unint64_t v40 = *((void *)this + 3);
              if ((unint64_t)v41 >= v40)
              {
                uint64_t v43 = (char *)*((void *)this + 1);
                uint64_t v44 = (v41 - v43) >> 2;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62) {
                  goto LABEL_163;
                }
                uint64_t v46 = v40 - (void)v43;
                if (v46 >> 1 > v45) {
                  unint64_t v45 = v46 >> 1;
                }
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v45;
                }
                if (v47)
                {
                  unint64_t v47 = (unint64_t)sub_2572C76F0(v47);
                  uint64_t v43 = (char *)*((void *)this + 1);
                  uint64_t v41 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v48 = 0;
                }
                unint64_t v49 = (_DWORD *)(v47 + 4 * v44);
                *unint64_t v49 = 0;
                unint64_t v42 = v49 + 1;
                while (v41 != v43)
                {
                  int v50 = *((_DWORD *)v41 - 1);
                  v41 -= 4;
                  *--unint64_t v49 = v50;
                }
                *((void *)this + 1) = v49;
                *((void *)this + 2) = v42;
                *((void *)this + 3) = v47 + 4 * v48;
                if (v43) {
                  operator delete(v43);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v41 = 0;
                unint64_t v42 = v41 + 4;
              }
              *((void *)this + 2) = v42;
              unint64_t v51 = *((void *)a2 + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *(v42 - 1) = *(_DWORD *)(*(void *)a2 + v51);
              unint64_t v39 = *((void *)a2 + 2);
              unint64_t v38 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v38;
            }
            goto LABEL_110;
          }
          unint64_t v75 = (char *)*((void *)this + 2);
          unint64_t v74 = *((void *)this + 3);
          if ((unint64_t)v75 >= v74)
          {
            uint64_t v79 = (char *)*((void *)this + 1);
            uint64_t v80 = (v75 - v79) >> 2;
            unint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62) {
              goto LABEL_163;
            }
            uint64_t v82 = v74 - (void)v79;
            if (v82 >> 1 > v81) {
              unint64_t v81 = v82 >> 1;
            }
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v81;
            }
            if (v83)
            {
              unint64_t v83 = (unint64_t)sub_2572C76F0(v83);
              uint64_t v79 = (char *)*((void *)this + 1);
              unint64_t v75 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v84 = 0;
            }
            char v91 = (_DWORD *)(v83 + 4 * v80);
            *char v91 = 0;
            uint64_t v76 = v91 + 1;
            while (v75 != v79)
            {
              int v92 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *--char v91 = v92;
            }
            *((void *)this + 1) = v91;
            *((void *)this + 2) = v76;
            *((void *)this + 3) = v83 + 4 * v84;
            if (v79) {
              operator delete(v79);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v75 = 0;
            uint64_t v76 = v75 + 4;
          }
          *((void *)this + 2) = v76;
          goto LABEL_149;
        case 6u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v52 = *((void *)a2 + 1);
            unint64_t v53 = *((void *)a2 + 2);
            while (v52 < v53 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v55 = (char *)*((void *)this + 5);
              unint64_t v54 = *((void *)this + 6);
              if ((unint64_t)v55 >= v54)
              {
                unint64_t v57 = (char *)*((void *)this + 4);
                uint64_t v58 = (v55 - v57) >> 2;
                unint64_t v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62) {
                  goto LABEL_163;
                }
                uint64_t v60 = v54 - (void)v57;
                if (v60 >> 1 > v59) {
                  unint64_t v59 = v60 >> 1;
                }
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v61 = v59;
                }
                if (v61)
                {
                  unint64_t v61 = (unint64_t)sub_2572C76F0(v61);
                  unint64_t v57 = (char *)*((void *)this + 4);
                  uint64_t v55 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v62 = 0;
                }
                unint64_t v63 = (_DWORD *)(v61 + 4 * v58);
                *unint64_t v63 = 0;
                uint64_t v56 = v63 + 1;
                while (v55 != v57)
                {
                  int v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *--unint64_t v63 = v64;
                }
                *((void *)this + 4) = v63;
                *((void *)this + 5) = v56;
                *((void *)this + 6) = v61 + 4 * v62;
                if (v57) {
                  operator delete(v57);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v55 = 0;
                uint64_t v56 = v55 + 4;
              }
              *((void *)this + 5) = v56;
              unint64_t v65 = *((void *)a2 + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2))
              {
LABEL_109:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v56 - 1) = *(_DWORD *)(*(void *)a2 + v65);
              unint64_t v53 = *((void *)a2 + 2);
              unint64_t v52 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v52;
            }
LABEL_110:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v78 = (char *)*((void *)this + 5);
            unint64_t v77 = *((void *)this + 6);
            if ((unint64_t)v78 >= v77)
            {
              int v85 = (char *)*((void *)this + 4);
              uint64_t v86 = (v78 - v85) >> 2;
              unint64_t v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62) {
LABEL_163:
              }
                sub_2570AFD0C();
              uint64_t v88 = v77 - (void)v85;
              if (v88 >> 1 > v87) {
                unint64_t v87 = v88 >> 1;
              }
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v87;
              }
              if (v89)
              {
                unint64_t v89 = (unint64_t)sub_2572C76F0(v89);
                int v85 = (char *)*((void *)this + 4);
                uint64_t v78 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v90 = 0;
              }
              unint64_t v93 = (_DWORD *)(v89 + 4 * v86);
              *unint64_t v93 = 0;
              uint64_t v76 = v93 + 1;
              while (v78 != v85)
              {
                int v94 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *--unint64_t v93 = v94;
              }
              *((void *)this + 4) = v93;
              *((void *)this + 5) = v76;
              *((void *)this + 6) = v89 + 4 * v90;
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v78 = 0;
              uint64_t v76 = v78 + 4;
            }
            *((void *)this + 5) = v76;
LABEL_149:
            unint64_t v95 = *((void *)a2 + 1);
            if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *((void *)a2 + 2))
            {
              *(v76 - 1) = *(_DWORD *)(*(void *)a2 + v95);
LABEL_153:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_151:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_154;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_154:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::ProxCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60));
    char v4 = *(unsigned char *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_15:
      this = PB::Writer::writeVarInt(a2);
      if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(this + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  char v9 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    float v10 = *v9++;
    this = PB::Writer::write(a2, v10);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::hash_value(CMMsl::ProxCalibration *this)
{
  if ((*((unsigned char *)this + 72) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 72)) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 72) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 72) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v5 = 0;
    goto LABEL_14;
  }
  float v6 = *((float *)this + 15);
  uint64_t v1 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 72) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_3:
  float v2 = *((float *)this + 14);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 72) & 4) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v4 = *((int *)this + 16);
  if ((*((unsigned char *)this + 72) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v5 = *((int *)this + 17);
LABEL_14:
  uint64_t v7 = v3 ^ v1 ^ v4 ^ v5 ^ PBHashBytes();
  return v7 ^ PBHashBytes();
}

void CMMsl::ProxPDP::~ProxPDP(CMMsl::ProxPDP *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this, const CMMsl::ProxPDP *a2)
{
  *(void *)this = &unk_270644628;
  *(_DWORD *)(this + 48) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v5;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v8;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v9;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v10;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v11;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      return this;
    }
LABEL_22:
    char v13 = *((unsigned char *)a2 + 44);
    *(_WORD *)(this + 48) = v3 | 0x100;
    *(unsigned char *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  char v12 = *((unsigned char *)a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(this + 48) = v3;
  *(unsigned char *)(this + 45) = v12;
  if ((*((_WORD *)a2 + 24) & 0x100) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, const CMMsl::ProxPDP *a2)
{
  if ((const CMMsl::ProxPDP *)a1 != a2)
  {
    CMMsl::ProxPDP::ProxPDP((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v4) = *(unsigned char *)(a1 + 45);
    *(unsigned char *)(a1 + 45) = v15;
    char v15 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxPDP *a2, CMMsl::ProxPDP *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  int v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  int v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  int v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v4) = *((unsigned char *)this + 45);
  *((unsigned char *)this + 45) = *((unsigned char *)a2 + 45);
  *((unsigned char *)a2 + 45) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v4;
  return result;
}

float CMMsl::ProxPDP::ProxPDP(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644628;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return result;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::ProxPDP::ProxPDP((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v10 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v4) = *(unsigned char *)(a1 + 45);
    *(unsigned char *)(a1 + 45) = v15;
    char v15 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::ProxPDP::formatText(CMMsl::ProxPDP *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ambient", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineConfidence", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pocketFlag");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rxNtcC", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "scanFlags");
  if (*((_WORD *)this + 24)) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp");
LABEL_12:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::ProxPDP::readFrom(CMMsl::ProxPDP *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_73;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_72;
            }
            unint64_t v32 = v20++;
            char v33 = *(unsigned char *)(v21 + v32);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_71:
              unint64_t v2 = v32 + 1;
              goto LABEL_72;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_71;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_72;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_72:
        *((void *)this + 1) = v24;
        break;
      case 2u:
        *((_WORD *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_67;
      case 3u:
        *((_WORD *)this + 24) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_67;
      case 4u:
        *((_WORD *)this + 24) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_67;
      case 5u:
        *((_WORD *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_67;
      case 6u:
        *((_WORD *)this + 24) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_67;
      case 7u:
        *((_WORD *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_50;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_67;
      case 8u:
        *((_WORD *)this + 24) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_67:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_50:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 9u:
        *((_WORD *)this + 24) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 45) = v27;
        break;
      case 0xAu:
        *((_WORD *)this + 24) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 44) = v29;
        break;
      default:
        goto LABEL_19;
    }
LABEL_73:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::ProxPDP::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2);
    if ((*(_WORD *)(v3 + 48) & 0x100) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x100) == 0) {
    return this;
  }
LABEL_21:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::ProxPDP::hash_value(CMMsl::ProxPDP *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
LABEL_27:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_28:
    uint64_t v6 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v8 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_12;
    }
LABEL_30:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_31:
    uint64_t v12 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_18;
    }
LABEL_32:
    uint64_t v14 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 24) & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_34:
    uint64_t v17 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_25;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
  }
  uint64_t v2 = *((void *)this + 1);
  if ((v1 & 8) == 0) {
    goto LABEL_27;
  }
LABEL_3:
  float v3 = *((float *)this + 6);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_6:
  float v5 = *((float *)this + 8);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_9:
  float v7 = *((float *)this + 7);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_12:
  float v9 = *((float *)this + 4);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_15:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_32;
  }
LABEL_18:
  float v13 = *((float *)this + 5);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_21:
  float v15 = *((float *)this + 10);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x200) == 0) {
    goto LABEL_34;
  }
LABEL_24:
  uint64_t v17 = *((unsigned __int8 *)this + 45);
  if ((*((_WORD *)this + 24) & 0x100) == 0) {
    goto LABEL_35;
  }
LABEL_25:
  uint64_t v18 = *((unsigned __int8 *)this + 44);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
}

void CMMsl::RawAudio::~RawAudio(CMMsl::RawAudio *this)
{
  *(void *)this = &unk_270644660;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RawAudio::~RawAudio(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::RawAudio *CMMsl::RawAudio::RawAudio(char **this, char **a2)
{
  *this = (char *)&unk_270644660;
  this[1] = 0;
  float v3 = this + 1;
  this[2] = 0;
  this[3] = 0;
  if (this != a2) {
    sub_2572C75B4(v3, a2[1], a2[2], (a2[2] - a2[1]) >> 2);
  }
  return (CMMsl::RawAudio *)this;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, char **a2)
{
  if ((char **)a1 != a2)
  {
    CMMsl::RawAudio::RawAudio(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::RawAudio *a2, CMMsl::RawAudio *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

void *CMMsl::RawAudio::RawAudio(void *a1, uint64_t a2)
{
  *a1 = &unk_270644660;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_2572C7560((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

{
  *a1 = &unk_270644660;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_2572C7560((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v8 = &unk_270644660;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v10 = v6;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RawAudio::formatText(CMMsl::RawAudio *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "volts");
  }
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::RawAudio::readFrom(CMMsl::RawAudio *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v32 = v10++ > 8;
        if (v32) {
          goto LABEL_67;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        if ((v11 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
          {
            uint64_t v18 = (char *)*((void *)this + 2);
            do
            {
              unint64_t v19 = *((void *)this + 3);
              if ((unint64_t)v18 >= v19)
              {
                unint64_t v20 = (char *)*((void *)this + 1);
                uint64_t v21 = (v18 - v20) >> 2;
                unint64_t v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 62) {
                  goto LABEL_115;
                }
                uint64_t v23 = v19 - (void)v20;
                if (v23 >> 1 > v22) {
                  unint64_t v22 = v23 >> 1;
                }
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v24 = v22;
                }
                if (v24)
                {
                  unint64_t v24 = (unint64_t)sub_2572C76F0(v24);
                  unint64_t v20 = (char *)*((void *)this + 1);
                  uint64_t v18 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v25 = 0;
                }
                int v26 = (_DWORD *)(v24 + 4 * v21);
                *int v26 = 0;
                BOOL v27 = (char *)(v26 + 1);
                while (v18 != v20)
                {
                  int v28 = *((_DWORD *)v18 - 1);
                  v18 -= 4;
                  *--int v26 = v28;
                }
                *((void *)this + 1) = v26;
                *((void *)this + 2) = v27;
                *((void *)this + 3) = v24 + 4 * v25;
                if (v20) {
                  operator delete(v20);
                }
                uint64_t v18 = v27;
              }
              else
              {
                *(_DWORD *)uint64_t v18 = 0;
                v18 += 4;
              }
              *((void *)this + 2) = v18;
              unint64_t v30 = *((void *)a2 + 1);
              unint64_t v29 = *((void *)a2 + 2);
              uint64_t v31 = *(void *)a2;
              BOOL v32 = v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v29;
              if (!v32)
              {
                char v38 = 0;
                unsigned int v39 = 0;
                uint64_t v40 = 0;
                while (1)
                {
                  unint64_t v41 = v30 + 1;
                  *((void *)a2 + 1) = v30 + 1;
                  char v42 = *(unsigned char *)(v31 + v30);
                  v40 |= (unint64_t)(v42 & 0x7F) << v38;
                  if ((v42 & 0x80) == 0) {
                    goto LABEL_64;
                  }
                  v38 += 7;
                  unint64_t v30 = v41;
                  BOOL v32 = v39++ > 8;
                  if (v32)
                  {
                    LODWORD(v40) = 0;
                    goto LABEL_64;
                  }
                }
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v40 = 0;
              if (v29 <= v30) {
                uint64_t v35 = *((void *)a2 + 1);
              }
              else {
                uint64_t v35 = *((void *)a2 + 2);
              }
              while (1)
              {
                if (v35 == v30)
                {
                  *((unsigned char *)a2 + 24) = 1;
                  *((_DWORD *)v18 - 1) = 0;
                  goto LABEL_84;
                }
                unint64_t v36 = v30++;
                char v37 = *(unsigned char *)(v31 + v36);
                *((void *)a2 + 1) = v30;
                v40 |= (unint64_t)(v37 & 0x7F) << v33;
                if ((v37 & 0x80) == 0) {
                  break;
                }
                v33 += 7;
                BOOL v32 = v34++ > 8;
                if (v32)
                {
                  LODWORD(v40) = 0;
                  goto LABEL_63;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v40) = 0;
              }
LABEL_63:
              unint64_t v41 = v36 + 1;
LABEL_64:
              *((_DWORD *)v18 - 1) = v40;
            }
            while (v41 < v29 && !*((unsigned char *)a2 + 24));
          }
LABEL_84:
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v45 = (char *)*((void *)this + 2);
          unint64_t v44 = *((void *)this + 3);
          if ((unint64_t)v45 >= v44)
          {
            unint64_t v47 = (char *)*((void *)this + 1);
            uint64_t v48 = (v45 - v47) >> 2;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62) {
LABEL_115:
            }
              sub_2570AFD0C();
            uint64_t v50 = v44 - (void)v47;
            if (v50 >> 1 > v49) {
              unint64_t v49 = v50 >> 1;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              unint64_t v51 = (unint64_t)sub_2572C76F0(v51);
              unint64_t v47 = (char *)*((void *)this + 1);
              unint64_t v45 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v52 = 0;
            }
            unint64_t v53 = (_DWORD *)(v51 + 4 * v48);
            *unint64_t v53 = 0;
            uint64_t v46 = v53 + 1;
            while (v45 != v47)
            {
              int v54 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--unint64_t v53 = v54;
            }
            *((void *)this + 1) = v53;
            *((void *)this + 2) = v46;
            *((void *)this + 3) = v51 + 4 * v52;
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v45 = 0;
            uint64_t v46 = v45 + 4;
          }
          *((void *)this + 2) = v46;
          unint64_t v55 = *((void *)a2 + 1);
          unint64_t v56 = *((void *)a2 + 2);
          uint64_t v57 = *(void *)a2;
          char v58 = 0;
          unsigned int v59 = 0;
          if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v56)
          {
            uint64_t v63 = 0;
            if (v56 <= v55) {
              unint64_t v56 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v56 == v55)
              {
                LODWORD(v63) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_110;
              }
              unint64_t v61 = v55 + 1;
              char v62 = *(unsigned char *)(v57 + v55);
              *((void *)a2 + 1) = v61;
              v63 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0) {
                break;
              }
              v58 += 7;
              unint64_t v55 = v61;
              BOOL v32 = v59++ > 8;
              if (v32)
              {
LABEL_106:
                LODWORD(v63) = 0;
                goto LABEL_110;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v63) = 0;
            }
          }
          else
          {
            uint64_t v63 = 0;
            while (1)
            {
              unint64_t v64 = v55 + 1;
              *((void *)a2 + 1) = v55 + 1;
              char v65 = *(unsigned char *)(v57 + v55);
              v63 |= (unint64_t)(v65 & 0x7F) << v58;
              if ((v65 & 0x80) == 0) {
                break;
              }
              v58 += 7;
              unint64_t v55 = v64;
              BOOL v32 = v59++ > 8;
              if (v32) {
                goto LABEL_106;
              }
            }
          }
LABEL_110:
          *(v46 - 1) = v63;
        }
      }
      else
      {
LABEL_67:
        if ((PB::Reader::skip(a2) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v16;
      v11 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v32 = v15++ > 8;
      if (v32) {
        goto LABEL_67;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RawAudio::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  for (uint64_t i = *(void *)(this + 16); v2 != i; this = PB::Writer::writeVarInt(a2))
    v2 += 4;
  return this;
}

uint64_t CMMsl::RawAudio::hash_value(CMMsl::RawAudio *this)
{
  return PBHashBytes();
}

void CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(CMMsl::RelDMInSystemConfig *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_270644698;
  *((void *)this + 1) = 0;
  if (v2) {
    sub_2572C6E48(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t this, const CMMsl::RelDMInSystemConfig *a2)
{
  *(void *)this = &unk_270644698;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, const CMMsl::RelDMInSystemConfig *a2)
{
  if ((const CMMsl::RelDMInSystemConfig *)a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelDMInSystemConfig *a2, CMMsl::RelDMInSystemConfig *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644698;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_2572C6E48(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::formatText(CMMsl::RelDMInSystemConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "value", *((double *)this + 2));
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RelDMInSystemConfig::readFrom(CMMsl::RelDMInSystemConfig *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v20);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelDMInSystemConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v4 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v4);
  }
  return this;
}

unint64_t CMMsl::RelDMInSystemConfig::hash_value(CMMsl::RelDMInSystemConfig *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = sub_2572C6F9C(v2);
  }
  if (*((unsigned char *)this + 24))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
  }
  return *(void *)&v3 ^ v2;
}

void CMMsl::RelativeDeviceMotionComplexTransition::~RelativeDeviceMotionComplexTransition(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t this, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  *(void *)this = &unk_2706446D0;
  *(void *)(this + 188) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    uint64_t v3 = 1;
    *(void *)(this + 188) = 1;
    *(void *)(this + 8) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 188);
    if ((v2 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x800000uLL;
    *(void *)(this + 188) = v3;
    *(_DWORD *)(this + 104) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000uLL;
    *(void *)(this + 188) = v3;
    *(_DWORD *)(this + 108) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 112) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 24) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v9 = *((_DWORD *)a2 + 7);
  v3 |= 0x10uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 28) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v10 = *((_DWORD *)a2 + 8);
  v3 |= 0x20uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 32) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v11 = *((_DWORD *)a2 + 33);
  v3 |= 0x40000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 132) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 48) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x200000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 96) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v14 = *((_DWORD *)a2 + 4);
  v3 |= 2uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 16) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v15 = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 116) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v16 = *((_DWORD *)a2 + 30);
  v3 |= 0x8000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 120) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v17 = *((_DWORD *)a2 + 31);
  v3 |= 0x10000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 124) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x40uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 36) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x80uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 40) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 44) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v21 = *((_DWORD *)a2 + 34);
  v3 |= 0x80000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 136) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x400uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 52) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v23 = *((_DWORD *)a2 + 25);
  v3 |= 0x400000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 100) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v24 = *((_DWORD *)a2 + 5);
  v3 |= 4uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 20) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v25 = *((_DWORD *)a2 + 37);
  v3 |= 0x400000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 148) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  int v26 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 68) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v27 = *((_DWORD *)a2 + 40);
  v3 |= 0x2000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 160) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v28 = *((_DWORD *)a2 + 20);
  v3 |= 0x20000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 80) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v29 = *((_DWORD *)a2 + 38);
  v3 |= 0x800000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 152) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v30 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 72) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v31 = *((_DWORD *)a2 + 41);
  v3 |= 0x4000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 164) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v32 = *((_DWORD *)a2 + 21);
  v3 |= 0x40000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 84) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  int v33 = *((_DWORD *)a2 + 39);
  v3 |= 0x1000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 156) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  int v34 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 76) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  int v35 = *((_DWORD *)a2 + 42);
  v3 |= 0x8000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v35;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  int v36 = *((_DWORD *)a2 + 22);
  v3 |= 0x80000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 88) = v36;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  char v37 = *((unsigned char *)a2 + 183);
  v3 |= 0x200000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 183) = v37;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  int v38 = *((_DWORD *)a2 + 14);
  v3 |= 0x800uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 56) = v38;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  int v39 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 60) = v39;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  char v40 = *((unsigned char *)a2 + 182);
  v3 |= 0x100000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 182) = v40;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  char v41 = *((unsigned char *)a2 + 184);
  v3 |= 0x400000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 184) = v41;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  int v42 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 64) = v42;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  int v43 = *((_DWORD *)a2 + 35);
  v3 |= 0x100000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 140) = v43;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_94;
  }
LABEL_93:
  int v44 = *((_DWORD *)a2 + 36);
  v3 |= 0x200000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 144) = v44;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_95;
  }
LABEL_94:
  char v45 = *((unsigned char *)a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 186) = v45;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_96;
  }
LABEL_95:
  char v46 = *((unsigned char *)a2 + 181);
  v3 |= 0x80000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 181) = v46;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_97;
  }
LABEL_96:
  char v47 = *((unsigned char *)a2 + 180);
  v3 |= 0x40000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 180) = v47;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_98;
  }
LABEL_97:
  int v48 = *((_DWORD *)a2 + 32);
  v3 |= 0x20000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 128) = v48;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_99;
  }
LABEL_98:
  int v49 = *((_DWORD *)a2 + 44);
  v3 |= 0x20000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v49;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_100;
  }
LABEL_99:
  int v50 = *((_DWORD *)a2 + 43);
  v3 |= 0x10000000000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v50;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_101;
  }
LABEL_100:
  int v51 = *((_DWORD *)a2 + 23);
  v3 |= 0x100000uLL;
  *(void *)(this + 188) = v3;
  *(_DWORD *)(this + 92) = v51;
  uint64_t v2 = *(void *)((char *)a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0) {
      return this;
    }
LABEL_102:
    char v53 = *((unsigned char *)a2 + 187);
    *(void *)(this + 188) = v3 | 0x2000000000000;
    *(unsigned char *)(this + 187) = v53;
    return this;
  }
LABEL_101:
  char v52 = *((unsigned char *)a2 + 185);
  v3 |= 0x800000000000uLL;
  *(void *)(this + 188) = v3;
  *(unsigned char *)(this + 185) = v52;
  if ((*(void *)((unsigned char *)a2 + 188) & 0x2000000000000) != 0) {
    goto LABEL_102;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionComplexTransition *a2, CMMsl::RelativeDeviceMotionComplexTransition *a3)
{
  uint64_t v3 = *(void *)((char *)this + 188);
  *(void *)((char *)this + 188) = *(void *)((char *)a2 + 188);
  *(void *)((char *)a2 + 188) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 183);
  *((unsigned char *)this + 183) = *((unsigned char *)a2 + 183);
  *((unsigned char *)a2 + 183) = v3;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 182);
  *((unsigned char *)this + 182) = *((unsigned char *)a2 + 182);
  *((unsigned char *)a2 + 182) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 184);
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((unsigned char *)a2 + 184) = v3;
  LODWORD(v3) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 186);
  *((unsigned char *)this + 186) = *((unsigned char *)a2 + 186);
  *((unsigned char *)a2 + 186) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 181);
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  *((unsigned char *)a2 + 181) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  *((unsigned char *)a2 + 180) = v3;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v4;
  float result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 185);
  *((unsigned char *)this + 185) = *((unsigned char *)a2 + 185);
  *((unsigned char *)a2 + 185) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 187);
  *((unsigned char *)this + 187) = *((unsigned char *)a2 + 187);
  *((unsigned char *)a2 + 187) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706446D0;
  *(void *)(a1 + 188) = *(void *)(a2 + 188);
  *(void *)(a2 + 188) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 183) = *(unsigned char *)(a2 + 183);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 182) = *(unsigned char *)(a2 + 182);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 186) = *(unsigned char *)(a2 + 186);
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  float result = *(float *)(a2 + 172);
  *(float *)(a1 + 172) = result;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(unsigned char *)(a1 + 187) = *(unsigned char *)(a2 + 187);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::formatText(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "auxHorizontalRotation", *((float *)this + 4));
    uint64_t v5 = *(void *)((char *)this + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_57;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxHorizontalTranslation", *((float *)this + 5));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "auxOmegaInertial_X", *((float *)this + 6));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Y", *((float *)this + 7));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Z", *((float *)this + 8));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_X", *((float *)this + 9));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Y", *((float *)this + 10));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Z", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "auxVerticalRotation", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "auxVerticalTranslation", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "blockHeadTurnFalsePositive");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "bodyTurnDetectionVerticalRotationSrc", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "bodyTurnMaximaBaseline", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "counterBodyTurnAboveBaseline");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "hasRecentHeadTurn");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarity", *((float *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityBaseline", *((float *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityThreshold", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarity", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityBaseline", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityThreshold", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "inBodyTurn");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "inComplexTransitionState");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "inStrongBodyTurn");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "longBodyTurnCounter");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "longBodyTurnState");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "overrideHeadTurn");
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "srcHorizontalRotation", *((float *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "srcHorizontalTranslation", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "srcOmegaInertial_X", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Y", *((float *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Z", *((float *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_X", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Y", *((float *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Z", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "srcVertToHrzRotRatio", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "srcVerticalRotation", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "srcVerticalTranslation", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "srcYawRotationExtremaBuffer", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "srcYawRotationMaximaBaseline", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "verticalRotationSimilarity", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityBaseline", *((float *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityThreshold", *((float *)this + 39));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarity", *((float *)this + 40));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityBaseline", *((float *)this + 41));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityThreshold", *((float *)this + 42));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "yawRateSimilarity1000ms", *((float *)this + 43));
  uint64_t v5 = *(void *)((char *)this + 188);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x2000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "yawRateSimilarity200ms", *((float *)this + 44));
  if ((*(void *)((unsigned char *)this + 188) & 0x2000000000000) != 0) {
LABEL_51:
  }
    PB::TextFormatter::format(a2, "yawRateSimilarityState");
LABEL_52:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::readFrom(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
      break;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      int v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(void *)((char *)this + 188) |= 1uLL;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v20);
        uint64_t v21 = *((void *)a2 + 1) + 8;
        goto LABEL_205;
      case 2u:
        *(void *)((char *)this + 188) |= 0x800000uLL;
        unint64_t v22 = *((void *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v22);
        goto LABEL_204;
      case 3u:
        *(void *)((char *)this + 188) |= 0x1000000uLL;
        unint64_t v23 = *((void *)a2 + 1);
        if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v23);
        goto LABEL_204;
      case 4u:
        *(void *)((char *)this + 188) |= 0x2000000uLL;
        unint64_t v24 = *((void *)a2 + 1);
        if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v24);
        goto LABEL_204;
      case 5u:
        *(void *)((char *)this + 188) |= 8uLL;
        unint64_t v25 = *((void *)a2 + 1);
        if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v25);
        goto LABEL_204;
      case 6u:
        *(void *)((char *)this + 188) |= 0x10uLL;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v26);
        goto LABEL_204;
      case 7u:
        *(void *)((char *)this + 188) |= 0x20uLL;
        unint64_t v27 = *((void *)a2 + 1);
        if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v27);
        goto LABEL_204;
      case 8u:
        *(void *)((char *)this + 188) |= 0x40000000uLL;
        unint64_t v28 = *((void *)a2 + 1);
        if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v28);
        goto LABEL_204;
      case 9u:
        *(void *)((char *)this + 188) |= 0x200uLL;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v29);
        goto LABEL_204;
      case 0xAu:
        *(void *)((char *)this + 188) |= 0x200000uLL;
        unint64_t v30 = *((void *)a2 + 1);
        if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v30);
        goto LABEL_204;
      case 0xBu:
        *(void *)((char *)this + 188) |= 2uLL;
        unint64_t v31 = *((void *)a2 + 1);
        if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v31);
        goto LABEL_204;
      case 0xCu:
        *(void *)((char *)this + 188) |= 0x4000000uLL;
        unint64_t v32 = *((void *)a2 + 1);
        if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v32);
        goto LABEL_204;
      case 0xDu:
        *(void *)((char *)this + 188) |= 0x8000000uLL;
        unint64_t v33 = *((void *)a2 + 1);
        if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v33);
        goto LABEL_204;
      case 0xEu:
        *(void *)((char *)this + 188) |= 0x10000000uLL;
        unint64_t v34 = *((void *)a2 + 1);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v34);
        goto LABEL_204;
      case 0xFu:
        *(void *)((char *)this + 188) |= 0x40uLL;
        unint64_t v35 = *((void *)a2 + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v35);
        goto LABEL_204;
      case 0x10u:
        *(void *)((char *)this + 188) |= 0x80uLL;
        unint64_t v36 = *((void *)a2 + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v36);
        goto LABEL_204;
      case 0x11u:
        *(void *)((char *)this + 188) |= 0x100uLL;
        unint64_t v37 = *((void *)a2 + 1);
        if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v37);
        goto LABEL_204;
      case 0x12u:
        *(void *)((char *)this + 188) |= 0x80000000uLL;
        unint64_t v38 = *((void *)a2 + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v38);
        goto LABEL_204;
      case 0x13u:
        *(void *)((char *)this + 188) |= 0x400uLL;
        unint64_t v39 = *((void *)a2 + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v39);
        goto LABEL_204;
      case 0x14u:
        *(void *)((char *)this + 188) |= 0x400000uLL;
        unint64_t v40 = *((void *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v40);
        goto LABEL_204;
      case 0x15u:
        *(void *)((char *)this + 188) |= 4uLL;
        unint64_t v41 = *((void *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v41);
        goto LABEL_204;
      case 0x16u:
        *(void *)((char *)this + 188) |= 0x400000000uLL;
        unint64_t v42 = *((void *)a2 + 1);
        if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v42);
        goto LABEL_204;
      case 0x17u:
        *(void *)((char *)this + 188) |= 0x4000uLL;
        unint64_t v43 = *((void *)a2 + 1);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v43);
        goto LABEL_204;
      case 0x18u:
        *(void *)((char *)this + 188) |= 0x2000000000uLL;
        unint64_t v44 = *((void *)a2 + 1);
        if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v44);
        goto LABEL_204;
      case 0x19u:
        *(void *)((char *)this + 188) |= 0x20000uLL;
        unint64_t v45 = *((void *)a2 + 1);
        if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v45);
        goto LABEL_204;
      case 0x1Au:
        *(void *)((char *)this + 188) |= 0x800000000uLL;
        unint64_t v46 = *((void *)a2 + 1);
        if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v46);
        goto LABEL_204;
      case 0x1Bu:
        *(void *)((char *)this + 188) |= 0x8000uLL;
        unint64_t v47 = *((void *)a2 + 1);
        if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v47);
        goto LABEL_204;
      case 0x1Cu:
        *(void *)((char *)this + 188) |= 0x4000000000uLL;
        unint64_t v48 = *((void *)a2 + 1);
        if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v48);
        goto LABEL_204;
      case 0x1Du:
        *(void *)((char *)this + 188) |= 0x40000uLL;
        unint64_t v49 = *((void *)a2 + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v49);
        goto LABEL_204;
      case 0x1Eu:
        *(void *)((char *)this + 188) |= 0x1000000000uLL;
        unint64_t v50 = *((void *)a2 + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v50);
        goto LABEL_204;
      case 0x1Fu:
        *(void *)((char *)this + 188) |= 0x10000uLL;
        unint64_t v51 = *((void *)a2 + 1);
        if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v51);
        goto LABEL_204;
      case 0x20u:
        *(void *)((char *)this + 188) |= 0x8000000000uLL;
        unint64_t v52 = *((void *)a2 + 1);
        if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v52);
        goto LABEL_204;
      case 0x21u:
        *(void *)((char *)this + 188) |= 0x80000uLL;
        unint64_t v53 = *((void *)a2 + 1);
        if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v53);
        goto LABEL_204;
      case 0x22u:
        *(void *)((char *)this + 188) |= 0x200000000000uLL;
        unint64_t v54 = *((void *)a2 + 1);
        if (v54 >= *((void *)a2 + 2))
        {
          BOOL v57 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v55 = v54 + 1;
          int v56 = *(unsigned __int8 *)(*(void *)a2 + v54);
          *((void *)a2 + 1) = v55;
          BOOL v57 = v56 != 0;
        }
        *((unsigned char *)this + 183) = v57;
        goto LABEL_206;
      case 0x23u:
        *(void *)((char *)this + 188) |= 0x800uLL;
        unint64_t v58 = *((void *)a2 + 1);
        if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v58);
        goto LABEL_204;
      case 0x24u:
        *(void *)((char *)this + 188) |= 0x1000uLL;
        unint64_t v59 = *((void *)a2 + 1);
        if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v59);
        goto LABEL_204;
      case 0x25u:
        *(void *)((char *)this + 188) |= 0x100000000000uLL;
        unint64_t v60 = *((void *)a2 + 1);
        if (v60 >= *((void *)a2 + 2))
        {
          BOOL v63 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v61 = v60 + 1;
          int v62 = *(unsigned __int8 *)(*(void *)a2 + v60);
          *((void *)a2 + 1) = v61;
          BOOL v63 = v62 != 0;
        }
        *((unsigned char *)this + 182) = v63;
        goto LABEL_206;
      case 0x26u:
        *(void *)((char *)this + 188) |= 0x400000000000uLL;
        unint64_t v64 = *((void *)a2 + 1);
        if (v64 >= *((void *)a2 + 2))
        {
          BOOL v67 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v65 = v64 + 1;
          int v66 = *(unsigned __int8 *)(*(void *)a2 + v64);
          *((void *)a2 + 1) = v65;
          BOOL v67 = v66 != 0;
        }
        *((unsigned char *)this + 184) = v67;
        goto LABEL_206;
      case 0x27u:
        *(void *)((char *)this + 188) |= 0x2000uLL;
        unint64_t v68 = *((void *)a2 + 1);
        unint64_t v69 = *((void *)a2 + 2);
        uint64_t v70 = *(void *)a2;
        if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
        {
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v73 = 0;
          do
          {
            unint64_t v74 = v68 + 1;
            *((void *)a2 + 1) = v68 + 1;
            char v75 = *(unsigned char *)(v70 + v68);
            v73 |= (unint64_t)(v75 & 0x7F) << v71;
            if ((v75 & 0x80) == 0) {
              goto LABEL_214;
            }
            v71 += 7;
            unint64_t v68 = v74;
            BOOL v14 = v72++ > 8;
          }
          while (!v14);
LABEL_185:
          LODWORD(v73) = 0;
          goto LABEL_214;
        }
        char v109 = 0;
        unsigned int v110 = 0;
        uint64_t v73 = 0;
        if (v69 <= v68) {
          unint64_t v69 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v69 == v68)
          {
            LODWORD(v73) = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v111 = v68 + 1;
            char v112 = *(unsigned char *)(v70 + v68);
            *((void *)a2 + 1) = v111;
            v73 |= (unint64_t)(v112 & 0x7F) << v109;
            if (v112 < 0)
            {
              v109 += 7;
              unint64_t v68 = v111;
              BOOL v14 = v110++ > 8;
              if (v14) {
                goto LABEL_185;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v73) = 0;
            }
          }
          break;
        }
LABEL_214:
        *((_DWORD *)this + 16) = v73;
        goto LABEL_206;
      case 0x28u:
        *(void *)((char *)this + 188) |= 0x100000000uLL;
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v76);
        goto LABEL_204;
      case 0x29u:
        *(void *)((char *)this + 188) |= 0x200000000uLL;
        unint64_t v77 = *((void *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v77);
        goto LABEL_204;
      case 0x2Au:
        *(void *)((char *)this + 188) |= 0x1000000000000uLL;
        unint64_t v78 = *((void *)a2 + 1);
        if (v78 >= *((void *)a2 + 2))
        {
          BOOL v81 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v79 = v78 + 1;
          int v80 = *(unsigned __int8 *)(*(void *)a2 + v78);
          *((void *)a2 + 1) = v79;
          BOOL v81 = v80 != 0;
        }
        *((unsigned char *)this + 186) = v81;
        goto LABEL_206;
      case 0x2Bu:
        *(void *)((char *)this + 188) |= 0x80000000000uLL;
        unint64_t v82 = *((void *)a2 + 1);
        if (v82 >= *((void *)a2 + 2))
        {
          BOOL v85 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v83 = v82 + 1;
          int v84 = *(unsigned __int8 *)(*(void *)a2 + v82);
          *((void *)a2 + 1) = v83;
          BOOL v85 = v84 != 0;
        }
        *((unsigned char *)this + 181) = v85;
        goto LABEL_206;
      case 0x2Cu:
        *(void *)((char *)this + 188) |= 0x40000000000uLL;
        unint64_t v86 = *((void *)a2 + 1);
        if (v86 >= *((void *)a2 + 2))
        {
          BOOL v89 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v87 = v86 + 1;
          int v88 = *(unsigned __int8 *)(*(void *)a2 + v86);
          *((void *)a2 + 1) = v87;
          BOOL v89 = v88 != 0;
        }
        *((unsigned char *)this + 180) = v89;
        goto LABEL_206;
      case 0x2Du:
        *(void *)((char *)this + 188) |= 0x20000000uLL;
        unint64_t v90 = *((void *)a2 + 1);
        if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v90);
        goto LABEL_204;
      case 0x2Eu:
        *(void *)((char *)this + 188) |= 0x20000000000uLL;
        unint64_t v91 = *((void *)a2 + 1);
        if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)a2 + 2)) {
          goto LABEL_161;
        }
        *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v91);
        goto LABEL_204;
      case 0x2Fu:
        *(void *)((char *)this + 188) |= 0x10000000000uLL;
        unint64_t v92 = *((void *)a2 + 1);
        if (v92 <= 0xFFFFFFFFFFFFFFFBLL && v92 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v92);
LABEL_204:
          uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_205:
          *((void *)a2 + 1) = v21;
        }
        else
        {
LABEL_161:
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_206;
      case 0x30u:
        *(void *)((char *)this + 188) |= 0x100000uLL;
        unint64_t v93 = *((void *)a2 + 1);
        unint64_t v94 = *((void *)a2 + 2);
        uint64_t v95 = *(void *)a2;
        if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
        {
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v98 = 0;
          do
          {
            unint64_t v99 = v93 + 1;
            *((void *)a2 + 1) = v93 + 1;
            char v100 = *(unsigned char *)(v95 + v93);
            v98 |= (unint64_t)(v100 & 0x7F) << v96;
            if ((v100 & 0x80) == 0) {
              goto LABEL_218;
            }
            v96 += 7;
            unint64_t v93 = v99;
            BOOL v14 = v97++ > 8;
          }
          while (!v14);
LABEL_198:
          LODWORD(v98) = 0;
          goto LABEL_218;
        }
        char v113 = 0;
        unsigned int v114 = 0;
        uint64_t v98 = 0;
        if (v94 <= v93) {
          unint64_t v94 = *((void *)a2 + 1);
        }
        break;
      case 0x31u:
        *(void *)((char *)this + 188) |= 0x800000000000uLL;
        unint64_t v101 = *((void *)a2 + 1);
        if (v101 >= *((void *)a2 + 2))
        {
          BOOL v104 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v102 = v101 + 1;
          int v103 = *(unsigned __int8 *)(*(void *)a2 + v101);
          *((void *)a2 + 1) = v102;
          BOOL v104 = v103 != 0;
        }
        *((unsigned char *)this + 185) = v104;
        goto LABEL_206;
      case 0x32u:
        *(void *)((char *)this + 188) |= 0x2000000000000uLL;
        unint64_t v105 = *((void *)a2 + 1);
        if (v105 >= *((void *)a2 + 2))
        {
          BOOL v108 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v106 = v105 + 1;
          int v107 = *(unsigned __int8 *)(*(void *)a2 + v105);
          *((void *)a2 + 1) = v106;
          BOOL v108 = v107 != 0;
        }
        *((unsigned char *)this + 187) = v108;
        goto LABEL_206;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v94 == v93)
      {
        LODWORD(v98) = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_218;
      }
      unint64_t v115 = v93 + 1;
      char v116 = *(unsigned char *)(v95 + v93);
      *((void *)a2 + 1) = v115;
      v98 |= (unint64_t)(v116 & 0x7F) << v113;
      if ((v116 & 0x80) == 0) {
        break;
      }
      v113 += 7;
      unint64_t v93 = v115;
      BOOL v14 = v114++ > 8;
      if (v14) {
        goto LABEL_198;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      LODWORD(v98) = 0;
    }
LABEL_218:
    *((_DWORD *)this + 23) = v98;
LABEL_206:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v15 = 0;
  unsigned int v16 = 0;
  unint64_t v11 = 0;
  if (v2 > v3) {
    unint64_t v3 = v2;
  }
  do
  {
    if (v3 == v2)
    {
      int v4 = 1;
      *((unsigned char *)a2 + 24) = 1;
      return v4 == 0;
    }
    unint64_t v17 = v2 + 1;
    char v18 = *(unsigned char *)(v8 + v2);
    *((void *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0) {
      goto LABEL_21;
    }
    v15 += 7;
    unint64_t v2 = v17;
    BOOL v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  uint64_t result = PB::Reader::skip(a2);
  if (result) {
    goto LABEL_206;
  }
  return result;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 188);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    uint64_t v4 = *(void *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 164));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 176));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 172));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_50;
    }
LABEL_100:
    this = PB::Writer::write(a2);
    if ((*(void *)(v3 + 188) & 0x2000000000000) == 0) {
      return this;
    }
    goto LABEL_101;
  }
LABEL_99:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000000) != 0) {
    goto LABEL_100;
  }
LABEL_50:
  if ((v4 & 0x2000000000000) == 0) {
    return this;
  }
LABEL_101:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::hash_value(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  uint64_t v1 = *(void *)((char *)this + 188);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_3;
    }
LABEL_137:
    uint64_t v114 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_6;
    }
LABEL_138:
    uint64_t v113 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_9;
    }
LABEL_139:
    uint64_t v112 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
LABEL_140:
    uint64_t v111 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_141:
    uint64_t v110 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_18;
    }
LABEL_142:
    uint64_t v109 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_21;
    }
LABEL_143:
    uint64_t v108 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_144:
    uint64_t v107 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_27;
    }
LABEL_145:
    uint64_t v106 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_30;
    }
LABEL_146:
    uint64_t v105 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_33;
    }
LABEL_147:
    uint64_t v104 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_36;
    }
LABEL_148:
    uint64_t v103 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_39;
    }
LABEL_149:
    uint64_t v102 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_42;
    }
LABEL_150:
    uint64_t v101 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_45;
    }
LABEL_151:
    uint64_t v100 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_48;
    }
LABEL_152:
    uint64_t v99 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_51;
    }
LABEL_153:
    uint64_t v98 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_54;
    }
LABEL_154:
    uint64_t v97 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_57;
    }
LABEL_155:
    uint64_t v96 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_60;
    }
LABEL_156:
    uint64_t v95 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_63;
    }
LABEL_157:
    uint64_t v94 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_66;
    }
LABEL_158:
    uint64_t v93 = 0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_69;
    }
LABEL_159:
    uint64_t v92 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_72;
    }
LABEL_160:
    uint64_t v50 = 0;
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_76;
    }
LABEL_161:
    uint64_t v52 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_80;
    }
LABEL_162:
    uint64_t v54 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_84;
    }
LABEL_163:
    uint64_t v56 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_87;
    }
LABEL_164:
    uint64_t v58 = 0;
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_90;
    }
LABEL_165:
    uint64_t v60 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_93;
    }
LABEL_166:
    uint64_t v62 = 0;
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_96;
    }
LABEL_167:
    uint64_t v64 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_99;
    }
LABEL_168:
    uint64_t v66 = 0;
    if ((v1 & 0x200000000000) != 0) {
      goto LABEL_102;
    }
    goto LABEL_169;
  }
  if (*((double *)this + 1) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 1);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_137;
  }
LABEL_3:
  float v3 = *((float *)this + 26);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v114 = v4;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_138;
  }
LABEL_6:
  float v5 = *((float *)this + 27);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v113 = v6;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_139;
  }
LABEL_9:
  float v7 = *((float *)this + 28);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v112 = v8;
  if ((v1 & 8) == 0) {
    goto LABEL_140;
  }
LABEL_12:
  float v9 = *((float *)this + 6);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v111 = v10;
  if ((v1 & 0x10) == 0) {
    goto LABEL_141;
  }
LABEL_15:
  float v11 = *((float *)this + 7);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v110 = v12;
  if ((v1 & 0x20) == 0) {
    goto LABEL_142;
  }
LABEL_18:
  float v13 = *((float *)this + 8);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v109 = v14;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_143;
  }
LABEL_21:
  float v15 = *((float *)this + 33);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v108 = v16;
  if ((v1 & 0x200) == 0) {
    goto LABEL_144;
  }
LABEL_24:
  float v17 = *((float *)this + 12);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v107 = v18;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_145;
  }
LABEL_27:
  float v19 = *((float *)this + 24);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v106 = v20;
  if ((v1 & 2) == 0) {
    goto LABEL_146;
  }
LABEL_30:
  float v21 = *((float *)this + 4);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v105 = v22;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_147;
  }
LABEL_33:
  float v23 = *((float *)this + 29);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v104 = v24;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_148;
  }
LABEL_36:
  float v25 = *((float *)this + 30);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v103 = v26;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_149;
  }
LABEL_39:
  float v27 = *((float *)this + 31);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  uint64_t v102 = v28;
  if ((v1 & 0x40) == 0) {
    goto LABEL_150;
  }
LABEL_42:
  float v29 = *((float *)this + 9);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  uint64_t v101 = v30;
  if ((v1 & 0x80) == 0) {
    goto LABEL_151;
  }
LABEL_45:
  float v31 = *((float *)this + 10);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  uint64_t v100 = v32;
  if ((v1 & 0x100) == 0) {
    goto LABEL_152;
  }
LABEL_48:
  float v33 = *((float *)this + 11);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  uint64_t v99 = v34;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_153;
  }
LABEL_51:
  float v35 = *((float *)this + 34);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  uint64_t v98 = v36;
  if ((v1 & 0x400) == 0) {
    goto LABEL_154;
  }
LABEL_54:
  float v37 = *((float *)this + 13);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  uint64_t v97 = v38;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_155;
  }
LABEL_57:
  float v39 = *((float *)this + 25);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  uint64_t v96 = v40;
  if ((v1 & 4) == 0) {
    goto LABEL_156;
  }
LABEL_60:
  float v41 = *((float *)this + 5);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  uint64_t v95 = v42;
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_157;
  }
LABEL_63:
  float v43 = *((float *)this + 37);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  uint64_t v94 = v44;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_158;
  }
LABEL_66:
  float v45 = *((float *)this + 17);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  uint64_t v93 = v46;
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_159;
  }
LABEL_69:
  float v47 = *((float *)this + 40);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  uint64_t v92 = v48;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_160;
  }
LABEL_72:
  float v49 = *((float *)this + 20);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = LODWORD(v49);
  }
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_161;
  }
LABEL_76:
  float v51 = *((float *)this + 38);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = LODWORD(v51);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_162;
  }
LABEL_80:
  float v53 = *((float *)this + 18);
  if (v53 == 0.0) {
    uint64_t v54 = 0;
  }
  else {
    uint64_t v54 = LODWORD(v53);
  }
  if ((v1 & 0x4000000000) == 0) {
    goto LABEL_163;
  }
LABEL_84:
  float v55 = *((float *)this + 41);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_164;
  }
LABEL_87:
  float v57 = *((float *)this + 21);
  uint64_t v58 = LODWORD(v57);
  if (v57 == 0.0) {
    uint64_t v58 = 0;
  }
  if ((v1 & 0x1000000000) == 0) {
    goto LABEL_165;
  }
LABEL_90:
  float v59 = *((float *)this + 39);
  uint64_t v60 = LODWORD(v59);
  if (v59 == 0.0) {
    uint64_t v60 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_166;
  }
LABEL_93:
  float v61 = *((float *)this + 19);
  uint64_t v62 = LODWORD(v61);
  if (v61 == 0.0) {
    uint64_t v62 = 0;
  }
  if ((v1 & 0x8000000000) == 0) {
    goto LABEL_167;
  }
LABEL_96:
  float v63 = *((float *)this + 42);
  uint64_t v64 = LODWORD(v63);
  if (v63 == 0.0) {
    uint64_t v64 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_168;
  }
LABEL_99:
  float v65 = *((float *)this + 22);
  uint64_t v66 = LODWORD(v65);
  if (v65 == 0.0) {
    uint64_t v66 = 0;
  }
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_102:
    uint64_t v67 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x800) != 0) {
      goto LABEL_103;
    }
LABEL_170:
    uint64_t v69 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_106;
    }
LABEL_171:
    uint64_t v71 = 0;
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_109;
    }
    goto LABEL_172;
  }
LABEL_169:
  uint64_t v67 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_170;
  }
LABEL_103:
  float v68 = *((float *)this + 14);
  uint64_t v69 = LODWORD(v68);
  if (v68 == 0.0) {
    uint64_t v69 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_171;
  }
LABEL_106:
  float v70 = *((float *)this + 15);
  uint64_t v71 = LODWORD(v70);
  if (v70 == 0.0) {
    uint64_t v71 = 0;
  }
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_109:
    uint64_t v72 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x400000000000) != 0) {
      goto LABEL_110;
    }
    goto LABEL_173;
  }
LABEL_172:
  uint64_t v72 = 0;
  if ((v1 & 0x400000000000) != 0)
  {
LABEL_110:
    uint64_t v73 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_111;
    }
    goto LABEL_174;
  }
LABEL_173:
  uint64_t v73 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_111:
    uint64_t v74 = *((unsigned int *)this + 16);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_112;
    }
LABEL_175:
    uint64_t v76 = 0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_115;
    }
LABEL_176:
    uint64_t v78 = 0;
    if ((v1 & 0x1000000000000) != 0) {
      goto LABEL_118;
    }
    goto LABEL_177;
  }
LABEL_174:
  uint64_t v74 = 0;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_175;
  }
LABEL_112:
  float v75 = *((float *)this + 35);
  uint64_t v76 = LODWORD(v75);
  if (v75 == 0.0) {
    uint64_t v76 = 0;
  }
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_176;
  }
LABEL_115:
  float v77 = *((float *)this + 36);
  uint64_t v78 = LODWORD(v77);
  if (v77 == 0.0) {
    uint64_t v78 = 0;
  }
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_118:
    uint64_t v79 = *((unsigned __int8 *)this + 186);
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_119;
    }
    goto LABEL_178;
  }
LABEL_177:
  uint64_t v79 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_119:
    uint64_t v80 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_120;
    }
    goto LABEL_179;
  }
LABEL_178:
  uint64_t v80 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_120:
    uint64_t v81 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_121;
    }
LABEL_180:
    uint64_t v83 = 0;
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_124;
    }
LABEL_181:
    uint64_t v85 = 0;
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_127;
    }
LABEL_182:
    uint64_t v87 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_130;
    }
    goto LABEL_183;
  }
LABEL_179:
  uint64_t v81 = 0;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_180;
  }
LABEL_121:
  float v82 = *((float *)this + 32);
  uint64_t v83 = LODWORD(v82);
  if (v82 == 0.0) {
    uint64_t v83 = 0;
  }
  if ((v1 & 0x20000000000) == 0) {
    goto LABEL_181;
  }
LABEL_124:
  float v84 = *((float *)this + 44);
  uint64_t v85 = LODWORD(v84);
  if (v84 == 0.0) {
    uint64_t v85 = 0;
  }
  if ((v1 & 0x10000000000) == 0) {
    goto LABEL_182;
  }
LABEL_127:
  float v86 = *((float *)this + 43);
  uint64_t v87 = LODWORD(v86);
  if (v86 == 0.0) {
    uint64_t v87 = 0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_130:
    uint64_t v88 = *((unsigned int *)this + 23);
    if ((v1 & 0x800000000000) != 0) {
      goto LABEL_131;
    }
LABEL_184:
    uint64_t v89 = 0;
    if ((v1 & 0x2000000000000) != 0) {
      goto LABEL_132;
    }
LABEL_185:
    uint64_t v90 = 0;
    return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
  }
LABEL_183:
  uint64_t v88 = 0;
  if ((v1 & 0x800000000000) == 0) {
    goto LABEL_184;
  }
LABEL_131:
  uint64_t v89 = *((unsigned __int8 *)this + 185);
  if ((v1 & 0x2000000000000) == 0) {
    goto LABEL_185;
  }
LABEL_132:
  uint64_t v90 = *((unsigned __int8 *)this + 187);
  return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
}

void CMMsl::RelativeDeviceMotionCorrelatedMotion::~RelativeDeviceMotionCorrelatedMotion(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  *(void *)this = &unk_270644708;
  *(_DWORD *)(this + 128) = 0;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    int v3 = 4;
    *(_DWORD *)(this + 128) = 4;
    *(void *)(this + 24) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 25);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 100) = v5;
    int v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x80u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 48) = v6;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 96) = v7;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 44) = v8;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 76) = v9;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 72) = v10;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v11 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 68) = v11;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v12 = *((_DWORD *)a2 + 28);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 112) = v12;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v13 = *((unsigned char *)a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 124) = v13;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v14 = *((unsigned char *)a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 120) = v14;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v15 = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 60) = v15;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v16 = *((unsigned char *)a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 123) = v16;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v17 = *((unsigned char *)a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 125) = v17;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v18 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 92) = v18;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 40) = v19;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v20 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 88) = v20;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v21 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 36) = v21;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 52) = v22;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v23;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v24 = *((unsigned char *)a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 126) = v24;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 84) = v25;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v26 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 32) = v26;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v27 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 56) = v27;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v28 = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v28;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v29 = *((unsigned char *)a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 121) = v29;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v30 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 64) = v30;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v31 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 8) = v31;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v32 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 16) = v32;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v33 = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v33;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0) {
      return this;
    }
LABEL_66:
    char v35 = *((unsigned char *)a2 + 122);
    *(_DWORD *)(this + 128) = v3 | 0x8000000;
    *(unsigned char *)(this + 122) = v35;
    return this;
  }
LABEL_65:
  int v34 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 80) = v34;
  if ((*((_DWORD *)a2 + 32) & 0x8000000) != 0) {
    goto LABEL_66;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionCorrelatedMotion *a2, CMMsl::RelativeDeviceMotionCorrelatedMotion *a3)
{
  int v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 124);
  *((unsigned char *)this + 124) = *((unsigned char *)a2 + 124);
  *((unsigned char *)a2 + 124) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 123);
  *((unsigned char *)this + 123) = *((unsigned char *)a2 + 123);
  *((unsigned char *)a2 + 123) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 125);
  *((unsigned char *)this + 125) = *((unsigned char *)a2 + 125);
  *((unsigned char *)a2 + 125) = v3;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 126);
  *((unsigned char *)this + 126) = *((unsigned char *)a2 + 126);
  *((unsigned char *)a2 + 126) = v3;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 121);
  *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
  *((unsigned char *)a2 + 121) = v3;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  float result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  LOBYTE(v3) = *((unsigned char *)this + 122);
  *((unsigned char *)this + 122) = *((unsigned char *)a2 + 122);
  *((unsigned char *)a2 + 122) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644708;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
  *(unsigned char *)(a1 + 125) = *(unsigned char *)(a2 + 125);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 126) = *(unsigned char *)(a2 + 126);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  float result = *(float *)(a2 + 80);
  *(float *)(a1 + 80) = result;
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::formatText(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "auxAvgOmegaAroundGrav2s", *((float *)this + 8));
    int v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravLong", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravShort", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "auxAvgOmegaLong", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "auxAvgOmegaShort", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "auxHistoricalOmegaStdMax", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "auxOverSrcYawDiffSum", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "dotRotGrav", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "hasUnCorrelatedSrcMotion");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "inHeadTurnState");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "inLikelySlowBodyTurnPed");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isInCorrelatedActivity");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isInCorrelatedMotion");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "lastHeadTurnStartTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "lastHeadTurnStopTime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "lastHeadTurnYawRadians", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "likelyOnGymMachine");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "relOmegaMeanLong", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "relOmegaVarLong", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "relOmegaVarShort", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "srcAccumulatedYaw4s", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGrav2s", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravLong", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravShort", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "srcAvgOmegaLong", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "srcAvgOmegaShort", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "srcAvgYawBufferSum", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "srcHistoricalOmegaStdMax", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "srcRotationAxisAlignment", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "srcYawBufferLongStd", *((float *)this + 29));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "steadyStatePedestrian");
  if ((*((_DWORD *)this + 32) & 4) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
LABEL_34:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::readFrom(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_130;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_101;
      case 2u:
        *((_DWORD *)this + 32) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 3u:
        *((_DWORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 4u:
        *((_DWORD *)this + 32) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 5u:
        *((_DWORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 6u:
        *((_DWORD *)this + 32) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 7u:
        *((_DWORD *)this + 32) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 8u:
        *((_DWORD *)this + 32) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 9u:
        *((_DWORD *)this + 32) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0xAu:
        *((_DWORD *)this + 32) |= 0x20000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 124) = v21;
        break;
      case 0xBu:
        *((_DWORD *)this + 32) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 120) = v23;
        break;
      case 0xCu:
        *((_DWORD *)this + 32) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0xDu:
        *((_DWORD *)this + 32) |= 0x10000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 123) = v25;
        break;
      case 0xEu:
        *((_DWORD *)this + 32) |= 0x40000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 125) = v27;
        break;
      case 0xFu:
        *((_DWORD *)this + 32) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x10u:
        *((_DWORD *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x11u:
        *((_DWORD *)this + 32) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x12u:
        *((_DWORD *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x13u:
        *((_DWORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x14u:
        *((_DWORD *)this + 32) |= 0x400000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x15u:
        *((_DWORD *)this + 32) |= 0x80000000;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 126) = v29;
        break;
      case 0x16u:
        *((_DWORD *)this + 32) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x17u:
        *((_DWORD *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x18u:
        *((_DWORD *)this + 32) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x19u:
        *((_DWORD *)this + 32) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x1Au:
        *((_DWORD *)this + 32) |= 0x4000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 121) = v31;
        break;
      case 0x1Bu:
        *((_DWORD *)this + 32) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x1Cu:
        *((_DWORD *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_101;
      case 0x1Du:
        *((_DWORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_101:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_129;
      case 0x1Eu:
        *((_DWORD *)this + 32) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_112;
        }
        *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_128;
      case 0x1Fu:
        *((_DWORD *)this + 32) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
        {
LABEL_112:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_128:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_129:
          *((void *)a2 + 1) = v2;
        }
        break;
      case 0x20u:
        *((_DWORD *)this + 32) |= 0x8000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v33 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v33 = v32 != 0;
        }
        *((unsigned char *)this + 122) = v33;
        break;
      default:
        goto LABEL_19;
    }
LABEL_130:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 128);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    this = PB::Writer::write(a2, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 128) & 0x8000000) == 0) {
      return this;
    }
    goto LABEL_65;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x8000000) == 0) {
    return this;
  }
LABEL_65:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  int v1 = *((_DWORD *)this + 32);
  if ((v1 & 4) == 0)
  {
    double v57 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
LABEL_101:
    uint64_t v3 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_7;
    }
LABEL_102:
    uint64_t v61 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_10;
    }
LABEL_103:
    uint64_t v60 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_13;
    }
LABEL_104:
    uint64_t v59 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_16;
    }
LABEL_105:
    uint64_t v58 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_19;
    }
LABEL_106:
    uint64_t v13 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_23;
    }
LABEL_107:
    uint64_t v15 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_27;
    }
LABEL_108:
    uint64_t v17 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_109;
  }
  double v55 = *((double *)this + 3);
  if (v55 == 0.0) {
    double v55 = 0.0;
  }
  double v57 = v55;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_101;
  }
LABEL_3:
  float v2 = *((float *)this + 25);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = LODWORD(v2);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_102;
  }
LABEL_7:
  float v4 = *((float *)this + 12);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v61 = v5;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_103;
  }
LABEL_10:
  float v6 = *((float *)this + 24);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v60 = v7;
  if ((v1 & 0x40) == 0) {
    goto LABEL_104;
  }
LABEL_13:
  float v8 = *((float *)this + 11);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v59 = v9;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_105;
  }
LABEL_16:
  float v10 = *((float *)this + 19);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v58 = v11;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_106;
  }
LABEL_19:
  float v12 = *((float *)this + 18);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = LODWORD(v12);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_107;
  }
LABEL_23:
  float v14 = *((float *)this + 17);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = LODWORD(v14);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_108;
  }
LABEL_27:
  float v16 = *((float *)this + 28);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20000000) != 0)
  {
LABEL_31:
    uint64_t v18 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v18 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_32:
    uint64_t v19 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400) != 0) {
      goto LABEL_33;
    }
LABEL_111:
    uint64_t v21 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_112;
  }
LABEL_110:
  uint64_t v19 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_111;
  }
LABEL_33:
  float v20 = *((float *)this + 15);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x10000000) != 0)
  {
LABEL_37:
    uint64_t v22 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v22 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_38:
    uint64_t v23 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_39;
    }
LABEL_114:
    uint64_t v25 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_43;
    }
LABEL_115:
    uint64_t v27 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_47;
    }
LABEL_116:
    uint64_t v29 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_51;
    }
LABEL_117:
    uint64_t v31 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_55;
    }
LABEL_118:
    uint64_t v33 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_59;
    }
LABEL_119:
    uint64_t v35 = 0;
    if (v1 < 0) {
      goto LABEL_63;
    }
    goto LABEL_120;
  }
LABEL_113:
  uint64_t v23 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_114;
  }
LABEL_39:
  float v24 = *((float *)this + 23);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_115;
  }
LABEL_43:
  float v26 = *((float *)this + 10);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_116;
  }
LABEL_47:
  float v28 = *((float *)this + 22);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = LODWORD(v28);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_117;
  }
LABEL_51:
  float v30 = *((float *)this + 9);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_118;
  }
LABEL_55:
  float v32 = *((float *)this + 13);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_119;
  }
LABEL_59:
  float v34 = *((float *)this + 27);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = LODWORD(v34);
  }
  if (v1 < 0)
  {
LABEL_63:
    uint64_t v36 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_64;
    }
LABEL_121:
    uint64_t v38 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_68;
    }
LABEL_122:
    uint64_t v40 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_72;
    }
LABEL_123:
    uint64_t v42 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_76;
    }
LABEL_124:
    uint64_t v44 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_80;
    }
    goto LABEL_125;
  }
LABEL_120:
  uint64_t v36 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_121;
  }
LABEL_64:
  float v37 = *((float *)this + 21);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = LODWORD(v37);
  }
  if ((v1 & 8) == 0) {
    goto LABEL_122;
  }
LABEL_68:
  float v39 = *((float *)this + 8);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_123;
  }
LABEL_72:
  float v41 = *((float *)this + 14);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_124;
  }
LABEL_76:
  float v43 = *((float *)this + 26);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x4000000) != 0)
  {
LABEL_80:
    uint64_t v45 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x800) != 0) {
      goto LABEL_81;
    }
LABEL_126:
    uint64_t v47 = 0;
    if (v1) {
      goto LABEL_85;
    }
LABEL_127:
    double v48 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_88;
    }
LABEL_128:
    double v49 = 0.0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_91;
    }
LABEL_129:
    uint64_t v51 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_94;
    }
    goto LABEL_130;
  }
LABEL_125:
  uint64_t v45 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_126;
  }
LABEL_81:
  float v46 = *((float *)this + 16);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = LODWORD(v46);
  }
  if ((v1 & 1) == 0) {
    goto LABEL_127;
  }
LABEL_85:
  double v48 = *((double *)this + 1);
  if (v48 == 0.0) {
    double v48 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_128;
  }
LABEL_88:
  double v49 = *((double *)this + 2);
  if (v49 == 0.0) {
    double v49 = 0.0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_129;
  }
LABEL_91:
  float v50 = *((float *)this + 29);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_94:
    float v52 = *((float *)this + 20);
    uint64_t v53 = LODWORD(v52);
    if (v52 == 0.0) {
      uint64_t v53 = 0;
    }
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_97;
    }
LABEL_131:
    uint64_t v54 = 0;
    return v3 ^ *(void *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(void *)&v48 ^ *(void *)&v49 ^ v51 ^ v53 ^ v54;
  }
LABEL_130:
  uint64_t v53 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_131;
  }
LABEL_97:
  uint64_t v54 = *((unsigned __int8 *)this + 122);
  return v3 ^ *(void *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(void *)&v48 ^ *(void *)&v49 ^ v51 ^ v53 ^ v54;
}

void CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  *(void *)this = &unk_270644740;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(this);
  JUMPOUT(0x25A2B2850);
}

CMMsl::RelativeDeviceMotionInternal *CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  *(void *)this = &unk_270644740;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (void *)((char *)this + 8);
  *((_DWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    int v6 = 2;
    *((_DWORD *)this + 41) = 2;
    *((void *)this + 8) = v7;
    int v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x800u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 27) = v8;
    int v5 = *((_DWORD *)a2 + 41);
  }
LABEL_6:
  if ((v5 & 0x1000) != 0)
  {
    int v13 = *((_DWORD *)a2 + 28);
    v6 |= 0x1000u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 28) = v13;
    int v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v14 = *((_DWORD *)a2 + 29);
  v6 |= 0x2000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 29) = v14;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v15 = *((_DWORD *)a2 + 30);
  v6 |= 0x4000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 30) = v15;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v16 = *((_DWORD *)a2 + 31);
  v6 |= 0x8000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 31) = v16;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v17 = *((_DWORD *)a2 + 32);
  v6 |= 0x10000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 32) = v17;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v18 = *((_DWORD *)a2 + 35);
  v6 |= 0x80000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 35) = v18;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v19 = *((_DWORD *)a2 + 36);
  v6 |= 0x100000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 36) = v19;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v20 = *((_DWORD *)a2 + 37);
  v6 |= 0x200000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 37) = v20;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v21 = *((_DWORD *)a2 + 24);
  v6 |= 0x100u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 24) = v21;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v22 = *((_DWORD *)a2 + 25);
  v6 |= 0x200u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 25) = v22;
  int v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_51:
  int v23 = *((_DWORD *)a2 + 26);
  v6 |= 0x400u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 26) = v23;
  if ((*((_DWORD *)a2 + 41) & 0x80) != 0)
  {
LABEL_18:
    int v9 = *((_DWORD *)a2 + 23);
    *((_DWORD *)this + 41) = v6 | 0x80;
    *((_DWORD *)this + 23) = v9;
  }
LABEL_19:
  if (this != a2)
  {
    sub_2572C75B4((void *)this + 4, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_2572C75B4(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x8000000) != 0)
  {
    char v24 = *((unsigned char *)a2 + 157);
    *((_DWORD *)this + 41) |= 0x8000000u;
    *((unsigned char *)this + 157) = v24;
    int v10 = *((_DWORD *)a2 + 41);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_55;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }
  char v25 = *((unsigned char *)a2 + 152);
  *((_DWORD *)this + 41) |= 0x400000u;
  *((unsigned char *)this + 152) = v25;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v26 = *((unsigned char *)a2 + 154);
  *((_DWORD *)this + 41) |= 0x1000000u;
  *((unsigned char *)this + 154) = v26;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v27 = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 41) |= 0x10u;
  *((_DWORD *)this + 20) = v27;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v28 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 41) |= 8u;
  *((_DWORD *)this + 19) = v28;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v29 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 41) |= 4u;
  *((_DWORD *)this + 18) = v29;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  char v30 = *((unsigned char *)a2 + 159);
  *((_DWORD *)this + 41) |= 0x20000000u;
  *((unsigned char *)this + 159) = v30;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v31 = *((unsigned char *)a2 + 161);
  *((_DWORD *)this + 41) |= 0x80000000;
  *((unsigned char *)this + 161) = v31;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x800000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20) == 0) {
      goto LABEL_31;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v32 = *((unsigned char *)a2 + 153);
  *((_DWORD *)this + 41) |= 0x800000u;
  *((unsigned char *)this + 153) = v32;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v33 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 41) |= 0x20u;
  *((_DWORD *)this + 21) = v33;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000) == 0)
  {
LABEL_32:
    if ((v10 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v34 = *((_DWORD *)a2 + 34);
  *((_DWORD *)this + 41) |= 0x40000u;
  *((_DWORD *)this + 34) = v34;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v35 = *((unsigned char *)a2 + 158);
  *((_DWORD *)this + 41) |= 0x10000000u;
  *((unsigned char *)this + 158) = v35;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v36 = *((unsigned char *)a2 + 156);
  *((_DWORD *)this + 41) |= 0x4000000u;
  *((unsigned char *)this + 156) = v36;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v10 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_67;
  }
LABEL_66:
  char v37 = *((unsigned char *)a2 + 160);
  *((_DWORD *)this + 41) |= 0x40000000u;
  *((unsigned char *)this + 160) = v37;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v38 = *((void *)a2 + 7);
  *((_DWORD *)this + 41) |= 1u;
  *((void *)this + 7) = v38;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_38;
    }
LABEL_69:
    char v40 = *((unsigned char *)a2 + 155);
    *((_DWORD *)this + 41) |= 0x2000000u;
    *((unsigned char *)this + 155) = v40;
    if ((*((_DWORD *)a2 + 41) & 0x20000) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_68:
  int v39 = *((_DWORD *)a2 + 22);
  *((_DWORD *)this + 41) |= 0x40u;
  *((_DWORD *)this + 22) = v39;
  int v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x2000000) != 0) {
    goto LABEL_69;
  }
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    int v11 = *((_DWORD *)a2 + 33);
    *((_DWORD *)this + 41) |= 0x20000u;
    *((_DWORD *)this + 33) = v11;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionInternal *a2, CMMsl::RelativeDeviceMotionInternal *a3)
{
  int v3 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 157);
  *((unsigned char *)this + 157) = *((unsigned char *)a2 + 157);
  *((unsigned char *)a2 + 157) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 152);
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  *((unsigned char *)a2 + 152) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 154);
  *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
  *((unsigned char *)a2 + 154) = v10;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v10) = *((unsigned char *)this + 159);
  *((unsigned char *)this + 159) = *((unsigned char *)a2 + 159);
  *((unsigned char *)a2 + 159) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 161);
  *((unsigned char *)this + 161) = *((unsigned char *)a2 + 161);
  *((unsigned char *)a2 + 161) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 153);
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  *((unsigned char *)a2 + 153) = v10;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v10) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 158);
  *((unsigned char *)this + 158) = *((unsigned char *)a2 + 158);
  *((unsigned char *)a2 + 158) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 156);
  *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
  *((unsigned char *)a2 + 156) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v10;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  LODWORD(v10) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 155);
  *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
  *((unsigned char *)a2 + 155) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  return result;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644740;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a2 + 164) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_2572C7560(a1 + 32, (__n128 *)(a2 + 32));
  sub_2572C7560(a1 + 8, (__n128 *)(a2 + 8));
  *(unsigned char *)(a1 + 157) = *(unsigned char *)(a2 + 157);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 159) = *(unsigned char *)(a2 + 159);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 158) = *(unsigned char *)(a2 + 158);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  return a1;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::formatText(CMMsl::RelativeDeviceMotionInternal *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(a2, "btz");
    int v5 = *((_DWORD *)this + 41);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btzDisturbanceDuration", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "btzIsCurrentlyQuiescent");
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "btzQuiescentDurationLoose", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "btzQuiescentDurationStrict", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "btzStaticPoseDuration", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "centeredBoresight");
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "centeredBoresightInHighDynamics");
  int v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "clientMode");
  if ((*((_DWORD *)this + 41) & 0x4000000) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "inComplexTransitionState");
LABEL_12:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "noiseVariance", v8);
  }
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(a2, "pinnedBoresight");
    int v9 = *((_DWORD *)this + 41);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_55;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "qHat_W", *((float *)this + 23));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "qHat_X", *((float *)this + 24));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "qHat_Y", *((float *)this + 25));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "qHat_Z", *((float *)this + 26));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rBoresight_X", *((float *)this + 27));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rBoresight_Y", *((float *)this + 28));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rBoresight_Z", *((float *)this + 29));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rHat_X", *((float *)this + 30));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rHat_Y", *((float *)this + 31));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rHat_Z", *((float *)this + 32));
  int v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "requestingCamera");
  if (*((_DWORD *)this + 41)) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
LABEL_28:
  uint64_t v10 = (float *)*((void *)this + 4);
  int v11 = (float *)*((void *)this + 5);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(a2, "stateVariance", v12);
  }
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
    int v13 = *((_DWORD *)this + 41);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_68;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(a2, "tracking1IMU");
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "trackingBehavior");
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "trackingDisabled");
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "trackingScheme");
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "useRelaxedQuiescenceBounds");
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vHat_X", *((float *)this + 35));
  int v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x100000) == 0)
  {
LABEL_38:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vHat_Y", *((float *)this + 36));
  if ((*((_DWORD *)this + 41) & 0x200000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(a2, "vHat_Z", *((float *)this + 37));
LABEL_40:
  return MEMORY[0x270F587F0](a2);
}

BOOL CMMsl::RelativeDeviceMotionInternal::readFrom(CMMsl::RelativeDeviceMotionInternal *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_21:
      int v19 = v11 & 7;
      if (v19 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 41) |= 2u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v20);
          goto LABEL_151;
        case 2u:
          *((_DWORD *)this + 41) |= 0x800u;
          unint64_t v21 = *((void *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v21);
          goto LABEL_259;
        case 3u:
          *((_DWORD *)this + 41) |= 0x1000u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v22);
          goto LABEL_259;
        case 4u:
          *((_DWORD *)this + 41) |= 0x2000u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v23);
          goto LABEL_259;
        case 5u:
          *((_DWORD *)this + 41) |= 0x4000u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v24);
          goto LABEL_259;
        case 6u:
          *((_DWORD *)this + 41) |= 0x8000u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_259;
        case 7u:
          *((_DWORD *)this + 41) |= 0x10000u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v26);
          goto LABEL_259;
        case 8u:
          *((_DWORD *)this + 41) |= 0x80000u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v27);
          goto LABEL_259;
        case 9u:
          *((_DWORD *)this + 41) |= 0x100000u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v28);
          goto LABEL_259;
        case 0xAu:
          *((_DWORD *)this + 41) |= 0x200000u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v29);
          goto LABEL_259;
        case 0xBu:
          *((_DWORD *)this + 41) |= 0x100u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v30);
          goto LABEL_259;
        case 0xCu:
          *((_DWORD *)this + 41) |= 0x200u;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v31);
          goto LABEL_259;
        case 0xDu:
          *((_DWORD *)this + 41) |= 0x400u;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v32);
          goto LABEL_259;
        case 0xEu:
          *((_DWORD *)this + 41) |= 0x80u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v33);
          goto LABEL_259;
        case 0xFu:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v34 = *((void *)a2 + 1);
            unint64_t v35 = *((void *)a2 + 2);
            while (v34 < v35 && !*((unsigned char *)a2 + 24))
            {
              char v37 = (char *)*((void *)this + 5);
              unint64_t v36 = *((void *)this + 6);
              if ((unint64_t)v37 >= v36)
              {
                int v39 = (char *)*((void *)this + 4);
                uint64_t v40 = (v37 - v39) >> 2;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
                  goto LABEL_270;
                }
                uint64_t v42 = v36 - (void)v39;
                if (v42 >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                BOOL v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v43) {
                  unint64_t v44 = v41;
                }
                if (v44)
                {
                  unint64_t v44 = (unint64_t)sub_2572C76F0(v44);
                  int v39 = (char *)*((void *)this + 4);
                  char v37 = (char *)*((void *)this + 5);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                float v46 = (_DWORD *)(v44 + 4 * v40);
                *float v46 = 0;
                uint64_t v38 = v46 + 1;
                while (v37 != v39)
                {
                  int v47 = *((_DWORD *)v37 - 1);
                  v37 -= 4;
                  *--float v46 = v47;
                }
                *((void *)this + 4) = v46;
                *((void *)this + 5) = v38;
                *((void *)this + 6) = v44 + 4 * v45;
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                *(_DWORD *)char v37 = 0;
                uint64_t v38 = v37 + 4;
              }
              *((void *)this + 5) = v38;
              unint64_t v48 = *((void *)a2 + 1);
              if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
                goto LABEL_213;
              }
              *(v38 - 1) = *(_DWORD *)(*(void *)a2 + v48);
              unint64_t v35 = *((void *)a2 + 2);
              unint64_t v34 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v34;
            }
            goto LABEL_214;
          }
          char v134 = (char *)*((void *)this + 5);
          unint64_t v133 = *((void *)this + 6);
          if ((unint64_t)v134 >= v133)
          {
            unsigned int v150 = (char *)*((void *)this + 4);
            uint64_t v151 = (v134 - v150) >> 2;
            unint64_t v152 = v151 + 1;
            if ((unint64_t)(v151 + 1) >> 62) {
              goto LABEL_270;
            }
            uint64_t v153 = v133 - (void)v150;
            if (v153 >> 1 > v152) {
              unint64_t v152 = v153 >> 1;
            }
            BOOL v43 = (unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v43) {
              unint64_t v154 = v152;
            }
            if (v154)
            {
              unint64_t v154 = (unint64_t)sub_2572C76F0(v154);
              unsigned int v150 = (char *)*((void *)this + 4);
              char v134 = (char *)*((void *)this + 5);
            }
            else
            {
              uint64_t v155 = 0;
            }
            unint64_t v162 = (_DWORD *)(v154 + 4 * v151);
            *unint64_t v162 = 0;
            unint64_t v135 = v162 + 1;
            while (v134 != v150)
            {
              int v163 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *--unint64_t v162 = v163;
            }
            *((void *)this + 4) = v162;
            *((void *)this + 5) = v135;
            *((void *)this + 6) = v154 + 4 * v155;
            if (v150) {
              operator delete(v150);
            }
          }
          else
          {
            *(_DWORD *)char v134 = 0;
            unint64_t v135 = v134 + 4;
          }
          *((void *)this + 5) = v135;
          goto LABEL_255;
        case 0x10u:
          if (v19 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v49 = *((void *)a2 + 1);
            unint64_t v50 = *((void *)a2 + 2);
            while (v49 < v50 && !*((unsigned char *)a2 + 24))
            {
              float v52 = (char *)*((void *)this + 2);
              unint64_t v51 = *((void *)this + 3);
              if ((unint64_t)v52 >= v51)
              {
                uint64_t v54 = (char *)*((void *)this + 1);
                uint64_t v55 = (v52 - v54) >> 2;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62) {
                  goto LABEL_270;
                }
                uint64_t v57 = v51 - (void)v54;
                if (v57 >> 1 > v56) {
                  unint64_t v56 = v57 >> 1;
                }
                BOOL v43 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v43) {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  unint64_t v58 = (unint64_t)sub_2572C76F0(v58);
                  uint64_t v54 = (char *)*((void *)this + 1);
                  float v52 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v59 = 0;
                }
                uint64_t v60 = (_DWORD *)(v58 + 4 * v55);
                *uint64_t v60 = 0;
                uint64_t v53 = v60 + 1;
                while (v52 != v54)
                {
                  int v61 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *--uint64_t v60 = v61;
                }
                *((void *)this + 1) = v60;
                *((void *)this + 2) = v53;
                *((void *)this + 3) = v58 + 4 * v59;
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(_DWORD *)float v52 = 0;
                uint64_t v53 = v52 + 4;
              }
              *((void *)this + 2) = v53;
              unint64_t v62 = *((void *)a2 + 1);
              if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)a2 + 2))
              {
LABEL_213:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v53 - 1) = *(_DWORD *)(*(void *)a2 + v62);
              unint64_t v50 = *((void *)a2 + 2);
              unint64_t v49 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v49;
            }
LABEL_214:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v137 = (char *)*((void *)this + 2);
            unint64_t v136 = *((void *)this + 3);
            if ((unint64_t)v137 >= v136)
            {
              uint64_t v156 = (char *)*((void *)this + 1);
              uint64_t v157 = (v137 - v156) >> 2;
              unint64_t v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62) {
LABEL_270:
              }
                sub_2570AFD0C();
              uint64_t v159 = v136 - (void)v156;
              if (v159 >> 1 > v158) {
                unint64_t v158 = v159 >> 1;
              }
              BOOL v43 = (unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v43) {
                unint64_t v160 = v158;
              }
              if (v160)
              {
                unint64_t v160 = (unint64_t)sub_2572C76F0(v160);
                uint64_t v156 = (char *)*((void *)this + 1);
                uint64_t v137 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v161 = 0;
              }
              unint64_t v164 = (_DWORD *)(v160 + 4 * v157);
              *unint64_t v164 = 0;
              unint64_t v135 = v164 + 1;
              while (v137 != v156)
              {
                int v165 = *((_DWORD *)v137 - 1);
                v137 -= 4;
                *--unint64_t v164 = v165;
              }
              *((void *)this + 1) = v164;
              *((void *)this + 2) = v135;
              *((void *)this + 3) = v160 + 4 * v161;
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v137 = 0;
              unint64_t v135 = v137 + 4;
            }
            *((void *)this + 2) = v135;
LABEL_255:
            unint64_t v166 = *((void *)a2 + 1);
            if (v166 <= 0xFFFFFFFFFFFFFFFBLL && v166 + 4 <= *((void *)a2 + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(void *)a2 + v166);
LABEL_259:
              uint64_t v112 = *((void *)a2 + 1) + 4;
LABEL_260:
              *((void *)a2 + 1) = v112;
            }
            else
            {
LABEL_257:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
          break;
        case 0x11u:
          *((_DWORD *)this + 41) |= 0x8000000u;
          unint64_t v63 = *((void *)a2 + 1);
          if (v63 >= *((void *)a2 + 2))
          {
            BOOL v66 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v64 = v63 + 1;
            int v65 = *(unsigned __int8 *)(*(void *)a2 + v63);
            *((void *)a2 + 1) = v64;
            BOOL v66 = v65 != 0;
          }
          *((unsigned char *)this + 157) = v66;
          goto LABEL_261;
        case 0x12u:
          *((_DWORD *)this + 41) |= 0x400000u;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 >= *((void *)a2 + 2))
          {
            BOOL v70 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v68 = v67 + 1;
            int v69 = *(unsigned __int8 *)(*(void *)a2 + v67);
            *((void *)a2 + 1) = v68;
            BOOL v70 = v69 != 0;
          }
          *((unsigned char *)this + 152) = v70;
          goto LABEL_261;
        case 0x13u:
          *((_DWORD *)this + 41) |= 0x1000000u;
          unint64_t v71 = *((void *)a2 + 1);
          if (v71 >= *((void *)a2 + 2))
          {
            BOOL v74 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v72 = v71 + 1;
            int v73 = *(unsigned __int8 *)(*(void *)a2 + v71);
            *((void *)a2 + 1) = v72;
            BOOL v74 = v73 != 0;
          }
          *((unsigned char *)this + 154) = v74;
          goto LABEL_261;
        case 0x14u:
          *((_DWORD *)this + 41) |= 0x10u;
          unint64_t v75 = *((void *)a2 + 1);
          if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v75);
          goto LABEL_259;
        case 0x15u:
          *((_DWORD *)this + 41) |= 8u;
          unint64_t v76 = *((void *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v76);
          goto LABEL_259;
        case 0x16u:
          *((_DWORD *)this + 41) |= 4u;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v77);
          goto LABEL_259;
        case 0x17u:
          *((_DWORD *)this + 41) |= 0x20000000u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 >= *((void *)a2 + 2))
          {
            BOOL v81 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v79 = v78 + 1;
            int v80 = *(unsigned __int8 *)(*(void *)a2 + v78);
            *((void *)a2 + 1) = v79;
            BOOL v81 = v80 != 0;
          }
          *((unsigned char *)this + 159) = v81;
          goto LABEL_261;
        case 0x18u:
          *((_DWORD *)this + 41) |= 0x80000000;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 >= *((void *)a2 + 2))
          {
            BOOL v85 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v83 = v82 + 1;
            int v84 = *(unsigned __int8 *)(*(void *)a2 + v82);
            *((void *)a2 + 1) = v83;
            BOOL v85 = v84 != 0;
          }
          *((unsigned char *)this + 161) = v85;
          goto LABEL_261;
        case 0x19u:
          *((_DWORD *)this + 41) |= 0x800000u;
          unint64_t v86 = *((void *)a2 + 1);
          if (v86 >= *((void *)a2 + 2))
          {
            BOOL v89 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v87 = v86 + 1;
            int v88 = *(unsigned __int8 *)(*(void *)a2 + v86);
            *((void *)a2 + 1) = v87;
            BOOL v89 = v88 != 0;
          }
          *((unsigned char *)this + 153) = v89;
          goto LABEL_261;
        case 0x1Au:
          *((_DWORD *)this + 41) |= 0x20u;
          unint64_t v90 = *((void *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v90);
          goto LABEL_259;
        case 0x1Bu:
          *((_DWORD *)this + 41) |= 0x40000u;
          unint64_t v91 = *((void *)a2 + 1);
          unint64_t v92 = *((void *)a2 + 2);
          uint64_t v93 = *(void *)a2;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            char v94 = 0;
            unsigned int v95 = 0;
            uint64_t v96 = 0;
            do
            {
              unint64_t v97 = v91 + 1;
              *((void *)a2 + 1) = v91 + 1;
              char v98 = *(unsigned char *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0) {
                goto LABEL_234;
              }
              v94 += 7;
              unint64_t v91 = v97;
              BOOL v14 = v95++ > 8;
            }
            while (!v14);
LABEL_190:
            LODWORD(v96) = 0;
            goto LABEL_234;
          }
          char v138 = 0;
          unsigned int v139 = 0;
          uint64_t v96 = 0;
          if (v92 <= v91) {
            unint64_t v92 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v140 = v91 + 1;
              char v141 = *(unsigned char *)(v93 + v91);
              *((void *)a2 + 1) = v140;
              v96 |= (unint64_t)(v141 & 0x7F) << v138;
              if (v141 < 0)
              {
                v138 += 7;
                unint64_t v91 = v140;
                BOOL v14 = v139++ > 8;
                if (v14) {
                  goto LABEL_190;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v96) = 0;
              }
            }
            break;
          }
LABEL_234:
          *((_DWORD *)this + 34) = v96;
          goto LABEL_261;
        case 0x1Cu:
          *((_DWORD *)this + 41) |= 0x10000000u;
          unint64_t v99 = *((void *)a2 + 1);
          if (v99 >= *((void *)a2 + 2))
          {
            BOOL v102 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v100 = v99 + 1;
            int v101 = *(unsigned __int8 *)(*(void *)a2 + v99);
            *((void *)a2 + 1) = v100;
            BOOL v102 = v101 != 0;
          }
          *((unsigned char *)this + 158) = v102;
          goto LABEL_261;
        case 0x1Du:
          *((_DWORD *)this + 41) |= 0x4000000u;
          unint64_t v103 = *((void *)a2 + 1);
          if (v103 >= *((void *)a2 + 2))
          {
            BOOL v106 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v104 = v103 + 1;
            int v105 = *(unsigned __int8 *)(*(void *)a2 + v103);
            *((void *)a2 + 1) = v104;
            BOOL v106 = v105 != 0;
          }
          *((unsigned char *)this + 156) = v106;
          goto LABEL_261;
        case 0x1Eu:
          *((_DWORD *)this + 41) |= 0x40000000u;
          unint64_t v107 = *((void *)a2 + 1);
          if (v107 >= *((void *)a2 + 2))
          {
            BOOL v110 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v108 = v107 + 1;
            int v109 = *(unsigned __int8 *)(*(void *)a2 + v107);
            *((void *)a2 + 1) = v108;
            BOOL v110 = v109 != 0;
          }
          *((unsigned char *)this + 160) = v110;
          goto LABEL_261;
        case 0x1Fu:
          *((_DWORD *)this + 41) |= 1u;
          unint64_t v111 = *((void *)a2 + 1);
          if (v111 > 0xFFFFFFFFFFFFFFF7 || v111 + 8 > *((void *)a2 + 2)) {
            goto LABEL_257;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v111);
LABEL_151:
          uint64_t v112 = *((void *)a2 + 1) + 8;
          goto LABEL_260;
        case 0x20u:
          *((_DWORD *)this + 41) |= 0x40u;
          unint64_t v113 = *((void *)a2 + 1);
          unint64_t v114 = *((void *)a2 + 2);
          uint64_t v115 = *(void *)a2;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            char v116 = 0;
            unsigned int v117 = 0;
            uint64_t v118 = 0;
            do
            {
              unint64_t v119 = v113 + 1;
              *((void *)a2 + 1) = v113 + 1;
              char v120 = *(unsigned char *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0) {
                goto LABEL_237;
              }
              v116 += 7;
              unint64_t v113 = v119;
              BOOL v14 = v117++ > 8;
            }
            while (!v14);
LABEL_203:
            LODWORD(v118) = 0;
            goto LABEL_237;
          }
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v118 = 0;
          if (v114 <= v113) {
            unint64_t v114 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v144 = v113 + 1;
              char v145 = *(unsigned char *)(v115 + v113);
              *((void *)a2 + 1) = v144;
              v118 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v113 = v144;
                BOOL v14 = v143++ > 8;
                if (v14) {
                  goto LABEL_203;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v118) = 0;
              }
            }
            break;
          }
LABEL_237:
          *((_DWORD *)this + 22) = v118;
          goto LABEL_261;
        case 0x21u:
          *((_DWORD *)this + 41) |= 0x2000000u;
          unint64_t v121 = *((void *)a2 + 1);
          if (v121 >= *((void *)a2 + 2))
          {
            BOOL v124 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v122 = v121 + 1;
            int v123 = *(unsigned __int8 *)(*(void *)a2 + v121);
            *((void *)a2 + 1) = v122;
            BOOL v124 = v123 != 0;
          }
          *((unsigned char *)this + 155) = v124;
          goto LABEL_261;
        case 0x22u:
          *((_DWORD *)this + 41) |= 0x20000u;
          unint64_t v125 = *((void *)a2 + 1);
          unint64_t v126 = *((void *)a2 + 2);
          uint64_t v127 = *(void *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)a2 + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_240;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_212:
            LODWORD(v130) = 0;
            goto LABEL_240;
          }
          char v146 = 0;
          unsigned int v147 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v148 = v125 + 1;
              char v149 = *(unsigned char *)(v127 + v125);
              *((void *)a2 + 1) = v148;
              v130 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                unint64_t v125 = v148;
                BOOL v14 = v147++ > 8;
                if (v14) {
                  goto LABEL_212;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_240:
          *((_DWORD *)this + 33) = v130;
          goto LABEL_261;
        default:
          goto LABEL_19;
      }
      goto LABEL_261;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_21;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    if ((PB::Reader::skip(a2) & 1) == 0) {
      return 0;
    }
LABEL_261:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
}

uint64_t CMMsl::RelativeDeviceMotionInternal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 164);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64));
    int v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 148));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
LABEL_53:
    this = PB::Writer::write(a2, *(float *)(v3 + 104));
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0) {
    goto LABEL_53;
  }
LABEL_14:
  if ((v4 & 0x80) != 0) {
LABEL_15:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 92));
LABEL_16:
  int v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7);
  }
  uint64_t v8 = *(float **)(v3 + 8);
  char v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10);
  }
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    this = PB::Writer::write(a2);
    int v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 80));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 76));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_39;
    }
LABEL_71:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 164) & 0x20000) == 0) {
      return this;
    }
    goto LABEL_72;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) != 0) {
    goto LABEL_71;
  }
LABEL_39:
  if ((v11 & 0x20000) == 0) {
    return this;
  }
LABEL_72:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::RelativeDeviceMotionInternal::hash_value(CMMsl::RelativeDeviceMotionInternal *this)
{
  int v2 = *((_DWORD *)this + 41);
  if ((v2 & 2) == 0)
  {
    double v56 = 0.0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_3;
    }
LABEL_51:
    uint64_t v4 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_7;
    }
LABEL_52:
    uint64_t v62 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_10;
    }
LABEL_53:
    uint64_t v61 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_13;
    }
LABEL_54:
    uint64_t v60 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_16;
    }
LABEL_55:
    uint64_t v59 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_19;
    }
LABEL_56:
    uint64_t v58 = 0;
    if ((v2 & 0x80000) != 0) {
      goto LABEL_22;
    }
LABEL_57:
    uint64_t v57 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_25;
    }
LABEL_58:
    uint64_t v18 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_29;
    }
LABEL_59:
    uint64_t v20 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_33;
    }
LABEL_60:
    uint64_t v22 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_37;
    }
LABEL_61:
    uint64_t v24 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_41;
    }
    goto LABEL_62;
  }
  double v29 = *((double *)this + 8);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  double v56 = v29;
  if ((v2 & 0x800) == 0) {
    goto LABEL_51;
  }
LABEL_3:
  float v3 = *((float *)this + 27);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = LODWORD(v3);
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_52;
  }
LABEL_7:
  float v5 = *((float *)this + 28);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v62 = v6;
  if ((v2 & 0x2000) == 0) {
    goto LABEL_53;
  }
LABEL_10:
  float v7 = *((float *)this + 29);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v61 = v8;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_54;
  }
LABEL_13:
  float v9 = *((float *)this + 30);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v60 = v10;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_55;
  }
LABEL_16:
  float v11 = *((float *)this + 31);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v59 = v12;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_56;
  }
LABEL_19:
  float v13 = *((float *)this + 32);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v58 = v14;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_57;
  }
LABEL_22:
  float v15 = *((float *)this + 35);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v57 = v16;
  if ((v2 & 0x100000) == 0) {
    goto LABEL_58;
  }
LABEL_25:
  float v17 = *((float *)this + 36);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = LODWORD(v17);
  }
  if ((v2 & 0x200000) == 0) {
    goto LABEL_59;
  }
LABEL_29:
  float v19 = *((float *)this + 37);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = LODWORD(v19);
  }
  if ((v2 & 0x100) == 0) {
    goto LABEL_60;
  }
LABEL_33:
  float v21 = *((float *)this + 24);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = LODWORD(v21);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_37:
  float v23 = *((float *)this + 25);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v2 & 0x400) != 0)
  {
LABEL_41:
    float v25 = *((float *)this + 26);
    if (v25 == 0.0) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = LODWORD(v25);
    }
    if ((v2 & 0x80) != 0) {
      goto LABEL_45;
    }
LABEL_63:
    uint64_t v28 = 0;
    goto LABEL_64;
  }
LABEL_62:
  uint64_t v26 = 0;
  if ((v2 & 0x80) == 0) {
    goto LABEL_63;
  }
LABEL_45:
  float v27 = *((float *)this + 23);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
LABEL_64:
  uint64_t v30 = PBHashBytes();
  uint64_t v31 = PBHashBytes();
  int v32 = *((_DWORD *)this + 41);
  if ((v32 & 0x8000000) != 0)
  {
    uint64_t v33 = *((unsigned __int8 *)this + 157);
    if ((v32 & 0x400000) != 0)
    {
LABEL_66:
      uint64_t v34 = *((unsigned __int8 *)this + 152);
      if ((v32 & 0x1000000) != 0) {
        goto LABEL_67;
      }
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t v33 = 0;
    if ((v32 & 0x400000) != 0) {
      goto LABEL_66;
    }
  }
  uint64_t v34 = 0;
  if ((v32 & 0x1000000) != 0)
  {
LABEL_67:
    uint64_t v35 = *((unsigned __int8 *)this + 154);
    if ((v32 & 0x10) != 0) {
      goto LABEL_68;
    }
LABEL_96:
    uint64_t v37 = 0;
    if ((v32 & 8) != 0) {
      goto LABEL_71;
    }
LABEL_97:
    uint64_t v39 = 0;
    if ((v32 & 4) != 0) {
      goto LABEL_74;
    }
LABEL_98:
    uint64_t v41 = 0;
    if ((v32 & 0x20000000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_99;
  }
LABEL_95:
  uint64_t v35 = 0;
  if ((v32 & 0x10) == 0) {
    goto LABEL_96;
  }
LABEL_68:
  float v36 = *((float *)this + 20);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  if ((v32 & 8) == 0) {
    goto LABEL_97;
  }
LABEL_71:
  float v38 = *((float *)this + 19);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v32 & 4) == 0) {
    goto LABEL_98;
  }
LABEL_74:
  float v40 = *((float *)this + 18);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  if ((v32 & 0x20000000) != 0)
  {
LABEL_77:
    uint64_t v42 = *((unsigned __int8 *)this + 159);
    if (v32 < 0) {
      goto LABEL_78;
    }
    goto LABEL_100;
  }
LABEL_99:
  uint64_t v42 = 0;
  if (v32 < 0)
  {
LABEL_78:
    uint64_t v43 = *((unsigned __int8 *)this + 161);
    if ((v32 & 0x800000) != 0) {
      goto LABEL_79;
    }
    goto LABEL_101;
  }
LABEL_100:
  uint64_t v43 = 0;
  if ((v32 & 0x800000) != 0)
  {
LABEL_79:
    uint64_t v44 = *((unsigned __int8 *)this + 153);
    if ((v32 & 0x20) != 0) {
      goto LABEL_80;
    }
LABEL_102:
    uint64_t v46 = 0;
    if ((v32 & 0x40000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_103;
  }
LABEL_101:
  uint64_t v44 = 0;
  if ((v32 & 0x20) == 0) {
    goto LABEL_102;
  }
LABEL_80:
  float v45 = *((float *)this + 21);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v32 & 0x40000) != 0)
  {
LABEL_83:
    uint64_t v47 = *((unsigned int *)this + 34);
    if ((v32 & 0x10000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_104;
  }
LABEL_103:
  uint64_t v47 = 0;
  if ((v32 & 0x10000000) != 0)
  {
LABEL_84:
    uint64_t v48 = *((unsigned __int8 *)this + 158);
    if ((v32 & 0x4000000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t v48 = 0;
  if ((v32 & 0x4000000) != 0)
  {
LABEL_85:
    uint64_t v49 = *((unsigned __int8 *)this + 156);
    if ((v32 & 0x40000000) != 0) {
      goto LABEL_86;
    }
    goto LABEL_106;
  }
LABEL_105:
  uint64_t v49 = 0;
  if ((v32 & 0x40000000) != 0)
  {
LABEL_86:
    uint64_t v50 = *((unsigned __int8 *)this + 160);
    if (v32) {
      goto LABEL_87;
    }
LABEL_107:
    double v51 = 0.0;
    if ((v32 & 0x40) != 0) {
      goto LABEL_90;
    }
    goto LABEL_108;
  }
LABEL_106:
  uint64_t v50 = 0;
  if ((v32 & 1) == 0) {
    goto LABEL_107;
  }
LABEL_87:
  double v51 = *((double *)this + 7);
  if (v51 == 0.0) {
    double v51 = 0.0;
  }
  if ((v32 & 0x40) != 0)
  {
LABEL_90:
    uint64_t v52 = *((unsigned int *)this + 22);
    if ((v32 & 0x2000000) != 0) {
      goto LABEL_91;
    }
LABEL_109:
    uint64_t v53 = 0;
    if ((v32 & 0x20000) != 0) {
      goto LABEL_92;
    }
LABEL_110:
    uint64_t v54 = 0;
    return v4 ^ *(void *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(void *)&v51 ^ v52 ^ v53 ^ v54;
  }
LABEL_108:
  uint64_t v52 = 0;
  if ((v32 & 0x2000000) == 0) {
    goto LABEL_109;
  }
LABEL_91:
  uint64_t v53 = *((unsigned __int8 *)this + 155);
  if ((v32 & 0x20000) == 0) {
    goto LABEL_110;
  }
LABEL_92:
  uint64_t v54 = *((unsigned int *)this + 33);
  return v4 ^ *(void *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(void *)&v51 ^ v52 ^ v53 ^ v54;
}

void CMMsl::RelativeGravityConstraints::~RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this, const CMMsl::RelativeGravityConstraints *a2)
{
  *(void *)this = &unk_270644778;
  *((_DWORD *)this + 12) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 24) = 1;
    *((void *)this + 1) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    __int16 v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 7) = v4;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 9) = v4;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 10) = v4;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v5 = *((unsigned char *)a2 + 44);
  v3 |= 0x100u;
  *((_WORD *)this + 24) = v3;
  *((unsigned char *)this + 44) = v5;
  __int16 v2 = *((_WORD *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 6) = v4;
  if ((*((_WORD *)a2 + 24) & 4) == 0) {
    return *(float *)&v4;
  }
LABEL_20:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_WORD *)this + 24) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, const CMMsl::RelativeGravityConstraints *a2)
{
  if ((const CMMsl::RelativeGravityConstraints *)a1 != a2)
  {
    CMMsl::RelativeGravityConstraints::RelativeGravityConstraints((CMMsl::RelativeGravityConstraints *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v13;
    char v13 = v3;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeGravityConstraints *a2, CMMsl::RelativeGravityConstraints *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v3;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644778;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeGravityConstraints::RelativeGravityConstraints((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v13;
    char v13 = v3;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityConstraints::formatText(CMMsl::RelativeGravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "avgRotationMax", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "historicalDisturbanceDuration", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "historicalQuiescenceDuration", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "instAccelMagDiff", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "instRotationMax", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "isAvgGrav");
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "lpfAccelMagDiff", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "measNoiseVar", *((float *)this + 10));
  if (*((_WORD *)this + 24)) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_11:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RelativeGravityConstraints::readFrom(CMMsl::RelativeGravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_54;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_53;
      case 2u:
        *((_WORD *)this + 24) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_52;
      case 3u:
        *((_WORD *)this + 24) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_52;
      case 4u:
        *((_WORD *)this + 24) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_52;
      case 5u:
        *((_WORD *)this + 24) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_52;
      case 6u:
        *((_WORD *)this + 24) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_52;
      case 7u:
        *((_WORD *)this + 24) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 44) = v21;
        break;
      case 8u:
        *((_WORD *)this + 24) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_48;
        }
        *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_52;
      case 9u:
        *((_WORD *)this + 24) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_52:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_53:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_48:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_54:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 48) & 4) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_19:
  float v5 = *(float *)(v3 + 20);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RelativeGravityConstraints::hash_value(CMMsl::RelativeGravityConstraints *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_28:
    uint64_t v4 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_29:
    uint64_t v6 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_30:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_31:
    uint64_t v10 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_32:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_3:
  float v3 = *((float *)this + 8);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_29;
  }
LABEL_6:
  float v5 = *((float *)this + 4);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  float v7 = *((float *)this + 7);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_12:
  float v9 = *((float *)this + 9);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_32;
  }
LABEL_15:
  float v11 = *((float *)this + 10);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_18:
    uint64_t v13 = *((unsigned __int8 *)this + 44);
    if ((v1 & 8) != 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v13 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_19:
    float v14 = *((float *)this + 6);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v17 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
  }
LABEL_34:
  uint64_t v15 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  float v16 = *((float *)this + 5);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
}

void CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection(CMMsl::RelativeGravityCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_2706447B0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t this, const CMMsl::RelativeGravityCorrection *a2)
{
  *(void *)this = &unk_2706447B0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    char v2 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, const CMMsl::RelativeGravityCorrection *a2)
{
  if ((const CMMsl::RelativeGravityCorrection *)a1 != a2)
  {
    CMMsl::RelativeGravityCorrection::RelativeGravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection((CMMsl::RelativeGravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RelativeGravityCorrection *a2, CMMsl::RelativeGravityCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706447B0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::RelativeGravityCorrection::RelativeGravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection((CMMsl::RelativeGravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::formatText(CMMsl::RelativeGravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "isAvgGrav");
  }
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RelativeGravityCorrection::readFrom(CMMsl::RelativeGravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_24;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        if (v20 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
          *((void *)a2 + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 16) = v23;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(a2);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14) {
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::write(a2);
  }
  return this;
}

unint64_t CMMsl::RelativeGravityCorrection::hash_value(CMMsl::RelativeGravityCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::RelativeGravityCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::RhythmicGnssOperatorStatus::~RhythmicGnssOperatorStatus(CMMsl::RhythmicGnssOperatorStatus *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  *(void *)this = &unk_2706447E8;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    int v4 = *((_DWORD *)a2 + 3);
    char v3 = 2;
    *(unsigned char *)(this + 24) = 2;
    *(_DWORD *)(this + 12) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 8) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 20);
    v3 |= 8u;
    *(unsigned char *)(this + 24) = v3;
    *(unsigned char *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      char v8 = *((unsigned char *)a2 + 21);
      *(unsigned char *)(this + 24) = v3 | 0x10;
      *(unsigned char *)(this + 21) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 2);
  v3 |= 1u;
  *(unsigned char *)(this + 24) = v3;
  *(_DWORD *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 24) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  if ((const CMMsl::RhythmicGnssOperatorStatus *)a1 != a2)
  {
    CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 20);
    *(_WORD *)(a1 + 20) = v10;
    __int16 v10 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RhythmicGnssOperatorStatus *a2, CMMsl::RhythmicGnssOperatorStatus *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 20);
  *(unsigned char *)(this + 20) = *((unsigned char *)a2 + 20);
  *((unsigned char *)a2 + 20) = v4;
  int v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  LOBYTE(v6) = *(unsigned char *)(this + 21);
  *(unsigned char *)(this + 21) = *((unsigned char *)a2 + 21);
  *((unsigned char *)a2 + 21) = v6;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_2706447E8;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(result + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(result + 21) = *(unsigned char *)(a2 + 21);
  return result;
}

{
  *(void *)uint64_t result = &unk_2706447E8;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(result + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(result + 21) = *(unsigned char *)(a2 + 21);
  return result;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = &unk_2706447E8;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    char v4 = *(unsigned char *)(a2 + 20);
    int v5 = *(_DWORD *)(a2 + 16);
    char v6 = *(unsigned char *)(a2 + 21);
    int v15 = *(_DWORD *)(a1 + 24);
    char v7 = *(unsigned char *)(a1 + 20);
    *(unsigned char *)(a1 + 20) = v4;
    char v13 = v7;
    int v12 = *(_DWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 8) = v9;
    v11[1] = v8;
    LOBYTE(v3) = *(unsigned char *)(a1 + 21);
    *(unsigned char *)(a1 + 21) = v6;
    char v14 = v3;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::formatText(CMMsl::RhythmicGnssOperatorStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activeGnssSession");
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentModesOfOperation");
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "gnssModeOfOperation");
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "hasSubscribedRhythmicClient");
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "rhythmicMode");
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::readFrom(CMMsl::RhythmicGnssOperatorStatus *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 >= v2 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v3 > v2) {
        unint64_t v2 = v3;
      }
      do
      {
        if (v2 == v3)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v3 + 1;
        char v18 = *(unsigned char *)(v8 + v3);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_24;
        }
        v15 += 7;
        unint64_t v3 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v3 = *((void *)a2 + 1);
      unint64_t v2 = *((void *)a2 + 2);
      goto LABEL_21;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v3 + 1;
      *((void *)a2 + 1) = v3 + 1;
      char v13 = *(unsigned char *)(v8 + v3);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v3 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_24:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            unint64_t v44 = v20++;
            char v45 = *(unsigned char *)(v21 + v44);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0) {
              break;
            }
            v42 += 7;
            BOOL v14 = v43++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_82:
              unint64_t v3 = v44 + 1;
              goto LABEL_83;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_82;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v3 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_83;
          }
          v22 += 7;
          unint64_t v20 = v3;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_83:
        *((_DWORD *)this + 3) = v24;
        break;
      case 2u:
        *((unsigned char *)this + 24) |= 8u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 20) = v27;
        break;
      case 3u:
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_88;
            }
            unint64_t v48 = v28++;
            char v49 = *(unsigned char *)(v29 + v48);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            BOOL v14 = v47++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_87:
              unint64_t v3 = v48 + 1;
              goto LABEL_88;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
          goto LABEL_87;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        do
        {
          unint64_t v3 = v28 + 1;
          *((void *)a2 + 1) = v28 + 1;
          char v33 = *(unsigned char *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0) {
            goto LABEL_88;
          }
          v30 += 7;
          unint64_t v28 = v3;
          BOOL v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_88:
        *((_DWORD *)this + 4) = v32;
        break;
      case 4u:
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v34 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v38 = 0;
          if (v2 <= v34) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v34)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_93;
            }
            unint64_t v52 = v34++;
            char v53 = *(unsigned char *)(v35 + v52);
            *((void *)a2 + 1) = v34;
            v38 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0) {
              break;
            }
            v50 += 7;
            BOOL v14 = v51++ > 8;
            if (v14)
            {
              LODWORD(v38) = 0;
LABEL_92:
              unint64_t v3 = v52 + 1;
              goto LABEL_93;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v38) = 0;
          }
          goto LABEL_92;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        do
        {
          unint64_t v3 = v34 + 1;
          *((void *)a2 + 1) = v34 + 1;
          char v39 = *(unsigned char *)(v35 + v34);
          v38 |= (unint64_t)(v39 & 0x7F) << v36;
          if ((v39 & 0x80) == 0) {
            goto LABEL_93;
          }
          v36 += 7;
          unint64_t v34 = v3;
          BOOL v14 = v37++ > 8;
        }
        while (!v14);
        LODWORD(v38) = 0;
LABEL_93:
        *((_DWORD *)this + 2) = v38;
        break;
      case 5u:
        *((unsigned char *)this + 24) |= 0x10u;
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        if (v3 >= v2)
        {
          BOOL v41 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v40 = *(unsigned __int8 *)(*(void *)a2 + v3++);
          *((void *)a2 + 1) = v3;
          BOOL v41 = v40 != 0;
        }
        *((unsigned char *)this + 21) = v41;
        break;
      default:
        goto LABEL_19;
    }
LABEL_21:
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2);
    if ((*(unsigned char *)(v3 + 24) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::hash_value(CMMsl::RhythmicGnssOperatorStatus *this)
{
  if ((*((unsigned char *)this + 24) & 2) != 0)
  {
    uint64_t v1 = *((unsigned int *)this + 3);
    if ((*((unsigned char *)this + 24) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 20);
      if ((*((unsigned char *)this + 24) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 4);
    if (*((unsigned char *)this + 24)) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 24) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 24) & 1) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v4 = *((unsigned int *)this + 2);
  if ((*((unsigned char *)this + 24) & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 21);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

void CMMsl::RotationRate::~RotationRate(CMMsl::RotationRate *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

float CMMsl::RotationRate::RotationRate(CMMsl::RotationRate *this, const CMMsl::RotationRate *a2)
{
  *(void *)this = &unk_270644820;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, const CMMsl::RotationRate *a2)
{
  if ((const CMMsl::RotationRate *)a1 != a2)
  {
    CMMsl::RotationRate::RotationRate((CMMsl::RotationRate *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RotationRate *a2, CMMsl::RotationRate *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::RotationRate::RotationRate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644820;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = &unk_270644820;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = &unk_270644820;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    void v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::RotationRate::formatText(CMMsl::RotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RotationRate::readFrom(CMMsl::RotationRate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_38;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
        goto LABEL_37;
      case 2u:
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 28) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_37:
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_38:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20));
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RotationRate::hash_value(CMMsl::RotationRate *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::RunningArmSwingSignals::~RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this, const CMMsl::RunningArmSwingSignals *a2)
{
  *(void *)this = &unk_270644858;
  *((_DWORD *)this + 16) = 0;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 64) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((unsigned char *)this + 64) = v3;
    *((double *)this + 7) = result;
    char v2 = *((unsigned char *)a2 + 64);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 64) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 64) = v3;
  *((double *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((unsigned char *)this + 64) = v3;
  *((double *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_16:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 64) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_15:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((unsigned char *)this + 64) = v3;
  *((double *)this + 6) = result;
  if ((*((unsigned char *)a2 + 64) & 8) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, const CMMsl::RunningArmSwingSignals *a2)
{
  if ((const CMMsl::RunningArmSwingSignals *)a1 != a2)
  {
    CMMsl::RunningArmSwingSignals::RunningArmSwingSignals((CMMsl::RunningArmSwingSignals *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningArmSwingSignals *a2, CMMsl::RunningArmSwingSignals *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644858;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644858;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v11 = &unk_270644858;
    int v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    uint64_t v4 = *(void *)(a2 + 56);
    int v16 = *(_DWORD *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 56);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v14 = *(_OWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) = v3;
    *(void *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 24) = v8;
    long long v12 = v5;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::RunningArmSwingSignals::formatText(CMMsl::RunningArmSwingSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 64);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "swingAccelX", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "swingAccelXStandardized", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "swingAccelY", *((double *)this + 5));
  char v5 = *((unsigned char *)this + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "swingAccelZ", *((double *)this + 6));
  if ((*((unsigned char *)this + 64) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
LABEL_9:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningArmSwingSignals::readFrom(CMMsl::RunningArmSwingSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_46;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 64) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 2u:
        *((unsigned char *)this + 64) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 3u:
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 5u:
        *((unsigned char *)this + 64) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 6u:
        *((unsigned char *)this + 64) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 7u:
        *((unsigned char *)this + 64) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_43;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_45;
      case 8u:
        *((unsigned char *)this + 64) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_43:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_45:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_46:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningArmSwingSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16));
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
    if ((*(unsigned char *)(v3 + 64) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 32);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningArmSwingSignals::hash_value(CMMsl::RunningArmSwingSignals *this)
{
  if ((*((unsigned char *)this + 64) & 2) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    double v2 = 0.0;
    if (*((unsigned char *)this + 64)) {
      goto LABEL_6;
    }
LABEL_25:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 64) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    double v5 = 0.0;
    if ((*((unsigned char *)this + 64) & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 1) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 4) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  double v5 = *((double *)this + 5);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 64) & 0x20) != 0)
  {
LABEL_15:
    double v6 = *((double *)this + 6);
    if (v6 == 0.0) {
      double v6 = 0.0;
    }
    if ((*((unsigned char *)this + 64) & 8) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    double v7 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7;
  }
LABEL_28:
  double v6 = 0.0;
  if ((*((unsigned char *)this + 64) & 8) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  double v7 = *((double *)this + 4);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7;
}

void CMMsl::RunningCentripetalAccelSignals::~RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  *(void *)this = &unk_270644890;
  *((_DWORD *)this + 30) = 0;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x200) != 0)
  {
    double result = *((double *)a2 + 10);
    __int16 v3 = 512;
    *((_WORD *)this + 60) = 512;
    *((double *)this + 10) = result;
    __int16 v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 60) & 0x2000) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 14);
    v3 |= 0x2000u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 14) = result;
    __int16 v2 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    double result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 11) = result;
    __int16 v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 13) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *((double *)a2 + 3);
    *((_WORD *)this + 60) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 60) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *a1, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals((CMMsl::RunningCentripetalAccelSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningCentripetalAccelSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningCentripetalAccelSignals *a2, CMMsl::RunningCentripetalAccelSignals *a3)
{
  int v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v5;
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v6;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v15;
  uint64_t v16 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v16;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644890;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningCentripetalAccelSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::formatText(CMMsl::RunningCentripetalAccelSignals *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 60);
  if (v5)
  {
    PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelX", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelY", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelZ", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "centripetalAccelX", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "centripetalAccelY", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "centripetalAccelZ", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "centripetalRotationRateX", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "centripetalRotationRateY", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "centripetalRotationRateZ", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "swingVelocityX", *((double *)this + 11));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "swingVelocityY", *((double *)this + 12));
  __int16 v5 = *((_WORD *)this + 60);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "swingVelocityZ", *((double *)this + 13));
  if ((*((_WORD *)this + 60) & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 14));
LABEL_16:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningCentripetalAccelSignals::readFrom(CMMsl::RunningCentripetalAccelSignals *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_67;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_WORD *)this + 60) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 2u:
        *((_WORD *)this + 60) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 3u:
        *((_WORD *)this + 60) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 4u:
        *((_WORD *)this + 60) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 5u:
        *((_WORD *)this + 60) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 6u:
        *((_WORD *)this + 60) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 7u:
        *((_WORD *)this + 60) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 8u:
        *((_WORD *)this + 60) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 9u:
        *((_WORD *)this + 60) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 0xAu:
        *((_WORD *)this + 60) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 0xBu:
        *((_WORD *)this + 60) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 0xCu:
        *((_WORD *)this + 60) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 0xDu:
        *((_WORD *)this + 60) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_64;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_66;
      case 0xEu:
        *((_WORD *)this + 60) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_64:
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_66:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_67:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 120);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80));
    __int16 v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(_WORD *)(v3 + 120) & 4) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningCentripetalAccelSignals::hash_value(CMMsl::RunningCentripetalAccelSignals *this)
{
  __int16 v1 = *((_WORD *)this + 60);
  if ((v1 & 0x200) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 60) & 0x2000) != 0) {
      goto LABEL_3;
    }
LABEL_45:
    double v3 = 0.0;
    if ((*((_WORD *)this + 60) & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_46:
    double v4 = 0.0;
    if ((*((_WORD *)this + 60) & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_47:
    double v5 = 0.0;
    if ((*((_WORD *)this + 60) & 0x1000) != 0) {
      goto LABEL_12;
    }
LABEL_48:
    double v6 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_49:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_50:
    double v8 = 0.0;
    if ((*((_WORD *)this + 60) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_51:
    double v9 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_52:
    double v10 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_53:
    double v11 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
LABEL_54:
    double v12 = 0.0;
    if (v1) {
      goto LABEL_33;
    }
LABEL_55:
    double v13 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_36;
    }
    goto LABEL_56;
  }
  double v2 = *((double *)this + 10);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x2000) == 0) {
    goto LABEL_45;
  }
LABEL_3:
  double v3 = *((double *)this + 14);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x400) == 0) {
    goto LABEL_46;
  }
LABEL_6:
  double v4 = *((double *)this + 11);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x800) == 0) {
    goto LABEL_47;
  }
LABEL_9:
  double v5 = *((double *)this + 12);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x1000) == 0) {
    goto LABEL_48;
  }
LABEL_12:
  double v6 = *((double *)this + 13);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_49;
  }
LABEL_15:
  double v7 = *((double *)this + 7);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_50;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 60) & 0x100) == 0) {
    goto LABEL_51;
  }
LABEL_21:
  double v9 = *((double *)this + 9);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_52;
  }
LABEL_24:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_53;
  }
LABEL_27:
  double v11 = *((double *)this + 5);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_54;
  }
LABEL_30:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_33:
  double v13 = *((double *)this + 1);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 2) != 0)
  {
LABEL_36:
    double v14 = *((double *)this + 2);
    if (v14 == 0.0) {
      double v14 = 0.0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_39;
    }
LABEL_57:
    double v15 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15;
  }
LABEL_56:
  double v14 = 0.0;
  if ((v1 & 4) == 0) {
    goto LABEL_57;
  }
LABEL_39:
  double v15 = *((double *)this + 3);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15;
}

void CMMsl::RunningFormMetrics::~RunningFormMetrics(CMMsl::RunningFormMetrics *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(CMMsl::RunningFormMetrics *this, const CMMsl::RunningFormMetrics *a2)
{
  *(void *)this = &unk_2706448C8;
  *((void *)this + 28) = 0;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    double result = *((double *)a2 + 7);
    uint64_t v3 = 64;
    *((void *)this + 28) = 64;
    *((double *)this + 7) = result;
    uint64_t v2 = *((void *)a2 + 28);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 8);
    v3 |= 0x80uLL;
    *((void *)this + 28) = v3;
    *((double *)this + 8) = result;
    uint64_t v2 = *((void *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200000000) != 0)
  {
    char v5 = *((unsigned char *)a2 + 220);
    v3 |= 0x200000000uLL;
    *((void *)this + 28) = v3;
    *((unsigned char *)this + 220) = v5;
    uint64_t v2 = *((void *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 2) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v6 = *((unsigned char *)a2 + 217);
  v3 |= 0x40000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 217) = v6;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 20) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v7 = *((unsigned char *)a2 + 221);
  v3 |= 0x400000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 221) = v7;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = *((double *)a2 + 1);
  v3 |= 1uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 1) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  char v8 = *((unsigned char *)a2 + 216);
  v3 |= 0x20000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 216) = v8;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v9 = *((unsigned char *)a2 + 218);
  v3 |= 0x80000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 218) = v9;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 16) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = *((double *)a2 + 19);
  v3 |= 0x40000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 19) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 15) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v10 = *((_DWORD *)a2 + 52);
  v3 |= 0x8000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 52) = v10;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v11 = *((_DWORD *)a2 + 51);
  v3 |= 0x4000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 51) = v11;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v12 = *((_DWORD *)a2 + 53);
  v3 |= 0x10000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 53) = v12;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v13 = *((_DWORD *)a2 + 48);
  v3 |= 0x800000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 48) = v13;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 13) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v14 = *((_DWORD *)a2 + 50);
  v3 |= 0x2000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 50) = v14;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v15 = *((_DWORD *)a2 + 49);
  v3 |= 0x1000000uLL;
  *((void *)this + 28) = v3;
  *((_DWORD *)this + 49) = v15;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = *((double *)a2 + 4);
  v3 |= 8uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 4) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = *((double *)a2 + 3);
  v3 |= 4uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 3) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = *((double *)a2 + 5);
  v3 |= 0x10uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 5) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v16 = *((unsigned char *)a2 + 219);
  v3 |= 0x100000000uLL;
  *((void *)this + 28) = v3;
  *((unsigned char *)this + 219) = v16;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  double result = *((double *)a2 + 9);
  v3 |= 0x100uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 9) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  double result = *((double *)a2 + 12);
  v3 |= 0x800uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 12) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = *((double *)a2 + 17);
  v3 |= 0x10000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 17) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = *((double *)a2 + 18);
  v3 |= 0x20000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 18) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = *((double *)a2 + 6);
  v3 |= 0x20uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 6) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = *((double *)a2 + 23);
  v3 |= 0x400000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 23) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 14) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = *((double *)a2 + 21);
  v3 |= 0x100000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 21) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_71;
  }
LABEL_70:
  double result = *((double *)a2 + 10);
  v3 |= 0x200uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 10) = result;
  uint64_t v2 = *((void *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_72:
    double result = *((double *)a2 + 11);
    *((void *)this + 28) = v3 | 0x400;
    *((double *)this + 11) = result;
    return result;
  }
LABEL_71:
  double result = *((double *)a2 + 22);
  v3 |= 0x200000uLL;
  *((void *)this + 28) = v3;
  *((double *)this + 22) = result;
  if ((*((void *)a2 + 28) & 0x400) != 0) {
    goto LABEL_72;
  }
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, const CMMsl::RunningFormMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((CMMsl::RunningFormMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningFormMetrics *a2, CMMsl::RunningFormMetrics *a3)
{
  uint64_t v3 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 220);
  *((unsigned char *)this + 220) = *((unsigned char *)a2 + 220);
  *((unsigned char *)a2 + 220) = v3;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 217);
  *((unsigned char *)this + 217) = *((unsigned char *)a2 + 217);
  *((unsigned char *)a2 + 217) = v3;
  uint64_t v7 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v7;
  LOBYTE(v3) = *((unsigned char *)this + 221);
  *((unsigned char *)this + 221) = *((unsigned char *)a2 + 221);
  *((unsigned char *)a2 + 221) = v3;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LOBYTE(v3) = *((unsigned char *)this + 216);
  *((unsigned char *)this + 216) = *((unsigned char *)a2 + 216);
  *((unsigned char *)a2 + 216) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 218);
  *((unsigned char *)this + 218) = *((unsigned char *)a2 + 218);
  *((unsigned char *)a2 + 218) = v3;
  uint64_t v9 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v9;
  uint64_t v10 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v10;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  LODWORD(v3) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  LODWORD(v3) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  LODWORD(v3) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  LODWORD(v3) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  uint64_t v12 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  LODWORD(v3) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v3;
  LODWORD(v3) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v3;
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  LOBYTE(v3) = *((unsigned char *)this + 219);
  *((unsigned char *)this + 219) = *((unsigned char *)a2 + 219);
  *((unsigned char *)a2 + 219) = v3;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v18;
  uint64_t v19 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v19;
  uint64_t v20 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v20;
  uint64_t v21 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v21;
  uint64_t v22 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v22;
  uint64_t v23 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v23;
  uint64_t v24 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v24;
  uint64_t v25 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v25;
  double result = *((double *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((double *)a2 + 11) = result;
  return result;
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706448C8;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 220);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 221) = *(unsigned char *)(a2 + 221);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 218) = *(unsigned char *)(a2 + 218);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 219) = *(unsigned char *)(a2 + 219);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  double result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningFormMetrics::formatText(CMMsl::RunningFormMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "emptyField0", *((double *)this + 1));
    uint64_t v5 = *((void *)this + 28);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField1");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "emptyField2");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "groundContactTimeCadence", *((double *)this + 3));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "groundContactTimeGrade", *((double *)this + 4));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "groundContactTimeGradeSource");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "groundContactTimeGradeType");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "groundContactTimeIsValid");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "groundContactTimePace", *((double *)this + 5));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "groundContactTimeReportingStatus");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "groundContactTimeUnsmoothed", *((double *)this + 6));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "groundContactTimeWindowEndTime", *((double *)this + 7));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "isFlat");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "isFormBasedStrideLength");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 8));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 9));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "strideLengthGrade", *((double *)this + 10));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "strideLengthGradeType", *((double *)this + 11));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "strideLengthIsValid");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "strideLengthPace", *((double *)this + 12));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "strideLengthReportingStatus");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "strideLengthUncalibrated", *((double *)this + 13));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "strideLengthUnsmoothed", *((double *)this + 14));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "strideLengthWindowEndTime", *((double *)this + 15));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "verticalOscCadence", *((double *)this + 17));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "verticalOscPace", *((double *)this + 18));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "verticalOscWindowEndTime", *((double *)this + 19));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "verticalOscillation", *((double *)this + 20));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "verticalOscillationGrade", *((double *)this + 21));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "verticalOscillationGradeType", *((double *)this + 22));
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "verticalOscillationIsValid");
  uint64_t v5 = *((void *)this + 28);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "verticalOscillationReportingStatus");
  if ((*((void *)this + 28) & 0x400000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(a2, "verticalOscillationUnsmoothed", *((double *)this + 23));
LABEL_37:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningFormMetrics::readFrom(CMMsl::RunningFormMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_202;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((void *)this + 28) |= 0x40uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 2u:
        *((void *)this + 28) |= 0x80uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 3u:
        *((void *)this + 28) |= 0x200000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 220) = v21;
        break;
      case 4u:
        *((void *)this + 28) |= 2uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 5u:
        *((void *)this + 28) |= 0x40000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 217) = v23;
        break;
      case 6u:
        *((void *)this + 28) |= 0x80000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 7u:
        *((void *)this + 28) |= 0x400000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 221) = v25;
        break;
      case 8u:
        *((void *)this + 28) |= 1uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 9u:
        *((void *)this + 28) |= 0x20000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 216) = v27;
        break;
      case 0xAu:
        *((void *)this + 28) |= 0x80000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 218) = v29;
        break;
      case 0xBu:
        *((void *)this + 28) |= 0x8000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0xCu:
        *((void *)this + 28) |= 0x40000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0xDu:
        *((void *)this + 28) |= 0x4000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0xEu:
        *((void *)this + 28) |= 0x8000000uLL;
        unint64_t v30 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v31 = *(void *)a2;
        if (v30 > 0xFFFFFFFFFFFFFFF5 || v30 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v34 = 0;
          if (v2 <= v30) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v30)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_211;
            }
            unint64_t v70 = v30++;
            char v71 = *(unsigned char *)(v31 + v70);
            *((void *)a2 + 1) = v30;
            v34 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v34) = 0;
LABEL_210:
              unint64_t v2 = v70 + 1;
              goto LABEL_211;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v34) = 0;
          }
          goto LABEL_210;
        }
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        do
        {
          unint64_t v2 = v30 + 1;
          *((void *)a2 + 1) = v30 + 1;
          char v35 = *(unsigned char *)(v31 + v30);
          v34 |= (unint64_t)(v35 & 0x7F) << v32;
          if ((v35 & 0x80) == 0) {
            goto LABEL_211;
          }
          v32 += 7;
          unint64_t v30 = v2;
          BOOL v14 = v33++ > 8;
        }
        while (!v14);
        LODWORD(v34) = 0;
LABEL_211:
        *((_DWORD *)this + 52) = v34;
        break;
      case 0xFu:
        *((void *)this + 28) |= 0x4000000uLL;
        unint64_t v36 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v37 = *(void *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v2)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v40 = 0;
          if (v2 <= v36) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v36)
            {
              LODWORD(v40) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_216;
            }
            unint64_t v74 = v36++;
            char v75 = *(unsigned char *)(v37 + v74);
            *((void *)a2 + 1) = v36;
            v40 |= (unint64_t)(v75 & 0x7F) << v72;
            if ((v75 & 0x80) == 0) {
              break;
            }
            v72 += 7;
            BOOL v14 = v73++ > 8;
            if (v14)
            {
              LODWORD(v40) = 0;
LABEL_215:
              unint64_t v2 = v74 + 1;
              goto LABEL_216;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v40) = 0;
          }
          goto LABEL_215;
        }
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        do
        {
          unint64_t v2 = v36 + 1;
          *((void *)a2 + 1) = v36 + 1;
          char v41 = *(unsigned char *)(v37 + v36);
          v40 |= (unint64_t)(v41 & 0x7F) << v38;
          if ((v41 & 0x80) == 0) {
            goto LABEL_216;
          }
          v38 += 7;
          unint64_t v36 = v2;
          BOOL v14 = v39++ > 8;
        }
        while (!v14);
        LODWORD(v40) = 0;
LABEL_216:
        *((_DWORD *)this + 51) = v40;
        break;
      case 0x10u:
        *((void *)this + 28) |= 0x10000000uLL;
        unint64_t v42 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v43 = *(void *)a2;
        if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
        {
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v46 = 0;
          if (v2 <= v42) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v42)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_221;
            }
            unint64_t v78 = v42++;
            char v79 = *(unsigned char *)(v43 + v78);
            *((void *)a2 + 1) = v42;
            v46 |= (unint64_t)(v79 & 0x7F) << v76;
            if ((v79 & 0x80) == 0) {
              break;
            }
            v76 += 7;
            BOOL v14 = v77++ > 8;
            if (v14)
            {
              LODWORD(v46) = 0;
LABEL_220:
              unint64_t v2 = v78 + 1;
              goto LABEL_221;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v46) = 0;
          }
          goto LABEL_220;
        }
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        do
        {
          unint64_t v2 = v42 + 1;
          *((void *)a2 + 1) = v42 + 1;
          char v47 = *(unsigned char *)(v43 + v42);
          v46 |= (unint64_t)(v47 & 0x7F) << v44;
          if ((v47 & 0x80) == 0) {
            goto LABEL_221;
          }
          v44 += 7;
          unint64_t v42 = v2;
          BOOL v14 = v45++ > 8;
        }
        while (!v14);
        LODWORD(v46) = 0;
LABEL_221:
        *((_DWORD *)this + 53) = v46;
        break;
      case 0x11u:
        *((void *)this + 28) |= 0x800000uLL;
        unint64_t v48 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v49 = *(void *)a2;
        if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v52 = 0;
          if (v2 <= v48) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v48)
            {
              LODWORD(v52) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_226;
            }
            unint64_t v82 = v48++;
            char v83 = *(unsigned char *)(v49 + v82);
            *((void *)a2 + 1) = v48;
            v52 |= (unint64_t)(v83 & 0x7F) << v80;
            if ((v83 & 0x80) == 0) {
              break;
            }
            v80 += 7;
            BOOL v14 = v81++ > 8;
            if (v14)
            {
              LODWORD(v52) = 0;
LABEL_225:
              unint64_t v2 = v82 + 1;
              goto LABEL_226;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v52) = 0;
          }
          goto LABEL_225;
        }
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        do
        {
          unint64_t v2 = v48 + 1;
          *((void *)a2 + 1) = v48 + 1;
          char v53 = *(unsigned char *)(v49 + v48);
          v52 |= (unint64_t)(v53 & 0x7F) << v50;
          if ((v53 & 0x80) == 0) {
            goto LABEL_226;
          }
          v50 += 7;
          unint64_t v48 = v2;
          BOOL v14 = v51++ > 8;
        }
        while (!v14);
        LODWORD(v52) = 0;
LABEL_226:
        *((_DWORD *)this + 48) = v52;
        break;
      case 0x12u:
        *((void *)this + 28) |= 0x1000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x13u:
        *((void *)this + 28) |= 0x2000000uLL;
        unint64_t v54 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v55 = *(void *)a2;
        if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
        {
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v58 = 0;
          if (v2 <= v54) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v54)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_231;
            }
            unint64_t v86 = v54++;
            char v87 = *(unsigned char *)(v55 + v86);
            *((void *)a2 + 1) = v54;
            v58 |= (unint64_t)(v87 & 0x7F) << v84;
            if ((v87 & 0x80) == 0) {
              break;
            }
            v84 += 7;
            BOOL v14 = v85++ > 8;
            if (v14)
            {
              LODWORD(v58) = 0;
LABEL_230:
              unint64_t v2 = v86 + 1;
              goto LABEL_231;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v58) = 0;
          }
          goto LABEL_230;
        }
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v58 = 0;
        do
        {
          unint64_t v2 = v54 + 1;
          *((void *)a2 + 1) = v54 + 1;
          char v59 = *(unsigned char *)(v55 + v54);
          v58 |= (unint64_t)(v59 & 0x7F) << v56;
          if ((v59 & 0x80) == 0) {
            goto LABEL_231;
          }
          v56 += 7;
          unint64_t v54 = v2;
          BOOL v14 = v57++ > 8;
        }
        while (!v14);
        LODWORD(v58) = 0;
LABEL_231:
        *((_DWORD *)this + 50) = v58;
        break;
      case 0x14u:
        *((void *)this + 28) |= 0x1000000uLL;
        unint64_t v60 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v61 = *(void *)a2;
        if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v64 = 0;
          if (v2 <= v60) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v60)
            {
              LODWORD(v64) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_236;
            }
            unint64_t v90 = v60++;
            char v91 = *(unsigned char *)(v61 + v90);
            *((void *)a2 + 1) = v60;
            v64 |= (unint64_t)(v91 & 0x7F) << v88;
            if ((v91 & 0x80) == 0) {
              break;
            }
            v88 += 7;
            BOOL v14 = v89++ > 8;
            if (v14)
            {
              LODWORD(v64) = 0;
LABEL_235:
              unint64_t v2 = v90 + 1;
              goto LABEL_236;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v64) = 0;
          }
          goto LABEL_235;
        }
        char v62 = 0;
        unsigned int v63 = 0;
        uint64_t v64 = 0;
        do
        {
          unint64_t v2 = v60 + 1;
          *((void *)a2 + 1) = v60 + 1;
          char v65 = *(unsigned char *)(v61 + v60);
          v64 |= (unint64_t)(v65 & 0x7F) << v62;
          if ((v65 & 0x80) == 0) {
            goto LABEL_236;
          }
          v62 += 7;
          unint64_t v60 = v2;
          BOOL v14 = v63++ > 8;
        }
        while (!v14);
        LODWORD(v64) = 0;
LABEL_236:
        *((_DWORD *)this + 49) = v64;
        break;
      case 0x15u:
        *((void *)this + 28) |= 8uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x16u:
        *((void *)this + 28) |= 4uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x17u:
        *((void *)this + 28) |= 0x10uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x18u:
        *((void *)this + 28) |= 0x100000000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v67 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v66 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v67 = v66 != 0;
        }
        *((unsigned char *)this + 219) = v67;
        break;
      case 0x19u:
        *((void *)this + 28) |= 0x100uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x1Au:
        *((void *)this + 28) |= 0x800uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x1Bu:
        *((void *)this + 28) |= 0x10000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x1Cu:
        *((void *)this + 28) |= 0x20000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x1Du:
        *((void *)this + 28) |= 0x20uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x1Eu:
        *((void *)this + 28) |= 0x400000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 23) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x1Fu:
        *((void *)this + 28) |= 0x2000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x20u:
        *((void *)this + 28) |= 0x100000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x21u:
        *((void *)this + 28) |= 0x200uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x22u:
        *((void *)this + 28) |= 0x200000uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_145;
        }
        *((void *)this + 22) = *(void *)(*(void *)a2 + v2);
        goto LABEL_201;
      case 0x23u:
        *((void *)this + 28) |= 0x400uLL;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
LABEL_201:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_145:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_202:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningFormMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 224);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    uint64_t v4 = *(void *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(double *)(v3 + 184));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
LABEL_70:
    this = PB::Writer::write(a2, *(double *)(v3 + 176));
    if ((*(void *)(v3 + 224) & 0x400) == 0) {
      return this;
    }
    goto LABEL_71;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000) != 0) {
    goto LABEL_70;
  }
LABEL_35:
  if ((v4 & 0x400) == 0) {
    return this;
  }
LABEL_71:
  double v5 = *(double *)(v3 + 88);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningFormMetrics::hash_value(CMMsl::RunningFormMetrics *this)
{
  uint64_t v1 = *((void *)this + 28);
  if ((v1 & 0x40) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_95:
    double v41 = 0.0;
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_96;
  }
  if (*((double *)this + 7) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 7);
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_95;
  }
LABEL_3:
  double v3 = *((double *)this + 8);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v41 = v3;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_6:
    uint64_t v40 = *((unsigned __int8 *)this + 220);
    if ((v1 & 2) != 0) {
      goto LABEL_7;
    }
LABEL_97:
    double v39 = 0.0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_98;
  }
LABEL_96:
  uint64_t v40 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_97;
  }
LABEL_7:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  double v39 = v4;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_10:
    uint64_t v38 = *((unsigned __int8 *)this + 217);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_11;
    }
LABEL_99:
    double v37 = 0.0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_100;
  }
LABEL_98:
  uint64_t v38 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_99;
  }
LABEL_11:
  double v5 = *((double *)this + 20);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v37 = v5;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_14:
    uint64_t v36 = *((unsigned __int8 *)this + 221);
    if (v1) {
      goto LABEL_15;
    }
LABEL_101:
    double v35 = 0.0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_102;
  }
LABEL_100:
  uint64_t v36 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_101;
  }
LABEL_15:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v35 = v6;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_18:
    uint64_t v34 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v34 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_19:
    uint64_t v7 = *((unsigned __int8 *)this + 218);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_20;
    }
LABEL_104:
    uint64_t v8 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_24;
    }
LABEL_105:
    uint64_t v9 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_28;
    }
LABEL_106:
    uint64_t v10 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_107;
  }
LABEL_103:
  uint64_t v7 = 0;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_104;
  }
LABEL_20:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 16);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_105;
  }
LABEL_24:
  if (*((double *)this + 19) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 19);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_106;
  }
LABEL_28:
  if (*((double *)this + 15) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 15);
  }
  if ((v1 & 0x8000000) != 0)
  {
LABEL_32:
    uint64_t v11 = *((int *)this + 52);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_108;
  }
LABEL_107:
  uint64_t v11 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_33:
    uint64_t v12 = *((int *)this + 51);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_109;
  }
LABEL_108:
  uint64_t v12 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_34:
    uint64_t v13 = *((int *)this + 53);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v13 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    uint64_t v14 = *((int *)this + 48);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_36;
    }
LABEL_111:
    uint64_t v15 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_112;
  }
LABEL_110:
  uint64_t v14 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_111;
  }
LABEL_36:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *((void *)this + 13);
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_40:
    uint64_t v16 = *((int *)this + 50);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_41:
    uint64_t v17 = *((int *)this + 49);
    if ((v1 & 8) != 0) {
      goto LABEL_42;
    }
LABEL_114:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_46;
    }
LABEL_115:
    uint64_t v19 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_50;
    }
LABEL_116:
    uint64_t v20 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_117;
  }
LABEL_113:
  uint64_t v17 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_114;
  }
LABEL_42:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *((void *)this + 4);
  }
  if ((v1 & 4) == 0) {
    goto LABEL_115;
  }
LABEL_46:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *((void *)this + 3);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_116;
  }
LABEL_50:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *((void *)this + 5);
  }
  if ((v1 & 0x100000000) != 0)
  {
LABEL_54:
    uint64_t v21 = *((unsigned __int8 *)this + 219);
    if ((v1 & 0x100) != 0) {
      goto LABEL_55;
    }
LABEL_118:
    uint64_t v22 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_59;
    }
LABEL_119:
    uint64_t v23 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_63;
    }
LABEL_120:
    uint64_t v24 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_67;
    }
LABEL_121:
    double v25 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_70;
    }
LABEL_122:
    double v26 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_73;
    }
LABEL_123:
    double v27 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_76;
    }
LABEL_124:
    double v28 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_79;
    }
LABEL_125:
    double v29 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_82;
    }
LABEL_126:
    double v30 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_127;
  }
LABEL_117:
  uint64_t v21 = 0;
  if ((v1 & 0x100) == 0) {
    goto LABEL_118;
  }
LABEL_55:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 9);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_119;
  }
LABEL_59:
  if (*((double *)this + 12) == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *((void *)this + 12);
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_120;
  }
LABEL_63:
  if (*((double *)this + 17) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 17);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_121;
  }
LABEL_67:
  double v25 = *((double *)this + 18);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_122;
  }
LABEL_70:
  double v26 = *((double *)this + 6);
  if (v26 == 0.0) {
    double v26 = 0.0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_123;
  }
LABEL_73:
  double v27 = *((double *)this + 23);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_124;
  }
LABEL_76:
  double v28 = *((double *)this + 14);
  if (v28 == 0.0) {
    double v28 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_125;
  }
LABEL_79:
  double v29 = *((double *)this + 21);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_126;
  }
LABEL_82:
  double v30 = *((double *)this + 10);
  if (v30 == 0.0) {
    double v30 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_85:
    double v31 = *((double *)this + 22);
    if (v31 == 0.0) {
      double v31 = 0.0;
    }
    if ((v1 & 0x400) != 0) {
      goto LABEL_88;
    }
LABEL_128:
    double v32 = 0.0;
    return *(void *)&v41 ^ v2 ^ v40 ^ *(void *)&v39 ^ v38 ^ *(void *)&v37 ^ v36 ^ *(void *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30 ^ *(void *)&v31 ^ *(void *)&v32;
  }
LABEL_127:
  double v31 = 0.0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_128;
  }
LABEL_88:
  double v32 = *((double *)this + 11);
  if (v32 == 0.0) {
    double v32 = 0.0;
  }
  return *(void *)&v41 ^ v2 ^ v40 ^ *(void *)&v39 ^ v38 ^ *(void *)&v37 ^ v36 ^ *(void *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ *(void *)&v29 ^ *(void *)&v30 ^ *(void *)&v31 ^ *(void *)&v32;
}

void CMMsl::RunningPower::~RunningPower(CMMsl::RunningPower *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this, const CMMsl::RunningPower *a2)
{
  *(void *)this = &unk_270644900;
  *(_DWORD *)(this + 128) = 0;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    int v3 = 64;
    *(_DWORD *)(this + 128) = 64;
    *(void *)(this + 56) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 128) = v3;
    *(void *)(this + 48) = v5;
    int v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    uint64_t v6 = *((void *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 128) = v3;
    *(void *)(this + 72) = v6;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 124) = v7;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v8 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 96) = v8;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 88) = v9;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v10;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v11 = *((_DWORD *)a2 + 26);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v11;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 16) = v12;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v13 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 32) = v13;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v14 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 24) = v14;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v15 = *((unsigned char *)a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 123) = v15;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v16 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 40) = v16;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v17 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 80) = v17;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v18 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 64) = v18;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v19 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(void *)(this + 8) = v19;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  char v20 = *((unsigned char *)a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 125) = v20;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v21 = *((unsigned char *)a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 121) = v21;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v22;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v23 = *((unsigned char *)a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 120) = v23;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      return this;
    }
LABEL_46:
    int v25 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 128) = v3 | 0x4000;
    *(_DWORD *)(this + 112) = v25;
    return this;
  }
LABEL_45:
  char v24 = *((unsigned char *)a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(unsigned char *)(this + 122) = v24;
  if ((*((_DWORD *)a2 + 32) & 0x4000) != 0) {
    goto LABEL_46;
  }
  return this;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, const CMMsl::RunningPower *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningPower *a2, CMMsl::RunningPower *a3)
{
  int v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 124);
  *((unsigned char *)this + 124) = *((unsigned char *)a2 + 124);
  *((unsigned char *)a2 + 124) = v3;
  uint64_t v7 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  int v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  int v10 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v13;
  LOBYTE(v10) = *((unsigned char *)this + 123);
  *((unsigned char *)this + 123) = *((unsigned char *)a2 + 123);
  *((unsigned char *)a2 + 123) = v10;
  uint64_t v14 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v14;
  uint64_t v15 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v16;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v10) = *((unsigned char *)this + 125);
  *((unsigned char *)this + 125) = *((unsigned char *)a2 + 125);
  *((unsigned char *)a2 + 125) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 121);
  *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
  *((unsigned char *)a2 + 121) = v10;
  int v18 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v18;
  LOBYTE(v18) = *((unsigned char *)this + 120);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = v18;
  LOBYTE(v18) = *((unsigned char *)this + 122);
  *((unsigned char *)this + 122) = *((unsigned char *)a2 + 122);
  *((unsigned char *)a2 + 122) = v18;
  int v19 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v19;
  return result;
}

double CMMsl::RunningPower::RunningPower(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644900;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 125) = *(unsigned char *)(a2 + 125);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return result;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningPower::formatText(CMMsl::RunningPower *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "activityType");
    int v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "elevationSource");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "eta", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "gradeOnsetCounter");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "horizSpeed", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isArmConstrainedStateValid");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isGradeOnsetEscalated");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isRunning");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isValid");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "isWeightSet");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "isWorkoutSelected");
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "powerWattage", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "userHeight", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userWeight", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_22:
    if ((v5 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "wLoad", *((double *)this + 11));
  if ((*((_DWORD *)this + 32) & 0x800) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "workrateMETs", *((double *)this + 12));
LABEL_24:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningPower::readFrom(CMMsl::RunningPower *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_161;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 32) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 2u:
        *((_DWORD *)this + 32) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 3u:
        *((_DWORD *)this + 32) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 4u:
        *((_DWORD *)this + 32) |= 0x100000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 124) = v21;
        break;
      case 5u:
        *((_DWORD *)this + 32) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 6u:
        *((_DWORD *)this + 32) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 7u:
        *((_DWORD *)this + 32) |= 0x2000u;
        unint64_t v22 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v26 = 0;
          if (v2 <= v22) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v22)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_145;
            }
            unint64_t v58 = v22++;
            char v59 = *(unsigned char *)(v23 + v58);
            *((void *)a2 + 1) = v22;
            v26 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v26) = 0;
LABEL_144:
              unint64_t v2 = v58 + 1;
              goto LABEL_145;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
          goto LABEL_144;
        }
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        do
        {
          unint64_t v2 = v22 + 1;
          *((void *)a2 + 1) = v22 + 1;
          char v27 = *(unsigned char *)(v23 + v22);
          v26 |= (unint64_t)(v27 & 0x7F) << v24;
          if ((v27 & 0x80) == 0) {
            goto LABEL_145;
          }
          v24 += 7;
          unint64_t v22 = v2;
          BOOL v14 = v25++ > 8;
        }
        while (!v14);
        LODWORD(v26) = 0;
LABEL_145:
        *((_DWORD *)this + 27) = v26;
        break;
      case 8u:
        *((_DWORD *)this + 32) |= 0x1000u;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v29 = *(void *)a2;
        if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
        {
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v32 = 0;
          if (v2 <= v28) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v28)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_150;
            }
            unint64_t v62 = v28++;
            char v63 = *(unsigned char *)(v29 + v62);
            *((void *)a2 + 1) = v28;
            v32 |= (unint64_t)(v63 & 0x7F) << v60;
            if ((v63 & 0x80) == 0) {
              break;
            }
            v60 += 7;
            BOOL v14 = v61++ > 8;
            if (v14)
            {
              LODWORD(v32) = 0;
LABEL_149:
              unint64_t v2 = v62 + 1;
              goto LABEL_150;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v32) = 0;
          }
          goto LABEL_149;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        do
        {
          unint64_t v2 = v28 + 1;
          *((void *)a2 + 1) = v28 + 1;
          char v33 = *(unsigned char *)(v29 + v28);
          v32 |= (unint64_t)(v33 & 0x7F) << v30;
          if ((v33 & 0x80) == 0) {
            goto LABEL_150;
          }
          v30 += 7;
          unint64_t v28 = v2;
          BOOL v14 = v31++ > 8;
        }
        while (!v14);
        LODWORD(v32) = 0;
LABEL_150:
        *((_DWORD *)this + 26) = v32;
        break;
      case 9u:
        *((_DWORD *)this + 32) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 0xAu:
        *((_DWORD *)this + 32) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 0xBu:
        *((_DWORD *)this + 32) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 0xCu:
        *((_DWORD *)this + 32) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v35 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v34 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v35 = v34 != 0;
        }
        *((unsigned char *)this + 123) = v35;
        break;
      case 0xDu:
        *((_DWORD *)this + 32) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 0xEu:
        *((_DWORD *)this + 32) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 0xFu:
        *((_DWORD *)this + 32) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_140;
      case 0x10u:
        *((_DWORD *)this + 32) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_140:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x11u:
        *((_DWORD *)this + 32) |= 0x200000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v37 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v36 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v37 = v36 != 0;
        }
        *((unsigned char *)this + 125) = v37;
        break;
      case 0x12u:
        *((_DWORD *)this + 32) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v39 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v38 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v39 = v38 != 0;
        }
        *((unsigned char *)this + 121) = v39;
        break;
      case 0x13u:
        *((_DWORD *)this + 32) |= 0x8000u;
        unint64_t v40 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v2)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v44 = 0;
          if (v2 <= v40) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v40)
            {
              LODWORD(v44) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_155;
            }
            unint64_t v66 = v40++;
            char v67 = *(unsigned char *)(v41 + v66);
            *((void *)a2 + 1) = v40;
            v44 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v14 = v65++ > 8;
            if (v14)
            {
              LODWORD(v44) = 0;
LABEL_154:
              unint64_t v2 = v66 + 1;
              goto LABEL_155;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v44) = 0;
          }
          goto LABEL_154;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          unint64_t v2 = v40 + 1;
          *((void *)a2 + 1) = v40 + 1;
          char v45 = *(unsigned char *)(v41 + v40);
          v44 |= (unint64_t)(v45 & 0x7F) << v42;
          if ((v45 & 0x80) == 0) {
            goto LABEL_155;
          }
          v42 += 7;
          unint64_t v40 = v2;
          BOOL v14 = v43++ > 8;
        }
        while (!v14);
        LODWORD(v44) = 0;
LABEL_155:
        *((_DWORD *)this + 29) = v44;
        break;
      case 0x14u:
        *((_DWORD *)this + 32) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 120) = v47;
        break;
      case 0x15u:
        *((_DWORD *)this + 32) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v49 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v48 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v49 = v48 != 0;
        }
        *((unsigned char *)this + 122) = v49;
        break;
      case 0x16u:
        *((_DWORD *)this + 32) |= 0x4000u;
        unint64_t v50 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v51 = *(void *)a2;
        if (v50 > 0xFFFFFFFFFFFFFFF5 || v50 + 10 > v2)
        {
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v54 = 0;
          if (v2 <= v50) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v50)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_160;
            }
            unint64_t v70 = v50++;
            char v71 = *(unsigned char *)(v51 + v70);
            *((void *)a2 + 1) = v50;
            v54 |= (unint64_t)(v71 & 0x7F) << v68;
            if ((v71 & 0x80) == 0) {
              break;
            }
            v68 += 7;
            BOOL v14 = v69++ > 8;
            if (v14)
            {
              LODWORD(v54) = 0;
LABEL_159:
              unint64_t v2 = v70 + 1;
              goto LABEL_160;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v54) = 0;
          }
          goto LABEL_159;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        do
        {
          unint64_t v2 = v50 + 1;
          *((void *)a2 + 1) = v50 + 1;
          char v55 = *(unsigned char *)(v51 + v50);
          v54 |= (unint64_t)(v55 & 0x7F) << v52;
          if ((v55 & 0x80) == 0) {
            goto LABEL_160;
          }
          v52 += 7;
          unint64_t v50 = v2;
          BOOL v14 = v53++ > 8;
        }
        while (!v14);
        LODWORD(v54) = 0;
LABEL_160:
        *((_DWORD *)this + 28) = v54;
        break;
      default:
        goto LABEL_19;
    }
LABEL_161:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningPower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 128);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56));
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    this = PB::Writer::write(a2);
    if ((*(_DWORD *)(v3 + 128) & 0x4000) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_43:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x4000) == 0) {
    return this;
  }
LABEL_45:
  return PB::Writer::writeVarInt(a2);
}

uint64_t CMMsl::RunningPower::hash_value(CMMsl::RunningPower *this)
{
  int v1 = *((_DWORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_49:
    double v3 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_6;
    }
LABEL_50:
    double v4 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_49;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_50;
  }
LABEL_6:
  double v4 = *((double *)this + 9);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_9:
    uint64_t v5 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x800) != 0) {
      goto LABEL_10;
    }
LABEL_52:
    double v6 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_13;
    }
LABEL_53:
    double v7 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_51:
  uint64_t v5 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_52;
  }
LABEL_10:
  double v6 = *((double *)this + 12);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_13:
  double v7 = *((double *)this + 11);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x2000) != 0)
  {
LABEL_16:
    uint64_t v8 = *((int *)this + 27);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_17:
    uint64_t v9 = *((int *)this + 26);
    if ((v1 & 2) != 0) {
      goto LABEL_18;
    }
LABEL_56:
    double v10 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_57:
    double v11 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_24;
    }
LABEL_58:
    double v12 = 0.0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_55:
  uint64_t v9 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_56;
  }
LABEL_18:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_57;
  }
LABEL_21:
  double v11 = *((double *)this + 4);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_58;
  }
LABEL_24:
  double v12 = *((double *)this + 3);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_27:
    uint64_t v13 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x10) != 0) {
      goto LABEL_28;
    }
LABEL_60:
    double v14 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_31;
    }
LABEL_61:
    double v15 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_34;
    }
LABEL_62:
    double v16 = 0.0;
    if (v1) {
      goto LABEL_37;
    }
LABEL_63:
    double v17 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_64;
  }
LABEL_59:
  uint64_t v13 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_60;
  }
LABEL_28:
  double v14 = *((double *)this + 5);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_31:
  double v15 = *((double *)this + 10);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_34:
  double v16 = *((double *)this + 8);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_37:
  double v17 = *((double *)this + 1);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_40:
    uint64_t v18 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v18 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    uint64_t v19 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v19 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_42:
    uint64_t v20 = *((int *)this + 29);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v20 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    uint64_t v21 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_44;
    }
LABEL_68:
    uint64_t v22 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_45;
    }
LABEL_69:
    uint64_t v23 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
  }
LABEL_67:
  uint64_t v21 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_68;
  }
LABEL_44:
  uint64_t v22 = *((unsigned __int8 *)this + 122);
  if ((v1 & 0x4000) == 0) {
    goto LABEL_69;
  }
LABEL_45:
  uint64_t v23 = *((int *)this + 28);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
}

void CMMsl::RunningRotationAxis::~RunningRotationAxis(CMMsl::RunningRotationAxis *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(CMMsl::RunningRotationAxis *this, const CMMsl::RunningRotationAxis *a2)
{
  *(void *)this = &unk_270644938;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    char v3 = 8;
    *((unsigned char *)this + 48) = 8;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if (v2)
  {
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return result;
      }
LABEL_12:
      double result = *((double *)a2 + 3);
      *((unsigned char *)this + 48) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((unsigned char *)this + 48) = v3;
  *((double *)this + 2) = result;
  if ((*((unsigned char *)a2 + 48) & 4) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, const CMMsl::RunningRotationAxis *a2)
{
  if ((const CMMsl::RunningRotationAxis *)a1 != a2)
  {
    CMMsl::RunningRotationAxis::RunningRotationAxis((CMMsl::RunningRotationAxis *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v5;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningRotationAxis *a2, CMMsl::RunningRotationAxis *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644938;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_270644938;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = &unk_270644938;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    uint64_t v4 = *(void *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(void *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v8;
    long long v11 = v5;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::RunningRotationAxis::formatText(CMMsl::RunningRotationAxis *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "primaryAxisX", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "primaryAxisY", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "primaryAxisZ", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  if ((*((unsigned char *)this + 48) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_7:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningRotationAxis::readFrom(CMMsl::RunningRotationAxis *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_40;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 48) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 2u:
        *((unsigned char *)this + 48) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 3u:
        *((unsigned char *)this + 48) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 4u:
        *((unsigned char *)this + 48) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_37;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_39;
      case 5u:
        *((unsigned char *)this + 48) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_39:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_37:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_40:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningRotationAxis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 48) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningRotationAxis::hash_value(CMMsl::RunningRotationAxis *this)
{
  if ((*((unsigned char *)this + 48) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    double v2 = 0.0;
    if (*((unsigned char *)this + 48)) {
      goto LABEL_6;
    }
LABEL_19:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  double v2 = *((double *)this + 5);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
LABEL_9:
    double v4 = *((double *)this + 2);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_12;
    }
LABEL_21:
    double v5 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
  }
LABEL_20:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 48) & 4) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ *(void *)&v5;
}

void CMMsl::RunningSpeedKFResult::~RunningSpeedKFResult(CMMsl::RunningSpeedKFResult *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this, const CMMsl::RunningSpeedKFResult *a2)
{
  *(void *)this = &unk_270644970;
  *(_DWORD *)(this + 188) = 0;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x80000) != 0)
  {
    uint64_t v4 = *((void *)a2 + 20);
    int v3 = 0x80000;
    *(_DWORD *)(this + 188) = 0x80000;
    *(void *)(this + 160) = v4;
    int v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 188) = v3;
    *(void *)(this + 64) = v5;
    int v2 = *((_DWORD *)a2 + 47);
  }
LABEL_6:
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v6 = *((void *)a2 + 19);
    v3 |= 0x40000u;
    *(_DWORD *)(this + 188) = v3;
    *(void *)(this + 152) = v6;
    int v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 184) = v7;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v8 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 144) = v8;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v9 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 136) = v9;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v10 = *((unsigned char *)a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 182) = v10;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  char v11 = *((unsigned char *)a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 183) = v11;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v12 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 56) = v12;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v13 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 32) = v13;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v14 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 48) = v14;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 40) = v15;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 8) = v16;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 16) = v17;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v18 = *((void *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 128) = v18;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v19 = *((void *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 120) = v19;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v20 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 72) = v20;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v21 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 80) = v21;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v22 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 24) = v22;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v23 = *((_DWORD *)a2 + 44);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v23;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v24;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v25 = *((_DWORD *)a2 + 43);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v25;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v26 = *((unsigned char *)a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 188) = v3;
  *(unsigned char *)(this + 180) = v26;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v27 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 104) = v27;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v28 = *((void *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 112) = v28;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v29 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 88) = v29;
  int v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0) {
      return this;
    }
LABEL_58:
    char v31 = *((unsigned char *)a2 + 181);
    *(_DWORD *)(this + 188) = v3 | 0x1000000;
    *(unsigned char *)(this + 181) = v31;
    return this;
  }
LABEL_57:
  uint64_t v30 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 188) = v3;
  *(void *)(this + 96) = v30;
  if ((*((_DWORD *)a2 + 47) & 0x1000000) != 0) {
    goto LABEL_58;
  }
  return this;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, const CMMsl::RunningSpeedKFResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningSpeedKFResult *a2, CMMsl::RunningSpeedKFResult *a3)
{
  int v3 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v3;
  uint64_t v4 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v4;
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 184);
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((unsigned char *)a2 + 184) = v3;
  uint64_t v7 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v7;
  uint64_t v8 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v8;
  LOBYTE(v3) = *((unsigned char *)this + 182);
  *((unsigned char *)this + 182) = *((unsigned char *)a2 + 182);
  *((unsigned char *)a2 + 182) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 183);
  *((unsigned char *)this + 183) = *((unsigned char *)a2 + 183);
  *((unsigned char *)a2 + 183) = v3;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v14;
  uint64_t v15 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v15;
  uint64_t v16 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v16;
  uint64_t v17 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v17;
  uint64_t v18 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  int v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  int v21 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v21;
  int v22 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v22;
  LOBYTE(v22) = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  *((unsigned char *)a2 + 180) = v22;
  uint64_t v23 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v23;
  uint64_t v24 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v24;
  uint64_t v25 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v25;
  double result = *((double *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((double *)a2 + 12) = result;
  LOBYTE(v22) = *((unsigned char *)this + 181);
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  *((unsigned char *)a2 + 181) = v22;
  return result;
}

double CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270644970;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a2 + 188) = 0;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 182) = *(unsigned char *)(a2 + 182);
  *(unsigned char *)(a1 + 183) = *(unsigned char *)(a2 + 183);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  double result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  return result;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningSpeedKFResult::formatText(CMMsl::RunningSpeedKFResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 47);
  if (v5)
  {
    PB::TextFormatter::format(a2, "algDelay", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 47);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasFactor", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "deltaCalibratedPedometerDistance", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "deltaOdometerDistance", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaOdometerTime", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "deltaPedometerTime", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "deltaRawPedometerDistance", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gestureState");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "gestureType");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "interruptFlag");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isTrackRunOdometer");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isValidOdometerSpeed");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isValidPedometerSpeed");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isValidRunningSpeed");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "kalmanEpsOdometer", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "kalmanEpsPedometer", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "kalmanGainOdometer", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "kalmanGainPedometer", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoiseOdometer", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoisePedometer", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "kalmanProcessNoise", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "kalmanStateCovariance", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "odometerQuality");
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "pedometerSpeed", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "runningSpeed", *((double *)this + 19));
  if ((*((_DWORD *)this + 47) & 0x80000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 20));
LABEL_30:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningSpeedKFResult::readFrom(CMMsl::RunningSpeedKFResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_147;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 47) |= 0x80000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 2u:
        *((_DWORD *)this + 47) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 3u:
        *((_DWORD *)this + 47) |= 0x40000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 4u:
        *((_DWORD *)this + 47) |= 0x8000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 184) = v21;
        break;
      case 5u:
        *((_DWORD *)this + 47) |= 0x20000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 6u:
        *((_DWORD *)this + 47) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 7u:
        *((_DWORD *)this + 47) |= 0x2000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v23 = v22 != 0;
        }
        *((unsigned char *)this + 182) = v23;
        break;
      case 8u:
        *((_DWORD *)this + 47) |= 0x4000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v24 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v25 = v24 != 0;
        }
        *((unsigned char *)this + 183) = v25;
        break;
      case 9u:
        *((_DWORD *)this + 47) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0xAu:
        *((_DWORD *)this + 47) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0xBu:
        *((_DWORD *)this + 47) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0xCu:
        *((_DWORD *)this + 47) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0xDu:
        *((_DWORD *)this + 47) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0xEu:
        *((_DWORD *)this + 47) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0xFu:
        *((_DWORD *)this + 47) |= 0x8000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x10u:
        *((_DWORD *)this + 47) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x11u:
        *((_DWORD *)this + 47) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x12u:
        *((_DWORD *)this + 47) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x13u:
        *((_DWORD *)this + 47) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x14u:
        *((_DWORD *)this + 47) |= 0x400000u;
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_156;
            }
            unint64_t v50 = v26++;
            char v51 = *(unsigned char *)(v27 + v50);
            *((void *)a2 + 1) = v26;
            v30 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
LABEL_155:
              unint64_t v2 = v50 + 1;
              goto LABEL_156;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
          goto LABEL_155;
        }
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          unint64_t v2 = v26 + 1;
          *((void *)a2 + 1) = v26 + 1;
          char v31 = *(unsigned char *)(v27 + v26);
          v30 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_156;
          }
          v28 += 7;
          unint64_t v26 = v2;
          BOOL v14 = v29++ > 8;
        }
        while (!v14);
        LODWORD(v30) = 0;
LABEL_156:
        *((_DWORD *)this + 44) = v30;
        break;
      case 0x15u:
        *((_DWORD *)this + 47) |= 0x100000u;
        unint64_t v32 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v33 = *(void *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
        {
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v36 = 0;
          if (v2 <= v32) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v32)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_161;
            }
            unint64_t v54 = v32++;
            char v55 = *(unsigned char *)(v33 + v54);
            *((void *)a2 + 1) = v32;
            v36 |= (unint64_t)(v55 & 0x7F) << v52;
            if ((v55 & 0x80) == 0) {
              break;
            }
            v52 += 7;
            BOOL v14 = v53++ > 8;
            if (v14)
            {
              LODWORD(v36) = 0;
LABEL_160:
              unint64_t v2 = v54 + 1;
              goto LABEL_161;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v36) = 0;
          }
          goto LABEL_160;
        }
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        do
        {
          unint64_t v2 = v32 + 1;
          *((void *)a2 + 1) = v32 + 1;
          char v37 = *(unsigned char *)(v33 + v32);
          v36 |= (unint64_t)(v37 & 0x7F) << v34;
          if ((v37 & 0x80) == 0) {
            goto LABEL_161;
          }
          v34 += 7;
          unint64_t v32 = v2;
          BOOL v14 = v35++ > 8;
        }
        while (!v14);
        LODWORD(v36) = 0;
LABEL_161:
        *((_DWORD *)this + 42) = v36;
        break;
      case 0x16u:
        *((_DWORD *)this + 47) |= 0x200000u;
        unint64_t v38 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v39 = *(void *)a2;
        if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v42 = 0;
          if (v2 <= v38) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v38)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_166;
            }
            unint64_t v58 = v38++;
            char v59 = *(unsigned char *)(v39 + v58);
            *((void *)a2 + 1) = v38;
            v42 |= (unint64_t)(v59 & 0x7F) << v56;
            if ((v59 & 0x80) == 0) {
              break;
            }
            v56 += 7;
            BOOL v14 = v57++ > 8;
            if (v14)
            {
              LODWORD(v42) = 0;
LABEL_165:
              unint64_t v2 = v58 + 1;
              goto LABEL_166;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v42) = 0;
          }
          goto LABEL_165;
        }
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        do
        {
          unint64_t v2 = v38 + 1;
          *((void *)a2 + 1) = v38 + 1;
          char v43 = *(unsigned char *)(v39 + v38);
          v42 |= (unint64_t)(v43 & 0x7F) << v40;
          if ((v43 & 0x80) == 0) {
            goto LABEL_166;
          }
          v40 += 7;
          unint64_t v38 = v2;
          BOOL v14 = v41++ > 8;
        }
        while (!v14);
        LODWORD(v42) = 0;
LABEL_166:
        *((_DWORD *)this + 43) = v42;
        break;
      case 0x17u:
        *((_DWORD *)this + 47) |= 0x800000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v45 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v45 = v44 != 0;
        }
        *((unsigned char *)this + 180) = v45;
        break;
      case 0x18u:
        *((_DWORD *)this + 47) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x19u:
        *((_DWORD *)this + 47) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x1Au:
        *((_DWORD *)this + 47) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_111;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_146;
      case 0x1Bu:
        *((_DWORD *)this + 47) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
LABEL_146:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_111:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 0x1Cu:
        *((_DWORD *)this + 47) |= 0x1000000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v47 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v46 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v47 = v46 != 0;
        }
        *((unsigned char *)this + 181) = v47;
        break;
      default:
        goto LABEL_19;
    }
LABEL_147:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningSpeedKFResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 188);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160));
    int v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
LABEL_56:
    this = PB::Writer::write(a2, *(double *)(v3 + 96));
    if ((*(_DWORD *)(v3 + 188) & 0x1000000) == 0) {
      return this;
    }
    goto LABEL_57;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) != 0) {
    goto LABEL_56;
  }
LABEL_28:
  if ((v4 & 0x1000000) == 0) {
    return this;
  }
LABEL_57:
  return PB::Writer::write(a2);
}

uint64_t CMMsl::RunningSpeedKFResult::hash_value(CMMsl::RunningSpeedKFResult *this)
{
  int v1 = *((_DWORD *)this + 47);
  if ((v1 & 0x80000) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_71:
    double v3 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_6;
    }
LABEL_72:
    double v4 = 0.0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_73;
  }
  double v2 = *((double *)this + 20);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_71;
  }
LABEL_3:
  double v3 = *((double *)this + 8);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_72;
  }
LABEL_6:
  double v4 = *((double *)this + 19);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x8000000) != 0)
  {
LABEL_9:
    uint64_t v5 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_10;
    }
LABEL_74:
    double v6 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_13;
    }
LABEL_75:
    double v7 = 0.0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_73:
  uint64_t v5 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_74;
  }
LABEL_10:
  double v6 = *((double *)this + 18);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_75;
  }
LABEL_13:
  double v7 = *((double *)this + 17);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_16:
    uint64_t v8 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v8 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_17:
    uint64_t v9 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_78:
    double v10 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_79:
    double v11 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_80:
    double v12 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_81:
    double v13 = 0.0;
    if (v1) {
      goto LABEL_30;
    }
LABEL_82:
    double v14 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_33;
    }
LABEL_83:
    double v15 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_36;
    }
LABEL_84:
    double v16 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_39;
    }
LABEL_85:
    double v17 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_42;
    }
LABEL_86:
    double v18 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_45;
    }
LABEL_87:
    double v19 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_48;
    }
LABEL_88:
    double v20 = 0.0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_89;
  }
LABEL_77:
  uint64_t v9 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_78;
  }
LABEL_18:
  double v10 = *((double *)this + 7);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_79;
  }
LABEL_21:
  double v11 = *((double *)this + 4);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_80;
  }
LABEL_24:
  double v12 = *((double *)this + 6);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_81;
  }
LABEL_27:
  double v13 = *((double *)this + 5);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_82;
  }
LABEL_30:
  double v14 = *((double *)this + 1);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_83;
  }
LABEL_33:
  double v15 = *((double *)this + 2);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_84;
  }
LABEL_36:
  double v16 = *((double *)this + 16);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_85;
  }
LABEL_39:
  double v17 = *((double *)this + 15);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_86;
  }
LABEL_42:
  double v18 = *((double *)this + 9);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_87;
  }
LABEL_45:
  double v19 = *((double *)this + 10);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_88;
  }
LABEL_48:
  double v20 = *((double *)this + 3);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x400000) != 0)
  {
LABEL_51:
    uint64_t v21 = *((int *)this + 44);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_52;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v21 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_52:
    uint64_t v22 = *((int *)this + 42);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v22 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_53:
    uint64_t v23 = *((int *)this + 43);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v23 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_54:
    uint64_t v24 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_55;
    }
LABEL_93:
    double v25 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_58;
    }
LABEL_94:
    double v26 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_61;
    }
LABEL_95:
    double v27 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_64;
    }
    goto LABEL_96;
  }
LABEL_92:
  uint64_t v24 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_93;
  }
LABEL_55:
  double v25 = *((double *)this + 13);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_94;
  }
LABEL_58:
  double v26 = *((double *)this + 14);
  if (v26 == 0.0) {
    double v26 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_95;
  }
LABEL_61:
  double v27 = *((double *)this + 11);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_64:
    double v28 = *((double *)this + 12);
    if (v28 == 0.0) {
      double v28 = 0.0;
    }
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_67;
    }
LABEL_97:
    uint64_t v29 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ v29;
  }
LABEL_96:
  double v28 = 0.0;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_97;
  }
LABEL_67:
  uint64_t v29 = *((unsigned __int8 *)this + 181);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ v8 ^ v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(void *)&v25 ^ *(void *)&v26 ^ *(void *)&v27 ^ *(void *)&v28 ^ v29;
}

void CMMsl::RunningStrideLength::~RunningStrideLength(CMMsl::RunningStrideLength *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningStrideLength::RunningStrideLength(CMMsl::RunningStrideLength *this, const CMMsl::RunningStrideLength *a2)
{
  *(void *)this = &unk_2706449A8;
  *((_DWORD *)this + 34) = 0;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    int v3 = 4;
    *((_DWORD *)this + 34) = 4;
    *((double *)this + 3) = result;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 10);
    v3 |= 0x200u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 10) = result;
    int v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x4000) != 0)
  {
    double result = *((double *)a2 + 15);
    v3 |= 0x4000u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 15) = result;
    int v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 1) = result;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v5 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v5;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  char v6 = *((unsigned char *)a2 + 132);
  v3 |= 0x10000u;
  *((_DWORD *)this + 34) = v3;
  *((unsigned char *)this + 132) = v6;
  int v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_36:
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 34) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_35:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 34) & 2) != 0) {
    goto LABEL_36;
  }
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *a1, const CMMsl::RunningStrideLength *a2)
{
  if (a1 != a2)
  {
    CMMsl::RunningStrideLength::RunningStrideLength((CMMsl::RunningStrideLength *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningStrideLength *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningStrideLength *a2, CMMsl::RunningStrideLength *a3)
{
  int v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v13;
  uint64_t v14 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v14;
  uint64_t v15 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v15;
  uint64_t v16 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v16;
  int v17 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v17;
  LOBYTE(v17) = *((unsigned char *)this + 132);
  *((unsigned char *)this + 132) = *((unsigned char *)a2 + 132);
  *((unsigned char *)a2 + 132) = v17;
  uint64_t v18 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v18;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningStrideLength::RunningStrideLength(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706449A8;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 132) = *(unsigned char *)(a2 + 132);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningStrideLength::RunningStrideLength((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningStrideLength *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningStrideLength::formatText(CMMsl::RunningStrideLength *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "algorithmType");
    int v5 = *((_DWORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alpha", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "cadence", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "formBasedStartTime", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "heightCM", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "horizontalAccelMagnitudeMeanSqrt", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isValid");
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rotationRateGravityProjectionMax", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rotationRateMagnitudeMin", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "speedBasedStartTime", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "strideLengthFormBasedCalibrated", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "strideLengthFormBasedUncalibrated", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "strideLengthSpeedBased", *((double *)this + 14));
  if ((*((_DWORD *)this + 34) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
LABEL_19:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningStrideLength::readFrom(CMMsl::RunningStrideLength *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_93;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((_DWORD *)this + 34) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 2u:
        *((_DWORD *)this + 34) |= 0x200u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 3u:
        *((_DWORD *)this + 34) |= 0x4000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 4u:
        *((_DWORD *)this + 34) |= 0x400u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 5u:
        *((_DWORD *)this + 34) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 6u:
        *((_DWORD *)this + 34) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 7u:
        *((_DWORD *)this + 34) |= 0x80u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 8u:
        *((_DWORD *)this + 34) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 9u:
        *((_DWORD *)this + 34) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xAu:
        *((_DWORD *)this + 34) |= 0x1000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xBu:
        *((_DWORD *)this + 34) |= 0x800u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xCu:
        *((_DWORD *)this + 34) |= 0x2000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xDu:
        *((_DWORD *)this + 34) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0xEu:
        *((_DWORD *)this + 34) |= 0x8000u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_92;
            }
            unint64_t v30 = v20++;
            char v31 = *(unsigned char *)(v21 + v30);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
LABEL_91:
              unint64_t v2 = v30 + 1;
              goto LABEL_92;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
          goto LABEL_91;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_92;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        LODWORD(v24) = 0;
LABEL_92:
        *((_DWORD *)this + 32) = v24;
        break;
      case 0xFu:
        *((_DWORD *)this + 34) |= 0x10000u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 132) = v27;
        break;
      case 0x10u:
        *((_DWORD *)this + 34) |= 0x100u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_76;
        }
        *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
        goto LABEL_87;
      case 0x11u:
        *((_DWORD *)this + 34) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_87:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_76:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_93:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningStrideLength::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 136);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    this = PB::Writer::write(a2, *(double *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 136) & 2) == 0) {
      return this;
    }
    goto LABEL_35;
  }
LABEL_33:
  this = PB::Writer::write(a2);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_35:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningStrideLength::hash_value(CMMsl::RunningStrideLength *this)
{
  int v1 = *((_DWORD *)this + 34);
  if ((v1 & 4) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_3;
    }
LABEL_50:
    double v3 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_6;
    }
LABEL_51:
    double v4 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_52:
    double v5 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_53:
    double v6 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_54:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_55:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_56:
    double v9 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_57:
    double v10 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_27;
    }
LABEL_58:
    double v11 = 0.0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_30;
    }
LABEL_59:
    double v12 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_33;
    }
LABEL_60:
    double v13 = 0.0;
    if (v1) {
      goto LABEL_36;
    }
LABEL_61:
    double v14 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_62;
  }
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_50;
  }
LABEL_3:
  double v3 = *((double *)this + 10);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_51;
  }
LABEL_6:
  double v4 = *((double *)this + 15);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_52;
  }
LABEL_9:
  double v5 = *((double *)this + 11);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_53;
  }
LABEL_12:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_54;
  }
LABEL_15:
  double v7 = *((double *)this + 6);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_55;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_56;
  }
LABEL_21:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_57;
  }
LABEL_24:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_27:
  double v11 = *((double *)this + 13);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_59;
  }
LABEL_30:
  double v12 = *((double *)this + 12);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_60;
  }
LABEL_33:
  double v13 = *((double *)this + 14);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_61;
  }
LABEL_36:
  double v14 = *((double *)this + 1);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_39:
    uint64_t v15 = *((int *)this + 32);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_40:
    uint64_t v16 = *((unsigned __int8 *)this + 132);
    if ((v1 & 0x100) != 0) {
      goto LABEL_41;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v16 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_41:
    double v17 = *((double *)this + 9);
    if (v17 == 0.0) {
      double v17 = 0.0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_44;
    }
LABEL_65:
    double v18 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ *(void *)&v17 ^ *(void *)&v18;
  }
LABEL_64:
  double v17 = 0.0;
  if ((v1 & 2) == 0) {
    goto LABEL_65;
  }
LABEL_44:
  double v18 = *((double *)this + 2);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ v15 ^ v16 ^ *(void *)&v17 ^ *(void *)&v18;
}

void CMMsl::RunningVerticalOscillation::~RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x25A2B2850);
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this, const CMMsl::RunningVerticalOscillation *a2)
{
  *(void *)this = &unk_2706449E0;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    char v3 = 4;
    *((unsigned char *)this + 40) = 4;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((unsigned char *)this + 40) = v3;
    *((double *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((unsigned char *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((unsigned char *)a2 + 40) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, const CMMsl::RunningVerticalOscillation *a2)
{
  if ((const CMMsl::RunningVerticalOscillation *)a1 != a2)
  {
    CMMsl::RunningVerticalOscillation::RunningVerticalOscillation((CMMsl::RunningVerticalOscillation *)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    int v10 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillation *a2, CMMsl::RunningVerticalOscillation *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2706449E0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = &unk_2706449E0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = &unk_2706449E0;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    int v11 = *(_DWORD *)(a1 + 40);
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    long long v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillation::formatText(CMMsl::RunningVerticalOscillation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "displacement", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
LABEL_6:
  return MEMORY[0x270F587F0](a2);
}

uint64_t CMMsl::RunningVerticalOscillation::readFrom(CMMsl::RunningVerticalOscillation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_37;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((unsigned char *)this + 40) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_34;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((unsigned char *)this + 40) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(double *)(v3 + 8));
      if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);
  return PB::Writer::write(a2, v5);
}

uint64_t CMMsl::RunningVerticalOscillation::hash_value(CMMsl::RunningVerticalOscillation *this)
{
  if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    double v2 = 0.0;
    if (*((unsigned char *)this + 40)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 3);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if (*((unsigned char *)this + 40))
  {
LABEL_6:
    double v3 = *((double *)this + 1);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v4 = 0.0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
  }
LABEL_16:
  double v3 = 0.0;
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4;
}